/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include <boost/test/unit_test.hpp>
#include <boost/filesystem.hpp>
#include "core_kit/core_kit.hpp"
#include "core_kit/system.hpp"
#include "core_kit/hessian_engine.hpp"
#include "scf_kit/scf_kit.hpp"
#include "test_systems.hpp"
#include "test_Fock_Matrices.hpp"
#include "gto_kit/os1_integral_engine_factory.hpp"
#include <string>
#include <sstream>
#include <petsctao.h>

 using namespace boost::unit_test; 
 using namespace niedoida;

void test_HF_H2O_3_21g_cphf( ) {
    std::shared_ptr<core::System> system  = create_system_H2O_3_21G();

    std::shared_ptr<const core::FockMatrixGeneratorFactory> fm_gen = create_simple_HF_Matrix_Generator( system );
    std::unique_ptr<core::FockMatrixGenerator> FMG = fm_gen->make( system );
    const std::size_t lumo_idx = system->no_electrons( core::SPIN_ALPHA );
    arma::mat C = {{  2.55660299e-03,  1.06011924e-01,  2.22375418e-01, -1.32890076e-01,
			2.94248648e-16,  5.84205852e-02, -5.32830150e-02, -9.45638305e-01,
			9.49514175e-01, -3.77568096e-16, -2.71823350e-01,  1.73965364e-01,
			2.73688047e-01},
		 {  6.29976599e-03,  2.48498316e-02,  1.99805153e-01, -1.24072378e-01,
			1.14930396e-15,  8.28870188e-01, -1.09051987e+00,  7.62671634e-01,
		   -5.40365393e-01,  1.02289101e-15, -6.27824935e-02,  4.23644878e-01,
			3.23980955e-01},
		 {  2.55660299e-03,  1.06011924e-01, -2.22375418e-01, -1.32890076e-01,
			3.02890556e-16,  5.84205852e-02,  5.32830150e-02,  9.45638305e-01,
			9.49514175e-01,  5.49109388e-16, -2.71823350e-01, -1.73965364e-01,
			2.73688047e-01},
		 {  6.29976599e-03,  2.48498316e-02, -1.99805153e-01, -1.24072378e-01,
		   -4.31144745e-16,  8.28870188e-01,  1.09051987e+00, -7.62671634e-01,
		   -5.40365393e-01, -9.80620874e-16, -6.27824935e-02, -4.23644878e-01,
			3.23980955e-01},
		 {  9.83228215e-01, -2.30751870e-01,  1.25855616e-15, -8.65564065e-02,
			2.27673165e-16,  1.06210248e-01, -1.38370627e-15, -1.67614310e-15,
			5.80064331e-02,  1.20834001e-17, -4.47654570e-02, -2.11974790e-16,
		   -8.88563729e-02},
		 {  9.53027486e-02,  2.19141753e-01, -1.32130631e-15,  8.21879209e-02,
		   -2.66311639e-16, -3.69831328e-02,  4.61254969e-16,  4.03998487e-15,
		   -1.02993546e-01, -4.22914231e-17,  1.60572842e-01,  1.89866530e-15,
			1.62196229e+00},
		 { -3.29752791e-17,  3.03504746e-16,  3.90977242e-01,  4.11958254e-15,
			7.89842136e-16,  1.96518153e-15,  3.15144905e-01,  1.93368212e-01,
			7.67494717e-15,  5.99407084e-16, -2.37964132e-15,  1.06260344e+00,
		   -1.62383704e-15},
		 {  3.46761533e-03,  7.33627390e-02,  3.91564305e-15, -4.35526719e-01,
			9.97518583e-16, -2.27277190e-01,  2.57882729e-15,  7.21506813e-15,
		   -2.79901018e-01,  3.07626368e-16, -1.00800926e+00, -1.74060116e-15,
			1.76123167e-01},
		 { -1.40685970e-18, -3.55405242e-17,  5.80441811e-16, -1.29496919e-15,
		   -5.23457385e-01,  1.98304490e-17, -5.50599670e-16,  3.40360098e-16,
			3.86628022e-17, -1.02817342e+00, -3.01639634e-16,  5.07205485e-16,
			2.28662837e-17},
		 { -3.64186760e-02,  7.19015887e-01, -5.31985527e-15,  3.96262599e-01,
		   -9.91831217e-16, -9.69457077e-01,  1.07692421e-14, -1.52754017e-15,
			1.93135432e-02, -3.85866064e-17,  1.02328530e-01, -2.07748659e-15,
		   -1.89130529e+00},
		 { -2.77282442e-17, -7.07199355e-16,  3.80250573e-01,  3.17993403e-15,
			3.09296308e-16,  8.17652541e-15,  7.62748283e-01,  3.06257966e-01,
			7.08601370e-15, -6.85819420e-16,  3.01736968e-15, -1.36496398e+00,
			1.63308061e-15},
		 { -6.41917075e-03,  8.96466343e-02,  4.89242549e-15, -5.03176946e-01,
			1.18338662e-15, -4.86958536e-01,  4.86359457e-15,  6.28385546e-15,
		   -2.09107654e-01, -3.54289118e-16,  1.13557109e+00,  2.50849980e-15,
		   -4.78201872e-01},
		 {  3.99380122e-19, -4.31903986e-17,  8.98362469e-16, -1.55620774e-15,
		   -6.30071844e-01,  2.82905779e-17,  8.34545297e-17, -5.50985210e-16,
			3.22249446e-17,  9.66517732e-01,  3.08626350e-16, -1.94908739e-16,
			7.79772055e-18}} ;
    arma::mat P = scf::density_matrix( C, lumo_idx );
    arma::vec eps = {-20.44012614, -1.30569211, -0.65692281, -0.5321424 , -0.47829096,
	   0.2467886 ,  0.34239778,  1.16594435,  1.24943115,  1.78079349,
	   1.8829501 ,  2.01707653,  3.08180008};

    std::vector<unsigned> atoms;
    atoms.push_back( 0 );
    atoms.push_back( 1 );
	atoms.push_back( 2 );
    std::shared_ptr<const core::TwoElectronIntegralEngineFactory> two_e_ie_factory;
    two_e_ie_factory.reset( new gto::OS1TwoElectronIntegralEngineFactory( 1e-6 ) );
    std::vector< arma::mat> dS_x_occ_occ;
	std::vector< arma::mat> dS_y_occ_occ;
	std::vector< arma::mat> dS_z_occ_occ;

	std::vector< arma::mat> dFock_x_occ_occ;
	std::vector< arma::mat> dFock_y_occ_occ;
	std::vector< arma::mat> dFock_z_occ_occ;

	std::vector< arma::mat> dS_x_occ_virt;
	std::vector< arma::mat> dS_y_occ_virt;
	std::vector< arma::mat> dS_z_occ_virt;

	std::vector< arma::mat> dFock_x_occ_virt;
	std::vector< arma::mat> dFock_y_occ_virt;
	std::vector< arma::mat> dFock_z_occ_virt;

	std::vector< arma::mat> u_x_occ_virt;
	std::vector< arma::mat> u_y_occ_virt;
	std::vector< arma::mat> u_z_occ_virt;
	
	unsigned no_occ = lumo_idx;
	unsigned no_virt = C.n_rows - no_occ;
	
	std::vector< arma::mat> u_x_occ_virt_true;
	u_x_occ_virt_true.push_back( {{  3.42699098e-02, -4.41629314e-02, -1.87546329e-02, -2.71929177e-02,
   -3.30264715e-14,  1.62840601e-02, -2.50131974e-02,  2.63478185e-02},
 {  1.31348800e-01, -2.01601189e-01, -1.38544503e-01, -1.56165978e-01,
   -6.50999065e-13,  8.16998461e-02, -1.49921274e-01,  1.27305492e-01},
 { -2.80765097e-01,  2.55860495e-01, -1.84854153e-01, -8.49926281e-02,
    4.23122711e-12, -1.09079174e-02,  1.83737849e-02, -6.21271808e-02},
 {  8.03681760e-02, -2.82488416e-02,  1.55635462e-01,  1.10593424e-01,
    2.93657511e-13, -2.14194999e-02,  4.94764160e-02, -1.99018093e-02},
 {  3.95484991e-13, -3.75267517e-12,  1.57690258e-12, -4.94489936e-13,
    5.28253750e-03, -2.21156841e-12,  3.57213948e-13,  5.76222370e-13}}
 );
	u_x_occ_virt_true.push_back({{ -3.42646755e-02, -4.41711415e-02,  1.87566380e-02,  2.72134671e-02,
    2.83290648e-15,  1.62907200e-02,  2.50134734e-02, -2.63546561e-02},
 { -1.31317225e-01, -2.01631568e-01,  1.38520945e-01,  1.56254504e-01,
   -4.58341277e-14,  8.17283319e-02,  1.49918706e-01, -1.27333446e-01},
 { -2.80756623e-01, -2.55937561e-01, -1.84794211e-01, -8.50148432e-02,
    1.56959688e-12,  1.09231349e-02,  1.83963790e-02, -6.21461132e-02},
 { -8.03695313e-02, -2.82602384e-02, -1.55608215e-01, -1.10660514e-01,
   -4.91987373e-14, -2.14298503e-02, -4.94718147e-02,  1.99121895e-02},
 {  5.46871309e-13,  2.50724179e-12, -1.91474911e-13,  1.02993052e-12,
    5.28154266e-03, -5.18803330e-14,  9.40391650e-13, -3.04100853e-13}}
);
	u_x_occ_virt_true.push_back({{ -1.07843365e-05,  8.83340725e-02,  3.75112636e-02, -2.74593936e-05,
    1.46528655e-13,  7.69823715e-06, -5.00266708e-02,  6.62905696e-06},
 { -5.68919391e-05,  4.03232770e-01,  2.77065411e-01, -1.42200594e-04,
    4.99848781e-13,  3.50870039e-05, -2.99839989e-01,  2.72973828e-05},
 { -5.61521696e-01, -1.12838949e-04, -9.86275764e-05, -1.70007480e-01,
    4.30148630e-12, -2.18310558e-02,  1.28446703e-05, -1.24273290e-01},
 {  1.20843042e-06,  5.65090712e-02, -3.11243647e-01,  1.25575294e-04,
   -2.75166753e-14, -1.01538040e-05,  9.89482221e-02, -7.53638212e-06},
 { -2.66558323e-13,  1.72839745e-12,  2.91528194e-12,  1.04080689e-13,
    1.02663137e-06,  1.04429729e-12, -1.83551717e-12,  2.10014519e-13}}
);
	std::vector< arma::mat> u_y_occ_virt_true;
	u_y_occ_virt_true.push_back({{ -2.69397387e-02, -3.44338446e-02, -1.45904542e-02,  2.14503640e-02,
    9.45011865e-14,  1.26938879e-02,  2.00636506e-02, -2.07733834e-02},
 { -8.57312745e-02, -8.98051702e-02, -7.81433183e-02,  1.25603394e-01,
    1.02127767e-12,  7.82139816e-02,  7.32609868e-02, -8.22279567e-02},
 {  2.26207670e-02,  4.59653437e-02, -1.38332386e-01,  1.93226421e-01,
   -1.10362094e-13,  1.05722172e-01,  2.31893817e-02, -5.54498474e-02},
 { -2.82139430e-01, -3.22409415e-01, -1.44320252e-02,  3.27972076e-02,
   -4.20927487e-13,  1.38524116e-02,  1.00706606e-01, -8.88342082e-02},
 {  1.15328284e-12,  5.50030490e-13,  2.16870194e-12,  5.64611342e-14,
    1.07098256e-02,  2.19095956e-14,  1.76237239e-12,  3.05264306e-13}}
);
	u_y_occ_virt_true.push_back({{  2.69397387e-02,  3.44338446e-02,  1.45904542e-02,  2.14503640e-02,
   -1.57522045e-13, -1.26938879e-02,  2.00636506e-02, -2.07733835e-02},
 {  8.57312746e-02,  8.98051705e-02,  7.81433183e-02,  1.25603394e-01,
   -4.61723148e-13, -7.82139816e-02,  7.32609868e-02, -8.22279568e-02},
 {  2.26207672e-02,  4.59653437e-02, -1.38332386e-01, -1.93226421e-01,
   -4.95421237e-12,  1.05722172e-01, -2.31893816e-02,  5.54498474e-02},
 {  2.82139430e-01,  3.22409415e-01,  1.44320252e-02,  3.27972076e-02,
    6.89657277e-14, -1.38524115e-02,  1.00706605e-01, -8.88342083e-02},
 { -1.25690053e-12,  8.39478765e-13,  3.24173788e-12,  6.45296697e-13,
   -1.07098256e-02,  1.11769897e-12,  1.80990440e-12,  2.16724318e-13}}
);
	u_y_occ_virt_true.push_back({{  5.38764931e-02, -7.63213056e-12, -7.55524232e-12, -4.29193332e-02,
    5.19043291e-14, -2.53893816e-02,  4.84752577e-12, -4.15504125e-02},
 {  1.71449140e-01, -6.97387970e-11, -2.53417653e-11, -2.51253528e-01,
    4.93820199e-13, -1.56422766e-01,  1.19235599e-11, -1.64457412e-01},
 { -2.30734183e-11,  9.19612959e-02, -2.76604928e-01,  4.60616859e-12,
   -3.95654242e-12,  4.87088880e-12, -4.63750265e-02, -1.56071125e-12},
 {  5.64265268e-01,  4.04544793e-11, -1.25302918e-11, -6.56822115e-02,
    4.52421119e-14, -2.77273599e-02,  9.44455239e-12, -1.77704384e-01},
 {  1.08258595e-12,  8.20526789e-13,  9.23503511e-13, -5.42570680e-13,
    2.14186375e-02, -2.18538010e-12,  6.14540464e-13, -8.27797161e-13}}
);
	std::vector< arma::mat> u_z_occ_virt_true;
	u_z_occ_virt_true.push_back({{ -1.14756598e-06,  1.47224139e-06, -6.25187264e-07,  9.13261617e-07,
    5.50923120e-04,  5.29815246e-07,  8.33779791e-07,  8.78709158e-07},
 { -5.22196858e-06,  6.72065633e-06, -4.61781576e-06,  6.02424482e-06,
   -2.33111014e-02,  3.85902094e-06,  4.99739668e-06,  4.54038078e-06},
 { -9.58357866e-07,  2.17551525e-07,  8.27879063e-06, -8.18851619e-06,
    5.87744311e-02, -4.47962491e-06, -3.03683691e-06, -2.34964040e-06},
 { -1.98322412e-06,  9.41754213e-07,  5.18731401e-06, -4.63884342e-06,
    4.00032682e-02, -2.37586176e-06, -1.64917817e-06, -1.05832260e-06},
 { -2.64554691e-01,  3.14576314e-01, -1.44970239e-01,  1.78315527e-01,
   -3.14892623e-07,  7.09934311e-02,  1.08744919e-01,  1.18055410e-01}}
);
	u_z_occ_virt_true.push_back({{ -3.42646755e-02, -4.41711415e-02,  1.87566380e-02,  2.72134671e-02,
    6.78980422e-14,  1.62907200e-02,  2.50134734e-02, -2.63546561e-02},
 { -1.31317225e-01, -2.01631568e-01,  1.38520945e-01,  1.56254504e-01,
    1.11017331e-12,  8.17283319e-02,  1.49918706e-01, -1.27333446e-01},
 {  2.80756624e-01,  2.55937561e-01,  1.84794211e-01,  8.50148432e-02,
   -8.20631428e-12, -1.09231350e-02, -1.83963790e-02,  6.21461133e-02},
 { -8.03695314e-02, -2.82602384e-02, -1.55608214e-01, -1.10660514e-01,
   -2.06293526e-12, -2.14298503e-02, -4.94718147e-02,  1.99121894e-02},
 { -9.14021374e-13,  2.66203777e-12, -3.70205878e-12, -1.51437428e-13,
    5.28154268e-03, -7.38458120e-13,  5.80478249e-13, -4.24887382e-13}}
);
	u_z_occ_virt_true.push_back({{  2.30577817e-06, -4.07608493e-12, -4.51674114e-11, -1.83950536e-06,
   -1.10184459e-03, -1.03344016e-06, -3.86760600e-13, -1.75815516e-06},
 {  1.21322028e-05, -3.76835801e-11,  6.15207339e-11, -1.36829931e-05,
    4.66221982e-02, -9.98847125e-06, -6.11695071e-13, -9.67382747e-06},
 {  2.79131883e-11, -3.89600605e-06,  1.17207379e-05,  2.05976187e-10,
    8.15680176e-13,  3.07501591e-12,  1.96491802e-06, -4.09708733e-11},
 {  2.57508060e-06,  4.81969809e-12, -2.43017866e-10,  1.11802837e-05,
   -8.00065222e-02,  8.07503890e-06,  2.62038173e-12,  2.90606141e-06},
 { -5.29109408e-01,  2.16360585e-12, -4.38180847e-12,  3.56631056e-01,
   -9.07585921e-07,  1.41986894e-01,  2.19640281e-12,  2.36110830e-01}}
);

    core::calc_dS_dFock( system, fm_gen, C, atoms,
			    dS_x_occ_occ, dS_y_occ_occ, dS_z_occ_occ,
			    dFock_x_occ_occ, dFock_y_occ_occ, dFock_z_occ_occ,
			    dS_x_occ_virt, dS_y_occ_virt, dS_z_occ_virt,
			    dFock_x_occ_virt, dFock_y_occ_virt, dFock_z_occ_virt);

	core::energy_hessian_from_cphf( system, C, eps, atoms,
							  dS_x_occ_occ, dS_y_occ_occ, dS_z_occ_occ,
							  dS_x_occ_virt, dS_y_occ_virt, dS_z_occ_virt,
							  dFock_x_occ_virt, dFock_y_occ_virt, dFock_z_occ_virt,
							  u_x_occ_virt, u_y_occ_virt, u_z_occ_virt,
							  two_e_ie_factory, fm_gen );
	unsigned no_atoms = atoms.size();
    
	for ( unsigned atom_ind = 0; atom_ind < no_atoms ; atom_ind++ ) {
		for( unsigned row = 0; row < no_occ; row++ )
			for( unsigned col = 0; col < no_virt; col++ )
                if ( std::abs(u_x_occ_virt[atom_ind]( row, col )) > 0.001 && std::abs(u_x_occ_virt_true[atom_ind]( row, col )) > 0.001 ) 
				    BOOST_CHECK_CLOSE( std::abs(u_x_occ_virt[atom_ind]( row, col )), std::abs(u_x_occ_virt_true[atom_ind]( row, col )), 1.5e-1 );

		for( unsigned row = 0; row < no_occ; row++ )
			for( unsigned col = 0; col < no_virt; col++ )
                if ( std::abs(u_y_occ_virt[atom_ind]( row, col )) > 0.001 && std::abs(u_x_occ_virt_true[atom_ind]( row, col )) > 0.001 ) 
				    BOOST_CHECK_CLOSE( std::abs(u_y_occ_virt[atom_ind]( row, col )), std::abs(u_y_occ_virt_true[atom_ind]( row, col )), 1.5e-1 );

		for( unsigned row = 0; row < no_occ; row++ )
			for( unsigned col = 0; col < no_virt; col++ )
                if ( std::abs(u_z_occ_virt[atom_ind]( row, col )) > 0.001 && std::abs(u_x_occ_virt_true[atom_ind]( row, col )) > 0.001) 
				    BOOST_CHECK_CLOSE( std::abs(u_z_occ_virt[atom_ind]( row, col )), std::abs(u_z_occ_virt_true[atom_ind]( row, col )), 1.5e-1 );
	}
}

test_suite* test_HF_CPHF() {
    test_suite * ts=BOOST_TEST_SUITE( "CORE_KIT HF CPHF test" );
    ts->add( BOOST_TEST_CASE( & test_HF_H2O_3_21g_cphf ) );
    return ts;
}
