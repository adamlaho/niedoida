/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47956 = 0 * ae;
    const double C47955 = ae * be;
    const double C47954 = 0 * be;
    const double C47953 = 0 * be;
    const double C47952 = xA - xB;
    const double C47951 = ae + be;
    const double C47950 = 0 * be;
    const double C48057 = 0 * be;
    const double C48169 = p + q;
    const double C48168 = p * q;
    const double C48174 = xP - xQ;
    const double C48173 = bs[2];
    const double C48181 = std::pow(ae, 2);
    const double C48179 = bs[3];
    const double C48192 = bs[4];
    const double C48213 = bs[5];
    const double C48246 = bs[6];
    const double C48292 = bs[7];
    const double C48347 = yP - yQ;
    const double C48391 = zP - zQ;
    const double C123 = bs[0];
    const double C48889 = ce + de;
    const double C48888 = ce * de;
    const double C48887 = xC - xD;
    const double C48902 = yC - yD;
    const double C48911 = zC - zD;
    const double C48958 = yA - yB;
    const double C48970 = zA - zB;
    const double C47965 = 2 * C47955;
    const double C47962 = -2 * C47954;
    const double C47959 = -2 * C47953;
    const double C47964 = C47955 * C47952;
    const double C47963 = C47952 * C47954;
    const double C47960 = C47952 * C47953;
    const double C48853 = C47952 * be;
    const double C48852 = C47952 * ae;
    const double C48851 = std::pow(C47952, 2);
    const double C47966 = C47956 / C47951;
    const double C47961 = C47954 / C47951;
    const double C47958 = 2 * C47951;
    const double C47957 = std::pow(C47951, 2);
    const double C48059 = C48057 / C47951;
    const double C48170 = 2 * C48168;
    const double C48182 = C48174 * ae;
    const double C48178 = std::pow(C48174, 2);
    const double C48436 = std::pow(C48347, 2);
    const double C48494 = std::pow(C48391, 2);
    const double C48899 = 2 * C48889;
    const double C49178 = std::pow(C48889, 2);
    const double C48890 = std::pow(C48887, 2);
    const double C49177 = C48887 * de;
    const double C49176 = C48887 * ce;
    const double C48924 = std::pow(C48902, 2);
    const double C49182 = C48902 * de;
    const double C49180 = C48902 * ce;
    const double C48941 = std::pow(C48911, 2);
    const double C49183 = C48911 * de;
    const double C49181 = C48911 * ce;
    const double C48959 = std::pow(C48958, 2);
    const double C49014 = C48958 * be;
    const double C49012 = C48958 * ae;
    const double C48971 = std::pow(C48970, 2);
    const double C49054 = C48970 * be;
    const double C49052 = C48970 * ae;
    const double C47971 = ae * C47962;
    const double C47968 = ae * C47959;
    const double C47972 = C47963 / C47951;
    const double C47969 = C47960 / C47951;
    const double C49165 = std::pow(C48852, 2);
    const double C48854 = C48851 * C47955;
    const double C48865 = std::pow(C47958, -1);
    const double C49172 = std::pow(C47958, -2);
    const double C47970 = 2 * C47957;
    const double C47967 = C47957 * C47958;
    const double C48055 = 4 * C47957;
    const double C48172 = C48170 / C48169;
    const double C137 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C48170 / C48169, 2) -
          (bs[1] * C48170) / C48169) *
         std::pow(ae, 2)) /
        C47957;
    const double C124 = -(C48174 * bs[1] * C48170) / C48169;
    const double C249 = -(C48347 * bs[1] * C48170) / C48169;
    const double C361 = -(C48391 * bs[1] * C48170) / C48169;
    const double C48184 = C48179 * C48182;
    const double C48195 = C48192 * C48182;
    const double C48218 = C48213 * C48182;
    const double C48254 = C48246 * C48182;
    const double C48303 = C48292 * C48182;
    const double C130 = (-(bs[1] * C48182 * C48170) / C48169) / C47951;
    const double C48194 = C48178 * C48192;
    const double C48217 = C48178 * C48213;
    const double C48253 = C48178 * C48246;
    const double C48302 = C48178 * C48292;
    const double C49179 = std::pow(C48899, -1);
    const double C49214 = 2 * C49178;
    const double C48891 = C48890 * C48888;
    const double C48925 = C48924 * C48888;
    const double C48942 = C48941 * C48888;
    const double C48960 = C48959 * C47955;
    const double C49184 = std::pow(C49012, 2);
    const double C48972 = C48971 * C47955;
    const double C49186 = std::pow(C49052, 2);
    const double C47977 = C47952 * C47971;
    const double C47978 = 0 - C47972;
    const double C47974 = 0 - C47969;
    const double C48855 = C48854 / C47951;
    const double C47983 = C47954 / C47970;
    const double C47979 = C47953 / C47970;
    const double C47975 = C47950 / C47970;
    const double C47980 = C47971 / C47967;
    const double C47976 = C47968 / C47967;
    const double C49175 = 4 * C47967;
    const double C48058 = C47951 * C48055;
    const double C48175 = std::pow(C48172, 2);
    const double C48180 = -C48172;
    const double C48193 = std::pow(C48172, 4);
    const double C48247 = std::pow(C48172, 6);
    const double C48892 = C48891 / C48889;
    const double C48926 = C48925 / C48889;
    const double C48943 = C48942 / C48889;
    const double C48961 = C48960 / C47951;
    const double C48973 = C48972 / C47951;
    const double C47986 = C47977 / C47957;
    const double C47987 = C47978 * ae;
    const double C47985 = C47974 * ae;
    const double C48856 = -C48855;
    const double C48177 = C48173 * C48175;
    const double C138 = (2 * ae * C48175 * C48173 * C48174 * ae +
                         C48174 *
                             (C48173 * C48175 + std::pow(C48174, 2) * bs[3] *
                                                    std::pow(-C48172, 3)) *
                             std::pow(ae, 2)) /
                        C47957;
    const double C131 = (C48174 * C48175 * C48173 * C48182) / C47951 -
                        (ae * bs[1] * C48170) / (C48169 * C47951);
    const double C255 = (C48347 * C48175 * C48173 * C48182) / C47951;
    const double C367 = (C48391 * C48175 * C48173 * C48182) / C47951;
    const double C48183 = std::pow(C48180, 3);
    const double C48214 = std::pow(C48180, 5);
    const double C48293 = std::pow(C48180, 7);
    const double C48199 = C48193 * C48195;
    const double C48198 = C48194 * C48193;
    const double C48212 = C48192 * C48193;
    const double C48259 = C48247 * C48254;
    const double C48258 = C48253 * C48247;
    const double C48291 = C48246 * C48247;
    const double C48893 = -C48892;
    const double C48927 = -C48926;
    const double C48944 = -C48943;
    const double C48962 = -C48961;
    const double C48974 = -C48973;
    const double C47992 = C47987 / C47951;
    const double C47991 = C47985 / C47951;
    const double C48857 = std::exp(C48856);
    const double C48185 = C48177 * ae;
    const double C125 = C48177 * C48178 - (bs[1] * C48170) / C48169;
    const double C248 = C48347 * C48174 * C48177;
    const double C360 = C48391 * C48174 * C48177;
    const double C537 = C48177 * C48436 - (bs[1] * C48170) / C48169;
    const double C639 = C48391 * C48347 * C48177;
    const double C890 = C48177 * C48494 - (bs[1] * C48170) / C48169;
    const double C48186 = C48183 * C48184;
    const double C48191 = C48179 * C48183;
    const double C261 =
        (C48347 * (C48177 + C48178 * C48179 * C48183) * C48181) / C47957;
    const double C373 =
        (C48391 * (C48177 + C48178 * C48179 * C48183) * C48181) / C47957;
    const double C48223 = C48214 * C48218;
    const double C48222 = C48217 * C48214;
    const double C48245 = C48213 * C48214;
    const double C48309 = C48293 * C48303;
    const double C48308 = C48302 * C48293;
    const double C48202 = C48174 * C48199;
    const double C48211 = ae * C48199;
    const double C48701 = C48347 * C48199;
    const double C48221 = C48212 * C48178;
    const double C48220 = C48174 * C48212;
    const double C48219 = C48212 * ae;
    const double C48807 = C48212 * C48436;
    const double C48815 = C48347 * C48212;
    const double C48833 = C48212 * C48494;
    const double C48843 = C48391 * C48212;
    const double C48263 = C48174 * C48259;
    const double C48290 = ae * C48259;
    const double C48373 = C48347 * C48259;
    const double C48417 = C48391 * C48259;
    const double C48451 = C48259 * C48436;
    const double C48509 = C48259 * C48494;
    const double C48306 = C48291 * C48178;
    const double C48305 = C48174 * C48291;
    const double C48304 = C48291 * ae;
    const double C48894 = std::exp(C48893);
    const double C48928 = std::exp(C48927);
    const double C48945 = std::exp(C48944);
    const double C48963 = std::exp(C48962);
    const double C48975 = std::exp(C48974);
    const double C47997 = C47992 - C47979;
    const double C47996 = C47991 - C47975;
    const double C47973 = C47964 * C48857;
    const double C48859 = C48857 * C48852;
    const double C48858 = C48857 / C47958;
    const double C48867 = C48865 * C48857;
    const double C49168 = C48857 * C48853;
    const double C49211 = C49172 * C48857;
    const double C49205 = C48857 * C49165;
    const double C48187 = C48174 * C48186;
    const double C542 = (C48175 * C48173 * C48182 + C48186 * C48436) / C47951;
    const double C644 = (C48391 * C48347 * C48186) / C47951;
    const double C895 = (C48175 * C48173 * C48182 + C48186 * C48494) / C47951;
    const double C1211 =
        (2 * C48347 * C48186 + C48347 * (C48186 + C48199 * C48436)) / C47951;
    const double C1435 = (C48391 * (C48186 + C48199 * C48436)) / C47951;
    const double C2341 = (C48347 * C48186 + C48347 * C48199 * C48494) / C47951;
    const double C2788 =
        (2 * C48391 * C48186 + C48391 * (C48186 + C48199 * C48494)) / C47951;
    const double C48197 = C48174 * C48191;
    const double C48196 = C48191 * ae;
    const double C48201 = C48191 + C48198;
    const double C48798 = C48347 * C48191;
    const double C126 =
        2 * C48174 * C48177 + C48174 * (C48177 + C48191 * C48178);
    const double C247 = C48347 * (C48177 + C48191 * C48178);
    const double C359 = C48391 * (C48177 + C48191 * C48178);
    const double C1207 =
        2 * C48347 * C48177 + C48347 * (C48177 + C48191 * C48436);
    const double C1431 = C48391 * (C48177 + C48191 * C48436);
    const double C1715 =
        3 * (C48177 + C48191 * C48436) +
        C48347 * (2 * C48347 * C48191 + C48347 * (C48191 + C48212 * C48436));
    const double C1891 =
        C48391 * (2 * C48347 * C48191 + C48347 * (C48191 + C48212 * C48436));
    const double C2335 = C48347 * C48177 + C48347 * C48191 * C48494;
    const double C2338 =
        C48177 + C48191 * C48436 + (C48191 + C48212 * C48436) * C48494;
    const double C2784 =
        2 * C48391 * C48177 + C48391 * (C48177 + C48191 * C48494);
    const double C3691 =
        3 * (C48177 + C48191 * C48494) +
        C48391 * (2 * C48391 * C48191 + C48391 * (C48191 + C48212 * C48494));
    const double C9291 = C48857 * C261;
    const double C10403 = C48857 * C373;
    const double C48227 = C48174 * C48223;
    const double C48244 = ae * C48223;
    const double C48349 = C48347 * C48223;
    const double C48393 = C48391 * C48223;
    const double C48708 = C48223 * C48436;
    const double C48728 = C48223 * C48494;
    const double C1718 =
        (3 * (C48186 + C48199 * C48436) +
         C48347 * (2 * C48347 * C48199 + C48347 * (C48199 + C48223 * C48436))) /
        C47951;
    const double C1894 =
        (C48391 * (2 * C48347 * C48199 + C48347 * (C48199 + C48223 * C48436))) /
        C47951;
    const double C2344 =
        (C48186 + C48199 * C48436 + (C48199 + C48223 * C48436) * C48494) /
        C47951;
    const double C3694 =
        (3 * (C48186 + C48199 * C48494) +
         C48391 * (2 * C48391 * C48199 + C48391 * (C48199 + C48223 * C48494))) /
        C47951;
    const double C48226 = C48212 + C48222;
    const double C48257 = C48245 * C48178;
    const double C48256 = C48174 * C48245;
    const double C48255 = C48245 * ae;
    const double C48262 = C48245 + C48258;
    const double C48816 = C48245 * C48436;
    const double C48839 = C48347 * C48245;
    const double C48844 = C48245 * C48494;
    const double C48313 = C48174 * C48309;
    const double C48312 = C48291 + C48308;
    const double C48216 = 2 * C48211;
    const double C48225 = C48191 + C48221;
    const double C48224 = C48220 * ae;
    const double C48250 = 2 * C48220;
    const double C48800 = C48347 * C48220;
    const double C48808 = C48191 + C48807;
    const double C48817 = 2 * C48815;
    const double C48834 = C48191 + C48833;
    const double C48845 = 2 * C48843;
    const double C48301 = 2 * C48290;
    const double C48380 = ae * C48373;
    const double C48480 = C48391 * C48373;
    const double C48732 = C48373 * C48494;
    const double C48424 = ae * C48417;
    const double C48456 = C48223 + C48451;
    const double C48514 = C48223 + C48509;
    const double C48311 = C48245 + C48306;
    const double C48310 = C48305 * ae;
    const double C49215 = C49179 * C48894;
    const double C49213 = C48894 * C49176;
    const double C243 = -(C48894 * C49177) / C48889;
    const double C49217 = C49179 * C48928;
    const double C49216 = C48928 * C49180;
    const double C467 = -(C48928 * C49182) / C48889;
    const double C49219 = C49179 * C48945;
    const double C49218 = C48945 * C49181;
    const double C741 = -(C48945 * C49183) / C48889;
    const double C49013 = C48963 / C47958;
    const double C49015 = C48963 * C49012;
    const double C49022 = C48865 * C48963;
    const double C49191 = C48963 * C49014;
    const double C49222 = C49172 * C48963;
    const double C49220 = C48963 * C49184;
    const double C49053 = C48975 / C47958;
    const double C49055 = C48975 * C49052;
    const double C49062 = C48865 * C48975;
    const double C49198 = C48975 * C49054;
    const double C49225 = C49172 * C48975;
    const double C49223 = C48975 * C49186;
    const double C48005 = C47997 / C47958;
    const double C48002 = C47952 * C47997;
    const double C48001 = 2 * C47997;
    const double C48000 = C47996 + C47961;
    const double C47984 = C47973 / C47957;
    const double C47982 = 2 * C47973;
    const double C47981 = -4 * C47973;
    const double C48860 = C48859 * C48853;
    const double C48866 = C48859 / C47970;
    const double C49169 = C48865 * C48859;
    const double C49167 = C48859 / C47951;
    const double C1020 = (C48857 * std::pow(C48853, 2)) / C47957 + C48858;
    const double C48868 = C48867 * C48853;
    const double C49188 = C48867 / C48055;
    const double C49173 = C48852 * C48867;
    const double C49171 = 2 * C48867;
    const double C105 = C48867 / C49175;
    const double C26784 = C48867 / C47958;
    const double C49207 = C49168 / C47951;
    const double C1021 = (-2 * C48865 * C49168) / C47951;
    const double C49236 = C49205 / C47957;
    const double C48188 = C48187 + C48185;
    const double C48200 = C48197 * ae;
    const double C538 = C48174 * C48177 + C48197 * C48436;
    const double C640 = C48391 * C48347 * C48197;
    const double C891 = C48174 * C48177 + C48197 * C48494;
    const double C1206 =
        2 * C48347 * C48197 + C48347 * (C48197 + C48220 * C48436);
    const double C1430 = C48391 * (C48197 + C48220 * C48436);
    const double C2336 = C48347 * C48197 + C48347 * C48220 * C48494;
    const double C2783 =
        2 * C48391 * C48197 + C48391 * (C48197 + C48220 * C48494);
    const double C48204 = C48202 + C48196;
    const double C48203 = C48201 * C48181;
    const double C3262 =
        2 * C48391 * C48798 + C48391 * (C48798 + C48347 * C48212 * C48494);
    const double C11261 =
        3 * (C48798 + C48815 * C48494) +
        C48391 * (2 * C48391 * C48815 +
                  C48391 * (C48815 + C48347 * C48245 * C48494));
    const double C48230 = C48227 + C48219;
    const double C48252 = 2 * C48244;
    const double C48355 = ae * C48349;
    const double C48714 = 2 * C48349;
    const double C3265 =
        (2 * C48391 * C48701 + C48391 * (C48701 + C48349 * C48494)) / C47951;
    const double C11263 =
        (3 * (C48701 + C48349 * C48494) +
         C48391 * (2 * C48391 * C48349 + C48391 * (C48349 + C48373 * C48494))) /
        C47951;
    const double C48399 = ae * C48393;
    const double C48735 = 2 * C48393;
    const double C48709 = C48199 + C48708;
    const double C48729 = C48199 + C48728;
    const double C48229 = C48226 * C48181;
    const double C48261 = C48212 + C48257;
    const double C48260 = C48256 * ae;
    const double C48297 = 2 * C48256;
    const double C48810 = C48256 * C48436;
    const double C48831 = C48347 * C48256;
    const double C48836 = C48256 * C48494;
    const double C1716 =
        3 * (C48197 + C48220 * C48436) +
        C48347 * (2 * C48347 * C48220 + C48347 * (C48220 + C48256 * C48436));
    const double C1892 =
        C48391 * (2 * C48347 * C48220 + C48347 * (C48220 + C48256 * C48436));
    const double C2339 =
        C48197 + C48220 * C48436 + (C48220 + C48256 * C48436) * C48494;
    const double C3692 =
        3 * (C48197 + C48220 * C48494) +
        C48391 * (2 * C48391 * C48220 + C48391 * (C48220 + C48256 * C48494));
    const double C48267 = C48263 + C48255;
    const double C48266 = C48262 * C48181;
    const double C48818 = C48212 + C48816;
    const double C48840 = C48839 * C48494;
    const double C48846 = C48212 + C48844;
    const double C48317 = C48313 + C48304;
    const double C48316 = C48312 * C48181;
    const double C48228 = C48225 * ae;
    const double C127 = 3 * (C48177 + C48191 * C48178) +
                        C48174 * (2 * C48197 + C48174 * C48225);
    const double C246 = C48347 * (2 * C48197 + C48174 * C48225);
    const double C358 = C48391 * (2 * C48197 + C48174 * C48225);
    const double C539 = C48177 + C48191 * C48178 + C48225 * C48436;
    const double C641 = C48391 * C48347 * C48225;
    const double C892 = C48177 + C48191 * C48178 + C48225 * C48494;
    const double C3263 =
        2 * C48391 * C48800 + C48391 * (C48800 + C48347 * C48256 * C48494);
    const double C9283 =
        4 * (2 * C48798 + C48347 * C48808) +
        C48347 * (3 * C48808 + C48347 * (2 * C48347 * C48212 +
                                         C48347 * (C48212 + C48245 * C48436)));
    const double C9421 =
        C48391 * (3 * C48808 + C48347 * (2 * C48347 * C48212 +
                                         C48347 * (C48212 + C48245 * C48436)));
    const double C18110 =
        4 * (2 * C48391 * C48191 + C48391 * C48834) +
        C48391 * (3 * C48834 + C48391 * (2 * C48391 * C48212 +
                                         C48391 * (C48212 + C48245 * C48494)));
    const double C48386 = 2 * C48380;
    const double C48485 = ae * C48480;
    const double C48733 = C48349 + C48732;
    const double C48430 = 2 * C48424;
    const double C48461 = ae * C48456;
    const double C48715 = C48347 * C48456;
    const double C48519 = ae * C48514;
    const double C48736 = C48391 * C48514;
    const double C48315 = C48174 * C48311;
    const double C48314 = C48311 * ae;
    const double C112 = C49215 / C48899;
    const double C110 = C48894 / C48899 - (C49213 * C49177) / C49178;
    const double C111 = C49213 / C49214 - (C49215 * C49177) / C48889;
    const double C469 = C49213 / C48889;
    const double C535 = C49217 / C48899;
    const double C241 = C49216 / C48889;
    const double C533 = C48928 / C48899 - (C49216 * C49182) / C49178;
    const double C534 = C49216 / C49214 - (C49217 * C49182) / C48889;
    const double C889 = C49219 / C48899;
    const double C355 = C49218 / C48889;
    const double C887 = C48945 / C48899 - (C49218 * C49183) / C49178;
    const double C888 = C49218 / C49214 - (C49219 * C49183) / C48889;
    const double C7837 = (C48963 * std::pow(C49014, 2)) / C47957 + C49013;
    const double C49016 = C49015 * C49014;
    const double C49021 = C49015 / C47970;
    const double C49189 = C49015 / C47951;
    const double C49185 = C48865 * C49015;
    const double C49023 = C49022 * C49014;
    const double C49197 = C49022 / C48055;
    const double C49195 = C49012 * C49022;
    const double C49194 = 2 * C49022;
    const double C9183 = C49022 / C49175;
    const double C26787 = C49022 / C47958;
    const double C49227 = C49191 / C47951;
    const double C7838 = (-2 * C48865 * C49191) / C47951;
    const double C49241 = C49220 / C47957;
    const double C15428 = (C48975 * std::pow(C49054, 2)) / C47957 + C49053;
    const double C49056 = C49055 * C49054;
    const double C49061 = C49055 / C47970;
    const double C49190 = C49055 / C47951;
    const double C49187 = C48865 * C49055;
    const double C49063 = C49062 * C49054;
    const double C49204 = C49062 / C48055;
    const double C49202 = C49052 * C49062;
    const double C49201 = 2 * C49062;
    const double C17938 = C49062 / C49175;
    const double C36954 = C49062 / C47958;
    const double C49232 = C49198 / C47951;
    const double C15429 = (-2 * C48865 * C49198) / C47951;
    const double C49243 = C49223 / C47957;
    const double C48009 = C48002 + 0;
    const double C48007 = C47986 + C48001;
    const double C48008 = C48000 / C47958;
    const double C47990 = C47966 - C47984;
    const double C47989 = C47952 * C47982;
    const double C1031 =
        ((-C47982 / C47951) / C47958 - (0 * be) / C47951) / C47958 -
        (0 * be) / C47951;
    const double C9185 = -C47982 / C47951;
    const double C23800 = (-C47982 / C47951) / C47958 - (0 * be) / C47951;
    const double C47988 = C47981 / C47951;
    const double C48861 = C48860 / C47957;
    const double C49208 = 2 * C49169;
    const double C11539 = C49167 * C261;
    const double C13081 = C49167 * C373;
    const double C1219 = C1020 * C261;
    const double C2796 = C1020 * C373;
    const double C48869 = C48868 / C47951;
    const double C49212 = C49173 / C47970;
    const double C49237 = C49167 - C49207;
    const double C23791 = -C49207;
    const double C49251 = C49236 + C48858;
    const double C48189 = ae * C48188;
    const double C132 =
        (C48175 * C48173 * C48182 + C48174 * C48188 + C48174 * C48177 * ae) /
        C47951;
    const double C254 = (C48347 * C48188) / C47951;
    const double C366 = (C48391 * C48188) / C47951;
    const double C48206 = ae * C48204;
    const double C48205 = C48174 * C48204;
    const double C48215 = 2 * C48204;
    const double C48367 = C48347 * C48204;
    const double C48411 = C48391 * C48204;
    const double C543 = (C48188 + C48204 * C48436) / C47951;
    const double C896 = (C48188 + C48204 * C48494) / C47951;
    const double C260 =
        (2 * ae * C48347 * C48186 + C48174 * C48347 * C48203) / C47957;
    const double C372 =
        (2 * ae * C48391 * C48186 + C48174 * C48391 * C48203) / C47957;
    const double C547 = ((C48177 + C48178 * C48179 * C48183) * C48181 +
                         C48203 * std::pow(C48347, 2)) /
                        C47957;
    const double C649 = (C48391 * C48347 * C48203) / C47957;
    const double C900 = ((C48177 + C48178 * C48179 * C48183) * C48181 +
                         C48203 * std::pow(C48391, 2)) /
                        C47957;
    const double C48233 = ae * C48230;
    const double C48232 = C48174 * C48230;
    const double C48249 = 2 * C48230;
    const double C48348 = C48347 * C48230;
    const double C48392 = C48391 * C48230;
    const double C48438 = C48230 * C48436;
    const double C48496 = C48230 * C48494;
    const double C48360 = 2 * C48355;
    const double C48404 = 2 * C48399;
    const double C9285 =
        (4 * (2 * C48701 + C48347 * C48709) +
         C48347 * (3 * C48709 + C48347 * (2 * C48349 + C48347 * C48456))) /
        C47951;
    const double C9423 =
        (C48391 * (3 * C48709 + C48347 * (2 * C48349 + C48347 * C48456))) /
        C47951;
    const double C10397 =
        (2 * C48391 * C48709 + C48391 * (C48709 + C48456 * C48494)) / C47951;
    const double C11264 =
        (3 * (C48709 + C48456 * C48494) +
         C48391 * (2 * C48391 * C48456 +
                   C48391 * (C48456 + (C48259 + C48309 * C48436) * C48494))) /
        C47951;
    const double C18112 =
        (4 * (2 * C48391 * C48199 + C48391 * C48729) +
         C48391 * (3 * C48729 + C48391 * (2 * C48393 + C48391 * C48514))) /
        C47951;
    const double C48231 = C48174 * C48229;
    const double C48363 = C48347 * C48229;
    const double C48407 = C48391 * C48229;
    const double C548 = (2 * ae * (C48186 + C48199 * C48436) +
                         C48174 * (C48203 + C48229 * C48436)) /
                        C47957;
    const double C901 = (2 * ae * (C48186 + C48199 * C48494) +
                         C48174 * (C48203 + C48229 * C48494)) /
                        C47957;
    const double C1215 =
        (2 * C48347 * C48203 + C48347 * (C48203 + C48229 * C48436)) / C47957;
    const double C1439 = (C48391 * (C48203 + C48229 * C48436)) / C47957;
    const double C2792 =
        (2 * C48391 * C48203 + C48391 * (C48203 + C48229 * C48494)) / C47957;
    const double C48265 = C48174 * C48261;
    const double C48264 = C48261 * ae;
    const double C48298 = 3 * C48261;
    const double C48802 = C48347 * C48261;
    const double C1205 =
        2 * C48347 * C48225 + C48347 * (C48225 + C48261 * C48436);
    const double C1429 = C48391 * (C48225 + C48261 * C48436);
    const double C1717 =
        3 * (C48225 + C48261 * C48436) +
        C48347 * (2 * C48347 * C48261 + C48347 * (C48261 + C48311 * C48436));
    const double C1893 =
        C48391 * (2 * C48347 * C48261 + C48347 * (C48261 + C48311 * C48436));
    const double C2337 = C48347 * C48225 + C48347 * C48261 * C48494;
    const double C2340 =
        C48225 + C48261 * C48436 + (C48261 + C48311 * C48436) * C48494;
    const double C2782 =
        2 * C48391 * C48225 + C48391 * (C48225 + C48261 * C48494);
    const double C3693 =
        3 * (C48225 + C48261 * C48494) +
        C48391 * (2 * C48391 * C48261 + C48391 * (C48261 + C48311 * C48494));
    const double C48811 = C48220 + C48810;
    const double C18024 =
        3 * (C48800 + C48831 * C48494) +
        C48391 * (2 * C48391 * C48831 +
                  C48391 * (C48831 + C48347 * C48305 * C48494));
    const double C48837 = C48220 + C48836;
    const double C48272 = ae * C48267;
    const double C48270 = C48174 * C48267;
    const double C48296 = 2 * C48267;
    const double C48353 = C48347 * C48267;
    const double C48397 = C48391 * C48267;
    const double C48444 = C48267 * C48436;
    const double C48502 = C48267 * C48494;
    const double C48269 = C48174 * C48266;
    const double C48350 = C48347 * C48266;
    const double C48394 = C48391 * C48266;
    const double C48442 = C48266 * C48436;
    const double C48500 = C48266 * C48494;
    const double C48819 = C48347 * C48818;
    const double C10395 =
        2 * C48391 * C48808 + C48391 * (C48808 + C48818 * C48494);
    const double C11262 =
        3 * (C48808 + C48818 * C48494) +
        C48391 * (2 * C48391 * C48818 +
                  C48391 * (C48818 + (C48245 + C48291 * C48436) * C48494));
    const double C48841 = C48815 + C48840;
    const double C48847 = C48391 * C48846;
    const double C48323 = ae * C48317;
    const double C48320 = C48174 * C48317;
    const double C48378 = C48347 * C48317;
    const double C48422 = C48391 * C48317;
    const double C48455 = C48317 * C48436;
    const double C48513 = C48317 * C48494;
    const double C48319 = C48174 * C48316;
    const double C48374 = C48347 * C48316;
    const double C48418 = C48391 * C48316;
    const double C48452 = C48316 * C48436;
    const double C48510 = C48316 * C48494;
    const double C48490 = 2 * C48485;
    const double C18360 =
        (4 * (2 * C48391 * C48349 + C48391 * C48733) +
         C48391 * (3 * C48733 +
                   C48391 * (2 * C48480 +
                             C48391 * (C48373 + C48347 * C48309 * C48494)))) /
        C47951;
    const double C48466 = 2 * C48461;
    const double C48716 = C48714 + C48715;
    const double C48524 = 2 * C48519;
    const double C48737 = C48735 + C48736;
    const double C48318 = C48297 + C48315;
    const double C49017 = C49016 / C47957;
    const double C49221 = 2 * C49185;
    const double C49024 = C49023 / C47951;
    const double C49230 = C49195 / C47970;
    const double C49245 = C49189 - C49227;
    const double C22563 = -C49227;
    const double C49254 = C49241 + C49013;
    const double C49057 = C49056 / C47957;
    const double C49224 = 2 * C49187;
    const double C49064 = C49063 / C47951;
    const double C49235 = C49202 / C47970;
    const double C49248 = C49190 - C49232;
    const double C31480 = -C49232;
    const double C49255 = C49243 + C49053;
    const double C48015 = C48009 * be;
    const double C48014 = C48007 * be;
    const double C11385 = C47990 * C131;
    const double C47995 = C47952 * C47990;
    const double C47994 = 2 * C47990;
    const double C48056 = C47990 / C47958;
    const double C47993 = C47989 / C47951;
    const double C9196 = C9185 * C131;
    const double C9191 = C9185 * C1718;
    const double C9190 = C9185 * C1211;
    const double C9189 = C9185 * C542;
    const double C9188 = C9185 * C255;
    const double C9187 = C9185 * C130;
    const double C9432 = C9185 * C367;
    const double C9431 = C9185 * C644;
    const double C9430 = C9185 * C1435;
    const double C9429 = C9185 * C1894;
    const double C9936 = C9185 * C2344;
    const double C9935 = C9185 * C2341;
    const double C9934 = C9185 * C895;
    const double C10408 = C9185 * C2788;
    const double C10407 = C9185 * C3265;
    const double C11271 = C9185 * C11263;
    const double C11270 = C9185 * C3694;
    const double C23803 = C23800 * C131;
    const double C48862 = C48858 - C48861;
    const double C49238 = C49208 / C47951;
    const double C48870 = C48866 - C48869;
    const double C49252 = C49237 / C47958;
    const double C23957 = C23791 * C261;
    const double C25517 = C23791 * C373;
    const double C8021 = C49251 * C261;
    const double C15737 = C49251 * C373;
    const double C139 =
        ((C48177 + C48178 * C48179 * C48183) * C48181 + C48189 + C48189 +
         C48174 *
             (2 * ae * C48186 +
              C48174 *
                  (C48179 * C48183 + C48178 * bs[4] * std::pow(C48172, 4)) *
                  C48181)) /
        C47957;
    const double C1035 = C1031 * C132;
    const double C9197 = C9185 * C132;
    const double C11398 = C47990 * C132;
    const double C23816 = C23800 * C132;
    const double C9195 = C9185 * C254;
    const double C11387 = C47990 * C254;
    const double C23805 = C23800 * C254;
    const double C9433 = C9185 * C366;
    const double C11738 = C47990 * C366;
    const double C24156 = C23800 * C366;
    const double C48207 = C48186 + C48205;
    const double C48368 = ae * C48367;
    const double C645 = (C48391 * C48367) / C47951;
    const double C48412 = ae * C48411;
    const double C9194 = C9185 * C543;
    const double C11389 = C47990 * C543;
    const double C23807 = C23800 * C543;
    const double C10051 = C9185 * C896;
    const double C12513 = C47990 * C896;
    const double C24931 = C23800 * C896;
    const double C1234 = C1020 * C260;
    const double C1221 = C1021 * C260;
    const double C8036 = C49251 * C260;
    const double C9300 = C48857 * C260;
    const double C11553 = C49167 * C260;
    const double C11541 = C48867 * C260;
    const double C23971 = C23791 * C260;
    const double C23959 = C48867 * C260;
    const double C2811 = C1020 * C372;
    const double C2798 = C1021 * C372;
    const double C10410 = C48857 * C372;
    const double C13085 = C49167 * C372;
    const double C13083 = C48867 * C372;
    const double C15752 = C49251 * C372;
    const double C25529 = C23791 * C372;
    const double C25519 = C48867 * C372;
    const double C1225 = C1020 * C547;
    const double C8027 = C49251 * C547;
    const double C9293 = C48857 * C547;
    const double C11543 = C49167 * C547;
    const double C23961 = C23791 * C547;
    const double C1912 = C1020 * C649;
    const double C8684 = C49251 * C649;
    const double C9684 = C48857 * C649;
    const double C12133 = C49167 * C649;
    const double C24551 = C23791 * C649;
    const double C2802 = C1020 * C900;
    const double C10405 = C48857 * C900;
    const double C14204 = C49167 * C900;
    const double C15743 = C49251 * C900;
    const double C25521 = C23791 * C900;
    const double C48243 = C48229 + C48233;
    const double C48235 = C48199 + C48232;
    const double C48354 = ae * C48348;
    const double C48471 = C48391 * C48348;
    const double C48527 = 2 * C48348;
    const double C2342 = (C48367 + C48348 * C48494) / C47951;
    const double C48398 = ae * C48392;
    const double C48590 = 2 * C48392;
    const double C48439 = C48204 + C48438;
    const double C48497 = C48204 + C48496;
    const double C9298 = C9185 * C9285;
    const double C9428 = C9185 * C9423;
    const double C10406 = C9185 * C10397;
    const double C11272 = C9185 * C11264;
    const double C18119 = C9185 * C18112;
    const double C48234 = C48216 + C48231;
    const double C650 =
        (2 * ae * C48391 * C48347 * C48199 + C48174 * C48391 * C48363) / C47957;
    const double C2347 = (C48347 * C48203 + C48363 * C48494) / C47957;
    const double C1240 = C1020 * C548;
    const double C1227 = C1021 * C548;
    const double C8042 = C49251 * C548;
    const double C9302 = C48857 * C548;
    const double C11557 = C49167 * C548;
    const double C11545 = C48867 * C548;
    const double C23975 = C23791 * C548;
    const double C23963 = C48867 * C548;
    const double C2817 = C1020 * C901;
    const double C2804 = C1021 * C901;
    const double C10412 = C48857 * C901;
    const double C14202 = C48867 * C901;
    const double C15758 = C49251 * C901;
    const double C19153 = C49167 * C901;
    const double C25533 = C23791 * C901;
    const double C25523 = C48867 * C901;
    const double C1731 = C1020 * C1215;
    const double C8512 = C49251 * C1215;
    const double C9295 = C48857 * C1215;
    const double C11547 = C49167 * C1215;
    const double C23965 = C23791 * C1215;
    const double C1906 = C1020 * C1439;
    const double C8678 = C49251 * C1439;
    const double C9682 = C48857 * C1439;
    const double C12129 = C49167 * C1439;
    const double C24547 = C23791 * C1439;
    const double C3707 = C1020 * C2792;
    const double C11269 = C48857 * C2792;
    const double C16630 = C49251 * C2792;
    const double C20250 = C49167 * C2792;
    const double C26662 = C23791 * C2792;
    const double C48268 = C48250 + C48265;
    const double C3264 =
        2 * C48391 * C48802 + C48391 * (C48802 + C48347 * C48311 * C48494);
    const double C9284 =
        4 * (2 * C48800 + C48347 * C48811) +
        C48347 * (3 * C48811 + C48347 * (2 * C48347 * C48256 +
                                         C48347 * (C48256 + C48305 * C48436)));
    const double C9422 =
        C48391 * (3 * C48811 + C48347 * (2 * C48347 * C48256 +
                                         C48347 * (C48256 + C48305 * C48436)));
    const double C10203 =
        2 * C48800 + C48347 * C48811 +
        (2 * C48347 * C48256 + C48347 * (C48256 + C48305 * C48436)) * C48494;
    const double C10396 =
        2 * C48391 * C48811 +
        C48391 * (C48811 + (C48256 + C48305 * C48436) * C48494);
    const double C18111 =
        4 * (2 * C48391 * C48220 + C48391 * C48837) +
        C48391 * (3 * C48837 + C48391 * (2 * C48391 * C48256 +
                                         C48391 * (C48256 + C48305 * C48494)));
    const double C48289 = C48266 + C48272;
    const double C48274 = C48223 + C48270;
    const double C48359 = ae * C48353;
    const double C48476 = C48391 * C48353;
    const double C48538 = 2 * C48353;
    const double C48571 = C48353 * C48494;
    const double C48403 = ae * C48397;
    const double C48601 = 2 * C48397;
    const double C48447 = C48230 + C48444;
    const double C48505 = C48230 + C48502;
    const double C48273 = C48252 + C48269;
    const double C48356 = C48174 * C48350;
    const double C48474 = C48391 * C48350;
    const double C48534 = 2 * C48350;
    const double C2348 = (2 * ae * (C48347 * C48199 + C48349 * C48494) +
                          C48174 * (C48363 + C48350 * C48494)) /
                         C47957;
    const double C3268 =
        (2 * C48391 * C48363 + C48391 * (C48363 + C48350 * C48494)) / C47957;
    const double C48400 = C48174 * C48394;
    const double C48597 = 2 * C48394;
    const double C48445 = C48229 + C48442;
    const double C48503 = C48229 + C48500;
    const double C48820 = C48817 + C48819;
    const double C18359 =
        4 * (2 * C48391 * C48815 + C48391 * C48841) +
        C48391 * (3 * C48841 +
                  C48391 * (2 * C48391 * C48839 +
                            C48391 * (C48839 + C48347 * C48291 * C48494)));
    const double C48848 = C48845 + C48847;
    const double C48325 = C48259 + C48320;
    const double C48385 = ae * C48378;
    const double C48484 = C48391 * C48378;
    const double C48583 = C48378 * C48494;
    const double C48429 = ae * C48422;
    const double C48460 = C48267 + C48455;
    const double C48518 = C48267 + C48513;
    const double C48324 = C48301 + C48319;
    const double C48381 = C48174 * C48374;
    const double C48481 = C48391 * C48374;
    const double C48581 = C48374 * C48494;
    const double C48425 = C48174 * C48418;
    const double C48457 = C48266 + C48452;
    const double C48515 = C48266 + C48510;
    const double C18365 = C9185 * C18360;
    const double C9582 =
        (5 * (3 * C48709 + C48347 * C48716) +
         C48347 * (4 * C48716 +
                   C48347 * (3 * C48456 +
                             C48347 * (2 * C48373 +
                                       C48347 * (C48259 + C48309 * C48436))))) /
        C47951;
    const double C9674 =
        (C48391 * (4 * C48716 +
                   C48347 * (3 * C48456 +
                             C48347 * (2 * C48373 +
                                       C48347 * (C48259 + C48309 * C48436))))) /
        C47951;
    const double C9929 =
        (2 * C48701 + C48347 * C48709 + C48716 * C48494) / C47951;
    const double C9930 =
        (3 * C48709 + C48347 * C48716 +
         (3 * C48456 +
          C48347 * (2 * C48373 + C48347 * (C48259 + C48309 * C48436))) *
             C48494) /
        C47951;
    const double C10840 =
        (2 * C48391 * C48716 +
         C48391 * (C48716 + (2 * C48373 + C48347 * (C48259 + C48309 * C48436)) *
                                C48494)) /
        C47951;
    const double C18595 =
        (5 * (3 * C48729 + C48391 * C48737) +
         C48391 * (4 * C48737 +
                   C48391 * (3 * C48514 +
                             C48391 * (2 * C48417 +
                                       C48391 * (C48259 + C48309 * C48494))))) /
        C47951;
    const double C48322 = C48174 * C48318;
    const double C48321 = C48318 * ae;
    const double C49018 = C49013 - C49017;
    const double C49242 = C49221 / C47951;
    const double C49025 = C49021 - C49024;
    const double C49256 = C49245 / C47958;
    const double C49058 = C49053 - C49057;
    const double C49244 = C49224 / C47951;
    const double C49065 = C49061 - C49064;
    const double C49258 = C49248 / C47958;
    const double C48020 = C48015 / C47951;
    const double C48019 = C48014 / C47951;
    const double C47999 = C47995 + C48867;
    const double C48060 = C48056 - C48059;
    const double C7845 = C48056 + (0 * ae) / C47951;
    const double C47998 = C48857 - C47993;
    const double C26990 = C48862 * C548;
    const double C26984 = C48862 * C260;
    const double C26975 = C48862 * C547;
    const double C26969 = C48862 * C261;
    const double C27460 = C48862 * C1215;
    const double C27632 = C48862 * C649;
    const double C27626 = C48862 * C1439;
    const double C28627 = C48862 * C372;
    const double C28621 = C48862 * C373;
    const double C29748 = C48862 * C900;
    const double C37252 = C48862 * C901;
    const double C38079 = C48862 * C2792;
    const double C49166 = C48862 * C48852;
    const double C49210 = C49171 + C48862;
    const double C8029 = C49238 * C548;
    const double C8023 = C49238 * C260;
    const double C15745 = C49238 * C901;
    const double C15739 = C49238 * C372;
    const double C26977 = C48870 * C548;
    const double C26971 = C48870 * C260;
    const double C28623 = C48870 * C372;
    const double C29746 = C48870 * C901;
    const double C49174 = C48870 / C47958;
    const double C49170 = C48870 * C48852;
    const double C3818 = C49252 - (C48862 * C48853) / C47951;
    const double C48208 = C48207 + C48200;
    const double C259 =
        (C48347 * C48203 + C48368 + C48368 +
         C48174 * (2 * ae * C48347 * C48199 + C48174 * C48363)) /
        C47957;
    const double C9434 = C9185 * C645;
    const double C11736 = C47990 * C645;
    const double C24154 = C23800 * C645;
    const double C371 =
        (C48391 * C48203 + C48412 + C48412 +
         C48174 * (2 * ae * C48391 * C48199 + C48174 * C48407)) /
        C47957;
    const double C48251 = C48243 + C48233;
    const double C48236 = C48235 + C48224;
    const double C48472 = ae * C48471;
    const double C10050 = C9185 * C2342;
    const double C12515 = C47990 * C2342;
    const double C24933 = C23800 * C2342;
    const double C48440 = ae * C48439;
    const double C1210 = (2 * C48367 + C48347 * C48439) / C47951;
    const double C1434 = (C48391 * C48439) / C47951;
    const double C48498 = ae * C48497;
    const double C2787 = (2 * C48411 + C48391 * C48497) / C47951;
    const double C1910 = C1021 * C650;
    const double C6445 = C1020 * C650;
    const double C8682 = C49238 * C650;
    const double C10217 = C48857 * C650;
    const double C12131 = C48867 * C650;
    const double C12867 = C49167 * C650;
    const double C24549 = C48867 * C650;
    const double C25295 = C23791 * C650;
    const double C27630 = C48870 * C650;
    const double C28412 = C48862 * C650;
    const double C40039 = C49251 * C650;
    const double C3273 = C1020 * C2347;
    const double C10210 = C48857 * C2347;
    const double C13653 = C49167 * C2347;
    const double C16205 = C49251 * C2347;
    const double C25291 = C23791 * C2347;
    const double C29196 = C48862 * C2347;
    const double C48271 = C48268 * ae;
    const double C128 = 4 * (2 * C48197 + C48174 * C48225) +
                        C48174 * (3 * C48225 + C48174 * C48268);
    const double C245 = C48347 * (3 * C48225 + C48174 * C48268);
    const double C357 = C48391 * (3 * C48225 + C48174 * C48268);
    const double C540 = 2 * C48197 + C48174 * C48225 + C48268 * C48436;
    const double C642 = C48391 * C48347 * C48268;
    const double C893 = 2 * C48197 + C48174 * C48225 + C48268 * C48494;
    const double C1208 =
        2 * C48347 * C48268 + C48347 * (C48268 + C48318 * C48436);
    const double C1432 = C48391 * (C48268 + C48318 * C48436);
    const double C2630 = C48347 * C48268 + C48347 * C48318 * C48494;
    const double C2785 =
        2 * C48391 * C48268 + C48391 * (C48268 + C48318 * C48494);
    const double C48300 = C48289 + C48272;
    const double C48276 = C48274 + C48260;
    const double C48372 = C48350 + C48359;
    const double C48478 = ae * C48476;
    const double C48611 = 2 * C48476;
    const double C48572 = C48348 + C48571;
    const double C48416 = C48394 + C48403;
    const double C48449 = ae * C48447;
    const double C48528 = C48347 * C48447;
    const double C48546 = C48391 * C48447;
    const double C48559 = 3 * C48447;
    const double C2345 = (C48439 + C48447 * C48494) / C47951;
    const double C48507 = ae * C48505;
    const double C48591 = C48391 * C48505;
    const double C48618 = 3 * C48505;
    const double C48275 = C48174 * C48273;
    const double C48288 = 2 * C48273;
    const double C48361 = C48360 + C48356;
    const double C3275 = C1021 * C2348;
    const double C10219 = C48857 * C2348;
    const double C13651 = C48867 * C2348;
    const double C16207 = C49238 * C2348;
    const double C18949 = C49167 * C2348;
    const double C25299 = C23791 * C2348;
    const double C25293 = C48867 * C2348;
    const double C29194 = C48870 * C2348;
    const double C10848 = C48857 * C3268;
    const double C19704 = C49167 * C3268;
    const double C26113 = C23791 * C3268;
    const double C48405 = C48404 + C48400;
    const double C1214 =
        (2 * ae * (2 * C48347 * C48199 + C48347 * (C48199 + C48223 * C48436)) +
         C48174 * (2 * C48363 + C48347 * C48445)) /
        C47957;
    const double C1438 = (2 * ae * C48391 * (C48199 + C48223 * C48436) +
                          C48174 * C48391 * C48445) /
                         C47957;
    const double C1721 = (3 * (C48203 + C48229 * C48436) +
                          C48347 * (2 * C48363 + C48347 * C48445)) /
                         C47957;
    const double C1897 = (C48391 * (2 * C48363 + C48347 * C48445)) / C47957;
    const double C2350 = (C48203 + C48229 * C48436 + C48445 * C48494) / C47957;
    const double C2791 =
        (2 * ae * (2 * C48391 * C48199 + C48391 * (C48199 + C48223 * C48494)) +
         C48174 * (2 * C48407 + C48391 * C48503)) /
        C47957;
    const double C3697 = (3 * (C48203 + C48229 * C48494) +
                          C48391 * (2 * C48407 + C48391 * C48503)) /
                         C47957;
    const double C9581 =
        5 * (3 * C48808 + C48347 * C48820) +
        C48347 * (4 * C48820 +
                  C48347 * (3 * C48818 +
                            C48347 * (2 * C48347 * C48245 +
                                      C48347 * (C48245 + C48291 * C48436))));
    const double C9673 =
        C48391 * (4 * C48820 +
                  C48347 * (3 * C48818 +
                            C48347 * (2 * C48347 * C48245 +
                                      C48347 * (C48245 + C48291 * C48436))));
    const double C9927 = 2 * C48798 + C48347 * C48808 + C48820 * C48494;
    const double C9928 =
        3 * C48808 + C48347 * C48820 +
        (3 * C48818 +
         C48347 * (2 * C48347 * C48245 + C48347 * (C48245 + C48291 * C48436))) *
            C48494;
    const double C10839 =
        2 * C48391 * C48820 +
        C48391 * (C48820 +
                  (2 * C48347 * C48245 + C48347 * (C48245 + C48291 * C48436)) *
                      C48494);
    const double C18594 =
        5 * (3 * C48834 + C48391 * C48848) +
        C48391 * (4 * C48848 +
                  C48391 * (3 * C48846 +
                            C48391 * (2 * C48391 * C48245 +
                                      C48391 * (C48245 + C48291 * C48494))));
    const double C48328 = C48325 + C48310;
    const double C48489 = ae * C48484;
    const double C48586 = C48353 + C48583;
    const double C48465 = ae * C48460;
    const double C48539 = C48347 * C48460;
    const double C48553 = C48391 * C48460;
    const double C48577 = C48460 * C48494;
    const double C48523 = ae * C48518;
    const double C48602 = C48391 * C48518;
    const double C48327 = C48174 * C48324;
    const double C48387 = C48386 + C48381;
    const double C48486 = C48174 * C48481;
    const double C48584 = C48350 + C48581;
    const double C48431 = C48430 + C48425;
    const double C48462 = C48174 * C48457;
    const double C48535 = C48347 * C48457;
    const double C48551 = C48391 * C48457;
    const double C2351 =
        (2 * ae * (C48199 + C48223 * C48436 + C48456 * C48494) +
         C48174 * (C48445 + C48457 * C48494)) /
        C47957;
    const double C9426 =
        (2 * ae * C48391 *
             (3 * C48456 +
              C48347 * (2 * C48373 + C48347 * (C48259 + C48309 * C48436))) +
         C48174 * C48391 *
             (3 * C48457 +
              C48347 *
                  (2 * C48374 +
                   C48347 * (C48316 + (C48292 * C48293 +
                                       C48178 * bs[8] * std::pow(C48172, 8)) *
                                          C48181 * C48436)))) /
        C47957;
    const double C10399 =
        (2 * C48391 * C48445 + C48391 * (C48445 + C48457 * C48494)) / C47957;
    const double C48520 = C48174 * C48515;
    const double C48598 = C48391 * C48515;
    const double C9587 = C9185 * C9582;
    const double C9685 = C9185 * C9674;
    const double C9937 = C9185 * C9929;
    const double C9938 = C9185 * C9930;
    const double C10851 = C9185 * C10840;
    const double C18600 = C9185 * C18595;
    const double C48326 = C48298 + C48322;
    const double C49192 = C49018 * C49012;
    const double C49229 = C49194 + C49018;
    const double C49196 = C49025 / C47958;
    const double C49193 = C49025 * C49012;
    const double C11375 = C49256 - (C49018 * C49014) / C47951;
    const double C49199 = C49058 * C49052;
    const double C49234 = C49201 + C49058;
    const double C49203 = C49065 / C47958;
    const double C49200 = C49065 * C49052;
    const double C20358 = C49258 - (C49058 * C49054) / C47951;
    const double C48027 = C48008 - C48020;
    const double C48026 = C47976 - C48019;
    const double C48006 = C47999 * be;
    const double C26797 = C48060 * C132;
    const double C48061 = 2 * C48060;
    const double C122 =
        (C48060 / C47958 + (0 * ae) / C47951) / C47958 - (0 * be) / C47951;
    const double C3831 = C48060 / C47958 - (0 * be) / C47951;
    const double C22572 = C48060 / C47958 + (0 * ae) / C47951;
    const double C7849 = C7845 * C132;
    const double C48004 = C47998 * ae;
    const double C48003 = C47998 * C47965;
    const double C1027 =
        ((-C47953 / C47951) / C47958 - (C47978 * be) / C47951) / C47958 -
        ((C47952 * ((-C47961) / C47958 - (C47998 * be) / C47951) + C23791) *
         be) /
            C47951 +
        (-C47982 / C47951) / C47958 - (0 * be) / C47951;
    const double C1029 =
        ((-C47961) / C47958 - (C47998 * be) / C47951) / C47958 -
        ((C47952 * ((-C47982 / C47951) / C47958 - (0 * be) / C47951) + C48867) *
         be) /
            C47951;
    const double C23798 = (-C47961) / C47958 - (C47998 * be) / C47951;
    const double C49206 = C49166 / C47951;
    const double C49239 = C49210 / C47958;
    const double C49240 = C49212 + C49174;
    const double C3820 = C49174 - C48868 / C47970;
    const double C49209 = C49170 / C47951;
    const double C4000 = C3818 * C260;
    const double C3988 = C3818 * C261;
    const double C4416 = C3818 * C547;
    const double C4570 = C3818 * C649;
    const double C5326 = C3818 * C372;
    const double C5318 = C3818 * C373;
    const double C6084 = C3818 * C900;
    const double C48209 = ae * C48208;
    const double C133 =
        (2 * C48188 + C48174 * C48208 + (C48177 + C48191 * C48178) * ae) /
        C47951;
    const double C253 = (C48347 * C48208) / C47951;
    const double C365 = (C48391 * C48208) / C47951;
    const double C1236 = C1021 * C259;
    const double C1223 = C49211 * C259;
    const double C8038 = C49238 * C259;
    const double C8025 = C49211 * C259;
    const double C11555 = C48867 * C259;
    const double C23973 = C48867 * C259;
    const double C26986 = C48870 * C259;
    const double C26973 = C26784 * C259;
    const double C2813 = C1021 * C371;
    const double C2800 = C49211 * C371;
    const double C13087 = C48867 * C371;
    const double C15754 = C49238 * C371;
    const double C15741 = C49211 * C371;
    const double C25531 = C48867 * C371;
    const double C28629 = C48870 * C371;
    const double C28625 = C26784 * C371;
    const double C48238 = ae * C48236;
    const double C48237 = C48174 * C48236;
    const double C48248 = 3 * C48236;
    const double C48364 = C48347 * C48236;
    const double C48408 = C48391 * C48236;
    const double C544 = (C48208 + C48236 * C48436) / C47951;
    const double C897 = (C48208 + C48236 * C48494) / C47951;
    const double C651 =
        (C48391 * C48363 + C48472 + C48472 +
         C48174 * (2 * ae * C48391 * C48349 + C48174 * C48391 * C48350)) /
        C47957;
    const double C549 = (C48203 + C48229 * C48436 + C48440 + C48440 +
                         C48174 * (2 * ae * (C48199 + C48223 * C48436) +
                                   C48174 * (C48229 + C48266 * C48436))) /
                        C47957;
    const double C9193 = C9185 * C1210;
    const double C11391 = C47990 * C1210;
    const double C23809 = C23800 * C1210;
    const double C9435 = C9185 * C1434;
    const double C11734 = C47990 * C1434;
    const double C24152 = C23800 * C1434;
    const double C902 = (C48203 + C48229 * C48494 + C48498 + C48498 +
                         C48174 * (2 * ae * (C48199 + C48223 * C48494) +
                                   C48174 * (C48229 + C48266 * C48494))) /
                        C47957;
    const double C10413 = C9185 * C2787;
    const double C14206 = C47990 * C2787;
    const double C25526 = C23800 * C2787;
    const double C48279 = ae * C48276;
    const double C48278 = C48174 * C48276;
    const double C48295 = 3 * C48276;
    const double C48352 = C48347 * C48276;
    const double C48396 = C48391 * C48276;
    const double C48443 = C48276 * C48436;
    const double C48501 = C48276 * C48494;
    const double C48379 = C48372 + C48359;
    const double C48573 = ae * C48572;
    const double C3266 = (2 * C48471 + C48391 * C48572) / C47951;
    const double C48423 = C48416 + C48403;
    const double C48529 = C48527 + C48528;
    const double C48547 = ae * C48546;
    const double C10049 = C9185 * C2345;
    const double C12517 = C47990 * C2345;
    const double C24935 = C23800 * C2345;
    const double C48592 = C48590 + C48591;
    const double C48277 = C48251 + C48275;
    const double C1729 = C1021 * C1214;
    const double C8510 = C49238 * C1214;
    const double C9304 = C48857 * C1214;
    const double C11561 = C49167 * C1214;
    const double C11549 = C48867 * C1214;
    const double C23979 = C23791 * C1214;
    const double C23967 = C48867 * C1214;
    const double C27458 = C48870 * C1214;
    const double C1904 = C1021 * C1438;
    const double C8676 = C49238 * C1438;
    const double C10222 = C48857 * C1438;
    const double C12127 = C48867 * C1438;
    const double C12871 = C49167 * C1438;
    const double C24545 = C48867 * C1438;
    const double C27624 = C48870 * C1438;
    const double C30107 = C23791 * C1438;
    const double C9297 = C48857 * C1721;
    const double C11981 = C49167 * C1721;
    const double C24399 = C23791 * C1721;
    const double C9680 = C48857 * C1897;
    const double C12125 = C49167 * C1897;
    const double C24543 = C23791 * C1897;
    const double C10214 = C48857 * C2350;
    const double C13648 = C49167 * C2350;
    const double C25907 = C23791 * C2350;
    const double C3705 = C1021 * C2791;
    const double C16628 = C49238 * C2791;
    const double C18121 = C48857 * C2791;
    const double C20248 = C48867 * C2791;
    const double C20626 = C49167 * C2791;
    const double C26660 = C48867 * C2791;
    const double C34501 = C23791 * C2791;
    const double C38077 = C48870 * C2791;
    const double C18118 = C48857 * C3697;
    const double C21357 = C49167 * C3697;
    const double C35232 = C23791 * C3697;
    const double C48332 = ae * C48328;
    const double C48331 = C48174 * C48328;
    const double C48377 = C48347 * C48328;
    const double C48421 = C48391 * C48328;
    const double C48454 = C48328 * C48436;
    const double C48512 = C48328 * C48494;
    const double C48588 = ae * C48586;
    const double C48612 = C48391 * C48586;
    const double C48542 = C48538 + C48539;
    const double C48555 = ae * C48553;
    const double C48578 = C48447 + C48577;
    const double C48605 = C48601 + C48602;
    const double C48330 = C48300 + C48327;
    const double C48388 = C48174 * C48387;
    const double C48491 = C48490 + C48486;
    const double C3269 =
        (2 * ae * (2 * C48391 * C48349 + C48391 * (C48349 + C48373 * C48494)) +
         C48174 * (2 * C48474 + C48391 * C48584)) /
        C47957;
    const double C11265 = (3 * (C48363 + C48350 * C48494) +
                           C48391 * (2 * C48474 + C48391 * C48584)) /
                          C47957;
    const double C18026 =
        (2 * ae *
             (3 * (C48349 + C48373 * C48494) +
              C48391 *
                  (2 * C48480 + C48391 * (C48373 + C48347 * C48309 * C48494))) +
         C48174 * (3 * C48584 +
                   C48391 * (2 * C48481 +
                             C48391 * (C48374 + C48347 *
                                                    (C48292 * C48293 +
                                                     C48178 * bs[8] *
                                                         std::pow(C48172, 8)) *
                                                    C48181 * C48494)))) /
        C47957;
    const double C18361 =
        (4 * (2 * C48474 + C48391 * C48584) +
         C48391 * (3 * C48584 +
                   C48391 * (2 * C48481 +
                             C48391 * (C48374 + C48347 *
                                                    (C48292 * C48293 +
                                                     C48178 * bs[8] *
                                                         std::pow(C48172, 8)) *
                                                    C48181 * C48494)))) /
        C47957;
    const double C48432 = C48174 * C48431;
    const double C48467 = C48466 + C48462;
    const double C48540 = C48534 + C48535;
    const double C10400 =
        (2 * ae *
             (2 * C48391 * C48456 +
              C48391 * (C48456 + (C48259 + C48309 * C48436) * C48494)) +
         C48174 * (2 * C48551 +
                   C48391 * (C48457 +
                             (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436) *
                                 C48494))) /
        C47957;
    const double C11266 =
        (3 * (C48445 + C48457 * C48494) +
         C48391 * (2 * C48551 +
                   C48391 * (C48457 +
                             (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436) *
                                 C48494))) /
        C47957;
    const double C10224 = C48857 * C2351;
    const double C13646 = C48867 * C2351;
    const double C25905 = C48867 * C2351;
    const double C10844 = C48857 * C10399;
    const double C48525 = C48524 + C48520;
    const double C48603 = C48597 + C48598;
    const double C48329 = C48326 * ae;
    const double C129 = 5 * (3 * C48225 + C48174 * C48268) +
                        C48174 * (4 * C48268 + C48174 * C48326);
    const double C250 = C48347 * (4 * C48268 + C48174 * C48326);
    const double C362 = C48391 * (4 * C48268 + C48174 * C48326);
    const double C541 = 3 * C48225 + C48174 * C48268 + C48326 * C48436;
    const double C643 = C48391 * C48347 * C48326;
    const double C894 = 3 * C48225 + C48174 * C48268 + C48326 * C48494;
    const double C49226 = C49192 / C47951;
    const double C49246 = C49229 / C47958;
    const double C49247 = C49230 + C49196;
    const double C11377 = C49196 - C49023 / C47970;
    const double C49228 = C49193 / C47951;
    const double C49231 = C49199 / C47951;
    const double C49249 = C49234 / C47958;
    const double C49250 = C49235 + C49203;
    const double C20360 = C49203 - C49063 / C47970;
    const double C49233 = C49200 / C47951;
    const double C48013 = C48006 / C47951;
    const double C48011 = C48004 / C47951;
    const double C48012 = C48003 / C47970;
    const double C48010 = C47952 * C48003;
    const double C121 = (-C48003 / C47951) / (4 * C47957 * std::pow(C47958, 2));
    const double C1030 = (-C48003 / C47951) / C48055;
    const double C3830 = (-C48003 / C47951) / (4 * C47967);
    const double C7844 = (-C48003 / C47951) / C48055;
    const double C9184 = -C48003 / C47951;
    const double C11381 = (-C48003 / C47951) / C47958;
    const double C22571 = (-C48003 / C47951) / (4 * C47967);
    const double C23799 = (-C48003 / C47951) / C47958;
    const double C26792 = (-C48003 / C47951) / C48055;
    const double C1051 = C1027 * C132;
    const double C1050 = C1027 * C131;
    const double C1047 = C1027 * C254;
    const double C1044 = C1027 * C543;
    const double C1039 = C1027 * C542;
    const double C1036 = C1027 * C255;
    const double C1033 = C1027 * C130;
    const double C1245 = C1027 * C1210;
    const double C1232 = C1027 * C1211;
    const double C1457 = C1027 * C1434;
    const double C1454 = C1027 * C645;
    const double C1451 = C1027 * C366;
    const double C1450 = C1027 * C367;
    const double C1447 = C1027 * C644;
    const double C1444 = C1027 * C1435;
    const double C1732 = C1027 * C1718;
    const double C1913 = C1027 * C1894;
    const double C2360 = C1027 * C2344;
    const double C2357 = C1027 * C2341;
    const double C2354 = C1027 * C895;
    const double C2478 = C1027 * C896;
    const double C2634 = C1027 * C2342;
    const double C2822 = C1027 * C2787;
    const double C2809 = C1027 * C2788;
    const double C3278 = C1027 * C3265;
    const double C3708 = C1027 * C3694;
    const double C1049 = C1029 * C132;
    const double C1040 = C1029 * C543;
    const double C1037 = C1029 * C254;
    const double C1034 = C1029 * C131;
    const double C1231 = C1029 * C1210;
    const double C1449 = C1029 * C366;
    const double C1446 = C1029 * C645;
    const double C1443 = C1029 * C1434;
    const double C2361 = C1029 * C2345;
    const double C2358 = C1029 * C2342;
    const double C2355 = C1029 * C896;
    const double C2808 = C1029 * C2787;
    const double C23818 = C23798 * C132;
    const double C23817 = C23798 * C131;
    const double C23815 = C23798 * C254;
    const double C23813 = C23798 * C543;
    const double C23811 = C23798 * C1210;
    const double C23808 = C23798 * C1211;
    const double C23806 = C23798 * C542;
    const double C23804 = C23798 * C255;
    const double C23802 = C23798 * C130;
    const double C23969 = C23798 * C1718;
    const double C24162 = C23798 * C1434;
    const double C24160 = C23798 * C645;
    const double C24158 = C23798 * C366;
    const double C24157 = C23798 * C367;
    const double C24155 = C23798 * C644;
    const double C24153 = C23798 * C1435;
    const double C24151 = C23798 * C1894;
    const double C24400 = C23798 * C9285;
    const double C24552 = C23798 * C9423;
    const double C24936 = C23798 * C9929;
    const double C24934 = C23798 * C2344;
    const double C24932 = C23798 * C2341;
    const double C24930 = C23798 * C895;
    const double C25087 = C23798 * C896;
    const double C25085 = C23798 * C2342;
    const double C25302 = C23798 * C2345;
    const double C25536 = C23798 * C2787;
    const double C25527 = C23798 * C2788;
    const double C25525 = C23798 * C3265;
    const double C26116 = C23798 * C10397;
    const double C26665 = C23798 * C11263;
    const double C26663 = C23798 * C3694;
    const double C35233 = C23798 * C18112;
    const double C49260 = C49206 + C49252;
    const double C3819 = C49239 - (C48870 * C48853) / C47951;
    const double C22733 = C49240 * C259;
    const double C31752 = C49240 * C371;
    const double C104 = C49240 / C47958 - C48868 / C48058;
    const double C3992 = C3820 * C259;
    const double C5322 = C3820 * C371;
    const double C49253 = C49209 + C49239;
    const double C140 =
        (2 * (2 * ae * C48186 + C48174 * C48203) + C48209 + C48209 +
         C48174 * (C48203 + C48206 + C48206 +
                   C48174 * (2 * ae * C48199 +
                             C48174 *
                                 (C48192 * C48193 +
                                  C48178 * bs[5] * std::pow(C48180, 5)) *
                                 C48181))) /
        C47957;
    const double C1052 = C1029 * C133;
    const double C1048 = C1031 * C133;
    const double C3836 = C3831 * C133;
    const double C7862 = C7845 * C133;
    const double C11401 = C47990 * C133;
    const double C22577 = C22572 * C133;
    const double C23819 = C23800 * C133;
    const double C26810 = C48060 * C133;
    const double C1054 = C1027 * C253;
    const double C1046 = C1029 * C253;
    const double C1038 = C1031 * C253;
    const double C7852 = C7845 * C253;
    const double C9198 = C9185 * C253;
    const double C11396 = C47990 * C253;
    const double C23820 = C23798 * C253;
    const double C23814 = C23800 * C253;
    const double C26800 = C48060 * C253;
    const double C1452 = C1029 * C365;
    const double C1448 = C1031 * C365;
    const double C2479 = C1027 * C365;
    const double C8238 = C7845 * C365;
    const double C10052 = C9185 * C365;
    const double C11741 = C47990 * C365;
    const double C24159 = C23800 * C365;
    const double C25088 = C23798 * C365;
    const double C27186 = C48060 * C365;
    const double C48239 = C48215 + C48237;
    const double C48365 = ae * C48364;
    const double C646 = (C48391 * C48364) / C47951;
    const double C48409 = ae * C48408;
    const double C1057 = C1027 * C544;
    const double C1043 = C1029 * C544;
    const double C1041 = C1031 * C544;
    const double C7855 = C7845 * C544;
    const double C9199 = C9185 * C544;
    const double C11394 = C47990 * C544;
    const double C23822 = C23798 * C544;
    const double C23812 = C23800 * C544;
    const double C26803 = C48060 * C544;
    const double C2356 = C1031 * C897;
    const double C2482 = C1027 * C897;
    const double C2477 = C1029 * C897;
    const double C9110 = C7845 * C897;
    const double C10053 = C9185 * C897;
    const double C13089 = C47990 * C897;
    const double C25090 = C23798 * C897;
    const double C25086 = C23800 * C897;
    const double C28058 = C48060 * C897;
    const double C1908 = C49211 * C651;
    const double C4566 = C3820 * C651;
    const double C6447 = C1021 * C651;
    const double C8680 = C49211 * C651;
    const double C12869 = C48867 * C651;
    const double C23307 = C49240 * C651;
    const double C25297 = C48867 * C651;
    const double C27628 = C26784 * C651;
    const double C28414 = C48870 * C651;
    const double C40041 = C49238 * C651;
    const double C1242 = C1021 * C549;
    const double C1229 = C49211 * C549;
    const double C4412 = C3820 * C549;
    const double C8044 = C49238 * C549;
    const double C8031 = C49211 * C549;
    const double C11559 = C48867 * C549;
    const double C23153 = C49240 * C549;
    const double C23977 = C48867 * C549;
    const double C26992 = C48870 * C549;
    const double C26979 = C26784 * C549;
    const double C2819 = C1021 * C902;
    const double C2806 = C49211 * C902;
    const double C6080 = C3820 * C902;
    const double C15760 = C49238 * C902;
    const double C15747 = C49211 * C902;
    const double C19155 = C48867 * C902;
    const double C25535 = C48867 * C902;
    const double C29744 = C26784 * C902;
    const double C32510 = C49240 * C902;
    const double C37254 = C48870 * C902;
    const double C48299 = C48288 + C48279;
    const double C48280 = C48249 + C48278;
    const double C48358 = ae * C48352;
    const double C48475 = C48391 * C48352;
    const double C48536 = 2 * C48352;
    const double C2343 = (C48364 + C48352 * C48494) / C47951;
    const double C48402 = ae * C48396;
    const double C48599 = 2 * C48396;
    const double C48446 = C48236 + C48443;
    const double C48504 = C48236 + C48501;
    const double C2349 = (C48363 + C48350 * C48494 + C48573 + C48573 +
                          C48174 * (2 * ae * (C48349 + C48373 * C48494) +
                                    C48174 * (C48350 + C48374 * C48494))) /
                         C47957;
    const double C3279 = C1029 * C3266;
    const double C10414 = C9185 * C3266;
    const double C14208 = C47990 * C3266;
    const double C25538 = C23798 * C3266;
    const double C25524 = C23800 * C3266;
    const double C48530 = ae * C48529;
    const double C1719 = (3 * C48439 + C48347 * C48529) / C47951;
    const double C1895 = (C48391 * C48529) / C47951;
    const double C1437 =
        (C48391 * C48445 + C48547 + C48547 +
         C48174 * (2 * ae * C48391 * C48456 + C48174 * C48391 * C48457)) /
        C47957;
    const double C48593 = ae * C48592;
    const double C3695 = (3 * C48497 + C48391 * C48592) / C47951;
    const double C48334 = C48296 + C48331;
    const double C48384 = ae * C48377;
    const double C48483 = C48391 * C48377;
    const double C48582 = C48377 * C48494;
    const double C48428 = ae * C48421;
    const double C48459 = C48276 + C48454;
    const double C48517 = C48276 + C48512;
    const double C48613 = C48611 + C48612;
    const double C48544 = ae * C48542;
    const double C48560 = C48347 * C48542;
    const double C48566 = C48391 * C48542;
    const double C10204 = (C48529 + C48542 * C48494) / C47951;
    const double C48579 = ae * C48578;
    const double C10398 = (2 * C48546 + C48391 * C48578) / C47951;
    const double C48607 = ae * C48605;
    const double C48619 = C48391 * C48605;
    const double C48333 = C48174 * C48330;
    const double C48389 = C48379 + C48388;
    const double C19702 = C48867 * C3269;
    const double C21603 = C48857 * C3269;
    const double C26111 = C48867 * C3269;
    const double C18364 = C48857 * C11265;
    const double C48433 = C48423 + C48432;
    const double C1722 = (2 * ae *
                              (3 * (C48199 + C48223 * C48436) +
                               C48347 * (2 * C48349 + C48347 * C48456)) +
                          C48174 * (3 * C48445 + C48347 * C48540)) /
                         C47957;
    const double C1898 = (2 * ae * C48391 * (2 * C48349 + C48347 * C48456) +
                          C48174 * C48391 * C48540) /
                         C47957;
    const double C9287 = (4 * (2 * C48363 + C48347 * C48445) +
                          C48347 * (3 * C48445 + C48347 * C48540)) /
                         C47957;
    const double C9288 =
        (2 * ae *
             (4 * (2 * C48349 + C48347 * C48456) +
              C48347 * (3 * C48456 +
                        C48347 * (2 * C48373 +
                                  C48347 * (C48259 + C48309 * C48436)))) +
         C48174 *
             (4 * C48540 +
              C48347 * (3 * C48457 +
                        C48347 * (2 * C48374 +
                                  C48347 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48436))))) /
        C47957;
    const double C9425 = (C48391 * (3 * C48445 + C48347 * C48540)) / C47957;
    const double C9583 =
        (5 * (3 * C48445 + C48347 * C48540) +
         C48347 *
             (4 * C48540 +
              C48347 * (3 * C48457 +
                        C48347 * (2 * C48374 +
                                  C48347 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48436))))) /
        C47957;
    const double C9675 =
        (C48391 *
         (4 * C48540 +
          C48347 * (3 * C48457 +
                    C48347 * (2 * C48374 +
                              C48347 * (C48316 +
                                        (C48292 * C48293 +
                                         C48178 * bs[8] * std::pow(C48172, 8)) *
                                            C48181 * C48436))))) /
        C47957;
    const double C9931 =
        (2 * C48363 + C48347 * C48445 + C48540 * C48494) / C47957;
    const double C9932 =
        (3 * C48445 + C48347 * C48540 +
         (3 * C48457 +
          C48347 * (2 * C48374 +
                    C48347 * (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436))) *
             C48494) /
        C47957;
    const double C10205 =
        (2 * ae *
             (2 * C48349 + C48347 * C48456 +
              (2 * C48373 + C48347 * (C48259 + C48309 * C48436)) * C48494) +
         C48174 * (C48540 +
                   (2 * C48374 +
                    C48347 * (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436)) *
                       C48494)) /
        C47957;
    const double C10841 =
        (2 * C48391 * C48540 +
         C48391 * (C48540 +
                   (2 * C48374 +
                    C48347 * (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436)) *
                       C48494)) /
        C47957;
    const double C3698 = (2 * ae *
                              (3 * (C48199 + C48223 * C48494) +
                               C48391 * (2 * C48393 + C48391 * C48514)) +
                          C48174 * (3 * C48503 + C48391 * C48603)) /
                         C47957;
    const double C18114 = (4 * (2 * C48407 + C48391 * C48503) +
                           C48391 * (3 * C48503 + C48391 * C48603)) /
                          C47957;
    const double C18115 =
        (2 * ae *
             (4 * (2 * C48393 + C48391 * C48514) +
              C48391 * (3 * C48514 +
                        C48391 * (2 * C48417 +
                                  C48391 * (C48259 + C48309 * C48494)))) +
         C48174 *
             (4 * C48603 +
              C48391 * (3 * C48515 +
                        C48391 * (2 * C48418 +
                                  C48391 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48494))))) /
        C47957;
    const double C18596 =
        (5 * (3 * C48503 + C48391 * C48603) +
         C48391 *
             (4 * C48603 +
              C48391 * (3 * C48515 +
                        C48391 * (2 * C48418 +
                                  C48391 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48494))))) /
        C47957;
    const double C49261 = C49226 + C49256;
    const double C11376 = C49246 - (C49025 * C49014) / C47951;
    const double C9182 = C49247 / C47958 - C49023 / C48058;
    const double C49257 = C49228 + C49246;
    const double C49262 = C49231 + C49258;
    const double C20359 = C49249 - (C49065 * C49054) / C47951;
    const double C17937 = C49250 / C47958 - C49063 / C48058;
    const double C49259 = C49233 + C49249;
    const double C48017 = C48011 - C47983;
    const double C48018 = C48010 / C47970;
    const double C48016 = C48010 / C47951;
    const double C1243 = C1030 * C540;
    const double C1237 = C1030 * C246;
    const double C1228 = C1030 * C539;
    const double C1222 = C1030 * C247;
    const double C1726 = C1030 * C1205;
    const double C1907 = C1030 * C641;
    const double C1901 = C1030 * C1429;
    const double C2820 = C1030 * C893;
    const double C2814 = C1030 * C358;
    const double C2805 = C1030 * C892;
    const double C2799 = C1030 * C359;
    const double C3276 = C1030 * C2337;
    const double C3702 = C1030 * C2782;
    const double C6448 = C1030 * C642;
    const double C4005 = C3830 * C245;
    const double C3993 = C3830 * C246;
    const double C4409 = C3830 * C540;
    const double C4563 = C3830 * C642;
    const double C5331 = C3830 * C357;
    const double C5323 = C3830 * C358;
    const double C6077 = C3830 * C893;
    const double C8045 = C7844 * C540;
    const double C8039 = C7844 * C246;
    const double C8030 = C7844 * C539;
    const double C8024 = C7844 * C247;
    const double C8507 = C7844 * C1205;
    const double C8679 = C7844 * C641;
    const double C8673 = C7844 * C1429;
    const double C15761 = C7844 * C893;
    const double C15755 = C7844 * C358;
    const double C15746 = C7844 * C892;
    const double C15740 = C7844 * C359;
    const double C16208 = C7844 * C2337;
    const double C16625 = C7844 * C2782;
    const double C40042 = C7844 * C642;
    const double C9305 = C9184 * C1716;
    const double C9303 = C9184 * C1206;
    const double C9301 = C9184 * C538;
    const double C9299 = C9184 * C248;
    const double C9296 = C9184 * C1715;
    const double C9294 = C9184 * C1207;
    const double C9292 = C9184 * C537;
    const double C9290 = C9184 * C249;
    const double C9585 = C9184 * C9283;
    const double C9683 = C9184 * C639;
    const double C9681 = C9184 * C1431;
    const double C9679 = C9184 * C1891;
    const double C9677 = C9184 * C9421;
    const double C10223 = C9184 * C2339;
    const double C10221 = C9184 * C1430;
    const double C10218 = C9184 * C2336;
    const double C10216 = C9184 * C640;
    const double C10213 = C9184 * C2338;
    const double C10209 = C9184 * C2335;
    const double C10411 = C9184 * C891;
    const double C10409 = C9184 * C360;
    const double C10404 = C9184 * C890;
    const double C10402 = C9184 * C361;
    const double C10685 = C9184 * C9927;
    const double C10847 = C9184 * C3262;
    const double C10843 = C9184 * C10395;
    const double C11268 = C9184 * C2784;
    const double C14457 = C9184 * C1892;
    const double C18122 = C9184 * C3692;
    const double C18120 = C9184 * C2783;
    const double C18117 = C9184 * C3691;
    const double C18363 = C9184 * C11261;
    const double C18598 = C9184 * C18110;
    const double C21602 = C9184 * C3263;
    const double C11562 = C11381 * C1205;
    const double C11558 = C11381 * C539;
    const double C11554 = C11381 * C247;
    const double C11548 = C11381 * C1206;
    const double C11544 = C11381 * C538;
    const double C11540 = C11381 * C248;
    const double C11978 = C11381 * C1716;
    const double C12130 = C11381 * C640;
    const double C12126 = C11381 * C1430;
    const double C12122 = C11381 * C1892;
    const double C12872 = C11381 * C1429;
    const double C12868 = C11381 * C641;
    const double C13086 = C11381 * C359;
    const double C13082 = C11381 * C360;
    const double C13650 = C11381 * C2336;
    const double C13645 = C11381 * C2339;
    const double C14201 = C11381 * C891;
    const double C18950 = C11381 * C2337;
    const double C19154 = C11381 * C892;
    const double C19701 = C11381 * C3263;
    const double C20247 = C11381 * C2783;
    const double C20627 = C11381 * C2782;
    const double C21354 = C11381 * C3692;
    const double C22746 = C22571 * C245;
    const double C22734 = C22571 * C246;
    const double C23150 = C22571 * C540;
    const double C23304 = C22571 * C642;
    const double C31761 = C22571 * C357;
    const double C31753 = C22571 * C358;
    const double C32507 = C22571 * C893;
    const double C23980 = C23799 * C1205;
    const double C23976 = C23799 * C539;
    const double C23972 = C23799 * C247;
    const double C23966 = C23799 * C1206;
    const double C23962 = C23799 * C538;
    const double C23958 = C23799 * C248;
    const double C24396 = C23799 * C1716;
    const double C24548 = C23799 * C640;
    const double C24544 = C23799 * C1430;
    const double C24540 = C23799 * C1892;
    const double C25300 = C23799 * C2337;
    const double C25296 = C23799 * C641;
    const double C25292 = C23799 * C2336;
    const double C25534 = C23799 * C892;
    const double C25530 = C23799 * C359;
    const double C25522 = C23799 * C891;
    const double C25518 = C23799 * C360;
    const double C25904 = C23799 * C2339;
    const double C26110 = C23799 * C3263;
    const double C26659 = C23799 * C2783;
    const double C30108 = C23799 * C1429;
    const double C34502 = C23799 * C2782;
    const double C35229 = C23799 * C3692;
    const double C26993 = C26792 * C540;
    const double C26987 = C26792 * C246;
    const double C26978 = C26792 * C539;
    const double C26972 = C26792 * C247;
    const double C27455 = C26792 * C1205;
    const double C27627 = C26792 * C641;
    const double C27621 = C26792 * C1429;
    const double C28415 = C26792 * C642;
    const double C28630 = C26792 * C358;
    const double C28624 = C26792 * C359;
    const double C29191 = C26792 * C2337;
    const double C29743 = C26792 * C892;
    const double C37255 = C26792 * C893;
    const double C38074 = C26792 * C2782;
    const double C22741 = C49260 * C260;
    const double C22729 = C49260 * C261;
    const double C23157 = C49260 * C547;
    const double C23311 = C49260 * C649;
    const double C31756 = C49260 * C372;
    const double C31748 = C49260 * C373;
    const double C32514 = C49260 * C900;
    const double C101 =
        (C49251 + 2 * C48862) / C47958 - (C49260 * C48853) / C47951;
    const double C4002 = C3819 * C259;
    const double C3990 = C3819 * C260;
    const double C4414 = C3819 * C548;
    const double C4568 = C3819 * C650;
    const double C5328 = C3819 * C371;
    const double C5320 = C3819 * C372;
    const double C6082 = C3819 * C901;
    const double C22743 = C49253 * C259;
    const double C22731 = C49253 * C260;
    const double C23155 = C49253 * C548;
    const double C23309 = C49253 * C650;
    const double C31758 = C49253 * C371;
    const double C31750 = C49253 * C372;
    const double C32512 = C49253 * C901;
    const double C102 =
        (C49238 + 2 * C48870 + C49260) / C47958 - (C49253 * C48853) / C47951;
    const double C103 = (C49211 + C48867 / C47951 + C49253) / C47958 -
                        (C49240 * C48853) / C47951;
    const double C48240 = C48239 + C48228;
    const double C258 =
        (2 * (2 * ae * C48347 * C48199 + C48174 * C48363) + C48365 + C48365 +
         C48174 * (C48363 + C48354 + C48354 + C48174 * C48361)) /
        C47957;
    const double C1455 = C1029 * C646;
    const double C1445 = C1031 * C646;
    const double C6247 = C1027 * C646;
    const double C8235 = C7845 * C646;
    const double C10054 = C9185 * C646;
    const double C11743 = C47990 * C646;
    const double C24161 = C23800 * C646;
    const double C25092 = C23798 * C646;
    const double C27183 = C48060 * C646;
    const double C370 =
        (2 * (2 * ae * C48391 * C48199 + C48174 * C48407) + C48409 + C48409 +
         C48174 * (C48407 + C48398 + C48398 + C48174 * C48405)) /
        C47957;
    const double C48307 = C48299 + C48279;
    const double C48281 = C48280 + C48264;
    const double C48477 = ae * C48475;
    const double C2359 = C1031 * C2343;
    const double C2635 = C1029 * C2343;
    const double C9113 = C7845 * C2343;
    const double C10055 = C9185 * C2343;
    const double C13091 = C47990 * C2343;
    const double C25094 = C23798 * C2343;
    const double C25084 = C23800 * C2343;
    const double C28061 = C48060 * C2343;
    const double C48448 = ae * C48446;
    const double C1209 = (2 * C48364 + C48347 * C48446) / C47951;
    const double C1433 = (C48391 * C48446) / C47951;
    const double C48506 = ae * C48504;
    const double C2786 = (2 * C48408 + C48391 * C48504) / C47951;
    const double C3277 = C49211 * C2349;
    const double C16209 = C49211 * C2349;
    const double C18951 = C48867 * C2349;
    const double C25301 = C48867 * C2349;
    const double C29192 = C26784 * C2349;
    const double C1213 = (2 * C48363 + C48347 * C48445 + C48530 + C48530 +
                          C48174 * (2 * ae * (2 * C48349 + C48347 * C48456) +
                                    C48174 * (2 * C48350 + C48347 * C48457))) /
                         C47957;
    const double C1733 = C1029 * C1719;
    const double C9192 = C9185 * C1719;
    const double C11550 = C47990 * C1719;
    const double C23982 = C23798 * C1719;
    const double C23968 = C23800 * C1719;
    const double C1914 = C1029 * C1895;
    const double C9436 = C9185 * C1895;
    const double C11732 = C47990 * C1895;
    const double C24164 = C23798 * C1895;
    const double C24150 = C23800 * C1895;
    const double C1902 = C49211 * C1437;
    const double C8674 = C49211 * C1437;
    const double C12873 = C48867 * C1437;
    const double C27622 = C26784 * C1437;
    const double C30109 = C48867 * C1437;
    const double C2790 = (2 * C48407 + C48391 * C48503 + C48593 + C48593 +
                          C48174 * (2 * ae * (2 * C48393 + C48391 * C48514) +
                                    C48174 * (2 * C48394 + C48391 * C48515))) /
                         C47957;
    const double C3709 = C1029 * C3695;
    const double C17940 = C9185 * C3695;
    const double C20252 = C47990 * C3695;
    const double C26664 = C23800 * C3695;
    const double C34504 = C23798 * C3695;
    const double C48336 = C48334 + C48314;
    const double C48488 = ae * C48483;
    const double C48585 = C48352 + C48582;
    const double C48464 = ae * C48459;
    const double C48537 = C48347 * C48459;
    const double C48552 = C48391 * C48459;
    const double C2346 = (C48446 + C48459 * C48494) / C47951;
    const double C48522 = ae * C48517;
    const double C48600 = C48391 * C48517;
    const double C48614 = ae * C48613;
    const double C18025 = (3 * C48572 + C48391 * C48613) / C47951;
    const double C48561 = C48559 + C48560;
    const double C48567 = ae * C48566;
    const double C10225 = C9185 * C10204;
    const double C12519 = C47990 * C10204;
    const double C24937 = C23800 * C10204;
    const double C2352 =
        (C48445 + C48457 * C48494 + C48579 + C48579 +
         C48174 * (2 * ae * (C48456 + (C48259 + C48309 * C48436) * C48494) +
                   C48174 * (C48457 +
                             (C48316 + (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436) *
                                 C48494))) /
        C47957;
    const double C10415 = C9185 * C10398;
    const double C14210 = C47990 * C10398;
    const double C26117 = C23800 * C10398;
    const double C48620 = C48618 + C48619;
    const double C9306 = C48857 * C1722;
    const double C11979 = C48867 * C1722;
    const double C24397 = C48867 * C1722;
    const double C12123 = C48867 * C1898;
    const double C14458 = C48857 * C1898;
    const double C24541 = C48867 * C1898;
    const double C9586 = C48857 * C9287;
    const double C9678 = C48857 * C9425;
    const double C10686 = C48857 * C9931;
    const double C18123 = C48857 * C3698;
    const double C21355 = C48867 * C3698;
    const double C35230 = C48867 * C3698;
    const double C18599 = C48857 * C18114;
    const double C9179 =
        (C49254 + 2 * C49018) / C47958 - (C49261 * C49014) / C47951;
    const double C9180 =
        (C49242 + 2 * C49025 + C49261) / C47958 - (C49257 * C49014) / C47951;
    const double C9181 = (C49222 + C49022 / C47951 + C49257) / C47958 -
                         (C49247 * C49014) / C47951;
    const double C17934 =
        (C49255 + 2 * C49058) / C47958 - (C49262 * C49054) / C47951;
    const double C17935 =
        (C49244 + 2 * C49065 + C49262) / C47958 - (C49259 * C49054) / C47951;
    const double C17936 = (C49225 + C49062 / C47951 + C49259) / C47958 -
                          (C49250 * C49054) / C47951;
    const double C11404 = C48017 * C544;
    const double C11402 = C48017 * C253;
    const double C11400 = C48017 * C132;
    const double C11399 = C48017 * C131;
    const double C11397 = C48017 * C254;
    const double C11395 = C48017 * C543;
    const double C11393 = C48017 * C1210;
    const double C11390 = C48017 * C1211;
    const double C11388 = C48017 * C542;
    const double C11386 = C48017 * C255;
    const double C11384 = C48017 * C130;
    const double C11564 = C48017 * C1719;
    const double C11551 = C48017 * C1718;
    const double C11746 = C48017 * C1895;
    const double C11744 = C48017 * C1434;
    const double C11742 = C48017 * C645;
    const double C11740 = C48017 * C366;
    const double C11739 = C48017 * C367;
    const double C11737 = C48017 * C644;
    const double C11735 = C48017 * C1435;
    const double C11733 = C48017 * C1894;
    const double C11982 = C48017 * C9285;
    const double C12134 = C48017 * C9423;
    const double C12518 = C48017 * C9929;
    const double C12516 = C48017 * C2344;
    const double C12514 = C48017 * C2341;
    const double C12512 = C48017 * C895;
    const double C12668 = C48017 * C646;
    const double C12666 = C48017 * C365;
    const double C13092 = C48017 * C2345;
    const double C13090 = C48017 * C2342;
    const double C13088 = C48017 * C896;
    const double C14209 = C48017 * C10397;
    const double C14207 = C48017 * C3265;
    const double C14205 = C48017 * C2788;
    const double C18752 = C48017 * C2343;
    const double C18750 = C48017 * C897;
    const double C19158 = C48017 * C3266;
    const double C19156 = C48017 * C2787;
    const double C20253 = C48017 * C11263;
    const double C20251 = C48017 * C3694;
    const double C20629 = C48017 * C3695;
    const double C21358 = C48017 * C18112;
    const double C48025 = C48017 / C47958;
    const double C48023 = C47952 * C48017;
    const double C48022 = 2 * C48017;
    const double C48024 = C47994 - C48018;
    const double C48021 = C47988 - C48016;
    const double C1253 = C1228 + C1041;
    const double C1250 = C1222 + C1038;
    const double C2830 = C2805 + C2356;
    const double C2827 = C2799 + C1448;
    const double C8055 = C8030 + C7855;
    const double C8052 = C8024 + C7852;
    const double C15771 = C15746 + C9110;
    const double C15768 = C15740 + C8238;
    const double C9314 = C9303 + C9193;
    const double C9313 = C9301 + C9194;
    const double C9312 = C9299 + C9195;
    const double C9311 = C9296 + C9191;
    const double C9310 = C9294 + C9190;
    const double C9309 = C9292 + C9189;
    const double C9308 = C9290 + C9188;
    const double C9588 = C9585 + C9298;
    const double C9689 = C9683 + C9431;
    const double C9688 = C9681 + C9430;
    const double C9687 = C9679 + C9429;
    const double C9686 = C9677 + C9428;
    const double C10231 = C10223 + C10049;
    const double C10230 = C10221 + C9435;
    const double C10229 = C10218 + C10050;
    const double C10228 = C10216 + C9434;
    const double C10227 = C10213 + C9936;
    const double C10226 = C10209 + C9935;
    const double C10419 = C10411 + C10051;
    const double C10418 = C10409 + C9433;
    const double C10417 = C10404 + C9934;
    const double C10416 = C10402 + C9432;
    const double C10690 = C10685 + C9937;
    const double C10853 = C10847 + C10407;
    const double C10852 = C10843 + C10406;
    const double C11273 = C11268 + C10408;
    const double C18126 = C18120 + C10413;
    const double C18125 = C18117 + C11270;
    const double C18366 = C18363 + C11271;
    const double C18601 = C18598 + C18119;
    const double C21604 = C21602 + C10414;
    const double C11575 = C11558 + C11394;
    const double C11573 = C11554 + C11396;
    const double C11571 = C11548 + C11391;
    const double C11569 = C11544 + C11389;
    const double C11567 = C11540 + C11387;
    const double C12140 = C12130 + C11736;
    const double C12138 = C12126 + C11734;
    const double C13097 = C13086 + C11741;
    const double C13095 = C13082 + C11738;
    const double C13657 = C13650 + C12515;
    const double C13655 = C13645 + C12517;
    const double C14211 = C14201 + C12513;
    const double C19161 = C19154 + C13089;
    const double C19706 = C19701 + C14208;
    const double C20255 = C20247 + C14206;
    const double C23993 = C23976 + C23812;
    const double C23991 = C23972 + C23814;
    const double C23989 = C23966 + C23809;
    const double C23987 = C23962 + C23807;
    const double C23985 = C23958 + C23805;
    const double C24558 = C24548 + C24154;
    const double C24556 = C24544 + C24152;
    const double C25305 = C25292 + C24933;
    const double C25547 = C25534 + C25086;
    const double C25545 = C25530 + C24159;
    const double C25543 = C25522 + C24931;
    const double C25541 = C25518 + C24156;
    const double C25908 = C25904 + C24935;
    const double C26118 = C26110 + C25524;
    const double C26667 = C26659 + C25526;
    const double C27003 = C26978 + C26803;
    const double C27000 = C26972 + C26800;
    const double C28640 = C28624 + C27186;
    const double C29755 = C29743 + C28058;
    const double C48241 = ae * C48240;
    const double C134 =
        (3 * C48208 + C48174 * C48240 + (2 * C48197 + C48174 * C48225) * ae) /
        C47951;
    const double C252 = (C48347 * C48240) / C47951;
    const double C364 = (C48391 * C48240) / C47951;
    const double C1238 = C49211 * C258;
    const double C4004 = C3820 * C258;
    const double C3994 = C49188 * C258;
    const double C8040 = C49211 * C258;
    const double C22745 = C49240 * C258;
    const double C22735 = C49188 * C258;
    const double C26988 = C26784 * C258;
    const double C1919 = C1907 + C1445;
    const double C8691 = C8679 + C8235;
    const double C12875 = C12868 + C11743;
    const double C25307 = C25296 + C24161;
    const double C27639 = C27627 + C27183;
    const double C2815 = C49211 * C370;
    const double C5330 = C3820 * C370;
    const double C5324 = C49188 * C370;
    const double C15756 = C49211 * C370;
    const double C28631 = C26784 * C370;
    const double C31760 = C49240 * C370;
    const double C31754 = C49188 * C370;
    const double C48335 = C48307 + C48333;
    const double C48283 = ae * C48281;
    const double C48282 = C48174 * C48281;
    const double C48294 = 4 * C48281;
    const double C48351 = C48347 * C48281;
    const double C48395 = C48391 * C48281;
    const double C545 = (C48240 + C48281 * C48436) / C47951;
    const double C898 = (C48240 + C48281 * C48494) / C47951;
    const double C652 =
        (2 * (2 * ae * C48391 * C48349 + C48174 * C48474) + C48477 + C48477 +
         C48174 *
             (C48474 + C48478 + C48478 +
              C48174 * (2 * ae * C48391 * C48373 + C48174 * C48391 * C48374))) /
        C47957;
    const double C3283 = C3276 + C2359;
    const double C16215 = C16208 + C9113;
    const double C18953 = C18950 + C13091;
    const double C25309 = C25300 + C25084;
    const double C29199 = C29191 + C28061;
    const double C550 =
        (2 * (2 * ae * (C48199 + C48223 * C48436) + C48174 * C48445) + C48448 +
         C48448 +
         C48174 * (C48445 + C48449 + C48449 +
                   C48174 * (2 * ae * (C48223 + C48259 * C48436) +
                             C48174 * (C48266 + C48316 * C48436)))) /
        C47957;
    const double C1246 = C1029 * C1209;
    const double C1230 = C1031 * C1209;
    const double C8032 = C7845 * C1209;
    const double C9200 = C9185 * C1209;
    const double C11406 = C48017 * C1209;
    const double C11392 = C47990 * C1209;
    const double C23824 = C23798 * C1209;
    const double C23810 = C23800 * C1209;
    const double C26980 = C48060 * C1209;
    const double C1458 = C1029 * C1433;
    const double C1442 = C1031 * C1433;
    const double C8232 = C7845 * C1433;
    const double C10056 = C9185 * C1433;
    const double C11745 = C47990 * C1433;
    const double C12670 = C48017 * C1433;
    const double C24163 = C23800 * C1433;
    const double C27180 = C48060 * C1433;
    const double C29910 = C23798 * C1433;
    const double C903 =
        (2 * (2 * ae * (C48199 + C48223 * C48494) + C48174 * C48503) + C48506 +
         C48506 +
         C48174 * (C48503 + C48507 + C48507 +
                   C48174 * (2 * ae * (C48223 + C48259 * C48494) +
                             C48174 * (C48266 + C48316 * C48494)))) /
        C47957;
    const double C2823 = C1029 * C2786;
    const double C2807 = C1031 * C2786;
    const double C15748 = C7845 * C2786;
    const double C17941 = C9185 * C2786;
    const double C19157 = C47990 * C2786;
    const double C20363 = C48017 * C2786;
    const double C25537 = C23800 * C2786;
    const double C29751 = C48060 * C2786;
    const double C34238 = C23798 * C2786;
    const double C1727 = C49211 * C1213;
    const double C8508 = C49211 * C1213;
    const double C11563 = C48867 * C1213;
    const double C23981 = C48867 * C1213;
    const double C27456 = C26784 * C1213;
    const double C9315 = C9305 + C9192;
    const double C11986 = C11978 + C11550;
    const double C24404 = C24396 + C23968;
    const double C14459 = C14457 + C9436;
    const double C12136 = C12122 + C11732;
    const double C24554 = C24540 + C24150;
    const double C3703 = C49211 * C2790;
    const double C16626 = C49211 * C2790;
    const double C20628 = C48867 * C2790;
    const double C34503 = C48867 * C2790;
    const double C38075 = C26784 * C2790;
    const double C18127 = C18122 + C17940;
    const double C21360 = C21354 + C20252;
    const double C35235 = C35229 + C26664;
    const double C48338 = ae * C48336;
    const double C48337 = C48174 * C48336;
    const double C48376 = C48347 * C48336;
    const double C48420 = C48391 * C48336;
    const double C48453 = C48336 * C48436;
    const double C48511 = C48336 * C48494;
    const double C48587 = ae * C48585;
    const double C3267 = (2 * C48475 + C48391 * C48585) / C47951;
    const double C48541 = C48536 + C48537;
    const double C48554 = ae * C48552;
    const double C2362 = C1031 * C2346;
    const double C9116 = C7845 * C2346;
    const double C10057 = C9185 * C2346;
    const double C13093 = C47990 * C2346;
    const double C25303 = C23800 * C2346;
    const double C28064 = C48060 * C2346;
    const double C48604 = C48599 + C48600;
    const double C3270 =
        (2 * C48474 + C48391 * C48584 + C48614 + C48614 +
         C48174 *
             (2 * ae *
                  (2 * C48480 + C48391 * (C48373 + C48347 * C48309 * C48494)) +
              C48174 * (2 * C48481 +
                        C48391 * (C48374 +
                                  C48347 *
                                      (C48292 * C48293 +
                                       C48178 * bs[8] * std::pow(C48172, 8)) *
                                      C48181 * C48494)))) /
        C47957;
    const double C18028 = C9185 * C18025;
    const double C20254 = C47990 * C18025;
    const double C26666 = C23800 * C18025;
    const double C48562 = ae * C48561;
    const double C9286 = (4 * C48529 + C48347 * C48561) / C47951;
    const double C9424 = (C48391 * C48561) / C47951;
    const double C1899 =
        (C48391 * C48540 + C48567 + C48567 +
         C48174 *
             (2 * ae * C48391 *
                  (2 * C48373 + C48347 * (C48259 + C48309 * C48436)) +
              C48174 * C48391 *
                  (2 * C48374 +
                   C48347 * (C48316 + (C48292 * C48293 +
                                       C48178 * bs[8] * std::pow(C48172, 8)) *
                                          C48181 * C48436)))) /
        C47957;
    const double C48621 = ae * C48620;
    const double C18113 = (4 * C48592 + C48391 * C48620) / C47951;
    const double C48031 = C48025 - C48013;
    const double C7843 = C48025 + (C47999 * ae) / C47951;
    const double C48029 = C48023 + C49167;
    const double C48030 = C48024 * be;
    const double C48028 = C48021 * ae;
    const double C1026 = (-(be * C47962) / C47957) / C47958 -
                         ((2 * ((-C47961) / C47958 - (C47998 * be) / C47951) -
                           (C47952 * C48021 * be) / C47951) *
                          be) /
                             C47951 -
                         C48012;
    const double C1028 =
        (-(C48021 * be) / C47951) / C47958 -
        ((2 * ((-C47982 / C47951) / C47958 - (0 * be) / C47951) - C48018) *
         be) /
            C47951;
    const double C23797 = -(C48021 * be) / C47951;
    const double C1265 = C1253 + C1041;
    const double C1262 = C1250 + C1038;
    const double C2842 = C2830 + C2356;
    const double C2839 = C2827 + C1448;
    const double C8067 = C8055 + C7855;
    const double C8064 = C8052 + C7852;
    const double C15783 = C15771 + C9110;
    const double C15780 = C15768 + C8238;
    const double C9322 = C9314 + C9193;
    const double C9321 = C9313 + C9194;
    const double C9320 = C9312 + C9195;
    const double C9319 = C9311 + C9191;
    const double C9318 = C9310 + C9190;
    const double C9317 = C9309 + C9189;
    const double C9316 = C9308 + C9188;
    const double C9589 = C9588 + C9298;
    const double C9693 = C9689 + C9431;
    const double C9692 = C9688 + C9430;
    const double C9691 = C9687 + C9429;
    const double C9690 = C9686 + C9428;
    const double C10237 = C10231 + C10049;
    const double C10236 = C10230 + C9435;
    const double C10235 = C10229 + C10050;
    const double C10234 = C10228 + C9434;
    const double C10233 = C10227 + C9936;
    const double C10232 = C10226 + C9935;
    const double C10423 = C10419 + C10051;
    const double C10422 = C10418 + C9433;
    const double C10421 = C10417 + C9934;
    const double C10420 = C10416 + C9432;
    const double C10691 = C10690 + C9937;
    const double C10855 = C10853 + C10407;
    const double C10854 = C10852 + C10406;
    const double C11274 = C11273 + C10408;
    const double C18129 = C18126 + C10413;
    const double C18128 = C18125 + C11270;
    const double C18367 = C18366 + C11271;
    const double C18602 = C18601 + C18119;
    const double C21605 = C21604 + C10414;
    const double C11587 = C11575 + C11394;
    const double C11585 = C11573 + C11396;
    const double C11583 = C11571 + C11391;
    const double C11581 = C11569 + C11389;
    const double C11579 = C11567 + C11387;
    const double C12146 = C12140 + C11736;
    const double C12144 = C12138 + C11734;
    const double C13101 = C13097 + C11741;
    const double C13099 = C13095 + C11738;
    const double C13661 = C13657 + C12515;
    const double C13659 = C13655 + C12517;
    const double C14213 = C14211 + C12513;
    const double C19163 = C19161 + C13089;
    const double C19708 = C19706 + C14208;
    const double C20257 = C20255 + C14206;
    const double C24005 = C23993 + C23812;
    const double C24003 = C23991 + C23814;
    const double C24001 = C23989 + C23809;
    const double C23999 = C23987 + C23807;
    const double C23997 = C23985 + C23805;
    const double C24564 = C24558 + C24154;
    const double C24562 = C24556 + C24152;
    const double C25311 = C25305 + C24933;
    const double C25555 = C25547 + C25086;
    const double C25553 = C25545 + C24159;
    const double C25551 = C25543 + C24931;
    const double C25549 = C25541 + C24156;
    const double C25910 = C25908 + C24935;
    const double C26120 = C26118 + C25524;
    const double C26669 = C26667 + C25526;
    const double C27015 = C27003 + C26803;
    const double C27012 = C27000 + C26800;
    const double C28646 = C28640 + C27186;
    const double C29758 = C29755 + C28058;
    const double C141 =
        (3 * (C48203 + C48206 + C48206 + C48174 * C48234) + C48241 + C48241 +
         C48174 *
             (2 * C48234 + C48238 + C48238 +
              C48174 * (C48229 + C48233 + C48233 +
                        C48174 * (2 * ae * C48223 +
                                  C48174 *
                                      (C48213 * C48214 +
                                       C48178 * bs[6] * std::pow(C48172, 6)) *
                                      C48181)))) /
        C47957;
    const double C149 = C122 * C134;
    const double C1053 = C1031 * C134;
    const double C3845 = C3831 * C134;
    const double C7867 = C7845 * C134;
    const double C22586 = C22572 * C134;
    const double C26815 = C48060 * C134;
    const double C1055 = C1029 * C252;
    const double C1045 = C1031 * C252;
    const double C3840 = C3831 * C252;
    const double C7859 = C7845 * C252;
    const double C11403 = C47990 * C252;
    const double C22581 = C22572 * C252;
    const double C23821 = C23800 * C252;
    const double C26807 = C48060 * C252;
    const double C1453 = C1031 * C364;
    const double C2480 = C1029 * C364;
    const double C4169 = C3831 * C364;
    const double C8243 = C7845 * C364;
    const double C12667 = C47990 * C364;
    const double C22910 = C22572 * C364;
    const double C25089 = C23800 * C364;
    const double C27191 = C48060 * C364;
    const double C1925 = C1919 + C1445;
    const double C8697 = C8691 + C8235;
    const double C12879 = C12875 + C11743;
    const double C25313 = C25307 + C24161;
    const double C27645 = C27639 + C27183;
    const double C48284 = C48248 + C48282;
    const double C48357 = ae * C48351;
    const double C647 = (C48391 * C48351) / C47951;
    const double C48401 = ae * C48395;
    const double C1058 = C1029 * C545;
    const double C1042 = C1031 * C545;
    const double C3995 = C3831 * C545;
    const double C7856 = C7845 * C545;
    const double C11405 = C47990 * C545;
    const double C22736 = C22572 * C545;
    const double C23823 = C23800 * C545;
    const double C26804 = C48060 * C545;
    const double C2483 = C1029 * C898;
    const double C2476 = C1031 * C898;
    const double C4948 = C3831 * C898;
    const double C15432 = C7845 * C898;
    const double C18751 = C47990 * C898;
    const double C23689 = C22572 * C898;
    const double C25091 = C23800 * C898;
    const double C28634 = C48060 * C898;
    const double C4564 = C49188 * C652;
    const double C6449 = C49211 * C652;
    const double C23305 = C49188 * C652;
    const double C28416 = C26784 * C652;
    const double C40043 = C49211 * C652;
    const double C3286 = C3283 + C2359;
    const double C16218 = C16215 + C9113;
    const double C18955 = C18953 + C13091;
    const double C25315 = C25309 + C25084;
    const double C29203 = C29199 + C28061;
    const double C1244 = C49211 * C550;
    const double C4410 = C49188 * C550;
    const double C8046 = C49211 * C550;
    const double C23151 = C49188 * C550;
    const double C26994 = C26784 * C550;
    const double C1736 = C1726 + C1230;
    const double C8517 = C8507 + C8032;
    const double C11577 = C11562 + C11392;
    const double C23995 = C23980 + C23810;
    const double C27465 = C27455 + C26980;
    const double C1916 = C1901 + C1442;
    const double C8688 = C8673 + C8232;
    const double C12877 = C12872 + C11745;
    const double C30111 = C30108 + C24163;
    const double C27636 = C27621 + C27180;
    const double C2821 = C49211 * C903;
    const double C6078 = C49188 * C903;
    const double C15762 = C49211 * C903;
    const double C32508 = C49188 * C903;
    const double C37256 = C26784 * C903;
    const double C3712 = C3702 + C2807;
    const double C16635 = C16625 + C15748;
    const double C20632 = C20627 + C19157;
    const double C34507 = C34502 + C25537;
    const double C38084 = C38074 + C29751;
    const double C9323 = C9315 + C9192;
    const double C11988 = C11986 + C11550;
    const double C24406 = C24404 + C23968;
    const double C14460 = C14459 + C9436;
    const double C12142 = C12136 + C11732;
    const double C24560 = C24554 + C24150;
    const double C18130 = C18127 + C17940;
    const double C21362 = C21360 + C20252;
    const double C35237 = C35235 + C26664;
    const double C48339 = C48295 + C48337;
    const double C48383 = ae * C48376;
    const double C48482 = C48391 * C48376;
    const double C2631 = (C48351 + C48376 * C48494) / C47951;
    const double C48427 = ae * C48420;
    const double C48458 = C48281 + C48453;
    const double C48516 = C48281 + C48511;
    const double C2632 =
        (2 * (2 * ae * (C48349 + C48373 * C48494) + C48174 * C48584) + C48587 +
         C48587 +
         C48174 * (C48584 + C48588 + C48588 +
                   C48174 * (2 * ae * (C48373 + C48347 * C48309 * C48494) +
                             C48174 * (C48374 + C48347 *
                                                    (C48292 * C48293 +
                                                     C48178 * bs[8] *
                                                         std::pow(C48172, 8)) *
                                                    C48181 * C48494)))) /
        C47957;
    const double C3280 = C1031 * C3267;
    const double C16212 = C7845 * C3267;
    const double C19159 = C47990 * C3267;
    const double C21464 = C9185 * C3267;
    const double C25539 = C23800 * C3267;
    const double C29754 = C48060 * C3267;
    const double C48543 = ae * C48541;
    const double C1720 = (3 * C48446 + C48347 * C48541) / C47951;
    const double C1896 = (C48391 * C48541) / C47951;
    const double C1440 =
        (2 * (2 * ae * C48391 * C48456 + C48174 * C48551) + C48554 + C48554 +
         C48174 *
             (C48551 + C48555 + C48555 +
              C48174 * (2 * ae * C48391 * (C48259 + C48309 * C48436) +
                        C48174 * C48391 *
                            (C48316 + (C48292 * C48293 +
                                       C48178 * bs[8] * std::pow(C48172, 8)) *
                                          C48181 * C48436)))) /
        C47957;
    const double C48606 = ae * C48604;
    const double C3696 = (3 * C48504 + C48391 * C48604) / C47951;
    const double C1723 =
        (3 * C48445 + C48347 * C48540 + C48562 + C48562 +
         C48174 *
             (2 * ae *
                  (3 * C48456 +
                   C48347 *
                       (2 * C48373 + C48347 * (C48259 + C48309 * C48436))) +
              C48174 * (3 * C48457 +
                        C48347 * (2 * C48374 +
                                  C48347 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48436))))) /
        C47957;
    const double C9307 = C9185 * C9286;
    const double C11983 = C47990 * C9286;
    const double C24401 = C23800 * C9286;
    const double C9437 = C9185 * C9424;
    const double C12135 = C47990 * C9424;
    const double C24553 = C23800 * C9424;
    const double C3699 =
        (3 * C48503 + C48391 * C48603 + C48621 + C48621 +
         C48174 *
             (2 * ae *
                  (3 * C48514 +
                   C48391 *
                       (2 * C48417 + C48391 * (C48259 + C48309 * C48494))) +
              C48174 * (3 * C48515 +
                        C48391 * (2 * C48418 +
                                  C48391 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48494))))) /
        C47957;
    const double C18124 = C9185 * C18113;
    const double C21359 = C47990 * C18113;
    const double C35234 = C23800 * C18113;
    const double C26820 = C48031 * C545;
    const double C26817 = C48031 * C252;
    const double C26814 = C48031 * C133;
    const double C26811 = C48031 * C132;
    const double C26808 = C48031 * C253;
    const double C26805 = C48031 * C544;
    const double C26802 = C48031 * C543;
    const double C26799 = C48031 * C254;
    const double C26796 = C48031 * C131;
    const double C26996 = C48031 * C1209;
    const double C26981 = C48031 * C1210;
    const double C27196 = C48031 * C1433;
    const double C27193 = C48031 * C646;
    const double C27190 = C48031 * C365;
    const double C27187 = C48031 * C366;
    const double C27184 = C48031 * C645;
    const double C27181 = C48031 * C1434;
    const double C27462 = C48031 * C1719;
    const double C27634 = C48031 * C1895;
    const double C28063 = C48031 * C2345;
    const double C28060 = C48031 * C2342;
    const double C28057 = C48031 * C896;
    const double C28212 = C48031 * C364;
    const double C28636 = C48031 * C2343;
    const double C28633 = C48031 * C897;
    const double C29753 = C48031 * C3266;
    const double C29750 = C48031 * C2787;
    const double C36957 = C48031 * C898;
    const double C37258 = C48031 * C2786;
    const double C38081 = C48031 * C3695;
    const double C120 =
        (C48031 / C47958 + ((C47952 * C48060 + C26784) * ae) / C47951) /
            C47958 -
        ((C47952 * (C48060 / C47958 + (0 * ae) / C47951) + C49188) * be) /
            C47951;
    const double C3829 =
        C48031 / C47958 - ((C47952 * C48060 + C26784) * be) / C47951;
    const double C22570 =
        C48031 / C47958 + ((C47952 * C48060 + C26784) * ae) / C47951;
    const double C7872 = C7843 * C545;
    const double C7869 = C7843 * C252;
    const double C7866 = C7843 * C133;
    const double C7863 = C7843 * C132;
    const double C7860 = C7843 * C253;
    const double C7857 = C7843 * C544;
    const double C7854 = C7843 * C543;
    const double C7851 = C7843 * C254;
    const double C7848 = C7843 * C131;
    const double C8048 = C7843 * C1209;
    const double C8033 = C7843 * C1210;
    const double C8248 = C7843 * C1433;
    const double C8245 = C7843 * C646;
    const double C8242 = C7843 * C365;
    const double C8239 = C7843 * C366;
    const double C8236 = C7843 * C645;
    const double C8233 = C7843 * C1434;
    const double C8514 = C7843 * C1719;
    const double C8686 = C7843 * C1895;
    const double C9115 = C7843 * C2345;
    const double C9112 = C7843 * C2342;
    const double C9109 = C7843 * C896;
    const double C15439 = C7843 * C898;
    const double C15436 = C7843 * C364;
    const double C15433 = C7843 * C897;
    const double C15588 = C7843 * C2343;
    const double C15764 = C7843 * C2786;
    const double C15749 = C7843 * C2787;
    const double C16211 = C7843 * C3266;
    const double C16632 = C7843 * C3695;
    const double C48033 = C48029 * be;
    const double C7841 = C48005 + (C48029 * ae) / C47951 + C47990;
    const double C48035 = C48030 / C47951;
    const double C48034 = C48028 / C47970;
    const double C48032 = C47952 * C48028;
    const double C11379 = C48028 / C47951;
    const double C1239 = C1026 * C538;
    const double C1233 = C1026 * C248;
    const double C1224 = C1026 * C537;
    const double C1218 = C1026 * C249;
    const double C1730 = C1026 * C1207;
    const double C1911 = C1026 * C639;
    const double C1905 = C1026 * C1431;
    const double C2816 = C1026 * C891;
    const double C2810 = C1026 * C360;
    const double C2801 = C1026 * C890;
    const double C2795 = C1026 * C361;
    const double C3272 = C1026 * C2335;
    const double C3706 = C1026 * C2784;
    const double C6444 = C1026 * C640;
    const double C1241 = C1028 * C539;
    const double C1235 = C1028 * C247;
    const double C1226 = C1028 * C538;
    const double C1220 = C1028 * C248;
    const double C1728 = C1028 * C1206;
    const double C1909 = C1028 * C640;
    const double C1903 = C1028 * C1430;
    const double C2818 = C1028 * C892;
    const double C2812 = C1028 * C359;
    const double C2803 = C1028 * C891;
    const double C2797 = C1028 * C360;
    const double C3274 = C1028 * C2336;
    const double C3704 = C1028 * C2783;
    const double C6446 = C1028 * C641;
    const double C23978 = C23797 * C1206;
    const double C23974 = C23797 * C538;
    const double C23970 = C23797 * C248;
    const double C23964 = C23797 * C1207;
    const double C23960 = C23797 * C537;
    const double C23956 = C23797 * C249;
    const double C24398 = C23797 * C1715;
    const double C24550 = C23797 * C639;
    const double C24546 = C23797 * C1431;
    const double C24542 = C23797 * C1891;
    const double C25298 = C23797 * C2336;
    const double C25294 = C23797 * C640;
    const double C25290 = C23797 * C2335;
    const double C25532 = C23797 * C891;
    const double C25528 = C23797 * C360;
    const double C25520 = C23797 * C890;
    const double C25516 = C23797 * C361;
    const double C25906 = C23797 * C2338;
    const double C26112 = C23797 * C3262;
    const double C26661 = C23797 * C2784;
    const double C30106 = C23797 * C1430;
    const double C34500 = C23797 * C2783;
    const double C35231 = C23797 * C3691;
    const double C1277 = C1265 + C1229;
    const double C1274 = C1262 + C1223;
    const double C2854 = C2842 + C2806;
    const double C2851 = C2839 + C2800;
    const double C8079 = C8067 + C8031;
    const double C8076 = C8064 + C8025;
    const double C15795 = C15783 + C15747;
    const double C15792 = C15780 + C15741;
    const double C9330 = C9322 + C9304;
    const double C9329 = C9321 + C9302;
    const double C9328 = C9320 + C9300;
    const double C9327 = C9319 + C9297;
    const double C9326 = C9318 + C9295;
    const double C9325 = C9317 + C9293;
    const double C9324 = C9316 + C9291;
    const double C9590 = C9589 + C9586;
    const double C9697 = C9693 + C9684;
    const double C9696 = C9692 + C9682;
    const double C9695 = C9691 + C9680;
    const double C9694 = C9690 + C9678;
    const double C10243 = C10237 + C10224;
    const double C10242 = C10236 + C10222;
    const double C10241 = C10235 + C10219;
    const double C10240 = C10234 + C10217;
    const double C10239 = C10233 + C10214;
    const double C10238 = C10232 + C10210;
    const double C10427 = C10423 + C10412;
    const double C10426 = C10422 + C10410;
    const double C10425 = C10421 + C10405;
    const double C10424 = C10420 + C10403;
    const double C10692 = C10691 + C10686;
    const double C10857 = C10855 + C10848;
    const double C10856 = C10854 + C10844;
    const double C11275 = C11274 + C11269;
    const double C18132 = C18129 + C18121;
    const double C18131 = C18128 + C18118;
    const double C18368 = C18367 + C18364;
    const double C18603 = C18602 + C18599;
    const double C21606 = C21605 + C21603;
    const double C11599 = C11587 + C11559;
    const double C11597 = C11585 + C11555;
    const double C11595 = C11583 + C11549;
    const double C11593 = C11581 + C11545;
    const double C11591 = C11579 + C11541;
    const double C12152 = C12146 + C12131;
    const double C12150 = C12144 + C12127;
    const double C13105 = C13101 + C13087;
    const double C13103 = C13099 + C13083;
    const double C13665 = C13661 + C13651;
    const double C13663 = C13659 + C13646;
    const double C14215 = C14213 + C14202;
    const double C19165 = C19163 + C19155;
    const double C19710 = C19708 + C19702;
    const double C20259 = C20257 + C20248;
    const double C24017 = C24005 + C23977;
    const double C24015 = C24003 + C23973;
    const double C24013 = C24001 + C23967;
    const double C24011 = C23999 + C23963;
    const double C24009 = C23997 + C23959;
    const double C24570 = C24564 + C24549;
    const double C24568 = C24562 + C24545;
    const double C25317 = C25311 + C25293;
    const double C25563 = C25555 + C25535;
    const double C25561 = C25553 + C25531;
    const double C25559 = C25551 + C25523;
    const double C25557 = C25549 + C25519;
    const double C25912 = C25910 + C25905;
    const double C26122 = C26120 + C26111;
    const double C26671 = C26669 + C26660;
    const double C27027 = C27015 + C26979;
    const double C27024 = C27012 + C26973;
    const double C28652 = C28646 + C28625;
    const double C29761 = C29758 + C29744;
    const double C1256 = C1237 + C1045;
    const double C4014 = C3993 + C3840;
    const double C8058 = C8039 + C7859;
    const double C22755 = C22734 + C22581;
    const double C27006 = C26987 + C26807;
    const double C2833 = C2814 + C1453;
    const double C5340 = C5323 + C4169;
    const double C15774 = C15755 + C8243;
    const double C31770 = C31753 + C22910;
    const double C28643 = C28630 + C27191;
    const double C1931 = C1925 + C1908;
    const double C8703 = C8697 + C8680;
    const double C12883 = C12879 + C12869;
    const double C25319 = C25313 + C25297;
    const double C27651 = C27645 + C27628;
    const double C48285 = C48284 + C48271;
    const double C257 =
        (3 * (C48347 * C48229 + C48354 + C48354 + C48174 * C48361) + C48357 +
         C48357 +
         C48174 * (2 * C48361 + C48358 + C48358 +
                   C48174 * (C48350 + C48359 + C48359 +
                             C48174 * (2 * ae * C48347 * C48259 +
                                       C48174 * C48347 * C48316)))) /
        C47957;
    const double C1456 = C1031 * C647;
    const double C4165 = C3831 * C647;
    const double C6248 = C1029 * C647;
    const double C8246 = C7845 * C647;
    const double C12669 = C47990 * C647;
    const double C22906 = C22572 * C647;
    const double C25093 = C23800 * C647;
    const double C27194 = C48060 * C647;
    const double C28215 = C48031 * C647;
    const double C39842 = C7843 * C647;
    const double C369 =
        (3 * (C48391 * C48229 + C48398 + C48398 + C48174 * C48405) + C48401 +
         C48401 +
         C48174 * (2 * C48405 + C48402 + C48402 +
                   C48174 * (C48394 + C48403 + C48403 +
                             C48174 * (2 * ae * C48391 * C48259 +
                                       C48174 * C48391 * C48316)))) /
        C47957;
    const double C1259 = C1243 + C1042;
    const double C4421 = C4409 + C3995;
    const double C8061 = C8045 + C7856;
    const double C23162 = C23150 + C22736;
    const double C27009 = C26993 + C26804;
    const double C2836 = C2820 + C2476;
    const double C6089 = C6077 + C4948;
    const double C15777 = C15761 + C15432;
    const double C32519 = C32507 + C23689;
    const double C37262 = C37255 + C28634;
    const double C3289 = C3286 + C3277;
    const double C16221 = C16218 + C16209;
    const double C18957 = C18955 + C18951;
    const double C25321 = C25315 + C25301;
    const double C29206 = C29203 + C29192;
    const double C1740 = C1736 + C1230;
    const double C8521 = C8517 + C8032;
    const double C11589 = C11577 + C11392;
    const double C24007 = C23995 + C23810;
    const double C27469 = C27465 + C26980;
    const double C1922 = C1916 + C1442;
    const double C8694 = C8688 + C8232;
    const double C12881 = C12877 + C11745;
    const double C30113 = C30111 + C24163;
    const double C27642 = C27636 + C27180;
    const double C3715 = C3712 + C2807;
    const double C16638 = C16635 + C15748;
    const double C20634 = C20632 + C19157;
    const double C34509 = C34507 + C25537;
    const double C38087 = C38084 + C29751;
    const double C9331 = C9323 + C9306;
    const double C11990 = C11988 + C11979;
    const double C24408 = C24406 + C24397;
    const double C14461 = C14460 + C14458;
    const double C12148 = C12142 + C12123;
    const double C24566 = C24560 + C24541;
    const double C18133 = C18130 + C18123;
    const double C21364 = C21362 + C21355;
    const double C35239 = C35237 + C35230;
    const double C48340 = C48339 + C48321;
    const double C48487 = ae * C48482;
    const double C2636 = C1031 * C2631;
    const double C4952 = C3831 * C2631;
    const double C15589 = C7845 * C2631;
    const double C18753 = C47990 * C2631;
    const double C23693 = C22572 * C2631;
    const double C25095 = C23800 * C2631;
    const double C28637 = C48060 * C2631;
    const double C48463 = ae * C48458;
    const double C1212 = (2 * C48351 + C48347 * C48458) / C47951;
    const double C1436 = (C48391 * C48458) / C47951;
    const double C48521 = ae * C48516;
    const double C2789 = (2 * C48395 + C48391 * C48516) / C47951;
    const double C1216 =
        (2 * (2 * ae * (2 * C48349 + C48347 * C48456) + C48174 * C48540) +
         C48543 + C48543 +
         C48174 *
             (C48540 + C48544 + C48544 +
              C48174 *
                  (2 * ae * (2 * C48373 + C48347 * (C48259 + C48309 * C48436)) +
                   C48174 * (2 * C48374 +
                             C48347 * (C48316 +
                                       (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48436))))) /
        C47957;
    const double C1734 = C1031 * C1720;
    const double C8515 = C7845 * C1720;
    const double C9201 = C9185 * C1720;
    const double C11565 = C47990 * C1720;
    const double C23983 = C23800 * C1720;
    const double C27463 = C48060 * C1720;
    const double C1915 = C1031 * C1896;
    const double C8687 = C7845 * C1896;
    const double C11747 = C47990 * C1896;
    const double C14315 = C9185 * C1896;
    const double C24165 = C23800 * C1896;
    const double C27635 = C48060 * C1896;
    const double C2793 =
        (2 * (2 * ae * (2 * C48393 + C48391 * C48514) + C48174 * C48603) +
         C48606 + C48606 +
         C48174 *
             (C48603 + C48607 + C48607 +
              C48174 *
                  (2 * ae * (2 * C48417 + C48391 * (C48259 + C48309 * C48494)) +
                   C48174 * (2 * C48418 +
                             C48391 * (C48316 +
                                       (C48292 * C48293 +
                                        C48178 * bs[8] * std::pow(C48172, 8)) *
                                           C48181 * C48494))))) /
        C47957;
    const double C3710 = C1031 * C3696;
    const double C16633 = C7845 * C3696;
    const double C17942 = C9185 * C3696;
    const double C20630 = C47990 * C3696;
    const double C34505 = C23800 * C3696;
    const double C38082 = C48060 * C3696;
    const double C151 = C120 * C134;
    const double C148 = C120 * C133;
    const double C265 = C120 * C252;
    const double C377 = C120 * C364;
    const double C556 = C120 * C545;
    const double C658 = C120 * C647;
    const double C909 = C120 * C898;
    const double C3851 = C3829 * C134;
    const double C3846 = C3829 * C133;
    const double C3842 = C3829 * C252;
    const double C3839 = C3829 * C253;
    const double C3835 = C3829 * C132;
    const double C4009 = C3829 * C545;
    const double C3996 = C3829 * C544;
    const double C4179 = C3829 * C647;
    const double C4175 = C3829 * C364;
    const double C4170 = C3829 * C365;
    const double C4166 = C3829 * C646;
    const double C4419 = C3829 * C1209;
    const double C4573 = C3829 * C1433;
    const double C4951 = C3829 * C2343;
    const double C4947 = C3829 * C897;
    const double C5335 = C3829 * C898;
    const double C6087 = C3829 * C2786;
    const double C22592 = C22570 * C134;
    const double C22587 = C22570 * C133;
    const double C22583 = C22570 * C252;
    const double C22580 = C22570 * C253;
    const double C22576 = C22570 * C132;
    const double C22750 = C22570 * C545;
    const double C22737 = C22570 * C544;
    const double C22920 = C22570 * C647;
    const double C22916 = C22570 * C364;
    const double C22911 = C22570 * C365;
    const double C22907 = C22570 * C646;
    const double C23160 = C22570 * C1209;
    const double C23314 = C22570 * C1433;
    const double C23692 = C22570 * C2343;
    const double C23688 = C22570 * C897;
    const double C31765 = C22570 * C898;
    const double C32517 = C22570 * C2786;
    const double C48037 = C48033 / C47951;
    const double C7871 = C7841 * C544;
    const double C7868 = C7841 * C253;
    const double C7865 = C7841 * C132;
    const double C7864 = C7841 * C131;
    const double C7861 = C7841 * C254;
    const double C7858 = C7841 * C543;
    const double C7853 = C7841 * C542;
    const double C7850 = C7841 * C255;
    const double C7847 = C7841 * C130;
    const double C8047 = C7841 * C1210;
    const double C8034 = C7841 * C1211;
    const double C8247 = C7841 * C1434;
    const double C8244 = C7841 * C645;
    const double C8241 = C7841 * C366;
    const double C8240 = C7841 * C367;
    const double C8237 = C7841 * C644;
    const double C8234 = C7841 * C1435;
    const double C8513 = C7841 * C1718;
    const double C8685 = C7841 * C1894;
    const double C9114 = C7841 * C2344;
    const double C9111 = C7841 * C2341;
    const double C9108 = C7841 * C895;
    const double C15438 = C7841 * C897;
    const double C15435 = C7841 * C365;
    const double C15434 = C7841 * C896;
    const double C15587 = C7841 * C2342;
    const double C15763 = C7841 * C2787;
    const double C15750 = C7841 * C2788;
    const double C16210 = C7841 * C3265;
    const double C16631 = C7841 * C3694;
    const double C39841 = C7841 * C646;
    const double C48038 = C48034 - C48035;
    const double C7842 = C48034 + (C48024 * ae) / C47951;
    const double C48036 = C48032 / C47951;
    const double C11560 = C11379 * C1206;
    const double C11556 = C11379 * C538;
    const double C11552 = C11379 * C248;
    const double C11546 = C11379 * C1207;
    const double C11542 = C11379 * C537;
    const double C11538 = C11379 * C249;
    const double C11980 = C11379 * C1715;
    const double C12132 = C11379 * C639;
    const double C12128 = C11379 * C1431;
    const double C12124 = C11379 * C1891;
    const double C12870 = C11379 * C1430;
    const double C12866 = C11379 * C640;
    const double C13084 = C11379 * C360;
    const double C13080 = C11379 * C361;
    const double C13652 = C11379 * C2335;
    const double C13647 = C11379 * C2338;
    const double C14203 = C11379 * C890;
    const double C18948 = C11379 * C2336;
    const double C19152 = C11379 * C891;
    const double C19703 = C11379 * C3262;
    const double C20249 = C11379 * C2784;
    const double C20625 = C11379 * C2783;
    const double C21356 = C11379 * C3691;
    const double C1257 = C1239 + C1044;
    const double C1254 = C1233 + C1047;
    const double C1251 = C1224 + C1039;
    const double C1248 = C1218 + C1036;
    const double C1738 = C1730 + C1232;
    const double C1921 = C1911 + C1447;
    const double C1918 = C1905 + C1444;
    const double C2834 = C2816 + C2478;
    const double C2831 = C2810 + C1451;
    const double C2828 = C2801 + C2354;
    const double C2825 = C2795 + C1450;
    const double C3281 = C3272 + C2357;
    const double C3714 = C3706 + C2809;
    const double C6450 = C6444 + C1454;
    const double C1258 = C1241 + C1043;
    const double C1255 = C1235 + C1046;
    const double C1252 = C1226 + C1040;
    const double C1249 = C1220 + C1037;
    const double C1737 = C1728 + C1231;
    const double C1920 = C1909 + C1446;
    const double C1917 = C1903 + C1443;
    const double C2835 = C2818 + C2477;
    const double C2832 = C2812 + C1452;
    const double C2829 = C2803 + C2355;
    const double C2826 = C2797 + C1449;
    const double C3282 = C3274 + C2358;
    const double C3713 = C3704 + C2808;
    const double C6451 = C6446 + C1455;
    const double C23994 = C23978 + C23811;
    const double C23992 = C23974 + C23813;
    const double C23990 = C23970 + C23815;
    const double C23988 = C23964 + C23808;
    const double C23986 = C23960 + C23806;
    const double C23984 = C23956 + C23804;
    const double C24405 = C24398 + C23969;
    const double C24559 = C24550 + C24155;
    const double C24557 = C24546 + C24153;
    const double C24555 = C24542 + C24151;
    const double C25308 = C25298 + C25085;
    const double C25306 = C25294 + C24160;
    const double C25304 = C25290 + C24932;
    const double C25546 = C25532 + C25087;
    const double C25544 = C25528 + C24158;
    const double C25542 = C25520 + C24930;
    const double C25540 = C25516 + C24157;
    const double C25909 = C25906 + C24934;
    const double C26119 = C26112 + C25525;
    const double C26668 = C26661 + C25527;
    const double C30110 = C30106 + C24162;
    const double C34506 = C34500 + C25536;
    const double C35236 = C35231 + C26663;
    const double C9338 = C9330 * C48975;
    const double C14456 = C9330 * C49190;
    const double C41557 = C9330 * C31480;
    const double C9337 = C9329 * C48975;
    const double C10220 = C9329 * C49255;
    const double C14454 = C9329 * C49190;
    const double C16909 = C9329 * C15428;
    const double C41555 = C9329 * C31480;
    const double C46977 = C9329 * C49058;
    const double C9336 = C9328 * C48975;
    const double C10215 = C9328 * C49255;
    const double C14452 = C9328 * C49190;
    const double C16906 = C9328 * C15428;
    const double C21599 = C9328 * C20358;
    const double C41553 = C9328 * C31480;
    const double C42647 = C9328 * C49262;
    const double C46974 = C9328 * C49058;
    const double C9335 = C9327 * C48975;
    const double C14824 = C9327 * C49190;
    const double C41920 = C9327 * C31480;
    const double C9334 = C9326 * C48975;
    const double C10688 = C9326 * C49255;
    const double C14450 = C9326 * C49190;
    const double C17317 = C9326 * C15428;
    const double C41551 = C9326 * C31480;
    const double C47385 = C9326 * C49058;
    const double C9333 = C9325 * C48975;
    const double C10211 = C9325 * C49255;
    const double C14448 = C9325 * C49190;
    const double C16903 = C9325 * C15428;
    const double C21969 = C9325 * C20358;
    const double C41549 = C9325 * C31480;
    const double C43012 = C9325 * C49262;
    const double C46971 = C9325 * C49058;
    const double C9332 = C9324 * C48975;
    const double C10207 = C9324 * C49255;
    const double C14446 = C9324 * C49190;
    const double C16900 = C9324 * C15428;
    const double C21595 = C9324 * C20358;
    const double C41547 = C9324 * C31480;
    const double C42643 = C9324 * C49262;
    const double C46968 = C9324 * C49058;
    const double C9591 = C9590 * C48975;
    const double C9701 = C9697 * C48975;
    const double C10208 = C9697 * C49244;
    const double C10850 = C9697 * C49255;
    const double C14447 = C9697 * C49062;
    const double C14960 = C9697 * C49190;
    const double C16901 = C9697 * C15429;
    const double C17470 = C9697 * C15428;
    const double C21596 = C9697 * C20359;
    const double C22103 = C9697 * C20358;
    const double C41548 = C9697 * C49062;
    const double C42056 = C9697 * C31480;
    const double C42644 = C9697 * C49259;
    const double C43146 = C9697 * C49262;
    const double C46969 = C9697 * C49065;
    const double C47538 = C9697 * C49058;
    const double C9700 = C9696 * C48975;
    const double C10212 = C9696 * C49244;
    const double C10846 = C9696 * C49255;
    const double C14449 = C9696 * C49062;
    const double C14958 = C9696 * C49190;
    const double C16904 = C9696 * C15429;
    const double C17467 = C9696 * C15428;
    const double C21968 = C9696 * C20359;
    const double C41550 = C9696 * C49062;
    const double C42054 = C9696 * C31480;
    const double C43011 = C9696 * C49259;
    const double C46972 = C9696 * C49065;
    const double C47535 = C9696 * C49058;
    const double C9699 = C9695 * C48975;
    const double C10687 = C9695 * C49244;
    const double C14451 = C9695 * C49062;
    const double C14956 = C9695 * C49190;
    const double C17316 = C9695 * C15429;
    const double C41552 = C9695 * C49062;
    const double C42052 = C9695 * C31480;
    const double C47384 = C9695 * C49065;
    const double C9698 = C9694 * C48975;
    const double C14823 = C9694 * C49062;
    const double C41919 = C9694 * C49062;
    const double C10249 = C10243 * C49225;
    const double C16911 = C10243 * C49225;
    const double C46979 = C10243 * C36954;
    const double C10248 = C10242 * C49244;
    const double C14455 = C10242 * C49062;
    const double C16910 = C10242 * C15429;
    const double C41556 = C10242 * C49062;
    const double C46978 = C10242 * C49065;
    const double C10247 = C10241 * C49225;
    const double C16908 = C10241 * C49225;
    const double C21601 = C10241 * C20360;
    const double C42649 = C10241 * C49250;
    const double C46976 = C10241 * C36954;
    const double C10246 = C10240 * C49244;
    const double C14453 = C10240 * C49062;
    const double C16907 = C10240 * C15429;
    const double C21600 = C10240 * C20359;
    const double C41554 = C10240 * C49062;
    const double C42648 = C10240 * C49259;
    const double C46975 = C10240 * C49065;
    const double C10245 = C10239 * C49225;
    const double C10845 = C10239 * C49244;
    const double C14957 = C10239 * C49062;
    const double C16905 = C10239 * C49225;
    const double C17466 = C10239 * C15429;
    const double C21967 = C10239 * C20360;
    const double C42053 = C10239 * C49062;
    const double C43010 = C10239 * C49250;
    const double C46973 = C10239 * C36954;
    const double C47534 = C10239 * C49065;
    const double C10244 = C10238 * C49225;
    const double C10849 = C10238 * C49244;
    const double C14959 = C10238 * C49062;
    const double C16902 = C10238 * C49225;
    const double C17469 = C10238 * C15429;
    const double C21597 = C10238 * C20360;
    const double C22102 = C10238 * C20359;
    const double C42055 = C10238 * C49062;
    const double C42645 = C10238 * C49250;
    const double C43145 = C10238 * C49259;
    const double C46970 = C10238 * C36954;
    const double C47537 = C10238 * C49065;
    const double C10693 = C10692 * C49225;
    const double C14955 = C10692 * C49062;
    const double C17315 = C10692 * C49225;
    const double C42051 = C10692 * C49062;
    const double C47383 = C10692 * C36954;
    const double C10859 = C10857 * C49225;
    const double C17468 = C10857 * C49225;
    const double C21598 = C10857 * C49204;
    const double C22101 = C10857 * C20360;
    const double C42646 = C10857 * C49204;
    const double C43144 = C10857 * C49250;
    const double C47536 = C10857 * C36954;
    const double C10858 = C10856 * C49225;
    const double C17465 = C10856 * C49225;
    const double C21966 = C10856 * C49204;
    const double C43009 = C10856 * C49204;
    const double C47533 = C10856 * C36954;
    const double C22100 = C18368 * C49204;
    const double C43143 = C18368 * C49204;
    const double C21607 = C21606 * C49204;
    const double C42650 = C21606 * C49204;
    const double C1268 = C1256 + C1045;
    const double C4022 = C4014 + C3840;
    const double C8070 = C8058 + C7859;
    const double C22763 = C22755 + C22581;
    const double C27018 = C27006 + C26807;
    const double C2845 = C2833 + C1453;
    const double C5348 = C5340 + C4169;
    const double C15786 = C15774 + C8243;
    const double C31778 = C31770 + C22910;
    const double C28649 = C28643 + C27191;
    const double C48286 = ae * C48285;
    const double C135 =
        (4 * C48240 + C48174 * C48285 + (3 * C48225 + C48174 * C48268) * ae) /
        C47951;
    const double C251 = (C48347 * C48285) / C47951;
    const double C363 = (C48391 * C48285) / C47951;
    const double C4006 = C49188 * C257;
    const double C22747 = C49188 * C257;
    const double C6452 = C6448 + C1456;
    const double C4575 = C4563 + C4165;
    const double C40046 = C40042 + C8246;
    const double C23316 = C23304 + C22906;
    const double C28419 = C28415 + C27194;
    const double C5332 = C49188 * C369;
    const double C31762 = C49188 * C369;
    const double C1271 = C1259 + C1042;
    const double C4425 = C4421 + C3995;
    const double C8073 = C8061 + C7856;
    const double C23166 = C23162 + C22736;
    const double C27021 = C27009 + C26804;
    const double C2848 = C2836 + C2476;
    const double C6093 = C6089 + C4948;
    const double C15789 = C15777 + C15432;
    const double C32523 = C32519 + C23689;
    const double C37265 = C37262 + C28634;
    const double C1743 = C1740 + C1727;
    const double C8524 = C8521 + C8508;
    const double C11601 = C11589 + C11563;
    const double C24019 = C24007 + C23981;
    const double C27472 = C27469 + C27456;
    const double C1928 = C1922 + C1902;
    const double C8700 = C8694 + C8674;
    const double C12885 = C12881 + C12873;
    const double C30115 = C30113 + C30109;
    const double C27648 = C27642 + C27622;
    const double C3718 = C3715 + C3703;
    const double C16641 = C16638 + C16626;
    const double C20636 = C20634 + C20628;
    const double C34511 = C34509 + C34503;
    const double C38090 = C38087 + C38075;
    const double C9339 = C9331 * C48975;
    const double C14462 = C14461 * C49062;
    const double C41558 = C14461 * C49062;
    const double C48342 = ae * C48340;
    const double C48341 = C48174 * C48340;
    const double C48375 = C48347 * C48340;
    const double C48419 = C48391 * C48340;
    const double C546 = (C48285 + C48340 * C48436) / C47951;
    const double C899 = (C48285 + C48340 * C48494) / C47951;
    const double C653 =
        (3 * (C48474 + C48478 + C48478 + C48174 * C48491) + C48487 + C48487 +
         C48174 *
             (2 * C48491 + C48488 + C48488 +
              C48174 * (C48481 + C48489 + C48489 +
                        C48174 * (2 * ae * C48391 * C48347 * C48309 +
                                  C48174 * C48391 * C48347 *
                                      (C48292 * C48293 +
                                       C48178 * bs[8] * std::pow(C48172, 8)) *
                                      C48181)))) /
        C47957;
    const double C551 =
        (3 * (C48445 + C48449 + C48449 + C48174 * C48467) + C48463 + C48463 +
         C48174 *
             (2 * C48467 + C48464 + C48464 +
              C48174 * (C48457 + C48465 + C48465 +
                        C48174 * (2 * ae * (C48259 + C48309 * C48436) +
                                  C48174 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48436))))) /
        C47957;
    const double C1247 = C1031 * C1212;
    const double C4420 = C3831 * C1212;
    const double C8049 = C7845 * C1212;
    const double C11407 = C47990 * C1212;
    const double C23161 = C22572 * C1212;
    const double C23825 = C23800 * C1212;
    const double C26997 = C48060 * C1212;
    const double C1459 = C1031 * C1436;
    const double C4574 = C3831 * C1436;
    const double C8249 = C7845 * C1436;
    const double C12671 = C47990 * C1436;
    const double C23315 = C22572 * C1436;
    const double C27197 = C48060 * C1436;
    const double C29911 = C23800 * C1436;
    const double C904 =
        (3 * (C48503 + C48507 + C48507 + C48174 * C48525) + C48521 + C48521 +
         C48174 *
             (2 * C48525 + C48522 + C48522 +
              C48174 * (C48515 + C48523 + C48523 +
                        C48174 * (2 * ae * (C48259 + C48309 * C48494) +
                                  C48174 * (C48316 + (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                         C48181 * C48494))))) /
        C47957;
    const double C2824 = C1031 * C2789;
    const double C6088 = C3831 * C2789;
    const double C15765 = C7845 * C2789;
    const double C20364 = C47990 * C2789;
    const double C32518 = C22572 * C2789;
    const double C34239 = C23800 * C2789;
    const double C37259 = C48060 * C2789;
    const double C48040 = C48005 - C48037;
    const double C26991 = C48038 * C539;
    const double C26985 = C48038 * C247;
    const double C26976 = C48038 * C538;
    const double C26970 = C48038 * C248;
    const double C27457 = C48038 * C1206;
    const double C27629 = C48038 * C640;
    const double C27623 = C48038 * C1430;
    const double C28413 = C48038 * C641;
    const double C28628 = C48038 * C359;
    const double C28622 = C48038 * C360;
    const double C29193 = C48038 * C2336;
    const double C29745 = C48038 * C891;
    const double C37253 = C48038 * C892;
    const double C38076 = C48038 * C2783;
    const double C119 =
        (C48038 / C47958 + ((C48061 - C48010 / C48058) * ae) / C47951) /
            C47958 -
        ((2 * (C48060 / C47958 + (0 * ae) / C47951) -
          C48010 / (C47951 * 4 * C47967)) *
         be) /
            C47951;
    const double C3828 =
        C48038 / C47958 - ((C48061 - C48010 / C48058) * be) / C47951;
    const double C22569 =
        C48038 / C47958 + ((C48061 - C48010 / C48058) * ae) / C47951;
    const double C8043 = C7842 * C539;
    const double C8037 = C7842 * C247;
    const double C8028 = C7842 * C538;
    const double C8022 = C7842 * C248;
    const double C8509 = C7842 * C1206;
    const double C8681 = C7842 * C640;
    const double C8675 = C7842 * C1430;
    const double C15759 = C7842 * C892;
    const double C15753 = C7842 * C359;
    const double C15744 = C7842 * C891;
    const double C15738 = C7842 * C360;
    const double C16206 = C7842 * C2336;
    const double C16627 = C7842 * C2783;
    const double C40040 = C7842 * C641;
    const double C48039 = C48036 + C48022;
    const double C11576 = C11560 + C11393;
    const double C11574 = C11556 + C11395;
    const double C11572 = C11552 + C11397;
    const double C11570 = C11546 + C11390;
    const double C11568 = C11542 + C11388;
    const double C11566 = C11538 + C11386;
    const double C11987 = C11980 + C11551;
    const double C12141 = C12132 + C11737;
    const double C12139 = C12128 + C11735;
    const double C12137 = C12124 + C11733;
    const double C12876 = C12870 + C11744;
    const double C12874 = C12866 + C11742;
    const double C13096 = C13084 + C11740;
    const double C13094 = C13080 + C11739;
    const double C13658 = C13652 + C12514;
    const double C13656 = C13647 + C12516;
    const double C14212 = C14203 + C12512;
    const double C18952 = C18948 + C13090;
    const double C19160 = C19152 + C13088;
    const double C19707 = C19703 + C14207;
    const double C20256 = C20249 + C14205;
    const double C20631 = C20625 + C19156;
    const double C21361 = C21356 + C20251;
    const double C1269 = C1257 + C1044;
    const double C1266 = C1254 + C1047;
    const double C1263 = C1251 + C1039;
    const double C1260 = C1248 + C1036;
    const double C1742 = C1738 + C1232;
    const double C1927 = C1921 + C1447;
    const double C1924 = C1918 + C1444;
    const double C2846 = C2834 + C2478;
    const double C2843 = C2831 + C1451;
    const double C2840 = C2828 + C2354;
    const double C2837 = C2825 + C1450;
    const double C3284 = C3281 + C2357;
    const double C3717 = C3714 + C2809;
    const double C6453 = C6450 + C1454;
    const double C1270 = C1258 + C1043;
    const double C1267 = C1255 + C1046;
    const double C1264 = C1252 + C1040;
    const double C1261 = C1249 + C1037;
    const double C1741 = C1737 + C1231;
    const double C1926 = C1920 + C1446;
    const double C1923 = C1917 + C1443;
    const double C2847 = C2835 + C2477;
    const double C2844 = C2832 + C1452;
    const double C2841 = C2829 + C2355;
    const double C2838 = C2826 + C1449;
    const double C3285 = C3282 + C2358;
    const double C3716 = C3713 + C2808;
    const double C6454 = C6451 + C1455;
    const double C24006 = C23994 + C23811;
    const double C24004 = C23992 + C23813;
    const double C24002 = C23990 + C23815;
    const double C24000 = C23988 + C23808;
    const double C23998 = C23986 + C23806;
    const double C23996 = C23984 + C23804;
    const double C24407 = C24405 + C23969;
    const double C24565 = C24559 + C24155;
    const double C24563 = C24557 + C24153;
    const double C24561 = C24555 + C24151;
    const double C25314 = C25308 + C25085;
    const double C25312 = C25306 + C24160;
    const double C25310 = C25304 + C24932;
    const double C25554 = C25546 + C25087;
    const double C25552 = C25544 + C24158;
    const double C25550 = C25542 + C24930;
    const double C25548 = C25540 + C24157;
    const double C25911 = C25909 + C24934;
    const double C26121 = C26119 + C25525;
    const double C26670 = C26668 + C25527;
    const double C30112 = C30110 + C24162;
    const double C34508 = C34506 + C25536;
    const double C35238 = C35236 + C26663;
    const double C10684 = C10211 + C10212;
    const double C14821 = C14448 + C14449;
    const double C17314 = C16903 + C16904;
    const double C41917 = C41549 + C41550;
    const double C47382 = C46971 + C46972;
    const double C14822 = C14450 + C14451;
    const double C41918 = C41551 + C41552;
    const double C1280 = C1268 + C1238;
    const double C4030 = C4022 + C3994;
    const double C8082 = C8070 + C8040;
    const double C22771 = C22763 + C22735;
    const double C27030 = C27018 + C26988;
    const double C2857 = C2845 + C2815;
    const double C5356 = C5348 + C5324;
    const double C15798 = C15786 + C15756;
    const double C31786 = C31778 + C31754;
    const double C28655 = C28649 + C28631;
    const double C142 =
        (4 * (2 * C48234 + C48238 + C48238 + C48174 * C48277) + C48286 +
         C48286 +
         C48174 * (3 * C48277 + C48283 + C48283 +
                   C48174 * (2 * C48273 + C48279 + C48279 +
                             C48174 * (C48266 + C48272 + C48272 +
                                       C48174 * (2 * ae * C48259 +
                                                 C48174 *
                                                     (C48246 * C48247 +
                                                      C48178 * bs[7] *
                                                          std::pow(C48180, 7)) *
                                                     C48181))))) /
        C47957;
    const double C158 = C120 * C135;
    const double C150 = C122 * C135;
    const double C3852 = C3831 * C135;
    const double C22593 = C22572 * C135;
    const double C272 = C120 * C251;
    const double C264 = C122 * C251;
    const double C1056 = C1031 * C251;
    const double C3855 = C3829 * C251;
    const double C3841 = C3831 * C251;
    const double C7870 = C7845 * C251;
    const double C22596 = C22570 * C251;
    const double C22582 = C22572 * C251;
    const double C26818 = C48060 * C251;
    const double C384 = C120 * C363;
    const double C376 = C122 * C363;
    const double C2481 = C1031 * C363;
    const double C4176 = C3831 * C363;
    const double C5055 = C3829 * C363;
    const double C15437 = C7845 * C363;
    const double C22917 = C22572 * C363;
    const double C28213 = C48060 * C363;
    const double C31485 = C22570 * C363;
    const double C6455 = C6452 + C1456;
    const double C4579 = C4575 + C4165;
    const double C40049 = C40046 + C8246;
    const double C23320 = C23316 + C22906;
    const double C28422 = C28419 + C27194;
    const double C1283 = C1271 + C1244;
    const double C4429 = C4425 + C4410;
    const double C8085 = C8073 + C8046;
    const double C23170 = C23166 + C23151;
    const double C27033 = C27021 + C26994;
    const double C2860 = C2848 + C2821;
    const double C6097 = C6093 + C6078;
    const double C15801 = C15789 + C15762;
    const double C32527 = C32523 + C32508;
    const double C37268 = C37265 + C37256;
    const double C48343 = C48294 + C48341;
    const double C48382 = ae * C48375;
    const double C648 = (C48391 * C48375) / C47951;
    const double C48426 = ae * C48419;
    const double C557 = C122 * C546;
    const double C1059 = C1031 * C546;
    const double C4010 = C3831 * C546;
    const double C7873 = C7845 * C546;
    const double C22751 = C22572 * C546;
    const double C26821 = C48060 * C546;
    const double C910 = C122 * C899;
    const double C2484 = C1031 * C899;
    const double C5336 = C3831 * C899;
    const double C15440 = C7845 * C899;
    const double C31766 = C22572 * C899;
    const double C36958 = C48060 * C899;
    const double C48042 = C48040 + C47990;
    const double C27008 = C26991 + C26805;
    const double C27005 = C26985 + C26808;
    const double C27002 = C26976 + C26802;
    const double C26999 = C26970 + C26799;
    const double C27466 = C27457 + C26981;
    const double C27640 = C27629 + C27184;
    const double C27637 = C27623 + C27181;
    const double C28418 = C28413 + C27193;
    const double C28642 = C28628 + C27190;
    const double C28639 = C28622 + C27187;
    const double C29200 = C29193 + C28060;
    const double C29756 = C29745 + C28057;
    const double C37261 = C37253 + C28633;
    const double C38085 = C38076 + C29750;
    const double C4003 = C3828 * C246;
    const double C3991 = C3828 * C247;
    const double C4411 = C3828 * C539;
    const double C4565 = C3828 * C641;
    const double C5329 = C3828 * C358;
    const double C5321 = C3828 * C359;
    const double C6079 = C3828 * C892;
    const double C22744 = C22569 * C246;
    const double C22732 = C22569 * C247;
    const double C23152 = C22569 * C539;
    const double C23306 = C22569 * C641;
    const double C31759 = C22569 * C358;
    const double C31751 = C22569 * C359;
    const double C32509 = C22569 * C892;
    const double C8060 = C8043 + C7857;
    const double C8057 = C8037 + C7860;
    const double C8054 = C8028 + C7854;
    const double C8051 = C8022 + C7851;
    const double C8518 = C8509 + C8033;
    const double C8692 = C8681 + C8236;
    const double C8689 = C8675 + C8233;
    const double C15776 = C15759 + C15433;
    const double C15773 = C15753 + C8242;
    const double C15770 = C15744 + C9109;
    const double C15767 = C15738 + C8239;
    const double C16214 = C16206 + C9112;
    const double C16636 = C16627 + C15749;
    const double C40045 = C40040 + C8245;
    const double C48041 = C48039 * be;
    const double C7840 = C47980 + (C48039 * ae) / C47951 - C48012;
    const double C11588 = C11576 + C11393;
    const double C11586 = C11574 + C11395;
    const double C11584 = C11572 + C11397;
    const double C11582 = C11570 + C11390;
    const double C11580 = C11568 + C11388;
    const double C11578 = C11566 + C11386;
    const double C11989 = C11987 + C11551;
    const double C12147 = C12141 + C11737;
    const double C12145 = C12139 + C11735;
    const double C12143 = C12137 + C11733;
    const double C12880 = C12876 + C11744;
    const double C12878 = C12874 + C11742;
    const double C13100 = C13096 + C11740;
    const double C13098 = C13094 + C11739;
    const double C13662 = C13658 + C12514;
    const double C13660 = C13656 + C12516;
    const double C14214 = C14212 + C12512;
    const double C18954 = C18952 + C13090;
    const double C19162 = C19160 + C13088;
    const double C19709 = C19707 + C14207;
    const double C20258 = C20256 + C14205;
    const double C20633 = C20631 + C19156;
    const double C21363 = C21361 + C20251;
    const double C1281 = C1269 + C1240;
    const double C1278 = C1266 + C1234;
    const double C1275 = C1263 + C1225;
    const double C1272 = C1260 + C1219;
    const double C1745 = C1742 + C1731;
    const double C1933 = C1927 + C1912;
    const double C1930 = C1924 + C1906;
    const double C2858 = C2846 + C2817;
    const double C2855 = C2843 + C2811;
    const double C2852 = C2840 + C2802;
    const double C2849 = C2837 + C2796;
    const double C3287 = C3284 + C3273;
    const double C3720 = C3717 + C3707;
    const double C6456 = C6453 + C6445;
    const double C1282 = C1270 + C1242;
    const double C1279 = C1267 + C1236;
    const double C1276 = C1264 + C1227;
    const double C1273 = C1261 + C1221;
    const double C1744 = C1741 + C1729;
    const double C1932 = C1926 + C1910;
    const double C1929 = C1923 + C1904;
    const double C2859 = C2847 + C2819;
    const double C2856 = C2844 + C2813;
    const double C2853 = C2841 + C2804;
    const double C2850 = C2838 + C2798;
    const double C3288 = C3285 + C3275;
    const double C3719 = C3716 + C3705;
    const double C6457 = C6454 + C6447;
    const double C24018 = C24006 + C23979;
    const double C24016 = C24004 + C23975;
    const double C24014 = C24002 + C23971;
    const double C24012 = C24000 + C23965;
    const double C24010 = C23998 + C23961;
    const double C24008 = C23996 + C23957;
    const double C24409 = C24407 + C24399;
    const double C24571 = C24565 + C24551;
    const double C24569 = C24563 + C24547;
    const double C24567 = C24561 + C24543;
    const double C25320 = C25314 + C25299;
    const double C25318 = C25312 + C25295;
    const double C25316 = C25310 + C25291;
    const double C25562 = C25554 + C25533;
    const double C25560 = C25552 + C25529;
    const double C25558 = C25550 + C25521;
    const double C25556 = C25548 + C25517;
    const double C25913 = C25911 + C25907;
    const double C26123 = C26121 + C26113;
    const double C26672 = C26670 + C26662;
    const double C30114 = C30112 + C30107;
    const double C34510 = C34508 + C34501;
    const double C35240 = C35238 + C35232;
    const double C10689 = C10684 + C10245;
    const double C17318 = C17314 + C16905;
    const double C47386 = C47382 + C46973;
    const double C4018 = C4005 + C3841;
    const double C22759 = C22746 + C22582;
    const double C5344 = C5331 + C4176;
    const double C31774 = C31761 + C22917;
    const double C6458 = C6455 + C6449;
    const double C4583 = C4579 + C4564;
    const double C40052 = C40049 + C40043;
    const double C23324 = C23320 + C23305;
    const double C28425 = C28422 + C28416;
    const double C48344 = C48343 + C48329;
    const double C262 =
        (4 * (2 * C48361 + C48358 + C48358 + C48174 * C48389) + C48382 +
         C48382 +
         C48174 * (3 * C48389 + C48383 + C48383 +
                   C48174 * (2 * C48387 + C48384 + C48384 +
                             C48174 * (C48374 + C48385 + C48385 +
                                       C48174 * (2 * ae * C48347 * C48309 +
                                                 C48174 * C48347 *
                                                     (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                     C48181))))) /
        C47957;
    const double C659 = C122 * C648;
    const double C4180 = C3831 * C648;
    const double C6249 = C1031 * C648;
    const double C22921 = C22572 * C648;
    const double C28216 = C48060 * C648;
    const double C39843 = C7845 * C648;
    const double C374 =
        (4 * (2 * C48405 + C48402 + C48402 + C48174 * C48433) + C48426 +
         C48426 +
         C48174 * (3 * C48433 + C48427 + C48427 +
                   C48174 * (2 * C48431 + C48428 + C48428 +
                             C48174 * (C48418 + C48429 + C48429 +
                                       C48174 * (2 * ae * C48391 * C48309 +
                                                 C48174 * C48391 *
                                                     (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                     C48181))))) /
        C47957;
    const double C26819 = C48042 * C544;
    const double C26816 = C48042 * C253;
    const double C26813 = C48042 * C132;
    const double C26812 = C48042 * C131;
    const double C26809 = C48042 * C254;
    const double C26806 = C48042 * C543;
    const double C26801 = C48042 * C542;
    const double C26798 = C48042 * C255;
    const double C26795 = C48042 * C130;
    const double C26995 = C48042 * C1210;
    const double C26982 = C48042 * C1211;
    const double C27195 = C48042 * C1434;
    const double C27192 = C48042 * C645;
    const double C27189 = C48042 * C366;
    const double C27188 = C48042 * C367;
    const double C27185 = C48042 * C644;
    const double C27182 = C48042 * C1435;
    const double C27461 = C48042 * C1718;
    const double C27633 = C48042 * C1894;
    const double C28062 = C48042 * C2344;
    const double C28059 = C48042 * C2341;
    const double C28056 = C48042 * C895;
    const double C28214 = C48042 * C646;
    const double C28211 = C48042 * C365;
    const double C28635 = C48042 * C2342;
    const double C28632 = C48042 * C896;
    const double C29752 = C48042 * C3265;
    const double C29749 = C48042 * C2788;
    const double C36956 = C48042 * C897;
    const double C37257 = C48042 * C2787;
    const double C38080 = C48042 * C3694;
    const double C114 =
        (((((0 - (C47952 * C47950) / C47951) * ae) / C47951 -
           (0 * be) / C47970 + (2 * C47953) / C47951) /
              C47958 -
          ((C47952 * C48000 + 0) * be) / C47951 + C47979 - C47992) /
             C47958 +
         ((C47952 * C48027 + 0) * ae) / C47951) /
            C47958 -
        ((C47952 * (C48027 / C47958 +
                    ((C47952 * C48042 + C48862) * ae) / C47951 + C48031) +
          C49260) *
         be) /
            C47951 +
        C48042 / C47958 + ((C47952 * C48031 + C48870) * ae) / C47951 +
        2 * (C47990 / C47958 - (0 * be) / C47951);
    const double C116 =
        (C48027 / C47958 + ((C47952 * C48042 + C48862) * ae) / C47951 +
         C48031) /
            C47958 -
        ((C47952 * (C48042 / C47958 +
                    ((C47952 * C48031 + C48870) * ae) / C47951 + C48061) +
          C49253) *
         be) /
            C47951 +
        2 * (C48031 / C47958 + ((C47952 * C48060 + C26784) * ae) / C47951);
    const double C118 =
        (C48042 / C47958 + ((C47952 * C48031 + C48870) * ae) / C47951 +
         C48061) /
            C47958 -
        ((C47952 *
              (C48031 / C47958 + ((C47952 * C48060 + C26784) * ae) / C47951) +
          C49240) *
         be) /
            C47951 +
        3 * (C48060 / C47958 + (0 * ae) / C47951);
    const double C3825 =
        C48027 / C47958 - ((C47952 * C48042 + C48862) * be) / C47951 + C48031;
    const double C3827 =
        C48042 / C47958 - ((C47952 * C48031 + C48870) * be) / C47951 + C48061;
    const double C22566 =
        C48027 / C47958 + ((C47952 * C48042 + C48862) * ae) / C47951 + C48031;
    const double C22568 =
        C48042 / C47958 + ((C47952 * C48031 + C48870) * ae) / C47951 + C48061;
    const double C27020 = C27008 + C26805;
    const double C27017 = C27005 + C26808;
    const double C27014 = C27002 + C26802;
    const double C27011 = C26999 + C26799;
    const double C27470 = C27466 + C26981;
    const double C27646 = C27640 + C27184;
    const double C27643 = C27637 + C27181;
    const double C28421 = C28418 + C27193;
    const double C28648 = C28642 + C27190;
    const double C28645 = C28639 + C27187;
    const double C29204 = C29200 + C28060;
    const double C29759 = C29756 + C28057;
    const double C37264 = C37261 + C28633;
    const double C38088 = C38085 + C29750;
    const double C4017 = C4003 + C3842;
    const double C4013 = C3991 + C3839;
    const double C4422 = C4411 + C3996;
    const double C4576 = C4565 + C4166;
    const double C5343 = C5329 + C4175;
    const double C5339 = C5321 + C4170;
    const double C6090 = C6079 + C4947;
    const double C22758 = C22744 + C22583;
    const double C22754 = C22732 + C22580;
    const double C23163 = C23152 + C22737;
    const double C23317 = C23306 + C22907;
    const double C31773 = C31759 + C22916;
    const double C31769 = C31751 + C22911;
    const double C32520 = C32509 + C23688;
    const double C8072 = C8060 + C7857;
    const double C8069 = C8057 + C7860;
    const double C8066 = C8054 + C7854;
    const double C8063 = C8051 + C7851;
    const double C8522 = C8518 + C8033;
    const double C8698 = C8692 + C8236;
    const double C8695 = C8689 + C8233;
    const double C15788 = C15776 + C15433;
    const double C15785 = C15773 + C8242;
    const double C15782 = C15770 + C9109;
    const double C15779 = C15767 + C8239;
    const double C16217 = C16214 + C9112;
    const double C16639 = C16636 + C15749;
    const double C40048 = C40045 + C8245;
    const double C48043 = C48041 / C47951;
    const double C8041 = C7840 * C538;
    const double C8035 = C7840 * C248;
    const double C8026 = C7840 * C537;
    const double C8020 = C7840 * C249;
    const double C8511 = C7840 * C1207;
    const double C8683 = C7840 * C639;
    const double C8677 = C7840 * C1431;
    const double C15757 = C7840 * C891;
    const double C15751 = C7840 * C360;
    const double C15742 = C7840 * C890;
    const double C15736 = C7840 * C361;
    const double C16204 = C7840 * C2335;
    const double C16629 = C7840 * C2784;
    const double C40038 = C7840 * C640;
    const double C11600 = C11588 + C11561;
    const double C11598 = C11586 + C11557;
    const double C11596 = C11584 + C11553;
    const double C11594 = C11582 + C11547;
    const double C11592 = C11580 + C11543;
    const double C11590 = C11578 + C11539;
    const double C11991 = C11989 + C11981;
    const double C12153 = C12147 + C12133;
    const double C12151 = C12145 + C12129;
    const double C12149 = C12143 + C12125;
    const double C12884 = C12880 + C12871;
    const double C12882 = C12878 + C12867;
    const double C13104 = C13100 + C13085;
    const double C13102 = C13098 + C13081;
    const double C13666 = C13662 + C13653;
    const double C13664 = C13660 + C13648;
    const double C14216 = C14214 + C14204;
    const double C18956 = C18954 + C18949;
    const double C19164 = C19162 + C19153;
    const double C19711 = C19709 + C19704;
    const double C20260 = C20258 + C20250;
    const double C20635 = C20633 + C20626;
    const double C21365 = C21363 + C21357;
    const double C1725 = C1275 + C1276;
    const double C7188 = C1932 + C1933;
    const double C7187 = C1933 + C1932;
    const double C3701 = C2852 + C2853;
    const double C24395 = C24012 + C24013;
    const double C24394 = C24010 + C24011;
    const double C26115 = C24570 + C24571;
    const double C26108 = C24571 + C24570;
    const double C30651 = C24569 + C24568;
    const double C30848 = C24568 + C24569;
    const double C26114 = C25317 + C25316;
    const double C26109 = C25316 + C25317;
    const double C26658 = C25558 + C25559;
    const double C35228 = C26672 + C26671;
    const double C4026 = C4018 + C3841;
    const double C22767 = C22759 + C22582;
    const double C5352 = C5344 + C4176;
    const double C31782 = C31774 + C22917;
    const double C48345 = ae * C48344;
    const double C136 =
        (5 * C48285 + C48174 * C48344 + (4 * C48268 + C48174 * C48326) * ae) /
        C47951;
    const double C256 = (C48347 * C48344) / C47951;
    const double C368 = (C48391 * C48344) / C47951;
    const double C155 = C114 * C132;
    const double C154 = C114 * C131;
    const double C145 = C114 * C130;
    const double C269 = C114 * C254;
    const double C268 = C114 * C255;
    const double C381 = C114 * C366;
    const double C380 = C114 * C367;
    const double C553 = C114 * C542;
    const double C655 = C114 * C644;
    const double C906 = C114 * C895;
    const double C156 = C116 * C133;
    const double C153 = C116 * C132;
    const double C146 = C116 * C131;
    const double C270 = C116 * C253;
    const double C267 = C116 * C254;
    const double C382 = C116 * C365;
    const double C379 = C116 * C366;
    const double C554 = C116 * C543;
    const double C656 = C116 * C645;
    const double C907 = C116 * C896;
    const double C157 = C118 * C134;
    const double C152 = C118 * C133;
    const double C147 = C118 * C132;
    const double C271 = C118 * C252;
    const double C266 = C118 * C253;
    const double C383 = C118 * C364;
    const double C378 = C118 * C365;
    const double C555 = C118 * C544;
    const double C657 = C118 * C646;
    const double C908 = C118 * C897;
    const double C3853 = C3825 * C253;
    const double C3849 = C3825 * C132;
    const double C3848 = C3825 * C131;
    const double C3844 = C3825 * C254;
    const double C3837 = C3825 * C255;
    const double C3833 = C3825 * C130;
    const double C4007 = C3825 * C543;
    const double C3998 = C3825 * C542;
    const double C4177 = C3825 * C645;
    const double C4173 = C3825 * C366;
    const double C4172 = C3825 * C367;
    const double C4168 = C3825 * C644;
    const double C4417 = C3825 * C1211;
    const double C4571 = C3825 * C1435;
    const double C4949 = C3825 * C2341;
    const double C4945 = C3825 * C895;
    const double C5053 = C3825 * C365;
    const double C5333 = C3825 * C896;
    const double C6085 = C3825 * C2788;
    const double C3854 = C3827 * C252;
    const double C3850 = C3827 * C133;
    const double C3847 = C3827 * C132;
    const double C3843 = C3827 * C253;
    const double C3838 = C3827 * C254;
    const double C3834 = C3827 * C131;
    const double C4008 = C3827 * C544;
    const double C3997 = C3827 * C543;
    const double C4178 = C3827 * C646;
    const double C4174 = C3827 * C365;
    const double C4171 = C3827 * C366;
    const double C4167 = C3827 * C645;
    const double C4418 = C3827 * C1210;
    const double C4572 = C3827 * C1434;
    const double C4950 = C3827 * C2342;
    const double C4946 = C3827 * C896;
    const double C5054 = C3827 * C364;
    const double C5334 = C3827 * C897;
    const double C6086 = C3827 * C2787;
    const double C22594 = C22566 * C253;
    const double C22590 = C22566 * C132;
    const double C22589 = C22566 * C131;
    const double C22585 = C22566 * C254;
    const double C22578 = C22566 * C255;
    const double C22574 = C22566 * C130;
    const double C22748 = C22566 * C543;
    const double C22739 = C22566 * C542;
    const double C22918 = C22566 * C645;
    const double C22914 = C22566 * C366;
    const double C22913 = C22566 * C367;
    const double C22909 = C22566 * C644;
    const double C23158 = C22566 * C1211;
    const double C23312 = C22566 * C1435;
    const double C23690 = C22566 * C2341;
    const double C23686 = C22566 * C895;
    const double C31483 = C22566 * C365;
    const double C31763 = C22566 * C896;
    const double C32515 = C22566 * C2788;
    const double C22595 = C22568 * C252;
    const double C22591 = C22568 * C133;
    const double C22588 = C22568 * C132;
    const double C22584 = C22568 * C253;
    const double C22579 = C22568 * C254;
    const double C22575 = C22568 * C131;
    const double C22749 = C22568 * C544;
    const double C22738 = C22568 * C543;
    const double C22919 = C22568 * C646;
    const double C22915 = C22568 * C365;
    const double C22912 = C22568 * C366;
    const double C22908 = C22568 * C645;
    const double C23159 = C22568 * C1210;
    const double C23313 = C22568 * C1434;
    const double C23691 = C22568 * C2342;
    const double C23687 = C22568 * C896;
    const double C31484 = C22568 * C364;
    const double C31764 = C22568 * C897;
    const double C32516 = C22568 * C2787;
    const double C27032 = C27020 + C26992;
    const double C27029 = C27017 + C26986;
    const double C27026 = C27014 + C26977;
    const double C27023 = C27011 + C26971;
    const double C27473 = C27470 + C27458;
    const double C27652 = C27646 + C27630;
    const double C27649 = C27643 + C27624;
    const double C28424 = C28421 + C28414;
    const double C28654 = C28648 + C28629;
    const double C28651 = C28645 + C28623;
    const double C29207 = C29204 + C29194;
    const double C29762 = C29759 + C29746;
    const double C37267 = C37264 + C37254;
    const double C38091 = C38088 + C38077;
    const double C4025 = C4017 + C3842;
    const double C4021 = C4013 + C3839;
    const double C4426 = C4422 + C3996;
    const double C4580 = C4576 + C4166;
    const double C5351 = C5343 + C4175;
    const double C5347 = C5339 + C4170;
    const double C6094 = C6090 + C4947;
    const double C22766 = C22758 + C22583;
    const double C22762 = C22754 + C22580;
    const double C23167 = C23163 + C22737;
    const double C23321 = C23317 + C22907;
    const double C31781 = C31773 + C22916;
    const double C31777 = C31769 + C22911;
    const double C32524 = C32520 + C23688;
    const double C8084 = C8072 + C8044;
    const double C8081 = C8069 + C8038;
    const double C8078 = C8066 + C8029;
    const double C8075 = C8063 + C8023;
    const double C8525 = C8522 + C8510;
    const double C8704 = C8698 + C8682;
    const double C8701 = C8695 + C8676;
    const double C15800 = C15788 + C15760;
    const double C15797 = C15785 + C15754;
    const double C15794 = C15782 + C15745;
    const double C15791 = C15779 + C15739;
    const double C16220 = C16217 + C16207;
    const double C16642 = C16639 + C16628;
    const double C40051 = C40048 + C40041;
    const double C48044 = C47980 - C48043;
    const double C8059 = C8041 + C7858;
    const double C8056 = C8035 + C7861;
    const double C8053 = C8026 + C7853;
    const double C8050 = C8020 + C7850;
    const double C8519 = C8511 + C8034;
    const double C8693 = C8683 + C8237;
    const double C8690 = C8677 + C8234;
    const double C15775 = C15757 + C15434;
    const double C15772 = C15751 + C8241;
    const double C15769 = C15742 + C9108;
    const double C15766 = C15736 + C8240;
    const double C16213 = C16204 + C9111;
    const double C16637 = C16629 + C15750;
    const double C40044 = C40038 + C8244;
    const double C11977 = C11594 + C11595;
    const double C11976 = C11592 + C11593;
    const double C13654 = C12152 + C12153;
    const double C13644 = C12153 + C12152;
    const double C13447 = C12151 + C12150;
    const double C13649 = C12150 + C12151;
    const double C19705 = C13665 + C13666;
    const double C19700 = C13666 + C13665;
    const double C20246 = C14216 + C14215;
    const double C21353 = C20260 + C20259;
    const double C1735 = C1725 + C1277;
    const double C7190 = C1931 + C7188;
    const double C7189 = C7187 + C1931;
    const double C3711 = C3701 + C2854;
    const double C24403 = C24395 * C48975;
    const double C24402 = C24394 * C48975;
    const double C30650 = C24394 * C49190;
    const double C33405 = C24394 * C31480;
    const double C30652 = C30651 * C49062;
    const double C33406 = C30651 * C49062;
    const double C4034 = C4026 + C4006;
    const double C22775 = C22767 + C22747;
    const double C5360 = C5352 + C5332;
    const double C31790 = C31782 + C31762;
    const double C143 =
        (5 * (3 * C48277 + C48283 + C48283 + C48174 * C48335) + C48345 +
         C48345 +
         C48174 *
             (4 * C48335 + C48342 + C48342 +
              C48174 *
                  (3 * C48330 + C48338 + C48338 +
                   C48174 * (2 * C48324 + C48332 + C48332 +
                             C48174 * (C48316 + C48323 + C48323 +
                                       C48174 * (2 * ae * C48309 +
                                                 C48174 *
                                                     (C48292 * C48293 +
                                                      C48178 * bs[8] *
                                                          std::pow(C48172, 8)) *
                                                     C48181)))))) /
        C47957;
    const double C159 = C122 * C136;
    const double C273 = C122 * C256;
    const double C3856 = C3831 * C256;
    const double C22597 = C22572 * C256;
    const double C385 = C122 * C368;
    const double C5056 = C3831 * C368;
    const double C31486 = C22572 * C368;
    const double C4033 = C4025 + C4004;
    const double C4029 = C4021 + C3992;
    const double C4430 = C4426 + C4412;
    const double C4584 = C4580 + C4566;
    const double C5359 = C5351 + C5330;
    const double C5355 = C5347 + C5322;
    const double C6098 = C6094 + C6080;
    const double C22774 = C22766 + C22745;
    const double C22770 = C22762 + C22733;
    const double C23171 = C23167 + C23153;
    const double C23325 = C23321 + C23307;
    const double C31789 = C31781 + C31760;
    const double C31785 = C31777 + C31752;
    const double C32528 = C32524 + C32510;
    const double C48045 = C48044 - C48012;
    const double C8071 = C8059 + C7858;
    const double C8068 = C8056 + C7861;
    const double C8065 = C8053 + C7853;
    const double C8062 = C8050 + C7850;
    const double C8523 = C8519 + C8034;
    const double C8699 = C8693 + C8237;
    const double C8696 = C8690 + C8234;
    const double C15787 = C15775 + C15434;
    const double C15784 = C15772 + C8241;
    const double C15781 = C15769 + C9108;
    const double C15778 = C15766 + C8240;
    const double C16216 = C16213 + C9111;
    const double C16640 = C16637 + C15750;
    const double C40047 = C40044 + C8244;
    const double C11985 = C11977 * C48975;
    const double C11984 = C11976 * C48975;
    const double C13446 = C11976 * C49190;
    const double C44379 = C11976 * C31480;
    const double C13448 = C13447 * C49062;
    const double C44380 = C13447 * C49062;
    const double C1739 = C1735 * C48975;
    const double C30653 = C30650 + C30652;
    const double C33407 = C33405 + C33406;
    const double C26989 = C48045 * C538;
    const double C26983 = C48045 * C248;
    const double C26974 = C48045 * C537;
    const double C26968 = C48045 * C249;
    const double C27459 = C48045 * C1207;
    const double C27631 = C48045 * C639;
    const double C27625 = C48045 * C1431;
    const double C28411 = C48045 * C640;
    const double C28626 = C48045 * C360;
    const double C28620 = C48045 * C361;
    const double C29195 = C48045 * C2335;
    const double C29747 = C48045 * C890;
    const double C37251 = C48045 * C891;
    const double C38078 = C48045 * C2784;
    const double C113 =
        (((ae * -2 * C47950) / C47967 -
          (((C47952 * C47968) / C47957 + 2 * C48000) * be) / C47951 -
          C47971 / C47957) /
             C47958 +
         ((C47952 * C48026 + 2 * C48027) * ae) / C47951) /
            C47958 -
        ((C47952 * (C48026 / C47958 +
                    ((C47952 * C48045 + 2 * C48042) * ae) / C47951 + C48038) +
          2 * (C48027 / C47958 + ((C47952 * C48042 + C48862) * ae) / C47951 +
               C48031)) *
         be) /
            C47951 +
        C48045 / C47958 + ((C47952 * C48038 + 2 * C48031) * ae) / C47951 +
        (-2 * C48003) / (C47951 * 4 * C47957);
    const double C115 =
        (C48026 / C47958 + ((C47952 * C48045 + 2 * C48042) * ae) / C47951 +
         C48038) /
            C47958 -
        ((C47952 * (C48045 / C47958 +
                    ((C47952 * C48038 + 2 * C48031) * ae) / C47951 +
                    (-2 * C48003) / C48058) +
          2 * (C48042 / C47958 + ((C47952 * C48031 + C48870) * ae) / C47951 +
               C48061)) *
         be) /
            C47951 +
        2 * (C48038 / C47958 + ((C48061 - C48010 / C48058) * ae) / C47951);
    const double C117 =
        (C48045 / C47958 + ((C47952 * C48038 + 2 * C48031) * ae) / C47951 +
         (-2 * C48003) / C48058) /
            C47958 -
        ((C47952 *
              (C48038 / C47958 + ((C48061 - C48010 / C48058) * ae) / C47951) +
          2 * (C48031 / C47958 + ((C47952 * C48060 + C26784) * ae) / C47951)) *
         be) /
            C47951 +
        (-3 * C48003) / (C47951 * 4 * C47967);
    const double C3824 = C48026 / C47958 -
                         ((C47952 * C48045 + 2 * C48042) * be) / C47951 +
                         C48038;
    const double C3826 = C48045 / C47958 -
                         ((C47952 * C48038 + 2 * C48031) * be) / C47951 +
                         (-2 * C48003) / C48058;
    const double C22565 = C48026 / C47958 +
                          ((C47952 * C48045 + 2 * C48042) * ae) / C47951 +
                          C48038;
    const double C22567 = C48045 / C47958 +
                          ((C47952 * C48038 + 2 * C48031) * ae) / C47951 +
                          (-2 * C48003) / C48058;
    const double C8083 = C8071 + C8042;
    const double C8080 = C8068 + C8036;
    const double C8077 = C8065 + C8027;
    const double C8074 = C8062 + C8021;
    const double C8526 = C8523 + C8512;
    const double C8705 = C8699 + C8684;
    const double C8702 = C8696 + C8678;
    const double C15799 = C15787 + C15758;
    const double C15796 = C15784 + C15752;
    const double C15793 = C15781 + C15743;
    const double C15790 = C15778 + C15737;
    const double C16219 = C16216 + C16205;
    const double C16643 = C16640 + C16630;
    const double C40050 = C40047 + C40039;
    const double C13449 = C13446 + C13448;
    const double C44381 = C44379 + C44380;
    const double C27007 = C26989 + C26806;
    const double C27004 = C26983 + C26809;
    const double C27001 = C26974 + C26801;
    const double C26998 = C26968 + C26798;
    const double C27467 = C27459 + C26982;
    const double C27641 = C27631 + C27185;
    const double C27638 = C27625 + C27182;
    const double C28417 = C28411 + C27192;
    const double C28641 = C28626 + C27189;
    const double C28638 = C28620 + C27188;
    const double C29201 = C29195 + C28059;
    const double C29757 = C29747 + C28056;
    const double C37260 = C37251 + C28632;
    const double C38086 = C38078 + C29749;
    const double C3999 = C3824 * C248;
    const double C3987 = C3824 * C249;
    const double C4415 = C3824 * C537;
    const double C4569 = C3824 * C639;
    const double C5325 = C3824 * C360;
    const double C5317 = C3824 * C361;
    const double C6083 = C3824 * C890;
    const double C4001 = C3826 * C247;
    const double C3989 = C3826 * C248;
    const double C4413 = C3826 * C538;
    const double C4567 = C3826 * C640;
    const double C5327 = C3826 * C359;
    const double C5319 = C3826 * C360;
    const double C6081 = C3826 * C891;
    const double C22740 = C22565 * C248;
    const double C22728 = C22565 * C249;
    const double C23156 = C22565 * C537;
    const double C23310 = C22565 * C639;
    const double C31755 = C22565 * C360;
    const double C31747 = C22565 * C361;
    const double C32513 = C22565 * C890;
    const double C22742 = C22567 * C247;
    const double C22730 = C22567 * C248;
    const double C23154 = C22567 * C538;
    const double C23308 = C22567 * C640;
    const double C31757 = C22567 * C359;
    const double C31749 = C22567 * C360;
    const double C32511 = C22567 * C891;
    const double C8506 = C8077 + C8078;
    const double C40782 = C8704 + C8705;
    const double C40781 = C8705 + C8704;
    const double C16624 = C15793 + C15794;
    const double C27019 = C27007 + C26806;
    const double C27016 = C27004 + C26809;
    const double C27013 = C27001 + C26801;
    const double C27010 = C26998 + C26798;
    const double C27471 = C27467 + C26982;
    const double C27647 = C27641 + C27185;
    const double C27644 = C27638 + C27182;
    const double C28420 = C28417 + C27192;
    const double C28647 = C28641 + C27189;
    const double C28644 = C28638 + C27188;
    const double C29205 = C29201 + C28059;
    const double C29760 = C29757 + C28056;
    const double C37263 = C37260 + C28632;
    const double C38089 = C38086 + C29749;
    const double C4015 = C3999 + C3844;
    const double C4011 = C3987 + C3837;
    const double C4424 = C4415 + C3998;
    const double C4578 = C4569 + C4168;
    const double C5341 = C5325 + C4173;
    const double C5337 = C5317 + C4172;
    const double C6092 = C6083 + C4945;
    const double C4016 = C4001 + C3843;
    const double C4012 = C3989 + C3838;
    const double C4423 = C4413 + C3997;
    const double C4577 = C4567 + C4167;
    const double C5342 = C5327 + C4174;
    const double C5338 = C5319 + C4171;
    const double C6091 = C6081 + C4946;
    const double C22756 = C22740 + C22585;
    const double C22752 = C22728 + C22578;
    const double C23165 = C23156 + C22739;
    const double C23319 = C23310 + C22909;
    const double C31771 = C31755 + C22914;
    const double C31767 = C31747 + C22913;
    const double C32522 = C32513 + C23686;
    const double C22757 = C22742 + C22584;
    const double C22753 = C22730 + C22579;
    const double C23164 = C23154 + C22738;
    const double C23318 = C23308 + C22908;
    const double C31772 = C31757 + C22915;
    const double C31768 = C31749 + C22912;
    const double C32521 = C32511 + C23687;
    const double C8516 = C8506 + C8079;
    const double C40784 = C8703 + C40782;
    const double C40783 = C40781 + C8703;
    const double C16634 = C16624 + C15795;
    const double C27031 = C27019 + C26990;
    const double C27028 = C27016 + C26984;
    const double C27025 = C27013 + C26975;
    const double C27022 = C27010 + C26969;
    const double C27474 = C27471 + C27460;
    const double C27653 = C27647 + C27632;
    const double C27650 = C27644 + C27626;
    const double C28423 = C28420 + C28412;
    const double C28653 = C28647 + C28627;
    const double C28650 = C28644 + C28621;
    const double C29208 = C29205 + C29196;
    const double C29763 = C29760 + C29748;
    const double C37266 = C37263 + C37252;
    const double C38092 = C38089 + C38079;
    const double C4023 = C4015 + C3844;
    const double C4019 = C4011 + C3837;
    const double C4428 = C4424 + C3998;
    const double C4582 = C4578 + C4168;
    const double C5349 = C5341 + C4173;
    const double C5345 = C5337 + C4172;
    const double C6096 = C6092 + C4945;
    const double C4024 = C4016 + C3843;
    const double C4020 = C4012 + C3838;
    const double C4427 = C4423 + C3997;
    const double C4581 = C4577 + C4167;
    const double C5350 = C5342 + C4174;
    const double C5346 = C5338 + C4171;
    const double C6095 = C6091 + C4946;
    const double C22764 = C22756 + C22585;
    const double C22760 = C22752 + C22578;
    const double C23169 = C23165 + C22739;
    const double C23323 = C23319 + C22909;
    const double C31779 = C31771 + C22914;
    const double C31775 = C31767 + C22913;
    const double C32526 = C32522 + C23686;
    const double C22765 = C22757 + C22584;
    const double C22761 = C22753 + C22579;
    const double C23168 = C23164 + C22738;
    const double C23322 = C23318 + C22908;
    const double C31780 = C31772 + C22915;
    const double C31776 = C31768 + C22912;
    const double C32525 = C32521 + C23687;
    const double C8520 = C8516 * C48975;
    const double C27454 = C27025 + C27026;
    const double C29197 = C27652 + C27653;
    const double C29190 = C27653 + C27652;
    const double C38073 = C29763 + C29762;
    const double C4031 = C4023 + C4000;
    const double C4027 = C4019 + C3988;
    const double C4432 = C4428 + C4416;
    const double C4586 = C4582 + C4570;
    const double C5357 = C5349 + C5326;
    const double C5353 = C5345 + C5318;
    const double C6100 = C6096 + C6084;
    const double C4032 = C4024 + C4002;
    const double C4028 = C4020 + C3990;
    const double C4431 = C4427 + C4414;
    const double C4585 = C4581 + C4568;
    const double C5358 = C5350 + C5328;
    const double C5354 = C5346 + C5320;
    const double C6099 = C6095 + C6082;
    const double C22772 = C22764 + C22741;
    const double C22768 = C22760 + C22729;
    const double C23173 = C23169 + C23157;
    const double C23327 = C23323 + C23311;
    const double C31787 = C31779 + C31756;
    const double C31783 = C31775 + C31748;
    const double C32530 = C32526 + C32514;
    const double C22773 = C22765 + C22743;
    const double C22769 = C22761 + C22731;
    const double C23172 = C23168 + C23155;
    const double C23326 = C23322 + C23309;
    const double C31788 = C31780 + C31758;
    const double C31784 = C31776 + C31750;
    const double C32529 = C32525 + C32512;
    const double C27464 = C27454 + C27027;
    const double C29202 = C27651 + C29197;
    const double C29198 = C29190 + C27651;
    const double C38083 = C38073 + C29761;
    const double C27468 = C27464 * C48975;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                   C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                   C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                      C48975 * C49018 +
                  (C48045 * C249 + C26798 + C26798 + C48862 * C261 +
                   C48038 * C248 + C26799 + C26799 + C48870 * C260 +
                   C26792 * C247 + C26800 + C26800 + C26784 * C259) *
                      C48975 * C49025 +
                  (C48045 * C537 + C26801 + C26801 + C48862 * C547 +
                   C48038 * C538 + C26802 + C26802 + C48870 * C548 +
                   C26792 * C539 + C26803 + C26803 + C26784 * C549) *
                      C48975 * C26787) *
                     C48945 * C48928 * C110 -
                 ((C26792 * C540 + C26804 + C26804 + C26784 * C550 +
                   C48038 * C539 + C26805 + C26805 + C48870 * C549 +
                   C48045 * C538 + C26806 + C26806 + C48862 * C548) *
                      C48975 * C26787 +
                  (C26792 * C246 + C26807 + C26807 + C26784 * C258 +
                   C48038 * C247 + C26808 + C26808 + C48870 * C259 +
                   C48045 * C248 + C26809 + C26809 + C48862 * C260) *
                      C48975 * C49025 +
                  (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                   C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                   C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                      C48975 * C49018) *
                     C48945 * C48928 * C111 +
                 ((C48045 * C125 + C26813 + C26813 + C48862 * C139 +
                   C48038 * C126 + C26814 + C26814 + C48870 * C140 +
                   C26792 * C127 + C26815 + C26815 + C26784 * C141) *
                      C48975 * C49018 +
                  (C48045 * C247 + C26816 + C26816 + C48862 * C259 +
                   C48038 * C246 + C26817 + C26817 + C48870 * C258 +
                   C26792 * C245 + C26818 + C26818 + C26784 * C257) *
                      C48975 * C49025 +
                  (C48045 * C539 + C26819 + C26819 + C48862 * C549 +
                   C48038 * C540 + C26820 + C26820 + C48870 * C550 +
                   C26792 * C541 + C26821 + C26821 + C26784 * C551) *
                      C48975 * C26787) *
                     C48945 * C48928 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                    C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                    C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                       C48975 * C49018 +
                   (C27022 + C27023 + C27024) * C48975 * C49025 +
                   (C27025 + C27026 + C27027) * C48975 * C26787) *
                      C48945 * C241 -
                  ((C26792 * C1205 + C26980 + C26980 + C26784 * C1213 +
                    C48038 * C1206 + C26981 + C26981 + C48870 * C1214 +
                    C48045 * C1207 + C26982 + C26982 + C48862 * C1215) *
                       C48975 * C26787 +
                   (C27027 + C27026 + C27025) * C48975 * C49025 +
                   (C27024 + C27023 + C27022) * C48975 * C49018) *
                      C48945 * C49217) *
                     C243 +
                 (((C27028 + C27029 + C27030) * C48975 * C49018 +
                   (C27031 + C27032 + C27033) * C48975 * C49025 +
                   (C48045 * C1206 + C26995 + C26995 + C48862 * C1214 +
                    C48038 * C1205 + C26996 + C26996 + C48870 * C1213 +
                    C26792 * C1208 + C26997 + C26997 + C26784 * C1216) *
                       C48975 * C26787) *
                      C48945 * C49217 -
                  ((C27033 + C27032 + C27031) * C48975 * C26787 +
                   (C27030 + C27029 + C27028) * C48975 * C49025 +
                   (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                    C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                    C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                       C48975 * C49018) *
                      C48945 * C241) *
                     C49215)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                    C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                    C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                       C48975 * C49018 +
                   (C27022 + C27023 + C27024) * C48975 * C49025 +
                   (C27025 + C27026 + C27027) * C48975 * C26787) *
                      C355 -
                  ((C26792 * C1429 + C27180 + C27180 + C26784 * C1437 +
                    C48038 * C1430 + C27181 + C27181 + C48870 * C1438 +
                    C48045 * C1431 + C27182 + C27182 + C48862 * C1439) *
                       C48975 * C26787 +
                   (C26792 * C641 + C27183 + C27183 + C26784 * C651 +
                    C48038 * C640 + C27184 + C27184 + C48870 * C650 +
                    C48045 * C639 + C27185 + C27185 + C48862 * C649) *
                       C48975 * C49025 +
                   (C26792 * C359 + C27186 + C27186 + C26784 * C371 +
                    C48038 * C360 + C27187 + C27187 + C48870 * C372 +
                    C48045 * C361 + C27188 + C27188 + C48862 * C373) *
                       C48975 * C49018) *
                      C49219) *
                     C48928 * C243 +
                 (((C48045 * C360 + C27189 + C27189 + C48862 * C372 +
                    C48038 * C359 + C27190 + C27190 + C48870 * C371 +
                    C26792 * C358 + C27191 + C27191 + C26784 * C370) *
                       C48975 * C49018 +
                   (C48045 * C640 + C27192 + C27192 + C48862 * C650 +
                    C48038 * C641 + C27193 + C27193 + C48870 * C651 +
                    C26792 * C642 + C27194 + C27194 + C26784 * C652) *
                       C48975 * C49025 +
                   (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
                    C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
                    C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                       C48975 * C26787) *
                      C49219 -
                  ((C27033 + C27032 + C27031) * C48975 * C26787 +
                   (C27030 + C27029 + C27028) * C48975 * C49025 +
                   (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                    C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                    C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                       C48975 * C49018) *
                      C355) *
                     C48928 * C49215)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                    C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                    C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                       C48975 * C49018 +
                   (C27022 + C27023 + C27024) * C48975 * C49025 +
                   (C27025 + C27026 + C27027) * C48975 * C26787) *
                      C48945 * C467 -
                  ((C26792 * C1205 + C26980 + C26980 + C26784 * C1213 +
                    C48038 * C1206 + C26981 + C26981 + C48870 * C1214 +
                    C48045 * C1207 + C26982 + C26982 + C48862 * C1215) *
                       C48975 * C26787 +
                   (C27027 + C27026 + C27025) * C48975 * C49025 +
                   (C27024 + C27023 + C27022) * C48975 * C49018) *
                      C48945 * C49217) *
                     C469 +
                 (((C27028 + C27029 + C27030) * C48975 * C49018 +
                   (C27031 + C27032 + C27033) * C48975 * C49025 +
                   (C48045 * C1206 + C26995 + C26995 + C48862 * C1214 +
                    C48038 * C1205 + C26996 + C26996 + C48870 * C1213 +
                    C26792 * C1208 + C26997 + C26997 + C26784 * C1216) *
                       C48975 * C26787) *
                      C48945 * C49217 -
                  ((C27033 + C27032 + C27031) * C48975 * C26787 +
                   (C27030 + C27029 + C27028) * C48975 * C49025 +
                   (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                    C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                    C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                       C48975 * C49018) *
                      C48945 * C467) *
                     C49215)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
            C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
            C26784 * C139) *
               C48975 * C49018 +
           (C27022 + C27023 + C27024) * C48975 * C49025 + C27468 * C26787) *
              C48945 * C533 -
          ((C27472 + C27473 + C27474) * C48975 * C26787 +
           (C27027 + C27026 + C27025) * C48975 * C49025 +
           (C27024 + C27023 + C27022) * C48975 * C49018) *
              C48945 * C534 +
          (C27468 * C49018 + (C27474 + C27473 + C27472) * C48975 * C49025 +
           (C48045 * C1715 + C27461 + C27461 + C48862 * C1721 + C48038 * C1716 +
            C27462 + C27462 + C48870 * C1722 + C26792 * C1717 + C27463 +
            C27463 + C26784 * C1723) *
               C48975 * C26787) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C48975 * C49018 +
            (C27022 + C27023 + C27024) * C48975 * C49025 + C27468 * C26787) *
               C355 -
           ((C27648 + C27649 + C27650) * C48975 * C26787 +
            (C27651 + C27652 + C27653) * C48975 * C49025 +
            (C26792 * C359 + C27186 + C27186 + C26784 * C371 + C48038 * C360 +
             C27187 + C27187 + C48870 * C372 + C48045 * C361 + C27188 + C27188 +
             C48862 * C373) *
                C48975 * C49018) *
               C49219) *
              C467 +
          (((C27653 + C27652 + C27651) * C48975 * C49018 +
            (C27650 + C27649 + C27648) * C48975 * C49025 +
            (C48045 * C1891 + C27633 + C27633 + C48862 * C1897 +
             C48038 * C1892 + C27634 + C27634 + C48870 * C1898 +
             C26792 * C1893 + C27635 + C27635 + C26784 * C1899) *
                C48975 * C26787) *
               C49219 -
           ((C27472 + C27473 + C27474) * C48975 * C26787 +
            (C27027 + C27026 + C27025) * C48975 * C49025 +
            (C27024 + C27023 + C27022) * C48975 * C49018) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C48975 * C49018 +
            (C27022 + C27023 + C27024) * C48975 * C49025 + C27468 * C26787) *
               C741 -
           ((C27648 + C27649 + C27650) * C48975 * C26787 +
            (C27651 + C27652 + C27653) * C48975 * C49025 +
            (C26792 * C359 + C27186 + C27186 + C26784 * C371 + C48038 * C360 +
             C27187 + C27187 + C48870 * C372 + C48045 * C361 + C27188 + C27188 +
             C48862 * C373) *
                C48975 * C49018) *
               C49219) *
              C48928 * C469 +
          (((C48045 * C360 + C27189 + C27189 + C48862 * C372 + C48038 * C359 +
             C27190 + C27190 + C48870 * C371 + C26792 * C358 + C27191 + C27191 +
             C26784 * C370) *
                C48975 * C49018 +
            (C48045 * C640 + C27192 + C27192 + C48862 * C650 + C48038 * C641 +
             C27193 + C27193 + C48870 * C651 + C26792 * C642 + C27194 + C27194 +
             C26784 * C652) *
                C48975 * C49025 +
            (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
             C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
             C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                C48975 * C26787) *
               C49219 -
           ((C27033 + C27032 + C27031) * C48975 * C26787 +
            (C27030 + C27029 + C27028) * C48975 * C49025 +
            (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
             C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 + C26812 +
             C48862 * C138) *
                C48975 * C49018) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C48975 * C49018 +
            (C27022 + C27023 + C27024) * C48975 * C49025 + C27468 * C26787) *
               C741 -
           ((C27648 + C27649 + C27650) * C48975 * C26787 +
            (C27651 + C27652 + C27653) * C48975 * C49025 +
            (C26792 * C359 + C27186 + C27186 + C26784 * C371 + C48038 * C360 +
             C27187 + C27187 + C48870 * C372 + C48045 * C361 + C27188 + C27188 +
             C48862 * C373) *
                C48975 * C49018) *
               C49219) *
              C241 +
          (((C27653 + C27652 + C27651) * C48975 * C49018 +
            (C27650 + C27649 + C27648) * C48975 * C49025 +
            (C48045 * C1891 + C27633 + C27633 + C48862 * C1897 +
             C48038 * C1892 + C27634 + C27634 + C48870 * C1898 +
             C26792 * C1893 + C27635 + C27635 + C26784 * C1899) *
                C48975 * C26787) *
               C49219 -
           ((C27472 + C27473 + C27474) * C48975 * C26787 +
            (C27027 + C27026 + C27025) * C48975 * C49025 +
            (C27024 + C27023 + C27022) * C48975 * C49018) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
            C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
            C26784 * C139) *
               C48975 * C49018 +
           (C27022 + C27023 + C27024) * C48975 * C49025 + C27468 * C26787) *
              C887 -
          ((C27648 + C27649 + C27650) * C48975 * C26787 +
           (C27651 + C27652 + C27653) * C48975 * C49025 +
           (C26792 * C359 + C27186 + C27186 + C26784 * C371 + C48038 * C360 +
            C27187 + C27187 + C48870 * C372 + C48045 * C361 + C27188 + C27188 +
            C48862 * C373) *
               C48975 * C49018) *
              C888 +
          ((C48045 * C890 + C28056 + C28056 + C48862 * C900 + C48038 * C891 +
            C28057 + C28057 + C48870 * C901 + C26792 * C892 + C28058 + C28058 +
            C26784 * C902) *
               C48975 * C49018 +
           (C48045 * C2335 + C28059 + C28059 + C48862 * C2347 + C48038 * C2336 +
            C28060 + C28060 + C48870 * C2348 + C26792 * C2337 + C28061 +
            C28061 + C26784 * C2349) *
               C48975 * C49025 +
           (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 + C48038 * C2339 +
            C28063 + C28063 + C48870 * C2351 + C26792 * C2340 + C28064 +
            C28064 + C26784 * C2352) *
               C48975 * C26787) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49190 +
            (C25556 + C25557) * C49062) *
               C49018 +
           ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
           (C24394 * C49190 + (C24569 + C24568) * C49062) * C26787) *
              C48945 * C48928 * C110 -
          (((C23799 * C1429 + C24163 + C24163 + C48867 * C1437 +
             C23797 * C1430 + C24162 + C24162 + C23791 * C1438) *
                C49062 +
            (C24017 + C24016) * C49190) *
               C26787 +
           ((C25319 + C25318) * C49062 + (C24015 + C24014) * C49190) * C49025 +
           ((C25561 + C25560) * C49062 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49190) *
               C49018) *
              C48945 * C48928 * C111 +
          (((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
             C23819 + C23819 + C48867 * C140) *
                C49190 +
            (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
             C25089 + C25089 + C48867 * C370) *
                C49062) *
               C49018 +
           ((C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
             C23821 + C23821 + C48867 * C258) *
                C49190 +
            (C23797 * C641 + C25092 + C25092 + C23791 * C651 + C23799 * C642 +
             C25093 + C25093 + C48867 * C652) *
                C49062) *
               C49025 +
           ((C23797 * C539 + C23822 + C23822 + C23791 * C549 + C23799 * C540 +
             C23823 + C23823 + C48867 * C550) *
                C49190 +
            (C23797 * C1429 + C29910 + C29910 + C23791 * C1437 +
             C23799 * C1432 + C29911 + C29911 + C48867 * C1440) *
                C49062) *
               C26787) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            (C24394 * C49190 + (C24569 + C24568) * C49062) * C26787) *
               C48945 * C241 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C49190) * C26787 +
            ((C24568 + C24569) * C49062 + (C24011 + C24010) * C49190) * C49025 +
            (C26115 * C49062 + (C24009 + C24008) * C49190) * C49018) *
               C48945 * C49217) *
              C243 +
          ((((C24014 + C24015) * C49190 + (C25318 + C25319) * C49062) * C49018 +
            ((C24016 + C24017) * C49190 + (C30114 + C30115) * C49062) * C49025 +
            ((C24018 + C24019) * C49190 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C26787) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C49190) * C26787 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C49190) * C49025 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49190) *
                C49018) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            (C24394 * C49190 + (C24569 + C24568) * C49062) * C26787) *
               C355 -
           (((C25912 + C25913) * C49062 + (C24568 + C24569) * C49190) * C26787 +
            (C26114 * C49062 + C26115 * C49190) * C49025 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C49190) *
                C49018) *
               C49219) *
              C48928 * C243 +
          ((((C25560 + C25561) * C49190 + (C25562 + C25563) * C49062) * C49018 +
            ((C25318 + C25319) * C49190 + (C25320 + C25321) * C49062) * C49025 +
            ((C30114 + C30115) * C49190 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C26787) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C49190) * C26787 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C49190) * C49025 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49190) *
                C49018) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            (C24394 * C49190 + (C24569 + C24568) * C49062) * C26787) *
               C48945 * C467 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C49190) * C26787 +
            ((C24568 + C24569) * C49062 + (C24011 + C24010) * C49190) * C49025 +
            (C26115 * C49062 + (C24009 + C24008) * C49190) * C49018) *
               C48945 * C49217) *
              C469 +
          ((((C24014 + C24015) * C49190 + (C25318 + C25319) * C49062) * C49018 +
            ((C24016 + C24017) * C49190 + (C30114 + C30115) * C49062) * C49025 +
            ((C24018 + C24019) * C49190 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C26787) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C49190) * C26787 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C49190) * C49025 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49190) *
                C49018) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49190 +
            (C25556 + C25557) * C49062) *
               C49018 +
           ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
           C30653 * C26787) *
              C48945 * C533 -
          (((C24566 + C24567) * C49062 + (C24013 + C24012) * C49190) * C26787 +
           ((C24568 + C24569) * C49062 + (C24011 + C24010) * C49190) * C49025 +
           (C26115 * C49062 + (C24009 + C24008) * C49190) * C49018) *
              C48945 * C534 +
          (C30653 * C49018 +
           (C24395 * C49190 + (C24567 + C24566) * C49062) * C49025 +
           ((C24409 + C24408) * C49190 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C49062) *
               C26787) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            C30653 * C26787) *
               C355 -
           (((C25912 + C25913) * C49062 + C30848 * C49190) * C26787 +
            (C26114 * C49062 + C26115 * C49190) * C49025 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C49190) *
                C49018) *
               C49219) *
              C467 +
          (((C26108 * C49190 + C26109 * C49062) * C49018 +
            (C30651 * C49190 + (C25913 + C25912) * C49062) * C49025 +
            ((C24567 + C24566) * C49190 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C26787) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C49190) * C26787 +
            (C30848 * C49062 + (C24011 + C24010) * C49190) * C49025 +
            (C26115 * C49062 + (C24009 + C24008) * C49190) * C49018) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            C30653 * C26787) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C49190) * C26787 +
            (C26114 * C49062 + C26115 * C49190) * C49025 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C49190) *
                C49018) *
               C49219) *
              C48928 * C469 +
          ((((C25560 + C25561) * C49190 + (C25562 + C25563) * C49062) * C49018 +
            ((C25318 + C25319) * C49190 + (C25320 + C25321) * C49062) * C49025 +
            ((C30114 + C30115) * C49190 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C26787) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C49190) * C26787 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C49190) * C49025 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49190) *
                C49018) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49190 +
             (C25556 + C25557) * C49062) *
                C49018 +
            ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
            C30653 * C26787) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C49190) * C26787 +
            (C26114 * C49062 + C26115 * C49190) * C49025 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C49190) *
                C49018) *
               C49219) *
              C241 +
          (((C26108 * C49190 + C26109 * C49062) * C49018 +
            (C30651 * C49190 + (C25913 + C25912) * C49062) * C49025 +
            ((C24567 + C24566) * C49190 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C26787) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C49190) * C26787 +
            (C30848 * C49062 + (C24011 + C24010) * C49190) * C49025 +
            (C26115 * C49062 + (C24009 + C24008) * C49190) * C49018) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49190 +
            (C25556 + C25557) * C49062) *
               C49018 +
           ((C24008 + C24009) * C49190 + C26108 * C49062) * C49025 +
           C30653 * C26787) *
              C887 -
          (((C25912 + C25913) * C49062 + C30848 * C49190) * C26787 +
           (C26114 * C49062 + C26115 * C49190) * C49025 +
           ((C25559 + C25558) * C49062 + (C25557 + C25556) * C49190) * C49018) *
              C888 +
          ((C26658 * C49190 + (C26672 + C26671) * C49062) * C49018 +
           (C26109 * C49190 + (C26123 + C26122) * C49062) * C49025 +
           ((C25913 + C25912) * C49190 +
            (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
             C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                C49062) *
               C26787) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C23797 * C249 + C23804 + C23804 + C23791 * C261 + C23799 * C248 +
            C23805 + C23805 + C48867 * C260) *
               C48975 * C49257 +
           (C23797 * C537 + C23806 + C23806 + C23791 * C547 + C23799 * C538 +
            C23807 + C23807 + C48867 * C548) *
               C48975 * C49247 +
           (C23797 * C1207 + C23808 + C23808 + C23791 * C1215 + C23799 * C1206 +
            C23809 + C23809 + C48867 * C1214) *
               C48975 * C49197) *
              C48945 * C48928 * C110 -
          ((C23799 * C1205 + C23810 + C23810 + C48867 * C1213 + C23797 * C1206 +
            C23811 + C23811 + C23791 * C1214) *
               C48975 * C49197 +
           (C23799 * C539 + C23812 + C23812 + C48867 * C549 + C23797 * C538 +
            C23813 + C23813 + C23791 * C548) *
               C48975 * C49247 +
           (C23799 * C247 + C23814 + C23814 + C48867 * C259 + C23797 * C248 +
            C23815 + C23815 + C23791 * C260) *
               C48975 * C49257 +
           (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
            C23817 + C23817 + C23791 * C138) *
               C48975 * C49261) *
              C48945 * C48928 * C111 +
          ((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
            C23819 + C23819 + C48867 * C140) *
               C48975 * C49261 +
           (C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
            C23821 + C23821 + C48867 * C258) *
               C48975 * C49257 +
           (C23797 * C539 + C23822 + C23822 + C23791 * C549 + C23799 * C540 +
            C23823 + C23823 + C48867 * C550) *
               C48975 * C49247 +
           (C23797 * C1205 + C23824 + C23824 + C23791 * C1213 + C23799 * C1208 +
            C23825 + C23825 + C48867 * C1216) *
               C48975 * C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22565 * C249 + C22578 + C22578 + C49260 * C261 + C22567 * C248 +
            C22579 + C22579 + C49253 * C260 + C22569 * C247 + C22580 + C22580 +
            C49240 * C259 + C22571 * C246 + C22581 + C22581 + C49188 * C258) *
               C48975 * C49022) *
              C48945 * C48928 * C110 -
          ((C22571 * C245 + C22582 + C22582 + C49188 * C257 + C22569 * C246 +
            C22583 + C22583 + C49240 * C258 + C22567 * C247 + C22584 + C22584 +
            C49253 * C259 + C22565 * C248 + C22585 + C22585 + C49260 * C260) *
               C48975 * C49022 +
           (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
            C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
            C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
               C48975 * C22563) *
              C48945 * C48928 * C111 +
          ((C22565 * C125 + C22590 + C22590 + C49260 * C139 + C22567 * C126 +
            C22591 + C22591 + C49253 * C140 + C22569 * C127 + C22592 + C22592 +
            C49240 * C141 + C22571 * C128 + C22593 + C22593 + C49188 * C142) *
               C48975 * C22563 +
           (C22565 * C247 + C22594 + C22594 + C49260 * C259 + C22567 * C246 +
            C22595 + C22595 + C49253 * C258 + C22569 * C245 + C22596 + C22596 +
            C49240 * C257 + C22571 * C250 + C22597 + C22597 + C49188 * C262) *
               C48975 * C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49255 +
            (C23797 * C361 + C24157 + C24157 + C23791 * C373 + C23799 * C360 +
             C24156 + C24156 + C48867 * C372) *
                C49244 +
            (C23797 * C890 + C24930 + C24930 + C23791 * C900 + C23799 * C891 +
             C24931 + C24931 + C48867 * C901) *
                C49225) *
               C22563 +
           ((C24008 + C24009) * C49255 + (C24571 + C24570) * C49244 +
            (C23797 * C2335 + C24932 + C24932 + C23791 * C2347 +
             C23799 * C2336 + C24933 + C24933 + C48867 * C2348) *
                C49225) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C23799 * C2337 + C25084 + C25084 + C48867 * C2349 +
             C23797 * C2336 + C25085 + C25085 + C23791 * C2348) *
                C49225 +
            (C23799 * C641 + C24161 + C24161 + C48867 * C651 + C23797 * C640 +
             C24160 + C24160 + C23791 * C650) *
                C49244 +
            (C24015 + C24014) * C49255) *
               C49022 +
           ((C23799 * C892 + C25086 + C25086 + C48867 * C902 + C23797 * C891 +
             C25087 + C25087 + C23791 * C901) *
                C49225 +
            (C23799 * C359 + C24159 + C24159 + C48867 * C371 + C23797 * C360 +
             C24158 + C24158 + C23791 * C372) *
                C49244 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49255) *
               C22563) *
              C48945 * C48928 * C111 +
          (((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
             C23819 + C23819 + C48867 * C140) *
                C49255 +
            (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
             C25089 + C25089 + C48867 * C370) *
                C49244 +
            (C23797 * C892 + C25090 + C25090 + C23791 * C902 + C23799 * C893 +
             C25091 + C25091 + C48867 * C903) *
                C49225) *
               C22563 +
           ((C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
             C23821 + C23821 + C48867 * C258) *
                C49255 +
            (C23797 * C641 + C25092 + C25092 + C23791 * C651 + C23799 * C642 +
             C25093 + C25093 + C48867 * C652) *
                C49244 +
            (C23797 * C2337 + C25094 + C25094 + C23791 * C2349 +
             C23799 * C2630 + C25095 + C25095 + C48867 * C2632) *
                C49225) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C48945 * C241 -
           ((C23799 * C1716 + C23968 + C23968 + C48867 * C1722 +
             C23797 * C1715 + C23969 + C23969 + C23791 * C1721) *
                C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C48945 * C49217) *
              C243 +
          (((C24014 + C24015) * C48975 * C49261 +
            (C24016 + C24017) * C48975 * C49257 +
            (C24018 + C24019) * C48975 * C49247 +
            (C23797 * C1716 + C23982 + C23982 + C23791 * C1722 +
             C23799 * C1717 + C23983 + C23983 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C48945 * C241 -
           ((C22571 * C540 + C22736 + C22736 + C49188 * C550 + C22569 * C539 +
             C22737 + C22737 + C49240 * C549 + C22567 * C538 + C22738 + C22738 +
             C49253 * C548 + C22565 * C537 + C22739 + C22739 + C49260 * C547) *
                C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C48945 * C49217) *
              C243 +
          (((C22772 + C22773 + C22774 + C22775) * C48975 * C22563 +
            (C22565 * C538 + C22748 + C22748 + C49260 * C548 + C22567 * C539 +
             C22749 + C22749 + C49253 * C549 + C22569 * C540 + C22750 + C22750 +
             C49240 * C550 + C22571 * C541 + C22751 + C22751 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C23797 * C361 + C24157 + C24157 + C23791 * C373 + C23799 * C360 +
              C24156 + C24156 + C48867 * C372) *
                 C49244 +
             (C23797 * C890 + C24930 + C24930 + C23791 * C900 + C23799 * C891 +
              C24931 + C24931 + C48867 * C901) *
                 C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + (C24571 + C24570) * C49244 +
             (C25316 + C25317) * C49225) *
                C49022) *
               C48945 * C241 -
           (((C23799 * C2339 + C24935 + C24935 + C48867 * C2351 +
              C23797 * C2338 + C24934 + C24934 + C23791 * C2350) *
                 C49225 +
             (C24568 + C24569) * C49244 + (C24011 + C24010) * C49255) *
                C49022 +
            ((C25317 + C25316) * C49225 + (C24570 + C24571) * C49244 +
             (C24009 + C24008) * C49255) *
                C22563) *
               C48945 * C49217) *
              C243 +
          ((((C24014 + C24015) * C49255 + (C25318 + C25319) * C49244 +
             (C25320 + C25321) * C49225) *
                C22563 +
            ((C24016 + C24017) * C49255 +
             (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
              C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                 C49244 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49225) *
                C49022) *
               C48945 * C49217 -
           (((C25321 + C25320) * C49225 + (C25319 + C25318) * C49244 +
             (C24015 + C24014) * C49255) *
                C49022 +
            ((C23799 * C892 + C25086 + C25086 + C48867 * C902 + C23797 * C891 +
              C25087 + C25087 + C23791 * C901) *
                 C49225 +
             (C23799 * C359 + C24159 + C24159 + C48867 * C371 + C23797 * C360 +
              C24158 + C24158 + C23791 * C372) *
                 C49244 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49255) *
                C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C355 -
           ((C23799 * C1892 + C24150 + C24150 + C48867 * C1898 +
             C23797 * C1891 + C24151 + C24151 + C23791 * C1897) *
                C48975 * C49197 +
            (C23799 * C1430 + C24152 + C24152 + C48867 * C1438 +
             C23797 * C1431 + C24153 + C24153 + C23791 * C1439) *
                C48975 * C49247 +
            (C23799 * C640 + C24154 + C24154 + C48867 * C650 + C23797 * C639 +
             C24155 + C24155 + C23791 * C649) *
                C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C48928 * C243 +
          (((C23797 * C360 + C24158 + C24158 + C23791 * C372 + C23799 * C359 +
             C24159 + C24159 + C48867 * C371) *
                C48975 * C49261 +
            (C23797 * C640 + C24160 + C24160 + C23791 * C650 + C23799 * C641 +
             C24161 + C24161 + C48867 * C651) *
                C48975 * C49257 +
            (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
             C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                C48975 * C49247 +
            (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
             C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C355 -
           ((C22571 * C642 + C22906 + C22906 + C49188 * C652 + C22569 * C641 +
             C22907 + C22907 + C49240 * C651 + C22567 * C640 + C22908 + C22908 +
             C49253 * C650 + C22565 * C639 + C22909 + C22909 + C49260 * C649) *
                C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C48928 * C243 +
          (((C22565 * C360 + C22914 + C22914 + C49260 * C372 + C22567 * C359 +
             C22915 + C22915 + C49253 * C371 + C22569 * C358 + C22916 + C22916 +
             C49240 * C370 + C22571 * C357 + C22917 + C22917 + C49188 * C369) *
                C48975 * C22563 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + (C24571 + C24570) * C49244 +
             (C25316 + C25317) * C49225) *
                C49022) *
               C355 -
           (((C23799 * C3263 + C25524 + C25524 + C48867 * C3269 +
              C23797 * C3262 + C25525 + C25525 + C23791 * C3268) *
                 C49225 +
             (C25317 + C25316) * C49244 + (C24570 + C24571) * C49255) *
                C49022 +
            ((C23799 * C2783 + C25526 + C25526 + C48867 * C2791 +
              C23797 * C2784 + C25527 + C25527 + C23791 * C2792) *
                 C49225 +
             (C25559 + C25558) * C49244 + (C25557 + C25556) * C49255) *
                C22563) *
               C49219) *
              C48928 * C243 +
          ((((C25560 + C25561) * C49255 + (C25562 + C25563) * C49244 +
             (C23797 * C2783 + C25536 + C25536 + C23791 * C2791 +
              C23799 * C2782 + C25537 + C25537 + C48867 * C2790) *
                 C49225) *
                C22563 +
            ((C25318 + C25319) * C49255 + (C25320 + C25321) * C49244 +
             (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
              C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                 C49225) *
                C49022) *
               C49219 -
           (((C25321 + C25320) * C49225 + (C25319 + C25318) * C49244 +
             (C24015 + C24014) * C49255) *
                C49022 +
            ((C25563 + C25562) * C49225 + (C25561 + C25560) * C49244 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49255) *
                C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C48945 * C467 -
           ((C23799 * C1716 + C23968 + C23968 + C48867 * C1722 +
             C23797 * C1715 + C23969 + C23969 + C23791 * C1721) *
                C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C48945 * C49217) *
              C469 +
          (((C24014 + C24015) * C48975 * C49261 +
            (C24016 + C24017) * C48975 * C49257 +
            (C24018 + C24019) * C48975 * C49247 +
            (C23797 * C1716 + C23982 + C23982 + C23791 * C1722 +
             C23799 * C1717 + C23983 + C23983 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C48945 * C467 -
           ((C22571 * C540 + C22736 + C22736 + C49188 * C550 + C22569 * C539 +
             C22737 + C22737 + C49240 * C549 + C22567 * C538 + C22738 + C22738 +
             C49253 * C548 + C22565 * C537 + C22739 + C22739 + C49260 * C547) *
                C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C48945 * C49217) *
              C469 +
          (((C22772 + C22773 + C22774 + C22775) * C48975 * C22563 +
            (C22565 * C538 + C22748 + C22748 + C49260 * C548 + C22567 * C539 +
             C22749 + C22749 + C49253 * C549 + C22569 * C540 + C22750 + C22750 +
             C49240 * C550 + C22571 * C541 + C22751 + C22751 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + (C24571 + C24570) * C49244 +
             (C25316 + C25317) * C49225) *
                C49022) *
               C48945 * C467 -
           (((C23799 * C2339 + C24935 + C24935 + C48867 * C2351 +
              C23797 * C2338 + C24934 + C24934 + C23791 * C2350) *
                 C49225 +
             (C24568 + C24569) * C49244 + (C24011 + C24010) * C49255) *
                C49022 +
            ((C25317 + C25316) * C49225 + (C24570 + C24571) * C49244 +
             (C24009 + C24008) * C49255) *
                C22563) *
               C48945 * C49217) *
              C469 +
          ((((C24014 + C24015) * C49255 + (C25318 + C25319) * C49244 +
             (C25320 + C25321) * C49225) *
                C22563 +
            ((C24016 + C24017) * C49255 +
             (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
              C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                 C49244 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49225) *
                C49022) *
               C48945 * C49217 -
           (((C25321 + C25320) * C49225 + (C25319 + C25318) * C49244 +
             (C24015 + C24014) * C49255) *
                C49022 +
            ((C25563 + C25562) * C49225 + (C25561 + C25560) * C49244 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49255) *
                C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
           C24403 * C49197) *
              C48945 * C533 -
          ((C24408 + C24409) * C48975 * C49197 +
           (C24013 + C24012) * C48975 * C49247 +
           (C24011 + C24010) * C48975 * C49257 +
           (C24009 + C24008) * C48975 * C49261) *
              C48945 * C534 +
          (C24402 * C49261 + C24403 * C49257 +
           (C24409 + C24408) * C48975 * C49247 +
           (C23797 * C9283 + C24400 + C24400 + C23791 * C9287 + C23799 * C9284 +
            C24401 + C24401 + C48867 * C9288) *
               C48975 * C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
              C48945 * C533 -
          ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
           (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
              C48945 * C534 +
          ((C23173 + C23172 + C23171 + C23170) * C48975 * C22563 +
           (C22565 * C1207 + C23158 + C23158 + C49260 * C1215 + C22567 * C1206 +
            C23159 + C23159 + C49253 * C1214 + C22569 * C1205 + C23160 +
            C23160 + C49240 * C1213 + C22571 * C1208 + C23161 + C23161 +
            C49188 * C1216) *
               C48975 * C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49255 +
            (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
               C22563 +
           ((C24008 + C24009) * C49255 + (C24571 + C24570) * C49244 +
            (C25316 + C25317) * C49225) *
               C49022) *
              C48945 * C533 -
          (((C25912 + C25913) * C49225 + (C24568 + C24569) * C49244 +
            (C24011 + C24010) * C49255) *
               C49022 +
           ((C25317 + C25316) * C49225 + (C24570 + C24571) * C49244 +
            (C24009 + C24008) * C49255) *
               C22563) *
              C48945 * C534 +
          ((C24394 * C49255 + (C24569 + C24568) * C49244 +
            (C25913 + C25912) * C49225) *
               C22563 +
           (C24395 * C49255 + (C24567 + C24566) * C49244 +
            (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
             C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                C49225) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C355 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C467 +
          (((C24571 + C24570) * C48975 * C49261 +
            (C24569 + C24568) * C48975 * C49257 +
            (C24567 + C24566) * C48975 * C49247 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C24408 + C24409) * C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C355 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C467 +
          (((C23327 + C23326 + C23325 + C23324) * C48975 * C22563 +
            (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 +
             C22567 * C1430 + C23313 + C23313 + C49253 * C1438 +
             C22569 * C1429 + C23314 + C23314 + C49240 * C1437 +
             C22571 * C1432 + C23315 + C23315 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + C26108 * C49244 + C26109 * C49225) *
                C49022) *
               C355 -
           (((C26122 + C26123) * C49225 + C26114 * C49244 + C26115 * C49255) *
                C49022 +
            ((C23799 * C2783 + C25526 + C25526 + C48867 * C2791 +
              C23797 * C2784 + C25527 + C25527 + C23791 * C2792) *
                 C49225 +
             (C25559 + C25558) * C49244 + (C25557 + C25556) * C49255) *
                C22563) *
               C49219) *
              C467 +
          (((C26108 * C49255 + C26109 * C49244 + (C26123 + C26122) * C49225) *
                C22563 +
            ((C24569 + C24568) * C49255 + (C25913 + C25912) * C49244 +
             (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
              C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                 C49225) *
                C49022) *
               C49219 -
           (((C25912 + C25913) * C49225 + (C24568 + C24569) * C49244 +
             (C24011 + C24010) * C49255) *
                C49022 +
            (C26114 * C49225 + C26115 * C49244 + (C24009 + C24008) * C49255) *
                C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C741 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C48928 * C469 +
          (((C23797 * C360 + C24158 + C24158 + C23791 * C372 + C23799 * C359 +
             C24159 + C24159 + C48867 * C371) *
                C48975 * C49261 +
            (C23797 * C640 + C24160 + C24160 + C23791 * C650 + C23799 * C641 +
             C24161 + C24161 + C48867 * C651) *
                C48975 * C49257 +
            (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
             C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                C48975 * C49247 +
            (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
             C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C741 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C48928 * C469 +
          (((C22565 * C360 + C22914 + C22914 + C49260 * C372 + C22567 * C359 +
             C22915 + C22915 + C49253 * C371 + C22569 * C358 + C22916 + C22916 +
             C49240 * C370 + C22571 * C357 + C22917 + C22917 + C49188 * C369) *
                C48975 * C22563 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + C26108 * C49244 + C26109 * C49225) *
                C49022) *
               C741 -
           (((C26122 + C26123) * C49225 + C26114 * C49244 + C26115 * C49255) *
                C49022 +
            ((C23799 * C2783 + C25526 + C25526 + C48867 * C2791 +
              C23797 * C2784 + C25527 + C25527 + C23791 * C2792) *
                 C49225 +
             (C25559 + C25558) * C49244 + (C25557 + C25556) * C49255) *
                C22563) *
               C49219) *
              C48928 * C469 +
          ((((C25560 + C25561) * C49255 + (C25562 + C25563) * C49244 +
             (C23797 * C2783 + C25536 + C25536 + C23791 * C2791 +
              C23799 * C2782 + C25537 + C25537 + C48867 * C2790) *
                 C49225) *
                C22563 +
            ((C25318 + C25319) * C49255 + (C25320 + C25321) * C49244 +
             (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
              C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                 C49225) *
                C49022) *
               C49219 -
           (((C25321 + C25320) * C49225 + (C25319 + C25318) * C49244 +
             (C24015 + C24014) * C49255) *
                C49022 +
            ((C25563 + C25562) * C49225 + (C25561 + C25560) * C49244 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49255) *
                C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C741 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C241 +
          (((C24571 + C24570) * C48975 * C49261 +
            (C24569 + C24568) * C48975 * C49257 +
            (C24567 + C24566) * C48975 * C49247 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C24408 + C24409) * C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C741 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C241 +
          (((C23327 + C23326 + C23325 + C23324) * C48975 * C22563 +
            (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 +
             C22567 * C1430 + C23313 + C23313 + C49253 * C1438 +
             C22569 * C1429 + C23314 + C23314 + C49240 * C1437 +
             C22571 * C1432 + C23315 + C23315 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49255 +
             (C25556 + C25557) * C49244 + (C25558 + C25559) * C49225) *
                C22563 +
            ((C24008 + C24009) * C49255 + C26108 * C49244 + C26109 * C49225) *
                C49022) *
               C741 -
           (((C26122 + C26123) * C49225 + C26114 * C49244 + C26115 * C49255) *
                C49022 +
            ((C23799 * C2783 + C25526 + C25526 + C48867 * C2791 +
              C23797 * C2784 + C25527 + C25527 + C23791 * C2792) *
                 C49225 +
             (C25559 + C25558) * C49244 + (C25557 + C25556) * C49255) *
                C22563) *
               C49219) *
              C241 +
          (((C26108 * C49255 + C26109 * C49244 + (C26123 + C26122) * C49225) *
                C22563 +
            ((C24569 + C24568) * C49255 + (C25913 + C25912) * C49244 +
             (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
              C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                 C49225) *
                C49022) *
               C49219 -
           (((C25912 + C25913) * C49225 + (C24568 + C24569) * C49244 +
             (C24011 + C24010) * C49255) *
                C49022 +
            (C26114 * C49225 + C26115 * C49244 + (C24009 + C24008) * C49255) *
                C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
           C24403 * C49197) *
              C887 -
          ((C24566 + C24567) * C48975 * C49197 +
           (C24568 + C24569) * C48975 * C49247 +
           (C24570 + C24571) * C48975 * C49257 +
           (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
            C24157 + C24157 + C23791 * C373) *
               C48975 * C49261) *
              C888 +
          ((C23797 * C890 + C24930 + C24930 + C23791 * C900 + C23799 * C891 +
            C24931 + C24931 + C48867 * C901) *
               C48975 * C49261 +
           (C23797 * C2335 + C24932 + C24932 + C23791 * C2347 + C23799 * C2336 +
            C24933 + C24933 + C48867 * C2348) *
               C48975 * C49257 +
           (C23797 * C2338 + C24934 + C24934 + C23791 * C2350 + C23799 * C2339 +
            C24935 + C24935 + C48867 * C2351) *
               C48975 * C49247 +
           (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
            C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
               C48975 * C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
              C887 -
          ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
           (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
            C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
            C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
               C48975 * C22563) *
              C888 +
          ((C22565 * C890 + C23686 + C23686 + C49260 * C900 + C22567 * C891 +
            C23687 + C23687 + C49253 * C901 + C22569 * C892 + C23688 + C23688 +
            C49240 * C902 + C22571 * C893 + C23689 + C23689 + C49188 * C903) *
               C48975 * C22563 +
           (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 + C22567 * C2336 +
            C23691 + C23691 + C49253 * C2348 + C22569 * C2337 + C23692 +
            C23692 + C49240 * C2349 + C22571 * C2630 + C23693 + C23693 +
            C49188 * C2632) *
               C48975 * C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49255 +
            (C25556 + C25557) * C49244 + C26658 * C49225) *
               C22563 +
           ((C24008 + C24009) * C49255 + C26108 * C49244 + C26109 * C49225) *
               C49022) *
              C887 -
          (((C26122 + C26123) * C49225 + C26114 * C49244 + C26115 * C49255) *
               C49022 +
           ((C26671 + C26672) * C49225 + (C25559 + C25558) * C49244 +
            (C25557 + C25556) * C49255) *
               C22563) *
              C888 +
          ((C26658 * C49255 + (C26672 + C26671) * C49244 +
            (C23797 * C3691 + C26663 + C26663 + C23791 * C3697 +
             C23799 * C3692 + C26664 + C26664 + C48867 * C3698) *
                C49225) *
               C22563 +
           (C26109 * C49255 + (C26123 + C26122) * C49244 +
            (C23797 * C11261 + C26665 + C26665 + C23791 * C11265 +
             C23799 * C18024 + C26666 + C26666 + C48867 * C18026) *
                C49225) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[27] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                     C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                     C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                        C49190 +
                    (C48045 * C361 + C27188 + C27188 + C48862 * C373 +
                     C48038 * C360 + C27187 + C27187 + C48870 * C372 +
                     C26792 * C359 + C27186 + C27186 + C26784 * C371) *
                        C49062) *
                       C22563 +
                   ((C27022 + C27023 + C27024) * C49190 +
                    (C27653 + C27652 + C27651) * C49062) *
                       C49022) *
                      C48945 * C48928 * C110 -
                  (((C26792 * C642 + C27194 + C27194 + C26784 * C652 +
                     C48038 * C641 + C27193 + C27193 + C48870 * C651 +
                     C48045 * C640 + C27192 + C27192 + C48862 * C650) *
                        C49062 +
                    (C27030 + C27029 + C27028) * C49190) *
                       C49022 +
                   ((C26792 * C358 + C27191 + C27191 + C26784 * C370 +
                     C48038 * C359 + C27190 + C27190 + C48870 * C371 +
                     C48045 * C360 + C27189 + C27189 + C48862 * C372) *
                        C49062 +
                    (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                     C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                     C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                        C49190) *
                       C22563) *
                      C48945 * C48928 * C111 +
                  (((C48045 * C125 + C26813 + C26813 + C48862 * C139 +
                     C48038 * C126 + C26814 + C26814 + C48870 * C140 +
                     C26792 * C127 + C26815 + C26815 + C26784 * C141) *
                        C49190 +
                    (C48045 * C359 + C28211 + C28211 + C48862 * C371 +
                     C48038 * C358 + C28212 + C28212 + C48870 * C370 +
                     C26792 * C357 + C28213 + C28213 + C26784 * C369) *
                        C49062) *
                       C22563 +
                   ((C48045 * C247 + C26816 + C26816 + C48862 * C259 +
                     C48038 * C246 + C26817 + C26817 + C48870 * C258 +
                     C26792 * C245 + C26818 + C26818 + C26784 * C257) *
                        C49190 +
                    (C48045 * C641 + C28214 + C28214 + C48862 * C651 +
                     C48038 * C642 + C28215 + C28215 + C48870 * C652 +
                     C26792 * C643 + C28216 + C28216 + C26784 * C653) *
                        C49062) *
                       C49022) *
                      C48945 * C48928 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49190 +
                     (C48045 * C361 + C27188 + C27188 + C48862 * C373 +
                      C48038 * C360 + C27187 + C27187 + C48870 * C372 +
                      C26792 * C359 + C27186 + C27186 + C26784 * C371) *
                         C49062) *
                        C22563 +
                    ((C27022 + C27023 + C27024) * C49190 +
                     (C27653 + C27652 + C27651) * C49062) *
                        C49022) *
                       C48945 * C241 -
                   (((C27648 + C27649 + C27650) * C49062 +
                     (C27027 + C27026 + C27025) * C49190) *
                        C49022 +
                    ((C27651 + C27652 + C27653) * C49062 +
                     (C27024 + C27023 + C27022) * C49190) *
                        C22563) *
                       C48945 * C49217) *
                      C243 +
                  ((((C27028 + C27029 + C27030) * C49190 +
                     (C28423 + C28424 + C28425) * C49062) *
                        C22563 +
                    ((C27031 + C27032 + C27033) * C49190 +
                     (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
                      C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
                      C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                         C49062) *
                        C49022) *
                       C48945 * C49217 -
                   (((C28425 + C28424 + C28423) * C49062 +
                     (C27030 + C27029 + C27028) * C49190) *
                        C49022 +
                    ((C26792 * C358 + C27191 + C27191 + C26784 * C370 +
                      C48038 * C359 + C27190 + C27190 + C48870 * C371 +
                      C48045 * C360 + C27189 + C27189 + C48862 * C372) *
                         C49062 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49190) *
                        C22563) *
                       C48945 * C241) *
                      C49215)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49190 +
                     (C28650 + C28651 + C28652) * C49062) *
                        C22563 +
                    ((C27022 + C27023 + C27024) * C49190 +
                     (C27653 + C27652 + C27651) * C49062) *
                        C49022) *
                       C355 -
                   (((C26792 * C2337 + C28061 + C28061 + C26784 * C2349 +
                      C48038 * C2336 + C28060 + C28060 + C48870 * C2348 +
                      C48045 * C2335 + C28059 + C28059 + C48862 * C2347) *
                         C49062 +
                     (C27651 + C27652 + C27653) * C49190) *
                        C49022 +
                    ((C26792 * C892 + C28058 + C28058 + C26784 * C902 +
                      C48038 * C891 + C28057 + C28057 + C48870 * C901 +
                      C48045 * C890 + C28056 + C28056 + C48862 * C900) *
                         C49062 +
                     (C28652 + C28651 + C28650) * C49190) *
                        C22563) *
                       C49219) *
                      C48928 * C243 +
                  ((((C28653 + C28654 + C28655) * C49190 +
                     (C48045 * C891 + C28632 + C28632 + C48862 * C901 +
                      C48038 * C892 + C28633 + C28633 + C48870 * C902 +
                      C26792 * C893 + C28634 + C28634 + C26784 * C903) *
                         C49062) *
                        C22563 +
                    ((C28423 + C28424 + C28425) * C49190 +
                     (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
                      C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
                      C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                         C49062) *
                        C49022) *
                       C49219 -
                   (((C28425 + C28424 + C28423) * C49062 +
                     (C27030 + C27029 + C27028) * C49190) *
                        C49022 +
                    ((C28655 + C28654 + C28653) * C49062 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49190) *
                        C22563) *
                       C355) *
                      C48928 * C49215)) /
                (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49190 +
                     (C28650 + C28651 + C28652) * C49062) *
                        C22563 +
                    ((C27022 + C27023 + C27024) * C49190 +
                     (C27653 + C27652 + C27651) * C49062) *
                        C49022) *
                       C48945 * C467 -
                   (((C27648 + C27649 + C27650) * C49062 +
                     (C27027 + C27026 + C27025) * C49190) *
                        C49022 +
                    ((C27651 + C27652 + C27653) * C49062 +
                     (C27024 + C27023 + C27022) * C49190) *
                        C22563) *
                       C48945 * C49217) *
                      C469 +
                  ((((C27028 + C27029 + C27030) * C49190 +
                     (C28423 + C28424 + C28425) * C49062) *
                        C22563 +
                    ((C27031 + C27032 + C27033) * C49190 +
                     (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
                      C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
                      C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                         C49062) *
                        C49022) *
                       C48945 * C49217 -
                   (((C28425 + C28424 + C28423) * C49062 +
                     (C27030 + C27029 + C27028) * C49190) *
                        C49022 +
                    ((C28655 + C28654 + C28653) * C49062 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49190) *
                        C22563) *
                       C48945 * C467) *
                      C49215)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C49190 +
            (C28650 + C28651 + C28652) * C49062) *
               C22563 +
           ((C27022 + C27023 + C27024) * C49190 +
            (C27653 + C27652 + C27651) * C49062) *
               C49022) *
              C48945 * C533 -
          (((C27648 + C27649 + C27650) * C49062 +
            (C27027 + C27026 + C27025) * C49190) *
               C49022 +
           ((C27651 + C27652 + C27653) * C49062 +
            (C27024 + C27023 + C27022) * C49190) *
               C22563) *
              C48945 * C534 +
          ((C27464 * C49190 + (C27650 + C27649 + C27648) * C49062) * C22563 +
           ((C27474 + C27473 + C27472) * C49190 +
            (C48045 * C1891 + C27633 + C27633 + C48862 * C1897 +
             C48038 * C1892 + C27634 + C27634 + C48870 * C1898 +
             C26792 * C1893 + C27635 + C27635 + C26784 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C49190 +
             (C28650 + C28651 + C28652) * C49062) *
                C22563 +
            ((C27022 + C27023 + C27024) * C49190 + C29198 * C49062) * C49022) *
               C355 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C49190) * C49022 +
            ((C26792 * C892 + C28058 + C28058 + C26784 * C902 + C48038 * C891 +
              C28057 + C28057 + C48870 * C901 + C48045 * C890 + C28056 +
              C28056 + C48862 * C900) *
                 C49062 +
             (C28652 + C28651 + C28650) * C49190) *
                C22563) *
               C49219) *
              C467 +
          (((C29198 * C49190 + (C29208 + C29207 + C29206) * C49062) * C22563 +
            ((C27650 + C27649 + C27648) * C49190 +
             (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 +
              C48038 * C2339 + C28063 + C28063 + C48870 * C2351 +
              C26792 * C2340 + C28064 + C28064 + C26784 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C49190) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C49190) * C22563) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C49190 +
             (C28650 + C28651 + C28652) * C49062) *
                C22563 +
            ((C27022 + C27023 + C27024) * C49190 + C29198 * C49062) * C49022) *
               C741 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C49190) * C49022 +
            ((C26792 * C892 + C28058 + C28058 + C26784 * C902 + C48038 * C891 +
              C28057 + C28057 + C48870 * C901 + C48045 * C890 + C28056 +
              C28056 + C48862 * C900) *
                 C49062 +
             (C28652 + C28651 + C28650) * C49190) *
                C22563) *
               C49219) *
              C48928 * C469 +
          ((((C28653 + C28654 + C28655) * C49190 +
             (C48045 * C891 + C28632 + C28632 + C48862 * C901 + C48038 * C892 +
              C28633 + C28633 + C48870 * C902 + C26792 * C893 + C28634 +
              C28634 + C26784 * C903) *
                 C49062) *
                C22563 +
            ((C28423 + C28424 + C28425) * C49190 +
             (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
              C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
              C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C28425 + C28424 + C28423) * C49062 +
             (C27030 + C27029 + C27028) * C49190) *
                C49022 +
            ((C28655 + C28654 + C28653) * C49062 +
             (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
              C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 +
              C26812 + C48862 * C138) *
                 C49190) *
                C22563) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C49190 +
             (C28650 + C28651 + C28652) * C49062) *
                C22563 +
            ((C27022 + C27023 + C27024) * C49190 + C29198 * C49062) * C49022) *
               C741 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C49190) * C49022 +
            ((C26792 * C892 + C28058 + C28058 + C26784 * C902 + C48038 * C891 +
              C28057 + C28057 + C48870 * C901 + C48045 * C890 + C28056 +
              C28056 + C48862 * C900) *
                 C49062 +
             (C28652 + C28651 + C28650) * C49190) *
                C22563) *
               C49219) *
              C241 +
          (((C29198 * C49190 + (C29208 + C29207 + C29206) * C49062) * C22563 +
            ((C27650 + C27649 + C27648) * C49190 +
             (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 +
              C48038 * C2339 + C28063 + C28063 + C48870 * C2351 +
              C26792 * C2340 + C28064 + C28064 + C26784 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C49190) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C49190) * C22563) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C49190 +
            (C28650 + C28651 + C28652) * C49062) *
               C22563 +
           ((C27022 + C27023 + C27024) * C49190 + C29198 * C49062) * C49022) *
              C887 -
          (((C29206 + C29207 + C29208) * C49062 + C29202 * C49190) * C49022 +
           ((C29761 + C29762 + C29763) * C49062 +
            (C28652 + C28651 + C28650) * C49190) *
               C22563) *
              C888 +
          (((C29763 + C29762 + C29761) * C49190 +
            (C48045 * C2784 + C29749 + C29749 + C48862 * C2792 +
             C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
             C26792 * C2782 + C29751 + C29751 + C26784 * C2790) *
                C49062) *
               C22563 +
           ((C29208 + C29207 + C29206) * C49190 +
            (C48045 * C3262 + C29752 + C29752 + C48862 * C3268 +
             C48038 * C3263 + C29753 + C29753 + C48870 * C3269 +
             C26792 * C3264 + C29754 + C29754 + C26784 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22565 * C249 + C22578 + C22578 + C49260 * C261 + C22567 * C248 +
            C22579 + C22579 + C49253 * C260 + C22569 * C247 + C22580 + C22580 +
            C49240 * C259 + C22571 * C246 + C22581 + C22581 + C49188 * C258) *
               C48975 * C49022) *
              C48945 * C48928 * C110 -
          ((C22571 * C245 + C22582 + C22582 + C49188 * C257 + C22569 * C246 +
            C22583 + C22583 + C49240 * C258 + C22567 * C247 + C22584 + C22584 +
            C49253 * C259 + C22565 * C248 + C22585 + C22585 + C49260 * C260) *
               C48975 * C49022 +
           (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
            C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
            C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
               C48975 * C22563) *
              C48945 * C48928 * C111 +
          ((C22565 * C125 + C22590 + C22590 + C49260 * C139 + C22567 * C126 +
            C22591 + C22591 + C49253 * C140 + C22569 * C127 + C22592 + C22592 +
            C49240 * C141 + C22571 * C128 + C22593 + C22593 + C49188 * C142) *
               C48975 * C22563 +
           (C22565 * C247 + C22594 + C22594 + C49260 * C259 + C22567 * C246 +
            C22595 + C22595 + C49253 * C258 + C22569 * C245 + C22596 + C22596 +
            C49240 * C257 + C22571 * C250 + C22597 + C22597 + C49188 * C262) *
               C48975 * C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C23797 * C249 + C23804 + C23804 + C23791 * C261 + C23799 * C248 +
            C23805 + C23805 + C48867 * C260) *
               C48975 * C49257 +
           (C23797 * C537 + C23806 + C23806 + C23791 * C547 + C23799 * C538 +
            C23807 + C23807 + C48867 * C548) *
               C48975 * C49247 +
           (C23797 * C1207 + C23808 + C23808 + C23791 * C1215 + C23799 * C1206 +
            C23809 + C23809 + C48867 * C1214) *
               C48975 * C49197) *
              C48945 * C48928 * C110 -
          ((C23799 * C1205 + C23810 + C23810 + C48867 * C1213 + C23797 * C1206 +
            C23811 + C23811 + C23791 * C1214) *
               C48975 * C49197 +
           (C23799 * C539 + C23812 + C23812 + C48867 * C549 + C23797 * C538 +
            C23813 + C23813 + C23791 * C548) *
               C48975 * C49247 +
           (C23799 * C247 + C23814 + C23814 + C48867 * C259 + C23797 * C248 +
            C23815 + C23815 + C23791 * C260) *
               C48975 * C49257 +
           (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
            C23817 + C23817 + C23791 * C138) *
               C48975 * C49261) *
              C48945 * C48928 * C111 +
          ((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
            C23819 + C23819 + C48867 * C140) *
               C48975 * C49261 +
           (C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
            C23821 + C23821 + C48867 * C258) *
               C48975 * C49257 +
           (C23797 * C539 + C23822 + C23822 + C23791 * C549 + C23799 * C540 +
            C23823 + C23823 + C48867 * C550) *
               C48975 * C49247 +
           (C23797 * C1205 + C23824 + C23824 + C23791 * C1213 + C23799 * C1208 +
            C23825 + C23825 + C48867 * C1216) *
               C48975 * C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C48945 * C241 -
           ((C22571 * C540 + C22736 + C22736 + C49188 * C550 + C22569 * C539 +
             C22737 + C22737 + C49240 * C549 + C22567 * C538 + C22738 + C22738 +
             C49253 * C548 + C22565 * C537 + C22739 + C22739 + C49260 * C547) *
                C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C48945 * C49217) *
              C243 +
          (((C22772 + C22773 + C22774 + C22775) * C48975 * C22563 +
            (C22565 * C538 + C22748 + C22748 + C49260 * C548 + C22567 * C539 +
             C22749 + C22749 + C49253 * C549 + C22569 * C540 + C22750 + C22750 +
             C49240 * C550 + C22571 * C541 + C22751 + C22751 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C48945 * C241 -
           ((C23799 * C1716 + C23968 + C23968 + C48867 * C1722 +
             C23797 * C1715 + C23969 + C23969 + C23791 * C1721) *
                C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C48945 * C49217) *
              C243 +
          (((C24014 + C24015) * C48975 * C49261 +
            (C24016 + C24017) * C48975 * C49257 +
            (C24018 + C24019) * C48975 * C49247 +
            (C23797 * C1716 + C23982 + C23982 + C23791 * C1722 +
             C23799 * C1717 + C23983 + C23983 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C355 -
           ((C22571 * C642 + C22906 + C22906 + C49188 * C652 + C22569 * C641 +
             C22907 + C22907 + C49240 * C651 + C22567 * C640 + C22908 + C22908 +
             C49253 * C650 + C22565 * C639 + C22909 + C22909 + C49260 * C649) *
                C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C48928 * C243 +
          (((C22565 * C360 + C22914 + C22914 + C49260 * C372 + C22567 * C359 +
             C22915 + C22915 + C49253 * C371 + C22569 * C358 + C22916 + C22916 +
             C49240 * C370 + C22571 * C357 + C22917 + C22917 + C49188 * C369) *
                C48975 * C22563 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C355 -
           ((C23799 * C1892 + C24150 + C24150 + C48867 * C1898 +
             C23797 * C1891 + C24151 + C24151 + C23791 * C1897) *
                C48975 * C49197 +
            (C23799 * C1430 + C24152 + C24152 + C48867 * C1438 +
             C23797 * C1431 + C24153 + C24153 + C23791 * C1439) *
                C48975 * C49247 +
            (C23799 * C640 + C24154 + C24154 + C48867 * C650 + C23797 * C639 +
             C24155 + C24155 + C23791 * C649) *
                C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C48928 * C243 +
          (((C23797 * C360 + C24158 + C24158 + C23791 * C372 + C23799 * C359 +
             C24159 + C24159 + C48867 * C371) *
                C48975 * C49261 +
            (C23797 * C640 + C24160 + C24160 + C23791 * C650 + C23799 * C641 +
             C24161 + C24161 + C48867 * C651) *
                C48975 * C49257 +
            (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
             C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                C48975 * C49247 +
            (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
             C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C48945 * C467 -
           ((C22571 * C540 + C22736 + C22736 + C49188 * C550 + C22569 * C539 +
             C22737 + C22737 + C49240 * C549 + C22567 * C538 + C22738 + C22738 +
             C49253 * C548 + C22565 * C537 + C22739 + C22739 + C49260 * C547) *
                C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C48945 * C49217) *
              C469 +
          (((C22772 + C22773 + C22774 + C22775) * C48975 * C22563 +
            (C22565 * C538 + C22748 + C22748 + C49260 * C548 + C22567 * C539 +
             C22749 + C22749 + C49253 * C549 + C22569 * C540 + C22750 + C22750 +
             C49240 * C550 + C22571 * C541 + C22751 + C22751 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 +
            (C24010 + C24011) * C48975 * C49247 +
            (C24012 + C24013) * C48975 * C49197) *
               C48945 * C467 -
           ((C23799 * C1716 + C23968 + C23968 + C48867 * C1722 +
             C23797 * C1715 + C23969 + C23969 + C23791 * C1721) *
                C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C48945 * C49217) *
              C469 +
          (((C24014 + C24015) * C48975 * C49261 +
            (C24016 + C24017) * C48975 * C49257 +
            (C24018 + C24019) * C48975 * C49247 +
            (C23797 * C1716 + C23982 + C23982 + C23791 * C1722 +
             C23799 * C1717 + C23983 + C23983 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
              C48945 * C533 -
          ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
           (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
              C48945 * C534 +
          ((C23173 + C23172 + C23171 + C23170) * C48975 * C22563 +
           (C22565 * C1207 + C23158 + C23158 + C49260 * C1215 + C22567 * C1206 +
            C23159 + C23159 + C49253 * C1214 + C22569 * C1205 + C23160 +
            C23160 + C49240 * C1213 + C22571 * C1208 + C23161 + C23161 +
            C49188 * C1216) *
               C48975 * C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
           C24403 * C49197) *
              C48945 * C533 -
          ((C24408 + C24409) * C48975 * C49197 +
           (C24013 + C24012) * C48975 * C49247 +
           (C24011 + C24010) * C48975 * C49257 +
           (C24009 + C24008) * C48975 * C49261) *
              C48945 * C534 +
          (C24402 * C49261 + C24403 * C49257 +
           (C24409 + C24408) * C48975 * C49247 +
           (C23797 * C9283 + C24400 + C24400 + C23791 * C9287 + C23799 * C9284 +
            C24401 + C24401 + C48867 * C9288) *
               C48975 * C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C355 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C467 +
          (((C23327 + C23326 + C23325 + C23324) * C48975 * C22563 +
            (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 +
             C22567 * C1430 + C23313 + C23313 + C49253 * C1438 +
             C22569 * C1429 + C23314 + C23314 + C49240 * C1437 +
             C22571 * C1432 + C23315 + C23315 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C355 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C467 +
          (((C24571 + C24570) * C48975 * C49261 +
            (C24569 + C24568) * C48975 * C49257 +
            (C24567 + C24566) * C48975 * C49247 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C24408 + C24409) * C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C741 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C48928 * C469 +
          (((C22565 * C360 + C22914 + C22914 + C49260 * C372 + C22567 * C359 +
             C22915 + C22915 + C49253 * C371 + C22569 * C358 + C22916 + C22916 +
             C49240 * C370 + C22571 * C357 + C22917 + C22917 + C49188 * C369) *
                C48975 * C22563 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C22775 + C22774 + C22773 + C22772) * C48975 * C49022 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C48975 * C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C741 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C48928 * C469 +
          (((C23797 * C360 + C24158 + C24158 + C23791 * C372 + C23799 * C359 +
             C24159 + C24159 + C48867 * C371) *
                C48975 * C49261 +
            (C23797 * C640 + C24160 + C24160 + C23791 * C650 + C23799 * C641 +
             C24161 + C24161 + C48867 * C651) *
                C48975 * C49257 +
            (C23797 * C1430 + C24162 + C24162 + C23791 * C1438 +
             C23799 * C1429 + C24163 + C24163 + C48867 * C1437) *
                C48975 * C49247 +
            (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
             C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C24019 + C24018) * C48975 * C49197 +
            (C24017 + C24016) * C48975 * C49247 +
            (C24015 + C24014) * C48975 * C49257 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C48975 * C49261) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C48975 * C22563 +
            (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
               C741 -
           ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
            (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
             C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
             C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
                C48975 * C22563) *
               C49219) *
              C241 +
          (((C23327 + C23326 + C23325 + C23324) * C48975 * C22563 +
            (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 +
             C22567 * C1430 + C23313 + C23313 + C49253 * C1438 +
             C22569 * C1429 + C23314 + C23314 + C49240 * C1437 +
             C22571 * C1432 + C23315 + C23315 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C23170 + C23171 + C23172 + C23173) * C48975 * C49022 +
            (C22771 + C22770 + C22769 + C22768) * C48975 * C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C48975 * C49261 +
            (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
            C24403 * C49197) *
               C741 -
           ((C24566 + C24567) * C48975 * C49197 +
            (C24568 + C24569) * C48975 * C49247 +
            (C24570 + C24571) * C48975 * C49257 +
            (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
             C24157 + C24157 + C23791 * C373) *
                C48975 * C49261) *
               C49219) *
              C241 +
          (((C24571 + C24570) * C48975 * C49261 +
            (C24569 + C24568) * C48975 * C49257 +
            (C24567 + C24566) * C48975 * C49247 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C24408 + C24409) * C48975 * C49197 +
            (C24013 + C24012) * C48975 * C49247 +
            (C24011 + C24010) * C48975 * C49257 +
            (C24009 + C24008) * C48975 * C49261) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C48975 * C22563 +
           (C22768 + C22769 + C22770 + C22771) * C48975 * C49022) *
              C887 -
          ((C23324 + C23325 + C23326 + C23327) * C48975 * C49022 +
           (C22571 * C358 + C22910 + C22910 + C49188 * C370 + C22569 * C359 +
            C22911 + C22911 + C49240 * C371 + C22567 * C360 + C22912 + C22912 +
            C49253 * C372 + C22565 * C361 + C22913 + C22913 + C49260 * C373) *
               C48975 * C22563) *
              C888 +
          ((C22565 * C890 + C23686 + C23686 + C49260 * C900 + C22567 * C891 +
            C23687 + C23687 + C49253 * C901 + C22569 * C892 + C23688 + C23688 +
            C49240 * C902 + C22571 * C893 + C23689 + C23689 + C49188 * C903) *
               C48975 * C22563 +
           (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 + C22567 * C2336 +
            C23691 + C23691 + C49253 * C2348 + C22569 * C2337 + C23692 +
            C23692 + C49240 * C2349 + C22571 * C2630 + C23693 + C23693 +
            C49188 * C2632) *
               C48975 * C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C48975 * C49261 +
           (C24008 + C24009) * C48975 * C49257 + C24402 * C49247 +
           C24403 * C49197) *
              C887 -
          ((C24566 + C24567) * C48975 * C49197 +
           (C24568 + C24569) * C48975 * C49247 +
           (C24570 + C24571) * C48975 * C49257 +
           (C23799 * C360 + C24156 + C24156 + C48867 * C372 + C23797 * C361 +
            C24157 + C24157 + C23791 * C373) *
               C48975 * C49261) *
              C888 +
          ((C23797 * C890 + C24930 + C24930 + C23791 * C900 + C23799 * C891 +
            C24931 + C24931 + C48867 * C901) *
               C48975 * C49261 +
           (C23797 * C2335 + C24932 + C24932 + C23791 * C2347 + C23799 * C2336 +
            C24933 + C24933 + C48867 * C2348) *
               C48975 * C49257 +
           (C23797 * C2338 + C24934 + C24934 + C23791 * C2350 + C23799 * C2339 +
            C24935 + C24935 + C48867 * C2351) *
               C48975 * C49247 +
           (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
            C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
               C48975 * C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C31480 +
            (C13102 + C13103) * C49062) *
               C49018 +
           ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
           (C11976 * C31480 + C13447 * C49062) * C26787) *
              C48945 * C48928 * C110 -
          (((C12885 + C12884) * C49062 + (C11599 + C11598) * C31480) * C26787 +
           ((C12883 + C12882) * C49062 + (C11597 + C11596) * C31480) * C49025 +
           ((C13105 + C13104) * C49062 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C31480) *
               C49018) *
              C48945 * C48928 * C111 +
          (((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
             C11401 + C11401 + C48867 * C140) *
                C31480 +
            (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
             C12667 + C12667 + C48867 * C370) *
                C49062) *
               C49018 +
           ((C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
             C11403 + C11403 + C48867 * C258) *
                C31480 +
            (C11379 * C641 + C12668 + C12668 + C49167 * C651 + C11381 * C642 +
             C12669 + C12669 + C48867 * C652) *
                C49062) *
               C49025 +
           ((C11379 * C539 + C11404 + C11404 + C49167 * C549 + C11381 * C540 +
             C11405 + C11405 + C48867 * C550) *
                C31480 +
            (C11379 * C1429 + C12670 + C12670 + C49167 * C1437 +
             C11381 * C1432 + C12671 + C12671 + C48867 * C1440) *
                C49062) *
               C26787) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            (C11976 * C31480 + C13447 * C49062) * C26787) *
               C48945 * C241 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C31480) * C26787 +
            (C13649 * C49062 + (C11593 + C11592) * C31480) * C49025 +
            (C13654 * C49062 + (C11591 + C11590) * C31480) * C49018) *
               C48945 * C49217) *
              C243 +
          ((((C11596 + C11597) * C31480 + (C12882 + C12883) * C49062) * C49018 +
            ((C11598 + C11599) * C31480 + (C12884 + C12885) * C49062) * C49025 +
            ((C11600 + C11601) * C31480 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C26787) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C31480) * C26787 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C31480) * C49025 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C31480) *
                C49018) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            (C11976 * C31480 + C13447 * C49062) * C26787) *
               C355 -
           (((C13663 + C13664) * C49062 + C13649 * C31480) * C26787 +
            (C19705 * C49062 + C13654 * C31480) * C49025 +
            ((C14215 + C14216) * C49062 + (C13103 + C13102) * C31480) *
                C49018) *
               C49219) *
              C48928 * C243 +
          ((((C13104 + C13105) * C31480 + (C19164 + C19165) * C49062) * C49018 +
            ((C12882 + C12883) * C31480 + (C18956 + C18957) * C49062) * C49025 +
            ((C12884 + C12885) * C31480 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C26787) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C31480) * C26787 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C31480) * C49025 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C31480) *
                C49018) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            (C11976 * C31480 + C13447 * C49062) * C26787) *
               C48945 * C467 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C31480) * C26787 +
            (C13649 * C49062 + (C11593 + C11592) * C31480) * C49025 +
            (C13654 * C49062 + (C11591 + C11590) * C31480) * C49018) *
               C48945 * C49217) *
              C469 +
          ((((C11596 + C11597) * C31480 + (C12882 + C12883) * C49062) * C49018 +
            ((C11598 + C11599) * C31480 + (C12884 + C12885) * C49062) * C49025 +
            ((C11600 + C11601) * C31480 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C26787) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C31480) * C26787 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C31480) * C49025 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C31480) *
                C49018) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C31480 +
            (C13102 + C13103) * C49062) *
               C49018 +
           ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
           C44381 * C26787) *
              C48945 * C533 -
          (((C12148 + C12149) * C49062 + (C11595 + C11594) * C31480) * C26787 +
           (C13649 * C49062 + (C11593 + C11592) * C31480) * C49025 +
           (C13654 * C49062 + (C11591 + C11590) * C31480) * C49018) *
              C48945 * C534 +
          (C44381 * C49018 +
           (C11977 * C31480 + (C12149 + C12148) * C49062) * C49025 +
           ((C11991 + C11990) * C31480 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C49062) *
               C26787) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            C44381 * C26787) *
               C355 -
           (((C13663 + C13664) * C49062 + C13649 * C31480) * C26787 +
            (C19705 * C49062 + C13654 * C31480) * C49025 +
            ((C14215 + C14216) * C49062 + (C13103 + C13102) * C31480) *
                C49018) *
               C49219) *
              C467 +
          (((C13644 * C31480 + C19700 * C49062) * C49018 +
            (C13447 * C31480 + (C13664 + C13663) * C49062) * C49025 +
            ((C12149 + C12148) * C31480 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C26787) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C31480) * C26787 +
            (C13649 * C49062 + (C11593 + C11592) * C31480) * C49025 +
            (C13654 * C49062 + (C11591 + C11590) * C31480) * C49018) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            C44381 * C26787) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C31480) * C26787 +
            (C19705 * C49062 + C13654 * C31480) * C49025 +
            ((C14215 + C14216) * C49062 + (C13103 + C13102) * C31480) *
                C49018) *
               C49219) *
              C48928 * C469 +
          ((((C13104 + C13105) * C31480 + (C19164 + C19165) * C49062) * C49018 +
            ((C12882 + C12883) * C31480 + (C18956 + C18957) * C49062) * C49025 +
            ((C12884 + C12885) * C31480 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C26787) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C31480) * C26787 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C31480) * C49025 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C31480) *
                C49018) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C31480 +
             (C13102 + C13103) * C49062) *
                C49018 +
            ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
            C44381 * C26787) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C31480) * C26787 +
            (C19705 * C49062 + C13654 * C31480) * C49025 +
            ((C14215 + C14216) * C49062 + (C13103 + C13102) * C31480) *
                C49018) *
               C49219) *
              C241 +
          (((C13644 * C31480 + C19700 * C49062) * C49018 +
            (C13447 * C31480 + (C13664 + C13663) * C49062) * C49025 +
            ((C12149 + C12148) * C31480 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C26787) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C31480) * C26787 +
            (C13649 * C49062 + (C11593 + C11592) * C31480) * C49025 +
            (C13654 * C49062 + (C11591 + C11590) * C31480) * C49018) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C31480 +
            (C13102 + C13103) * C49062) *
               C49018 +
           ((C11590 + C11591) * C31480 + C13644 * C49062) * C49025 +
           C44381 * C26787) *
              C887 -
          (((C13663 + C13664) * C49062 + C13649 * C31480) * C26787 +
           (C19705 * C49062 + C13654 * C31480) * C49025 +
           ((C14215 + C14216) * C49062 + (C13103 + C13102) * C31480) * C49018) *
              C888 +
          ((C20246 * C31480 + C21353 * C49062) * C49018 +
           (C19700 * C31480 + (C19711 + C19710) * C49062) * C49025 +
           ((C13664 + C13663) * C31480 +
            (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
             C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                C49062) *
               C26787) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
            C10424 * C49065 + C10425 * C36954) *
               C49018 +
           (C9324 * C49058 + C9697 * C49065 + C10238 * C36954) * C49025 +
           (C9325 * C49058 + C9696 * C49065 + C10239 * C36954) * C26787) *
              C48945 * C48928 * C110 -
          ((C10243 * C36954 + C10242 * C49065 + C9329 * C49058) * C26787 +
           (C10241 * C36954 + C10240 * C49065 + C9328 * C49058) * C49025 +
           (C10427 * C36954 + C10426 * C49065 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49058) *
               C49018) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49058 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49065 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C36954) *
               C49018 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49058 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49065 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C36954) *
               C49025 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C49058 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49065 +
            (C9184 * C2340 + C10057 + C10057 + C48857 * C2352) * C36954) *
               C26787) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 +
            (C46971 + C46972 + C46973) * C26787) *
               C48945 * C241 -
           ((C10692 * C36954 + C9695 * C49065 + C9326 * C49058) * C26787 +
            (C46973 + C46972 + C46971) * C49025 +
            (C46970 + C46969 + C46968) * C49018) *
               C48945 * C49217) *
              C243 +
          (((C46974 + C46975 + C46976) * C49018 +
            (C46977 + C46978 + C46979) * C49025 +
            (C9330 * C49058 + C14461 * C49065 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C36954) *
                C26787) *
               C48945 * C49217 -
           ((C46979 + C46978 + C46977) * C26787 +
            (C46976 + C46975 + C46974) * C49025 +
            (C10427 * C36954 + C10426 * C49065 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49058) *
                C49018) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 +
            (C46971 + C46972 + C46973) * C26787) *
               C355 -
           ((C10856 * C36954 + C10239 * C49065 + C9696 * C49058) * C26787 +
            (C10857 * C36954 + C10238 * C49065 + C9697 * C49058) * C49025 +
            (C11275 * C36954 + C10425 * C49065 + C10424 * C49058) * C49018) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49058 + C10427 * C49065 + C18132 * C36954) * C49018 +
            (C10240 * C49058 + C10241 * C49065 + C21606 * C36954) * C49025 +
            (C10242 * C49058 + C10243 * C49065 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C36954) *
                C26787) *
               C49219 -
           ((C46979 + C46978 + C46977) * C26787 +
            (C46976 + C46975 + C46974) * C49025 +
            (C10427 * C36954 + C10426 * C49065 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49058) *
                C49018) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 +
            (C46971 + C46972 + C46973) * C26787) *
               C48945 * C467 -
           ((C10692 * C36954 + C9695 * C49065 + C9326 * C49058) * C26787 +
            (C46973 + C46972 + C46971) * C49025 +
            (C46970 + C46969 + C46968) * C49018) *
               C48945 * C49217) *
              C469 +
          (((C46974 + C46975 + C46976) * C49018 +
            (C46977 + C46978 + C46979) * C49025 +
            (C9330 * C49058 + C14461 * C49065 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C36954) *
                C26787) *
               C48945 * C49217 -
           ((C46979 + C46978 + C46977) * C26787 +
            (C46976 + C46975 + C46974) * C49025 +
            (C10427 * C36954 + C10426 * C49065 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49058) *
                C49018) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
                    C10424 * C49065 + C10425 * C36954) *
                       C49018 +
                   (C46968 + C46969 + C46970) * C49025 + C47386 * C26787) *
                      C48945 * C533 -
                  ((C47383 + C47384 + C47385) * C26787 +
                   (C46973 + C46972 + C46971) * C49025 +
                   (C46970 + C46969 + C46968) * C49018) *
                      C48945 * C534 +
                  (C47386 * C49018 + (C47385 + C47384 + C47383) * C49025 +
                   (C9327 * C49058 + C9694 * C49065 +
                    (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C36954) *
                       C26787) *
                      C48945 * C535) *
                 C48894) /
                (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 + C47386 * C26787) *
               C355 -
           ((C47533 + C47534 + C47535) * C26787 +
            (C47536 + C47537 + C47538) * C49025 +
            (C11275 * C36954 + C10425 * C49065 + C10424 * C49058) * C49018) *
               C49219) *
              C467 +
          (((C47538 + C47537 + C47536) * C49018 +
            (C47535 + C47534 + C47533) * C49025 +
            (C9695 * C49058 + C10692 * C49065 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C36954) *
                C26787) *
               C49219 -
           ((C47383 + C47384 + C47385) * C26787 +
            (C46973 + C46972 + C46971) * C49025 +
            (C46970 + C46969 + C46968) * C49018) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 + C47386 * C26787) *
               C741 -
           ((C47533 + C47534 + C47535) * C26787 +
            (C47536 + C47537 + C47538) * C49025 +
            (C11275 * C36954 + C10425 * C49065 + C10424 * C49058) * C49018) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49058 + C10427 * C49065 + C18132 * C36954) * C49018 +
            (C10240 * C49058 + C10241 * C49065 + C21606 * C36954) * C49025 +
            (C10242 * C49058 + C10243 * C49065 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C36954) *
                C26787) *
               C49219 -
           ((C46979 + C46978 + C46977) * C26787 +
            (C46976 + C46975 + C46974) * C49025 +
            (C10427 * C36954 + C10426 * C49065 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49058) *
                C49018) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
             C10424 * C49065 + C10425 * C36954) *
                C49018 +
            (C46968 + C46969 + C46970) * C49025 + C47386 * C26787) *
               C741 -
           ((C47533 + C47534 + C47535) * C26787 +
            (C47536 + C47537 + C47538) * C49025 +
            (C11275 * C36954 + C10425 * C49065 + C10424 * C49058) * C49018) *
               C49219) *
              C241 +
          (((C47538 + C47537 + C47536) * C49018 +
            (C47535 + C47534 + C47533) * C49025 +
            (C9695 * C49058 + C10692 * C49065 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C36954) *
                C26787) *
               C49219 -
           ((C47383 + C47384 + C47385) * C26787 +
            (C46973 + C46972 + C46971) * C49025 +
            (C46970 + C46969 + C46968) * C49018) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49058 +
            C10424 * C49065 + C10425 * C36954) *
               C49018 +
           (C46968 + C46969 + C46970) * C49025 + C47386 * C26787) *
              C887 -
          ((C47533 + C47534 + C47535) * C26787 +
           (C47536 + C47537 + C47538) * C49025 +
           (C11275 * C36954 + C10425 * C49065 + C10424 * C49058) * C49018) *
              C888 +
          ((C10425 * C49058 + C11275 * C49065 + C18131 * C36954) * C49018 +
           (C10238 * C49058 + C10857 * C49065 + C18368 * C36954) * C49025 +
           (C10239 * C49058 + C10856 * C49065 +
            (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C36954) *
               C26787) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C9324 * C31480 + C9697 * C49062) * C49257 +
           (C9325 * C31480 + C9696 * C49062) * C49247 +
           (C9326 * C31480 + C9695 * C49062) * C49197) *
              C48945 * C48928 * C110 -
          ((C14461 * C49062 + C9330 * C31480) * C49197 +
           (C10242 * C49062 + C9329 * C31480) * C49247 +
           (C10240 * C49062 + C9328 * C31480) * C49257 +
           (C10426 * C49062 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
               C49261) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C31480 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49062) *
               C49261 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C31480 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49062) *
               C49257 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C31480 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49062) *
               C49247 +
           ((C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C31480 +
            (C9184 * C1893 + C14315 + C14315 + C48857 * C1899) * C49062) *
               C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 +
            (C8705 + C8704 + C8703) * C49062) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C7844 * C642 + C8246 + C8246 + C49211 * C652 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7840 * C640 + C8244 + C8244 +
             C49251 * C650) *
                C49062 +
            (C8082 + C8081 + C8080) * C31480) *
               C49022 +
           ((C15798 + C15797 + C15796) * C49062 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C31480) *
               C22563) *
              C48945 * C48928 * C111 +
          (((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
             C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
             C49211 * C141) *
                C31480 +
            (C7840 * C359 + C15435 + C15435 + C49251 * C371 + C7842 * C358 +
             C15436 + C15436 + C49238 * C370 + C7844 * C357 + C15437 + C15437 +
             C49211 * C369) *
                C49062) *
               C22563 +
           ((C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
             C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
             C49211 * C257) *
                C31480 +
            (C7840 * C641 + C39841 + C39841 + C49251 * C651 + C7842 * C642 +
             C39842 + C39842 + C49238 * C652 + C7844 * C643 + C39843 + C39843 +
             C49211 * C653) *
                C49062) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
            C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
               C22563 +
           (C9324 * C49262 + C9697 * C49259 + C10238 * C49250 +
            C10857 * C49204) *
               C49022) *
              C48945 * C48928 * C110 -
          ((C21606 * C49204 + C10241 * C49250 + C10240 * C49259 +
            C9328 * C49262) *
               C49022 +
           (C18132 * C49204 + C10427 * C49250 + C10426 * C49259 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49262) *
               C22563) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49262 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49259 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C49250 +
            (C9184 * C2782 + C17941 + C17941 + C48857 * C2790) * C49204) *
               C22563 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49262 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49259 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C49250 +
            (C9184 * C3264 + C21464 + C21464 + C48857 * C3270) * C49204) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C48945 * C241 -
           ((C9694 * C49062 + C9327 * C31480) * C49197 +
            (C41552 + C41551) * C49247 + (C41550 + C41549) * C49257 +
            (C41548 + C41547) * C49261) *
               C48945 * C49217) *
              C243 +
          (((C41553 + C41554) * C49261 + (C41555 + C41556) * C49257 +
            (C41557 + C41558) * C49247 +
            (C9331 * C31480 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C48945 * C241 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            ((C8703 + C8704 + C8705) * C49062 +
             (C8076 + C8075 + C8074) * C31480) *
                C22563) *
               C48945 * C49217) *
              C243 +
          ((((C8080 + C8081 + C8082) * C31480 +
             (C40050 + C40051 + C40052) * C49062) *
                C22563 +
            ((C8083 + C8084 + C8085) * C31480 +
             (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
              C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C48945 * C241 -
           ((C10856 * C49204 + C10239 * C49250 + C9696 * C49259 +
             C9325 * C49262) *
                C49022 +
            (C42646 + C42645 + C42644 + C42643) * C22563) *
               C48945 * C49217) *
              C243 +
          (((C42647 + C42648 + C42649 + C42650) * C22563 +
            (C9329 * C49262 + C10242 * C49259 + C10243 * C49250 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49204) *
                C49022) *
               C48945 * C49217 -
           ((C42650 + C42649 + C42648 + C42647) * C49022 +
            (C18132 * C49204 + C10427 * C49250 + C10426 * C49259 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49262) *
                C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C355 -
           ((C10692 * C49062 + C9695 * C31480) * C49197 +
            (C10239 * C49062 + C9696 * C31480) * C49247 +
            (C10238 * C49062 + C9697 * C31480) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C31480 + C10427 * C49062) * C49261 +
            (C10240 * C31480 + C10241 * C49062) * C49257 +
            (C10242 * C31480 + C10243 * C49062) * C49247 +
            (C14461 * C31480 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C355 -
           (((C16221 + C16220 + C16219) * C49062 +
             (C8703 + C8704 + C8705) * C31480) *
                C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C48928 * C243 +
          ((((C15796 + C15797 + C15798) * C31480 +
             (C15799 + C15800 + C15801) * C49062) *
                C22563 +
            ((C40050 + C40051 + C40052) * C31480 +
             (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
              C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
              C15589 + C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C355 -
           ((C18368 * C49204 + C10857 * C49250 + C10238 * C49259 +
             C9697 * C49262) *
                C49022 +
            (C18131 * C49204 + C11275 * C49250 + C10425 * C49259 +
             C10424 * C49262) *
                C22563) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49262 + C10427 * C49259 + C18132 * C49250 +
             C18133 * C49204) *
                C22563 +
            (C10240 * C49262 + C10241 * C49259 + C21606 * C49250 +
             (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C49204) *
                C49022) *
               C49219 -
           ((C42650 + C42649 + C42648 + C42647) * C49022 +
            (C18132 * C49204 + C10427 * C49250 + C10426 * C49259 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49262) *
                C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C48945 * C467 -
           ((C9694 * C49062 + C9327 * C31480) * C49197 +
            (C41552 + C41551) * C49247 + (C41550 + C41549) * C49257 +
            (C41548 + C41547) * C49261) *
               C48945 * C49217) *
              C469 +
          (((C41553 + C41554) * C49261 + (C41555 + C41556) * C49257 +
            (C41557 + C41558) * C49247 +
            (C9331 * C31480 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C48945 * C467 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            ((C8703 + C8704 + C8705) * C49062 +
             (C8076 + C8075 + C8074) * C31480) *
                C22563) *
               C48945 * C49217) *
              C469 +
          ((((C8080 + C8081 + C8082) * C31480 +
             (C40050 + C40051 + C40052) * C49062) *
                C22563 +
            ((C8083 + C8084 + C8085) * C31480 +
             (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
              C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C48945 * C467 -
           ((C10856 * C49204 + C10239 * C49250 + C9696 * C49259 +
             C9325 * C49262) *
                C49022 +
            (C42646 + C42645 + C42644 + C42643) * C22563) *
               C48945 * C49217) *
              C469 +
          (((C42647 + C42648 + C42649 + C42650) * C22563 +
            (C9329 * C49262 + C10242 * C49259 + C10243 * C49250 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49204) *
                C49022) *
               C48945 * C49217 -
           ((C42650 + C42649 + C42648 + C42647) * C49022 +
            (C18132 * C49204 + C10427 * C49250 + C10426 * C49259 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49262) *
                C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
              C48945 * C533 -
          ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
           (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
              C48945 * C534 +
          (C41917 * C49261 + C41918 * C49257 + (C41920 + C41919) * C49247 +
           (C9590 * C31480 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C49062) *
               C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 +
            (C8705 + C8704 + C8703) * C49062) *
               C49022) *
              C48945 * C533 -
          (((C8700 + C8701 + C8702) * C49062 +
            (C8079 + C8078 + C8077) * C31480) *
               C49022 +
           ((C8703 + C8704 + C8705) * C49062 +
            (C8076 + C8075 + C8074) * C31480) *
               C22563) *
              C48945 * C534 +
          ((C8516 * C31480 + (C8702 + C8701 + C8700) * C49062) * C22563 +
           ((C8526 + C8525 + C8524) * C31480 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
            C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
               C22563 +
           (C42643 + C42644 + C42645 + C42646) * C49022) *
              C48945 * C533 -
          ((C43009 + C43010 + C43011 + C43012) * C49022 +
           (C42646 + C42645 + C42644 + C42643) * C22563) *
              C48945 * C534 +
          ((C43012 + C43011 + C43010 + C43009) * C22563 +
           (C9326 * C49262 + C9695 * C49259 + C10692 * C49250 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49204) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C355 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C467 +
          (((C42056 + C42055) * C49261 + (C42054 + C42053) * C49257 +
            (C42052 + C42051) * C49247 +
            (C9694 * C31480 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
            (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C355 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C467 +
          (((C40783 * C31480 + (C16219 + C16220 + C16221) * C49062) * C22563 +
            ((C8702 + C8701 + C8700) * C31480 +
             (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
              C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            (C40784 * C49062 + (C8076 + C8075 + C8074) * C31480) * C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C355 -
           ((C43143 + C43144 + C43145 + C43146) * C49022 +
            (C18131 * C49204 + C11275 * C49250 + C10425 * C49259 +
             C10424 * C49262) *
                C22563) *
               C49219) *
              C467 +
          (((C43146 + C43145 + C43144 + C43143) * C22563 +
            (C9696 * C49262 + C10239 * C49259 + C10856 * C49250 +
             (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49204) *
                C49022) *
               C49219 -
           ((C43009 + C43010 + C43011 + C43012) * C49022 +
            (C42646 + C42645 + C42644 + C42643) * C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C741 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C31480 + C10427 * C49062) * C49261 +
            (C10240 * C31480 + C10241 * C49062) * C49257 +
            (C10242 * C31480 + C10243 * C49062) * C49247 +
            (C14461 * C31480 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C741 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C48928 * C469 +
          ((((C15796 + C15797 + C15798) * C31480 +
             (C15799 + C15800 + C15801) * C49062) *
                C22563 +
            ((C40050 + C40051 + C40052) * C31480 +
             (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
              C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
              C15589 + C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C741 -
           ((C43143 + C43144 + C43145 + C43146) * C49022 +
            (C18131 * C49204 + C11275 * C49250 + C10425 * C49259 +
             C10424 * C49262) *
                C22563) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49262 + C10427 * C49259 + C18132 * C49250 +
             C18133 * C49204) *
                C22563 +
            (C10240 * C49262 + C10241 * C49259 + C21606 * C49250 +
             (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C49204) *
                C49022) *
               C49219 -
           ((C42650 + C42649 + C42648 + C42647) * C49022 +
            (C18132 * C49204 + C10427 * C49250 + C10426 * C49259 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49262) *
                C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C741 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C241 +
          (((C42056 + C42055) * C49261 + (C42054 + C42053) * C49257 +
            (C42052 + C42051) * C49247 +
            (C9694 * C31480 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
            (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C741 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C241 +
          (((C40783 * C31480 + (C16219 + C16220 + C16221) * C49062) * C22563 +
            ((C8702 + C8701 + C8700) * C31480 +
             (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
              C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            (C40784 * C49062 + (C8076 + C8075 + C8074) * C31480) * C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
             C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
                C22563 +
            (C42643 + C42644 + C42645 + C42646) * C49022) *
               C741 -
           ((C43143 + C43144 + C43145 + C43146) * C49022 +
            (C18131 * C49204 + C11275 * C49250 + C10425 * C49259 +
             C10424 * C49262) *
                C22563) *
               C49219) *
              C241 +
          (((C43146 + C43145 + C43144 + C43143) * C22563 +
            (C9696 * C49262 + C10239 * C49259 + C10856 * C49250 +
             (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49204) *
                C49022) *
               C49219 -
           ((C43009 + C43010 + C43011 + C43012) * C49022 +
            (C42646 + C42645 + C42644 + C42643) * C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
              C887 -
          ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
           (C42055 + C42056) * C49257 +
           (C10425 * C49062 + C10424 * C31480) * C49261) *
              C888 +
          ((C10425 * C31480 + C11275 * C49062) * C49261 +
           (C10238 * C31480 + C10857 * C49062) * C49257 +
           (C10239 * C31480 + C10856 * C49062) * C49247 +
           (C10692 * C31480 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49062) *
               C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
              C887 -
          (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
           ((C15795 + C15794 + C15793) * C49062 +
            (C15792 + C15791 + C15790) * C31480) *
               C22563) *
              C888 +
          ((C16634 * C31480 + (C16643 + C16642 + C16641) * C49062) * C22563 +
           ((C16219 + C16220 + C16221) * C31480 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49262 +
            C10424 * C49259 + C10425 * C49250 + C11275 * C49204) *
               C22563 +
           (C42643 + C42644 + C42645 + C42646) * C49022) *
              C887 -
          ((C43143 + C43144 + C43145 + C43146) * C49022 +
           (C18131 * C49204 + C11275 * C49250 + C10425 * C49259 +
            C10424 * C49262) *
               C22563) *
              C888 +
          ((C10425 * C49262 + C11275 * C49259 + C18131 * C49250 +
            C18603 * C49204) *
               C22563 +
           (C10238 * C49262 + C10857 * C49259 + C18368 * C49250 +
            (C9184 * C18359 + C18365 + C18365 + C48857 * C18361) * C49204) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49058 +
            (C13102 + C13103) * C49065 + C20246 * C36954) *
               C22563 +
           ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C18957 + C18956) * C36954 + (C12883 + C12882) * C49065 +
            (C11597 + C11596) * C49058) *
               C49022 +
           ((C19165 + C19164) * C36954 + (C13105 + C13104) * C49065 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C49058) *
               C22563) *
              C48945 * C48928 * C111 +
          (((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
             C11401 + C11401 + C48867 * C140) *
                C49058 +
            (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
             C12667 + C12667 + C48867 * C370) *
                C49065 +
            (C11379 * C892 + C18750 + C18750 + C49167 * C902 + C11381 * C893 +
             C18751 + C18751 + C48867 * C903) *
                C36954) *
               C22563 +
           ((C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
             C11403 + C11403 + C48867 * C258) *
                C49058 +
            (C11379 * C641 + C12668 + C12668 + C49167 * C651 + C11381 * C642 +
             C12669 + C12669 + C48867 * C652) *
                C49065 +
            (C11379 * C2337 + C18752 + C18752 + C49167 * C2349 +
             C11381 * C2630 + C18753 + C18753 + C48867 * C2632) *
                C36954) *
               C49022) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C48945 * C241 -
           (((C13663 + C13664) * C36954 + C13649 * C49065 +
             (C11593 + C11592) * C49058) *
                C49022 +
            (C19705 * C36954 + C13654 * C49065 + (C11591 + C11590) * C49058) *
                C22563) *
               C48945 * C49217) *
              C243 +
          ((((C11596 + C11597) * C49058 + (C12882 + C12883) * C49065 +
             (C18956 + C18957) * C36954) *
                C22563 +
            ((C11598 + C11599) * C49058 + (C12884 + C12885) * C49065 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C36954) *
                C49022) *
               C48945 * C49217 -
           (((C18957 + C18956) * C36954 + (C12883 + C12882) * C49065 +
             (C11597 + C11596) * C49058) *
                C49022 +
            ((C19165 + C19164) * C36954 + (C13105 + C13104) * C49065 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49058) *
                C22563) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C355 -
           (((C19710 + C19711) * C36954 + C19705 * C49065 + C13654 * C49058) *
                C49022 +
            ((C20259 + C20260) * C36954 + (C14215 + C14216) * C49065 +
             (C13103 + C13102) * C49058) *
                C22563) *
               C49219) *
              C48928 * C243 +
          ((((C13104 + C13105) * C49058 + (C19164 + C19165) * C49065 +
             (C20635 + C20636) * C36954) *
                C22563 +
            ((C12882 + C12883) * C49058 + (C18956 + C18957) * C49065 +
             (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
              C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                 C36954) *
                C49022) *
               C49219 -
           (((C18957 + C18956) * C36954 + (C12883 + C12882) * C49065 +
             (C11597 + C11596) * C49058) *
                C49022 +
            ((C19165 + C19164) * C36954 + (C13105 + C13104) * C49065 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49058) *
                C22563) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C48945 * C467 -
           (((C13663 + C13664) * C36954 + C13649 * C49065 +
             (C11593 + C11592) * C49058) *
                C49022 +
            (C19705 * C36954 + C13654 * C49065 + (C11591 + C11590) * C49058) *
                C22563) *
               C48945 * C49217) *
              C469 +
          ((((C11596 + C11597) * C49058 + (C12882 + C12883) * C49065 +
             (C18956 + C18957) * C36954) *
                C22563 +
            ((C11598 + C11599) * C49058 + (C12884 + C12885) * C49065 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C36954) *
                C49022) *
               C48945 * C49217 -
           (((C18957 + C18956) * C36954 + (C12883 + C12882) * C49065 +
             (C11597 + C11596) * C49058) *
                C49022 +
            ((C19165 + C19164) * C36954 + (C13105 + C13104) * C49065 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49058) *
                C22563) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49058 +
            (C13102 + C13103) * C49065 + C20246 * C36954) *
               C22563 +
           ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
               C49022) *
              C48945 * C533 -
          (((C13663 + C13664) * C36954 + C13649 * C49065 +
            (C11593 + C11592) * C49058) *
               C49022 +
           (C19705 * C36954 + C13654 * C49065 + (C11591 + C11590) * C49058) *
               C22563) *
              C48945 * C534 +
          ((C11976 * C49058 + C13447 * C49065 + (C13664 + C13663) * C36954) *
               C22563 +
           (C11977 * C49058 + (C12149 + C12148) * C49065 +
            (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
             C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                C36954) *
               C49022) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C355 -
           (((C19710 + C19711) * C36954 + C19705 * C49065 + C13654 * C49058) *
                C49022 +
            ((C20259 + C20260) * C36954 + (C14215 + C14216) * C49065 +
             (C13103 + C13102) * C49058) *
                C22563) *
               C49219) *
              C467 +
          (((C13644 * C49058 + C19700 * C49065 + (C19711 + C19710) * C36954) *
                C22563 +
            (C13447 * C49058 + (C13664 + C13663) * C49065 +
             (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
              C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                 C36954) *
                C49022) *
               C49219 -
           (((C13663 + C13664) * C36954 + C13649 * C49065 +
             (C11593 + C11592) * C49058) *
                C49022 +
            (C19705 * C36954 + C13654 * C49065 + (C11591 + C11590) * C49058) *
                C22563) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C741 -
           (((C19710 + C19711) * C36954 + C19705 * C49065 + C13654 * C49058) *
                C49022 +
            ((C20259 + C20260) * C36954 + (C14215 + C14216) * C49065 +
             (C13103 + C13102) * C49058) *
                C22563) *
               C49219) *
              C48928 * C469 +
          ((((C13104 + C13105) * C49058 + (C19164 + C19165) * C49065 +
             (C20635 + C20636) * C36954) *
                C22563 +
            ((C12882 + C12883) * C49058 + (C18956 + C18957) * C49065 +
             (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
              C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                 C36954) *
                C49022) *
               C49219 -
           (((C18957 + C18956) * C36954 + (C12883 + C12882) * C49065 +
             (C11597 + C11596) * C49058) *
                C49022 +
            ((C19165 + C19164) * C36954 + (C13105 + C13104) * C49065 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49058) *
                C22563) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49058 +
             (C13102 + C13103) * C49065 + C20246 * C36954) *
                C22563 +
            ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
                C49022) *
               C741 -
           (((C19710 + C19711) * C36954 + C19705 * C49065 + C13654 * C49058) *
                C49022 +
            ((C20259 + C20260) * C36954 + (C14215 + C14216) * C49065 +
             (C13103 + C13102) * C49058) *
                C22563) *
               C49219) *
              C241 +
          (((C13644 * C49058 + C19700 * C49065 + (C19711 + C19710) * C36954) *
                C22563 +
            (C13447 * C49058 + (C13664 + C13663) * C49065 +
             (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
              C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                 C36954) *
                C49022) *
               C49219 -
           (((C13663 + C13664) * C36954 + C13649 * C49065 +
             (C11593 + C11592) * C49058) *
                C49022 +
            (C19705 * C36954 + C13654 * C49065 + (C11591 + C11590) * C49058) *
                C22563) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49058 +
            (C13102 + C13103) * C49065 + C20246 * C36954) *
               C22563 +
           ((C11590 + C11591) * C49058 + C13644 * C49065 + C19700 * C36954) *
               C49022) *
              C887 -
          (((C19710 + C19711) * C36954 + C19705 * C49065 + C13654 * C49058) *
               C49022 +
           ((C20259 + C20260) * C36954 + (C14215 + C14216) * C49065 +
            (C13103 + C13102) * C49058) *
               C22563) *
              C888 +
          ((C20246 * C49058 + C21353 * C49065 + (C21365 + C21364) * C36954) *
               C22563 +
           (C19700 * C49058 + (C19711 + C19710) * C49065 +
            (C11379 * C11261 + C20253 + C20253 + C49167 * C11265 +
             C11381 * C18024 + C20254 + C20254 + C48867 * C18026) *
                C36954) *
               C49022) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 +
            (C8705 + C8704 + C8703) * C49062) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C7844 * C642 + C8246 + C8246 + C49211 * C652 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7840 * C640 + C8244 + C8244 +
             C49251 * C650) *
                C49062 +
            (C8082 + C8081 + C8080) * C31480) *
               C49022 +
           ((C15798 + C15797 + C15796) * C49062 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C31480) *
               C22563) *
              C48945 * C48928 * C111 +
          (((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
             C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
             C49211 * C141) *
                C31480 +
            (C7840 * C359 + C15435 + C15435 + C49251 * C371 + C7842 * C358 +
             C15436 + C15436 + C49238 * C370 + C7844 * C357 + C15437 + C15437 +
             C49211 * C369) *
                C49062) *
               C22563 +
           ((C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
             C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
             C49211 * C257) *
                C31480 +
            (C7840 * C641 + C39841 + C39841 + C49251 * C651 + C7842 * C642 +
             C39842 + C39842 + C49238 * C652 + C7844 * C643 + C39843 + C39843 +
             C49211 * C653) *
                C49062) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C9324 * C31480 + C9697 * C49062) * C49257 +
           (C9325 * C31480 + C9696 * C49062) * C49247 +
           (C9326 * C31480 + C9695 * C49062) * C49197) *
              C48945 * C48928 * C110 -
          ((C14461 * C49062 + C9330 * C31480) * C49197 +
           (C10242 * C49062 + C9329 * C31480) * C49247 +
           (C10240 * C49062 + C9328 * C31480) * C49257 +
           (C10426 * C49062 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
               C49261) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C31480 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49062) *
               C49261 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C31480 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49062) *
               C49257 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C31480 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49062) *
               C49247 +
           ((C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C31480 +
            (C9184 * C1893 + C14315 + C14315 + C48857 * C1899) * C49062) *
               C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C48945 * C241 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            ((C8703 + C8704 + C8705) * C49062 +
             (C8076 + C8075 + C8074) * C31480) *
                C22563) *
               C48945 * C49217) *
              C243 +
          ((((C8080 + C8081 + C8082) * C31480 +
             (C40050 + C40051 + C40052) * C49062) *
                C22563 +
            ((C8083 + C8084 + C8085) * C31480 +
             (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
              C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C48945 * C241 -
           ((C9694 * C49062 + C9327 * C31480) * C49197 +
            (C41552 + C41551) * C49247 + (C41550 + C41549) * C49257 +
            (C41548 + C41547) * C49261) *
               C48945 * C49217) *
              C243 +
          (((C41553 + C41554) * C49261 + (C41555 + C41556) * C49257 +
            (C41557 + C41558) * C49247 +
            (C9331 * C31480 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C355 -
           (((C16221 + C16220 + C16219) * C49062 +
             (C8703 + C8704 + C8705) * C31480) *
                C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C48928 * C243 +
          ((((C15796 + C15797 + C15798) * C31480 +
             (C15799 + C15800 + C15801) * C49062) *
                C22563 +
            ((C40050 + C40051 + C40052) * C31480 +
             (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
              C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
              C15589 + C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C355 -
           ((C10692 * C49062 + C9695 * C31480) * C49197 +
            (C10239 * C49062 + C9696 * C31480) * C49247 +
            (C10238 * C49062 + C9697 * C31480) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C31480 + C10427 * C49062) * C49261 +
            (C10240 * C31480 + C10241 * C49062) * C49257 +
            (C10242 * C31480 + C10243 * C49062) * C49247 +
            (C14461 * C31480 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 +
             (C8705 + C8704 + C8703) * C49062) *
                C49022) *
               C48945 * C467 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            ((C8703 + C8704 + C8705) * C49062 +
             (C8076 + C8075 + C8074) * C31480) *
                C22563) *
               C48945 * C49217) *
              C469 +
          ((((C8080 + C8081 + C8082) * C31480 +
             (C40050 + C40051 + C40052) * C49062) *
                C22563 +
            ((C8083 + C8084 + C8085) * C31480 +
             (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
              C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + (C41549 + C41550) * C49247 +
            (C41551 + C41552) * C49197) *
               C48945 * C467 -
           ((C9694 * C49062 + C9327 * C31480) * C49197 +
            (C41552 + C41551) * C49247 + (C41550 + C41549) * C49257 +
            (C41548 + C41547) * C49261) *
               C48945 * C49217) *
              C469 +
          (((C41553 + C41554) * C49261 + (C41555 + C41556) * C49257 +
            (C41557 + C41558) * C49247 +
            (C9331 * C31480 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 +
            (C8705 + C8704 + C8703) * C49062) *
               C49022) *
              C48945 * C533 -
          (((C8700 + C8701 + C8702) * C49062 +
            (C8079 + C8078 + C8077) * C31480) *
               C49022 +
           ((C8703 + C8704 + C8705) * C49062 +
            (C8076 + C8075 + C8074) * C31480) *
               C22563) *
              C48945 * C534 +
          ((C8516 * C31480 + (C8702 + C8701 + C8700) * C49062) * C22563 +
           ((C8526 + C8525 + C8524) * C31480 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
              C48945 * C533 -
          ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
           (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
              C48945 * C534 +
          (C41917 * C49261 + C41918 * C49257 + (C41920 + C41919) * C49247 +
           (C9590 * C31480 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C49062) *
               C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C355 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C467 +
          (((C40783 * C31480 + (C16219 + C16220 + C16221) * C49062) * C22563 +
            ((C8702 + C8701 + C8700) * C31480 +
             (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
              C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            (C40784 * C49062 + (C8076 + C8075 + C8074) * C31480) * C22563) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C355 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C467 +
          (((C42056 + C42055) * C49261 + (C42054 + C42053) * C49257 +
            (C42052 + C42051) * C49247 +
            (C9694 * C31480 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
            (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C741 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C48928 * C469 +
          ((((C15796 + C15797 + C15798) * C31480 +
             (C15799 + C15800 + C15801) * C49062) *
                C22563 +
            ((C40050 + C40051 + C40052) * C31480 +
             (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
              C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
              C15589 + C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C40052 + C40051 + C40050) * C49062 +
             (C8082 + C8081 + C8080) * C31480) *
                C49022 +
            ((C15798 + C15797 + C15796) * C49062 +
             (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
              C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
              C49251 * C138) *
                 C31480) *
                C22563) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C741 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C31480 + C10427 * C49062) * C49261 +
            (C10240 * C31480 + C10241 * C49062) * C49257 +
            (C10242 * C31480 + C10243 * C49062) * C49247 +
            (C14461 * C31480 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C41558 + C41557) * C49197 + (C41556 + C41555) * C49247 +
            (C41554 + C41553) * C49257 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C31480) *
                C49261) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
              C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
              C49211 * C139) *
                 C31480 +
             (C15790 + C15791 + C15792) * C49062) *
                C22563 +
            ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
               C741 -
           (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
            ((C15795 + C15794 + C15793) * C49062 +
             (C15792 + C15791 + C15790) * C31480) *
                C22563) *
               C49219) *
              C241 +
          (((C40783 * C31480 + (C16219 + C16220 + C16221) * C49062) * C22563 +
            ((C8702 + C8701 + C8700) * C31480 +
             (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
              C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C8700 + C8701 + C8702) * C49062 +
             (C8079 + C8078 + C8077) * C31480) *
                C49022 +
            (C40784 * C49062 + (C8076 + C8075 + C8074) * C31480) * C22563) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
             C10424 * C49062) *
                C49261 +
            (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
               C741 -
           ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
            (C42055 + C42056) * C49257 +
            (C10425 * C49062 + C10424 * C31480) * C49261) *
               C49219) *
              C241 +
          (((C42056 + C42055) * C49261 + (C42054 + C42053) * C49257 +
            (C42052 + C42051) * C49247 +
            (C9694 * C31480 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C41919 + C41920) * C49197 + (C41552 + C41551) * C49247 +
            (C41550 + C41549) * C49257 + (C41548 + C41547) * C49261) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C31480 +
            (C15790 + C15791 + C15792) * C49062) *
               C22563 +
           ((C8074 + C8075 + C8076) * C31480 + C40783 * C49062) * C49022) *
              C887 -
          (((C16221 + C16220 + C16219) * C49062 + C40784 * C31480) * C49022 +
           ((C15795 + C15794 + C15793) * C49062 +
            (C15792 + C15791 + C15790) * C31480) *
               C22563) *
              C888 +
          ((C16634 * C31480 + (C16643 + C16642 + C16641) * C49062) * C22563 +
           ((C16219 + C16220 + C16221) * C31480 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C31480 +
            C10424 * C49062) *
               C49261 +
           (C41547 + C41548) * C49257 + C41917 * C49247 + C41918 * C49197) *
              C887 -
          ((C42051 + C42052) * C49197 + (C42053 + C42054) * C49247 +
           (C42055 + C42056) * C49257 +
           (C10425 * C49062 + C10424 * C31480) * C49261) *
              C888 +
          ((C10425 * C31480 + C11275 * C49062) * C49261 +
           (C10238 * C31480 + C10857 * C49062) * C49257 +
           (C10239 * C31480 + C10856 * C49062) * C49247 +
           (C10692 * C31480 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49062) *
               C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11379 * C249 + C11386 + C11386 + C49167 * C261 + C11381 * C248 +
            C11387 + C11387 + C48867 * C260) *
               C48975 * C11376 +
           (C11379 * C537 + C11388 + C11388 + C49167 * C547 + C11381 * C538 +
            C11389 + C11389 + C48867 * C548) *
               C48975 * C11377 +
           (C11379 * C1207 + C11390 + C11390 + C49167 * C1215 + C11381 * C1206 +
            C11391 + C11391 + C48867 * C1214) *
               C48975 * C49197) *
              C48945 * C48928 * C110 -
          ((C11381 * C1205 + C11392 + C11392 + C48867 * C1213 + C11379 * C1206 +
            C11393 + C11393 + C49167 * C1214) *
               C48975 * C49197 +
           (C11381 * C539 + C11394 + C11394 + C48867 * C549 + C11379 * C538 +
            C11395 + C11395 + C49167 * C548) *
               C48975 * C11377 +
           (C11381 * C247 + C11396 + C11396 + C48867 * C259 + C11379 * C248 +
            C11397 + C11397 + C49167 * C260) *
               C48975 * C11376 +
           (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
            C11399 + C11399 + C49167 * C138) *
               C48975 * C11375) *
              C48945 * C48928 * C111 +
          ((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
            C11401 + C11401 + C48867 * C140) *
               C48975 * C11375 +
           (C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
            C11403 + C11403 + C48867 * C258) *
               C48975 * C11376 +
           (C11379 * C539 + C11404 + C11404 + C49167 * C549 + C11381 * C540 +
            C11405 + C11405 + C48867 * C550) *
               C48975 * C11377 +
           (C11379 * C1205 + C11406 + C11406 + C49167 * C1213 + C11381 * C1208 +
            C11407 + C11407 + C48867 * C1216) *
               C48975 * C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C3824 * C249 + C3837 + C3837 + C3818 * C261 + C3826 * C248 + C3838 +
            C3838 + C3819 * C260 + C3828 * C247 + C3839 + C3839 + C3820 * C259 +
            C3830 * C246 + C3840 + C3840 + C49188 * C258) *
               C48975 * C49022) *
              C48945 * C48928 * C110 -
          ((C3830 * C245 + C3841 + C3841 + C49188 * C257 + C3828 * C246 +
            C3842 + C3842 + C3820 * C258 + C3826 * C247 + C3843 + C3843 +
            C3819 * C259 + C3824 * C248 + C3844 + C3844 + C3818 * C260) *
               C48975 * C49022 +
           (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
            C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
            C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
               C48975 * C49189) *
              C48945 * C48928 * C111 +
          ((C3824 * C125 + C3849 + C3849 + C3818 * C139 + C3826 * C126 + C3850 +
            C3850 + C3819 * C140 + C3828 * C127 + C3851 + C3851 + C3820 * C141 +
            C3830 * C128 + C3852 + C3852 + C49188 * C142) *
               C48975 * C49189 +
           (C3824 * C247 + C3853 + C3853 + C3818 * C259 + C3826 * C246 + C3854 +
            C3854 + C3819 * C258 + C3828 * C245 + C3855 + C3855 + C3820 * C257 +
            C3830 * C250 + C3856 + C3856 + C49188 * C262) *
               C48975 * C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C15428 +
            (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
               C49189 +
           ((C11590 + C11591) * C15428 + C13644 * C15429 +
            (C13666 + C13665) * C49225) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C11381 * C2337 + C13091 + C13091 + C48867 * C2349 +
             C11379 * C2336 + C13090 + C13090 + C49167 * C2348) *
                C49225 +
            (C12883 + C12882) * C15429 + (C11597 + C11596) * C15428) *
               C49022 +
           ((C11381 * C892 + C13089 + C13089 + C48867 * C902 + C11379 * C891 +
             C13088 + C13088 + C49167 * C901) *
                C49225 +
            (C13105 + C13104) * C15429 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C15428) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
             C11401 + C11401 + C48867 * C140) *
                C15428 +
            (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
             C12667 + C12667 + C48867 * C370) *
                C15429 +
            (C11379 * C892 + C18750 + C18750 + C49167 * C902 + C11381 * C893 +
             C18751 + C18751 + C48867 * C903) *
                C49225) *
               C49189 +
           ((C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
             C11403 + C11403 + C48867 * C258) *
                C15428 +
            (C11379 * C641 + C12668 + C12668 + C49167 * C651 + C11381 * C642 +
             C12669 + C12669 + C48867 * C652) *
                C15429 +
            (C11379 * C2337 + C18752 + C18752 + C49167 * C2349 +
             C11381 * C2630 + C18753 + C18753 + C48867 * C2632) *
                C49225) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C48945 * C241 -
           ((C11381 * C1716 + C11550 + C11550 + C48867 * C1722 +
             C11379 * C1715 + C11551 + C11551 + C49167 * C1721) *
                C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C48945 * C49217) *
              C243 +
          (((C11596 + C11597) * C48975 * C11375 +
            (C11598 + C11599) * C48975 * C11376 +
            (C11600 + C11601) * C48975 * C11377 +
            (C11379 * C1716 + C11564 + C11564 + C49167 * C1722 +
             C11381 * C1717 + C11565 + C11565 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C48945 * C241 -
           ((C3830 * C540 + C3995 + C3995 + C49188 * C550 + C3828 * C539 +
             C3996 + C3996 + C3820 * C549 + C3826 * C538 + C3997 + C3997 +
             C3819 * C548 + C3824 * C537 + C3998 + C3998 + C3818 * C547) *
                C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C48945 * C49217) *
              C243 +
          (((C4031 + C4032 + C4033 + C4034) * C48975 * C49189 +
            (C3824 * C538 + C4007 + C4007 + C3818 * C548 + C3826 * C539 +
             C4008 + C4008 + C3819 * C549 + C3828 * C540 + C4009 + C4009 +
             C3820 * C550 + C3830 * C541 + C4010 + C4010 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 +
             (C13666 + C13665) * C49225) *
                C49022) *
               C48945 * C241 -
           (((C13663 + C13664) * C49225 + C13649 * C15429 +
             (C11593 + C11592) * C15428) *
                C49022 +
            ((C13665 + C13666) * C49225 + C13654 * C15429 +
             (C11591 + C11590) * C15428) *
                C49189) *
               C48945 * C49217) *
              C243 +
          ((((C11596 + C11597) * C15428 + (C12882 + C12883) * C15429 +
             (C18956 + C18957) * C49225) *
                C49189 +
            ((C11598 + C11599) * C15428 + (C12884 + C12885) * C15429 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49225) *
                C49022) *
               C48945 * C49217 -
           (((C18957 + C18956) * C49225 + (C12883 + C12882) * C15429 +
             (C11597 + C11596) * C15428) *
                C49022 +
            ((C11381 * C892 + C13089 + C13089 + C48867 * C902 + C11379 * C891 +
              C13088 + C13088 + C49167 * C901) *
                 C49225 +
             (C13105 + C13104) * C15429 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C15428) *
                C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C355 -
           ((C11381 * C1892 + C11732 + C11732 + C48867 * C1898 +
             C11379 * C1891 + C11733 + C11733 + C49167 * C1897) *
                C48975 * C49197 +
            (C11381 * C1430 + C11734 + C11734 + C48867 * C1438 +
             C11379 * C1431 + C11735 + C11735 + C49167 * C1439) *
                C48975 * C11377 +
            (C11381 * C640 + C11736 + C11736 + C48867 * C650 + C11379 * C639 +
             C11737 + C11737 + C49167 * C649) *
                C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C48928 * C243 +
          (((C11379 * C360 + C11740 + C11740 + C49167 * C372 + C11381 * C359 +
             C11741 + C11741 + C48867 * C371) *
                C48975 * C11375 +
            (C11379 * C640 + C11742 + C11742 + C49167 * C650 + C11381 * C641 +
             C11743 + C11743 + C48867 * C651) *
                C48975 * C11376 +
            (C11379 * C1430 + C11744 + C11744 + C49167 * C1438 +
             C11381 * C1429 + C11745 + C11745 + C48867 * C1437) *
                C48975 * C11377 +
            (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
             C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C355 -
           ((C3830 * C642 + C4165 + C4165 + C49188 * C652 + C3828 * C641 +
             C4166 + C4166 + C3820 * C651 + C3826 * C640 + C4167 + C4167 +
             C3819 * C650 + C3824 * C639 + C4168 + C4168 + C3818 * C649) *
                C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C48928 * C243 +
          (((C3824 * C360 + C4173 + C4173 + C3818 * C372 + C3826 * C359 +
             C4174 + C4174 + C3819 * C371 + C3828 * C358 + C4175 + C4175 +
             C3820 * C370 + C3830 * C357 + C4176 + C4176 + C49188 * C369) *
                C48975 * C49189 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 +
             (C13666 + C13665) * C49225) *
                C49022) *
               C355 -
           (((C11381 * C3263 + C14208 + C14208 + C48867 * C3269 +
              C11379 * C3262 + C14207 + C14207 + C49167 * C3268) *
                 C49225 +
             (C13665 + C13666) * C15429 + C13654 * C15428) *
                C49022 +
            ((C11381 * C2783 + C14206 + C14206 + C48867 * C2791 +
              C11379 * C2784 + C14205 + C14205 + C49167 * C2792) *
                 C49225 +
             (C14215 + C14216) * C15429 + (C13103 + C13102) * C15428) *
                C49189) *
               C49219) *
              C48928 * C243 +
          ((((C13104 + C13105) * C15428 + (C19164 + C19165) * C15429 +
             (C11379 * C2783 + C19156 + C19156 + C49167 * C2791 +
              C11381 * C2782 + C19157 + C19157 + C48867 * C2790) *
                 C49225) *
                C49189 +
            ((C12882 + C12883) * C15428 + (C18956 + C18957) * C15429 +
             (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
              C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                 C49225) *
                C49022) *
               C49219 -
           (((C18957 + C18956) * C49225 + (C12883 + C12882) * C15429 +
             (C11597 + C11596) * C15428) *
                C49022 +
            ((C19165 + C19164) * C49225 + (C13105 + C13104) * C15429 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C15428) *
                C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C48945 * C467 -
           ((C11381 * C1716 + C11550 + C11550 + C48867 * C1722 +
             C11379 * C1715 + C11551 + C11551 + C49167 * C1721) *
                C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C48945 * C49217) *
              C469 +
          (((C11596 + C11597) * C48975 * C11375 +
            (C11598 + C11599) * C48975 * C11376 +
            (C11600 + C11601) * C48975 * C11377 +
            (C11379 * C1716 + C11564 + C11564 + C49167 * C1722 +
             C11381 * C1717 + C11565 + C11565 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C48945 * C467 -
           ((C3830 * C540 + C3995 + C3995 + C49188 * C550 + C3828 * C539 +
             C3996 + C3996 + C3820 * C549 + C3826 * C538 + C3997 + C3997 +
             C3819 * C548 + C3824 * C537 + C3998 + C3998 + C3818 * C547) *
                C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C48945 * C49217) *
              C469 +
          (((C4031 + C4032 + C4033 + C4034) * C48975 * C49189 +
            (C3824 * C538 + C4007 + C4007 + C3818 * C548 + C3826 * C539 +
             C4008 + C4008 + C3819 * C549 + C3828 * C540 + C4009 + C4009 +
             C3820 * C550 + C3830 * C541 + C4010 + C4010 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 +
             (C13666 + C13665) * C49225) *
                C49022) *
               C48945 * C467 -
           (((C13663 + C13664) * C49225 + C13649 * C15429 +
             (C11593 + C11592) * C15428) *
                C49022 +
            ((C13665 + C13666) * C49225 + C13654 * C15429 +
             (C11591 + C11590) * C15428) *
                C49189) *
               C48945 * C49217) *
              C469 +
          ((((C11596 + C11597) * C15428 + (C12882 + C12883) * C15429 +
             (C18956 + C18957) * C49225) *
                C49189 +
            ((C11598 + C11599) * C15428 + (C12884 + C12885) * C15429 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49225) *
                C49022) *
               C48945 * C49217 -
           (((C18957 + C18956) * C49225 + (C12883 + C12882) * C15429 +
             (C11597 + C11596) * C15428) *
                C49022 +
            ((C19165 + C19164) * C49225 + (C13105 + C13104) * C15429 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C15428) *
                C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
           C11985 * C49197) *
              C48945 * C533 -
          ((C11990 + C11991) * C48975 * C49197 +
           (C11595 + C11594) * C48975 * C11377 +
           (C11593 + C11592) * C48975 * C11376 +
           (C11591 + C11590) * C48975 * C11375) *
              C48945 * C534 +
          (C11984 * C11375 + C11985 * C11376 +
           (C11991 + C11990) * C48975 * C11377 +
           (C11379 * C9283 + C11982 + C11982 + C49167 * C9287 + C11381 * C9284 +
            C11983 + C11983 + C48867 * C9288) *
               C48975 * C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
              C48945 * C533 -
          ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
           (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
              C48945 * C534 +
          ((C4432 + C4431 + C4430 + C4429) * C48975 * C49189 +
           (C3824 * C1207 + C4417 + C4417 + C3818 * C1215 + C3826 * C1206 +
            C4418 + C4418 + C3819 * C1214 + C3828 * C1205 + C4419 + C4419 +
            C3820 * C1213 + C3830 * C1208 + C4420 + C4420 + C49188 * C1216) *
               C48975 * C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C15428 +
            (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
               C49189 +
           ((C11590 + C11591) * C15428 + C13644 * C15429 +
            (C13666 + C13665) * C49225) *
               C49022) *
              C48945 * C533 -
          (((C13663 + C13664) * C49225 + C13649 * C15429 +
            (C11593 + C11592) * C15428) *
               C49022 +
           ((C13665 + C13666) * C49225 + C13654 * C15429 +
            (C11591 + C11590) * C15428) *
               C49189) *
              C48945 * C534 +
          ((C11976 * C15428 + C13447 * C15429 + (C13664 + C13663) * C49225) *
               C49189 +
           (C11977 * C15428 + (C12149 + C12148) * C15429 +
            (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
             C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                C49225) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C355 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C467 +
          (((C12153 + C12152) * C48975 * C11375 +
            (C12151 + C12150) * C48975 * C11376 +
            (C12149 + C12148) * C48975 * C11377 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C11990 + C11991) * C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C355 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C467 +
          (((C4586 + C4585 + C4584 + C4583) * C48975 * C49189 +
            (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
             C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
             C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 + C19700 * C49225) *
                C49022) *
               C355 -
           (((C19710 + C19711) * C49225 + C19705 * C15429 + C13654 * C15428) *
                C49022 +
            ((C11381 * C2783 + C14206 + C14206 + C48867 * C2791 +
              C11379 * C2784 + C14205 + C14205 + C49167 * C2792) *
                 C49225 +
             (C14215 + C14216) * C15429 + (C13103 + C13102) * C15428) *
                C49189) *
               C49219) *
              C467 +
          (((C13644 * C15428 + C19700 * C15429 + (C19711 + C19710) * C49225) *
                C49189 +
            (C13447 * C15428 + (C13664 + C13663) * C15429 +
             (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
              C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                 C49225) *
                C49022) *
               C49219 -
           (((C13663 + C13664) * C49225 + C13649 * C15429 +
             (C11593 + C11592) * C15428) *
                C49022 +
            (C19705 * C49225 + C13654 * C15429 + (C11591 + C11590) * C15428) *
                C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C741 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C48928 * C469 +
          (((C11379 * C360 + C11740 + C11740 + C49167 * C372 + C11381 * C359 +
             C11741 + C11741 + C48867 * C371) *
                C48975 * C11375 +
            (C11379 * C640 + C11742 + C11742 + C49167 * C650 + C11381 * C641 +
             C11743 + C11743 + C48867 * C651) *
                C48975 * C11376 +
            (C11379 * C1430 + C11744 + C11744 + C49167 * C1438 +
             C11381 * C1429 + C11745 + C11745 + C48867 * C1437) *
                C48975 * C11377 +
            (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
             C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C741 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C48928 * C469 +
          (((C3824 * C360 + C4173 + C4173 + C3818 * C372 + C3826 * C359 +
             C4174 + C4174 + C3819 * C371 + C3828 * C358 + C4175 + C4175 +
             C3820 * C370 + C3830 * C357 + C4176 + C4176 + C49188 * C369) *
                C48975 * C49189 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 + C19700 * C49225) *
                C49022) *
               C741 -
           (((C19710 + C19711) * C49225 + C19705 * C15429 + C13654 * C15428) *
                C49022 +
            ((C11381 * C2783 + C14206 + C14206 + C48867 * C2791 +
              C11379 * C2784 + C14205 + C14205 + C49167 * C2792) *
                 C49225 +
             (C14215 + C14216) * C15429 + (C13103 + C13102) * C15428) *
                C49189) *
               C49219) *
              C48928 * C469 +
          ((((C13104 + C13105) * C15428 + (C19164 + C19165) * C15429 +
             (C11379 * C2783 + C19156 + C19156 + C49167 * C2791 +
              C11381 * C2782 + C19157 + C19157 + C48867 * C2790) *
                 C49225) *
                C49189 +
            ((C12882 + C12883) * C15428 + (C18956 + C18957) * C15429 +
             (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
              C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                 C49225) *
                C49022) *
               C49219 -
           (((C18957 + C18956) * C49225 + (C12883 + C12882) * C15429 +
             (C11597 + C11596) * C15428) *
                C49022 +
            ((C19165 + C19164) * C49225 + (C13105 + C13104) * C15429 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C15428) *
                C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C741 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C241 +
          (((C12153 + C12152) * C48975 * C11375 +
            (C12151 + C12150) * C48975 * C11376 +
            (C12149 + C12148) * C48975 * C11377 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C11990 + C11991) * C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C741 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C241 +
          (((C4586 + C4585 + C4584 + C4583) * C48975 * C49189 +
            (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
             C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
             C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C15428 +
             (C13102 + C13103) * C15429 + (C14216 + C14215) * C49225) *
                C49189 +
            ((C11590 + C11591) * C15428 + C13644 * C15429 + C19700 * C49225) *
                C49022) *
               C741 -
           (((C19710 + C19711) * C49225 + C19705 * C15429 + C13654 * C15428) *
                C49022 +
            ((C11381 * C2783 + C14206 + C14206 + C48867 * C2791 +
              C11379 * C2784 + C14205 + C14205 + C49167 * C2792) *
                 C49225 +
             (C14215 + C14216) * C15429 + (C13103 + C13102) * C15428) *
                C49189) *
               C49219) *
              C241 +
          (((C13644 * C15428 + C19700 * C15429 + (C19711 + C19710) * C49225) *
                C49189 +
            (C13447 * C15428 + (C13664 + C13663) * C15429 +
             (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
              C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                 C49225) *
                C49022) *
               C49219 -
           (((C13663 + C13664) * C49225 + C13649 * C15429 +
             (C11593 + C11592) * C15428) *
                C49022 +
            (C19705 * C49225 + C13654 * C15429 + (C11591 + C11590) * C15428) *
                C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
           C11985 * C49197) *
              C887 -
          ((C12148 + C12149) * C48975 * C49197 +
           (C12150 + C12151) * C48975 * C11377 +
           (C12152 + C12153) * C48975 * C11376 +
           (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
            C11739 + C11739 + C49167 * C373) *
               C48975 * C11375) *
              C888 +
          ((C11379 * C890 + C12512 + C12512 + C49167 * C900 + C11381 * C891 +
            C12513 + C12513 + C48867 * C901) *
               C48975 * C11375 +
           (C11379 * C2335 + C12514 + C12514 + C49167 * C2347 + C11381 * C2336 +
            C12515 + C12515 + C48867 * C2348) *
               C48975 * C11376 +
           (C11379 * C2338 + C12516 + C12516 + C49167 * C2350 + C11381 * C2339 +
            C12517 + C12517 + C48867 * C2351) *
               C48975 * C11377 +
           (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
            C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
               C48975 * C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
              C887 -
          ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
           (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
            C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
            C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
               C48975 * C49189) *
              C888 +
          ((C3824 * C890 + C4945 + C4945 + C3818 * C900 + C3826 * C891 + C4946 +
            C4946 + C3819 * C901 + C3828 * C892 + C4947 + C4947 + C3820 * C902 +
            C3830 * C893 + C4948 + C4948 + C49188 * C903) *
               C48975 * C49189 +
           (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
            C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
            C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
               C48975 * C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C15428 +
            (C13102 + C13103) * C15429 + C20246 * C49225) *
               C49189 +
           ((C11590 + C11591) * C15428 + C13644 * C15429 + C19700 * C49225) *
               C49022) *
              C887 -
          (((C19710 + C19711) * C49225 + C19705 * C15429 + C13654 * C15428) *
               C49022 +
           ((C20259 + C20260) * C49225 + (C14215 + C14216) * C15429 +
            (C13103 + C13102) * C15428) *
               C49189) *
              C888 +
          ((C20246 * C15428 + (C20260 + C20259) * C15429 +
            (C11379 * C3691 + C20251 + C20251 + C49167 * C3697 +
             C11381 * C3692 + C20252 + C20252 + C48867 * C3698) *
                C49225) *
               C49189 +
           (C19700 * C15428 + (C19711 + C19710) * C15429 +
            (C11379 * C11261 + C20253 + C20253 + C49167 * C11265 +
             C11381 * C18024 + C20254 + C20254 + C48867 * C18026) *
                C49225) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C9324 * C49190 + C9697 * C49062) * C11376 +
           (C9325 * C49190 + C9696 * C49062) * C11377 +
           (C9326 * C49190 + C9695 * C49062) * C49197) *
              C48945 * C48928 * C110 -
          (((C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49062 +
            C9330 * C49190) *
               C49197 +
           (C10242 * C49062 + C9329 * C49190) * C11377 +
           (C10240 * C49062 + C9328 * C49190) * C11376 +
           (C10426 * C49062 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
               C11375) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49190 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49062) *
               C11375 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49190 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49062) *
               C11376 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C49190 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49062) *
               C11377 +
           ((C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C49190 +
            (C9184 * C1893 + C14315 + C14315 + C48857 * C1899) * C49062) *
               C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 +
            (C1933 + C1932 + C1931) * C49062) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C1030 * C642 + C1456 + C1456 + C49211 * C652 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1026 * C640 + C1454 + C1454 +
             C1020 * C650) *
                C49062 +
            (C1280 + C1279 + C1278) * C49190) *
               C49022 +
           ((C2857 + C2856 + C2855) * C49062 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49190) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 +
             C1052 + C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
             C49211 * C141) *
                C49190 +
            (C1026 * C359 + C2479 + C2479 + C1020 * C371 + C1028 * C358 +
             C2480 + C2480 + C1021 * C370 + C1030 * C357 + C2481 + C2481 +
             C49211 * C369) *
                C49062) *
               C49189 +
           ((C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 +
             C1055 + C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
             C49211 * C257) *
                C49190 +
            (C1026 * C641 + C6247 + C6247 + C1020 * C651 + C1028 * C642 +
             C6248 + C6248 + C1021 * C652 + C1030 * C643 + C6249 + C6249 +
             C49211 * C653) *
                C49062) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
            C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
               C49189 +
           (C9324 * C20358 + C9697 * C20359 + C10238 * C20360 +
            C10857 * C49204) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49204 +
            C10241 * C20360 + C10240 * C20359 + C9328 * C20358) *
               C49022 +
           (C18132 * C49204 + C10427 * C20360 + C10426 * C20359 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C20358) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C20358 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C20359 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C20360 +
            (C9184 * C2782 + C17941 + C17941 + C48857 * C2790) * C49204) *
               C49189 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C20358 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C20359 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C20360 +
            (C9184 * C3264 + C21464 + C21464 + C48857 * C3270) * C49204) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C48945 * C241 -
           ((C9694 * C49062 + C9327 * C49190) * C49197 +
            (C14451 + C14450) * C11377 + (C14449 + C14448) * C11376 +
            (C14447 + C14446) * C11375) *
               C48945 * C49217) *
              C243 +
          (((C14452 + C14453) * C11375 + (C14454 + C14455) * C11376 +
            (C14456 + C14462) * C11377 +
            (C9331 * C49190 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C48945 * C241 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            ((C1931 + C1932 + C1933) * C49062 +
             (C1274 + C1273 + C1272) * C49190) *
                C49189) *
               C48945 * C49217) *
              C243 +
          ((((C1278 + C1279 + C1280) * C49190 +
             (C6456 + C6457 + C6458) * C49062) *
                C49189 +
            ((C1281 + C1282 + C1283) * C49190 +
             (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
              C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C48945 * C241 -
           ((C10856 * C49204 + C10239 * C20360 + C9696 * C20359 +
             C9325 * C20358) *
                C49022 +
            (C21598 + C21597 + C21596 + C21595) * C49189) *
               C48945 * C49217) *
              C243 +
          (((C21599 + C21600 + C21601 + C21607) * C49189 +
            (C9329 * C20358 + C10242 * C20359 + C10243 * C20360 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49204) *
                C49022) *
               C48945 * C49217 -
           ((C21607 + C21601 + C21600 + C21599) * C49022 +
            (C18132 * C49204 + C10427 * C20360 + C10426 * C20359 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C20358) *
                C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C355 -
           ((C10692 * C49062 + C9695 * C49190) * C49197 +
            (C10239 * C49062 + C9696 * C49190) * C11377 +
            (C10238 * C49062 + C9697 * C49190) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49190 + C10427 * C49062) * C11375 +
            (C10240 * C49190 + C10241 * C49062) * C11376 +
            (C10242 * C49190 + C10243 * C49062) * C11377 +
            (C14461 * C49190 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C355 -
           (((C3289 + C3288 + C3287) * C49062 +
             (C1931 + C1932 + C1933) * C49190) *
                C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C48928 * C243 +
          ((((C2855 + C2856 + C2857) * C49190 +
             (C2858 + C2859 + C2860) * C49062) *
                C49189 +
            ((C6456 + C6457 + C6458) * C49190 +
             (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
              C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
              C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C355 -
           ((C18368 * C49204 + C10857 * C20360 + C10238 * C20359 +
             C9697 * C20358) *
                C49022 +
            (C18131 * C49204 + C11275 * C20360 + C10425 * C20359 +
             C10424 * C20358) *
                C49189) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C20358 + C10427 * C20359 + C18132 * C20360 +
             C18133 * C49204) *
                C49189 +
            (C10240 * C20358 + C10241 * C20359 + C21606 * C20360 +
             (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C49204) *
                C49022) *
               C49219 -
           ((C21607 + C21601 + C21600 + C21599) * C49022 +
            (C18132 * C49204 + C10427 * C20360 + C10426 * C20359 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C20358) *
                C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C48945 * C467 -
           ((C9694 * C49062 + C9327 * C49190) * C49197 +
            (C14451 + C14450) * C11377 + (C14449 + C14448) * C11376 +
            (C14447 + C14446) * C11375) *
               C48945 * C49217) *
              C469 +
          (((C14452 + C14453) * C11375 + (C14454 + C14455) * C11376 +
            (C14456 + C14462) * C11377 +
            (C9331 * C49190 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C48945 * C467 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            ((C1931 + C1932 + C1933) * C49062 +
             (C1274 + C1273 + C1272) * C49190) *
                C49189) *
               C48945 * C49217) *
              C469 +
          ((((C1278 + C1279 + C1280) * C49190 +
             (C6456 + C6457 + C6458) * C49062) *
                C49189 +
            ((C1281 + C1282 + C1283) * C49190 +
             (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
              C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C48945 * C467 -
           ((C10856 * C49204 + C10239 * C20360 + C9696 * C20359 +
             C9325 * C20358) *
                C49022 +
            (C21598 + C21597 + C21596 + C21595) * C49189) *
               C48945 * C49217) *
              C469 +
          (((C21599 + C21600 + C21601 + C21607) * C49189 +
            (C9329 * C20358 + C10242 * C20359 + C10243 * C20360 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49204) *
                C49022) *
               C48945 * C49217 -
           ((C21607 + C21601 + C21600 + C21599) * C49022 +
            (C18132 * C49204 + C10427 * C20360 + C10426 * C20359 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C20358) *
                C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
              C48945 * C533 -
          ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
           (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
              C48945 * C534 +
          (C14821 * C11375 + C14822 * C11376 + (C14824 + C14823) * C11377 +
           (C9590 * C49190 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C49062) *
               C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 +
            (C1933 + C1932 + C1931) * C49062) *
               C49022) *
              C48945 * C533 -
          (((C1928 + C1929 + C1930) * C49062 +
            (C1277 + C1276 + C1275) * C49190) *
               C49022 +
           ((C1931 + C1932 + C1933) * C49062 +
            (C1274 + C1273 + C1272) * C49190) *
               C49189) *
              C48945 * C534 +
          ((C1735 * C49190 + (C1930 + C1929 + C1928) * C49062) * C49189 +
           ((C1745 + C1744 + C1743) * C49190 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
            C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
               C49189 +
           (C21595 + C21596 + C21597 + C21598) * C49022) *
              C48945 * C533 -
          ((C21966 + C21967 + C21968 + C21969) * C49022 +
           (C21598 + C21597 + C21596 + C21595) * C49189) *
              C48945 * C534 +
          ((C21969 + C21968 + C21967 + C21966) * C49189 +
           (C9326 * C20358 + C9695 * C20359 + C10692 * C20360 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49204) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C355 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C467 +
          (((C14960 + C14959) * C11375 + (C14958 + C14957) * C11376 +
            (C14956 + C14955) * C11377 +
            (C9694 * C49190 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
            (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C355 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C467 +
          (((C7189 * C49190 + (C3287 + C3288 + C3289) * C49062) * C49189 +
            ((C1930 + C1929 + C1928) * C49190 +
             (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
              C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            (C7190 * C49062 + (C1274 + C1273 + C1272) * C49190) * C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C355 -
           ((C22100 + C22101 + C22102 + C22103) * C49022 +
            (C18131 * C49204 + C11275 * C20360 + C10425 * C20359 +
             C10424 * C20358) *
                C49189) *
               C49219) *
              C467 +
          (((C22103 + C22102 + C22101 + C22100) * C49189 +
            (C9696 * C20358 + C10239 * C20359 + C10856 * C20360 +
             (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49204) *
                C49022) *
               C49219 -
           ((C21966 + C21967 + C21968 + C21969) * C49022 +
            (C21598 + C21597 + C21596 + C21595) * C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C741 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49190 + C10427 * C49062) * C11375 +
            (C10240 * C49190 + C10241 * C49062) * C11376 +
            (C10242 * C49190 + C10243 * C49062) * C11377 +
            (C14461 * C49190 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C741 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C48928 * C469 +
          ((((C2855 + C2856 + C2857) * C49190 +
             (C2858 + C2859 + C2860) * C49062) *
                C49189 +
            ((C6456 + C6457 + C6458) * C49190 +
             (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
              C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
              C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C741 -
           ((C22100 + C22101 + C22102 + C22103) * C49022 +
            (C18131 * C49204 + C11275 * C20360 + C10425 * C20359 +
             C10424 * C20358) *
                C49189) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C20358 + C10427 * C20359 + C18132 * C20360 +
             C18133 * C49204) *
                C49189 +
            (C10240 * C20358 + C10241 * C20359 + C21606 * C20360 +
             (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C49204) *
                C49022) *
               C49219 -
           ((C21607 + C21601 + C21600 + C21599) * C49022 +
            (C18132 * C49204 + C10427 * C20360 + C10426 * C20359 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C20358) *
                C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C741 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C241 +
          (((C14960 + C14959) * C11375 + (C14958 + C14957) * C11376 +
            (C14956 + C14955) * C11377 +
            (C9694 * C49190 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
            (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C741 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C241 +
          (((C7189 * C49190 + (C3287 + C3288 + C3289) * C49062) * C49189 +
            ((C1930 + C1929 + C1928) * C49190 +
             (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
              C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            (C7190 * C49062 + (C1274 + C1273 + C1272) * C49190) * C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
             C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
                C49189 +
            (C21595 + C21596 + C21597 + C21598) * C49022) *
               C741 -
           ((C22100 + C22101 + C22102 + C22103) * C49022 +
            (C18131 * C49204 + C11275 * C20360 + C10425 * C20359 +
             C10424 * C20358) *
                C49189) *
               C49219) *
              C241 +
          (((C22103 + C22102 + C22101 + C22100) * C49189 +
            (C9696 * C20358 + C10239 * C20359 + C10856 * C20360 +
             (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49204) *
                C49022) *
               C49219 -
           ((C21966 + C21967 + C21968 + C21969) * C49022 +
            (C21598 + C21597 + C21596 + C21595) * C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
              C887 -
          ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
           (C14959 + C14960) * C11376 +
           (C10425 * C49062 + C10424 * C49190) * C11375) *
              C888 +
          ((C10425 * C49190 + C11275 * C49062) * C11375 +
           (C10238 * C49190 + C10857 * C49062) * C11376 +
           (C10239 * C49190 + C10856 * C49062) * C11377 +
           (C10692 * C49190 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49062) *
               C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
              C887 -
          (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
           ((C2854 + C2853 + C2852) * C49062 +
            (C2851 + C2850 + C2849) * C49190) *
               C49189) *
              C888 +
          ((C3711 * C49190 + (C3720 + C3719 + C3718) * C49062) * C49189 +
           ((C3287 + C3288 + C3289) * C49190 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C20358 +
            C10424 * C20359 + C10425 * C20360 + C11275 * C49204) *
               C49189 +
           (C21595 + C21596 + C21597 + C21598) * C49022) *
              C887 -
          ((C22100 + C22101 + C22102 + C22103) * C49022 +
           (C18131 * C49204 + C11275 * C20360 + C10425 * C20359 +
            C10424 * C20358) *
               C49189) *
              C888 +
          ((C10425 * C20358 + C11275 * C20359 + C18131 * C20360 +
            C18603 * C49204) *
               C49189 +
           (C10238 * C20358 + C10857 * C20359 + C18368 * C20360 +
            (C9184 * C18359 + C18365 + C18365 + C48857 * C18361) * C49204) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
               C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
               C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
               C149 + C105 * C141) *
                  C48975 * C48963 * C48945 * C48928 * C110 -
              (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
               C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
               C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
               C154 + C101 * C138) *
                  C48975 * C48963 * C48945 * C48928 * C111 +
              (C113 * C125 + C155 + C155 + C101 * C139 + C115 * C126 + C156 +
               C156 + C102 * C140 + C117 * C127 + C157 + C157 + C103 * C141 +
               C119 * C128 + C158 + C158 + C104 * C142 + C121 * C129 + C159 +
               C159 + C105 * C143) *
                  C48975 * C48963 * C48945 * C48928 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                C49211 * C139) *
                   C48975 * C49254 +
               (C1026 * C249 + C1036 + C1036 + C1020 * C261 + C1028 * C248 +
                C1037 + C1037 + C1021 * C260 + C1030 * C247 + C1038 + C1038 +
                C49211 * C259) *
                   C48975 * C49242 +
               (C1026 * C537 + C1039 + C1039 + C1020 * C547 + C1028 * C538 +
                C1040 + C1040 + C1021 * C548 + C1030 * C539 + C1041 + C1041 +
                C49211 * C549) *
                   C48975 * C49222) *
                  C48945 * C48928 * C110 -
              ((C1030 * C540 + C1042 + C1042 + C49211 * C550 + C1028 * C539 +
                C1043 + C1043 + C1021 * C549 + C1026 * C538 + C1044 + C1044 +
                C1020 * C548) *
                   C48975 * C49222 +
               (C1030 * C246 + C1045 + C1045 + C49211 * C258 + C1028 * C247 +
                C1046 + C1046 + C1021 * C259 + C1026 * C248 + C1047 + C1047 +
                C1020 * C260) *
                   C48975 * C49242 +
               (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
                C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
                C1020 * C138) *
                   C48975 * C49254) *
                  C48945 * C48928 * C111 +
              ((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 +
                C1052 + C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
                C49211 * C141) *
                   C48975 * C49254 +
               (C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 +
                C1055 + C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
                C49211 * C257) *
                   C48975 * C49242 +
               (C1026 * C539 + C1057 + C1057 + C1020 * C549 + C1028 * C540 +
                C1058 + C1058 + C1021 * C550 + C1030 * C541 + C1059 + C1059 +
                C49211 * C551) *
                   C48975 * C49222) *
                  C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C1026 * C123 + C1033 + C1033 + C1020 * C137 +
                                C1028 * C124 + C1034 + C1034 + C1021 * C138 +
                                C1030 * C125 + C1035 + C1035 + C49211 * C139) *
                                   C49255 +
                               (C1026 * C361 + C1450 + C1450 + C1020 * C373 +
                                C1028 * C360 + C1449 + C1449 + C1021 * C372 +
                                C1030 * C359 + C1448 + C1448 + C49211 * C371) *
                                   C49244 +
                               (C1026 * C890 + C2354 + C2354 + C1020 * C900 +
                                C1028 * C891 + C2355 + C2355 + C1021 * C901 +
                                C1030 * C892 + C2356 + C2356 + C49211 * C902) *
                                   C49225) *
                                  C48963 * C48945 * C48928 * C110 -
                              ((C1030 * C893 + C2476 + C2476 + C49211 * C903 +
                                C1028 * C892 + C2477 + C2477 + C1021 * C902 +
                                C1026 * C891 + C2478 + C2478 + C1020 * C901) *
                                   C49225 +
                               (C1030 * C358 + C1453 + C1453 + C49211 * C370 +
                                C1028 * C359 + C1452 + C1452 + C1021 * C371 +
                                C1026 * C360 + C1451 + C1451 + C1020 * C372) *
                                   C49244 +
                               (C1030 * C126 + C1048 + C1048 + C49211 * C140 +
                                C1028 * C125 + C1049 + C1049 + C1021 * C139 +
                                C1026 * C124 + C1050 + C1050 + C1020 * C138) *
                                   C49255) *
                                  C48963 * C48945 * C48928 * C111 +
                              ((C1026 * C125 + C1051 + C1051 + C1020 * C139 +
                                C1028 * C126 + C1052 + C1052 + C1021 * C140 +
                                C1030 * C127 + C1053 + C1053 + C49211 * C141) *
                                   C49255 +
                               (C1026 * C359 + C2479 + C2479 + C1020 * C371 +
                                C1028 * C358 + C2480 + C2480 + C1021 * C370 +
                                C1030 * C357 + C2481 + C2481 + C49211 * C369) *
                                   C49244 +
                               (C1026 * C892 + C2482 + C2482 + C1020 * C902 +
                                C1028 * C893 + C2483 + C2483 + C1021 * C903 +
                                C1030 * C894 + C2484 + C2484 + C49211 * C904) *
                                   C49225) *
                                  C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C7840 * C249 + C7850 + C7850 + C49251 * C261 + C7842 * C248 +
            C7851 + C7851 + C49238 * C260 + C7844 * C247 + C7852 + C7852 +
            C49211 * C259) *
               C48975 * C7838 +
           (C7840 * C537 + C7853 + C7853 + C49251 * C547 + C7842 * C538 +
            C7854 + C7854 + C49238 * C548 + C7844 * C539 + C7855 + C7855 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C7844 * C540 + C7856 + C7856 + C49211 * C550 + C7842 * C539 +
            C7857 + C7857 + C49238 * C549 + C7840 * C538 + C7858 + C7858 +
            C49251 * C548) *
               C48975 * C49222 +
           (C7844 * C246 + C7859 + C7859 + C49211 * C258 + C7842 * C247 +
            C7860 + C7860 + C49238 * C259 + C7840 * C248 + C7861 + C7861 +
            C49251 * C260) *
               C48975 * C7838 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C48975 * C7837) *
              C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C48975 * C7837 +
           (C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
            C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
            C49211 * C257) *
               C48975 * C7838 +
           (C7840 * C539 + C7871 + C7871 + C49251 * C549 + C7842 * C540 +
            C7872 + C7872 + C49238 * C550 + C7844 * C541 + C7873 + C7873 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           (C9184 * C249 + C9188 + C9188 + C48857 * C261) * C48975 * C9180 +
           (C9184 * C537 + C9189 + C9189 + C48857 * C547) * C48975 * C9181 +
           (C9184 * C1207 + C9190 + C9190 + C48857 * C1215) * C48975 * C9182 +
           (C9184 * C1715 + C9191 + C9191 + C48857 * C1721) * C48975 * C9183) *
              C48945 * C48928 * C110 -
          ((C9184 * C1716 + C9192 + C9192 + C48857 * C1722) * C48975 * C9183 +
           (C9184 * C1206 + C9193 + C9193 + C48857 * C1214) * C48975 * C9182 +
           (C9184 * C538 + C9194 + C9194 + C48857 * C548) * C48975 * C9181 +
           (C9184 * C248 + C9195 + C9195 + C48857 * C260) * C48975 * C9180 +
           (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
              C48945 * C48928 * C111 +
          ((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C48975 * C9179 +
           (C9184 * C247 + C9198 + C9198 + C48857 * C259) * C48975 * C9180 +
           (C9184 * C539 + C9199 + C9199 + C48857 * C549) * C48975 * C9181 +
           (C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C48975 * C9182 +
           (C9184 * C1717 + C9201 + C9201 + C48857 * C1723) * C48975 * C9183) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C49244 +
            (C9184 * C890 + C9934 + C9934 + C48857 * C900) * C49225) *
               C7837 +
           (C9324 * C49255 + C9697 * C49244 +
            (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C49225) *
               C7838 +
           (C9325 * C49255 + C9696 * C49244 +
            (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C49225) *
               C49222) *
              C48945 * C48928 * C110 -
          (((C9184 * C2339 + C10049 + C10049 + C48857 * C2351) * C49225 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C49244 +
            C9329 * C49255) *
               C49222 +
           ((C9184 * C2336 + C10050 + C10050 + C48857 * C2348) * C49225 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C49244 +
            C9328 * C49255) *
               C7838 +
           ((C9184 * C891 + C10051 + C10051 + C48857 * C901) * C49225 +
            (C9184 * C360 + C9433 + C9433 + C48857 * C372) * C49244 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
               C7837) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49255 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49244 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C49225) *
               C7837 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49255 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49244 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C49225) *
               C7838 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C49255 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49244 +
            (C9184 * C2340 + C10057 + C10057 + C48857 * C2352) * C49225) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C7840 * C361 + C8240 + C8240 + C49251 * C373 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7844 * C359 + C8238 + C8238 +
            C49211 * C371) *
               C15429 +
           (C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C49225) *
              C48963 * C48945 * C48928 * C110 -
          ((C7844 * C893 + C15432 + C15432 + C49211 * C903 + C7842 * C892 +
            C15433 + C15433 + C49238 * C902 + C7840 * C891 + C15434 + C15434 +
            C49251 * C901) *
               C49225 +
           (C7844 * C358 + C8243 + C8243 + C49211 * C370 + C7842 * C359 +
            C8242 + C8242 + C49238 * C371 + C7840 * C360 + C8241 + C8241 +
            C49251 * C372) *
               C15429 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C15428) *
              C48963 * C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C15428 +
           (C7840 * C359 + C15435 + C15435 + C49251 * C371 + C7842 * C358 +
            C15436 + C15436 + C49238 * C370 + C7844 * C357 + C15437 + C15437 +
            C49211 * C369) *
               C15429 +
           (C7840 * C892 + C15438 + C15438 + C49251 * C902 + C7842 * C893 +
            C15439 + C15439 + C49238 * C903 + C7844 * C894 + C15440 + C15440 +
            C49211 * C904) *
               C49225) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C9324 * C15428 + C9697 * C15429 + C10238 * C49225) * C49242 +
           (C9325 * C15428 + C9696 * C15429 + C10239 * C49225) * C49222) *
              C48945 * C48928 * C110 -
          ((C10243 * C49225 + C10242 * C15429 + C9329 * C15428) * C49222 +
           (C10241 * C49225 + C10240 * C15429 + C9328 * C15428) * C49242 +
           (C10427 * C49225 + C10426 * C15429 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
               C49254) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C15428 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C15429 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C49225) *
               C49254 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C15428 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C15429 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C49225) *
               C49242 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C15428 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C15429 +
            (C9184 * C2340 + C10057 + C10057 + C48857 * C2352) * C49225) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
           C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
           (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C17938) *
              C48963 * C48945 * C48928 * C110 -
          ((C9184 * C3692 + C17940 + C17940 + C48857 * C3698) * C17938 +
           (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C17937 +
           C10427 * C17936 + C10426 * C17935 +
           (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C17934) *
              C48963 * C48945 * C48928 * C111 +
          ((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C17934 +
           (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C17935 +
           (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C17936 +
           (C9184 * C2782 + C17941 + C17941 + C48857 * C2790) * C17937 +
           (C9184 * C3693 + C17942 + C17942 + C48857 * C3699) * C17938) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C48945 * C241 -
               (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
                C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
                C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
                C268 + C101 * C261) *
                   C48975 * C48963 * C48945 * C49217) *
                  C243 +
              ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
                C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
                C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
                C273 + C105 * C262) *
                   C48975 * C48963 * C48945 * C49217 -
               (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
                C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
                C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
                C154 + C101 * C138) *
                   C48975 * C48963 * C48945 * C241) *
                  C49215) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 +
                (C1275 + C1276 + C1277) * C48975 * C49222) *
                   C48945 * C241 -
               ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 +
                 C1028 * C1206 + C1231 + C1231 + C1021 * C1214 + C1026 * C1207 +
                 C1232 + C1232 + C1020 * C1215) *
                    C48975 * C49222 +
                (C1277 + C1276 + C1275) * C48975 * C49242 +
                (C1274 + C1273 + C1272) * C48975 * C49254) *
                   C48945 * C49217) *
                  C243 +
              (((C1278 + C1279 + C1280) * C48975 * C49254 +
                (C1281 + C1282 + C1283) * C48975 * C49242 +
                (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
                 C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
                 C49211 * C1216) *
                    C48975 * C49222) *
                   C48945 * C49217 -
               ((C1283 + C1282 + C1281) * C48975 * C49222 +
                (C1280 + C1279 + C1278) * C48975 * C49242 +
                (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
                 C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
                 C1020 * C138) *
                    C48975 * C49254) *
                   C48945 * C241) *
                  C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C1026 * C361 + C1450 + C1450 + C1020 * C373 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1030 * C359 + C1448 + C1448 +
             C49211 * C371) *
                C49244 +
            (C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 +
             C2355 + C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
             C49211 * C902) *
                C49225) *
               C48963 * C48945 * C241 -
           ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
             C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
             C1020 * C2347) *
                C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C1278 + C1279 + C1280) * C49255 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C49244 +
            (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
             C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
             C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C1030 * C893 + C2476 + C2476 + C49211 * C903 + C1028 * C892 +
             C2477 + C2477 + C1021 * C902 + C1026 * C891 + C2478 + C2478 +
             C1020 * C901) *
                C49225 +
            (C1030 * C358 + C1453 + C1453 + C49211 * C370 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1026 * C360 + C1451 + C1451 +
             C1020 * C372) *
                C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C241 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C241 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C243 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C49244 +
             (C9184 * C890 + C9934 + C9934 + C48857 * C900) * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C48945 * C241 -
           (((C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C49225 +
             C9695 * C49244 + C9326 * C49255) *
                C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C48945 * C49217) *
              C243 +
          (((C10215 + C10246 + C10247) * C7837 +
            (C10220 + C10248 + C10249) * C7838 +
            (C9330 * C49255 +
             (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49244 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            ((C9184 * C891 + C10051 + C10051 + C48857 * C901) * C49225 +
             (C9184 * C360 + C9433 + C9433 + C48857 * C372) * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C7840 * C361 + C8240 + C8240 + C49251 * C373 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7844 * C359 + C8238 + C8238 +
             C49211 * C371) *
                C15429 +
            (C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
             C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
             C49211 * C902) *
                C49225) *
               C48963 * C48945 * C241 -
           ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
             C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
             C49251 * C2347) *
                C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C15428 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C15429 +
            (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
             C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
             C15589 + C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C7844 * C893 + C15432 + C15432 + C49211 * C903 + C7842 * C892 +
             C15433 + C15433 + C49238 * C902 + C7840 * C891 + C15434 + C15434 +
             C49251 * C901) *
                C49225 +
            (C7844 * C358 + C8243 + C8243 + C49211 * C370 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7840 * C360 + C8241 + C8241 +
             C49251 * C372) *
                C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C48945 * C241 -
           ((C10692 * C49225 + C9695 * C15429 + C9326 * C15428) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C48945 * C49217) *
              C243 +
          (((C16906 + C16907 + C16908) * C49254 +
            (C16909 + C16910 + C16911) * C49242 +
            (C9330 * C15428 + C14461 * C15429 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C17938) *
               C48963 * C48945 * C241 -
           ((C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C17938 +
            C10857 * C17937 + C10238 * C17936 + C9697 * C17935 +
            C9324 * C17934) *
               C48963 * C48945 * C49217) *
              C243 +
          ((C9328 * C17934 + C10240 * C17935 + C10241 * C17936 +
            (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C17937 +
            (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C17938) *
               C48963 * C48945 * C49217 -
           ((C9184 * C3692 + C17940 + C17940 + C48857 * C3698) * C17938 +
            (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C17937 +
            C10427 * C17936 + C10426 * C17935 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C17934) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C355 -
               (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
                C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
                C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
                C380 + C101 * C373) *
                   C48975 * C48963 * C49219) *
                  C48928 * C243 +
              ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
                C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
                C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
                C385 + C105 * C374) *
                   C48975 * C48963 * C49219 -
               (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
                C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
                C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
                C154 + C101 * C138) *
                   C48975 * C48963 * C355) *
                  C48928 * C49215) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 +
                (C1275 + C1276 + C1277) * C48975 * C49222) *
                   C355 -
               ((C1030 * C1429 + C1442 + C1442 + C49211 * C1437 +
                 C1028 * C1430 + C1443 + C1443 + C1021 * C1438 + C1026 * C1431 +
                 C1444 + C1444 + C1020 * C1439) *
                    C48975 * C49222 +
                (C1030 * C641 + C1445 + C1445 + C49211 * C651 + C1028 * C640 +
                 C1446 + C1446 + C1021 * C650 + C1026 * C639 + C1447 + C1447 +
                 C1020 * C649) *
                    C48975 * C49242 +
                (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
                 C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
                 C1020 * C373) *
                    C48975 * C49254) *
                   C49219) *
                  C48928 * C243 +
              (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
                 C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
                 C49211 * C370) *
                    C48975 * C49254 +
                (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
                 C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
                 C49211 * C652) *
                    C48975 * C49242 +
                (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
                 C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
                 C49211 * C1440) *
                    C48975 * C49222) *
                   C49219 -
               ((C1283 + C1282 + C1281) * C48975 * C49222 +
                (C1280 + C1279 + C1278) * C48975 * C49242 +
                (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
                 C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
                 C1020 * C138) *
                    C48975 * C49254) *
                   C355) *
                  C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C355 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C2855 + C2856 + C2857) * C49255 +
            (C2858 + C2859 + C2860) * C49244 +
            (C1026 * C2783 + C2822 + C2822 + C1020 * C2791 + C1028 * C2782 +
             C2823 + C2823 + C1021 * C2790 + C1030 * C2785 + C2824 + C2824 +
             C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C355 -
           ((C7844 * C1429 + C8232 + C8232 + C49211 * C1437 + C7842 * C1430 +
             C8233 + C8233 + C49238 * C1438 + C7840 * C1431 + C8234 + C8234 +
             C49251 * C1439) *
                C48975 * C49222 +
            (C7844 * C641 + C8235 + C8235 + C49211 * C651 + C7842 * C640 +
             C8236 + C8236 + C49238 * C650 + C7840 * C639 + C8237 + C8237 +
             C49251 * C649) *
                C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C243 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           ((C9184 * C9421 + C9428 + C9428 + C48857 * C9425) * C48975 * C9183 +
            (C9184 * C1891 + C9429 + C9429 + C48857 * C1897) * C48975 * C9182 +
            (C9184 * C1431 + C9430 + C9430 + C48857 * C1439) * C48975 * C9181 +
            (C9184 * C639 + C9431 + C9431 + C48857 * C649) * C48975 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C243 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C355 -
           (((C9184 * C10395 + C10406 + C10406 + C48857 * C10399) * C49225 +
             C10239 * C49244 + C9696 * C49255) *
                C49222 +
            ((C9184 * C3262 + C10407 + C10407 + C48857 * C3268) * C49225 +
             C10238 * C49244 + C9697 * C49255) *
                C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49255 + C10427 * C49244 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C7837 +
            (C10240 * C49255 + C10241 * C49244 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C7838 +
            (C10242 * C49255 + C10243 * C49244 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C355 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C15796 + C15797 + C15798) * C15428 +
            (C15799 + C15800 + C15801) * C15429 +
            (C7840 * C2783 + C15763 + C15763 + C49251 * C2791 + C7842 * C2782 +
             C15764 + C15764 + C49238 * C2790 + C7844 * C2785 + C15765 +
             C15765 + C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C355 -
           ((C10856 * C49225 + C10239 * C15429 + C9696 * C15428) * C49222 +
            (C10857 * C49225 + C10238 * C15429 + C9697 * C15428) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C15428 + C10427 * C15429 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C49254 +
            (C10240 * C15428 + C10241 * C15429 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C49242 +
            (C10242 * C15428 + C10243 * C15429 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            C18131 * C17938) *
               C48963 * C355 -
           ((C9184 * C18110 + C18119 + C18119 + C48857 * C18114) * C17938 +
            C18131 * C17937 + C11275 * C17936 + C10425 * C17935 +
            C10424 * C17934) *
               C48963 * C49219) *
              C48928 * C243 +
          ((C10426 * C17934 + C10427 * C17935 + C18132 * C17936 +
            C18133 * C17937 +
            (C9184 * C18111 + C18124 + C18124 + C48857 * C18115) * C17938) *
               C48963 * C49219 -
           (C18133 * C17938 + C18132 * C17937 + C10427 * C17936 +
            C10426 * C17935 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C17934) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C48945 * C467 -
               (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
                C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
                C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
                C268 + C101 * C261) *
                   C48975 * C48963 * C48945 * C49217) *
                  C469 +
              ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
                C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
                C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
                C273 + C105 * C262) *
                   C48975 * C48963 * C48945 * C49217 -
               (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
                C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
                C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
                C154 + C101 * C138) *
                   C48975 * C48963 * C48945 * C467) *
                  C49215) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 +
                (C1275 + C1276 + C1277) * C48975 * C49222) *
                   C48945 * C467 -
               ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 +
                 C1028 * C1206 + C1231 + C1231 + C1021 * C1214 + C1026 * C1207 +
                 C1232 + C1232 + C1020 * C1215) *
                    C48975 * C49222 +
                (C1277 + C1276 + C1275) * C48975 * C49242 +
                (C1274 + C1273 + C1272) * C48975 * C49254) *
                   C48945 * C49217) *
                  C469 +
              (((C1278 + C1279 + C1280) * C48975 * C49254 +
                (C1281 + C1282 + C1283) * C48975 * C49242 +
                (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
                 C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
                 C49211 * C1216) *
                    C48975 * C49222) *
                   C48945 * C49217 -
               ((C1283 + C1282 + C1281) * C48975 * C49222 +
                (C1280 + C1279 + C1278) * C48975 * C49242 +
                (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
                 C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
                 C1020 * C138) *
                    C48975 * C49254) *
                   C48945 * C467) *
                  C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C48945 * C467 -
           ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
             C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
             C1020 * C2347) *
                C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C1278 + C1279 + C1280) * C49255 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C49244 +
            (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
             C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
             C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C467 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C467 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C469 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C48945 * C467 -
           (((C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C49225 +
             C9695 * C49244 + C9326 * C49255) *
                C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C48945 * C49217) *
              C469 +
          (((C10215 + C10246 + C10247) * C7837 +
            (C10220 + C10248 + C10249) * C7838 +
            (C9330 * C49255 +
             (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49244 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C48945 * C467 -
           ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
             C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
             C49251 * C2347) *
                C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C15428 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C15429 +
            (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
             C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
             C15589 + C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C48945 * C467 -
           ((C10692 * C49225 + C9695 * C15429 + C9326 * C15428) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C48945 * C49217) *
              C469 +
          (((C16906 + C16907 + C16908) * C49254 +
            (C16909 + C16910 + C16911) * C49242 +
            (C9330 * C15428 + C14461 * C15429 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            C18131 * C17938) *
               C48963 * C48945 * C467 -
           ((C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C17938 +
            C10857 * C17937 + C10238 * C17936 + C9697 * C17935 +
            C9324 * C17934) *
               C48963 * C48945 * C49217) *
              C469 +
          ((C9328 * C17934 + C10240 * C17935 + C10241 * C17936 +
            (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C17937 +
            (C9184 * C18024 + C18028 + C18028 + C48857 * C18026) * C17938) *
               C48963 * C48945 * C49217 -
           (C18133 * C17938 + C18132 * C17937 + C10427 * C17936 +
            C10426 * C17935 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C17934) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
               C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
               C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
               C149 + C105 * C141) *
                  C48975 * C48963 * C48945 * C533 -
              (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
               C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
               C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
               C268 + C101 * C261) *
                  C48975 * C48963 * C48945 * C534 +
              (C113 * C537 + C553 + C553 + C101 * C547 + C115 * C538 + C554 +
               C554 + C102 * C548 + C117 * C539 + C555 + C555 + C103 * C549 +
               C119 * C540 + C556 + C556 + C104 * C550 + C121 * C541 + C557 +
               C557 + C105 * C551) *
                  C48975 * C48963 * C48945 * C535) *
             C48894 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                C49211 * C139) *
                   C48975 * C49254 +
               (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
                  C48945 * C533 -
              ((C1743 + C1744 + C1745) * C48975 * C49222 +
               (C1277 + C1276 + C1275) * C48975 * C49242 +
               (C1274 + C1273 + C1272) * C48975 * C49254) *
                  C48945 * C534 +
              (C1739 * C49254 + (C1745 + C1744 + C1743) * C48975 * C49242 +
               (C1026 * C1715 + C1732 + C1732 + C1020 * C1721 + C1028 * C1716 +
                C1733 + C1733 + C1021 * C1722 + C1030 * C1717 + C1734 + C1734 +
                C49211 * C1723) *
                   C48975 * C49222) *
                  C48945 * C535) *
             C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C49255 +
           (C2849 + C2850 + C2851) * C49244 +
           (C2852 + C2853 + C2854) * C49225) *
              C48963 * C48945 * C533 -
          ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
            C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
            C1020 * C2347) *
               C49225 +
           (C1931 + C1932 + C1933) * C49244 +
           (C1274 + C1273 + C1272) * C49255) *
              C48963 * C48945 * C534 +
          (C1735 * C49255 + (C1930 + C1929 + C1928) * C49244 +
           (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
            C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
            C49211 * C2352) *
               C49225) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C48945 * C533 -
          ((C8524 + C8525 + C8526) * C48975 * C49222 +
           (C8079 + C8078 + C8077) * C48975 * C7838 +
           (C8076 + C8075 + C8074) * C48975 * C7837) *
              C48945 * C534 +
          (C8520 * C7837 + (C8526 + C8525 + C8524) * C48975 * C7838 +
           (C7840 * C1715 + C8513 + C8513 + C49251 * C1721 + C7842 * C1716 +
            C8514 + C8514 + C49238 * C1722 + C7844 * C1717 + C8515 + C8515 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C48945 * C533 -
          (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
           C9332 * C9179) *
              C48945 * C534 +
          (C9333 * C9179 + C9334 * C9180 + C9335 * C9181 + C9591 * C9182 +
           (C9184 * C9581 + C9587 + C9587 + C48857 * C9583) * C48975 * C9183) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            C10424 * C49244 + C10425 * C49225) *
               C7837 +
           (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
              C48945 * C533 -
          ((C10693 + C10687 + C10688) * C49222 +
           (C10245 + C10212 + C10211) * C7838 +
           (C10244 + C10208 + C10207) * C7837) *
              C48945 * C534 +
          (C10689 * C7837 + (C10688 + C10687 + C10693) * C7838 +
           (C9327 * C49255 + C9694 * C49244 +
            (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49225) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C15790 + C15791 + C15792) * C15429 +
           (C15793 + C15794 + C15795) * C49225) *
              C48963 * C48945 * C533 -
          ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
            C49251 * C2347) *
               C49225 +
           (C8703 + C8704 + C8705) * C15429 +
           (C8076 + C8075 + C8074) * C15428) *
              C48963 * C48945 * C534 +
          (C8516 * C15428 + (C8702 + C8701 + C8700) * C15429 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C49225) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
              C48945 * C533 -
          ((C17315 + C17316 + C17317) * C49222 +
           (C16905 + C16904 + C16903) * C49242 +
           (C16902 + C16901 + C16900) * C49254) *
              C48945 * C534 +
          (C17318 * C49254 + (C17317 + C17316 + C17315) * C49242 +
           (C9327 * C15428 + C9694 * C15429 +
            (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49225) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
           C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
           C18131 * C17938) *
              C48963 * C48945 * C533 -
          ((C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C17938 +
           C10857 * C17937 + C10238 * C17936 + C9697 * C17935 +
           C9324 * C17934) *
              C48963 * C48945 * C534 +
          (C9325 * C17934 + C9696 * C17935 + C10239 * C17936 + C10856 * C17937 +
           (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C17938) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C355 -
               (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
                C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
                C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
                C380 + C101 * C373) *
                   C48975 * C48963 * C49219) *
                  C467 +
              ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
                C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
                C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
                C659 + C105 * C653) *
                   C48975 * C48963 * C49219 -
               (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
                C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
                C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
                C268 + C101 * C261) *
                   C48975 * C48963 * C355) *
                  C49217) *
             C48894 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
                   C355 -
               ((C1928 + C1929 + C1930) * C48975 * C49222 +
                (C1931 + C1932 + C1933) * C48975 * C49242 +
                (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
                 C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
                 C1020 * C373) *
                    C48975 * C49254) *
                   C49219) *
                  C467 +
              (((C1933 + C1932 + C1931) * C48975 * C49254 +
                (C1930 + C1929 + C1928) * C48975 * C49242 +
                (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
                 C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
                 C49211 * C1899) *
                    C48975 * C49222) *
                   C49219 -
               ((C1743 + C1744 + C1745) * C48975 * C49222 +
                (C1277 + C1276 + C1275) * C48975 * C49242 +
                (C1274 + C1273 + C1272) * C48975 * C49254) *
                   C355) *
                  C49217) *
             C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C355 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C467 +
          (((C1933 + C1932 + C1931) * C49255 +
            (C3287 + C3288 + C3289) * C49244 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C3289 + C3288 + C3287) * C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C355 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C467 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C355 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C467 +
          (((C10850 + C10849 + C10859) * C7837 +
            (C10846 + C10845 + C10858) * C7838 +
            (C9695 * C49255 + C10692 * C49244 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C10693 + C10687 + C10688) * C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C355 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C15428 +
            (C16219 + C16220 + C16221) * C15429 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C16221 + C16220 + C16219) * C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C355 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C467 +
          (((C17470 + C17469 + C17468) * C49254 +
            (C17467 + C17466 + C17465) * C49242 +
            (C9695 * C15428 + C10692 * C15429 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C17315 + C17316 + C17317) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            C18131 * C17938) *
               C48963 * C355 -
           ((C9184 * C18110 + C18119 + C18119 + C48857 * C18114) * C17938 +
            C18131 * C17937 + C11275 * C17936 + C10425 * C17935 +
            C10424 * C17934) *
               C48963 * C49219) *
              C467 +
          ((C9697 * C17934 + C10238 * C17935 + C10857 * C17936 +
            C18368 * C17937 +
            (C9184 * C18359 + C18365 + C18365 + C48857 * C18361) * C17938) *
               C48963 * C49219 -
           (C18368 * C17938 + C10857 * C17937 + C10238 * C17936 +
            C9697 * C17935 + C9324 * C17934) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C741 -
               (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
                C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
                C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
                C380 + C101 * C373) *
                   C48975 * C48963 * C49219) *
                  C48928 * C469 +
              ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
                C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
                C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
                C385 + C105 * C374) *
                   C48975 * C48963 * C49219 -
               (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
                C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
                C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
                C154 + C101 * C138) *
                   C48975 * C48963 * C741) *
                  C48928 * C49215) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
                   C741 -
               ((C1928 + C1929 + C1930) * C48975 * C49222 +
                (C1931 + C1932 + C1933) * C48975 * C49242 +
                (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
                 C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
                 C1020 * C373) *
                    C48975 * C49254) *
                   C49219) *
                  C48928 * C469 +
              (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
                 C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
                 C49211 * C370) *
                    C48975 * C49254 +
                (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
                 C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
                 C49211 * C652) *
                    C48975 * C49242 +
                (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
                 C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
                 C49211 * C1440) *
                    C48975 * C49222) *
                   C49219 -
               ((C1283 + C1282 + C1281) * C48975 * C49222 +
                (C1280 + C1279 + C1278) * C48975 * C49242 +
                (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
                 C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
                 C1020 * C138) *
                    C48975 * C49254) *
                   C741) *
                  C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C741 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C2855 + C2856 + C2857) * C49255 +
            (C2858 + C2859 + C2860) * C49244 +
            (C1026 * C2783 + C2822 + C2822 + C1020 * C2791 + C1028 * C2782 +
             C2823 + C2823 + C1021 * C2790 + C1030 * C2785 + C2824 + C2824 +
             C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C469 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C469 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C741 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49255 + C10427 * C49244 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C7837 +
            (C10240 * C49255 + C10241 * C49244 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C7838 +
            (C10242 * C49255 + C10243 * C49244 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C741 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C15796 + C15797 + C15798) * C15428 +
            (C15799 + C15800 + C15801) * C15429 +
            (C7840 * C2783 + C15763 + C15763 + C49251 * C2791 + C7842 * C2782 +
             C15764 + C15764 + C49238 * C2790 + C7844 * C2785 + C15765 +
             C15765 + C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C741 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C15428 + C10427 * C15429 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C49254 +
            (C10240 * C15428 + C10241 * C15429 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C49242 +
            (C10242 * C15428 + C10243 * C15429 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            C18131 * C17938) *
               C48963 * C741 -
           ((C9184 * C18110 + C18119 + C18119 + C48857 * C18114) * C17938 +
            C18131 * C17937 + C11275 * C17936 + C10425 * C17935 +
            C10424 * C17934) *
               C48963 * C49219) *
              C48928 * C469 +
          ((C10426 * C17934 + C10427 * C17935 + C18132 * C17936 +
            C18133 * C17937 +
            (C9184 * C18111 + C18124 + C18124 + C48857 * C18115) * C17938) *
               C48963 * C49219 -
           (C18133 * C17938 + C18132 * C17937 + C10427 * C17936 +
            C10426 * C17935 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C17934) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
                C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
                C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
                C149 + C105 * C141) *
                   C48975 * C48963 * C741 -
               (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
                C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
                C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
                C380 + C101 * C373) *
                   C48975 * C48963 * C49219) *
                  C241 +
              ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
                C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
                C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
                C659 + C105 * C653) *
                   C48975 * C48963 * C49219 -
               (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
                C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
                C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
                C268 + C101 * C261) *
                   C48975 * C48963 * C741) *
                  C49217) *
             C48894 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                 C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                 C49211 * C139) *
                    C48975 * C49254 +
                (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
                   C741 -
               ((C1928 + C1929 + C1930) * C48975 * C49222 +
                (C1931 + C1932 + C1933) * C48975 * C49242 +
                (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
                 C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
                 C1020 * C373) *
                    C48975 * C49254) *
                   C49219) *
                  C241 +
              (((C1933 + C1932 + C1931) * C48975 * C49254 +
                (C1930 + C1929 + C1928) * C48975 * C49242 +
                (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
                 C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
                 C49211 * C1899) *
                    C48975 * C49222) *
                   C49219 -
               ((C1743 + C1744 + C1745) * C48975 * C49222 +
                (C1277 + C1276 + C1275) * C48975 * C49242 +
                (C1274 + C1273 + C1272) * C48975 * C49254) *
                   C741) *
                  C49217) *
             C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C741 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C241 +
          (((C1933 + C1932 + C1931) * C49255 +
            (C3287 + C3288 + C3289) * C49244 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C3289 + C3288 + C3287) * C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C241 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C741 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C241 +
          (((C10850 + C10849 + C10859) * C7837 +
            (C10846 + C10845 + C10858) * C7838 +
            (C9695 * C49255 + C10692 * C49244 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C10693 + C10687 + C10688) * C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C741 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C15428 +
            (C16219 + C16220 + C16221) * C15429 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C16221 + C16220 + C16219) * C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C741 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C241 +
          (((C17470 + C17469 + C17468) * C49254 +
            (C17467 + C17466 + C17465) * C49242 +
            (C9695 * C15428 + C10692 * C15429 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C17315 + C17316 + C17317) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
            C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
            C18131 * C17938) *
               C48963 * C741 -
           ((C9184 * C18110 + C18119 + C18119 + C48857 * C18114) * C17938 +
            C18131 * C17937 + C11275 * C17936 + C10425 * C17935 +
            C10424 * C17934) *
               C48963 * C49219) *
              C241 +
          ((C9697 * C17934 + C10238 * C17935 + C10857 * C17936 +
            C18368 * C17937 +
            (C9184 * C18359 + C18365 + C18365 + C48857 * C18361) * C17938) *
               C48963 * C49219 -
           (C18368 * C17938 + C10857 * C17937 + C10238 * C17936 +
            C9697 * C17935 + C9324 * C17934) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
               C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
               C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
               C149 + C105 * C141) *
                  C48975 * C48963 * C887 -
              (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
               C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
               C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
               C380 + C101 * C373) *
                  C48975 * C48963 * C888 +
              (C113 * C890 + C906 + C906 + C101 * C900 + C115 * C891 + C907 +
               C907 + C102 * C901 + C117 * C892 + C908 + C908 + C103 * C902 +
               C119 * C893 + C909 + C909 + C104 * C903 + C121 * C894 + C910 +
               C910 + C105 * C904) *
                  C48975 * C48963 * C889) *
             C48928 * C48894 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
                C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
                C49211 * C139) *
                   C48975 * C49254 +
               (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
                  C887 -
              ((C1928 + C1929 + C1930) * C48975 * C49222 +
               (C1931 + C1932 + C1933) * C48975 * C49242 +
               (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
                C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
                C1020 * C373) *
                   C48975 * C49254) *
                  C888 +
              ((C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 +
                C2355 + C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
                C49211 * C902) *
                   C48975 * C49254 +
               (C1026 * C2335 + C2357 + C2357 + C1020 * C2347 + C1028 * C2336 +
                C2358 + C2358 + C1021 * C2348 + C1030 * C2337 + C2359 + C2359 +
                C49211 * C2349) *
                   C48975 * C49242 +
               (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
                C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
                C49211 * C2352) *
                   C48975 * C49222) *
                  C889) *
             C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C49255 +
           (C2849 + C2850 + C2851) * C49244 + C3711 * C49225) *
              C48963 * C887 -
          ((C3718 + C3719 + C3720) * C49225 + (C2854 + C2853 + C2852) * C49244 +
           (C2851 + C2850 + C2849) * C49255) *
              C48963 * C888 +
          (C3711 * C49255 + (C3720 + C3719 + C3718) * C49244 +
           (C1026 * C3691 + C3708 + C3708 + C1020 * C3697 + C1028 * C3692 +
            C3709 + C3709 + C1021 * C3698 + C1030 * C3693 + C3710 + C3710 +
            C49211 * C3699) *
               C49225) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C887 -
          ((C8700 + C8701 + C8702) * C48975 * C49222 +
           (C8703 + C8704 + C8705) * C48975 * C7838 +
           (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
            C49251 * C373) *
               C48975 * C7837) *
              C888 +
          ((C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C48975 * C7837 +
           (C7840 * C2335 + C9111 + C9111 + C49251 * C2347 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7844 * C2337 + C9113 + C9113 +
            C49211 * C2349) *
               C48975 * C7838 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C887 -
          (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
           (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
              C888 +
          ((C9184 * C890 + C9934 + C9934 + C48857 * C900) * C48975 * C9179 +
           (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C48975 * C9180 +
           (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C48975 * C9181 +
           (C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C48975 * C9182 +
           (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C48975 * C9183) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            C10424 * C49244 + C10425 * C49225) *
               C7837 +
           (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
              C887 -
          ((C10858 + C10845 + C10846) * C49222 +
           (C10859 + C10849 + C10850) * C7838 +
           (C11275 * C49225 + C10425 * C49244 + C10424 * C49255) * C7837) *
              C888 +
          ((C10425 * C49255 + C11275 * C49244 +
            (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C49225) *
               C7837 +
           (C10238 * C49255 + C10857 * C49244 +
            (C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C49225) *
               C7838 +
           (C10239 * C49255 + C10856 * C49244 +
            (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49225) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C15790 + C15791 + C15792) * C15429 + C16634 * C49225) *
              C48963 * C887 -
          ((C16641 + C16642 + C16643) * C49225 +
           (C15795 + C15794 + C15793) * C15429 +
           (C15792 + C15791 + C15790) * C15428) *
              C48963 * C888 +
          (C16634 * C15428 + (C16643 + C16642 + C16641) * C15429 +
           (C7840 * C3691 + C16631 + C16631 + C49251 * C3697 + C7842 * C3692 +
            C16632 + C16632 + C49238 * C3698 + C7844 * C3693 + C16633 + C16633 +
            C49211 * C3699) *
               C49225) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
              C887 -
          ((C17465 + C17466 + C17467) * C49222 +
           (C17468 + C17469 + C17470) * C49242 +
           (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
              C888 +
          ((C10425 * C15428 + C11275 * C15429 +
            (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C49225) *
               C49254 +
           (C10238 * C15428 + C10857 * C15429 +
            (C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C49225) *
               C49242 +
           (C10239 * C15428 + C10856 * C15429 +
            (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49225) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C17934 +
           C10424 * C17935 + C10425 * C17936 + C11275 * C17937 +
           C18131 * C17938) *
              C48963 * C887 -
          (C18603 * C17938 + C18131 * C17937 + C11275 * C17936 +
           C10425 * C17935 + C10424 * C17934) *
              C48963 * C888 +
          (C10425 * C17934 + C11275 * C17935 + C18131 * C17936 +
           C18603 * C17937 +
           (C9184 * C18594 + C18600 + C18600 + C48857 * C18596) * C17938) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C11379 * C361 + C11739 + C11739 + C49167 * C373 + C11381 * C360 +
             C11738 + C11738 + C48867 * C372) *
                C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
           (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
              C48945 * C48928 * C110 -
          (((C11381 * C1429 + C11745 + C11745 + C48867 * C1437 +
             C11379 * C1430 + C11744 + C11744 + C49167 * C1438) *
                C49062 +
            (C11599 + C11598) * C49190) *
               C49222 +
           ((C11381 * C641 + C11743 + C11743 + C48867 * C651 + C11379 * C640 +
             C11742 + C11742 + C49167 * C650) *
                C49062 +
            (C11597 + C11596) * C49190) *
               C7838 +
           ((C11381 * C359 + C11741 + C11741 + C48867 * C371 + C11379 * C360 +
             C11740 + C11740 + C49167 * C372) *
                C49062 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C49190) *
               C7837) *
              C48945 * C48928 * C111 +
          (((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
             C11401 + C11401 + C48867 * C140) *
                C49190 +
            (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
             C12667 + C12667 + C48867 * C370) *
                C49062) *
               C7837 +
           ((C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
             C11403 + C11403 + C48867 * C258) *
                C49190 +
            (C11379 * C641 + C12668 + C12668 + C49167 * C651 + C11381 * C642 +
             C12669 + C12669 + C48867 * C652) *
                C49062) *
               C7838 +
           ((C11379 * C539 + C11404 + C11404 + C49167 * C549 + C11381 * C540 +
             C11405 + C11405 + C48867 * C550) *
                C49190 +
            (C11379 * C1429 + C12670 + C12670 + C49167 * C1437 +
             C11381 * C1432 + C12671 + C12671 + C48867 * C1440) *
                C49062) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C3824 * C361 + C4172 + C4172 + C3818 * C373 + C3826 * C360 + C4171 +
            C4171 + C3819 * C372 + C3828 * C359 + C4170 + C4170 + C3820 * C371 +
            C3830 * C358 + C4169 + C4169 + C49188 * C370) *
               C49062) *
              C48963 * C48945 * C48928 * C110 -
          ((C3830 * C357 + C4176 + C4176 + C49188 * C369 + C3828 * C358 +
            C4175 + C4175 + C3820 * C370 + C3826 * C359 + C4174 + C4174 +
            C3819 * C371 + C3824 * C360 + C4173 + C4173 + C3818 * C372) *
               C49062 +
           (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
            C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
            C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
               C49190) *
              C48963 * C48945 * C48928 * C111 +
          ((C3824 * C125 + C3849 + C3849 + C3818 * C139 + C3826 * C126 + C3850 +
            C3850 + C3819 * C140 + C3828 * C127 + C3851 + C3851 + C3820 * C141 +
            C3830 * C128 + C3852 + C3852 + C49188 * C142) *
               C49190 +
           (C3824 * C359 + C5053 + C5053 + C3818 * C371 + C3826 * C358 + C5054 +
            C5054 + C3819 * C370 + C3828 * C357 + C5055 + C5055 + C3820 * C369 +
            C3830 * C362 + C5056 + C5056 + C49188 * C374) *
               C49062) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C20358 +
           (C13102 + C13103) * C20359 + C20246 * C20360 +
           (C20260 + C20259) * C49204) *
              C48963 * C48945 * C48928 * C110 -
          ((C11381 * C2782 + C19157 + C19157 + C48867 * C2790 + C11379 * C2783 +
            C19156 + C19156 + C49167 * C2791) *
               C49204 +
           (C19165 + C19164) * C20360 + (C13105 + C13104) * C20359 +
           (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
            C11399 + C11399 + C49167 * C138) *
               C20358) *
              C48963 * C48945 * C48928 * C111 +
          ((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
            C11401 + C11401 + C48867 * C140) *
               C20358 +
           (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
            C12667 + C12667 + C48867 * C370) *
               C20359 +
           (C11379 * C892 + C18750 + C18750 + C49167 * C902 + C11381 * C893 +
            C18751 + C18751 + C48867 * C903) *
               C20360 +
           (C11379 * C2782 + C20363 + C20363 + C49167 * C2790 + C11381 * C2785 +
            C20364 + C20364 + C48867 * C2793) *
               C49204) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C11379 * C361 + C11739 + C11739 + C49167 * C373 + C11381 * C360 +
              C11738 + C11738 + C48867 * C372) *
                 C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C48945 * C241 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
            ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C48945 * C49217) *
              C243 +
          ((((C11596 + C11597) * C49190 + (C12882 + C12883) * C49062) * C7837 +
            ((C11598 + C11599) * C49190 + (C12884 + C12885) * C49062) * C7838 +
            ((C11600 + C11601) * C49190 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C11381 * C359 + C11741 + C11741 + C48867 * C371 + C11379 * C360 +
              C11740 + C11740 + C49167 * C372) *
                 C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C3824 * C361 + C4172 + C4172 + C3818 * C373 + C3826 * C360 +
             C4171 + C4171 + C3819 * C372 + C3828 * C359 + C4170 + C4170 +
             C3820 * C371 + C3830 * C358 + C4169 + C4169 + C49188 * C370) *
                C49062) *
               C48963 * C48945 * C241 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C4031 + C4032 + C4033 + C4034) * C49190 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C3830 * C357 + C4176 + C4176 + C49188 * C369 + C3828 * C358 +
             C4175 + C4175 + C3820 * C370 + C3826 * C359 + C4174 + C4174 +
             C3819 * C371 + C3824 * C360 + C4173 + C4173 + C3818 * C372) *
                C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C48945 * C241 -
           ((C19710 + C19711) * C49204 + C19705 * C20360 + C13654 * C20359 +
            (C11591 + C11590) * C20358) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C11596 + C11597) * C20358 + (C12882 + C12883) * C20359 +
            (C18956 + C18957) * C20360 +
            (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
             C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                C49204) *
               C48963 * C48945 * C49217 -
           ((C11381 * C2782 + C19157 + C19157 + C48867 * C2790 +
             C11379 * C2783 + C19156 + C19156 + C49167 * C2791) *
                C49204 +
            (C19165 + C19164) * C20360 + (C13105 + C13104) * C20359 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C20358) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C355 -
           (((C11381 * C2339 + C12517 + C12517 + C48867 * C2351 +
              C11379 * C2338 + C12516 + C12516 + C49167 * C2350) *
                 C49062 +
             (C12150 + C12151) * C49190) *
                C49222 +
            ((C11381 * C2336 + C12515 + C12515 + C48867 * C2348 +
              C11379 * C2335 + C12514 + C12514 + C49167 * C2347) *
                 C49062 +
             (C12152 + C12153) * C49190) *
                C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C48928 * C243 +
          ((((C13104 + C13105) * C49190 +
             (C11379 * C891 + C13088 + C13088 + C49167 * C901 + C11381 * C892 +
              C13089 + C13089 + C48867 * C902) *
                 C49062) *
                C7837 +
            ((C12882 + C12883) * C49190 +
             (C11379 * C2336 + C13090 + C13090 + C49167 * C2348 +
              C11381 * C2337 + C13091 + C13091 + C48867 * C2349) *
                 C49062) *
                C7838 +
            ((C12884 + C12885) * C49190 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C355 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C5357 + C5358 + C5359 + C5360) * C49190 +
            (C3824 * C891 + C5333 + C5333 + C3818 * C901 + C3826 * C892 +
             C5334 + C5334 + C3819 * C902 + C3828 * C893 + C5335 + C5335 +
             C3820 * C903 + C3830 * C894 + C5336 + C5336 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C355 -
           ((C11381 * C3692 + C20252 + C20252 + C48867 * C3698 +
             C11379 * C3691 + C20251 + C20251 + C49167 * C3697) *
                C49204 +
            (C20259 + C20260) * C20360 + (C14215 + C14216) * C20359 +
            (C13103 + C13102) * C20358) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C13104 + C13105) * C20358 + (C19164 + C19165) * C20359 +
            (C20635 + C20636) * C20360 +
            (C11379 * C3692 + C20629 + C20629 + C49167 * C3698 +
             C11381 * C3693 + C20630 + C20630 + C48867 * C3699) *
                C49204) *
               C48963 * C49219 -
           ((C20636 + C20635) * C49204 + (C19165 + C19164) * C20360 +
            (C13105 + C13104) * C20359 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C20358) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C48945 * C467 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
            ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C48945 * C49217) *
              C469 +
          ((((C11596 + C11597) * C49190 + (C12882 + C12883) * C49062) * C7837 +
            ((C11598 + C11599) * C49190 + (C12884 + C12885) * C49062) * C7838 +
            ((C11600 + C11601) * C49190 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C48945 * C467 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C4031 + C4032 + C4033 + C4034) * C49190 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C48945 * C467 -
           ((C19710 + C19711) * C49204 + C19705 * C20360 + C13654 * C20359 +
            (C11591 + C11590) * C20358) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C11596 + C11597) * C20358 + (C12882 + C12883) * C20359 +
            (C18956 + C18957) * C20360 +
            (C11379 * C3263 + C19158 + C19158 + C49167 * C3269 +
             C11381 * C3264 + C19159 + C19159 + C48867 * C3270) *
                C49204) *
               C48963 * C48945 * C49217 -
           ((C20636 + C20635) * C49204 + (C19165 + C19164) * C20360 +
            (C13105 + C13104) * C20359 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C20358) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C13102 + C13103) * C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
           C13449 * C49222) *
              C48945 * C533 -
          (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
           ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
           ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
              C48945 * C534 +
          (C13449 * C7837 +
           (C11977 * C49190 + (C12149 + C12148) * C49062) * C7838 +
           ((C11991 + C11990) * C49190 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C49062) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C5353 + C5354 + C5355 + C5356) * C49062) *
              C48963 * C48945 * C533 -
          ((C4583 + C4584 + C4585 + C4586) * C49062 +
           (C4030 + C4029 + C4028 + C4027) * C49190) *
              C48963 * C48945 * C534 +
          ((C4432 + C4431 + C4430 + C4429) * C49190 +
           (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
            C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
            C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
               C49062) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C20358 +
           (C13102 + C13103) * C20359 + C20246 * C20360 +
           (C20260 + C20259) * C49204) *
              C48963 * C48945 * C533 -
          ((C19710 + C19711) * C49204 + C19705 * C20360 + C13654 * C20359 +
           (C11591 + C11590) * C20358) *
              C48963 * C48945 * C534 +
          (C11976 * C20358 + C13447 * C20359 + (C13664 + C13663) * C20360 +
           (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
            C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
               C49204) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C355 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C467 +
          (((C13644 * C49190 + (C13666 + C13665) * C49062) * C7837 +
            (C13447 * C49190 + (C13664 + C13663) * C49062) * C7838 +
            ((C12149 + C12148) * C49190 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            (C13649 * C49062 + (C11593 + C11592) * C49190) * C7838 +
            (C13654 * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C355 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C467 +
          (((C4586 + C4585 + C4584 + C4583) * C49190 +
            (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
             C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
             C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C355 -
           ((C11381 * C3692 + C20252 + C20252 + C48867 * C3698 +
             C11379 * C3691 + C20251 + C20251 + C49167 * C3697) *
                C49204 +
            (C20259 + C20260) * C20360 + (C14215 + C14216) * C20359 +
            (C13103 + C13102) * C20358) *
               C48963 * C49219) *
              C467 +
          ((C13644 * C20358 + C19700 * C20359 + (C19711 + C19710) * C20360 +
            (C11379 * C11261 + C20253 + C20253 + C49167 * C11265 +
             C11381 * C18024 + C20254 + C20254 + C48867 * C18026) *
                C49204) *
               C48963 * C49219 -
           ((C19710 + C19711) * C49204 + C19705 * C20360 + C13654 * C20359 +
            (C11591 + C11590) * C20358) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C48928 * C469 +
          ((((C13104 + C13105) * C49190 +
             (C11379 * C891 + C13088 + C13088 + C49167 * C901 + C11381 * C892 +
              C13089 + C13089 + C48867 * C902) *
                 C49062) *
                C7837 +
            ((C12882 + C12883) * C49190 +
             (C11379 * C2336 + C13090 + C13090 + C49167 * C2348 +
              C11381 * C2337 + C13091 + C13091 + C48867 * C2349) *
                 C49062) *
                C7838 +
            ((C12884 + C12885) * C49190 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C741 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C5357 + C5358 + C5359 + C5360) * C49190 +
            (C3824 * C891 + C5333 + C5333 + C3818 * C901 + C3826 * C892 +
             C5334 + C5334 + C3819 * C902 + C3828 * C893 + C5335 + C5335 +
             C3820 * C903 + C3830 * C894 + C5336 + C5336 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C741 -
           ((C11381 * C3692 + C20252 + C20252 + C48867 * C3698 +
             C11379 * C3691 + C20251 + C20251 + C49167 * C3697) *
                C49204 +
            (C20259 + C20260) * C20360 + (C14215 + C14216) * C20359 +
            (C13103 + C13102) * C20358) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C13104 + C13105) * C20358 + (C19164 + C19165) * C20359 +
            (C20635 + C20636) * C20360 +
            (C11379 * C3692 + C20629 + C20629 + C49167 * C3698 +
             C11381 * C3693 + C20630 + C20630 + C48867 * C3699) *
                C49204) *
               C48963 * C49219 -
           ((C20636 + C20635) * C49204 + (C19165 + C19164) * C20360 +
            (C13105 + C13104) * C20359 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C20358) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C241 +
          (((C13644 * C49190 + (C13666 + C13665) * C49062) * C7837 +
            (C13447 * C49190 + (C13664 + C13663) * C49062) * C7838 +
            ((C12149 + C12148) * C49190 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            (C13649 * C49062 + (C11593 + C11592) * C49190) * C7838 +
            (C13654 * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C741 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C241 +
          (((C4586 + C4585 + C4584 + C4583) * C49190 +
            (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
             C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
             C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C20358 +
            (C13102 + C13103) * C20359 + C20246 * C20360 +
            (C20260 + C20259) * C49204) *
               C48963 * C741 -
           ((C11381 * C3692 + C20252 + C20252 + C48867 * C3698 +
             C11379 * C3691 + C20251 + C20251 + C49167 * C3697) *
                C49204 +
            (C20259 + C20260) * C20360 + (C14215 + C14216) * C20359 +
            (C13103 + C13102) * C20358) *
               C48963 * C49219) *
              C241 +
          ((C13644 * C20358 + C19700 * C20359 + (C19711 + C19710) * C20360 +
            (C11379 * C11261 + C20253 + C20253 + C49167 * C11265 +
             C11381 * C18024 + C20254 + C20254 + C48867 * C18026) *
                C49204) *
               C48963 * C49219 -
           ((C19710 + C19711) * C49204 + C19705 * C20360 + C13654 * C20359 +
            (C11591 + C11590) * C20358) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C13102 + C13103) * C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
           C13449 * C49222) *
              C887 -
          (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
           ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
           ((C14215 + C14216) * C49062 + (C13103 + C13102) * C49190) * C7837) *
              C888 +
          (((C14216 + C14215) * C49190 +
            (C11379 * C2784 + C14205 + C14205 + C49167 * C2792 +
             C11381 * C2783 + C14206 + C14206 + C48867 * C2791) *
                C49062) *
               C7837 +
           ((C13666 + C13665) * C49190 +
            (C11379 * C3262 + C14207 + C14207 + C49167 * C3268 +
             C11381 * C3263 + C14208 + C14208 + C48867 * C3269) *
                C49062) *
               C7838 +
           ((C13664 + C13663) * C49190 +
            (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
             C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                C49062) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C5353 + C5354 + C5355 + C5356) * C49062) *
              C48963 * C887 -
          ((C6097 + C6098 + C6099 + C6100) * C49062 +
           (C5356 + C5355 + C5354 + C5353) * C49190) *
              C48963 * C888 +
          ((C6100 + C6099 + C6098 + C6097) * C49190 +
           (C3824 * C2784 + C6085 + C6085 + C3818 * C2792 + C3826 * C2783 +
            C6086 + C6086 + C3819 * C2791 + C3828 * C2782 + C6087 + C6087 +
            C3820 * C2790 + C3830 * C2785 + C6088 + C6088 + C49188 * C2793) *
               C49062) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C20358 +
           (C13102 + C13103) * C20359 + C20246 * C20360 + C21353 * C49204) *
              C48963 * C887 -
          ((C21364 + C21365) * C49204 + (C20259 + C20260) * C20360 +
           (C14215 + C14216) * C20359 + (C13103 + C13102) * C20358) *
              C48963 * C888 +
          (C20246 * C20358 + C21353 * C20359 + (C21365 + C21364) * C20360 +
           (C11379 * C18110 + C21358 + C21358 + C49167 * C18114 +
            C11381 * C18111 + C21359 + C21359 + C48867 * C18115) *
               C49204) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1026 * C249 + C1036 + C1036 + C1020 * C261 + C1028 * C248 + C1037 +
            C1037 + C1021 * C260 + C1030 * C247 + C1038 + C1038 +
            C49211 * C259) *
               C48975 * C49242 +
           (C1026 * C537 + C1039 + C1039 + C1020 * C547 + C1028 * C538 + C1040 +
            C1040 + C1021 * C548 + C1030 * C539 + C1041 + C1041 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C1030 * C540 + C1042 + C1042 + C49211 * C550 + C1028 * C539 +
            C1043 + C1043 + C1021 * C549 + C1026 * C538 + C1044 + C1044 +
            C1020 * C548) *
               C48975 * C49222 +
           (C1030 * C246 + C1045 + C1045 + C49211 * C258 + C1028 * C247 +
            C1046 + C1046 + C1021 * C259 + C1026 * C248 + C1047 + C1047 +
            C1020 * C260) *
               C48975 * C49242 +
           (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
            C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
            C1020 * C138) *
               C48975 * C49254) *
              C48945 * C48928 * C111 +
          ((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 + C1052 +
            C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
            C49211 * C141) *
               C48975 * C49254 +
           (C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 + C1055 +
            C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
            C49211 * C257) *
               C48975 * C49242 +
           (C1026 * C539 + C1057 + C1057 + C1020 * C549 + C1028 * C540 + C1058 +
            C1058 + C1021 * C550 + C1030 * C541 + C1059 + C1059 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C48928 * C110 -
          (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 + C151 +
           C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 + C115 * C125 +
           C153 + C153 + C102 * C139 + C113 * C124 + C154 + C154 +
           C101 * C138) *
              C48975 * C48963 * C48945 * C48928 * C111 +
          (C113 * C125 + C155 + C155 + C101 * C139 + C115 * C126 + C156 + C156 +
           C102 * C140 + C117 * C127 + C157 + C157 + C103 * C141 + C119 * C128 +
           C158 + C158 + C104 * C142 + C121 * C129 + C159 + C159 +
           C105 * C143) *
              C48975 * C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C7840 * C249 + C7850 + C7850 + C49251 * C261 + C7842 * C248 +
            C7851 + C7851 + C49238 * C260 + C7844 * C247 + C7852 + C7852 +
            C49211 * C259) *
               C48975 * C7838 +
           (C7840 * C537 + C7853 + C7853 + C49251 * C547 + C7842 * C538 +
            C7854 + C7854 + C49238 * C548 + C7844 * C539 + C7855 + C7855 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C7844 * C540 + C7856 + C7856 + C49211 * C550 + C7842 * C539 +
            C7857 + C7857 + C49238 * C549 + C7840 * C538 + C7858 + C7858 +
            C49251 * C548) *
               C48975 * C49222 +
           (C7844 * C246 + C7859 + C7859 + C49211 * C258 + C7842 * C247 +
            C7860 + C7860 + C49238 * C259 + C7840 * C248 + C7861 + C7861 +
            C49251 * C260) *
               C48975 * C7838 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C48975 * C7837) *
              C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C48975 * C7837 +
           (C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
            C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
            C49211 * C257) *
               C48975 * C7838 +
           (C7840 * C539 + C7871 + C7871 + C49251 * C549 + C7842 * C540 +
            C7872 + C7872 + C49238 * C550 + C7844 * C541 + C7873 + C7873 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           (C9184 * C249 + C9188 + C9188 + C48857 * C261) * C48975 * C9180 +
           (C9184 * C537 + C9189 + C9189 + C48857 * C547) * C48975 * C9181 +
           (C9184 * C1207 + C9190 + C9190 + C48857 * C1215) * C48975 * C9182 +
           (C9184 * C1715 + C9191 + C9191 + C48857 * C1721) * C48975 * C9183) *
              C48945 * C48928 * C110 -
          ((C9184 * C1716 + C9192 + C9192 + C48857 * C1722) * C48975 * C9183 +
           (C9184 * C1206 + C9193 + C9193 + C48857 * C1214) * C48975 * C9182 +
           (C9184 * C538 + C9194 + C9194 + C48857 * C548) * C48975 * C9181 +
           (C9184 * C248 + C9195 + C9195 + C48857 * C260) * C48975 * C9180 +
           (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
              C48945 * C48928 * C111 +
          ((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C48975 * C9179 +
           (C9184 * C247 + C9198 + C9198 + C48857 * C259) * C48975 * C9180 +
           (C9184 * C539 + C9199 + C9199 + C48857 * C549) * C48975 * C9181 +
           (C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C48975 * C9182 +
           (C9184 * C1717 + C9201 + C9201 + C48857 * C1723) * C48975 * C9183) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C7840 * C361 + C8240 + C8240 + C49251 * C373 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7844 * C359 + C8238 + C8238 +
            C49211 * C371) *
               C15429 +
           (C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C49225) *
              C48963 * C48945 * C48928 * C110 -
          ((C7844 * C893 + C15432 + C15432 + C49211 * C903 + C7842 * C892 +
            C15433 + C15433 + C49238 * C902 + C7840 * C891 + C15434 + C15434 +
            C49251 * C901) *
               C49225 +
           (C7844 * C358 + C8243 + C8243 + C49211 * C370 + C7842 * C359 +
            C8242 + C8242 + C49238 * C371 + C7840 * C360 + C8241 + C8241 +
            C49251 * C372) *
               C15429 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C15428) *
              C48963 * C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C15428 +
           (C7840 * C359 + C15435 + C15435 + C49251 * C371 + C7842 * C358 +
            C15436 + C15436 + C49238 * C370 + C7844 * C357 + C15437 + C15437 +
            C49211 * C369) *
               C15429 +
           (C7840 * C892 + C15438 + C15438 + C49251 * C902 + C7842 * C893 +
            C15439 + C15439 + C49238 * C903 + C7844 * C894 + C15440 + C15440 +
            C49211 * C904) *
               C49225) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C9324 * C15428 + C9697 * C15429 + C10238 * C49225) * C49242 +
           (C9325 * C15428 + C9696 * C15429 + C10239 * C49225) * C49222) *
              C48945 * C48928 * C110 -
          ((C10243 * C49225 + C10242 * C15429 + C9329 * C15428) * C49222 +
           (C10241 * C49225 + C10240 * C15429 + C9328 * C15428) * C49242 +
           (C10427 * C49225 + C10426 * C15429 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
               C49254) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C15428 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C15429 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C49225) *
               C49254 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C15428 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C15429 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C49225) *
               C49242 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C15428 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C15429 +
            (C9184 * C2340 + C10057 + C10057 + C48857 * C2352) * C49225) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C241 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C243 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C241 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C243 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C241 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C241 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C243 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C7840 * C361 + C8240 + C8240 + C49251 * C373 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7844 * C359 + C8238 + C8238 +
             C49211 * C371) *
                C15429 +
            (C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
             C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
             C49211 * C902) *
                C49225) *
               C48963 * C48945 * C241 -
           ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
             C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
             C49251 * C2347) *
                C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C15428 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C15429 +
            (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
             C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
             C15589 + C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C7844 * C893 + C15432 + C15432 + C49211 * C903 + C7842 * C892 +
             C15433 + C15433 + C49238 * C902 + C7840 * C891 + C15434 + C15434 +
             C49251 * C901) *
                C49225 +
            (C7844 * C358 + C8243 + C8243 + C49211 * C370 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7840 * C360 + C8241 + C8241 +
             C49251 * C372) *
                C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C48945 * C241 -
           ((C10692 * C49225 + C9695 * C15429 + C9326 * C15428) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C48945 * C49217) *
              C243 +
          (((C16906 + C16907 + C16908) * C49254 +
            (C16909 + C16910 + C16911) * C49242 +
            (C9330 * C15428 + C14461 * C15429 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C355 -
           ((C1030 * C1429 + C1442 + C1442 + C49211 * C1437 + C1028 * C1430 +
             C1443 + C1443 + C1021 * C1438 + C1026 * C1431 + C1444 + C1444 +
             C1020 * C1439) *
                C48975 * C49222 +
            (C1030 * C641 + C1445 + C1445 + C49211 * C651 + C1028 * C640 +
             C1446 + C1446 + C1021 * C650 + C1026 * C639 + C1447 + C1447 +
             C1020 * C649) *
                C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C243 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C243 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C355 -
           ((C7844 * C1429 + C8232 + C8232 + C49211 * C1437 + C7842 * C1430 +
             C8233 + C8233 + C49238 * C1438 + C7840 * C1431 + C8234 + C8234 +
             C49251 * C1439) *
                C48975 * C49222 +
            (C7844 * C641 + C8235 + C8235 + C49211 * C651 + C7842 * C640 +
             C8236 + C8236 + C49238 * C650 + C7840 * C639 + C8237 + C8237 +
             C49251 * C649) *
                C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C243 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           ((C9184 * C9421 + C9428 + C9428 + C48857 * C9425) * C48975 * C9183 +
            (C9184 * C1891 + C9429 + C9429 + C48857 * C1897) * C48975 * C9182 +
            (C9184 * C1431 + C9430 + C9430 + C48857 * C1439) * C48975 * C9181 +
            (C9184 * C639 + C9431 + C9431 + C48857 * C649) * C48975 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C243 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C355 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C15796 + C15797 + C15798) * C15428 +
            (C15799 + C15800 + C15801) * C15429 +
            (C7840 * C2783 + C15763 + C15763 + C49251 * C2791 + C7842 * C2782 +
             C15764 + C15764 + C49238 * C2790 + C7844 * C2785 + C15765 +
             C15765 + C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C355 -
           ((C10856 * C49225 + C10239 * C15429 + C9696 * C15428) * C49222 +
            (C10857 * C49225 + C10238 * C15429 + C9697 * C15428) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C15428 + C10427 * C15429 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C49254 +
            (C10240 * C15428 + C10241 * C15429 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C49242 +
            (C10242 * C15428 + C10243 * C15429 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C467 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C469 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C467 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C469 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C467 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C467 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C469 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C48945 * C467 -
           ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
             C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
             C49251 * C2347) *
                C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C15428 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C15429 +
            (C7840 * C2336 + C15587 + C15587 + C49251 * C2348 + C7842 * C2337 +
             C15588 + C15588 + C49238 * C2349 + C7844 * C2630 + C15589 +
             C15589 + C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 +
            (C16903 + C16904 + C16905) * C49222) *
               C48945 * C467 -
           ((C10692 * C49225 + C9695 * C15429 + C9326 * C15428) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C48945 * C49217) *
              C469 +
          (((C16906 + C16907 + C16908) * C49254 +
            (C16909 + C16910 + C16911) * C49242 +
            (C9330 * C15428 + C14461 * C15429 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C48945 * C533 -
          ((C1743 + C1744 + C1745) * C48975 * C49222 +
           (C1277 + C1276 + C1275) * C48975 * C49242 +
           (C1274 + C1273 + C1272) * C48975 * C49254) *
              C48945 * C534 +
          (C1739 * C49254 + (C1745 + C1744 + C1743) * C48975 * C49242 +
           (C1026 * C1715 + C1732 + C1732 + C1020 * C1721 + C1028 * C1716 +
            C1733 + C1733 + C1021 * C1722 + C1030 * C1717 + C1734 + C1734 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C533 -
          (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 + C265 +
           C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 + C115 * C248 +
           C267 + C267 + C102 * C260 + C113 * C249 + C268 + C268 +
           C101 * C261) *
              C48975 * C48963 * C48945 * C534 +
          (C113 * C537 + C553 + C553 + C101 * C547 + C115 * C538 + C554 + C554 +
           C102 * C548 + C117 * C539 + C555 + C555 + C103 * C549 + C119 * C540 +
           C556 + C556 + C104 * C550 + C121 * C541 + C557 + C557 +
           C105 * C551) *
              C48975 * C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C48945 * C533 -
          ((C8524 + C8525 + C8526) * C48975 * C49222 +
           (C8079 + C8078 + C8077) * C48975 * C7838 +
           (C8076 + C8075 + C8074) * C48975 * C7837) *
              C48945 * C534 +
          (C8520 * C7837 + (C8526 + C8525 + C8524) * C48975 * C7838 +
           (C7840 * C1715 + C8513 + C8513 + C49251 * C1721 + C7842 * C1716 +
            C8514 + C8514 + C49238 * C1722 + C7844 * C1717 + C8515 + C8515 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C48945 * C533 -
          (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
           C9332 * C9179) *
              C48945 * C534 +
          (C9333 * C9179 + C9334 * C9180 + C9335 * C9181 + C9591 * C9182 +
           (C9184 * C9581 + C9587 + C9587 + C48857 * C9583) * C48975 * C9183) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C15790 + C15791 + C15792) * C15429 +
           (C15793 + C15794 + C15795) * C49225) *
              C48963 * C48945 * C533 -
          ((C7844 * C2337 + C9113 + C9113 + C49211 * C2349 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7840 * C2335 + C9111 + C9111 +
            C49251 * C2347) *
               C49225 +
           (C8703 + C8704 + C8705) * C15429 +
           (C8076 + C8075 + C8074) * C15428) *
              C48963 * C48945 * C534 +
          (C8516 * C15428 + (C8702 + C8701 + C8700) * C15429 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C49225) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
              C48945 * C533 -
          ((C17315 + C17316 + C17317) * C49222 +
           (C16905 + C16904 + C16903) * C49242 +
           (C16902 + C16901 + C16900) * C49254) *
              C48945 * C534 +
          (C17318 * C49254 + (C17317 + C17316 + C17315) * C49242 +
           (C9327 * C15428 + C9694 * C15429 +
            (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49225) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C355 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C467 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C467 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C355 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C467 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C355 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C15428 +
            (C16219 + C16220 + C16221) * C15429 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C16221 + C16220 + C16219) * C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C355 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C467 +
          (((C17470 + C17469 + C17468) * C49254 +
            (C17467 + C17466 + C17465) * C49242 +
            (C9695 * C15428 + C10692 * C15429 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C17315 + C17316 + C17317) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C469 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C469 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C469 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C469 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C741 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C15796 + C15797 + C15798) * C15428 +
            (C15799 + C15800 + C15801) * C15429 +
            (C7840 * C2783 + C15763 + C15763 + C49251 * C2791 + C7842 * C2782 +
             C15764 + C15764 + C49238 * C2790 + C7844 * C2785 + C15765 +
             C15765 + C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C15801 + C15800 + C15799) * C49225 +
            (C15798 + C15797 + C15796) * C15429 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C15428) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C741 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C15428 + C10427 * C15429 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C49254 +
            (C10240 * C15428 + C10241 * C15429 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C49242 +
            (C10242 * C15428 + C10243 * C15429 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C16911 + C16910 + C16909) * C49222 +
            (C16908 + C16907 + C16906) * C49242 +
            (C10427 * C49225 + C10426 * C15429 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C15428) *
                C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C241 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C241 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C241 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C15428 +
            (C15790 + C15791 + C15792) * C15429 +
            (C15793 + C15794 + C15795) * C49225) *
               C48963 * C741 -
           ((C7844 * C2782 + C15748 + C15748 + C49211 * C2790 + C7842 * C2783 +
             C15749 + C15749 + C49238 * C2791 + C7840 * C2784 + C15750 +
             C15750 + C49251 * C2792) *
                C49225 +
            (C15795 + C15794 + C15793) * C15429 +
            (C15792 + C15791 + C15790) * C15428) *
               C48963 * C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C15428 +
            (C16219 + C16220 + C16221) * C15429 +
            (C7840 * C3262 + C16210 + C16210 + C49251 * C3268 + C7842 * C3263 +
             C16211 + C16211 + C49238 * C3269 + C7844 * C3264 + C16212 +
             C16212 + C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C16221 + C16220 + C16219) * C49225 +
            (C8703 + C8704 + C8705) * C15429 +
            (C8076 + C8075 + C8074) * C15428) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
             C10424 * C15429 + C10425 * C49225) *
                C49254 +
            (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
               C741 -
           ((C17465 + C17466 + C17467) * C49222 +
            (C17468 + C17469 + C17470) * C49242 +
            (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
               C49219) *
              C241 +
          (((C17470 + C17469 + C17468) * C49254 +
            (C17467 + C17466 + C17465) * C49242 +
            (C9695 * C15428 + C10692 * C15429 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C17315 + C17316 + C17317) * C49222 +
            (C16905 + C16904 + C16903) * C49242 +
            (C16902 + C16901 + C16900) * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C887 -
          ((C1928 + C1929 + C1930) * C48975 * C49222 +
           (C1931 + C1932 + C1933) * C48975 * C49242 +
           (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
            C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
            C1020 * C373) *
               C48975 * C49254) *
              C888 +
          ((C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 + C2355 +
            C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
            C49211 * C902) *
               C48975 * C49254 +
           (C1026 * C2335 + C2357 + C2357 + C1020 * C2347 + C1028 * C2336 +
            C2358 + C2358 + C1021 * C2348 + C1030 * C2337 + C2359 + C2359 +
            C49211 * C2349) *
               C48975 * C49242 +
           (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
            C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C887 -
          (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 + C377 +
           C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 + C115 * C360 +
           C379 + C379 + C102 * C372 + C113 * C361 + C380 + C380 +
           C101 * C373) *
              C48975 * C48963 * C888 +
          (C113 * C890 + C906 + C906 + C101 * C900 + C115 * C891 + C907 + C907 +
           C102 * C901 + C117 * C892 + C908 + C908 + C103 * C902 + C119 * C893 +
           C909 + C909 + C104 * C903 + C121 * C894 + C910 + C910 +
           C105 * C904) *
              C48975 * C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C887 -
          ((C8700 + C8701 + C8702) * C48975 * C49222 +
           (C8703 + C8704 + C8705) * C48975 * C7838 +
           (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
            C49251 * C373) *
               C48975 * C7837) *
              C888 +
          ((C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C48975 * C7837 +
           (C7840 * C2335 + C9111 + C9111 + C49251 * C2347 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7844 * C2337 + C9113 + C9113 +
            C49211 * C2349) *
               C48975 * C7838 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C887 -
          (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
           (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
              C888 +
          ((C9184 * C890 + C9934 + C9934 + C48857 * C900) * C48975 * C9179 +
           (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C48975 * C9180 +
           (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C48975 * C9181 +
           (C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C48975 * C9182 +
           (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C48975 * C9183) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C15428 +
           (C15790 + C15791 + C15792) * C15429 + C16634 * C49225) *
              C48963 * C887 -
          ((C16641 + C16642 + C16643) * C49225 +
           (C15795 + C15794 + C15793) * C15429 +
           (C15792 + C15791 + C15790) * C15428) *
              C48963 * C888 +
          (C16634 * C15428 + (C16643 + C16642 + C16641) * C15429 +
           (C7840 * C3691 + C16631 + C16631 + C49251 * C3697 + C7842 * C3692 +
            C16632 + C16632 + C49238 * C3698 + C7844 * C3693 + C16633 + C16633 +
            C49211 * C3699) *
               C49225) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C15428 +
            C10424 * C15429 + C10425 * C49225) *
               C49254 +
           (C16900 + C16901 + C16902) * C49242 + C17318 * C49222) *
              C887 -
          ((C17465 + C17466 + C17467) * C49222 +
           (C17468 + C17469 + C17470) * C49242 +
           (C11275 * C49225 + C10425 * C15429 + C10424 * C15428) * C49254) *
              C888 +
          ((C10425 * C15428 + C11275 * C15429 +
            (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C49225) *
               C49254 +
           (C10238 * C15428 + C10857 * C15429 +
            (C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C49225) *
               C49242 +
           (C10239 * C15428 + C10856 * C15429 +
            (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49225) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C31480 +
            (C28650 + C28651 + C28652) * C49062) *
               C49189 +
           ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
              C48945 * C48928 * C110 -
          (((C28425 + C28424 + C28423) * C49062 +
            (C27030 + C27029 + C27028) * C31480) *
               C49022 +
           ((C28655 + C28654 + C28653) * C49062 +
            (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
             C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 + C26812 +
             C48862 * C138) *
                C31480) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C48045 * C125 + C26813 + C26813 + C48862 * C139 + C48038 * C126 +
             C26814 + C26814 + C48870 * C140 + C26792 * C127 + C26815 + C26815 +
             C26784 * C141) *
                C31480 +
            (C48045 * C359 + C28211 + C28211 + C48862 * C371 + C48038 * C358 +
             C28212 + C28212 + C48870 * C370 + C26792 * C357 + C28213 + C28213 +
             C26784 * C369) *
                C49062) *
               C49189 +
           ((C48045 * C247 + C26816 + C26816 + C48862 * C259 + C48038 * C246 +
             C26817 + C26817 + C48870 * C258 + C26792 * C245 + C26818 + C26818 +
             C26784 * C257) *
                C31480 +
            (C48045 * C641 + C28214 + C28214 + C48862 * C651 + C48038 * C642 +
             C28215 + C28215 + C48870 * C652 + C26792 * C643 + C28216 + C28216 +
             C26784 * C653) *
                C49062) *
               C49022) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C48945 * C241 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C31480) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C31480) * C49189) *
               C48945 * C49217) *
              C243 +
          ((((C27028 + C27029 + C27030) * C31480 +
             (C28423 + C28424 + C28425) * C49062) *
                C49189 +
            ((C27031 + C27032 + C27033) * C31480 +
             (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
              C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
              C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C28425 + C28424 + C28423) * C49062 +
             (C27030 + C27029 + C27028) * C31480) *
                C49022 +
            ((C28655 + C28654 + C28653) * C49062 +
             (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
              C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 +
              C26812 + C48862 * C138) *
                 C31480) *
                C49189) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C355 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C31480) * C49022 +
            ((C29761 + C29762 + C29763) * C49062 +
             (C28652 + C28651 + C28650) * C31480) *
                C49189) *
               C49219) *
              C48928 * C243 +
          ((((C28653 + C28654 + C28655) * C31480 +
             (C48045 * C891 + C28632 + C28632 + C48862 * C901 + C48038 * C892 +
              C28633 + C28633 + C48870 * C902 + C26792 * C893 + C28634 +
              C28634 + C26784 * C903) *
                 C49062) *
                C49189 +
            ((C28423 + C28424 + C28425) * C31480 +
             (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
              C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
              C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C28425 + C28424 + C28423) * C49062 +
             (C27030 + C27029 + C27028) * C31480) *
                C49022 +
            ((C28655 + C28654 + C28653) * C49062 +
             (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
              C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 +
              C26812 + C48862 * C138) *
                 C31480) *
                C49189) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C48945 * C467 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C31480) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C31480) * C49189) *
               C48945 * C49217) *
              C469 +
          ((((C27028 + C27029 + C27030) * C31480 +
             (C28423 + C28424 + C28425) * C49062) *
                C49189 +
            ((C27031 + C27032 + C27033) * C31480 +
             (C48045 * C1430 + C27195 + C27195 + C48862 * C1438 +
              C48038 * C1429 + C27196 + C27196 + C48870 * C1437 +
              C26792 * C1432 + C27197 + C27197 + C26784 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C28425 + C28424 + C28423) * C49062 +
             (C27030 + C27029 + C27028) * C31480) *
                C49022 +
            ((C28655 + C28654 + C28653) * C49062 +
             (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
              C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 +
              C26812 + C48862 * C138) *
                 C31480) *
                C49189) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C31480 +
            (C28650 + C28651 + C28652) * C49062) *
               C49189 +
           ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
              C48945 * C533 -
          (((C27648 + C27649 + C27650) * C49062 +
            (C27027 + C27026 + C27025) * C31480) *
               C49022 +
           (C29202 * C49062 + (C27024 + C27023 + C27022) * C31480) * C49189) *
              C48945 * C534 +
          ((C27464 * C31480 + (C27650 + C27649 + C27648) * C49062) * C49189 +
           ((C27474 + C27473 + C27472) * C31480 +
            (C48045 * C1891 + C27633 + C27633 + C48862 * C1897 +
             C48038 * C1892 + C27634 + C27634 + C48870 * C1898 +
             C26792 * C1893 + C27635 + C27635 + C26784 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C355 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C31480) * C49022 +
            ((C29761 + C29762 + C29763) * C49062 +
             (C28652 + C28651 + C28650) * C31480) *
                C49189) *
               C49219) *
              C467 +
          (((C29198 * C31480 + (C29208 + C29207 + C29206) * C49062) * C49189 +
            ((C27650 + C27649 + C27648) * C31480 +
             (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 +
              C48038 * C2339 + C28063 + C28063 + C48870 * C2351 +
              C26792 * C2340 + C28064 + C28064 + C26784 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C31480) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C31480) * C49189) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C741 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C31480) * C49022 +
            ((C29761 + C29762 + C29763) * C49062 +
             (C28652 + C28651 + C28650) * C31480) *
                C49189) *
               C49219) *
              C48928 * C469 +
          ((((C28653 + C28654 + C28655) * C31480 +
             (C48045 * C891 + C28632 + C28632 + C48862 * C901 + C48038 * C892 +
              C28633 + C28633 + C48870 * C902 + C26792 * C893 + C28634 +
              C28634 + C26784 * C903) *
                 C49062) *
                C49189 +
            ((C28423 + C28424 + C28425) * C31480 +
             (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
              C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
              C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C28425 + C28424 + C28423) * C49062 +
             (C27030 + C27029 + C27028) * C31480) *
                C49022 +
            ((C28655 + C28654 + C28653) * C49062 +
             (C26792 * C126 + C26810 + C26810 + C26784 * C140 + C48038 * C125 +
              C26811 + C26811 + C48870 * C139 + C48045 * C124 + C26812 +
              C26812 + C48862 * C138) *
                 C31480) *
                C49189) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
              C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 +
              C26797 + C26784 * C139) *
                 C31480 +
             (C28650 + C28651 + C28652) * C49062) *
                C49189 +
            ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
               C741 -
           (((C29206 + C29207 + C29208) * C49062 + C29202 * C31480) * C49022 +
            ((C29761 + C29762 + C29763) * C49062 +
             (C28652 + C28651 + C28650) * C31480) *
                C49189) *
               C49219) *
              C241 +
          (((C29198 * C31480 + (C29208 + C29207 + C29206) * C49062) * C49189 +
            ((C27650 + C27649 + C27648) * C31480 +
             (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 +
              C48038 * C2339 + C28063 + C28063 + C48870 * C2351 +
              C26792 * C2340 + C28064 + C28064 + C26784 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C27648 + C27649 + C27650) * C49062 +
             (C27027 + C27026 + C27025) * C31480) *
                C49022 +
            (C29202 * C49062 + (C27024 + C27023 + C27022) * C31480) * C49189) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 + C48038 * C124 +
             C26796 + C26796 + C48870 * C138 + C26792 * C125 + C26797 + C26797 +
             C26784 * C139) *
                C31480 +
            (C28650 + C28651 + C28652) * C49062) *
               C49189 +
           ((C27022 + C27023 + C27024) * C31480 + C29198 * C49062) * C49022) *
              C887 -
          (((C29206 + C29207 + C29208) * C49062 + C29202 * C31480) * C49022 +
           ((C29761 + C29762 + C29763) * C49062 +
            (C28652 + C28651 + C28650) * C31480) *
               C49189) *
              C888 +
          (((C29763 + C29762 + C29761) * C31480 +
            (C48045 * C2784 + C29749 + C29749 + C48862 * C2792 +
             C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
             C26792 * C2782 + C29751 + C29751 + C26784 * C2790) *
                C49062) *
               C49189 +
           ((C29208 + C29207 + C29206) * C31480 +
            (C48045 * C3262 + C29752 + C29752 + C48862 * C3268 +
             C48038 * C3263 + C29753 + C29753 + C48870 * C3269 +
             C26792 * C3264 + C29754 + C29754 + C26784 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49058 +
            (C25556 + C25557) * C49065 + C26658 * C36954) *
               C49189 +
           ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C25321 + C25320) * C36954 + (C25319 + C25318) * C49065 +
            (C24015 + C24014) * C49058) *
               C49022 +
           ((C25563 + C25562) * C36954 + (C25561 + C25560) * C49065 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49058) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
             C23819 + C23819 + C48867 * C140) *
                C49058 +
            (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
             C25089 + C25089 + C48867 * C370) *
                C49065 +
            (C23797 * C892 + C25090 + C25090 + C23791 * C902 + C23799 * C893 +
             C25091 + C25091 + C48867 * C903) *
                C36954) *
               C49189 +
           ((C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
             C23821 + C23821 + C48867 * C258) *
                C49058 +
            (C23797 * C641 + C25092 + C25092 + C23791 * C651 + C23799 * C642 +
             C25093 + C25093 + C48867 * C652) *
                C49065 +
            (C23797 * C2337 + C25094 + C25094 + C23791 * C2349 +
             C23799 * C2630 + C25095 + C25095 + C48867 * C2632) *
                C36954) *
               C49022) *
              C48945 * C48928 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C48945 * C241 -
           (((C25912 + C25913) * C36954 + C30848 * C49065 +
             (C24011 + C24010) * C49058) *
                C49022 +
            (C26114 * C36954 + C26115 * C49065 + (C24009 + C24008) * C49058) *
                C49189) *
               C48945 * C49217) *
              C243 +
          ((((C24014 + C24015) * C49058 + (C25318 + C25319) * C49065 +
             (C25320 + C25321) * C36954) *
                C49189 +
            ((C24016 + C24017) * C49058 + (C30114 + C30115) * C49065 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C36954) *
                C49022) *
               C48945 * C49217 -
           (((C25321 + C25320) * C36954 + (C25319 + C25318) * C49065 +
             (C24015 + C24014) * C49058) *
                C49022 +
            ((C25563 + C25562) * C36954 + (C25561 + C25560) * C49065 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49058) *
                C49189) *
               C48945 * C241) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C355 -
           (((C26122 + C26123) * C36954 + C26114 * C49065 + C26115 * C49058) *
                C49022 +
            ((C26671 + C26672) * C36954 + (C25559 + C25558) * C49065 +
             (C25557 + C25556) * C49058) *
                C49189) *
               C49219) *
              C48928 * C243 +
          ((((C25560 + C25561) * C49058 + (C25562 + C25563) * C49065 +
             (C34510 + C34511) * C36954) *
                C49189 +
            ((C25318 + C25319) * C49058 + (C25320 + C25321) * C49065 +
             (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
              C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                 C36954) *
                C49022) *
               C49219 -
           (((C25321 + C25320) * C36954 + (C25319 + C25318) * C49065 +
             (C24015 + C24014) * C49058) *
                C49022 +
            ((C25563 + C25562) * C36954 + (C25561 + C25560) * C49065 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49058) *
                C49189) *
               C355) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C48945 * C467 -
           (((C25912 + C25913) * C36954 + C30848 * C49065 +
             (C24011 + C24010) * C49058) *
                C49022 +
            (C26114 * C36954 + C26115 * C49065 + (C24009 + C24008) * C49058) *
                C49189) *
               C48945 * C49217) *
              C469 +
          ((((C24014 + C24015) * C49058 + (C25318 + C25319) * C49065 +
             (C25320 + C25321) * C36954) *
                C49189 +
            ((C24016 + C24017) * C49058 + (C30114 + C30115) * C49065 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C36954) *
                C49022) *
               C48945 * C49217 -
           (((C25321 + C25320) * C36954 + (C25319 + C25318) * C49065 +
             (C24015 + C24014) * C49058) *
                C49022 +
            ((C25563 + C25562) * C36954 + (C25561 + C25560) * C49065 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49058) *
                C49189) *
               C48945 * C467) *
              C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49058 +
            (C25556 + C25557) * C49065 + C26658 * C36954) *
               C49189 +
           ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
               C49022) *
              C48945 * C533 -
          (((C25912 + C25913) * C36954 + C30848 * C49065 +
            (C24011 + C24010) * C49058) *
               C49022 +
           (C26114 * C36954 + C26115 * C49065 + (C24009 + C24008) * C49058) *
               C49189) *
              C48945 * C534 +
          ((C24394 * C49058 + C30651 * C49065 + (C25913 + C25912) * C36954) *
               C49189 +
           (C24395 * C49058 + (C24567 + C24566) * C49065 +
            (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
             C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                C36954) *
               C49022) *
              C48945 * C535) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C355 -
           (((C26122 + C26123) * C36954 + C26114 * C49065 + C26115 * C49058) *
                C49022 +
            ((C26671 + C26672) * C36954 + (C25559 + C25558) * C49065 +
             (C25557 + C25556) * C49058) *
                C49189) *
               C49219) *
              C467 +
          (((C26108 * C49058 + C26109 * C49065 + (C26123 + C26122) * C36954) *
                C49189 +
            (C30651 * C49058 + (C25913 + C25912) * C49065 +
             (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
              C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                 C36954) *
                C49022) *
               C49219 -
           (((C25912 + C25913) * C36954 + C30848 * C49065 +
             (C24011 + C24010) * C49058) *
                C49022 +
            (C26114 * C36954 + C26115 * C49065 + (C24009 + C24008) * C49058) *
                C49189) *
               C355) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C741 -
           (((C26122 + C26123) * C36954 + C26114 * C49065 + C26115 * C49058) *
                C49022 +
            ((C26671 + C26672) * C36954 + (C25559 + C25558) * C49065 +
             (C25557 + C25556) * C49058) *
                C49189) *
               C49219) *
              C48928 * C469 +
          ((((C25560 + C25561) * C49058 + (C25562 + C25563) * C49065 +
             (C34510 + C34511) * C36954) *
                C49189 +
            ((C25318 + C25319) * C49058 + (C25320 + C25321) * C49065 +
             (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
              C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                 C36954) *
                C49022) *
               C49219 -
           (((C25321 + C25320) * C36954 + (C25319 + C25318) * C49065 +
             (C24015 + C24014) * C49058) *
                C49022 +
            ((C25563 + C25562) * C36954 + (C25561 + C25560) * C49065 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C49058) *
                C49189) *
               C741) *
              C48928 * C49215)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C49058 +
             (C25556 + C25557) * C49065 + C26658 * C36954) *
                C49189 +
            ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
                C49022) *
               C741 -
           (((C26122 + C26123) * C36954 + C26114 * C49065 + C26115 * C49058) *
                C49022 +
            ((C26671 + C26672) * C36954 + (C25559 + C25558) * C49065 +
             (C25557 + C25556) * C49058) *
                C49189) *
               C49219) *
              C241 +
          (((C26108 * C49058 + C26109 * C49065 + (C26123 + C26122) * C36954) *
                C49189 +
            (C30651 * C49058 + (C25913 + C25912) * C49065 +
             (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
              C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                 C36954) *
                C49022) *
               C49219 -
           (((C25912 + C25913) * C36954 + C30848 * C49065 +
             (C24011 + C24010) * C49058) *
                C49022 +
            (C26114 * C36954 + C26115 * C49065 + (C24009 + C24008) * C49058) *
                C49189) *
               C741) *
              C49217) *
         C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49058 +
            (C25556 + C25557) * C49065 + C26658 * C36954) *
               C49189 +
           ((C24008 + C24009) * C49058 + C26108 * C49065 + C26109 * C36954) *
               C49022) *
              C887 -
          (((C26122 + C26123) * C36954 + C26114 * C49065 + C26115 * C49058) *
               C49022 +
           ((C26671 + C26672) * C36954 + (C25559 + C25558) * C49065 +
            (C25557 + C25556) * C49058) *
               C49189) *
              C888 +
          ((C26658 * C49058 + C35228 * C49065 + (C35240 + C35239) * C36954) *
               C49189 +
           (C26109 * C49058 + (C26123 + C26122) * C49065 +
            (C23797 * C11261 + C26665 + C26665 + C23791 * C11265 +
             C23799 * C18024 + C26666 + C26666 + C48867 * C18026) *
                C36954) *
               C49022) *
              C889) *
         C48928 * C48894) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           (C24394 * C31480 + C30651 * C49062) * C49222) *
              C48945 * C48928 * C110 -
          (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
           ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
           ((C25561 + C25560) * C49062 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C31480) *
               C49254) *
              C48945 * C48928 * C111 +
          (((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
             C23819 + C23819 + C48867 * C140) *
                C31480 +
            (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
             C25089 + C25089 + C48867 * C370) *
                C49062) *
               C49254 +
           ((C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
             C23821 + C23821 + C48867 * C258) *
                C31480 +
            (C23797 * C641 + C25092 + C25092 + C23791 * C651 + C23799 * C642 +
             C25093 + C25093 + C48867 * C652) *
                C49062) *
               C49242 +
           ((C23797 * C539 + C23822 + C23822 + C23791 * C549 + C23799 * C540 +
             C23823 + C23823 + C48867 * C550) *
                C31480 +
            (C23797 * C1429 + C29910 + C29910 + C23791 * C1437 +
             C23799 * C1432 + C29911 + C29911 + C48867 * C1440) *
                C49062) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C22565 * C361 + C22913 + C22913 + C49260 * C373 + C22567 * C360 +
            C22912 + C22912 + C49253 * C372 + C22569 * C359 + C22911 + C22911 +
            C49240 * C371 + C22571 * C358 + C22910 + C22910 + C49188 * C370) *
               C49062) *
              C48963 * C48945 * C48928 * C110 -
          ((C22571 * C357 + C22917 + C22917 + C49188 * C369 + C22569 * C358 +
            C22916 + C22916 + C49240 * C370 + C22567 * C359 + C22915 + C22915 +
            C49253 * C371 + C22565 * C360 + C22914 + C22914 + C49260 * C372) *
               C49062 +
           (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
            C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
            C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
               C31480) *
              C48963 * C48945 * C48928 * C111 +
          ((C22565 * C125 + C22590 + C22590 + C49260 * C139 + C22567 * C126 +
            C22591 + C22591 + C49253 * C140 + C22569 * C127 + C22592 + C22592 +
            C49240 * C141 + C22571 * C128 + C22593 + C22593 + C49188 * C142) *
               C31480 +
           (C22565 * C359 + C31483 + C31483 + C49260 * C371 + C22567 * C358 +
            C31484 + C31484 + C49253 * C370 + C22569 * C357 + C31485 + C31485 +
            C49240 * C369 + C22571 * C362 + C31486 + C31486 + C49188 * C374) *
               C49062) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C49262 +
           (C25556 + C25557) * C49259 + C26658 * C49250 +
           (C26672 + C26671) * C49204) *
              C48963 * C48945 * C48928 * C110 -
          ((C23799 * C2782 + C25537 + C25537 + C48867 * C2790 + C23797 * C2783 +
            C25536 + C25536 + C23791 * C2791) *
               C49204 +
           (C25563 + C25562) * C49250 + (C25561 + C25560) * C49259 +
           (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
            C23817 + C23817 + C23791 * C138) *
               C49262) *
              C48963 * C48945 * C48928 * C111 +
          ((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
            C23819 + C23819 + C48867 * C140) *
               C49262 +
           (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
            C25089 + C25089 + C48867 * C370) *
               C49259 +
           (C23797 * C892 + C25090 + C25090 + C23791 * C902 + C23799 * C893 +
            C25091 + C25091 + C48867 * C903) *
               C49250 +
           (C23797 * C2782 + C34238 + C34238 + C23791 * C2790 + C23799 * C2785 +
            C34239 + C34239 + C48867 * C2793) *
               C49204) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C48945 * C241 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C48945 * C49217) *
              C243 +
          ((((C24014 + C24015) * C31480 + (C25318 + C25319) * C49062) * C49254 +
            ((C24016 + C24017) * C31480 + (C30114 + C30115) * C49062) * C49242 +
            ((C24018 + C24019) * C31480 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C22565 * C361 + C22913 + C22913 + C49260 * C373 + C22567 * C360 +
             C22912 + C22912 + C49253 * C372 + C22569 * C359 + C22911 + C22911 +
             C49240 * C371 + C22571 * C358 + C22910 + C22910 + C49188 * C370) *
                C49062) *
               C48963 * C48945 * C241 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C22772 + C22773 + C22774 + C22775) * C31480 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C22571 * C357 + C22917 + C22917 + C49188 * C369 + C22569 * C358 +
             C22916 + C22916 + C49240 * C370 + C22567 * C359 + C22915 + C22915 +
             C49253 * C371 + C22565 * C360 + C22914 + C22914 + C49260 * C372) *
                C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C48945 * C241 -
           ((C26122 + C26123) * C49204 + C26114 * C49250 + C26115 * C49259 +
            (C24009 + C24008) * C49262) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C24014 + C24015) * C49262 + (C25318 + C25319) * C49259 +
            (C25320 + C25321) * C49250 +
            (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
             C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                C49204) *
               C48963 * C48945 * C49217 -
           ((C23799 * C2782 + C25537 + C25537 + C48867 * C2790 +
             C23797 * C2783 + C25536 + C25536 + C23791 * C2791) *
                C49204 +
            (C25563 + C25562) * C49250 + (C25561 + C25560) * C49259 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49262) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C355 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C48928 * C243 +
          ((((C25560 + C25561) * C31480 + (C25562 + C25563) * C49062) * C49254 +
            ((C25318 + C25319) * C31480 + (C25320 + C25321) * C49062) * C49242 +
            ((C30114 + C30115) * C31480 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C355 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C31787 + C31788 + C31789 + C31790) * C31480 +
            (C22565 * C891 + C31763 + C31763 + C49260 * C901 + C22567 * C892 +
             C31764 + C31764 + C49253 * C902 + C22569 * C893 + C31765 + C31765 +
             C49240 * C903 + C22571 * C894 + C31766 + C31766 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C355 -
           ((C23799 * C3692 + C26664 + C26664 + C48867 * C3698 +
             C23797 * C3691 + C26663 + C26663 + C23791 * C3697) *
                C49204 +
            (C26671 + C26672) * C49250 + (C25559 + C25558) * C49259 +
            (C25557 + C25556) * C49262) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C25560 + C25561) * C49262 + (C25562 + C25563) * C49259 +
            (C34510 + C34511) * C49250 +
            (C23797 * C3692 + C34504 + C34504 + C23791 * C3698 +
             C23799 * C3693 + C34505 + C34505 + C48867 * C3699) *
                C49204) *
               C48963 * C49219 -
           ((C34511 + C34510) * C49204 + (C25563 + C25562) * C49250 +
            (C25561 + C25560) * C49259 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49262) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C48945 * C467 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C48945 * C49217) *
              C469 +
          ((((C24014 + C24015) * C31480 + (C25318 + C25319) * C49062) * C49254 +
            ((C24016 + C24017) * C31480 + (C30114 + C30115) * C49062) * C49242 +
            ((C24018 + C24019) * C31480 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C48945 * C467 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C22772 + C22773 + C22774 + C22775) * C31480 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C48945 * C467 -
           ((C26122 + C26123) * C49204 + C26114 * C49250 + C26115 * C49259 +
            (C24009 + C24008) * C49262) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C24014 + C24015) * C49262 + (C25318 + C25319) * C49259 +
            (C25320 + C25321) * C49250 +
            (C23797 * C3263 + C25538 + C25538 + C23791 * C3269 +
             C23799 * C3264 + C25539 + C25539 + C48867 * C3270) *
                C49204) *
               C48963 * C48945 * C49217 -
           ((C34511 + C34510) * C49204 + (C25563 + C25562) * C49250 +
            (C25561 + C25560) * C49259 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49262) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           C33407 * C49222) *
              C48945 * C533 -
          (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
           (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
           (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
              C48945 * C534 +
          (C33407 * C49254 +
           (C24395 * C31480 + (C24567 + C24566) * C49062) * C49242 +
           ((C24409 + C24408) * C31480 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C49062) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C31783 + C31784 + C31785 + C31786) * C49062) *
              C48963 * C48945 * C533 -
          ((C23324 + C23325 + C23326 + C23327) * C49062 +
           (C22771 + C22770 + C22769 + C22768) * C31480) *
              C48963 * C48945 * C534 +
          ((C23173 + C23172 + C23171 + C23170) * C31480 +
           (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 + C22567 * C1430 +
            C23313 + C23313 + C49253 * C1438 + C22569 * C1429 + C23314 +
            C23314 + C49240 * C1437 + C22571 * C1432 + C23315 + C23315 +
            C49188 * C1440) *
               C49062) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C49262 +
           (C25556 + C25557) * C49259 + C26658 * C49250 +
           (C26672 + C26671) * C49204) *
              C48963 * C48945 * C533 -
          ((C26122 + C26123) * C49204 + C26114 * C49250 + C26115 * C49259 +
           (C24009 + C24008) * C49262) *
              C48963 * C48945 * C534 +
          (C24394 * C49262 + C30651 * C49259 + (C25913 + C25912) * C49250 +
           (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
            C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
               C49204) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C355 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C467 +
          (((C26108 * C31480 + C26109 * C49062) * C49254 +
            (C30651 * C31480 + (C25913 + C25912) * C49062) * C49242 +
            ((C24567 + C24566) * C31480 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C355 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C467 +
          (((C23327 + C23326 + C23325 + C23324) * C31480 +
            (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 +
             C22567 * C2336 + C23691 + C23691 + C49253 * C2348 +
             C22569 * C2337 + C23692 + C23692 + C49240 * C2349 +
             C22571 * C2630 + C23693 + C23693 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C355 -
           ((C23799 * C3692 + C26664 + C26664 + C48867 * C3698 +
             C23797 * C3691 + C26663 + C26663 + C23791 * C3697) *
                C49204 +
            (C26671 + C26672) * C49250 + (C25559 + C25558) * C49259 +
            (C25557 + C25556) * C49262) *
               C48963 * C49219) *
              C467 +
          ((C26108 * C49262 + C26109 * C49259 + (C26123 + C26122) * C49250 +
            (C23797 * C11261 + C26665 + C26665 + C23791 * C11265 +
             C23799 * C18024 + C26666 + C26666 + C48867 * C18026) *
                C49204) *
               C48963 * C49219 -
           ((C26122 + C26123) * C49204 + C26114 * C49250 + C26115 * C49259 +
            (C24009 + C24008) * C49262) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C48928 * C469 +
          ((((C25560 + C25561) * C31480 + (C25562 + C25563) * C49062) * C49254 +
            ((C25318 + C25319) * C31480 + (C25320 + C25321) * C49062) * C49242 +
            ((C30114 + C30115) * C31480 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C741 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C31787 + C31788 + C31789 + C31790) * C31480 +
            (C22565 * C891 + C31763 + C31763 + C49260 * C901 + C22567 * C892 +
             C31764 + C31764 + C49253 * C902 + C22569 * C893 + C31765 + C31765 +
             C49240 * C903 + C22571 * C894 + C31766 + C31766 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C741 -
           ((C23799 * C3692 + C26664 + C26664 + C48867 * C3698 +
             C23797 * C3691 + C26663 + C26663 + C23791 * C3697) *
                C49204 +
            (C26671 + C26672) * C49250 + (C25559 + C25558) * C49259 +
            (C25557 + C25556) * C49262) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C25560 + C25561) * C49262 + (C25562 + C25563) * C49259 +
            (C34510 + C34511) * C49250 +
            (C23797 * C3692 + C34504 + C34504 + C23791 * C3698 +
             C23799 * C3693 + C34505 + C34505 + C48867 * C3699) *
                C49204) *
               C48963 * C49219 -
           ((C34511 + C34510) * C49204 + (C25563 + C25562) * C49250 +
            (C25561 + C25560) * C49259 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C49262) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C241 +
          (((C26108 * C31480 + C26109 * C49062) * C49254 +
            (C30651 * C31480 + (C25913 + C25912) * C49062) * C49242 +
            ((C24567 + C24566) * C31480 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C741 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C241 +
          (((C23327 + C23326 + C23325 + C23324) * C31480 +
            (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 +
             C22567 * C2336 + C23691 + C23691 + C49253 * C2348 +
             C22569 * C2337 + C23692 + C23692 + C49240 * C2349 +
             C22571 * C2630 + C23693 + C23693 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C49262 +
            (C25556 + C25557) * C49259 + C26658 * C49250 +
            (C26672 + C26671) * C49204) *
               C48963 * C741 -
           ((C23799 * C3692 + C26664 + C26664 + C48867 * C3698 +
             C23797 * C3691 + C26663 + C26663 + C23791 * C3697) *
                C49204 +
            (C26671 + C26672) * C49250 + (C25559 + C25558) * C49259 +
            (C25557 + C25556) * C49262) *
               C48963 * C49219) *
              C241 +
          ((C26108 * C49262 + C26109 * C49259 + (C26123 + C26122) * C49250 +
            (C23797 * C11261 + C26665 + C26665 + C23791 * C11265 +
             C23799 * C18024 + C26666 + C26666 + C48867 * C18026) *
                C49204) *
               C48963 * C49219 -
           ((C26122 + C26123) * C49204 + C26114 * C49250 + C26115 * C49259 +
            (C24009 + C24008) * C49262) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           C33407 * C49222) *
              C887 -
          (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
           (C26114 * C49062 + C26115 * C31480) * C49242 +
           ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) * C49254) *
              C888 +
          ((C26658 * C31480 + (C26672 + C26671) * C49062) * C49254 +
           (C26109 * C31480 + (C26123 + C26122) * C49062) * C49242 +
           ((C25913 + C25912) * C31480 +
            (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
             C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                C49062) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C31783 + C31784 + C31785 + C31786) * C49062) *
              C48963 * C887 -
          ((C32527 + C32528 + C32529 + C32530) * C49062 +
           (C31786 + C31785 + C31784 + C31783) * C31480) *
              C48963 * C888 +
          ((C32530 + C32529 + C32528 + C32527) * C31480 +
           (C22565 * C2784 + C32515 + C32515 + C49260 * C2792 + C22567 * C2783 +
            C32516 + C32516 + C49253 * C2791 + C22569 * C2782 + C32517 +
            C32517 + C49240 * C2790 + C22571 * C2785 + C32518 + C32518 +
            C49188 * C2793) *
               C49062) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
            C23803 + C23803 + C48867 * C138) *
               C49262 +
           (C25556 + C25557) * C49259 + C26658 * C49250 + C35228 * C49204) *
              C48963 * C887 -
          ((C35239 + C35240) * C49204 + (C26671 + C26672) * C49250 +
           (C25559 + C25558) * C49259 + (C25557 + C25556) * C49262) *
              C48963 * C888 +
          (C26658 * C49262 + C35228 * C49259 + (C35240 + C35239) * C49250 +
           (C23797 * C18110 + C35233 + C35233 + C23791 * C18114 +
            C23799 * C18111 + C35234 + C35234 + C48867 * C18115) *
               C49204) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                     C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                     C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                        C49058 +
                    (C28650 + C28651 + C28652) * C49065 +
                    (C29763 + C29762 + C29761) * C36954) *
                       C48963 * C48945 * C48928 * C110 -
                   ((C26792 * C893 + C28634 + C28634 + C26784 * C903 +
                     C48038 * C892 + C28633 + C28633 + C48870 * C902 +
                     C48045 * C891 + C28632 + C28632 + C48862 * C901) *
                        C36954 +
                    (C28655 + C28654 + C28653) * C49065 +
                    (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                     C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                     C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                        C49058) *
                       C48963 * C48945 * C48928 * C111 +
                   ((C48045 * C125 + C26813 + C26813 + C48862 * C139 +
                     C48038 * C126 + C26814 + C26814 + C48870 * C140 +
                     C26792 * C127 + C26815 + C26815 + C26784 * C141) *
                        C49058 +
                    (C48045 * C359 + C28211 + C28211 + C48862 * C371 +
                     C48038 * C358 + C28212 + C28212 + C48870 * C370 +
                     C26792 * C357 + C28213 + C28213 + C26784 * C369) *
                        C49065 +
                    (C48045 * C892 + C36956 + C36956 + C48862 * C902 +
                     C48038 * C893 + C36957 + C36957 + C48870 * C903 +
                     C26792 * C894 + C36958 + C36958 + C26784 * C904) *
                        C36954) *
                       C48963 * C48945 * C48928 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C48945 * C241 -
                    ((C29206 + C29207 + C29208) * C36954 + C29202 * C49065 +
                     (C27024 + C27023 + C27022) * C49058) *
                        C48963 * C48945 * C49217) *
                       C243 +
                   (((C27028 + C27029 + C27030) * C49058 +
                     (C28423 + C28424 + C28425) * C49065 +
                     (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
                      C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
                      C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                         C36954) *
                        C48963 * C48945 * C49217 -
                    ((C26792 * C893 + C28634 + C28634 + C26784 * C903 +
                      C48038 * C892 + C28633 + C28633 + C48870 * C902 +
                      C48045 * C891 + C28632 + C28632 + C48862 * C901) *
                         C36954 +
                     (C28655 + C28654 + C28653) * C49065 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49058) *
                        C48963 * C48945 * C241) *
                       C49215)) /
                 (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C355 -
                    ((C26792 * C2782 + C29751 + C29751 + C26784 * C2790 +
                      C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
                      C48045 * C2784 + C29749 + C29749 + C48862 * C2792) *
                         C36954 +
                     (C29761 + C29762 + C29763) * C49065 +
                     (C28652 + C28651 + C28650) * C49058) *
                        C48963 * C49219) *
                       C48928 * C243 +
                   (((C28653 + C28654 + C28655) * C49058 +
                     (C37266 + C37267 + C37268) * C49065 +
                     (C48045 * C2783 + C37257 + C37257 + C48862 * C2791 +
                      C48038 * C2782 + C37258 + C37258 + C48870 * C2790 +
                      C26792 * C2785 + C37259 + C37259 + C26784 * C2793) *
                         C36954) *
                        C48963 * C49219 -
                    ((C37268 + C37267 + C37266) * C36954 +
                     (C28655 + C28654 + C28653) * C49065 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49058) *
                        C48963 * C355) *
                       C48928 * C49215)) /
                 (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C48945 * C467 -
                    ((C29206 + C29207 + C29208) * C36954 + C29202 * C49065 +
                     (C27024 + C27023 + C27022) * C49058) *
                        C48963 * C48945 * C49217) *
                       C469 +
                   (((C27028 + C27029 + C27030) * C49058 +
                     (C28423 + C28424 + C28425) * C49065 +
                     (C48045 * C2336 + C28635 + C28635 + C48862 * C2348 +
                      C48038 * C2337 + C28636 + C28636 + C48870 * C2349 +
                      C26792 * C2630 + C28637 + C28637 + C26784 * C2632) *
                         C36954) *
                        C48963 * C48945 * C49217 -
                    ((C37268 + C37267 + C37266) * C36954 +
                     (C28655 + C28654 + C28653) * C49065 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49058) *
                        C48963 * C48945 * C467) *
                       C49215)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                     C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                     C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                        C49058 +
                    (C28650 + C28651 + C28652) * C49065 +
                    (C29763 + C29762 + C29761) * C36954) *
                       C48963 * C48945 * C533 -
                   ((C29206 + C29207 + C29208) * C36954 + C29202 * C49065 +
                    (C27024 + C27023 + C27022) * C49058) *
                       C48963 * C48945 * C534 +
                   (C27464 * C49058 + (C27650 + C27649 + C27648) * C49065 +
                    (C48045 * C2338 + C28062 + C28062 + C48862 * C2350 +
                     C48038 * C2339 + C28063 + C28063 + C48870 * C2351 +
                     C26792 * C2340 + C28064 + C28064 + C26784 * C2352) *
                        C36954) *
                       C48963 * C48945 * C535) *
                  C48894) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C355 -
                    ((C26792 * C2782 + C29751 + C29751 + C26784 * C2790 +
                      C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
                      C48045 * C2784 + C29749 + C29749 + C48862 * C2792) *
                         C36954 +
                     (C29761 + C29762 + C29763) * C49065 +
                     (C28652 + C28651 + C28650) * C49058) *
                        C48963 * C49219) *
                       C467 +
                   ((C29198 * C49058 + (C29208 + C29207 + C29206) * C49065 +
                     (C48045 * C3262 + C29752 + C29752 + C48862 * C3268 +
                      C48038 * C3263 + C29753 + C29753 + C48870 * C3269 +
                      C26792 * C3264 + C29754 + C29754 + C26784 * C3270) *
                         C36954) *
                        C48963 * C49219 -
                    ((C29206 + C29207 + C29208) * C36954 + C29202 * C49065 +
                     (C27024 + C27023 + C27022) * C49058) *
                        C48963 * C355) *
                       C49217) *
                  C48894) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C741 -
                    ((C26792 * C2782 + C29751 + C29751 + C26784 * C2790 +
                      C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
                      C48045 * C2784 + C29749 + C29749 + C48862 * C2792) *
                         C36954 +
                     (C29761 + C29762 + C29763) * C49065 +
                     (C28652 + C28651 + C28650) * C49058) *
                        C48963 * C49219) *
                       C48928 * C469 +
                   (((C28653 + C28654 + C28655) * C49058 +
                     (C37266 + C37267 + C37268) * C49065 +
                     (C48045 * C2783 + C37257 + C37257 + C48862 * C2791 +
                      C48038 * C2782 + C37258 + C37258 + C48870 * C2790 +
                      C26792 * C2785 + C37259 + C37259 + C26784 * C2793) *
                         C36954) *
                        C48963 * C49219 -
                    ((C37268 + C37267 + C37266) * C36954 +
                     (C28655 + C28654 + C28653) * C49065 +
                     (C26792 * C126 + C26810 + C26810 + C26784 * C140 +
                      C48038 * C125 + C26811 + C26811 + C48870 * C139 +
                      C48045 * C124 + C26812 + C26812 + C48862 * C138) *
                         C49058) *
                        C48963 * C741) *
                       C48928 * C49215)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                      C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                      C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                         C49058 +
                     (C28650 + C28651 + C28652) * C49065 +
                     (C29763 + C29762 + C29761) * C36954) *
                        C48963 * C741 -
                    ((C26792 * C2782 + C29751 + C29751 + C26784 * C2790 +
                      C48038 * C2783 + C29750 + C29750 + C48870 * C2791 +
                      C48045 * C2784 + C29749 + C29749 + C48862 * C2792) *
                         C36954 +
                     (C29761 + C29762 + C29763) * C49065 +
                     (C28652 + C28651 + C28650) * C49058) *
                        C48963 * C49219) *
                       C241 +
                   ((C29198 * C49058 + (C29208 + C29207 + C29206) * C49065 +
                     (C48045 * C3262 + C29752 + C29752 + C48862 * C3268 +
                      C48038 * C3263 + C29753 + C29753 + C48870 * C3269 +
                      C26792 * C3264 + C29754 + C29754 + C26784 * C3270) *
                         C36954) *
                        C48963 * C49219 -
                    ((C29206 + C29207 + C29208) * C36954 + C29202 * C49065 +
                     (C27024 + C27023 + C27022) * C49058) *
                        C48963 * C741) *
                       C49217) *
                  C48894) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48045 * C123 + C26795 + C26795 + C48862 * C137 +
                     C48038 * C124 + C26796 + C26796 + C48870 * C138 +
                     C26792 * C125 + C26797 + C26797 + C26784 * C139) *
                        C49058 +
                    (C28650 + C28651 + C28652) * C49065 + C38083 * C36954) *
                       C48963 * C887 -
                   ((C38090 + C38091 + C38092) * C36954 +
                    (C29761 + C29762 + C29763) * C49065 +
                    (C28652 + C28651 + C28650) * C49058) *
                       C48963 * C888 +
                   (C38083 * C49058 + (C38092 + C38091 + C38090) * C49065 +
                    (C48045 * C3691 + C38080 + C38080 + C48862 * C3697 +
                     C48038 * C3692 + C38081 + C38081 + C48870 * C3698 +
                     C26792 * C3693 + C38082 + C38082 + C26784 * C3699) *
                        C36954) *
                       C48963 * C889) *
                  C48928 * C48894) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C22565 * C361 + C22913 + C22913 + C49260 * C373 + C22567 * C360 +
            C22912 + C22912 + C49253 * C372 + C22569 * C359 + C22911 + C22911 +
            C49240 * C371 + C22571 * C358 + C22910 + C22910 + C49188 * C370) *
               C49062) *
              C48963 * C48945 * C48928 * C110 -
          ((C22571 * C357 + C22917 + C22917 + C49188 * C369 + C22569 * C358 +
            C22916 + C22916 + C49240 * C370 + C22567 * C359 + C22915 + C22915 +
            C49253 * C371 + C22565 * C360 + C22914 + C22914 + C49260 * C372) *
               C49062 +
           (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
            C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
            C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
               C31480) *
              C48963 * C48945 * C48928 * C111 +
          ((C22565 * C125 + C22590 + C22590 + C49260 * C139 + C22567 * C126 +
            C22591 + C22591 + C49253 * C140 + C22569 * C127 + C22592 + C22592 +
            C49240 * C141 + C22571 * C128 + C22593 + C22593 + C49188 * C142) *
               C31480 +
           (C22565 * C359 + C31483 + C31483 + C49260 * C371 + C22567 * C358 +
            C31484 + C31484 + C49253 * C370 + C22569 * C357 + C31485 + C31485 +
            C49240 * C369 + C22571 * C362 + C31486 + C31486 + C49188 * C374) *
               C49062) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           (C24394 * C31480 + C30651 * C49062) * C49222) *
              C48945 * C48928 * C110 -
          (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
           ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
           ((C25561 + C25560) * C49062 +
            (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
             C23817 + C23817 + C23791 * C138) *
                C31480) *
               C49254) *
              C48945 * C48928 * C111 +
          (((C23797 * C125 + C23818 + C23818 + C23791 * C139 + C23799 * C126 +
             C23819 + C23819 + C48867 * C140) *
                C31480 +
            (C23797 * C359 + C25088 + C25088 + C23791 * C371 + C23799 * C358 +
             C25089 + C25089 + C48867 * C370) *
                C49062) *
               C49254 +
           ((C23797 * C247 + C23820 + C23820 + C23791 * C259 + C23799 * C246 +
             C23821 + C23821 + C48867 * C258) *
                C31480 +
            (C23797 * C641 + C25092 + C25092 + C23791 * C651 + C23799 * C642 +
             C25093 + C25093 + C48867 * C652) *
                C49062) *
               C49242 +
           ((C23797 * C539 + C23822 + C23822 + C23791 * C549 + C23799 * C540 +
             C23823 + C23823 + C48867 * C550) *
                C31480 +
            (C23797 * C1429 + C29910 + C29910 + C23791 * C1437 +
             C23799 * C1432 + C29911 + C29911 + C48867 * C1440) *
                C49062) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C22565 * C361 + C22913 + C22913 + C49260 * C373 + C22567 * C360 +
             C22912 + C22912 + C49253 * C372 + C22569 * C359 + C22911 + C22911 +
             C49240 * C371 + C22571 * C358 + C22910 + C22910 + C49188 * C370) *
                C49062) *
               C48963 * C48945 * C241 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C22772 + C22773 + C22774 + C22775) * C31480 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C22571 * C357 + C22917 + C22917 + C49188 * C369 + C22569 * C358 +
             C22916 + C22916 + C49240 * C370 + C22567 * C359 + C22915 + C22915 +
             C49253 * C371 + C22565 * C360 + C22914 + C22914 + C49260 * C372) *
                C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C48945 * C241 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C48945 * C49217) *
              C243 +
          ((((C24014 + C24015) * C31480 + (C25318 + C25319) * C49062) * C49254 +
            ((C24016 + C24017) * C31480 + (C30114 + C30115) * C49062) * C49242 +
            ((C24018 + C24019) * C31480 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C355 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C31787 + C31788 + C31789 + C31790) * C31480 +
            (C22565 * C891 + C31763 + C31763 + C49260 * C901 + C22567 * C892 +
             C31764 + C31764 + C49253 * C902 + C22569 * C893 + C31765 + C31765 +
             C49240 * C903 + C22571 * C894 + C31766 + C31766 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C355 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C48928 * C243 +
          ((((C25560 + C25561) * C31480 + (C25562 + C25563) * C49062) * C49254 +
            ((C25318 + C25319) * C31480 + (C25320 + C25321) * C49062) * C49242 +
            ((C30114 + C30115) * C31480 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C48945 * C467 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C22772 + C22773 + C22774 + C22775) * C31480 +
            (C22565 * C640 + C22918 + C22918 + C49260 * C650 + C22567 * C641 +
             C22919 + C22919 + C49253 * C651 + C22569 * C642 + C22920 + C22920 +
             C49240 * C652 + C22571 * C643 + C22921 + C22921 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            (C24394 * C31480 + C30651 * C49062) * C49222) *
               C48945 * C467 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C48945 * C49217) *
              C469 +
          ((((C24014 + C24015) * C31480 + (C25318 + C25319) * C49062) * C49254 +
            ((C24016 + C24017) * C31480 + (C30114 + C30115) * C49062) * C49242 +
            ((C24018 + C24019) * C31480 +
             (C23797 * C1892 + C24164 + C24164 + C23791 * C1898 +
              C23799 * C1893 + C24165 + C24165 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C31783 + C31784 + C31785 + C31786) * C49062) *
              C48963 * C48945 * C533 -
          ((C23324 + C23325 + C23326 + C23327) * C49062 +
           (C22771 + C22770 + C22769 + C22768) * C31480) *
              C48963 * C48945 * C534 +
          ((C23173 + C23172 + C23171 + C23170) * C31480 +
           (C22565 * C1431 + C23312 + C23312 + C49260 * C1439 + C22567 * C1430 +
            C23313 + C23313 + C49253 * C1438 + C22569 * C1429 + C23314 +
            C23314 + C49240 * C1437 + C22571 * C1432 + C23315 + C23315 +
            C49188 * C1440) *
               C49062) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           C33407 * C49222) *
              C48945 * C533 -
          (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
           (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
           (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
              C48945 * C534 +
          (C33407 * C49254 +
           (C24395 * C31480 + (C24567 + C24566) * C49062) * C49242 +
           ((C24409 + C24408) * C31480 +
            (C23797 * C9421 + C24552 + C24552 + C23791 * C9425 +
             C23799 * C9422 + C24553 + C24553 + C48867 * C9426) *
                C49062) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C355 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C467 +
          (((C23327 + C23326 + C23325 + C23324) * C31480 +
            (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 +
             C22567 * C2336 + C23691 + C23691 + C49253 * C2348 +
             C22569 * C2337 + C23692 + C23692 + C49240 * C2349 +
             C22571 * C2630 + C23693 + C23693 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C355 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C467 +
          (((C26108 * C31480 + C26109 * C49062) * C49254 +
            (C30651 * C31480 + (C25913 + C25912) * C49062) * C49242 +
            ((C24567 + C24566) * C31480 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C741 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C31787 + C31788 + C31789 + C31790) * C31480 +
            (C22565 * C891 + C31763 + C31763 + C49260 * C901 + C22567 * C892 +
             C31764 + C31764 + C49253 * C902 + C22569 * C893 + C31765 + C31765 +
             C49240 * C903 + C22571 * C894 + C31766 + C31766 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C31790 + C31789 + C31788 + C31787) * C49062 +
            (C22571 * C127 + C22586 + C22586 + C49188 * C141 + C22569 * C126 +
             C22587 + C22587 + C49240 * C140 + C22567 * C125 + C22588 + C22588 +
             C49253 * C139 + C22565 * C124 + C22589 + C22589 + C49260 * C138) *
                C31480) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C48928 * C469 +
          ((((C25560 + C25561) * C31480 + (C25562 + C25563) * C49062) * C49254 +
            ((C25318 + C25319) * C31480 + (C25320 + C25321) * C49062) * C49242 +
            ((C30114 + C30115) * C31480 +
             (C23797 * C2339 + C25302 + C25302 + C23791 * C2351 +
              C23799 * C2340 + C25303 + C25303 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C30115 + C30114) * C49062 + (C24017 + C24016) * C31480) * C49222 +
            ((C25319 + C25318) * C49062 + (C24015 + C24014) * C31480) * C49242 +
            ((C25561 + C25560) * C49062 +
             (C23799 * C125 + C23816 + C23816 + C48867 * C139 + C23797 * C124 +
              C23817 + C23817 + C23791 * C138) *
                 C31480) *
                C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
             C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
             C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
                C31480 +
            (C31783 + C31784 + C31785 + C31786) * C49062) *
               C48963 * C741 -
           ((C22571 * C893 + C23689 + C23689 + C49188 * C903 + C22569 * C892 +
             C23688 + C23688 + C49240 * C902 + C22567 * C891 + C23687 + C23687 +
             C49253 * C901 + C22565 * C890 + C23686 + C23686 + C49260 * C900) *
                C49062 +
            (C31786 + C31785 + C31784 + C31783) * C31480) *
               C48963 * C49219) *
              C241 +
          (((C23327 + C23326 + C23325 + C23324) * C31480 +
            (C22565 * C2335 + C23690 + C23690 + C49260 * C2347 +
             C22567 * C2336 + C23691 + C23691 + C49253 * C2348 +
             C22569 * C2337 + C23692 + C23692 + C49240 * C2349 +
             C22571 * C2630 + C23693 + C23693 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C23324 + C23325 + C23326 + C23327) * C49062 +
            (C22771 + C22770 + C22769 + C22768) * C31480) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
              C23803 + C23803 + C48867 * C138) *
                 C31480 +
             (C25556 + C25557) * C49062) *
                C49254 +
            ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
            C33407 * C49222) *
               C741 -
           (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
            (C26114 * C49062 + C26115 * C31480) * C49242 +
            ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) *
                C49254) *
               C49219) *
              C241 +
          (((C26108 * C31480 + C26109 * C49062) * C49254 +
            (C30651 * C31480 + (C25913 + C25912) * C49062) * C49242 +
            ((C24567 + C24566) * C31480 +
             (C23797 * C9927 + C24936 + C24936 + C23791 * C9931 +
              C23799 * C10203 + C24937 + C24937 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C24566 + C24567) * C49062 + (C24013 + C24012) * C31480) * C49222 +
            (C30848 * C49062 + (C24011 + C24010) * C31480) * C49242 +
            (C26115 * C49062 + (C24009 + C24008) * C31480) * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22565 * C123 + C22574 + C22574 + C49260 * C137 + C22567 * C124 +
            C22575 + C22575 + C49253 * C138 + C22569 * C125 + C22576 + C22576 +
            C49240 * C139 + C22571 * C126 + C22577 + C22577 + C49188 * C140) *
               C31480 +
           (C31783 + C31784 + C31785 + C31786) * C49062) *
              C48963 * C887 -
          ((C32527 + C32528 + C32529 + C32530) * C49062 +
           (C31786 + C31785 + C31784 + C31783) * C31480) *
              C48963 * C888 +
          ((C32530 + C32529 + C32528 + C32527) * C31480 +
           (C22565 * C2784 + C32515 + C32515 + C49260 * C2792 + C22567 * C2783 +
            C32516 + C32516 + C49253 * C2791 + C22569 * C2782 + C32517 +
            C32517 + C49240 * C2790 + C22571 * C2785 + C32518 + C32518 +
            C49188 * C2793) *
               C49062) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23797 * C123 + C23802 + C23802 + C23791 * C137 + C23799 * C124 +
             C23803 + C23803 + C48867 * C138) *
                C31480 +
            (C25556 + C25557) * C49062) *
               C49254 +
           ((C24008 + C24009) * C31480 + C26108 * C49062) * C49242 +
           C33407 * C49222) *
              C887 -
          (((C25912 + C25913) * C49062 + C30848 * C31480) * C49222 +
           (C26114 * C49062 + C26115 * C31480) * C49242 +
           ((C25559 + C25558) * C49062 + (C25557 + C25556) * C31480) * C49254) *
              C888 +
          ((C26658 * C31480 + (C26672 + C26671) * C49062) * C49254 +
           (C26109 * C31480 + (C26123 + C26122) * C49062) * C49242 +
           ((C25913 + C25912) * C31480 +
            (C23797 * C10395 + C26116 + C26116 + C23791 * C10399 +
             C23799 * C10396 + C26117 + C26117 + C48867 * C10400) *
                C49062) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C3824 * C249 + C3837 + C3837 + C3818 * C261 + C3826 * C248 + C3838 +
            C3838 + C3819 * C260 + C3828 * C247 + C3839 + C3839 + C3820 * C259 +
            C3830 * C246 + C3840 + C3840 + C49188 * C258) *
               C48975 * C49022) *
              C48945 * C48928 * C110 -
          ((C3830 * C245 + C3841 + C3841 + C49188 * C257 + C3828 * C246 +
            C3842 + C3842 + C3820 * C258 + C3826 * C247 + C3843 + C3843 +
            C3819 * C259 + C3824 * C248 + C3844 + C3844 + C3818 * C260) *
               C48975 * C49022 +
           (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
            C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
            C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
               C48975 * C49189) *
              C48945 * C48928 * C111 +
          ((C3824 * C125 + C3849 + C3849 + C3818 * C139 + C3826 * C126 + C3850 +
            C3850 + C3819 * C140 + C3828 * C127 + C3851 + C3851 + C3820 * C141 +
            C3830 * C128 + C3852 + C3852 + C49188 * C142) *
               C48975 * C49189 +
           (C3824 * C247 + C3853 + C3853 + C3818 * C259 + C3826 * C246 + C3854 +
            C3854 + C3819 * C258 + C3828 * C245 + C3855 + C3855 + C3820 * C257 +
            C3830 * C250 + C3856 + C3856 + C49188 * C262) *
               C48975 * C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11379 * C249 + C11386 + C11386 + C49167 * C261 + C11381 * C248 +
            C11387 + C11387 + C48867 * C260) *
               C48975 * C11376 +
           (C11379 * C537 + C11388 + C11388 + C49167 * C547 + C11381 * C538 +
            C11389 + C11389 + C48867 * C548) *
               C48975 * C11377 +
           (C11379 * C1207 + C11390 + C11390 + C49167 * C1215 + C11381 * C1206 +
            C11391 + C11391 + C48867 * C1214) *
               C48975 * C49197) *
              C48945 * C48928 * C110 -
          ((C11381 * C1205 + C11392 + C11392 + C48867 * C1213 + C11379 * C1206 +
            C11393 + C11393 + C49167 * C1214) *
               C48975 * C49197 +
           (C11381 * C539 + C11394 + C11394 + C48867 * C549 + C11379 * C538 +
            C11395 + C11395 + C49167 * C548) *
               C48975 * C11377 +
           (C11381 * C247 + C11396 + C11396 + C48867 * C259 + C11379 * C248 +
            C11397 + C11397 + C49167 * C260) *
               C48975 * C11376 +
           (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
            C11399 + C11399 + C49167 * C138) *
               C48975 * C11375) *
              C48945 * C48928 * C111 +
          ((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
            C11401 + C11401 + C48867 * C140) *
               C48975 * C11375 +
           (C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
            C11403 + C11403 + C48867 * C258) *
               C48975 * C11376 +
           (C11379 * C539 + C11404 + C11404 + C49167 * C549 + C11381 * C540 +
            C11405 + C11405 + C48867 * C550) *
               C48975 * C11377 +
           (C11379 * C1205 + C11406 + C11406 + C49167 * C1213 + C11381 * C1208 +
            C11407 + C11407 + C48867 * C1216) *
               C48975 * C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C48945 * C241 -
           ((C3830 * C540 + C3995 + C3995 + C49188 * C550 + C3828 * C539 +
             C3996 + C3996 + C3820 * C549 + C3826 * C538 + C3997 + C3997 +
             C3819 * C548 + C3824 * C537 + C3998 + C3998 + C3818 * C547) *
                C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C48945 * C49217) *
              C243 +
          (((C4031 + C4032 + C4033 + C4034) * C48975 * C49189 +
            (C3824 * C538 + C4007 + C4007 + C3818 * C548 + C3826 * C539 +
             C4008 + C4008 + C3819 * C549 + C3828 * C540 + C4009 + C4009 +
             C3820 * C550 + C3830 * C541 + C4010 + C4010 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C48945 * C241 -
           ((C11381 * C1716 + C11550 + C11550 + C48867 * C1722 +
             C11379 * C1715 + C11551 + C11551 + C49167 * C1721) *
                C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C48945 * C49217) *
              C243 +
          (((C11596 + C11597) * C48975 * C11375 +
            (C11598 + C11599) * C48975 * C11376 +
            (C11600 + C11601) * C48975 * C11377 +
            (C11379 * C1716 + C11564 + C11564 + C49167 * C1722 +
             C11381 * C1717 + C11565 + C11565 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C355 -
           ((C3830 * C642 + C4165 + C4165 + C49188 * C652 + C3828 * C641 +
             C4166 + C4166 + C3820 * C651 + C3826 * C640 + C4167 + C4167 +
             C3819 * C650 + C3824 * C639 + C4168 + C4168 + C3818 * C649) *
                C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C48928 * C243 +
          (((C3824 * C360 + C4173 + C4173 + C3818 * C372 + C3826 * C359 +
             C4174 + C4174 + C3819 * C371 + C3828 * C358 + C4175 + C4175 +
             C3820 * C370 + C3830 * C357 + C4176 + C4176 + C49188 * C369) *
                C48975 * C49189 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C355 -
           ((C11381 * C1892 + C11732 + C11732 + C48867 * C1898 +
             C11379 * C1891 + C11733 + C11733 + C49167 * C1897) *
                C48975 * C49197 +
            (C11381 * C1430 + C11734 + C11734 + C48867 * C1438 +
             C11379 * C1431 + C11735 + C11735 + C49167 * C1439) *
                C48975 * C11377 +
            (C11381 * C640 + C11736 + C11736 + C48867 * C650 + C11379 * C639 +
             C11737 + C11737 + C49167 * C649) *
                C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C48928 * C243 +
          (((C11379 * C360 + C11740 + C11740 + C49167 * C372 + C11381 * C359 +
             C11741 + C11741 + C48867 * C371) *
                C48975 * C11375 +
            (C11379 * C640 + C11742 + C11742 + C49167 * C650 + C11381 * C641 +
             C11743 + C11743 + C48867 * C651) *
                C48975 * C11376 +
            (C11379 * C1430 + C11744 + C11744 + C49167 * C1438 +
             C11381 * C1429 + C11745 + C11745 + C48867 * C1437) *
                C48975 * C11377 +
            (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
             C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C48945 * C467 -
           ((C3830 * C540 + C3995 + C3995 + C49188 * C550 + C3828 * C539 +
             C3996 + C3996 + C3820 * C549 + C3826 * C538 + C3997 + C3997 +
             C3819 * C548 + C3824 * C537 + C3998 + C3998 + C3818 * C547) *
                C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C48945 * C49217) *
              C469 +
          (((C4031 + C4032 + C4033 + C4034) * C48975 * C49189 +
            (C3824 * C538 + C4007 + C4007 + C3818 * C548 + C3826 * C539 +
             C4008 + C4008 + C3819 * C549 + C3828 * C540 + C4009 + C4009 +
             C3820 * C550 + C3830 * C541 + C4010 + C4010 + C49188 * C551) *
                C48975 * C49022) *
               C48945 * C49217 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 +
            (C11592 + C11593) * C48975 * C11377 +
            (C11594 + C11595) * C48975 * C49197) *
               C48945 * C467 -
           ((C11381 * C1716 + C11550 + C11550 + C48867 * C1722 +
             C11379 * C1715 + C11551 + C11551 + C49167 * C1721) *
                C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C48945 * C49217) *
              C469 +
          (((C11596 + C11597) * C48975 * C11375 +
            (C11598 + C11599) * C48975 * C11376 +
            (C11600 + C11601) * C48975 * C11377 +
            (C11379 * C1716 + C11564 + C11564 + C49167 * C1722 +
             C11381 * C1717 + C11565 + C11565 + C48867 * C1723) *
                C48975 * C49197) *
               C48945 * C49217 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
              C48945 * C533 -
          ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
           (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
              C48945 * C534 +
          ((C4432 + C4431 + C4430 + C4429) * C48975 * C49189 +
           (C3824 * C1207 + C4417 + C4417 + C3818 * C1215 + C3826 * C1206 +
            C4418 + C4418 + C3819 * C1214 + C3828 * C1205 + C4419 + C4419 +
            C3820 * C1213 + C3830 * C1208 + C4420 + C4420 + C49188 * C1216) *
               C48975 * C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
           C11985 * C49197) *
              C48945 * C533 -
          ((C11990 + C11991) * C48975 * C49197 +
           (C11595 + C11594) * C48975 * C11377 +
           (C11593 + C11592) * C48975 * C11376 +
           (C11591 + C11590) * C48975 * C11375) *
              C48945 * C534 +
          (C11984 * C11375 + C11985 * C11376 +
           (C11991 + C11990) * C48975 * C11377 +
           (C11379 * C9283 + C11982 + C11982 + C49167 * C9287 + C11381 * C9284 +
            C11983 + C11983 + C48867 * C9288) *
               C48975 * C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C355 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C467 +
          (((C4586 + C4585 + C4584 + C4583) * C48975 * C49189 +
            (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
             C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
             C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C355 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C467 +
          (((C12153 + C12152) * C48975 * C11375 +
            (C12151 + C12150) * C48975 * C11376 +
            (C12149 + C12148) * C48975 * C11377 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C11990 + C11991) * C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C741 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C48928 * C469 +
          (((C3824 * C360 + C4173 + C4173 + C3818 * C372 + C3826 * C359 +
             C4174 + C4174 + C3819 * C371 + C3828 * C358 + C4175 + C4175 +
             C3820 * C370 + C3830 * C357 + C4176 + C4176 + C49188 * C369) *
                C48975 * C49189 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C48975 * C49022) *
               C49219 -
           ((C4034 + C4033 + C4032 + C4031) * C48975 * C49022 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C48975 * C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C741 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C48928 * C469 +
          (((C11379 * C360 + C11740 + C11740 + C49167 * C372 + C11381 * C359 +
             C11741 + C11741 + C48867 * C371) *
                C48975 * C11375 +
            (C11379 * C640 + C11742 + C11742 + C49167 * C650 + C11381 * C641 +
             C11743 + C11743 + C48867 * C651) *
                C48975 * C11376 +
            (C11379 * C1430 + C11744 + C11744 + C49167 * C1438 +
             C11381 * C1429 + C11745 + C11745 + C48867 * C1437) *
                C48975 * C11377 +
            (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
             C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                C48975 * C49197) *
               C49219 -
           ((C11601 + C11600) * C48975 * C49197 +
            (C11599 + C11598) * C48975 * C11377 +
            (C11597 + C11596) * C48975 * C11376 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C48975 * C11375) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C48975 * C49189 +
            (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
               C741 -
           ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
            (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
             C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
             C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
                C48975 * C49189) *
               C49219) *
              C241 +
          (((C4586 + C4585 + C4584 + C4583) * C48975 * C49189 +
            (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
             C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
             C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
                C48975 * C49022) *
               C49219 -
           ((C4429 + C4430 + C4431 + C4432) * C48975 * C49022 +
            (C4030 + C4029 + C4028 + C4027) * C48975 * C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C48975 * C11375 +
            (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
            C11985 * C49197) *
               C741 -
           ((C12148 + C12149) * C48975 * C49197 +
            (C12150 + C12151) * C48975 * C11377 +
            (C12152 + C12153) * C48975 * C11376 +
            (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
             C11739 + C11739 + C49167 * C373) *
                C48975 * C11375) *
               C49219) *
              C241 +
          (((C12153 + C12152) * C48975 * C11375 +
            (C12151 + C12150) * C48975 * C11376 +
            (C12149 + C12148) * C48975 * C11377 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C48975 * C49197) *
               C49219 -
           ((C11990 + C11991) * C48975 * C49197 +
            (C11595 + C11594) * C48975 * C11377 +
            (C11593 + C11592) * C48975 * C11376 +
            (C11591 + C11590) * C48975 * C11375) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C48975 * C49189 +
           (C4027 + C4028 + C4029 + C4030) * C48975 * C49022) *
              C887 -
          ((C4583 + C4584 + C4585 + C4586) * C48975 * C49022 +
           (C3830 * C358 + C4169 + C4169 + C49188 * C370 + C3828 * C359 +
            C4170 + C4170 + C3820 * C371 + C3826 * C360 + C4171 + C4171 +
            C3819 * C372 + C3824 * C361 + C4172 + C4172 + C3818 * C373) *
               C48975 * C49189) *
              C888 +
          ((C3824 * C890 + C4945 + C4945 + C3818 * C900 + C3826 * C891 + C4946 +
            C4946 + C3819 * C901 + C3828 * C892 + C4947 + C4947 + C3820 * C902 +
            C3830 * C893 + C4948 + C4948 + C49188 * C903) *
               C48975 * C49189 +
           (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
            C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
            C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
               C48975 * C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
            C11385 + C11385 + C48867 * C138) *
               C48975 * C11375 +
           (C11590 + C11591) * C48975 * C11376 + C11984 * C11377 +
           C11985 * C49197) *
              C887 -
          ((C12148 + C12149) * C48975 * C49197 +
           (C12150 + C12151) * C48975 * C11377 +
           (C12152 + C12153) * C48975 * C11376 +
           (C11381 * C360 + C11738 + C11738 + C48867 * C372 + C11379 * C361 +
            C11739 + C11739 + C49167 * C373) *
               C48975 * C11375) *
              C888 +
          ((C11379 * C890 + C12512 + C12512 + C49167 * C900 + C11381 * C891 +
            C12513 + C12513 + C48867 * C901) *
               C48975 * C11375 +
           (C11379 * C2335 + C12514 + C12514 + C49167 * C2347 + C11381 * C2336 +
            C12515 + C12515 + C48867 * C2348) *
               C48975 * C11376 +
           (C11379 * C2338 + C12516 + C12516 + C49167 * C2350 + C11381 * C2339 +
            C12517 + C12517 + C48867 * C2351) *
               C48975 * C11377 +
           (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
            C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
               C48975 * C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 +
            (C1933 + C1932 + C1931) * C49062) *
               C49022) *
              C48945 * C48928 * C110 -
          (((C1030 * C642 + C1456 + C1456 + C49211 * C652 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1026 * C640 + C1454 + C1454 +
             C1020 * C650) *
                C49062 +
            (C1280 + C1279 + C1278) * C49190) *
               C49022 +
           ((C2857 + C2856 + C2855) * C49062 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49190) *
               C49189) *
              C48945 * C48928 * C111 +
          (((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 +
             C1052 + C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
             C49211 * C141) *
                C49190 +
            (C1026 * C359 + C2479 + C2479 + C1020 * C371 + C1028 * C358 +
             C2480 + C2480 + C1021 * C370 + C1030 * C357 + C2481 + C2481 +
             C49211 * C369) *
                C49062) *
               C49189 +
           ((C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 +
             C1055 + C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
             C49211 * C257) *
                C49190 +
            (C1026 * C641 + C6247 + C6247 + C1020 * C651 + C1028 * C642 +
             C6248 + C6248 + C1021 * C652 + C1030 * C643 + C6249 + C6249 +
             C49211 * C653) *
                C49062) *
               C49022) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C9324 * C49190 + C9697 * C49062) * C11376 +
           (C9325 * C49190 + C9696 * C49062) * C11377 +
           (C9326 * C49190 + C9695 * C49062) * C49197) *
              C48945 * C48928 * C110 -
          (((C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49062 +
            C9330 * C49190) *
               C49197 +
           (C10242 * C49062 + C9329 * C49190) * C11377 +
           (C10240 * C49062 + C9328 * C49190) * C11376 +
           (C10426 * C49062 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
               C11375) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49190 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49062) *
               C11375 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49190 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49062) *
               C11376 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C49190 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49062) *
               C11377 +
           ((C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C49190 +
            (C9184 * C1893 + C14315 + C14315 + C48857 * C1899) * C49062) *
               C49197) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C48945 * C241 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            ((C1931 + C1932 + C1933) * C49062 +
             (C1274 + C1273 + C1272) * C49190) *
                C49189) *
               C48945 * C49217) *
              C243 +
          ((((C1278 + C1279 + C1280) * C49190 +
             (C6456 + C6457 + C6458) * C49062) *
                C49189 +
            ((C1281 + C1282 + C1283) * C49190 +
             (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
              C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C48945 * C241 -
           ((C9694 * C49062 + C9327 * C49190) * C49197 +
            (C14451 + C14450) * C11377 + (C14449 + C14448) * C11376 +
            (C14447 + C14446) * C11375) *
               C48945 * C49217) *
              C243 +
          (((C14452 + C14453) * C11375 + (C14454 + C14455) * C11376 +
            (C14456 + C14462) * C11377 +
            (C9331 * C49190 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C355 -
           (((C3289 + C3288 + C3287) * C49062 +
             (C1931 + C1932 + C1933) * C49190) *
                C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C48928 * C243 +
          ((((C2855 + C2856 + C2857) * C49190 +
             (C2858 + C2859 + C2860) * C49062) *
                C49189 +
            ((C6456 + C6457 + C6458) * C49190 +
             (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
              C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
              C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C355 -
           ((C10692 * C49062 + C9695 * C49190) * C49197 +
            (C10239 * C49062 + C9696 * C49190) * C11377 +
            (C10238 * C49062 + C9697 * C49190) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49190 + C10427 * C49062) * C11375 +
            (C10240 * C49190 + C10241 * C49062) * C11376 +
            (C10242 * C49190 + C10243 * C49062) * C11377 +
            (C14461 * C49190 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 +
             (C1933 + C1932 + C1931) * C49062) *
                C49022) *
               C48945 * C467 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            ((C1931 + C1932 + C1933) * C49062 +
             (C1274 + C1273 + C1272) * C49190) *
                C49189) *
               C48945 * C49217) *
              C469 +
          ((((C1278 + C1279 + C1280) * C49190 +
             (C6456 + C6457 + C6458) * C49062) *
                C49189 +
            ((C1281 + C1282 + C1283) * C49190 +
             (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
              C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
              C49211 * C1440) *
                 C49062) *
                C49022) *
               C48945 * C49217 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + (C14448 + C14449) * C11377 +
            (C14450 + C14451) * C49197) *
               C48945 * C467 -
           ((C9694 * C49062 + C9327 * C49190) * C49197 +
            (C14451 + C14450) * C11377 + (C14449 + C14448) * C11376 +
            (C14447 + C14446) * C11375) *
               C48945 * C49217) *
              C469 +
          (((C14452 + C14453) * C11375 + (C14454 + C14455) * C11376 +
            (C14456 + C14462) * C11377 +
            (C9331 * C49190 +
             (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C49062) *
                C49197) *
               C48945 * C49217 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 +
            (C1933 + C1932 + C1931) * C49062) *
               C49022) *
              C48945 * C533 -
          (((C1928 + C1929 + C1930) * C49062 +
            (C1277 + C1276 + C1275) * C49190) *
               C49022 +
           ((C1931 + C1932 + C1933) * C49062 +
            (C1274 + C1273 + C1272) * C49190) *
               C49189) *
              C48945 * C534 +
          ((C1735 * C49190 + (C1930 + C1929 + C1928) * C49062) * C49189 +
           ((C1745 + C1744 + C1743) * C49190 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C49062) *
               C49022) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
              C48945 * C533 -
          ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
           (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
              C48945 * C534 +
          (C14821 * C11375 + C14822 * C11376 + (C14824 + C14823) * C11377 +
           (C9590 * C49190 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C49062) *
               C49197) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C355 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C467 +
          (((C7189 * C49190 + (C3287 + C3288 + C3289) * C49062) * C49189 +
            ((C1930 + C1929 + C1928) * C49190 +
             (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
              C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            (C7190 * C49062 + (C1274 + C1273 + C1272) * C49190) * C49189) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C355 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C467 +
          (((C14960 + C14959) * C11375 + (C14958 + C14957) * C11376 +
            (C14956 + C14955) * C11377 +
            (C9694 * C49190 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
            (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C741 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C48928 * C469 +
          ((((C2855 + C2856 + C2857) * C49190 +
             (C2858 + C2859 + C2860) * C49062) *
                C49189 +
            ((C6456 + C6457 + C6458) * C49190 +
             (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
              C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
              C49211 * C2632) *
                 C49062) *
                C49022) *
               C49219 -
           (((C6458 + C6457 + C6456) * C49062 +
             (C1280 + C1279 + C1278) * C49190) *
                C49022 +
            ((C2857 + C2856 + C2855) * C49062 +
             (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
              C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
              C1020 * C138) *
                 C49190) *
                C49189) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C741 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49190 + C10427 * C49062) * C11375 +
            (C10240 * C49190 + C10241 * C49062) * C11376 +
            (C10242 * C49190 + C10243 * C49062) * C11377 +
            (C14461 * C49190 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49062) *
                C49197) *
               C49219 -
           ((C14462 + C14456) * C49197 + (C14455 + C14454) * C11377 +
            (C14453 + C14452) * C11376 +
            (C10426 * C49062 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49190) *
                C11375) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
              C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
              C49211 * C139) *
                 C49190 +
             (C2849 + C2850 + C2851) * C49062) *
                C49189 +
            ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
               C741 -
           (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
            ((C2854 + C2853 + C2852) * C49062 +
             (C2851 + C2850 + C2849) * C49190) *
                C49189) *
               C49219) *
              C241 +
          (((C7189 * C49190 + (C3287 + C3288 + C3289) * C49062) * C49189 +
            ((C1930 + C1929 + C1928) * C49190 +
             (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
              C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
              C49211 * C2352) *
                 C49062) *
                C49022) *
               C49219 -
           (((C1928 + C1929 + C1930) * C49062 +
             (C1277 + C1276 + C1275) * C49190) *
                C49022 +
            (C7190 * C49062 + (C1274 + C1273 + C1272) * C49190) * C49189) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
             C10424 * C49062) *
                C11375 +
            (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
               C741 -
           ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
            (C14959 + C14960) * C11376 +
            (C10425 * C49062 + C10424 * C49190) * C11375) *
               C49219) *
              C241 +
          (((C14960 + C14959) * C11375 + (C14958 + C14957) * C11376 +
            (C14956 + C14955) * C11377 +
            (C9694 * C49190 +
             (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49062) *
                C49197) *
               C49219 -
           ((C14823 + C14824) * C49197 + (C14451 + C14450) * C11377 +
            (C14449 + C14448) * C11376 + (C14447 + C14446) * C11375) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49190 +
            (C2849 + C2850 + C2851) * C49062) *
               C49189 +
           ((C1272 + C1273 + C1274) * C49190 + C7189 * C49062) * C49022) *
              C887 -
          (((C3289 + C3288 + C3287) * C49062 + C7190 * C49190) * C49022 +
           ((C2854 + C2853 + C2852) * C49062 +
            (C2851 + C2850 + C2849) * C49190) *
               C49189) *
              C888 +
          ((C3711 * C49190 + (C3720 + C3719 + C3718) * C49062) * C49189 +
           ((C3287 + C3288 + C3289) * C49190 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49062) *
               C49022) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49190 +
            C10424 * C49062) *
               C11375 +
           (C14446 + C14447) * C11376 + C14821 * C11377 + C14822 * C49197) *
              C887 -
          ((C14955 + C14956) * C49197 + (C14957 + C14958) * C11377 +
           (C14959 + C14960) * C11376 +
           (C10425 * C49062 + C10424 * C49190) * C11375) *
              C888 +
          ((C10425 * C49190 + C11275 * C49062) * C11375 +
           (C10238 * C49190 + C10857 * C49062) * C11376 +
           (C10239 * C49190 + C10856 * C49062) * C11377 +
           (C10692 * C49190 +
            (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49062) *
               C49197) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1026 * C249 + C1036 + C1036 + C1020 * C261 + C1028 * C248 + C1037 +
            C1037 + C1021 * C260 + C1030 * C247 + C1038 + C1038 +
            C49211 * C259) *
               C48975 * C49242 +
           (C1026 * C537 + C1039 + C1039 + C1020 * C547 + C1028 * C538 + C1040 +
            C1040 + C1021 * C548 + C1030 * C539 + C1041 + C1041 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C1030 * C540 + C1042 + C1042 + C49211 * C550 + C1028 * C539 +
            C1043 + C1043 + C1021 * C549 + C1026 * C538 + C1044 + C1044 +
            C1020 * C548) *
               C48975 * C49222 +
           (C1030 * C246 + C1045 + C1045 + C49211 * C258 + C1028 * C247 +
            C1046 + C1046 + C1021 * C259 + C1026 * C248 + C1047 + C1047 +
            C1020 * C260) *
               C48975 * C49242 +
           (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
            C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
            C1020 * C138) *
               C48975 * C49254) *
              C48945 * C48928 * C111 +
          ((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 + C1052 +
            C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
            C49211 * C141) *
               C48975 * C49254 +
           (C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 + C1055 +
            C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
            C49211 * C257) *
               C48975 * C49242 +
           (C1026 * C539 + C1057 + C1057 + C1020 * C549 + C1028 * C540 + C1058 +
            C1058 + C1021 * C550 + C1030 * C541 + C1059 + C1059 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C48928 * C110 -
          (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 + C151 +
           C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 + C115 * C125 +
           C153 + C153 + C102 * C139 + C113 * C124 + C154 + C154 +
           C101 * C138) *
              C48975 * C48963 * C48945 * C48928 * C111 +
          (C113 * C125 + C155 + C155 + C101 * C139 + C115 * C126 + C156 + C156 +
           C102 * C140 + C117 * C127 + C157 + C157 + C103 * C141 + C119 * C128 +
           C158 + C158 + C104 * C142 + C121 * C129 + C159 + C159 +
           C105 * C143) *
              C48975 * C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C49255 +
           (C1026 * C361 + C1450 + C1450 + C1020 * C373 + C1028 * C360 + C1449 +
            C1449 + C1021 * C372 + C1030 * C359 + C1448 + C1448 +
            C49211 * C371) *
               C49244 +
           (C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 + C2355 +
            C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
            C49211 * C902) *
               C49225) *
              C48963 * C48945 * C48928 * C110 -
          ((C1030 * C893 + C2476 + C2476 + C49211 * C903 + C1028 * C892 +
            C2477 + C2477 + C1021 * C902 + C1026 * C891 + C2478 + C2478 +
            C1020 * C901) *
               C49225 +
           (C1030 * C358 + C1453 + C1453 + C49211 * C370 + C1028 * C359 +
            C1452 + C1452 + C1021 * C371 + C1026 * C360 + C1451 + C1451 +
            C1020 * C372) *
               C49244 +
           (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
            C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
            C1020 * C138) *
               C49255) *
              C48963 * C48945 * C48928 * C111 +
          ((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 + C1052 +
            C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
            C49211 * C141) *
               C49255 +
           (C1026 * C359 + C2479 + C2479 + C1020 * C371 + C1028 * C358 + C2480 +
            C2480 + C1021 * C370 + C1030 * C357 + C2481 + C2481 +
            C49211 * C369) *
               C49244 +
           (C1026 * C892 + C2482 + C2482 + C1020 * C902 + C1028 * C893 + C2483 +
            C2483 + C1021 * C903 + C1030 * C894 + C2484 + C2484 +
            C49211 * C904) *
               C49225) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C7840 * C249 + C7850 + C7850 + C49251 * C261 + C7842 * C248 +
            C7851 + C7851 + C49238 * C260 + C7844 * C247 + C7852 + C7852 +
            C49211 * C259) *
               C48975 * C7838 +
           (C7840 * C537 + C7853 + C7853 + C49251 * C547 + C7842 * C538 +
            C7854 + C7854 + C49238 * C548 + C7844 * C539 + C7855 + C7855 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C7844 * C540 + C7856 + C7856 + C49211 * C550 + C7842 * C539 +
            C7857 + C7857 + C49238 * C549 + C7840 * C538 + C7858 + C7858 +
            C49251 * C548) *
               C48975 * C49222 +
           (C7844 * C246 + C7859 + C7859 + C49211 * C258 + C7842 * C247 +
            C7860 + C7860 + C49238 * C259 + C7840 * C248 + C7861 + C7861 +
            C49251 * C260) *
               C48975 * C7838 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C48975 * C7837) *
              C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C48975 * C7837 +
           (C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
            C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
            C49211 * C257) *
               C48975 * C7838 +
           (C7840 * C539 + C7871 + C7871 + C49251 * C549 + C7842 * C540 +
            C7872 + C7872 + C49238 * C550 + C7844 * C541 + C7873 + C7873 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           (C9184 * C249 + C9188 + C9188 + C48857 * C261) * C48975 * C9180 +
           (C9184 * C537 + C9189 + C9189 + C48857 * C547) * C48975 * C9181 +
           (C9184 * C1207 + C9190 + C9190 + C48857 * C1215) * C48975 * C9182 +
           (C9184 * C1715 + C9191 + C9191 + C48857 * C1721) * C48975 * C9183) *
              C48945 * C48928 * C110 -
          ((C9184 * C1716 + C9192 + C9192 + C48857 * C1722) * C48975 * C9183 +
           (C9184 * C1206 + C9193 + C9193 + C48857 * C1214) * C48975 * C9182 +
           (C9184 * C538 + C9194 + C9194 + C48857 * C548) * C48975 * C9181 +
           (C9184 * C248 + C9195 + C9195 + C48857 * C260) * C48975 * C9180 +
           (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
              C48945 * C48928 * C111 +
          ((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C48975 * C9179 +
           (C9184 * C247 + C9198 + C9198 + C48857 * C259) * C48975 * C9180 +
           (C9184 * C539 + C9199 + C9199 + C48857 * C549) * C48975 * C9181 +
           (C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C48975 * C9182 +
           (C9184 * C1717 + C9201 + C9201 + C48857 * C1723) * C48975 * C9183) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C49244 +
            (C9184 * C890 + C9934 + C9934 + C48857 * C900) * C49225) *
               C7837 +
           (C9324 * C49255 + C9697 * C49244 +
            (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C49225) *
               C7838 +
           (C9325 * C49255 + C9696 * C49244 +
            (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C49225) *
               C49222) *
              C48945 * C48928 * C110 -
          (((C9184 * C2339 + C10049 + C10049 + C48857 * C2351) * C49225 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C49244 +
            C9329 * C49255) *
               C49222 +
           ((C9184 * C2336 + C10050 + C10050 + C48857 * C2348) * C49225 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C49244 +
            C9328 * C49255) *
               C7838 +
           ((C9184 * C891 + C10051 + C10051 + C48857 * C901) * C49225 +
            (C9184 * C360 + C9433 + C9433 + C48857 * C372) * C49244 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
               C7837) *
              C48945 * C48928 * C111 +
          (((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C49255 +
            (C9184 * C359 + C10052 + C10052 + C48857 * C371) * C49244 +
            (C9184 * C892 + C10053 + C10053 + C48857 * C902) * C49225) *
               C7837 +
           ((C9184 * C247 + C9198 + C9198 + C48857 * C259) * C49255 +
            (C9184 * C641 + C10054 + C10054 + C48857 * C651) * C49244 +
            (C9184 * C2337 + C10055 + C10055 + C48857 * C2349) * C49225) *
               C7838 +
           ((C9184 * C539 + C9199 + C9199 + C48857 * C549) * C49255 +
            (C9184 * C1429 + C10056 + C10056 + C48857 * C1437) * C49244 +
            (C9184 * C2340 + C10057 + C10057 + C48857 * C2352) * C49225) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C241 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C243 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C241 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C243 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C1026 * C361 + C1450 + C1450 + C1020 * C373 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1030 * C359 + C1448 + C1448 +
             C49211 * C371) *
                C49244 +
            (C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 +
             C2355 + C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
             C49211 * C902) *
                C49225) *
               C48963 * C48945 * C241 -
           ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
             C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
             C1020 * C2347) *
                C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C1278 + C1279 + C1280) * C49255 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C49244 +
            (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
             C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
             C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C1030 * C893 + C2476 + C2476 + C49211 * C903 + C1028 * C892 +
             C2477 + C2477 + C1021 * C902 + C1026 * C891 + C2478 + C2478 +
             C1020 * C901) *
                C49225 +
            (C1030 * C358 + C1453 + C1453 + C49211 * C370 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1026 * C360 + C1451 + C1451 +
             C1020 * C372) *
                C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C241 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C241 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C243 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C49244 +
             (C9184 * C890 + C9934 + C9934 + C48857 * C900) * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C48945 * C241 -
           (((C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C49225 +
             C9695 * C49244 + C9326 * C49255) *
                C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C48945 * C49217) *
              C243 +
          (((C10215 + C10246 + C10247) * C7837 +
            (C10220 + C10248 + C10249) * C7838 +
            (C9330 * C49255 +
             (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49244 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            ((C9184 * C891 + C10051 + C10051 + C48857 * C901) * C49225 +
             (C9184 * C360 + C9433 + C9433 + C48857 * C372) * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C355 -
           ((C1030 * C1429 + C1442 + C1442 + C49211 * C1437 + C1028 * C1430 +
             C1443 + C1443 + C1021 * C1438 + C1026 * C1431 + C1444 + C1444 +
             C1020 * C1439) *
                C48975 * C49222 +
            (C1030 * C641 + C1445 + C1445 + C49211 * C651 + C1028 * C640 +
             C1446 + C1446 + C1021 * C650 + C1026 * C639 + C1447 + C1447 +
             C1020 * C649) *
                C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C243 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C243 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C355 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C2855 + C2856 + C2857) * C49255 +
            (C2858 + C2859 + C2860) * C49244 +
            (C1026 * C2783 + C2822 + C2822 + C1020 * C2791 + C1028 * C2782 +
             C2823 + C2823 + C1021 * C2790 + C1030 * C2785 + C2824 + C2824 +
             C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C355 -
           ((C7844 * C1429 + C8232 + C8232 + C49211 * C1437 + C7842 * C1430 +
             C8233 + C8233 + C49238 * C1438 + C7840 * C1431 + C8234 + C8234 +
             C49251 * C1439) *
                C48975 * C49222 +
            (C7844 * C641 + C8235 + C8235 + C49211 * C651 + C7842 * C640 +
             C8236 + C8236 + C49238 * C650 + C7840 * C639 + C8237 + C8237 +
             C49251 * C649) *
                C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C243 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           ((C9184 * C9421 + C9428 + C9428 + C48857 * C9425) * C48975 * C9183 +
            (C9184 * C1891 + C9429 + C9429 + C48857 * C1897) * C48975 * C9182 +
            (C9184 * C1431 + C9430 + C9430 + C48857 * C1439) * C48975 * C9181 +
            (C9184 * C639 + C9431 + C9431 + C48857 * C649) * C48975 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C243 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C355 -
           (((C9184 * C10395 + C10406 + C10406 + C48857 * C10399) * C49225 +
             C10239 * C49244 + C9696 * C49255) *
                C49222 +
            ((C9184 * C3262 + C10407 + C10407 + C48857 * C3268) * C49225 +
             C10238 * C49244 + C9697 * C49255) *
                C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C48928 * C243 +
          (((C10426 * C49255 + C10427 * C49244 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C7837 +
            (C10240 * C49255 + C10241 * C49244 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C7838 +
            (C10242 * C49255 + C10243 * C49244 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C467 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C469 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C467 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C469 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C48945 * C467 -
           ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
             C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
             C1020 * C2347) *
                C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C1278 + C1279 + C1280) * C49255 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C49244 +
            (C1026 * C2336 + C2634 + C2634 + C1020 * C2348 + C1028 * C2337 +
             C2635 + C2635 + C1021 * C2349 + C1030 * C2630 + C2636 + C2636 +
             C49211 * C2632) *
                C49225) *
               C48963 * C48945 * C49217 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C467 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C467 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C469 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 +
            (C10211 + C10212 + C10245) * C49222) *
               C48945 * C467 -
           (((C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C49225 +
             C9695 * C49244 + C9326 * C49255) *
                C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C48945 * C49217) *
              C469 +
          (((C10215 + C10246 + C10247) * C7837 +
            (C10220 + C10248 + C10249) * C7838 +
            (C9330 * C49255 +
             (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C49244 +
             (C9184 * C10203 + C10225 + C10225 + C48857 * C10205) * C49225) *
                C49222) *
               C48945 * C49217 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C48945 * C533 -
          ((C1743 + C1744 + C1745) * C48975 * C49222 +
           (C1277 + C1276 + C1275) * C48975 * C49242 +
           (C1274 + C1273 + C1272) * C48975 * C49254) *
              C48945 * C534 +
          (C1739 * C49254 + (C1745 + C1744 + C1743) * C48975 * C49242 +
           (C1026 * C1715 + C1732 + C1732 + C1020 * C1721 + C1028 * C1716 +
            C1733 + C1733 + C1021 * C1722 + C1030 * C1717 + C1734 + C1734 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C533 -
          (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 + C265 +
           C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 + C115 * C248 +
           C267 + C267 + C102 * C260 + C113 * C249 + C268 + C268 +
           C101 * C261) *
              C48975 * C48963 * C48945 * C534 +
          (C113 * C537 + C553 + C553 + C101 * C547 + C115 * C538 + C554 + C554 +
           C102 * C548 + C117 * C539 + C555 + C555 + C103 * C549 + C119 * C540 +
           C556 + C556 + C104 * C550 + C121 * C541 + C557 + C557 +
           C105 * C551) *
              C48975 * C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C49255 +
           (C2849 + C2850 + C2851) * C49244 +
           (C2852 + C2853 + C2854) * C49225) *
              C48963 * C48945 * C533 -
          ((C1030 * C2337 + C2359 + C2359 + C49211 * C2349 + C1028 * C2336 +
            C2358 + C2358 + C1021 * C2348 + C1026 * C2335 + C2357 + C2357 +
            C1020 * C2347) *
               C49225 +
           (C1931 + C1932 + C1933) * C49244 +
           (C1274 + C1273 + C1272) * C49255) *
              C48963 * C48945 * C534 +
          (C1735 * C49255 + (C1930 + C1929 + C1928) * C49244 +
           (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
            C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
            C49211 * C2352) *
               C49225) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C48945 * C533 -
          ((C8524 + C8525 + C8526) * C48975 * C49222 +
           (C8079 + C8078 + C8077) * C48975 * C7838 +
           (C8076 + C8075 + C8074) * C48975 * C7837) *
              C48945 * C534 +
          (C8520 * C7837 + (C8526 + C8525 + C8524) * C48975 * C7838 +
           (C7840 * C1715 + C8513 + C8513 + C49251 * C1721 + C7842 * C1716 +
            C8514 + C8514 + C49238 * C1722 + C7844 * C1717 + C8515 + C8515 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C48945 * C533 -
          (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
           C9332 * C9179) *
              C48945 * C534 +
          (C9333 * C9179 + C9334 * C9180 + C9335 * C9181 + C9591 * C9182 +
           (C9184 * C9581 + C9587 + C9587 + C48857 * C9583) * C48975 * C9183) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            C10424 * C49244 + C10425 * C49225) *
               C7837 +
           (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
              C48945 * C533 -
          ((C10693 + C10687 + C10688) * C49222 +
           (C10245 + C10212 + C10211) * C7838 +
           (C10244 + C10208 + C10207) * C7837) *
              C48945 * C534 +
          (C10689 * C7837 + (C10688 + C10687 + C10693) * C7838 +
           (C9327 * C49255 + C9694 * C49244 +
            (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C49225) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C355 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C467 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C467 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C355 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C467 +
          (((C1933 + C1932 + C1931) * C49255 +
            (C3287 + C3288 + C3289) * C49244 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C3289 + C3288 + C3287) * C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C355 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C467 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C355 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C467 +
          (((C10850 + C10849 + C10859) * C7837 +
            (C10846 + C10845 + C10858) * C7838 +
            (C9695 * C49255 + C10692 * C49244 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C10693 + C10687 + C10688) * C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C469 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C469 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C741 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C2855 + C2856 + C2857) * C49255 +
            (C2858 + C2859 + C2860) * C49244 +
            (C1026 * C2783 + C2822 + C2822 + C1020 * C2791 + C1028 * C2782 +
             C2823 + C2823 + C1021 * C2790 + C1030 * C2785 + C2824 + C2824 +
             C49211 * C2793) *
                C49225) *
               C48963 * C49219 -
           ((C2860 + C2859 + C2858) * C49225 +
            (C2857 + C2856 + C2855) * C49244 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C49255) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C469 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C469 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C741 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C48928 * C469 +
          (((C10426 * C49255 + C10427 * C49244 +
             (C9184 * C2783 + C10413 + C10413 + C48857 * C2791) * C49225) *
                C7837 +
            (C10240 * C49255 + C10241 * C49244 +
             (C9184 * C3263 + C10414 + C10414 + C48857 * C3269) * C49225) *
                C7838 +
            (C10242 * C49255 + C10243 * C49244 +
             (C9184 * C10396 + C10415 + C10415 + C48857 * C10400) * C49225) *
                C49222) *
               C49219 -
           ((C10249 + C10248 + C10220) * C49222 +
            (C10247 + C10246 + C10215) * C7838 +
            (C10427 * C49225 + C10426 * C49244 +
             (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C49255) *
                C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C241 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C241 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C49255 +
            (C2849 + C2850 + C2851) * C49244 +
            (C2852 + C2853 + C2854) * C49225) *
               C48963 * C741 -
           ((C1030 * C2782 + C2807 + C2807 + C49211 * C2790 + C1028 * C2783 +
             C2808 + C2808 + C1021 * C2791 + C1026 * C2784 + C2809 + C2809 +
             C1020 * C2792) *
                C49225 +
            (C2854 + C2853 + C2852) * C49244 +
            (C2851 + C2850 + C2849) * C49255) *
               C48963 * C49219) *
              C241 +
          (((C1933 + C1932 + C1931) * C49255 +
            (C3287 + C3288 + C3289) * C49244 +
            (C1026 * C3262 + C3278 + C3278 + C1020 * C3268 + C1028 * C3263 +
             C3279 + C3279 + C1021 * C3269 + C1030 * C3264 + C3280 + C3280 +
             C49211 * C3270) *
                C49225) *
               C48963 * C49219 -
           ((C3289 + C3288 + C3287) * C49225 +
            (C1931 + C1932 + C1933) * C49244 +
            (C1274 + C1273 + C1272) * C49255) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C241 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
             C10424 * C49244 + C10425 * C49225) *
                C7837 +
            (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
               C741 -
           ((C10858 + C10845 + C10846) * C49222 +
            (C10859 + C10849 + C10850) * C7838 +
            ((C9184 * C2784 + C10408 + C10408 + C48857 * C2792) * C49225 +
             C10425 * C49244 + C10424 * C49255) *
                C7837) *
               C49219) *
              C241 +
          (((C10850 + C10849 + C10859) * C7837 +
            (C10846 + C10845 + C10858) * C7838 +
            (C9695 * C49255 + C10692 * C49244 +
             (C9184 * C10839 + C10851 + C10851 + C48857 * C10841) * C49225) *
                C49222) *
               C49219 -
           ((C10693 + C10687 + C10688) * C49222 +
            (C10245 + C10212 + C10211) * C7838 +
            (C10244 + C10208 + C10207) * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C887 -
          ((C1928 + C1929 + C1930) * C48975 * C49222 +
           (C1931 + C1932 + C1933) * C48975 * C49242 +
           (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
            C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
            C1020 * C373) *
               C48975 * C49254) *
              C888 +
          ((C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 + C2355 +
            C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
            C49211 * C902) *
               C48975 * C49254 +
           (C1026 * C2335 + C2357 + C2357 + C1020 * C2347 + C1028 * C2336 +
            C2358 + C2358 + C1021 * C2348 + C1030 * C2337 + C2359 + C2359 +
            C49211 * C2349) *
               C48975 * C49242 +
           (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
            C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C887 -
          (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 + C377 +
           C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 + C115 * C360 +
           C379 + C379 + C102 * C372 + C113 * C361 + C380 + C380 +
           C101 * C373) *
              C48975 * C48963 * C888 +
          (C113 * C890 + C906 + C906 + C101 * C900 + C115 * C891 + C907 + C907 +
           C102 * C901 + C117 * C892 + C908 + C908 + C103 * C902 + C119 * C893 +
           C909 + C909 + C104 * C903 + C121 * C894 + C910 + C910 +
           C105 * C904) *
              C48975 * C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C49255 +
           (C2849 + C2850 + C2851) * C49244 + C3711 * C49225) *
              C48963 * C887 -
          ((C3718 + C3719 + C3720) * C49225 + (C2854 + C2853 + C2852) * C49244 +
           (C2851 + C2850 + C2849) * C49255) *
              C48963 * C888 +
          (C3711 * C49255 + (C3720 + C3719 + C3718) * C49244 +
           (C1026 * C3691 + C3708 + C3708 + C1020 * C3697 + C1028 * C3692 +
            C3709 + C3709 + C1021 * C3698 + C1030 * C3693 + C3710 + C3710 +
            C49211 * C3699) *
               C49225) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C887 -
          ((C8700 + C8701 + C8702) * C48975 * C49222 +
           (C8703 + C8704 + C8705) * C48975 * C7838 +
           (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
            C49251 * C373) *
               C48975 * C7837) *
              C888 +
          ((C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C48975 * C7837 +
           (C7840 * C2335 + C9111 + C9111 + C49251 * C2347 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7844 * C2337 + C9113 + C9113 +
            C49211 * C2349) *
               C48975 * C7838 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C887 -
          (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
           (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
              C888 +
          ((C9184 * C890 + C9934 + C9934 + C48857 * C900) * C48975 * C9179 +
           (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C48975 * C9180 +
           (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C48975 * C9181 +
           (C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C48975 * C9182 +
           (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C48975 * C9183) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C49255 +
            C10424 * C49244 + C10425 * C49225) *
               C7837 +
           (C10207 + C10208 + C10244) * C7838 + C10689 * C49222) *
              C887 -
          ((C10858 + C10845 + C10846) * C49222 +
           (C10859 + C10849 + C10850) * C7838 +
           (C11275 * C49225 + C10425 * C49244 + C10424 * C49255) * C7837) *
              C888 +
          ((C10425 * C49255 + C11275 * C49244 +
            (C9184 * C3691 + C11270 + C11270 + C48857 * C3697) * C49225) *
               C7837 +
           (C10238 * C49255 + C10857 * C49244 +
            (C9184 * C11261 + C11271 + C11271 + C48857 * C11265) * C49225) *
               C7838 +
           (C10239 * C49255 + C10856 * C49244 +
            (C9184 * C11262 + C11272 + C11272 + C48857 * C11266) * C49225) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C3824 * C361 + C4172 + C4172 + C3818 * C373 + C3826 * C360 + C4171 +
            C4171 + C3819 * C372 + C3828 * C359 + C4170 + C4170 + C3820 * C371 +
            C3830 * C358 + C4169 + C4169 + C49188 * C370) *
               C49062) *
              C48963 * C48945 * C48928 * C110 -
          ((C3830 * C357 + C4176 + C4176 + C49188 * C369 + C3828 * C358 +
            C4175 + C4175 + C3820 * C370 + C3826 * C359 + C4174 + C4174 +
            C3819 * C371 + C3824 * C360 + C4173 + C4173 + C3818 * C372) *
               C49062 +
           (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
            C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
            C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
               C49190) *
              C48963 * C48945 * C48928 * C111 +
          ((C3824 * C125 + C3849 + C3849 + C3818 * C139 + C3826 * C126 + C3850 +
            C3850 + C3819 * C140 + C3828 * C127 + C3851 + C3851 + C3820 * C141 +
            C3830 * C128 + C3852 + C3852 + C49188 * C142) *
               C49190 +
           (C3824 * C359 + C5053 + C5053 + C3818 * C371 + C3826 * C358 + C5054 +
            C5054 + C3819 * C370 + C3828 * C357 + C5055 + C5055 + C3820 * C369 +
            C3830 * C362 + C5056 + C5056 + C49188 * C374) *
               C49062) *
              C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C11379 * C361 + C11739 + C11739 + C49167 * C373 + C11381 * C360 +
             C11738 + C11738 + C48867 * C372) *
                C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
           (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
              C48945 * C48928 * C110 -
          (((C11381 * C1429 + C11745 + C11745 + C48867 * C1437 +
             C11379 * C1430 + C11744 + C11744 + C49167 * C1438) *
                C49062 +
            (C11599 + C11598) * C49190) *
               C49222 +
           ((C11381 * C641 + C11743 + C11743 + C48867 * C651 + C11379 * C640 +
             C11742 + C11742 + C49167 * C650) *
                C49062 +
            (C11597 + C11596) * C49190) *
               C7838 +
           ((C11381 * C359 + C11741 + C11741 + C48867 * C371 + C11379 * C360 +
             C11740 + C11740 + C49167 * C372) *
                C49062 +
            (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
             C11399 + C11399 + C49167 * C138) *
                C49190) *
               C7837) *
              C48945 * C48928 * C111 +
          (((C11379 * C125 + C11400 + C11400 + C49167 * C139 + C11381 * C126 +
             C11401 + C11401 + C48867 * C140) *
                C49190 +
            (C11379 * C359 + C12666 + C12666 + C49167 * C371 + C11381 * C358 +
             C12667 + C12667 + C48867 * C370) *
                C49062) *
               C7837 +
           ((C11379 * C247 + C11402 + C11402 + C49167 * C259 + C11381 * C246 +
             C11403 + C11403 + C48867 * C258) *
                C49190 +
            (C11379 * C641 + C12668 + C12668 + C49167 * C651 + C11381 * C642 +
             C12669 + C12669 + C48867 * C652) *
                C49062) *
               C7838 +
           ((C11379 * C539 + C11404 + C11404 + C49167 * C549 + C11381 * C540 +
             C11405 + C11405 + C48867 * C550) *
                C49190 +
            (C11379 * C1429 + C12670 + C12670 + C49167 * C1437 +
             C11381 * C1432 + C12671 + C12671 + C48867 * C1440) *
                C49062) *
               C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C3824 * C361 + C4172 + C4172 + C3818 * C373 + C3826 * C360 +
             C4171 + C4171 + C3819 * C372 + C3828 * C359 + C4170 + C4170 +
             C3820 * C371 + C3830 * C358 + C4169 + C4169 + C49188 * C370) *
                C49062) *
               C48963 * C48945 * C241 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C48945 * C49217) *
              C243 +
          (((C4031 + C4032 + C4033 + C4034) * C49190 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C3830 * C357 + C4176 + C4176 + C49188 * C369 + C3828 * C358 +
             C4175 + C4175 + C3820 * C370 + C3826 * C359 + C4174 + C4174 +
             C3819 * C371 + C3824 * C360 + C4173 + C4173 + C3818 * C372) *
                C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C11379 * C361 + C11739 + C11739 + C49167 * C373 + C11381 * C360 +
              C11738 + C11738 + C48867 * C372) *
                 C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C48945 * C241 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
            ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C48945 * C49217) *
              C243 +
          ((((C11596 + C11597) * C49190 + (C12882 + C12883) * C49062) * C7837 +
            ((C11598 + C11599) * C49190 + (C12884 + C12885) * C49062) * C7838 +
            ((C11600 + C11601) * C49190 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C11381 * C359 + C11741 + C11741 + C48867 * C371 + C11379 * C360 +
              C11740 + C11740 + C49167 * C372) *
                 C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C355 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C48928 * C243 +
          (((C5357 + C5358 + C5359 + C5360) * C49190 +
            (C3824 * C891 + C5333 + C5333 + C3818 * C901 + C3826 * C892 +
             C5334 + C5334 + C3819 * C902 + C3828 * C893 + C5335 + C5335 +
             C3820 * C903 + C3830 * C894 + C5336 + C5336 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C355 -
           (((C11381 * C2339 + C12517 + C12517 + C48867 * C2351 +
              C11379 * C2338 + C12516 + C12516 + C49167 * C2350) *
                 C49062 +
             (C12150 + C12151) * C49190) *
                C49222 +
            ((C11381 * C2336 + C12515 + C12515 + C48867 * C2348 +
              C11379 * C2335 + C12514 + C12514 + C49167 * C2347) *
                 C49062 +
             (C12152 + C12153) * C49190) *
                C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C48928 * C243 +
          ((((C13104 + C13105) * C49190 +
             (C11379 * C891 + C13088 + C13088 + C49167 * C901 + C11381 * C892 +
              C13089 + C13089 + C48867 * C902) *
                 C49062) *
                C7837 +
            ((C12882 + C12883) * C49190 +
             (C11379 * C2336 + C13090 + C13090 + C49167 * C2348 +
              C11381 * C2337 + C13091 + C13091 + C48867 * C2349) *
                 C49062) *
                C7838 +
            ((C12884 + C12885) * C49190 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C48945 * C467 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C48945 * C49217) *
              C469 +
          (((C4031 + C4032 + C4033 + C4034) * C49190 +
            (C3824 * C640 + C4177 + C4177 + C3818 * C650 + C3826 * C641 +
             C4178 + C4178 + C3819 * C651 + C3828 * C642 + C4179 + C4179 +
             C3820 * C652 + C3830 * C643 + C4180 + C4180 + C49188 * C653) *
                C49062) *
               C48963 * C48945 * C49217 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
            (C11976 * C49190 + (C12151 + C12150) * C49062) * C49222) *
               C48945 * C467 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
            ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C48945 * C49217) *
              C469 +
          ((((C11596 + C11597) * C49190 + (C12882 + C12883) * C49062) * C7837 +
            ((C11598 + C11599) * C49190 + (C12884 + C12885) * C49062) * C7838 +
            ((C11600 + C11601) * C49190 +
             (C11379 * C1892 + C11746 + C11746 + C49167 * C1898 +
              C11381 * C1893 + C11747 + C11747 + C48867 * C1899) *
                 C49062) *
                C49222) *
               C48945 * C49217 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C5353 + C5354 + C5355 + C5356) * C49062) *
              C48963 * C48945 * C533 -
          ((C4583 + C4584 + C4585 + C4586) * C49062 +
           (C4030 + C4029 + C4028 + C4027) * C49190) *
              C48963 * C48945 * C534 +
          ((C4432 + C4431 + C4430 + C4429) * C49190 +
           (C3824 * C1431 + C4571 + C4571 + C3818 * C1439 + C3826 * C1430 +
            C4572 + C4572 + C3819 * C1438 + C3828 * C1429 + C4573 + C4573 +
            C3820 * C1437 + C3830 * C1432 + C4574 + C4574 + C49188 * C1440) *
               C49062) *
              C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C13102 + C13103) * C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + (C12153 + C12152) * C49062) * C7838 +
           C13449 * C49222) *
              C48945 * C533 -
          (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
           ((C12150 + C12151) * C49062 + (C11593 + C11592) * C49190) * C7838 +
           ((C12152 + C12153) * C49062 + (C11591 + C11590) * C49190) * C7837) *
              C48945 * C534 +
          (C13449 * C7837 +
           (C11977 * C49190 + (C12149 + C12148) * C49062) * C7838 +
           ((C11991 + C11990) * C49190 +
            (C11379 * C9421 + C12134 + C12134 + C49167 * C9425 +
             C11381 * C9422 + C12135 + C12135 + C48867 * C9426) *
                C49062) *
               C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C355 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C467 +
          (((C4586 + C4585 + C4584 + C4583) * C49190 +
            (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
             C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
             C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C355 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C467 +
          (((C13644 * C49190 + (C13666 + C13665) * C49062) * C7837 +
            (C13447 * C49190 + (C13664 + C13663) * C49062) * C7838 +
            ((C12149 + C12148) * C49190 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            (C13649 * C49062 + (C11593 + C11592) * C49190) * C7838 +
            (C13654 * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C741 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C48928 * C469 +
          (((C5357 + C5358 + C5359 + C5360) * C49190 +
            (C3824 * C891 + C5333 + C5333 + C3818 * C901 + C3826 * C892 +
             C5334 + C5334 + C3819 * C902 + C3828 * C893 + C5335 + C5335 +
             C3820 * C903 + C3830 * C894 + C5336 + C5336 + C49188 * C904) *
                C49062) *
               C48963 * C49219 -
           ((C5360 + C5359 + C5358 + C5357) * C49062 +
            (C3830 * C127 + C3845 + C3845 + C49188 * C141 + C3828 * C126 +
             C3846 + C3846 + C3820 * C140 + C3826 * C125 + C3847 + C3847 +
             C3819 * C139 + C3824 * C124 + C3848 + C3848 + C3818 * C138) *
                C49190) *
               C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C48928 * C469 +
          ((((C13104 + C13105) * C49190 +
             (C11379 * C891 + C13088 + C13088 + C49167 * C901 + C11381 * C892 +
              C13089 + C13089 + C48867 * C902) *
                 C49062) *
                C7837 +
            ((C12882 + C12883) * C49190 +
             (C11379 * C2336 + C13090 + C13090 + C49167 * C2348 +
              C11381 * C2337 + C13091 + C13091 + C48867 * C2349) *
                 C49062) *
                C7838 +
            ((C12884 + C12885) * C49190 +
             (C11379 * C2339 + C13092 + C13092 + C49167 * C2351 +
              C11381 * C2340 + C13093 + C13093 + C48867 * C2352) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12885 + C12884) * C49062 + (C11599 + C11598) * C49190) * C49222 +
            ((C12883 + C12882) * C49062 + (C11597 + C11596) * C49190) * C7838 +
            ((C13105 + C13104) * C49062 +
             (C11381 * C125 + C11398 + C11398 + C48867 * C139 + C11379 * C124 +
              C11399 + C11399 + C49167 * C138) *
                 C49190) *
                C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 +
             C3834 + C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 +
             C3820 * C139 + C3830 * C126 + C3836 + C3836 + C49188 * C140) *
                C49190 +
            (C5353 + C5354 + C5355 + C5356) * C49062) *
               C48963 * C741 -
           ((C3830 * C893 + C4948 + C4948 + C49188 * C903 + C3828 * C892 +
             C4947 + C4947 + C3820 * C902 + C3826 * C891 + C4946 + C4946 +
             C3819 * C901 + C3824 * C890 + C4945 + C4945 + C3818 * C900) *
                C49062 +
            (C5356 + C5355 + C5354 + C5353) * C49190) *
               C48963 * C49219) *
              C241 +
          (((C4586 + C4585 + C4584 + C4583) * C49190 +
            (C3824 * C2335 + C4949 + C4949 + C3818 * C2347 + C3826 * C2336 +
             C4950 + C4950 + C3819 * C2348 + C3828 * C2337 + C4951 + C4951 +
             C3820 * C2349 + C3830 * C2630 + C4952 + C4952 + C49188 * C2632) *
                C49062) *
               C48963 * C49219 -
           ((C4583 + C4584 + C4585 + C4586) * C49062 +
            (C4030 + C4029 + C4028 + C4027) * C49190) *
               C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
              C11385 + C11385 + C48867 * C138) *
                 C49190 +
             (C13102 + C13103) * C49062) *
                C7837 +
            ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
            C13449 * C49222) *
               C741 -
           (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
            ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
            ((C11381 * C891 + C12513 + C12513 + C48867 * C901 + C11379 * C890 +
              C12512 + C12512 + C49167 * C900) *
                 C49062 +
             (C13103 + C13102) * C49190) *
                C7837) *
               C49219) *
              C241 +
          (((C13644 * C49190 + (C13666 + C13665) * C49062) * C7837 +
            (C13447 * C49190 + (C13664 + C13663) * C49062) * C7838 +
            ((C12149 + C12148) * C49190 +
             (C11379 * C9927 + C12518 + C12518 + C49167 * C9931 +
              C11381 * C10203 + C12519 + C12519 + C48867 * C10205) *
                 C49062) *
                C49222) *
               C49219 -
           (((C12148 + C12149) * C49062 + (C11595 + C11594) * C49190) * C49222 +
            (C13649 * C49062 + (C11593 + C11592) * C49190) * C7838 +
            (C13654 * C49062 + (C11591 + C11590) * C49190) * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3824 * C123 + C3833 + C3833 + C3818 * C137 + C3826 * C124 + C3834 +
            C3834 + C3819 * C138 + C3828 * C125 + C3835 + C3835 + C3820 * C139 +
            C3830 * C126 + C3836 + C3836 + C49188 * C140) *
               C49190 +
           (C5353 + C5354 + C5355 + C5356) * C49062) *
              C48963 * C887 -
          ((C6097 + C6098 + C6099 + C6100) * C49062 +
           (C5356 + C5355 + C5354 + C5353) * C49190) *
              C48963 * C888 +
          ((C6100 + C6099 + C6098 + C6097) * C49190 +
           (C3824 * C2784 + C6085 + C6085 + C3818 * C2792 + C3826 * C2783 +
            C6086 + C6086 + C3819 * C2791 + C3828 * C2782 + C6087 + C6087 +
            C3820 * C2790 + C3830 * C2785 + C6088 + C6088 + C49188 * C2793) *
               C49062) *
              C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11379 * C123 + C11384 + C11384 + C49167 * C137 + C11381 * C124 +
             C11385 + C11385 + C48867 * C138) *
                C49190 +
            (C13102 + C13103) * C49062) *
               C7837 +
           ((C11590 + C11591) * C49190 + C13644 * C49062) * C7838 +
           C13449 * C49222) *
              C887 -
          (((C13663 + C13664) * C49062 + C13649 * C49190) * C49222 +
           ((C13665 + C13666) * C49062 + C13654 * C49190) * C7838 +
           ((C14215 + C14216) * C49062 + (C13103 + C13102) * C49190) * C7837) *
              C888 +
          (((C14216 + C14215) * C49190 +
            (C11379 * C2784 + C14205 + C14205 + C49167 * C2792 +
             C11381 * C2783 + C14206 + C14206 + C48867 * C2791) *
                C49062) *
               C7837 +
           ((C13666 + C13665) * C49190 +
            (C11379 * C3262 + C14207 + C14207 + C49167 * C3268 +
             C11381 * C3263 + C14208 + C14208 + C48867 * C3269) *
                C49062) *
               C7838 +
           ((C13664 + C13663) * C49190 +
            (C11379 * C10395 + C14209 + C14209 + C49167 * C10399 +
             C11381 * C10396 + C14210 + C14210 + C48867 * C10400) *
                C49062) *
               C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C48928 * C110 -
          (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 + C151 +
           C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 + C115 * C125 +
           C153 + C153 + C102 * C139 + C113 * C124 + C154 + C154 +
           C101 * C138) *
              C48975 * C48963 * C48945 * C48928 * C111 +
          (C113 * C125 + C155 + C155 + C101 * C139 + C115 * C126 + C156 + C156 +
           C102 * C140 + C117 * C127 + C157 + C157 + C103 * C141 + C119 * C128 +
           C158 + C158 + C104 * C142 + C121 * C129 + C159 + C159 +
           C105 * C143) *
              C48975 * C48963 * C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1026 * C249 + C1036 + C1036 + C1020 * C261 + C1028 * C248 + C1037 +
            C1037 + C1021 * C260 + C1030 * C247 + C1038 + C1038 +
            C49211 * C259) *
               C48975 * C49242 +
           (C1026 * C537 + C1039 + C1039 + C1020 * C547 + C1028 * C538 + C1040 +
            C1040 + C1021 * C548 + C1030 * C539 + C1041 + C1041 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C1030 * C540 + C1042 + C1042 + C49211 * C550 + C1028 * C539 +
            C1043 + C1043 + C1021 * C549 + C1026 * C538 + C1044 + C1044 +
            C1020 * C548) *
               C48975 * C49222 +
           (C1030 * C246 + C1045 + C1045 + C49211 * C258 + C1028 * C247 +
            C1046 + C1046 + C1021 * C259 + C1026 * C248 + C1047 + C1047 +
            C1020 * C260) *
               C48975 * C49242 +
           (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
            C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
            C1020 * C138) *
               C48975 * C49254) *
              C48945 * C48928 * C111 +
          ((C1026 * C125 + C1051 + C1051 + C1020 * C139 + C1028 * C126 + C1052 +
            C1052 + C1021 * C140 + C1030 * C127 + C1053 + C1053 +
            C49211 * C141) *
               C48975 * C49254 +
           (C1026 * C247 + C1054 + C1054 + C1020 * C259 + C1028 * C246 + C1055 +
            C1055 + C1021 * C258 + C1030 * C245 + C1056 + C1056 +
            C49211 * C257) *
               C48975 * C49242 +
           (C1026 * C539 + C1057 + C1057 + C1020 * C549 + C1028 * C540 + C1058 +
            C1058 + C1021 * C550 + C1030 * C541 + C1059 + C1059 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C7840 * C249 + C7850 + C7850 + C49251 * C261 + C7842 * C248 +
            C7851 + C7851 + C49238 * C260 + C7844 * C247 + C7852 + C7852 +
            C49211 * C259) *
               C48975 * C7838 +
           (C7840 * C537 + C7853 + C7853 + C49251 * C547 + C7842 * C538 +
            C7854 + C7854 + C49238 * C548 + C7844 * C539 + C7855 + C7855 +
            C49211 * C549) *
               C48975 * C49222) *
              C48945 * C48928 * C110 -
          ((C7844 * C540 + C7856 + C7856 + C49211 * C550 + C7842 * C539 +
            C7857 + C7857 + C49238 * C549 + C7840 * C538 + C7858 + C7858 +
            C49251 * C548) *
               C48975 * C49222 +
           (C7844 * C246 + C7859 + C7859 + C49211 * C258 + C7842 * C247 +
            C7860 + C7860 + C49238 * C259 + C7840 * C248 + C7861 + C7861 +
            C49251 * C260) *
               C48975 * C7838 +
           (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
            C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
            C49251 * C138) *
               C48975 * C7837) *
              C48945 * C48928 * C111 +
          ((C7840 * C125 + C7865 + C7865 + C49251 * C139 + C7842 * C126 +
            C7866 + C7866 + C49238 * C140 + C7844 * C127 + C7867 + C7867 +
            C49211 * C141) *
               C48975 * C7837 +
           (C7840 * C247 + C7868 + C7868 + C49251 * C259 + C7842 * C246 +
            C7869 + C7869 + C49238 * C258 + C7844 * C245 + C7870 + C7870 +
            C49211 * C257) *
               C48975 * C7838 +
           (C7840 * C539 + C7871 + C7871 + C49251 * C549 + C7842 * C540 +
            C7872 + C7872 + C49238 * C550 + C7844 * C541 + C7873 + C7873 +
            C49211 * C551) *
               C48975 * C49222) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           (C9184 * C249 + C9188 + C9188 + C48857 * C261) * C48975 * C9180 +
           (C9184 * C537 + C9189 + C9189 + C48857 * C547) * C48975 * C9181 +
           (C9184 * C1207 + C9190 + C9190 + C48857 * C1215) * C48975 * C9182 +
           (C9184 * C1715 + C9191 + C9191 + C48857 * C1721) * C48975 * C9183) *
              C48945 * C48928 * C110 -
          ((C9184 * C1716 + C9192 + C9192 + C48857 * C1722) * C48975 * C9183 +
           (C9184 * C1206 + C9193 + C9193 + C48857 * C1214) * C48975 * C9182 +
           (C9184 * C538 + C9194 + C9194 + C48857 * C548) * C48975 * C9181 +
           (C9184 * C248 + C9195 + C9195 + C48857 * C260) * C48975 * C9180 +
           (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
              C48945 * C48928 * C111 +
          ((C9184 * C125 + C9197 + C9197 + C48857 * C139) * C48975 * C9179 +
           (C9184 * C247 + C9198 + C9198 + C48857 * C259) * C48975 * C9180 +
           (C9184 * C539 + C9199 + C9199 + C48857 * C549) * C48975 * C9181 +
           (C9184 * C1205 + C9200 + C9200 + C48857 * C1213) * C48975 * C9182 +
           (C9184 * C1717 + C9201 + C9201 + C48857 * C1723) * C48975 * C9183) *
              C48945 * C48928 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C241 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C243 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C241 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C243 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C241 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C243 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C241 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C243 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C241) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C243 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C355 -
           ((C1030 * C1429 + C1442 + C1442 + C49211 * C1437 + C1028 * C1430 +
             C1443 + C1443 + C1021 * C1438 + C1026 * C1431 + C1444 + C1444 +
             C1020 * C1439) *
                C48975 * C49222 +
            (C1030 * C641 + C1445 + C1445 + C49211 * C651 + C1028 * C640 +
             C1446 + C1446 + C1021 * C650 + C1026 * C639 + C1447 + C1447 +
             C1020 * C649) *
                C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C243 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C355 -
           ((C7844 * C1429 + C8232 + C8232 + C49211 * C1437 + C7842 * C1430 +
             C8233 + C8233 + C49238 * C1438 + C7840 * C1431 + C8234 + C8234 +
             C49251 * C1439) *
                C48975 * C49222 +
            (C7844 * C641 + C8235 + C8235 + C49211 * C651 + C7842 * C640 +
             C8236 + C8236 + C49238 * C650 + C7840 * C639 + C8237 + C8237 +
             C49251 * C649) *
                C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C243 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           ((C9184 * C9421 + C9428 + C9428 + C48857 * C9425) * C48975 * C9183 +
            (C9184 * C1891 + C9429 + C9429 + C48857 * C1897) * C48975 * C9182 +
            (C9184 * C1431 + C9430 + C9430 + C48857 * C1439) * C48975 * C9181 +
            (C9184 * C639 + C9431 + C9431 + C48857 * C649) * C48975 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C243 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C355) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C48945 * C467 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C48945 * C49217) *
              C469 +
          ((C113 * C248 + C269 + C269 + C101 * C260 + C115 * C247 + C270 +
            C270 + C102 * C259 + C117 * C246 + C271 + C271 + C103 * C258 +
            C119 * C245 + C272 + C272 + C104 * C257 + C121 * C250 + C273 +
            C273 + C105 * C262) *
               C48975 * C48963 * C48945 * C49217 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 +
            (C1275 + C1276 + C1277) * C48975 * C49222) *
               C48945 * C467 -
           ((C1030 * C1205 + C1230 + C1230 + C49211 * C1213 + C1028 * C1206 +
             C1231 + C1231 + C1021 * C1214 + C1026 * C1207 + C1232 + C1232 +
             C1020 * C1215) *
                C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C48945 * C49217) *
              C469 +
          (((C1278 + C1279 + C1280) * C48975 * C49254 +
            (C1281 + C1282 + C1283) * C48975 * C49242 +
            (C1026 * C1206 + C1245 + C1245 + C1020 * C1214 + C1028 * C1205 +
             C1246 + C1246 + C1021 * C1213 + C1030 * C1208 + C1247 + C1247 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 +
            (C8077 + C8078 + C8079) * C48975 * C49222) *
               C48945 * C467 -
           ((C7844 * C1205 + C8032 + C8032 + C49211 * C1213 + C7842 * C1206 +
             C8033 + C8033 + C49238 * C1214 + C7840 * C1207 + C8034 + C8034 +
             C49251 * C1215) *
                C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C48945 * C49217) *
              C469 +
          (((C8080 + C8081 + C8082) * C48975 * C7837 +
            (C8083 + C8084 + C8085) * C48975 * C7838 +
            (C7840 * C1206 + C8047 + C8047 + C49251 * C1214 + C7842 * C1205 +
             C8048 + C8048 + C49238 * C1213 + C7844 * C1208 + C8049 + C8049 +
             C49211 * C1216) *
                C48975 * C49222) *
               C48945 * C49217 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C48945 * C467 -
           ((C9184 * C9283 + C9298 + C9298 + C48857 * C9287) * C48975 * C9183 +
            C9335 * C9182 + C9334 * C9181 + C9333 * C9180 + C9332 * C9179) *
               C48945 * C49217) *
              C469 +
          ((C9336 * C9179 + C9337 * C9180 + C9338 * C9181 + C9339 * C9182 +
            (C9184 * C9284 + C9307 + C9307 + C48857 * C9288) * C48975 * C9183) *
               C48945 * C49217 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C48945 * C467) *
              C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C48945 * C533 -
          (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 + C265 +
           C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 + C115 * C248 +
           C267 + C267 + C102 * C260 + C113 * C249 + C268 + C268 +
           C101 * C261) *
              C48975 * C48963 * C48945 * C534 +
          (C113 * C537 + C553 + C553 + C101 * C547 + C115 * C538 + C554 + C554 +
           C102 * C548 + C117 * C539 + C555 + C555 + C103 * C549 + C119 * C540 +
           C556 + C556 + C104 * C550 + C121 * C541 + C557 + C557 +
           C105 * C551) *
              C48975 * C48963 * C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C48945 * C533 -
          ((C1743 + C1744 + C1745) * C48975 * C49222 +
           (C1277 + C1276 + C1275) * C48975 * C49242 +
           (C1274 + C1273 + C1272) * C48975 * C49254) *
              C48945 * C534 +
          (C1739 * C49254 + (C1745 + C1744 + C1743) * C48975 * C49242 +
           (C1026 * C1715 + C1732 + C1732 + C1020 * C1721 + C1028 * C1716 +
            C1733 + C1733 + C1021 * C1722 + C1030 * C1717 + C1734 + C1734 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C48945 * C533 -
          ((C8524 + C8525 + C8526) * C48975 * C49222 +
           (C8079 + C8078 + C8077) * C48975 * C7838 +
           (C8076 + C8075 + C8074) * C48975 * C7837) *
              C48945 * C534 +
          (C8520 * C7837 + (C8526 + C8525 + C8524) * C48975 * C7838 +
           (C7840 * C1715 + C8513 + C8513 + C49251 * C1721 + C7842 * C1716 +
            C8514 + C8514 + C49238 * C1722 + C7844 * C1717 + C8515 + C8515 +
            C49211 * C1723) *
               C48975 * C49222) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C48945 * C533 -
          (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
           C9332 * C9179) *
              C48945 * C534 +
          (C9333 * C9179 + C9334 * C9180 + C9335 * C9181 + C9591 * C9182 +
           (C9184 * C9581 + C9587 + C9587 + C48857 * C9583) * C48975 * C9183) *
              C48945 * C535) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C355 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C467 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C355 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C467 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C355 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C467 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C355 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C467 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C355) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C48928 * C469 +
          ((C113 * C360 + C381 + C381 + C101 * C372 + C115 * C359 + C382 +
            C382 + C102 * C371 + C117 * C358 + C383 + C383 + C103 * C370 +
            C119 * C357 + C384 + C384 + C104 * C369 + C121 * C362 + C385 +
            C385 + C105 * C374) *
               C48975 * C48963 * C49219 -
           (C121 * C128 + C150 + C150 + C105 * C142 + C119 * C127 + C151 +
            C151 + C104 * C141 + C117 * C126 + C152 + C152 + C103 * C140 +
            C115 * C125 + C153 + C153 + C102 * C139 + C113 * C124 + C154 +
            C154 + C101 * C138) *
               C48975 * C48963 * C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C48928 * C469 +
          (((C1026 * C360 + C1451 + C1451 + C1020 * C372 + C1028 * C359 +
             C1452 + C1452 + C1021 * C371 + C1030 * C358 + C1453 + C1453 +
             C49211 * C370) *
                C48975 * C49254 +
            (C1026 * C640 + C1454 + C1454 + C1020 * C650 + C1028 * C641 +
             C1455 + C1455 + C1021 * C651 + C1030 * C642 + C1456 + C1456 +
             C49211 * C652) *
                C48975 * C49242 +
            (C1026 * C1430 + C1457 + C1457 + C1020 * C1438 + C1028 * C1429 +
             C1458 + C1458 + C1021 * C1437 + C1030 * C1432 + C1459 + C1459 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C1283 + C1282 + C1281) * C48975 * C49222 +
            (C1280 + C1279 + C1278) * C48975 * C49242 +
            (C1030 * C126 + C1048 + C1048 + C49211 * C140 + C1028 * C125 +
             C1049 + C1049 + C1021 * C139 + C1026 * C124 + C1050 + C1050 +
             C1020 * C138) *
                C48975 * C49254) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C48928 * C469 +
          (((C7840 * C360 + C8241 + C8241 + C49251 * C372 + C7842 * C359 +
             C8242 + C8242 + C49238 * C371 + C7844 * C358 + C8243 + C8243 +
             C49211 * C370) *
                C48975 * C7837 +
            (C7840 * C640 + C8244 + C8244 + C49251 * C650 + C7842 * C641 +
             C8245 + C8245 + C49238 * C651 + C7844 * C642 + C8246 + C8246 +
             C49211 * C652) *
                C48975 * C7838 +
            (C7840 * C1430 + C8247 + C8247 + C49251 * C1438 + C7842 * C1429 +
             C8248 + C8248 + C49238 * C1437 + C7844 * C1432 + C8249 + C8249 +
             C49211 * C1440) *
                C48975 * C49222) *
               C49219 -
           ((C8085 + C8084 + C8083) * C48975 * C49222 +
            (C8082 + C8081 + C8080) * C48975 * C7838 +
            (C7844 * C126 + C7862 + C7862 + C49211 * C140 + C7842 * C125 +
             C7863 + C7863 + C49238 * C139 + C7840 * C124 + C7864 + C7864 +
             C49251 * C138) *
                C48975 * C7837) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C48928 * C469 +
          (((C9184 * C360 + C9433 + C9433 + C48857 * C372) * C48975 * C9179 +
            (C9184 * C640 + C9434 + C9434 + C48857 * C650) * C48975 * C9180 +
            (C9184 * C1430 + C9435 + C9435 + C48857 * C1438) * C48975 * C9181 +
            (C9184 * C1892 + C9436 + C9436 + C48857 * C1898) * C48975 * C9182 +
            (C9184 * C9422 + C9437 + C9437 + C48857 * C9426) * C48975 * C9183) *
               C49219 -
           (C9339 * C9183 + C9338 * C9182 + C9337 * C9181 + C9336 * C9180 +
            (C9184 * C124 + C9196 + C9196 + C48857 * C138) * C48975 * C9179) *
               C741) *
              C48928 * C49215)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 +
            C146 + C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 +
            C119 * C126 + C148 + C148 + C104 * C140 + C121 * C127 + C149 +
            C149 + C105 * C141) *
               C48975 * C48963 * C741 -
           (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 +
            C377 + C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 +
            C115 * C360 + C379 + C379 + C102 * C372 + C113 * C361 + C380 +
            C380 + C101 * C373) *
               C48975 * C48963 * C49219) *
              C241 +
          ((C113 * C639 + C655 + C655 + C101 * C649 + C115 * C640 + C656 +
            C656 + C102 * C650 + C117 * C641 + C657 + C657 + C103 * C651 +
            C119 * C642 + C658 + C658 + C104 * C652 + C121 * C643 + C659 +
            C659 + C105 * C653) *
               C48975 * C48963 * C49219 -
           (C121 * C245 + C264 + C264 + C105 * C257 + C119 * C246 + C265 +
            C265 + C104 * C258 + C117 * C247 + C266 + C266 + C103 * C259 +
            C115 * C248 + C267 + C267 + C102 * C260 + C113 * C249 + C268 +
            C268 + C101 * C261) *
               C48975 * C48963 * C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 +
             C1034 + C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
             C49211 * C139) *
                C48975 * C49254 +
            (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
               C741 -
           ((C1928 + C1929 + C1930) * C48975 * C49222 +
            (C1931 + C1932 + C1933) * C48975 * C49242 +
            (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
             C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
             C1020 * C373) *
                C48975 * C49254) *
               C49219) *
              C241 +
          (((C1933 + C1932 + C1931) * C48975 * C49254 +
            (C1930 + C1929 + C1928) * C48975 * C49242 +
            (C1026 * C1891 + C1913 + C1913 + C1020 * C1897 + C1028 * C1892 +
             C1914 + C1914 + C1021 * C1898 + C1030 * C1893 + C1915 + C1915 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C1743 + C1744 + C1745) * C48975 * C49222 +
            (C1277 + C1276 + C1275) * C48975 * C49242 +
            (C1274 + C1273 + C1272) * C48975 * C49254) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
             C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
             C49211 * C139) *
                C48975 * C7837 +
            (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
               C741 -
           ((C8700 + C8701 + C8702) * C48975 * C49222 +
            (C8703 + C8704 + C8705) * C48975 * C7838 +
            (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
             C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
             C49251 * C373) *
                C48975 * C7837) *
               C49219) *
              C241 +
          (((C8705 + C8704 + C8703) * C48975 * C7837 +
            (C8702 + C8701 + C8700) * C48975 * C7838 +
            (C7840 * C1891 + C8685 + C8685 + C49251 * C1897 + C7842 * C1892 +
             C8686 + C8686 + C49238 * C1898 + C7844 * C1893 + C8687 + C8687 +
             C49211 * C1899) *
                C48975 * C49222) *
               C49219 -
           ((C8524 + C8525 + C8526) * C48975 * C49222 +
            (C8079 + C8078 + C8077) * C48975 * C7838 +
            (C8076 + C8075 + C8074) * C48975 * C7837) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
            C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
               C741 -
           (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
            (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
               C49219) *
              C241 +
          ((C9701 * C9179 + C9700 * C9180 + C9699 * C9181 + C9698 * C9182 +
            (C9184 * C9673 + C9685 + C9685 + C48857 * C9675) * C48975 * C9183) *
               C49219 -
           (C9591 * C9183 + C9335 * C9182 + C9334 * C9181 + C9333 * C9180 +
            C9332 * C9179) *
               C741) *
              C49217) *
         C48894) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C123 + C145 + C145 + C101 * C137 + C115 * C124 + C146 + C146 +
           C102 * C138 + C117 * C125 + C147 + C147 + C103 * C139 + C119 * C126 +
           C148 + C148 + C104 * C140 + C121 * C127 + C149 + C149 +
           C105 * C141) *
              C48975 * C48963 * C887 -
          (C121 * C357 + C376 + C376 + C105 * C369 + C119 * C358 + C377 + C377 +
           C104 * C370 + C117 * C359 + C378 + C378 + C103 * C371 + C115 * C360 +
           C379 + C379 + C102 * C372 + C113 * C361 + C380 + C380 +
           C101 * C373) *
              C48975 * C48963 * C888 +
          (C113 * C890 + C906 + C906 + C101 * C900 + C115 * C891 + C907 + C907 +
           C102 * C901 + C117 * C892 + C908 + C908 + C103 * C902 + C119 * C893 +
           C909 + C909 + C104 * C903 + C121 * C894 + C910 + C910 +
           C105 * C904) *
              C48975 * C48963 * C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1026 * C123 + C1033 + C1033 + C1020 * C137 + C1028 * C124 + C1034 +
            C1034 + C1021 * C138 + C1030 * C125 + C1035 + C1035 +
            C49211 * C139) *
               C48975 * C49254 +
           (C1272 + C1273 + C1274) * C48975 * C49242 + C1739 * C49222) *
              C887 -
          ((C1928 + C1929 + C1930) * C48975 * C49222 +
           (C1931 + C1932 + C1933) * C48975 * C49242 +
           (C1030 * C359 + C1448 + C1448 + C49211 * C371 + C1028 * C360 +
            C1449 + C1449 + C1021 * C372 + C1026 * C361 + C1450 + C1450 +
            C1020 * C373) *
               C48975 * C49254) *
              C888 +
          ((C1026 * C890 + C2354 + C2354 + C1020 * C900 + C1028 * C891 + C2355 +
            C2355 + C1021 * C901 + C1030 * C892 + C2356 + C2356 +
            C49211 * C902) *
               C48975 * C49254 +
           (C1026 * C2335 + C2357 + C2357 + C1020 * C2347 + C1028 * C2336 +
            C2358 + C2358 + C1021 * C2348 + C1030 * C2337 + C2359 + C2359 +
            C49211 * C2349) *
               C48975 * C49242 +
           (C1026 * C2338 + C2360 + C2360 + C1020 * C2350 + C1028 * C2339 +
            C2361 + C2361 + C1021 * C2351 + C1030 * C2340 + C2362 + C2362 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7840 * C123 + C7847 + C7847 + C49251 * C137 + C7842 * C124 +
            C7848 + C7848 + C49238 * C138 + C7844 * C125 + C7849 + C7849 +
            C49211 * C139) *
               C48975 * C7837 +
           (C8074 + C8075 + C8076) * C48975 * C7838 + C8520 * C49222) *
              C887 -
          ((C8700 + C8701 + C8702) * C48975 * C49222 +
           (C8703 + C8704 + C8705) * C48975 * C7838 +
           (C7844 * C359 + C8238 + C8238 + C49211 * C371 + C7842 * C360 +
            C8239 + C8239 + C49238 * C372 + C7840 * C361 + C8240 + C8240 +
            C49251 * C373) *
               C48975 * C7837) *
              C888 +
          ((C7840 * C890 + C9108 + C9108 + C49251 * C900 + C7842 * C891 +
            C9109 + C9109 + C49238 * C901 + C7844 * C892 + C9110 + C9110 +
            C49211 * C902) *
               C48975 * C7837 +
           (C7840 * C2335 + C9111 + C9111 + C49251 * C2347 + C7842 * C2336 +
            C9112 + C9112 + C49238 * C2348 + C7844 * C2337 + C9113 + C9113 +
            C49211 * C2349) *
               C48975 * C7838 +
           (C7840 * C2338 + C9114 + C9114 + C49251 * C2350 + C7842 * C2339 +
            C9115 + C9115 + C49238 * C2351 + C7844 * C2340 + C9116 + C9116 +
            C49211 * C2352) *
               C48975 * C49222) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9184 * C123 + C9187 + C9187 + C48857 * C137) * C48975 * C9179 +
           C9332 * C9180 + C9333 * C9181 + C9334 * C9182 + C9335 * C9183) *
              C887 -
          (C9698 * C9183 + C9699 * C9182 + C9700 * C9181 + C9701 * C9180 +
           (C9184 * C361 + C9432 + C9432 + C48857 * C373) * C48975 * C9179) *
              C888 +
          ((C9184 * C890 + C9934 + C9934 + C48857 * C900) * C48975 * C9179 +
           (C9184 * C2335 + C9935 + C9935 + C48857 * C2347) * C48975 * C9180 +
           (C9184 * C2338 + C9936 + C9936 + C48857 * C2350) * C48975 * C9181 +
           (C9184 * C9927 + C9937 + C9937 + C48857 * C9931) * C48975 * C9182 +
           (C9184 * C9928 + C9938 + C9938 + C48857 * C9932) * C48975 * C9183) *
              C889) *
         C48928 * C48894) /
            (p * q * std::sqrt(p + q));
}
