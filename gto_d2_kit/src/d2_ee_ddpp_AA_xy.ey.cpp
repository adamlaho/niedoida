/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47868 = 0 * ae;
    const double C47867 = ae * be;
    const double C47866 = 0 * be;
    const double C47865 = 0 * be;
    const double C47864 = ae + be;
    const double C47863 = 0 * be;
    const double C47862 = xA - xB;
    const double C47923 = 0 * be;
    const double C47941 = 0 * be;
    const double C47940 = yA - yB;
    const double C47997 = 0 * ae;
    const double C47992 = 0 * be;
    const double C47991 = 0 * be;
    const double C48042 = 0 * be;
    const double C48108 = xP - xQ;
    const double C48107 = yP - yQ;
    const double C48106 = p + q;
    const double C48105 = p * q;
    const double C48115 = std::pow(ae, 2);
    const double C48113 = bs[3];
    const double C48123 = bs[4];
    const double C48132 = bs[5];
    const double C48146 = bs[6];
    const double C48168 = bs[7];
    const double C48322 = zP - zQ;
    const double C48418 = bs[2];
    const double C119 = bs[0];
    const double C48810 = ce + de;
    const double C48809 = ce * de;
    const double C48808 = xC - xD;
    const double C48823 = yC - yD;
    const double C48832 = zC - zD;
    const double C48890 = zA - zB;
    const double C47875 = C47868 / C47864;
    const double C47872 = C47866 / C47864;
    const double C47870 = 2 * C47864;
    const double C47869 = std::pow(C47864, 2);
    const double C47874 = C47867 * C47862;
    const double C47873 = C47862 * C47866;
    const double C47871 = C47862 * C47865;
    const double C48776 = C47862 * be;
    const double C48775 = C47862 * ae;
    const double C48774 = std::pow(C47862, 2);
    const double C47924 = C47923 / C47864;
    const double C47993 = C47941 / C47864;
    const double C47942 = C47867 * C47940;
    const double C47994 = C47940 * C47941;
    const double C48873 = std::pow(C47940, 2);
    const double C48932 = C47940 * be;
    const double C48930 = C47940 * ae;
    const double C48004 = C47997 / C47864;
    const double C47999 = C47940 * C47992;
    const double C48043 = C48042 / C47864;
    const double C48133 = std::pow(C48108, 2);
    const double C48191 = C48108 * ae;
    const double C48116 = C48107 * ae;
    const double C48114 = C48108 * C48107;
    const double C48293 = std::pow(C48107, 2);
    const double C48109 = 2 * C48105;
    const double C48330 = std::pow(C48322, 2);
    const double C48820 = 2 * C48810;
    const double C49129 = std::pow(C48810, 2);
    const double C48811 = std::pow(C48808, 2);
    const double C49128 = C48808 * de;
    const double C49127 = C48808 * ce;
    const double C48845 = std::pow(C48823, 2);
    const double C49133 = C48823 * de;
    const double C49131 = C48823 * ce;
    const double C48862 = std::pow(C48832, 2);
    const double C49134 = C48832 * de;
    const double C49132 = C48832 * ce;
    const double C48891 = std::pow(C48890, 2);
    const double C48974 = C48890 * be;
    const double C48972 = C48890 * ae;
    const double C48788 = std::pow(C47870, -1);
    const double C49122 = std::pow(C47870, -2);
    const double C47876 = 2 * C47869;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C47869;
    const double C49126 = C47869 * C47870;
    const double C49125 = 4 * C47869;
    const double C47878 = C47873 / C47864;
    const double C47877 = C47871 / C47864;
    const double C49115 = std::pow(C48775, 2);
    const double C48777 = C48774 * C47867;
    const double C48002 = C47994 / C47864;
    const double C48874 = C48873 * C47867;
    const double C49135 = std::pow(C48930, 2);
    const double C48005 = C47999 / C47864;
    const double C48194 = C48132 * C48191;
    const double C48203 = C48123 * C48191;
    const double C48210 = C48146 * C48191;
    const double C48233 = C48113 * C48191;
    const double C48253 = C48168 * C48191;
    const double C48119 = C48113 * C48116;
    const double C48125 = C48123 * C48116;
    const double C48135 = C48132 * C48116;
    const double C48150 = C48146 * C48116;
    const double C48174 = C48168 * C48116;
    const double C48118 = C48114 * C48115;
    const double C48110 = C48109 / C48106;
    const double C126 = (-(bs[1] * C48116 * C48109) / C48106) / C47864;
    const double C127 = (-(bs[1] * C48191 * C48109) / C48106) / C47864;
    const double C120 = -(C48108 * bs[1] * C48109) / C48106;
    const double C267 = -(C48107 * bs[1] * C48109) / C48106;
    const double C399 = -(C48322 * bs[1] * C48109) / C48106;
    const double C49130 = std::pow(C48820, -1);
    const double C49164 = 2 * C49129;
    const double C48812 = C48811 * C48809;
    const double C48846 = C48845 * C48809;
    const double C48863 = C48862 * C48809;
    const double C48892 = C48891 * C47867;
    const double C49137 = std::pow(C48972, 2);
    const double C47885 = C47866 / C47876;
    const double C47882 = C47865 / C47876;
    const double C47881 = C47863 / C47876;
    const double C47996 = C47941 / C47876;
    const double C48001 = C47992 / C47876;
    const double C48000 = C47991 / C47876;
    const double C49162 = 4 * C49126;
    const double C49161 = C47864 * C49125;
    const double C47883 = 0 - C47878;
    const double C47880 = 0 - C47877;
    const double C48778 = C48777 / C47864;
    const double C48006 = 0 - C48002;
    const double C48875 = C48874 / C47864;
    const double C48009 = 0 - C48005;
    const double C48124 = C48123 * C48118;
    const double C48134 = C48132 * C48118;
    const double C48148 = C48146 * C48118;
    const double C48172 = C48168 * C48118;
    const double C48112 = -C48110;
    const double C48122 = std::pow(C48110, 4);
    const double C48145 = std::pow(C48110, 6);
    const double C141 = (ae * std::pow(C48110, 2) * bs[2] * C48107 * ae +
                         C48108 * std::pow(-C48110, 3) * bs[3] * C48108 *
                             C48107 * std::pow(ae, 2)) /
                        C47869;
    const double C48417 = std::pow(C48110, 2);
    const double C128 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48116) / C47864;
    const double C129 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48191) / C47864 -
        (ae * bs[1] * C48109) / (C48106 * C47864);
    const double C48813 = C48812 / C48810;
    const double C48847 = C48846 / C48810;
    const double C48864 = C48863 / C48810;
    const double C48893 = C48892 / C47864;
    const double C47888 = C47883 * ae;
    const double C47887 = C47880 * ae;
    const double C48779 = -C48778;
    const double C48010 = C48006 * ae;
    const double C48876 = -C48875;
    const double C48013 = C48009 * ae;
    const double C48117 = std::pow(C48112, 3);
    const double C48131 = std::pow(C48112, 5);
    const double C48167 = std::pow(C48112, 7);
    const double C48127 = C48122 * C48125;
    const double C48126 = C48122 * C48124;
    const double C48192 = C48123 * C48122;
    const double C48205 = C48122 * C48203;
    const double C48153 = C48145 * C48150;
    const double C48152 = C48145 * C48148;
    const double C48213 = C48146 * C48145;
    const double C48214 = C48145 * C48210;
    const double C48419 = C48418 * C48417;
    const double C277 = (C48107 * C48417 * C48418 * C48191) / C47864;
    const double C278 = (C48107 * C48417 * C48418 * C48116) / C47864 -
                        (ae * bs[1] * C48109) / (C48106 * C47864);
    const double C409 = (C48322 * C48417 * C48418 * C48191) / C47864;
    const double C410 = (C48322 * C48417 * C48418 * C48116) / C47864;
    const double C48814 = -C48813;
    const double C48848 = -C48847;
    const double C48865 = -C48864;
    const double C48894 = -C48893;
    const double C47892 = C47888 / C47864;
    const double C47891 = C47887 / C47864;
    const double C48780 = std::exp(C48779);
    const double C48014 = C48010 / C47864;
    const double C48877 = std::exp(C48876);
    const double C48017 = C48013 / C47864;
    const double C48120 = C48117 * C48119;
    const double C48204 = C48113 * C48117;
    const double C48234 = C48117 * C48233;
    const double C285 = (ae * std::pow(C48110, 2) * bs[2] * C48191 +
                         C48107 * C48117 * C48113 * C48118) /
                        C47869;
    const double C417 = ((zP - zQ) * C48117 * C48113 * C48118) / C47869;
    const double C48137 = C48131 * C48135;
    const double C48136 = C48131 * C48134;
    const double C48193 = C48132 * C48131;
    const double C48198 = C48131 * C48194;
    const double C48177 = C48167 * C48174;
    const double C48176 = C48167 * C48172;
    const double C48258 = C48167 * C48253;
    const double C48130 = ae * C48127;
    const double C48129 = C48108 * C48127;
    const double C48508 = C48107 * C48127;
    const double C963 =
        (C48117 * C48113 * C48118 + C48126 * std::pow(zP - zQ, 2)) / C47869;
    const double C48196 = C48108 * C48192;
    const double C48195 = C48192 * ae;
    const double C48425 = C48192 * C48133;
    const double C48510 = C48192 * C48293;
    const double C48571 = C48107 * C48192;
    const double C48755 = C48192 * C48330;
    const double C48764 = C48322 * C48192;
    const double C48236 = C48108 * C48205;
    const double C48291 = ae * C48205;
    const double C48290 = C48107 * C48205;
    const double C48155 = C48153 * C48133;
    const double C48166 = ae * C48153;
    const double C48165 = C48108 * C48153;
    const double C48602 = C48107 * C48153;
    const double C48662 = C48153 * C48330;
    const double C48154 = C48108 * C48152;
    const double C48336 = C48107 * C48152;
    const double C48396 = C48152 * C48330;
    const double C48405 = C48322 * C48152;
    const double C48216 = C48213 * C48133;
    const double C48255 = C48108 * C48213;
    const double C48254 = C48213 * ae;
    const double C48605 = C48213 * C48293;
    const double C48218 = C48108 * C48214;
    const double C48337 = C48214 * C48293;
    const double C48367 = ae * C48214;
    const double C48366 = C48107 * C48214;
    const double C48669 = C48214 * C48330;
    const double C121 = C48419 * C48133 - (bs[1] * C48109) / C48106;
    const double C266 = C48107 * C48108 * C48419;
    const double C398 = C48322 * C48108 * C48419;
    const double C595 = C48419 * C48293 - (bs[1] * C48109) / C48106;
    const double C697 = C48322 * C48107 * C48419;
    const double C948 = C48419 * C48330 - (bs[1] * C48109) / C48106;
    const double C48815 = std::exp(C48814);
    const double C48849 = std::exp(C48848);
    const double C48866 = std::exp(C48865);
    const double C48895 = std::exp(C48894);
    const double C47896 = C47892 - C47882;
    const double C47895 = C47891 - C47881;
    const double C47879 = C47874 * C48780;
    const double C48782 = C48780 * C48775;
    const double C48781 = C48780 / C47870;
    const double C48790 = C48788 * C48780;
    const double C49118 = C48780 * C48776;
    const double C49159 = C49122 * C48780;
    const double C49153 = C48780 * C49115;
    const double C48018 = C48014 - C48001;
    const double C151 = C48877 * C141;
    const double C149 = C48877 * C128;
    const double C2865 = C48877 * C410;
    const double C47943 = C47942 * C48877;
    const double C113 = -(2 * ae * be * (yA - yB) * C48877) / (ae + be);
    const double C48931 = C48877 / C47870;
    const double C48933 = C48877 * C48930;
    const double C48940 = C48788 * C48877;
    const double C49141 = C48877 * C48932;
    const double C49172 = C49122 * C48877;
    const double C49170 = C48877 * C49135;
    const double C48021 = C48017 - C48000;
    const double C142 = (C48117 * C48113 * C48118 + ae * C48108 * C48120 +
                         C48108 * (ae * C48120 + C48108 * std::pow(C48110, 4) *
                                                     bs[4] * C48118)) /
                        C47869;
    const double C143 =
        (2 * (ae * C48120 + C48108 * C48126) +
         ae * (C48120 + C48127 * std::pow(C48108, 2)) +
         C48108 * (C48126 + ae * C48108 * C48127 +
                   C48108 * (ae * C48127 +
                             C48108 * std::pow(C48112, 5) * bs[5] * C48118))) /
        C47869;
    const double C284 = (ae * (C48108 * C48117 * C48113 * C48191 +
                               bs[2] * std::pow(C48110, 2) * ae) +
                         C48107 * (ae * C48120 + C48108 * C48126)) /
                        C47869;
    const double C416 = ((zP - zQ) * (ae * C48120 + C48108 * C48126)) / C47869;
    const double C130 =
        (std::pow(C48110, 2) * bs[2] * C48116 + C48120 * C48133) / C47864;
    const double C132 =
        (2 * C48108 * C48120 + C48108 * (C48120 + C48127 * C48133)) / C47864;
    const double C276 =
        (C48107 * C48108 * C48120 + C48108 * C48419 * ae) / C47864;
    const double C406 = (C48322 * (C48120 + C48127 * C48133)) / C47864;
    const double C408 = (C48322 * C48108 * C48120) / C47864;
    const double C600 =
        (C48417 * C48418 * C48116 + C48107 * (C48107 * C48120 + C48419 * ae) +
         C48107 * C48419 * ae) /
        C47864;
    const double C702 = (C48322 * (C48107 * C48120 + C48419 * ae)) / C47864;
    const double C953 = (C48417 * C48418 * C48116 + C48120 * C48330) / C47864;
    const double C2856 =
        (2 * C48322 * C48120 + C48322 * (C48120 + C48127 * C48330)) / C47864;
    const double C48237 = C48204 * ae;
    const double C48424 = C48108 * C48204;
    const double C48509 = C48107 * C48204;
    const double C274 = (C48107 * (C48120 + C48127 * C48133) +
                         (C48419 + C48204 * C48133) * ae) /
                        C47864;
    const double C122 =
        2 * C48108 * C48419 + C48108 * (C48419 + C48204 * C48133);
    const double C265 = C48107 * (C48419 + C48204 * C48133);
    const double C397 = C48322 * (C48419 + C48204 * C48133);
    const double C1296 =
        2 * C48107 * C48419 + C48107 * (C48419 + C48204 * C48293);
    const double C1494 = C48322 * (C48419 + C48204 * C48293);
    const double C2849 =
        2 * C48322 * C48419 + C48322 * (C48419 + C48204 * C48330);
    const double C3751 =
        3 * (C48419 + C48204 * C48330) +
        C48322 * (2 * C48322 * C48204 + C48322 * (C48204 + C48192 * C48330));
    const double C610 = (C48117 * C48113 * C48118 + ae * C48107 * C48234 +
                         C48107 * (ae * C48234 + C48107 * C48126)) /
                        C47869;
    const double C712 = ((zP - zQ) * (ae * C48234 + C48107 * C48126)) / C47869;
    const double C131 =
        (C48417 * C48418 * C48191 + C48108 * (C48108 * C48234 + C48419 * ae) +
         C48108 * C48419 * ae) /
        C47864;
    const double C275 = (C48107 * (C48108 * C48234 + C48419 * ae)) / C47864;
    const double C407 = (C48322 * (C48108 * C48234 + C48419 * ae)) / C47864;
    const double C601 = (C48417 * C48418 * C48191 + C48234 * C48293) / C47864;
    const double C703 = (C48322 * C48107 * C48234) / C47864;
    const double C954 = (C48417 * C48418 * C48191 + C48234 * C48330) / C47864;
    const double C1302 =
        (2 * C48107 * C48234 + C48107 * (C48234 + C48205 * C48293)) / C47864;
    const double C1500 = (C48322 * (C48234 + C48205 * C48293)) / C47864;
    const double C2855 =
        (2 * C48322 * C48234 + C48322 * (C48234 + C48205 * C48330)) / C47864;
    const double C2867 = C48877 * C417;
    const double C48139 = C48137 * C48133;
    const double C48144 = ae * C48137;
    const double C48143 = C48108 * C48137;
    const double C48570 = C48107 * C48137;
    const double C48646 = C48137 * C48330;
    const double C48661 = C48322 * C48137;
    const double C3754 =
        (3 * (C48120 + C48127 * C48330) +
         C48322 * (2 * C48322 * C48127 + C48322 * (C48127 + C48137 * C48330))) /
        C47864;
    const double C48138 = C48108 * C48136;
    const double C48292 = C48107 * C48136;
    const double C1308 = (2 * (ae * C48234 + C48107 * C48126) +
                          ae * (C48234 + C48205 * std::pow(C48107, 2)) +
                          C48107 * (C48126 + ae * C48107 * C48205 +
                                    C48107 * (ae * C48205 + C48107 * C48136))) /
                         C47869;
    const double C1506 =
        ((zP - zQ) * (C48126 + ae * C48107 * C48205 +
                      C48107 * (ae * C48205 + C48107 * C48136))) /
        C47869;
    const double C2861 = (2 * C48322 * C48126 +
                          C48322 * (C48126 + C48136 * std::pow(C48322, 2))) /
                         C47869;
    const double C3760 =
        (3 * (C48126 + C48136 * C48330) +
         C48322 * (2 * C48322 * C48136 + C48322 * (C48136 + C48152 * C48330))) /
        C47869;
    const double C48197 = C48193 * C48133;
    const double C48212 = C48108 * C48193;
    const double C48211 = C48193 * ae;
    const double C48572 = C48193 * C48293;
    const double C48603 = C48107 * C48193;
    const double C48765 = C48193 * C48330;
    const double C48200 = C48108 * C48198;
    const double C48295 = C48198 * C48293;
    const double C48335 = ae * C48198;
    const double C48334 = C48107 * C48198;
    const double C48643 = C48198 * C48330;
    const double C48668 = C48322 * C48198;
    const double C3755 =
        (3 * (C48234 + C48205 * C48330) +
         C48322 * (2 * C48322 * C48205 + C48322 * (C48205 + C48198 * C48330))) /
        C47864;
    const double C48179 = C48177 * C48133;
    const double C48178 = C48108 * C48176;
    const double C48368 = C48107 * C48176;
    const double C48406 = C48176 * C48330;
    const double C48260 = C48108 * C48258;
    const double C48370 = C48258 * C48293;
    const double C955 = (C48108 * C48120 + C48129 * C48330) / C47864;
    const double C2875 = C48877 * C963;
    const double C48241 = C48196 * ae;
    const double C48428 = 2 * C48196;
    const double C48516 = C48107 * C48196;
    const double C48426 = C48204 + C48425;
    const double C48512 = C48204 + C48510;
    const double C48576 = 2 * C48571;
    const double C48574 = C48571 * ae;
    const double C48756 = C48204 + C48755;
    const double C48766 = 2 * C48764;
    const double C2380 = (C48107 * C48234 + C48290 * C48330) / C47864;
    const double C48157 = C48137 + C48155;
    const double C48173 = 2 * C48165;
    const double C48171 = ae * C48165;
    const double C48583 = C48107 * C48165;
    const double C48649 = C48165 * C48330;
    const double C48664 = C48137 + C48662;
    const double C48397 = C48136 + C48396;
    const double C48407 = 2 * C48405;
    const double C48219 = C48193 + C48216;
    const double C48259 = C48255 * ae;
    const double C48585 = C48255 * C48293;
    const double C48609 = C48193 + C48605;
    const double C48341 = C48198 + C48337;
    const double C48374 = 2 * C48366;
    const double C48372 = ae * C48366;
    const double C48658 = C48366 * C48330;
    const double C48671 = C48198 + C48669;
    const double C49165 = C49130 * C48815;
    const double C49163 = C48815 * C49127;
    const double C261 = -(C48815 * C49128) / C48810;
    const double C49167 = C49130 * C48849;
    const double C49166 = C48849 * C49131;
    const double C525 = -(C48849 * C49133) / C48810;
    const double C49169 = C49130 * C48866;
    const double C49168 = C48866 * C49132;
    const double C799 = -(C48866 * C49134) / C48810;
    const double C48973 = C48895 / C47870;
    const double C48975 = C48895 * C48972;
    const double C48982 = C48788 * C48895;
    const double C49147 = C48895 * C48974;
    const double C49175 = C49122 * C48895;
    const double C49173 = C48895 * C49137;
    const double C47901 = C47896 / C47870;
    const double C47900 = C47862 * C47896;
    const double C47899 = C47895 + C47872;
    const double C47886 = C47879 / C47869;
    const double C47884 = 2 * C47879;
    const double C48783 = C48782 * C48776;
    const double C48789 = C48782 / C47876;
    const double C49119 = C48788 * C48782;
    const double C49117 = C48782 / C47864;
    const double C1081 = (C48780 * std::pow(C48776, 2)) / C47869 + C48781;
    const double C48791 = C48790 * C48776;
    const double C49123 = C48775 * C48790;
    const double C49121 = 2 * C48790;
    const double C49176 = C48790 / C49125;
    const double C106 = C48790 / C49162;
    const double C26653 = C48790 / C47870;
    const double C49155 = C49118 / C47864;
    const double C1082 = (-2 * C48788 * C49118) / C47864;
    const double C49189 = C49153 / C47869;
    const double C48023 = C48018 / C47870;
    const double C48022 = C47940 * C48018;
    const double C47970 = 2 * C47943;
    const double C47998 = C47943 / C47869;
    const double C1086 =
        ((0 * ae) / C47864 - C47943 / C47869) / C47870 + (0 * ae) / C47864;
    const double C3884 =
        ((C48877 - (C47940 * 2 * C47943) / C47864) * ae) / C47864 -
        C47941 / C47876;
    const double C3885 = (0 * ae) / C47864 - C47943 / C47869;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C302 = C113 * C266;
    const double C434 = C113 * C398;
    const double C2872 = C113 * C948;
    const double C2866 = C113 * C409;
    const double C2864 = C113 * C399;
    const double C3326 = C113 * C697;
    const double C7908 = (C48877 * std::pow(C48932, 2)) / C47869 + C48931;
    const double C48934 = C48933 * C48932;
    const double C48939 = C48933 / C47876;
    const double C49139 = C48933 / C47864;
    const double C49136 = C48788 * C48933;
    const double C1085 =
        (((C48877 - (C47940 * 2 * C47943) / C47864) * ae) / C47864 -
         C47941 / C47876) /
            C47870 +
        ((C47940 * ((0 * ae) / C47864 - C47943 / C47869) + C48940) * ae) /
            C47864;
    const double C48941 = C48940 * C48932;
    const double C49145 = C48930 * C48940;
    const double C49144 = 2 * C48940;
    const double C49182 = C48940 / C49125;
    const double C9212 = C48940 / C49162;
    const double C26650 = C48940 / C47870;
    const double C49178 = C49141 / C47864;
    const double C7909 = (-2 * C48788 * C49141) / C47864;
    const double C49194 = C49170 / C47869;
    const double C48027 = C48021 + C47993;
    const double C155 = C48877 * C142;
    const double C159 = C48877 * C143;
    const double C301 = C48877 * C284;
    const double C3898 = C48940 * C284;
    const double C22525 = C48940 * C284;
    const double C433 = C48877 * C416;
    const double C153 = C48877 * C130;
    const double C157 = C48877 * C132;
    const double C303 = C48877 * C276;
    const double C3894 = C48940 * C276;
    const double C22521 = C48940 * C276;
    const double C431 = C48877 * C406;
    const double C435 = C48877 * C408;
    const double C3327 = C48877 * C702;
    const double C6668 = C48940 * C702;
    const double C25385 = C48940 * C702;
    const double C2873 = C48877 * C953;
    const double C3772 = C48877 * C2856;
    const double C48238 = C48236 + C48237;
    const double C48511 = C48508 + C48237;
    const double C1303 =
        (2 * (C48107 * C48120 + C48419 * ae) +
         C48107 * (C48120 + C48107 * (C48107 * C48127 + C48237) +
                   C48107 * C48204 * ae) +
         (C48419 + C48204 * C48293) * ae) /
        C47864;
    const double C1501 =
        (C48322 * (C48120 + C48107 * (C48107 * C48127 + C48237) +
                   C48107 * C48204 * ae)) /
        C47864;
    const double C602 =
        (C48108 * C48120 + C48107 * (C48107 * C48129 + C48424 * ae) +
         C48107 * C48424 * ae) /
        C47864;
    const double C704 = (C48322 * (C48107 * C48129 + C48424 * ae)) / C47864;
    const double C596 = C48108 * C48419 + C48424 * C48293;
    const double C698 = C48322 * C48107 * C48424;
    const double C949 = C48108 * C48419 + C48424 * C48330;
    const double C1295 =
        2 * C48107 * C48424 + C48107 * (C48424 + C48196 * C48293);
    const double C1493 = C48322 * (C48424 + C48196 * C48293);
    const double C2848 =
        2 * C48322 * C48424 + C48322 * (C48424 + C48196 * C48330);
    const double C2372 = C48107 * C48419 + C48509 * C48330;
    const double C3313 =
        2 * C48322 * C48509 + C48322 * (C48509 + C48571 * C48330);
    const double C299 = C48877 * C274;
    const double C3902 = C48940 * C274;
    const double C22529 = C48940 * C274;
    const double C156 = C113 * C122;
    const double C298 = C113 * C265;
    const double C430 = C113 * C397;
    const double C3771 = C113 * C2849;
    const double C17996 = C113 * C3751;
    const double C3329 = C48877 * C712;
    const double C6672 = C48940 * C712;
    const double C25389 = C48940 * C712;
    const double C154 = C113 * C131;
    const double C300 = C113 * C275;
    const double C432 = C113 * C407;
    const double C3328 = C113 * C703;
    const double C2874 = C113 * C954;
    const double C3769 = C113 * C2855;
    const double C48141 = C48127 + C48139;
    const double C48156 = C48144 + C48154;
    const double C48149 = 2 * C48143;
    const double C48147 = ae * C48143;
    const double C48515 = C48107 * C48143;
    const double C2854 =
        (2 * C48322 * C48129 + C48322 * (C48129 + C48143 * C48330)) / C47864;
    const double C3756 =
        (3 * (C48129 + C48143 * C48330) +
         C48322 * (2 * C48322 * C48143 + C48322 * (C48143 + C48165 * C48330))) /
        C47864;
    const double C48573 = C48570 + C48195;
    const double C48647 = C48127 + C48646;
    const double C48663 = 2 * C48661;
    const double C17997 = C48877 * C3754;
    const double C48140 = C48130 + C48138;
    const double C48294 = C48291 + C48292;
    const double C7248 = C48940 * C1506;
    const double C10294 = C49172 * C1506;
    const double C16839 = C49172 * C1506;
    const double C25967 = C48940 * C1506;
    const double C3770 = C48877 * C2861;
    const double C17999 = C48877 * C3760;
    const double C48199 = C48192 + C48197;
    const double C48217 = 2 * C48212;
    const double C48215 = C48212 * ae;
    const double C48517 = C48212 * C48293;
    const double C48584 = C48107 * C48212;
    const double C48758 = C48212 * C48330;
    const double C3752 =
        3 * (C48424 + C48196 * C48330) +
        C48322 * (2 * C48322 * C48196 + C48322 * (C48196 + C48212 * C48330));
    const double C48220 = C48218 + C48211;
    const double C48607 = C48602 + C48211;
    const double C48575 = C48192 + C48572;
    const double C48610 = 2 * C48603;
    const double C48608 = C48603 * ae;
    const double C48761 = C48603 * C48330;
    const double C11180 =
        3 * (C48509 + C48571 * C48330) +
        C48322 * (2 * C48322 * C48571 + C48322 * (C48571 + C48603 * C48330));
    const double C48767 = C48192 + C48765;
    const double C48201 = C48200 + C48195;
    const double C48296 = C48205 + C48295;
    const double C48339 = C48335 + C48336;
    const double C48340 = 2 * C48334;
    const double C48338 = ae * C48334;
    const double C3317 =
        (2 * C48322 * C48290 + C48322 * (C48290 + C48334 * C48330)) / C47864;
    const double C11184 =
        (3 * (C48290 + C48334 * C48330) +
         C48322 * (2 * C48322 * C48334 + C48322 * (C48334 + C48366 * C48330))) /
        C47864;
    const double C48644 = C48205 + C48643;
    const double C48670 = 2 * C48668;
    const double C17998 = C113 * C3755;
    const double C48181 = C48153 + C48179;
    const double C48180 = C48166 + C48178;
    const double C48373 = C48367 + C48368;
    const double C48408 = C48152 + C48406;
    const double C48261 = C48260 + C48254;
    const double C48375 = C48214 + C48370;
    const double C2511 = C48877 * C955;
    const double C1301 =
        (2 * (C48107 * C48129 + C48424 * ae) +
         C48107 * (C48129 + C48107 * (C48107 * C48143 + C48241) +
                   C48107 * C48196 * ae) +
         (C48424 + C48196 * C48293) * ae) /
        C47864;
    const double C1499 =
        (C48322 * (C48129 + C48107 * (C48107 * C48143 + C48241) +
                   C48107 * C48196 * ae)) /
        C47864;
    const double C2374 = C48107 * C48424 + C48516 * C48330;
    const double C123 = 3 * (C48419 + C48204 * C48133) +
                        C48108 * (2 * C48424 + C48108 * C48426);
    const double C264 = C48107 * (2 * C48424 + C48108 * C48426);
    const double C396 = C48322 * (2 * C48424 + C48108 * C48426);
    const double C597 = C48419 + C48204 * C48133 + C48426 * C48293;
    const double C699 = C48322 * C48107 * C48426;
    const double C950 = C48419 + C48204 * C48133 + C48426 * C48330;
    const double C1800 = 3 * (C48419 + C48204 * C48293) +
                         C48107 * (2 * C48509 + C48107 * C48512);
    const double C1958 = C48322 * (2 * C48509 + C48107 * C48512);
    const double C2373 = C48419 + C48204 * C48293 + C48512 * C48330;
    const double C17981 =
        4 * (2 * C48322 * C48204 + C48322 * C48756) +
        C48322 * (3 * C48756 + C48322 * (2 * C48322 * C48192 +
                                         C48322 * (C48192 + C48193 * C48330)));
    const double C3336 = C113 * C2380;
    const double C48159 = C48108 * C48157;
    const double C48169 = 3 * C48157;
    const double C48164 = ae * C48157;
    const double C48522 = C48107 * C48157;
    const double C48175 = C48152 + C48171;
    const double C48650 = C48143 + C48649;
    const double C48665 = C48322 * C48664;
    const double C17987 =
        (4 * (2 * C48322 * C48136 + C48322 * C48397) +
         C48322 *
             (3 * C48397 + C48322 * (2 * C48322 * C48152 +
                                     C48322 * (C48152 + C48176 * C48330)))) /
        C47869;
    const double C48221 = C48108 * C48219;
    const double C48256 = C48219 * ae;
    const double C48524 = C48219 * C48293;
    const double C48588 = C48212 + C48585;
    const double C48612 = C48107 * C48609;
    const double C48344 = C48107 * C48341;
    const double C48369 = 3 * C48341;
    const double C48365 = ae * C48341;
    const double C48376 = C48152 + C48372;
    const double C48659 = C48334 + C48658;
    const double C48672 = C48322 * C48671;
    const double C112 = C49165 / C48820;
    const double C110 = C48815 / C48820 - (C49163 * C49128) / C49129;
    const double C111 = C49163 / C49164 - (C49165 * C49128) / C48810;
    const double C527 = C49163 / C48810;
    const double C593 = C49167 / C48820;
    const double C259 = C49166 / C48810;
    const double C591 = C48849 / C48820 - (C49166 * C49133) / C49129;
    const double C592 = C49166 / C49164 - (C49167 * C49133) / C48810;
    const double C947 = C49169 / C48820;
    const double C393 = C49168 / C48810;
    const double C945 = C48866 / C48820 - (C49168 * C49134) / C49129;
    const double C946 = C49168 / C49164 - (C49169 * C49134) / C48810;
    const double C15279 = (C48895 * std::pow(C48974, 2)) / C47869 + C48973;
    const double C48976 = C48975 * C48974;
    const double C48981 = C48975 / C47876;
    const double C49140 = C48975 / C47864;
    const double C49138 = C48788 * C48975;
    const double C48983 = C48982 * C48974;
    const double C49151 = C48972 * C48982;
    const double C49150 = 2 * C48982;
    const double C49188 = C48982 / C49125;
    const double C17812 = C48982 / C49162;
    const double C36778 = C48982 / C47870;
    const double C49184 = C49147 / C47864;
    const double C15280 = (-2 * C48788 * C49147) / C47864;
    const double C49196 = C49173 / C47869;
    const double C47905 = C47900 + 0;
    const double C47904 = C47899 / C47870;
    const double C47890 = C47875 - C47886;
    const double C47889 = C47862 * C47884;
    const double C1089 =
        ((-C47884 / C47864) / C47870 - (0 * be) / C47864) / C47870 -
        (0 * be) / C47864;
    const double C9219 = -C47884 / C47864;
    const double C23726 = (-C47884 / C47864) / C47870 - (0 * be) / C47864;
    const double C48784 = C48783 / C47869;
    const double C49156 = 2 * C49119;
    const double C48792 = C48791 / C47864;
    const double C49160 = C49123 / C47876;
    const double C49190 = C49117 - C49155;
    const double C23719 = -C49155;
    const double C49204 = C49189 + C48781;
    const double C48028 = C48022 + 0;
    const double C47995 = C47940 * C47970;
    const double C7915 =
        ((-C47941 / C47864) / C47870 -
         ((C48877 - (C47940 * C47970) / C47864) * be) / C47864) /
            C47870 -
        ((C47940 * ((-C47970 / C47864) / C47870 - (0 * be) / C47864) + C48940) *
         be) /
            C47864;
    const double C7916 =
        ((-C47970 / C47864) / C47870 - (0 * be) / C47864) / C47870 -
        (0 * be) / C47864;
    const double C22512 = (-C47970 / C47864) / C47870 - (0 * be) / C47864;
    const double C48008 = C48004 - C47998;
    const double C16838 = C1086 * C1500;
    const double C16832 = C1086 * C1494;
    const double C3907 = C3884 * C122;
    const double C3903 = C3884 * C131;
    const double C3899 = C3884 * C121;
    const double C3895 = C3884 * C129;
    const double C3891 = C3884 * C120;
    const double C4095 = C3884 * C266;
    const double C4091 = C3884 * C275;
    const double C4087 = C3884 * C265;
    const double C4261 = C3884 * C398;
    const double C4257 = C3884 * C407;
    const double C4253 = C3884 * C397;
    const double C6669 = C3884 * C409;
    const double C6665 = C3884 * C399;
    const double C7245 = C3884 * C703;
    const double C7241 = C3884 * C697;
    const double C7793 = C3884 * C948;
    const double C7789 = C3884 * C954;
    const double C19609 = C3884 * C2380;
    const double C20161 = C3884 * C2849;
    const double C20157 = C3884 * C2855;
    const double C22398 = C3884 * C3751;
    const double C22394 = C3884 * C3755;
    const double C3901 = C3885 * C265;
    const double C3897 = C3885 * C275;
    const double C3893 = C3885 * C266;
    const double C6671 = C3885 * C703;
    const double C6667 = C3885 * C697;
    const double C7247 = C3885 * C1500;
    const double C7243 = C3885 * C1494;
    const double C7787 = C3885 * C2380;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C2901 = C2866 + C2867;
    const double C2900 = C2864 + C2865;
    const double C7956 = C7908 * C132;
    const double C7950 = C7908 * C143;
    const double C7940 = C7908 * C142;
    const double C7934 = C7908 * C130;
    const double C7928 = C7908 * C141;
    const double C7922 = C7908 * C128;
    const double C8148 = C7908 * C276;
    const double C8142 = C7908 * C284;
    const double C8136 = C7908 * C274;
    const double C8330 = C7908 * C408;
    const double C8324 = C7908 * C416;
    const double C8318 = C7908 * C406;
    const double C10308 = C7908 * C955;
    const double C10302 = C7908 * C963;
    const double C10296 = C7908 * C953;
    const double C10290 = C7908 * C417;
    const double C10284 = C7908 * C410;
    const double C10750 = C7908 * C712;
    const double C10744 = C7908 * C702;
    const double C11202 = C7908 * C2856;
    const double C11196 = C7908 * C2861;
    const double C48935 = C48934 / C47869;
    const double C3912 = C49139 * C143;
    const double C3908 = C49139 * C132;
    const double C3904 = C49139 * C142;
    const double C3900 = C49139 * C130;
    const double C3896 = C49139 * C141;
    const double C3892 = C49139 * C128;
    const double C4096 = C49139 * C276;
    const double C4092 = C49139 * C284;
    const double C4088 = C49139 * C274;
    const double C4262 = C49139 * C408;
    const double C4258 = C49139 * C416;
    const double C4254 = C49139 * C406;
    const double C6690 = C49139 * C955;
    const double C6670 = C49139 * C417;
    const double C6666 = C49139 * C410;
    const double C7246 = C49139 * C712;
    const double C7242 = C49139 * C702;
    const double C7794 = C49139 * C953;
    const double C7790 = C49139 * C963;
    const double C20162 = C49139 * C2856;
    const double C20158 = C49139 * C2861;
    const double C22399 = C49139 * C3754;
    const double C22395 = C49139 * C3760;
    const double C1084 =
        (((0 - (C47940 * C47941) / C47864) * ae) / C47864 - (0 * be) / C47876) /
            C47870 +
        ((C47940 * (((C48877 - (C47940 * 2 * C47943) / C47864) * ae) / C47864 -
                    C47941 / C47876) +
          C49139) *
         ae) /
            C47864 +
        (0 * ae) / C47864 - C47943 / C47869;
    const double C49171 = 2 * C49136;
    const double C1105 = C1085 * C265;
    const double C1099 = C1085 * C275;
    const double C1093 = C1085 * C266;
    const double C16848 = C1085 * C2380;
    const double C16836 = C1085 * C703;
    const double C16830 = C1085 * C697;
    const double C17292 = C1085 * C1500;
    const double C17286 = C1085 * C1494;
    const double C48942 = C48941 / C47864;
    const double C49181 = C49145 / C47876;
    const double C30068 = C26650 * C1506;
    const double C49198 = C49139 - C49178;
    const double C22505 = -C49178;
    const double C7936 = C7909 * C274;
    const double C7930 = C7909 * C284;
    const double C7924 = C7909 * C276;
    const double C10292 = C7909 * C712;
    const double C10286 = C7909 * C702;
    const double C10752 = C7909 * C1506;
    const double C49207 = C49194 + C48931;
    const double C48031 = C48027 / C47870;
    const double C170 = C152 + C153;
    const double C311 = C302 + C303;
    const double C443 = C434 + C435;
    const double C3342 = C3326 + C3327;
    const double C2902 = C2872 + C2873;
    const double C133 =
        (2 * (C48108 * C48234 + C48419 * ae) +
         C48108 * (C48234 + C48108 * C48238 + C48108 * C48204 * ae) +
         (C48419 + C48204 * C48133) * ae) /
        C47864;
    const double C273 =
        (C48107 * (C48234 + C48108 * C48238 + C48424 * ae)) / C47864;
    const double C405 =
        (C48322 * (C48234 + C48108 * C48238 + C48424 * ae)) / C47864;
    const double C603 =
        (C48108 * C48234 + C48419 * ae + C48238 * C48293) / C47864;
    const double C705 = (C48322 * C48107 * C48238) / C47864;
    const double C956 =
        (C48108 * C48234 + C48419 * ae + C48238 * C48330) / C47864;
    const double C1803 =
        (3 * (C48120 + C48107 * C48511 + C48509 * ae) +
         C48107 * (2 * C48511 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48195) +
                             C48107 * C48192 * ae) +
                   C48512 * ae) +
         (2 * C48509 + C48107 * C48512) * ae) /
        C47864;
    const double C1961 =
        (C48322 * (2 * C48511 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48195) +
                             C48107 * C48192 * ae) +
                   C48512 * ae)) /
        C47864;
    const double C2378 =
        (C48107 * C48120 + C48419 * ae + C48511 * C48330) / C47864;
    const double C2379 =
        (C48120 + C48107 * C48511 + C48509 * ae +
         (C48127 + C48107 * (C48107 * C48137 + C48195) + C48107 * C48192 * ae) *
             C48330) /
        C47864;
    const double C3316 =
        (2 * C48322 * C48511 +
         C48322 * (C48511 + (C48107 * C48137 + C48195) * C48330)) /
        C47864;
    const double C7244 = C48940 * C1501;
    const double C10288 = C49172 * C1501;
    const double C10746 = C7909 * C1501;
    const double C16833 = C49172 * C1501;
    const double C25963 = C48940 * C1501;
    const double C30062 = C26650 * C1501;
    const double C1096 = C49172 * C602;
    const double C4094 = C48940 * C602;
    const double C7926 = C49172 * C602;
    const double C8146 = C7909 * C602;
    const double C22721 = C48940 * C602;
    const double C26666 = C26650 * C602;
    const double C2693 = C48877 * C704;
    const double C4260 = C48940 * C704;
    const double C6462 = C49139 * C704;
    const double C8328 = C7909 * C704;
    const double C12747 = C7908 * C704;
    const double C22887 = C48940 * C704;
    const double C1095 = C1086 * C596;
    const double C1331 = C1085 * C596;
    const double C4093 = C3885 * C596;
    const double C1529 = C1085 * C698;
    const double C2692 = C113 * C698;
    const double C4259 = C3885 * C698;
    const double C6461 = C3884 * C698;
    const double C2510 = C113 * C949;
    const double C6689 = C3884 * C949;
    const double C1329 = C1086 * C1295;
    const double C1527 = C1086 * C1493;
    const double C6459 = C3885 * C1493;
    const double C32661 = C1085 * C1493;
    const double C2886 = C113 * C2848;
    const double C19063 = C3884 * C2848;
    const double C3334 = C113 * C2372;
    const double C7791 = C3885 * C2372;
    const double C16842 = C1085 * C2372;
    const double C19605 = C3884 * C2372;
    const double C17732 = C1085 * C3313;
    const double C18252 = C113 * C3313;
    const double C20159 = C3885 * C3313;
    const double C22018 = C3884 * C3313;
    const double C172 = C156 + C157;
    const double C309 = C298 + C299;
    const double C441 = C430 + C431;
    const double C3775 = C3771 + C3772;
    const double C171 = C154 + C155;
    const double C310 = C300 + C301;
    const double C442 = C432 + C433;
    const double C3343 = C3328 + C3329;
    const double C2903 = C2874 + C2875;
    const double C134 = (3 * (C48120 + C48127 * C48133) +
                         C48108 * (2 * C48129 + C48108 * C48141)) /
                        C47864;
    const double C272 = (C48107 * (2 * C48129 + C48108 * C48141) +
                         (2 * C48424 + C48108 * C48426) * ae) /
                        C47864;
    const double C404 = (C48322 * (2 * C48129 + C48108 * C48141)) / C47864;
    const double C604 =
        (C48120 + C48127 * C48133 + C48107 * (C48107 * C48141 + C48426 * ae) +
         C48107 * C48426 * ae) /
        C47864;
    const double C706 = (C48322 * (C48107 * C48141 + C48426 * ae)) / C47864;
    const double C957 = (C48120 + C48127 * C48133 + C48141 * C48330) / C47864;
    const double C2852 =
        (2 * C48322 * C48141 + C48322 * (C48141 + C48157 * C48330)) / C47864;
    const double C48158 = C48108 * C48156;
    const double C48163 = 2 * C48156;
    const double C48300 = C48107 * C48156;
    const double C48151 = C48136 + C48147;
    const double C48518 = C48515 + C48241;
    const double C2887 = C48877 * C2854;
    const double C19064 = C49139 * C2854;
    const double C18007 = C48877 * C3756;
    const double C48577 = C48107 * C48573;
    const double C48601 = 2 * C48573;
    const double C17984 =
        (4 * (2 * C48322 * C48127 + C48322 * C48647) +
         C48322 *
             (3 * C48647 + C48322 * (2 * C48322 * C48137 +
                                     C48322 * (C48137 + C48153 * C48330)))) /
        C47864;
    const double C18010 = C17996 + C17997;
    const double C144 =
        (3 * (C48126 + ae * C48129 + C48108 * C48140) +
         ae * (2 * C48129 + C48108 * C48141) +
         C48108 *
             (2 * C48140 + ae * C48141 +
              C48108 * (C48136 + ae * C48108 * C48137 +
                        C48108 * (ae * C48137 + C48108 * std::pow(C48110, 6) *
                                                    bs[6] * C48118)))) /
        C47869;
    const double C283 = (ae * (C48117 * C48113 * C48191 +
                               C48108 * (C48108 * C48205 + C48204 * ae) +
                               C48108 * C48204 * ae) +
                         C48107 * (C48126 + ae * C48129 + C48108 * C48140)) /
                        C47869;
    const double C415 =
        ((zP - zQ) * (C48126 + ae * C48129 + C48108 * C48140)) / C47869;
    const double C611 = (ae * C48120 + C48108 * C48126 + ae * C48107 * C48238 +
                         C48107 * (ae * C48238 + C48107 * C48140)) /
                        C47869;
    const double C713 = ((zP - zQ) * (ae * C48238 + C48107 * C48140)) / C47869;
    const double C964 =
        (ae * C48120 + C48108 * C48126 + C48140 * std::pow(zP - zQ, 2)) /
        C47869;
    const double C2860 = (2 * C48322 * C48140 +
                          C48322 * (C48140 + C48156 * std::pow(C48322, 2))) /
                         C47869;
    const double C2390 =
        (ae * C48234 + C48107 * C48126 + C48294 * std::pow(zP - zQ, 2)) /
        C47869;
    const double C2391 = (C48126 + ae * C48290 + C48107 * C48294 +
                          (C48136 + ae * C48107 * C48198 +
                           C48107 * (ae * C48198 + C48107 * C48152)) *
                              std::pow(zP - zQ, 2)) /
                         C47869;
    const double C3322 = (2 * C48322 * C48294 +
                          C48322 * (C48294 + (ae * C48198 + C48107 * C48152) *
                                                 std::pow(C48322, 2))) /
                         C47869;
    const double C3774 = C3769 + C3770;
    const double C48247 = C48199 * ae;
    const double C48429 = C48108 * C48199;
    const double C48434 = 3 * C48199;
    const double C48523 = C48107 * C48199;
    const double C1294 =
        2 * C48107 * C48426 + C48107 * (C48426 + C48199 * C48293);
    const double C1492 = C48322 * (C48426 + C48199 * C48293);
    const double C2847 =
        2 * C48322 * C48426 + C48322 * (C48426 + C48199 * C48330);
    const double C3753 =
        3 * (C48426 + C48199 * C48330) +
        C48322 * (2 * C48322 * C48199 + C48322 * (C48199 + C48219 * C48330));
    const double C48586 = C48583 + C48215;
    const double C48519 = C48196 + C48517;
    const double C48589 = 2 * C48584;
    const double C48587 = C48584 * ae;
    const double C3314 =
        2 * C48322 * C48516 + C48322 * (C48516 + C48584 * C48330);
    const double C17895 =
        3 * (C48516 + C48584 * C48330) +
        C48322 * (2 * C48322 * C48584 +
                  C48322 * (C48584 + C48107 * C48255 * C48330));
    const double C48759 = C48196 + C48758;
    const double C18006 = C113 * C3752;
    const double C48222 = C48108 * C48220;
    const double C48252 = 2 * C48220;
    const double C48301 = C48220 * C48293;
    const double C48349 = ae * C48220;
    const double C48348 = C48107 * C48220;
    const double C48652 = C48220 * C48330;
    const double C48611 = C48107 * C48607;
    const double C48655 = C48607 * C48330;
    const double C11182 =
        (3 * (C48511 + C48573 * C48330) +
         C48322 * (2 * C48322 * C48573 + C48322 * (C48573 + C48607 * C48330))) /
        C47864;
    const double C48578 = C48107 * C48575;
    const double C48606 = 3 * C48575;
    const double C48604 = C48575 * ae;
    const double C10274 =
        2 * C48322 * C48512 + C48322 * (C48512 + C48575 * C48330);
    const double C11181 =
        3 * (C48512 + C48575 * C48330) +
        C48322 * (2 * C48322 * C48575 + C48322 * (C48575 + C48609 * C48330));
    const double C48762 = C48571 + C48761;
    const double C18256 = C113 * C11180;
    const double C22396 = C3885 * C11180;
    const double C48768 = C48322 * C48767;
    const double C48240 = C48108 * C48201;
    const double C48245 = 2 * C48201;
    const double C48299 = ae * C48201;
    const double C48298 = C48107 * C48201;
    const double C1307 = (2 * (ae * C48238 + C48107 * C48140) +
                          ae * (C48238 + C48201 * std::pow(C48107, 2)) +
                          C48107 * (C48140 + ae * C48107 * C48201 +
                                    C48107 * (ae * C48201 + C48107 * C48156))) /
                         C47869;
    const double C1505 =
        ((zP - zQ) * (C48140 + ae * C48107 * C48201 +
                      C48107 * (ae * C48201 + C48107 * C48156))) /
        C47869;
    const double C1300 =
        (2 * C48107 * C48238 + C48107 * (C48238 + C48201 * C48293)) / C47864;
    const double C1498 = (C48322 * (C48238 + C48201 * C48293)) / C47864;
    const double C2853 =
        (2 * C48322 * C48238 + C48322 * (C48238 + C48201 * C48330)) / C47864;
    const double C3757 =
        (3 * (C48238 + C48201 * C48330) +
         C48322 * (2 * C48322 * C48201 + C48322 * (C48201 + C48220 * C48330))) /
        C47864;
    const double C1809 =
        (3 * (C48126 + ae * C48290 + C48107 * C48294) +
         ae * (2 * C48290 + C48107 * C48296) +
         C48107 * (2 * C48294 + ae * C48296 +
                   C48107 * (C48136 + ae * C48107 * C48198 +
                             C48107 * (ae * C48198 + C48107 * C48152)))) /
        C47869;
    const double C1967 =
        ((zP - zQ) * (2 * C48294 + ae * C48296 +
                      C48107 * (C48136 + ae * C48107 * C48198 +
                                C48107 * (ae * C48198 + C48107 * C48152)))) /
        C47869;
    const double C1804 = (3 * (C48234 + C48205 * C48293) +
                          C48107 * (2 * C48290 + C48107 * C48296)) /
                         C47864;
    const double C1962 = (C48322 * (2 * C48290 + C48107 * C48296)) / C47864;
    const double C2381 = (C48234 + C48205 * C48293 + C48296 * C48330) / C47864;
    const double C10276 =
        (2 * C48322 * C48296 + C48322 * (C48296 + C48341 * C48330)) / C47864;
    const double C48343 = C48107 * C48339;
    const double C48364 = 2 * C48339;
    const double C48342 = C48136 + C48338;
    const double C17726 = C1085 * C3317;
    const double C18254 = C113 * C3317;
    const double C20155 = C3885 * C3317;
    const double C22022 = C3884 * C3317;
    const double C18258 = C113 * C11184;
    const double C22392 = C3885 * C11184;
    const double C17983 =
        (4 * (2 * C48322 * C48205 + C48322 * C48644) +
         C48322 *
             (3 * C48644 + C48322 * (2 * C48322 * C48198 +
                                     C48322 * (C48198 + C48214 * C48330)))) /
        C47864;
    const double C18011 = C17998 + C17999;
    const double C48183 = C48108 * C48181;
    const double C3758 =
        (3 * (C48141 + C48157 * C48330) +
         C48322 * (2 * C48322 * C48157 + C48322 * (C48157 + C48181 * C48330))) /
        C47864;
    const double C48182 = C48108 * C48180;
    const double C48350 = C48107 * C48180;
    const double C48399 = C48180 * C48330;
    const double C3761 =
        (3 * (C48140 + C48156 * C48330) +
         C48322 * (2 * C48322 * C48156 + C48322 * (C48156 + C48180 * C48330))) /
        C47869;
    const double C48377 = C48107 * C48373;
    const double C48402 = C48373 * C48330;
    const double C11186 =
        (3 * (C48294 + C48339 * C48330) +
         C48322 * (2 * C48322 * C48339 + C48322 * (C48339 + C48373 * C48330))) /
        C47869;
    const double C48409 = C48322 * C48408;
    const double C48262 = C48108 * C48261;
    const double C48351 = C48261 * C48293;
    const double C48378 = C48107 * C48375;
    const double C11185 =
        (3 * (C48296 + C48341 * C48330) +
         C48322 * (2 * C48322 * C48341 + C48322 * (C48341 + C48375 * C48330))) /
        C47864;
    const double C1330 = C49172 * C1301;
    const double C8144 = C49172 * C1301;
    const double C11331 = C49182 * C1301;
    const double C23735 = C49182 * C1301;
    const double C26884 = C26650 * C1301;
    const double C1528 = C49172 * C1499;
    const double C6460 = C48940 * C1499;
    const double C8326 = C49172 * C1499;
    const double C12745 = C7909 * C1499;
    const double C25177 = C48940 * C1499;
    const double C27066 = C26650 * C1499;
    const double C2684 = C113 * C2374;
    const double C6687 = C3885 * C2374;
    const double C16854 = C1085 * C2374;
    const double C18855 = C3884 * C2374;
    const double C160 = C113 * C123;
    const double C3921 = C3884 * C123;
    const double C294 = C113 * C264;
    const double C1123 = C1085 * C264;
    const double C3909 = C3885 * C264;
    const double C4079 = C3884 * C264;
    const double C426 = C113 * C396;
    const double C4245 = C3884 * C396;
    const double C1107 = C1086 * C597;
    const double C1319 = C1085 * C597;
    const double C4085 = C3885 * C597;
    const double C1517 = C1085 * C699;
    const double C2688 = C113 * C699;
    const double C4251 = C3885 * C699;
    const double C6453 = C3884 * C699;
    const double C2514 = C113 * C950;
    const double C6681 = C3884 * C950;
    const double C17288 = C1086 * C1958;
    const double C16844 = C1086 * C2373;
    const double C17298 = C1085 * C2373;
    const double C19607 = C3885 * C2373;
    const double C18503 = C113 * C17981;
    const double C48161 = C48149 + C48159;
    const double C17985 =
        (4 * (2 * C48322 * C48143 + C48322 * C48650) +
         C48322 * (3 * C48650 +
                   C48322 * (2 * C48322 * C48165 +
                             C48322 * (C48165 + C48108 * C48177 * C48330)))) /
        C47864;
    const double C48666 = C48663 + C48665;
    const double C18502 = C48877 * C17987;
    const double C48223 = C48217 + C48221;
    const double C48526 = C48199 + C48524;
    const double C48591 = C48107 * C48588;
    const double C48614 = C48610 + C48612;
    const double C48346 = C48340 + C48344;
    const double C18245 =
        (4 * (2 * C48322 * C48334 + C48322 * C48659) +
         C48322 * (3 * C48659 +
                   C48322 * (2 * C48322 * C48366 +
                             C48322 * (C48366 + C48107 * C48258 * C48330)))) /
        C47864;
    const double C48673 = C48670 + C48672;
    const double C48977 = C48976 / C47869;
    const double C49174 = 2 * C49138;
    const double C48984 = C48983 / C47864;
    const double C49187 = C49151 / C47876;
    const double C49201 = C49140 - C49184;
    const double C31302 = -C49184;
    const double C49208 = C49196 + C48973;
    const double C47908 = C47905 * be;
    const double C47894 = C47862 * C47890;
    const double C47922 = C47890 / C47870;
    const double C47893 = C47889 / C47864;
    const double C48785 = C48781 - C48784;
    const double C49191 = C49156 / C47864;
    const double C48793 = C48789 - C48792;
    const double C49205 = C49190 / C47870;
    const double C48032 = C48028 * be;
    const double C48003 = C47995 / C47864;
    const double C7953 = C7915 * C264;
    const double C7935 = C7915 * C265;
    const double C7929 = C7915 * C275;
    const double C7923 = C7915 * C266;
    const double C8145 = C7915 * C596;
    const double C8133 = C7915 * C597;
    const double C8327 = C7915 * C698;
    const double C8315 = C7915 * C699;
    const double C10309 = C7915 * C2374;
    const double C10303 = C7915 * C2380;
    const double C10297 = C7915 * C2372;
    const double C10291 = C7915 * C703;
    const double C10285 = C7915 * C697;
    const double C10757 = C7915 * C2373;
    const double C10751 = C7915 * C1500;
    const double C10745 = C7915 * C1494;
    const double C11199 = C7915 * C3313;
    const double C11193 = C7915 * C3317;
    const double C12744 = C7915 * C1493;
    const double C7937 = C7916 * C597;
    const double C7925 = C7916 * C596;
    const double C8143 = C7916 * C1295;
    const double C8325 = C7916 * C1493;
    const double C10299 = C7916 * C2373;
    const double C10293 = C7916 * C1500;
    const double C10287 = C7916 * C1494;
    const double C10747 = C7916 * C1958;
    const double C22536 = C22512 * C264;
    const double C22528 = C22512 * C265;
    const double C22524 = C22512 * C275;
    const double C22520 = C22512 * C266;
    const double C22720 = C22512 * C596;
    const double C22712 = C22512 * C597;
    const double C22886 = C22512 * C698;
    const double C22878 = C22512 * C699;
    const double C24948 = C22512 * C2374;
    const double C25176 = C22512 * C1493;
    const double C25398 = C22512 * C2380;
    const double C25394 = C22512 * C2372;
    const double C25388 = C22512 * C703;
    const double C25384 = C22512 * C697;
    const double C25970 = C22512 * C2373;
    const double C25966 = C22512 * C1500;
    const double C25962 = C22512 * C1494;
    const double C26526 = C22512 * C3313;
    const double C26522 = C22512 * C3317;
    const double C43374 = C22512 * C11180;
    const double C43370 = C22512 * C11184;
    const double C48012 = C47940 * C48008;
    const double C48041 = C48008 / C47870;
    const double C16869 = C16838 + C16839;
    const double C3928 = C3901 + C3902;
    const double C3926 = C3897 + C3898;
    const double C3924 = C3893 + C3894;
    const double C6698 = C6671 + C6672;
    const double C6696 = C6667 + C6668;
    const double C7252 = C7247 + C7248;
    const double C2909 = C2901 * C1081;
    const double C15576 = C2901 * C49204;
    const double C17991 = C2901 * C48780;
    const double C20541 = C2901 * C49117;
    const double C34304 = C2901 * C23719;
    const double C17990 = C2900 * C9219;
    const double C48936 = C48931 - C48935;
    const double C3931 = C3907 + C3908;
    const double C3929 = C3903 + C3904;
    const double C3927 = C3899 + C3900;
    const double C3925 = C3895 + C3896;
    const double C3923 = C3891 + C3892;
    const double C4108 = C4095 + C4096;
    const double C4106 = C4091 + C4092;
    const double C4104 = C4087 + C4088;
    const double C4274 = C4261 + C4262;
    const double C4272 = C4257 + C4258;
    const double C4270 = C4253 + C4254;
    const double C6697 = C6669 + C6670;
    const double C6695 = C6665 + C6666;
    const double C7251 = C7245 + C7246;
    const double C7249 = C7241 + C7242;
    const double C7798 = C7793 + C7794;
    const double C7796 = C7789 + C7790;
    const double C20168 = C20161 + C20162;
    const double C20166 = C20157 + C20158;
    const double C22406 = C22398 + C22399;
    const double C22404 = C22394 + C22395;
    const double C1125 = C1084 * C122;
    const double C1109 = C1084 * C131;
    const double C1103 = C1084 * C121;
    const double C1097 = C1084 * C129;
    const double C1091 = C1084 * C120;
    const double C1333 = C1084 * C266;
    const double C1327 = C1084 * C275;
    const double C1321 = C1084 * C265;
    const double C1531 = C1084 * C398;
    const double C1525 = C1084 * C407;
    const double C1519 = C1084 * C397;
    const double C16852 = C1084 * C949;
    const double C16846 = C1084 * C954;
    const double C16840 = C1084 * C948;
    const double C16834 = C1084 * C409;
    const double C16828 = C1084 * C399;
    const double C17302 = C1084 * C2380;
    const double C17296 = C1084 * C2372;
    const double C17290 = C1084 * C703;
    const double C17284 = C1084 * C697;
    const double C17734 = C1084 * C2849;
    const double C17728 = C1084 * C2855;
    const double C32663 = C1084 * C698;
    const double C49195 = C49171 / C47864;
    const double C48943 = C48939 - C48942;
    const double C49209 = C49198 / C47870;
    const double C22539 = C22505 * C143;
    const double C22535 = C22505 * C132;
    const double C22531 = C22505 * C142;
    const double C22527 = C22505 * C130;
    const double C22523 = C22505 * C141;
    const double C22519 = C22505 * C128;
    const double C22723 = C22505 * C276;
    const double C22719 = C22505 * C284;
    const double C22715 = C22505 * C274;
    const double C22889 = C22505 * C408;
    const double C22885 = C22505 * C416;
    const double C22881 = C22505 * C406;
    const double C24947 = C22505 * C955;
    const double C25179 = C22505 * C704;
    const double C25409 = C22505 * C2854;
    const double C25397 = C22505 * C963;
    const double C25393 = C22505 * C953;
    const double C25387 = C22505 * C417;
    const double C25383 = C22505 * C410;
    const double C25965 = C22505 * C712;
    const double C25961 = C22505 * C702;
    const double C26529 = C22505 * C2856;
    const double C26525 = C22505 * C2861;
    const double C43377 = C22505 * C3754;
    const double C43373 = C22505 * C3760;
    const double C7914 =
        ((-(0 * be) / C47864) / C47870 -
         ((0 - (C47940 * C47941) / C47864) * be) / C47864) /
            C47870 -
        ((C47940 * ((-C47941 / C47864) / C47870 -
                    ((C48877 - (C47940 * C47970) / C47864) * be) / C47864) +
          C22505) *
         be) /
            C47864 +
        (-C47970 / C47864) / C47870 - (0 * be) / C47864;
    const double C1126 = C49207 * C132;
    const double C1120 = C49207 * C143;
    const double C1110 = C49207 * C142;
    const double C1104 = C49207 * C130;
    const double C1098 = C49207 * C141;
    const double C1092 = C49207 * C128;
    const double C1334 = C49207 * C276;
    const double C1328 = C49207 * C284;
    const double C1322 = C49207 * C274;
    const double C1532 = C49207 * C408;
    const double C1526 = C49207 * C416;
    const double C1520 = C49207 * C406;
    const double C16853 = C49207 * C955;
    const double C16847 = C49207 * C963;
    const double C16841 = C49207 * C953;
    const double C16835 = C49207 * C417;
    const double C16829 = C49207 * C410;
    const double C17291 = C49207 * C712;
    const double C17285 = C49207 * C702;
    const double C17735 = C49207 * C2856;
    const double C17729 = C49207 * C2861;
    const double C32664 = C49207 * C704;
    const double C18000 = C443 * C9219;
    const double C20542 = C443 * C47890;
    const double C34305 = C443 * C23726;
    const double C18248 = C3342 * C9219;
    const double C17992 = C2902 * C9219;
    const double C158 = C113 * C133;
    const double C1119 = C1084 * C133;
    const double C3911 = C3884 * C133;
    const double C296 = C113 * C273;
    const double C1111 = C1085 * C273;
    const double C1315 = C1084 * C273;
    const double C3905 = C3885 * C273;
    const double C4083 = C3884 * C273;
    const double C7941 = C7915 * C273;
    const double C22532 = C22512 * C273;
    const double C428 = C113 * C405;
    const double C1513 = C1084 * C405;
    const double C4249 = C3884 * C405;
    const double C1101 = C1086 * C603;
    const double C1325 = C1085 * C603;
    const double C4089 = C3885 * C603;
    const double C7931 = C7916 * C603;
    const double C8139 = C7915 * C603;
    const double C22716 = C22512 * C603;
    const double C1523 = C1085 * C705;
    const double C2690 = C113 * C705;
    const double C4255 = C3885 * C705;
    const double C6457 = C3884 * C705;
    const double C8321 = C7915 * C705;
    const double C22882 = C22512 * C705;
    const double C32657 = C1084 * C705;
    const double C2512 = C113 * C956;
    const double C6685 = C3884 * C956;
    const double C16858 = C1084 * C956;
    const double C10748 = C49172 * C1961;
    const double C14389 = C49182 * C1961;
    const double C17289 = C49172 * C1961;
    const double C30640 = C26650 * C1961;
    const double C41499 = C49182 * C1961;
    const double C3335 = C48877 * C2378;
    const double C7792 = C48940 * C2378;
    const double C10298 = C7909 * C2378;
    const double C10756 = C7908 * C2378;
    const double C17297 = C49207 * C2378;
    const double C19606 = C49139 * C2378;
    const double C25395 = C48940 * C2378;
    const double C25969 = C22505 * C2378;
    const double C10300 = C49172 * C2379;
    const double C10758 = C7909 * C2379;
    const double C16845 = C49172 * C2379;
    const double C19608 = C48940 * C2379;
    const double C25971 = C48940 * C2379;
    const double C31194 = C26650 * C2379;
    const double C11200 = C7909 * C3316;
    const double C18253 = C48877 * C3316;
    const double C20160 = C48940 * C3316;
    const double C22019 = C49139 * C3316;
    const double C26527 = C48940 * C3316;
    const double C42997 = C22505 * C3316;
    const double C7250 = C7243 + C7244;
    const double C16866 = C16832 + C16833;
    const double C1129 = C1095 + C1096;
    const double C4107 = C4093 + C4094;
    const double C2701 = C2692 + C2693;
    const double C4273 = C4259 + C4260;
    const double C6470 = C6461 + C6462;
    const double C2522 = C2510 + C2511;
    const double C6706 = C6689 + C6690;
    const double C2870 = C441 * C1089;
    const double C20554 = C441 * C47890;
    const double C34317 = C441 * C23726;
    const double C17994 = C3775 * C9219;
    const double C2889 = C442 * C1081;
    const double C2869 = C442 * C1082;
    const double C15588 = C442 * C49204;
    const double C18001 = C442 * C48780;
    const double C20553 = C442 * C49117;
    const double C20543 = C442 * C48790;
    const double C34316 = C442 * C23719;
    const double C34306 = C442 * C48790;
    const double C3347 = C3343 * C1081;
    const double C16002 = C3343 * C49204;
    const double C18249 = C3343 * C48780;
    const double C20923 = C3343 * C49117;
    const double C34686 = C3343 * C23719;
    const double C2911 = C2903 * C1081;
    const double C15582 = C2903 * C49204;
    const double C17993 = C2903 * C48780;
    const double C20545 = C2903 * C49117;
    const double C34308 = C2903 * C23719;
    const double C161 = C48877 * C134;
    const double C3922 = C49139 * C134;
    const double C22549 = C22505 * C134;
    const double C295 = C48877 * C272;
    const double C3910 = C48940 * C272;
    const double C4080 = C49139 * C272;
    const double C7954 = C7909 * C272;
    const double C22537 = C48940 * C272;
    const double C22707 = C22505 * C272;
    const double C427 = C48877 * C404;
    const double C4246 = C49139 * C404;
    const double C22873 = C22505 * C404;
    const double C1108 = C49172 * C604;
    const double C4086 = C48940 * C604;
    const double C7938 = C49172 * C604;
    const double C8134 = C7909 * C604;
    const double C22713 = C48940 * C604;
    const double C26678 = C26650 * C604;
    const double C2689 = C48877 * C706;
    const double C4252 = C48940 * C706;
    const double C6454 = C49139 * C706;
    const double C8316 = C7909 * C706;
    const double C22879 = C48940 * C706;
    const double C28236 = C22505 * C706;
    const double C2515 = C48877 * C957;
    const double C6682 = C49139 * C957;
    const double C24961 = C22505 * C957;
    const double C2883 = C48877 * C2852;
    const double C48170 = C48163 + C48164;
    const double C48160 = C48151 + C48158;
    const double C2382 =
        (C48107 * C48129 + C48424 * ae + C48518 * C48330) / C47864;
    const double C2383 =
        (C48129 + C48107 * C48518 + C48516 * ae +
         (C48143 + C48107 * (C48107 * C48165 + C48215) + C48107 * C48212 * ae) *
             C48330) /
        C47864;
    const double C3318 =
        (2 * C48322 * C48518 +
         C48322 * (C48518 + (C48107 * C48165 + C48215) * C48330)) /
        C47864;
    const double C2907 = C2886 + C2887;
    const double C19070 = C19063 + C19064;
    const double C48579 = C48127 + C48577;
    const double C18504 = C48877 * C17984;
    const double C18014 = C18010 * C9219;
    const double C163 = C48877 * C144;
    const double C3918 = C49139 * C144;
    const double C22545 = C22505 * C144;
    const double C297 = C48877 * C283;
    const double C1316 = C49207 * C283;
    const double C3906 = C48940 * C283;
    const double C4084 = C49139 * C283;
    const double C7942 = C7909 * C283;
    const double C8130 = C7908 * C283;
    const double C22533 = C48940 * C283;
    const double C22711 = C22505 * C283;
    const double C429 = C48877 * C415;
    const double C1514 = C49207 * C415;
    const double C4250 = C49139 * C415;
    const double C8312 = C7908 * C415;
    const double C22877 = C22505 * C415;
    const double C1102 = C49172 * C611;
    const double C4090 = C48940 * C611;
    const double C7932 = C49172 * C611;
    const double C8140 = C7909 * C611;
    const double C22717 = C48940 * C611;
    const double C26672 = C26650 * C611;
    const double C2691 = C48877 * C713;
    const double C4256 = C48940 * C713;
    const double C6458 = C49139 * C713;
    const double C8322 = C7909 * C713;
    const double C12741 = C7908 * C713;
    const double C22883 = C48940 * C713;
    const double C25175 = C22505 * C713;
    const double C32658 = C49207 * C713;
    const double C2513 = C48877 * C964;
    const double C6686 = C49139 * C964;
    const double C10314 = C7908 * C964;
    const double C16859 = C49207 * C964;
    const double C24951 = C22505 * C964;
    const double C2885 = C48877 * C2860;
    const double C19060 = C49139 * C2860;
    const double C25405 = C22505 * C2860;
    const double C3337 = C48877 * C2390;
    const double C7788 = C48940 * C2390;
    const double C10304 = C7909 * C2390;
    const double C10762 = C7908 * C2390;
    const double C17303 = C49207 * C2390;
    const double C19610 = C49139 * C2390;
    const double C25399 = C48940 * C2390;
    const double C25973 = C22505 * C2390;
    const double C10306 = C49172 * C2391;
    const double C10764 = C7909 * C2391;
    const double C16851 = C49172 * C2391;
    const double C19612 = C48940 * C2391;
    const double C25975 = C48940 * C2391;
    const double C31188 = C26650 * C2391;
    const double C11194 = C7909 * C3322;
    const double C18255 = C48877 * C3322;
    const double C20156 = C48940 * C3322;
    const double C22023 = C49139 * C3322;
    const double C26523 = C48940 * C3322;
    const double C43001 = C22505 * C3322;
    const double C3777 = C3774 * C1081;
    const double C16420 = C3774 * C49204;
    const double C17995 = C3774 * C48780;
    const double C20549 = C3774 * C49117;
    const double C34312 = C3774 * C23719;
    const double C48525 = C48522 + C48247;
    const double C1299 =
        (2 * (C48107 * C48141 + C48426 * ae) +
         C48107 * (C48141 + C48107 * (C48107 * C48157 + C48247) +
                   C48107 * C48199 * ae) +
         (C48426 + C48199 * C48293) * ae) /
        C47864;
    const double C1497 =
        (C48322 * (C48141 + C48107 * (C48107 * C48157 + C48247) +
                   C48107 * C48199 * ae)) /
        C47864;
    const double C48430 = C48428 + C48429;
    const double C2376 = C48107 * C48426 + C48523 * C48330;
    const double C3315 =
        2 * C48322 * C48523 + C48322 * (C48523 + C48107 * C48219 * C48330);
    const double C1317 = C1086 * C1294;
    const double C8131 = C7916 * C1294;
    const double C1515 = C1086 * C1492;
    const double C6451 = C3885 * C1492;
    const double C8313 = C7916 * C1492;
    const double C28233 = C22512 * C1492;
    const double C2882 = C113 * C2847;
    const double C48590 = C48107 * C48586;
    const double C17896 =
        (3 * (C48518 + C48586 * C48330) +
         C48322 * (2 * C48322 * C48586 +
                   C48322 * (C48586 +
                             (C48107 * C48108 * C48177 + C48259) * C48330))) /
        C47864;
    const double C1805 =
        (3 * (C48129 + C48107 * C48518 + C48516 * ae) +
         C48107 * (2 * C48518 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48215) +
                             C48107 * C48212 * ae) +
                   C48519 * ae) +
         (2 * C48516 + C48107 * C48519) * ae) /
        C47864;
    const double C1963 =
        (C48322 * (2 * C48518 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48215) +
                             C48107 * C48212 * ae) +
                   C48519 * ae)) /
        C47864;
    const double C1801 = 3 * (C48424 + C48196 * C48293) +
                         C48107 * (2 * C48516 + C48107 * C48519);
    const double C1959 = C48322 * (2 * C48516 + C48107 * C48519);
    const double C2375 = C48424 + C48196 * C48293 + C48519 * C48330;
    const double C10275 =
        2 * C48322 * C48519 + C48322 * (C48519 + C48588 * C48330);
    const double C19061 = C3885 * C3314;
    const double C20406 = C113 * C3314;
    const double C25406 = C22512 * C3314;
    const double C17982 =
        4 * (2 * C48322 * C48196 + C48322 * C48759) +
        C48322 * (3 * C48759 + C48322 * (2 * C48322 * C48212 +
                                         C48322 * (C48212 + C48255 * C48330)));
    const double C18012 = C18006 + C18007;
    const double C48224 = C48198 + C48222;
    const double C48303 = C48201 + C48301;
    const double C48354 = 2 * C48348;
    const double C48352 = ae * C48348;
    const double C48653 = C48201 + C48652;
    const double C48613 = C48137 + C48611;
    const double C48656 = C48573 + C48655;
    const double C18257 = C48877 * C11182;
    const double C22397 = C48940 * C11182;
    const double C43375 = C48940 * C11182;
    const double C48580 = C48576 + C48578;
    const double C11197 = C7916 * C10274;
    const double C17730 = C1086 * C10274;
    const double C22020 = C3885 * C10274;
    const double C42998 = C22512 * C10274;
    const double C18243 =
        4 * (2 * C48322 * C48571 + C48322 * C48762) +
        C48322 * (3 * C48762 +
                  C48322 * (2 * C48322 * C48603 +
                            C48322 * (C48603 + C48107 * C48213 * C48330)));
    const double C48769 = C48766 + C48768;
    const double C48242 = C48205 + C48240;
    const double C48302 = C48299 + C48300;
    const double C2384 = (C48107 * C48238 + C48298 * C48330) / C47864;
    const double C3319 =
        (2 * C48322 * C48298 + C48322 * (C48298 + C48348 * C48330)) / C47864;
    const double C17897 =
        (3 * (C48298 + C48348 * C48330) +
         C48322 * (2 * C48322 * C48348 +
                   C48322 * (C48348 + C48107 * C48261 * C48330))) /
        C47864;
    const double C1324 = C49172 * C1307;
    const double C8138 = C49172 * C1307;
    const double C11339 = C49182 * C1307;
    const double C23743 = C49182 * C1307;
    const double C26878 = C26650 * C1307;
    const double C1522 = C49172 * C1505;
    const double C6456 = C48940 * C1505;
    const double C8320 = C49172 * C1505;
    const double C12739 = C7909 * C1505;
    const double C25173 = C48940 * C1505;
    const double C27060 = C26650 * C1505;
    const double C1323 = C1086 * C1300;
    const double C8137 = C7916 * C1300;
    const double C1521 = C1086 * C1498;
    const double C6455 = C3885 * C1498;
    const double C8319 = C7916 * C1498;
    const double C12738 = C7915 * C1498;
    const double C25172 = C22512 * C1498;
    const double C32655 = C1085 * C1498;
    const double C2884 = C113 * C2853;
    const double C19059 = C3884 * C2853;
    const double C18008 = C113 * C3757;
    const double C10754 = C49172 * C1967;
    const double C14397 = C49182 * C1967;
    const double C17295 = C49172 * C1967;
    const double C30646 = C26650 * C1967;
    const double C41507 = C49182 * C1967;
    const double C10753 = C7916 * C1962;
    const double C17294 = C1086 * C1962;
    const double C10305 = C7916 * C2381;
    const double C10763 = C7915 * C2381;
    const double C16850 = C1086 * C2381;
    const double C17304 = C1085 * C2381;
    const double C19611 = C3885 * C2381;
    const double C25974 = C22512 * C2381;
    const double C11191 = C7916 * C10276;
    const double C17724 = C1086 * C10276;
    const double C22024 = C3885 * C10276;
    const double C43002 = C22512 * C10276;
    const double C48371 = C48364 + C48365;
    const double C48345 = C48342 + C48343;
    const double C18501 = C113 * C17983;
    const double C18015 = C18011 * C48780;
    const double C21296 = C18011 * C49117;
    const double C35059 = C18011 * C23719;
    const double C48185 = C48173 + C48183;
    const double C48184 = C48175 + C48182;
    const double C48353 = C48349 + C48350;
    const double C48400 = C48156 + C48399;
    const double C18009 = C48877 * C3761;
    const double C48379 = C48376 + C48377;
    const double C48403 = C48339 + C48402;
    const double C18259 = C48877 * C11186;
    const double C22393 = C48940 * C11186;
    const double C43371 = C48940 * C11186;
    const double C48410 = C48407 + C48409;
    const double C48263 = C48214 + C48262;
    const double C48355 = C48220 + C48351;
    const double C48380 = C48374 + C48378;
    const double C1344 = C1329 + C1330;
    const double C1542 = C1527 + C1528;
    const double C6469 = C6459 + C6460;
    const double C137 = (4 * (2 * C48129 + C48108 * C48141) +
                         C48108 * (3 * C48141 + C48108 * C48161)) /
                        C47864;
    const double C402 = (C48322 * (3 * C48141 + C48108 * C48161)) / C47864;
    const double C959 =
        (2 * C48129 + C48108 * C48141 + C48161 * C48330) / C47864;
    const double C18494 =
        (5 * (3 * C48647 + C48322 * C48666) +
         C48322 * (4 * C48666 +
                   C48322 * (3 * C48664 +
                             C48322 * (2 * C48322 * C48153 +
                                       C48322 * (C48153 + C48177 * C48330))))) /
        C47864;
    const double C48257 = C48223 * ae;
    const double C48435 = C48108 * C48223;
    const double C1802 = 3 * (C48426 + C48199 * C48293) +
                         C48107 * (2 * C48523 + C48107 * C48526);
    const double C1960 = C48322 * (2 * C48523 + C48107 * C48526);
    const double C2377 = C48426 + C48199 * C48293 + C48526 * C48330;
    const double C48593 = C48589 + C48591;
    const double C48616 = C48107 * C48614;
    const double C9304 = (4 * (2 * C48290 + C48107 * C48296) +
                          C48107 * (3 * C48296 + C48107 * C48346)) /
                         C47864;
    const double C9394 = (C48322 * (3 * C48296 + C48107 * C48346)) / C47864;
    const double C9864 =
        (2 * C48290 + C48107 * C48296 + C48346 * C48330) / C47864;
    const double C18495 =
        (5 * (3 * C48644 + C48322 * C48673) +
         C48322 * (4 * C48673 +
                   C48322 * (3 * C48671 +
                             C48322 * (2 * C48322 * C48214 +
                                       C48322 * (C48214 + C48258 * C48330))))) /
        C47864;
    const double C48978 = C48973 - C48977;
    const double C49197 = C49174 / C47864;
    const double C48985 = C48981 - C48984;
    const double C49211 = C49201 / C47870;
    const double C47910 = C47908 / C47864;
    const double C47898 = C47894 + C48790;
    const double C47925 = C47922 - C47924;
    const double C7919 = C47922 + (0 * ae) / C47864;
    const double C47897 = C48780 - C47893;
    const double C37085 = C442 * C48785;
    const double C37079 = C2903 * C48785;
    const double C37073 = C2901 * C48785;
    const double C37499 = C3343 * C48785;
    const double C37917 = C3774 * C48785;
    const double C49116 = C48785 * C48775;
    const double C49158 = C49121 + C48785;
    const double C15578 = C442 * C49191;
    const double C37075 = C442 * C48793;
    const double C49124 = C48793 / C47870;
    const double C49120 = C48793 * C48775;
    const double C3880 = C49205 - (C48785 * C48776) / C47864;
    const double C48034 = C48032 / C47864;
    const double C48007 = C48877 - C48003;
    const double C7964 = C7935 + C7936;
    const double C7961 = C7929 + C7930;
    const double C7958 = C7923 + C7924;
    const double C8159 = C8145 + C8146;
    const double C8341 = C8327 + C8328;
    const double C10323 = C10291 + C10292;
    const double C10320 = C10285 + C10286;
    const double C10771 = C10751 + C10752;
    const double C10768 = C10745 + C10746;
    const double C12752 = C12744 + C12745;
    const double C7959 = C7925 + C7926;
    const double C8158 = C8143 + C8144;
    const double C8340 = C8325 + C8326;
    const double C10324 = C10293 + C10294;
    const double C10321 = C10287 + C10288;
    const double C22555 = C22528 + C22529;
    const double C22553 = C22524 + C22525;
    const double C22551 = C22520 + C22521;
    const double C22734 = C22720 + C22721;
    const double C22900 = C22886 + C22887;
    const double C25186 = C25176 + C25177;
    const double C25417 = C25388 + C25389;
    const double C25415 = C25384 + C25385;
    const double C25979 = C25966 + C25967;
    const double C25977 = C25962 + C25963;
    const double C48016 = C48012 + C48940;
    const double C48044 = C48041 - C48043;
    const double C26696 = C48936 * C132;
    const double C26690 = C48936 * C143;
    const double C26680 = C48936 * C142;
    const double C26674 = C48936 * C130;
    const double C26668 = C48936 * C141;
    const double C26662 = C48936 * C128;
    const double C26888 = C48936 * C276;
    const double C26882 = C48936 * C284;
    const double C26876 = C48936 * C274;
    const double C26870 = C48936 * C283;
    const double C27070 = C48936 * C408;
    const double C27064 = C48936 * C416;
    const double C27058 = C48936 * C406;
    const double C27052 = C48936 * C415;
    const double C29856 = C48936 * C704;
    const double C29850 = C48936 * C713;
    const double C30082 = C48936 * C955;
    const double C30076 = C48936 * C964;
    const double C30064 = C48936 * C417;
    const double C30058 = C48936 * C410;
    const double C30642 = C48936 * C712;
    const double C30636 = C48936 * C702;
    const double C31198 = C48936 * C953;
    const double C31192 = C48936 * C963;
    const double C47408 = C48936 * C2390;
    const double C47402 = C48936 * C2378;
    const double C47834 = C48936 * C2856;
    const double C47828 = C48936 * C2861;
    const double C49142 = C48936 * C48930;
    const double C49180 = C49144 + C48936;
    const double C3939 = C3927 + C3928;
    const double C1124 = C49195 * C272;
    const double C1112 = C49195 * C283;
    const double C1106 = C49195 * C274;
    const double C1100 = C49195 * C284;
    const double C1094 = C49195 * C276;
    const double C1332 = C49195 * C602;
    const double C1326 = C49195 * C611;
    const double C1320 = C49195 * C604;
    const double C1530 = C49195 * C704;
    const double C1524 = C49195 * C713;
    const double C1518 = C49195 * C706;
    const double C16849 = C49195 * C2390;
    const double C16843 = C49195 * C2378;
    const double C16837 = C49195 * C712;
    const double C16831 = C49195 * C702;
    const double C17305 = C49195 * C2391;
    const double C17299 = C49195 * C2379;
    const double C17293 = C49195 * C1506;
    const double C17287 = C49195 * C1501;
    const double C17733 = C49195 * C3316;
    const double C17727 = C49195 * C3322;
    const double C32662 = C49195 * C1499;
    const double C32656 = C49195 * C1505;
    const double C26694 = C48943 * C272;
    const double C26682 = C48943 * C283;
    const double C26676 = C48943 * C274;
    const double C26670 = C48943 * C284;
    const double C26664 = C48943 * C276;
    const double C26886 = C48943 * C602;
    const double C26880 = C48943 * C611;
    const double C26874 = C48943 * C604;
    const double C27068 = C48943 * C704;
    const double C27062 = C48943 * C713;
    const double C27056 = C48943 * C706;
    const double C29854 = C48943 * C1499;
    const double C29848 = C48943 * C1505;
    const double C30066 = C48943 * C712;
    const double C30060 = C48943 * C702;
    const double C30644 = C48943 * C1506;
    const double C30638 = C48943 * C1501;
    const double C31196 = C48943 * C2378;
    const double C31190 = C48943 * C2390;
    const double C47410 = C48943 * C2391;
    const double C47404 = C48943 * C2379;
    const double C47832 = C48943 * C3316;
    const double C47826 = C48943 * C3322;
    const double C49146 = C48943 / C47870;
    const double C49143 = C48943 * C48930;
    const double C11311 = C49209 - (C48936 * C48932) / C47864;
    const double C7955 = C7914 * C122;
    const double C7949 = C7914 * C133;
    const double C7939 = C7914 * C131;
    const double C7933 = C7914 * C121;
    const double C7927 = C7914 * C129;
    const double C7921 = C7914 * C120;
    const double C8147 = C7914 * C266;
    const double C8141 = C7914 * C275;
    const double C8135 = C7914 * C265;
    const double C8129 = C7914 * C273;
    const double C8329 = C7914 * C398;
    const double C8323 = C7914 * C407;
    const double C8317 = C7914 * C397;
    const double C8311 = C7914 * C405;
    const double C10313 = C7914 * C956;
    const double C10307 = C7914 * C949;
    const double C10301 = C7914 * C954;
    const double C10295 = C7914 * C948;
    const double C10289 = C7914 * C409;
    const double C10283 = C7914 * C399;
    const double C10761 = C7914 * C2380;
    const double C10755 = C7914 * C2372;
    const double C10749 = C7914 * C703;
    const double C10743 = C7914 * C697;
    const double C11201 = C7914 * C2849;
    const double C11195 = C7914 * C2855;
    const double C12746 = C7914 * C698;
    const double C12740 = C7914 * C705;
    const double C1144 = C1125 + C1126;
    const double C1136 = C1109 + C1110;
    const double C1133 = C1103 + C1104;
    const double C1130 = C1097 + C1098;
    const double C1127 = C1091 + C1092;
    const double C1346 = C1333 + C1334;
    const double C1343 = C1327 + C1328;
    const double C1340 = C1321 + C1322;
    const double C1544 = C1531 + C1532;
    const double C1541 = C1525 + C1526;
    const double C1538 = C1519 + C1520;
    const double C16876 = C16852 + C16853;
    const double C16873 = C16846 + C16847;
    const double C16870 = C16840 + C16841;
    const double C16867 = C16834 + C16835;
    const double C16864 = C16828 + C16829;
    const double C17311 = C17290 + C17291;
    const double C17308 = C17284 + C17285;
    const double C17743 = C17734 + C17735;
    const double C17740 = C17728 + C17729;
    const double C32670 = C32663 + C32664;
    const double C173 = C158 + C159;
    const double C1141 = C1119 + C1120;
    const double C3933 = C3911 + C3912;
    const double C10769 = C10747 + C10748;
    const double C17310 = C17288 + C17289;
    const double C3344 = C3334 + C3335;
    const double C7797 = C7791 + C7792;
    const double C10326 = C10297 + C10298;
    const double C17314 = C17296 + C17297;
    const double C19613 = C19605 + C19606;
    const double C25419 = C25394 + C25395;
    const double C10327 = C10299 + C10300;
    const double C10774 = C10757 + C10758;
    const double C16872 = C16844 + C16845;
    const double C19614 = C19607 + C19608;
    const double C25981 = C25970 + C25971;
    const double C11209 = C11199 + C11200;
    const double C18260 = C18252 + C18253;
    const double C20167 = C20159 + C20160;
    const double C22026 = C22018 + C22019;
    const double C26534 = C26526 + C26527;
    const double C20924 = C2701 * C47890;
    const double C34687 = C2701 * C23726;
    const double C6694 = C4273 + C4274;
    const double C6673 = C4274 + C4273;
    const double C18002 = C2522 * C9219;
    const double C20546 = C2522 * C47890;
    const double C34309 = C2522 * C23726;
    const double C18498 = C17992 + C17993;
    const double C174 = C160 + C161;
    const double C3938 = C3921 + C3922;
    const double C307 = C294 + C295;
    const double C3932 = C3909 + C3910;
    const double C4100 = C4079 + C4080;
    const double C7973 = C7953 + C7954;
    const double C22559 = C22536 + C22537;
    const double C439 = C426 + C427;
    const double C4266 = C4245 + C4246;
    const double C1135 = C1107 + C1108;
    const double C4103 = C4085 + C4086;
    const double C7965 = C7937 + C7938;
    const double C8153 = C8133 + C8134;
    const double C22730 = C22712 + C22713;
    const double C2699 = C2688 + C2689;
    const double C4269 = C4251 + C4252;
    const double C6466 = C6453 + C6454;
    const double C8335 = C8315 + C8316;
    const double C22896 = C22878 + C22879;
    const double C2524 = C2514 + C2515;
    const double C6702 = C6681 + C6682;
    const double C145 =
        (4 * (2 * C48140 + ae * C48141 + C48108 * C48160) +
         ae * (3 * C48141 + C48108 * C48161) +
         C48108 * (3 * C48160 + ae * C48161 +
                   C48108 * (2 * C48156 + ae * C48157 +
                             C48108 * (C48152 + ae * C48108 * C48153 +
                                       C48108 * (ae * C48153 +
                                                 C48108 * std::pow(C48112, 7) *
                                                     bs[7] * C48118))))) /
        C47869;
    const double C282 =
        (ae * (2 * (C48108 * C48205 + C48204 * ae) +
               C48108 * (C48205 + C48108 * C48201 + C48196 * ae) +
               (C48204 + C48192 * C48133) * ae) +
         C48107 * (2 * C48140 + ae * C48141 + C48108 * C48160)) /
        C47869;
    const double C414 =
        ((zP - zQ) * (2 * C48140 + ae * C48141 + C48108 * C48160)) / C47869;
    const double C965 = (C48126 + ae * C48129 + C48108 * C48140 +
                         C48160 * std::pow(zP - zQ, 2)) /
                        C47869;
    const double C2685 = C48877 * C2382;
    const double C6688 = C48940 * C2382;
    const double C10310 = C7909 * C2382;
    const double C16855 = C49195 * C2382;
    const double C18856 = C49139 * C2382;
    const double C24949 = C48940 * C2382;
    const double C25171 = C22505 * C2382;
    const double C30080 = C48943 * C2382;
    const double C10312 = C49172 * C2383;
    const double C16857 = C49172 * C2383;
    const double C18854 = C48940 * C2383;
    const double C25169 = C48940 * C2383;
    const double C30078 = C26650 * C2383;
    const double C19062 = C48940 * C3318;
    const double C20407 = C48877 * C3318;
    const double C25407 = C48940 * C3318;
    const double C18004 = C2907 * C9219;
    const double C20550 = C2907 * C47890;
    const double C34313 = C2907 * C23726;
    const double C48581 = C48579 + C48574;
    const double C18506 = C18503 + C18504;
    const double C308 = C296 + C297;
    const double C1337 = C1315 + C1316;
    const double C3930 = C3905 + C3906;
    const double C4102 = C4083 + C4084;
    const double C7967 = C7941 + C7942;
    const double C22557 = C22532 + C22533;
    const double C440 = C428 + C429;
    const double C1535 = C1513 + C1514;
    const double C4268 = C4249 + C4250;
    const double C1132 = C1101 + C1102;
    const double C4105 = C4089 + C4090;
    const double C7962 = C7931 + C7932;
    const double C8156 = C8139 + C8140;
    const double C22732 = C22716 + C22717;
    const double C2700 = C2690 + C2691;
    const double C4271 = C4255 + C4256;
    const double C6468 = C6457 + C6458;
    const double C8338 = C8321 + C8322;
    const double C22898 = C22882 + C22883;
    const double C32667 = C32657 + C32658;
    const double C2523 = C2512 + C2513;
    const double C6704 = C6685 + C6686;
    const double C16879 = C16858 + C16859;
    const double C3345 = C3336 + C3337;
    const double C7795 = C7787 + C7788;
    const double C10329 = C10303 + C10304;
    const double C17317 = C17302 + C17303;
    const double C19615 = C19609 + C19610;
    const double C25421 = C25398 + C25399;
    const double C11206 = C11193 + C11194;
    const double C18261 = C18254 + C18255;
    const double C20165 = C20155 + C20156;
    const double C22028 = C22022 + C22023;
    const double C26532 = C26522 + C26523;
    const double C18499 = C17994 + C17995;
    const double C1807 =
        (3 * (C48141 + C48107 * C48525 + C48523 * ae) +
         C48107 * (2 * C48525 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48256) +
                             C48107 * C48219 * ae) +
                   C48526 * ae) +
         (2 * C48523 + C48107 * C48526) * ae) /
        C47864;
    const double C1965 =
        (C48322 * (2 * C48525 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48256) +
                             C48107 * C48219 * ae) +
                   C48526 * ae)) /
        C47864;
    const double C2386 =
        (C48107 * C48141 + C48426 * ae + C48525 * C48330) / C47864;
    const double C2387 =
        (C48141 + C48107 * C48525 + C48523 * ae +
         (C48157 + C48107 * (C48107 * C48181 + C48256) + C48107 * C48219 * ae) *
             C48330) /
        C47864;
    const double C3320 =
        (2 * C48322 * C48525 +
         C48322 * (C48525 + (C48107 * C48181 + C48256) * C48330)) /
        C47864;
    const double C1318 = C49172 * C1299;
    const double C8132 = C49172 * C1299;
    const double C11349 = C49182 * C1299;
    const double C23753 = C49182 * C1299;
    const double C26872 = C26650 * C1299;
    const double C1516 = C49172 * C1497;
    const double C6452 = C48940 * C1497;
    const double C8314 = C49172 * C1497;
    const double C27054 = C26650 * C1497;
    const double C28234 = C48940 * C1497;
    const double C270 = (C48107 * (3 * C48141 + C48108 * C48161) +
                         (3 * C48426 + C48108 * C48430) * ae) /
                        C47864;
    const double C606 =
        (2 * C48129 + C48108 * C48141 +
         C48107 * (C48107 * C48161 + C48430 * ae) + C48107 * C48430 * ae) /
        C47864;
    const double C708 = (C48322 * (C48107 * C48161 + C48430 * ae)) / C47864;
    const double C124 = 4 * (2 * C48424 + C48108 * C48426) +
                        C48108 * (3 * C48426 + C48108 * C48430);
    const double C263 = C48107 * (3 * C48426 + C48108 * C48430);
    const double C395 = C48322 * (3 * C48426 + C48108 * C48430);
    const double C598 = 2 * C48424 + C48108 * C48426 + C48430 * C48293;
    const double C700 = C48322 * C48107 * C48430;
    const double C951 = 2 * C48424 + C48108 * C48426 + C48430 * C48330;
    const double C1297 =
        2 * C48107 * C48430 + C48107 * (C48430 + C48223 * C48293);
    const double C1495 = C48322 * (C48430 + C48223 * C48293);
    const double C2673 = C48107 * C48430 + C48107 * C48223 * C48330;
    const double C2850 =
        2 * C48322 * C48430 + C48322 * (C48430 + C48223 * C48330);
    const double C2680 = C113 * C2376;
    const double C6679 = C3885 * C2376;
    const double C24958 = C22512 * C2376;
    const double C2905 = C2882 + C2883;
    const double C48592 = C48143 + C48590;
    const double C11511 = C49182 * C1805;
    const double C23915 = C49182 * C1805;
    const double C11665 = C49182 * C1963;
    const double C12743 = C49172 * C1963;
    const double C24069 = C49182 * C1963;
    const double C29852 = C26650 * C1963;
    const double C32660 = C49172 * C1963;
    const double C12742 = C7916 * C1959;
    const double C32659 = C1086 * C1959;
    const double C10311 = C7916 * C2375;
    const double C16856 = C1086 * C2375;
    const double C18853 = C3885 * C2375;
    const double C25168 = C22512 * C2375;
    const double C18016 = C18012 * C9219;
    const double C21295 = C18012 * C47890;
    const double C35058 = C18012 * C23726;
    const double C48225 = C48224 + C48215;
    const double C1806 = (3 * (C48238 + C48201 * C48293) +
                          C48107 * (2 * C48298 + C48107 * C48303)) /
                         C47864;
    const double C1964 = (C48322 * (2 * C48298 + C48107 * C48303)) / C47864;
    const double C2385 = (C48238 + C48201 * C48293 + C48303 * C48330) / C47864;
    const double C48356 = C48156 + C48352;
    const double C17986 =
        (4 * (2 * C48322 * C48201 + C48322 * C48653) +
         C48322 *
             (3 * C48653 + C48322 * (2 * C48322 * C48220 +
                                     C48322 * (C48220 + C48261 * C48330)))) /
        C47864;
    const double C48615 = C48613 + C48608;
    const double C18244 =
        (4 * (2 * C48322 * C48573 + C48322 * C48656) +
         C48322 * (3 * C48656 +
                   C48322 * (2 * C48322 * C48607 +
                             C48322 * (C48607 +
                                       (C48107 * C48177 + C48254) * C48330)))) /
        C47864;
    const double C18262 = C18256 + C18257;
    const double C22405 = C22396 + C22397;
    const double C43383 = C43374 + C43375;
    const double C9302 = 4 * (2 * C48509 + C48107 * C48512) +
                         C48107 * (3 * C48512 + C48107 * C48580);
    const double C9392 = C48322 * (3 * C48512 + C48107 * C48580);
    const double C9860 = 2 * C48509 + C48107 * C48512 + C48580 * C48330;
    const double C10738 =
        2 * C48322 * C48580 + C48322 * (C48580 + C48614 * C48330);
    const double C18493 =
        5 * (3 * C48756 + C48322 * C48769) +
        C48322 * (4 * C48769 +
                  C48322 * (3 * C48767 +
                            C48322 * (2 * C48322 * C48193 +
                                      C48322 * (C48193 + C48213 * C48330))));
    const double C48243 = C48242 + C48241;
    const double C1810 =
        (3 * (C48140 + ae * C48298 + C48107 * C48302) +
         ae * (2 * C48298 + C48107 * C48303) +
         C48107 * (2 * C48302 + ae * C48303 +
                   C48107 * (C48156 + ae * C48107 * C48220 +
                             C48107 * (ae * C48220 + C48107 * C48180)))) /
        C47869;
    const double C1968 =
        ((zP - zQ) * (2 * C48302 + ae * C48303 +
                      C48107 * (C48156 + ae * C48107 * C48220 +
                                C48107 * (ae * C48220 + C48107 * C48180)))) /
        C47869;
    const double C2392 =
        (ae * C48238 + C48107 * C48140 + C48302 * std::pow(zP - zQ, 2)) /
        C47869;
    const double C2393 = (C48140 + ae * C48298 + C48107 * C48302 +
                          (C48156 + ae * C48107 * C48220 +
                           C48107 * (ae * C48220 + C48107 * C48180)) *
                              std::pow(zP - zQ, 2)) /
                         C47869;
    const double C3323 = (2 * C48322 * C48302 +
                          C48322 * (C48302 + (ae * C48220 + C48107 * C48180) *
                                                 std::pow(C48322, 2))) /
                         C47869;
    const double C2682 = C113 * C2384;
    const double C6683 = C3885 * C2384;
    const double C10315 = C7915 * C2384;
    const double C16860 = C1085 * C2384;
    const double C18851 = C3884 * C2384;
    const double C24952 = C22512 * C2384;
    const double C19057 = C3885 * C3319;
    const double C20404 = C113 * C3319;
    const double C25402 = C22512 * C3319;
    const double C1341 = C1323 + C1324;
    const double C8155 = C8137 + C8138;
    const double C1539 = C1521 + C1522;
    const double C6467 = C6455 + C6456;
    const double C8337 = C8319 + C8320;
    const double C12749 = C12738 + C12739;
    const double C25184 = C25172 + C25173;
    const double C2906 = C2884 + C2885;
    const double C19068 = C19059 + C19060;
    const double C10772 = C10753 + C10754;
    const double C17313 = C17294 + C17295;
    const double C10330 = C10305 + C10306;
    const double C10777 = C10763 + C10764;
    const double C16875 = C16850 + C16851;
    const double C19616 = C19611 + C19612;
    const double C25983 = C25974 + C25975;
    const double C9308 =
        (4 * (2 * C48294 + ae * C48296 + C48107 * C48345) +
         ae * (3 * C48296 + C48107 * C48346) +
         C48107 *
             (3 * C48345 + ae * C48346 +
              C48107 * (2 * C48339 + ae * C48341 +
                        C48107 * (C48152 + ae * C48107 * C48214 +
                                  C48107 * (ae * C48214 + C48107 * C48176))))) /
        C47869;
    const double C9398 =
        (C48322 *
         (3 * C48345 + ae * C48346 +
          C48107 * (2 * C48339 + ae * C48341 +
                    C48107 * (C48152 + ae * C48107 * C48214 +
                              C48107 * (ae * C48214 + C48107 * C48176))))) /
        C47869;
    const double C18505 = C18501 + C18502;
    const double C18500 = C18014 + C18015;
    const double C48187 = C48108 * C48185;
    const double C2857 =
        (2 * C48322 * C48161 + C48322 * (C48161 + C48185 * C48330)) / C47864;
    const double C48186 = C48108 * C48184;
    const double C48307 = C48107 * C48184;
    const double C2859 = (2 * C48322 * C48160 +
                          C48322 * (C48160 + C48184 * std::pow(C48322, 2))) /
                         C47869;
    const double C3762 =
        (3 * (C48160 + C48184 * C48330) +
         C48322 * (2 * C48322 * C48184 +
                   C48322 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48330))) /
        C47869;
    const double C48357 = C48107 * C48353;
    const double C17898 =
        (3 * (C48302 + C48353 * C48330) +
         C48322 * (2 * C48322 * C48353 +
                   C48322 * (C48353 + (ae * C48261 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48330))) /
        C47869;
    const double C17988 =
        (4 * (2 * C48322 * C48156 + C48322 * C48400) +
         C48322 * (3 * C48400 +
                   C48322 * (2 * C48322 * C48180 +
                             C48322 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48330)))) /
        C47869;
    const double C18013 = C18008 + C18009;
    const double C48381 = C48107 * C48379;
    const double C10280 =
        (2 * C48322 * C48345 + C48322 * (C48345 + C48379 * C48330)) / C47869;
    const double C11187 =
        (3 * (C48345 + C48379 * C48330) +
         C48322 * (2 * C48322 * C48379 +
                   C48322 * (C48379 + (C48176 + ae * C48107 * C48258 +
                                       C48107 * (ae * C48258 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48330))) /
        C47869;
    const double C18246 =
        (4 * (2 * C48322 * C48339 + C48322 * C48403) +
         C48322 * (3 * C48403 +
                   C48322 * (2 * C48322 * C48373 +
                             C48322 * (C48373 + (ae * C48258 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48330)))) /
        C47869;
    const double C18263 = C18258 + C18259;
    const double C22403 = C22392 + C22393;
    const double C43381 = C43370 + C43371;
    const double C18496 =
        (5 * (3 * C48397 + C48322 * C48410) +
         C48322 * (4 * C48410 +
                   C48322 * (3 * C48408 +
                             C48322 * (2 * C48322 * C48176 +
                                       C48322 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48330))))) /
        C47869;
    const double C48264 = C48263 + C48259;
    const double C48358 = C48107 * C48355;
    const double C10279 =
        (2 * C48322 * C48303 + C48322 * (C48303 + C48355 * C48330)) / C47864;
    const double C48382 = C48107 * C48380;
    const double C10740 =
        (2 * C48322 * C48346 + C48322 * (C48346 + C48380 * C48330)) / C47864;
    const double C167 = C48877 * C137;
    const double C423 = C48877 * C402;
    const double C2521 = C48877 * C959;
    const double C1304 =
        (2 * (C48107 * C48161 + C48430 * ae) +
         C48107 * (C48161 + C48107 * (C48107 * C48185 + C48257) +
                   C48107 * C48223 * ae) +
         (C48430 + C48223 * C48293) * ae) /
        C47864;
    const double C1502 =
        (C48322 * (C48161 + C48107 * (C48107 * C48185 + C48257) +
                   C48107 * C48223 * ae)) /
        C47864;
    const double C2674 =
        (C48107 * C48161 + C48430 * ae + (C48107 * C48185 + C48257) * C48330) /
        C47864;
    const double C48436 = C48434 + C48435;
    const double C9303 = 4 * (2 * C48516 + C48107 * C48519) +
                         C48107 * (3 * C48519 + C48107 * C48593);
    const double C9393 = C48322 * (3 * C48519 + C48107 * C48593);
    const double C10124 = 2 * C48516 + C48107 * C48519 + C48593 * C48330;
    const double C48618 = C48606 + C48616;
    const double C10765 = C7916 * C9864;
    const double C17306 = C1086 * C9864;
    const double C49148 = C48978 * C48972;
    const double C49186 = C49150 + C48978;
    const double C49152 = C48985 / C47870;
    const double C49149 = C48985 * C48972;
    const double C20269 = C49211 - (C48978 * C48974) / C47864;
    const double C47913 = C47904 - C47910;
    const double C47903 = C47898 * be;
    const double C37076 = C441 * C47925;
    const double C118 =
        (C47925 / C47870 + (0 * ae) / C47864) / C47870 - (0 * be) / C47864;
    const double C3889 = C47925 / C47870 - (0 * be) / C47864;
    const double C22516 = C47925 / C47870 + (0 * ae) / C47864;
    const double C15579 = C441 * C7919;
    const double C47902 = C47897 * ae;
    const double C1087 =
        ((-C47865 / C47864) / C47870 - (C47883 * be) / C47864) / C47870 -
        ((C47862 * ((-C47872) / C47870 - (C47897 * be) / C47864) + C23719) *
         be) /
            C47864 +
        (-C47884 / C47864) / C47870 - (0 * be) / C47864;
    const double C1088 =
        ((-C47872) / C47870 - (C47897 * be) / C47864) / C47870 -
        ((C47862 * ((-C47884 / C47864) / C47870 - (0 * be) / C47864) + C48790) *
         be) /
            C47864;
    const double C23725 = (-C47872) / C47870 - (C47897 * be) / C47864;
    const double C49154 = C49116 / C47864;
    const double C49192 = C49158 / C47870;
    const double C49193 = C49160 + C49124;
    const double C3882 = C49124 - C48791 / C47876;
    const double C49157 = C49120 / C47864;
    const double C5366 = C442 * C3880;
    const double C5358 = C2901 * C3880;
    const double C5732 = C3343 * C3880;
    const double C6103 = C2903 * C3880;
    const double C48036 = C48031 - C48034;
    const double C48011 = C48007 * ae;
    const double C22511 = (-C47993) / C47870 - (C48007 * be) / C47864;
    const double C48020 = C48016 * be;
    const double C26677 = C48044 * C597;
    const double C26671 = C48044 * C603;
    const double C26665 = C48044 * C596;
    const double C26883 = C48044 * C1295;
    const double C26877 = C48044 * C1300;
    const double C26871 = C48044 * C1294;
    const double C27065 = C48044 * C1493;
    const double C27059 = C48044 * C1498;
    const double C27053 = C48044 * C1492;
    const double C29851 = C48044 * C1959;
    const double C30077 = C48044 * C2375;
    const double C30067 = C48044 * C1500;
    const double C30061 = C48044 * C1494;
    const double C30645 = C48044 * C1962;
    const double C30639 = C48044 * C1958;
    const double C31193 = C48044 * C2373;
    const double C31187 = C48044 * C2381;
    const double C47411 = C48044 * C9864;
    const double C47829 = C48044 * C10274;
    const double C47823 = C48044 * C10276;
    const double C9218 =
        (C48044 / C47870 + (0 * ae) / C47864) / C47870 - (0 * be) / C47864;
    const double C11320 = C48044 / C47870 - (0 * be) / C47864;
    const double C23724 = C48044 / C47870 + (0 * ae) / C47864;
    const double C49177 = C49142 / C47864;
    const double C49199 = C49180 / C47870;
    const double C1143 = C1123 + C1124;
    const double C1137 = C1111 + C1112;
    const double C1134 = C1105 + C1106;
    const double C1131 = C1099 + C1100;
    const double C1128 = C1093 + C1094;
    const double C1345 = C1331 + C1332;
    const double C1342 = C1325 + C1326;
    const double C1339 = C1319 + C1320;
    const double C1543 = C1529 + C1530;
    const double C1540 = C1523 + C1524;
    const double C1537 = C1517 + C1518;
    const double C16874 = C16848 + C16849;
    const double C16871 = C16842 + C16843;
    const double C16868 = C16836 + C16837;
    const double C16865 = C16830 + C16831;
    const double C17318 = C17304 + C17305;
    const double C17315 = C17298 + C17299;
    const double C17312 = C17292 + C17293;
    const double C17309 = C17286 + C17287;
    const double C17742 = C17732 + C17733;
    const double C17739 = C17726 + C17727;
    const double C32669 = C32661 + C32662;
    const double C32666 = C32655 + C32656;
    const double C49200 = C49181 + C49146;
    const double C11313 = C49146 - C48941 / C47876;
    const double C49179 = C49143 / C47864;
    const double C11355 = C11311 * C130;
    const double C11347 = C11311 * C142;
    const double C11333 = C11311 * C141;
    const double C11325 = C11311 * C128;
    const double C11517 = C11311 * C276;
    const double C11509 = C11311 * C284;
    const double C11671 = C11311 * C408;
    const double C11663 = C11311 * C416;
    const double C14391 = C11311 * C417;
    const double C14383 = C11311 * C410;
    const double C14773 = C11311 * C712;
    const double C14765 = C11311 * C702;
    const double C15161 = C11311 * C953;
    const double C15153 = C11311 * C963;
    const double C7974 = C7955 + C7956;
    const double C7971 = C7949 + C7950;
    const double C7966 = C7939 + C7940;
    const double C7963 = C7933 + C7934;
    const double C7960 = C7927 + C7928;
    const double C7957 = C7921 + C7922;
    const double C8160 = C8147 + C8148;
    const double C8157 = C8141 + C8142;
    const double C8154 = C8135 + C8136;
    const double C8151 = C8129 + C8130;
    const double C8342 = C8329 + C8330;
    const double C8339 = C8323 + C8324;
    const double C8336 = C8317 + C8318;
    const double C8333 = C8311 + C8312;
    const double C10334 = C10313 + C10314;
    const double C10331 = C10307 + C10308;
    const double C10328 = C10301 + C10302;
    const double C10325 = C10295 + C10296;
    const double C10322 = C10289 + C10290;
    const double C10319 = C10283 + C10284;
    const double C10776 = C10761 + C10762;
    const double C10773 = C10755 + C10756;
    const double C10770 = C10749 + C10750;
    const double C10767 = C10743 + C10744;
    const double C11210 = C11201 + C11202;
    const double C11207 = C11195 + C11196;
    const double C12753 = C12746 + C12747;
    const double C12750 = C12740 + C12741;
    const double C18250 = C3344 * C9219;
    const double C20151 = C7798 + C7797;
    const double C18264 = C18260 * C9219;
    const double C22390 = C20168 + C20167;
    const double C3941 = C3931 + C3932;
    const double C2892 = C439 * C1089;
    const double C15591 = C439 * C7919;
    const double C37088 = C439 * C47925;
    const double C3332 = C2699 * C1089;
    const double C16005 = C2699 * C7919;
    const double C37502 = C2699 * C47925;
    const double C6251 = C4270 + C4269;
    const double C6692 = C4269 + C4270;
    const double C2878 = C2524 * C1089;
    const double C15585 = C2524 * C7919;
    const double C20558 = C2524 * C47890;
    const double C34321 = C2524 * C23726;
    const double C37082 = C2524 * C47925;
    const double C165 = C48877 * C145;
    const double C293 = C48877 * C282;
    const double C1118 = C49195 * C282;
    const double C3914 = C48940 * C282;
    const double C4076 = C49139 * C282;
    const double C7948 = C7909 * C282;
    const double C22541 = C48940 * C282;
    const double C22703 = C22505 * C282;
    const double C26688 = C48943 * C282;
    const double C425 = C48877 * C414;
    const double C4242 = C49139 * C414;
    const double C22869 = C22505 * C414;
    const double C2517 = C48877 * C965;
    const double C6678 = C49139 * C965;
    const double C24957 = C22505 * C965;
    const double C2697 = C2684 + C2685;
    const double C6705 = C6687 + C6688;
    const double C10332 = C10309 + C10310;
    const double C16877 = C16854 + C16855;
    const double C18860 = C18855 + C18856;
    const double C24963 = C24948 + C24949;
    const double C19069 = C19061 + C19062;
    const double C20409 = C20406 + C20407;
    const double C25424 = C25406 + C25407;
    const double C9305 =
        (4 * (2 * C48511 + C48107 * C48581 + C48512 * ae) +
         C48107 *
             (3 * C48581 +
              C48107 * (2 * C48573 +
                        C48107 * (C48137 + C48107 * (C48107 * C48153 + C48211) +
                                  C48107 * C48193 * ae) +
                        C48575 * ae) +
              C48580 * ae) +
         (3 * C48512 + C48107 * C48580) * ae) /
        C47864;
    const double C9395 =
        (C48322 *
         (3 * C48581 +
          C48107 * (2 * C48573 +
                    C48107 * (C48137 + C48107 * (C48107 * C48153 + C48211) +
                              C48107 * C48193 * ae) +
                    C48575 * ae) +
          C48580 * ae)) /
        C47864;
    const double C18508 = C18506 * C9219;
    const double C3940 = C3929 + C3930;
    const double C2891 = C440 * C1082;
    const double C2871 = C440 * C49159;
    const double C15590 = C440 * C49191;
    const double C15580 = C440 * C49159;
    const double C20555 = C440 * C48790;
    const double C34318 = C440 * C48790;
    const double C37087 = C440 * C48793;
    const double C37077 = C440 * C26653;
    const double C3331 = C2700 * C1082;
    const double C16004 = C2700 * C49191;
    const double C20925 = C2700 * C48790;
    const double C34688 = C2700 * C48790;
    const double C37501 = C2700 * C48793;
    const double C6693 = C4271 + C4272;
    const double C6674 = C4272 + C4271;
    const double C2895 = C2523 * C1081;
    const double C2877 = C2523 * C1082;
    const double C15594 = C2523 * C49204;
    const double C15584 = C2523 * C49191;
    const double C18003 = C2523 * C48780;
    const double C20557 = C2523 * C49117;
    const double C20547 = C2523 * C48790;
    const double C34320 = C2523 * C23719;
    const double C34310 = C2523 * C48790;
    const double C37091 = C2523 * C48785;
    const double C37081 = C2523 * C48793;
    const double C3349 = C3345 * C1081;
    const double C16008 = C3345 * C49204;
    const double C18251 = C3345 * C48780;
    const double C20927 = C3345 * C49117;
    const double C34690 = C3345 * C23719;
    const double C37505 = C3345 * C48785;
    const double C20152 = C7796 + C7795;
    const double C18265 = C18261 * C48780;
    const double C20931 = C18261 * C49117;
    const double C34694 = C18261 * C23719;
    const double C22391 = C20166 + C20165;
    const double C2681 = C48877 * C2386;
    const double C6680 = C48940 * C2386;
    const double C24959 = C48940 * C2386;
    const double C1338 = C1317 + C1318;
    const double C8152 = C8131 + C8132;
    const double C1536 = C1515 + C1516;
    const double C6465 = C6451 + C6452;
    const double C8334 = C8313 + C8314;
    const double C28239 = C28233 + C28234;
    const double C291 = C48877 * C270;
    const double C3920 = C48940 * C270;
    const double C22547 = C48940 * C270;
    const double C1122 = C49172 * C606;
    const double C4078 = C48940 * C606;
    const double C7952 = C49172 * C606;
    const double C22705 = C48940 * C606;
    const double C26692 = C26650 * C606;
    const double C4244 = C48940 * C708;
    const double C5224 = C48877 * C708;
    const double C22871 = C48940 * C708;
    const double C166 = C113 * C124;
    const double C290 = C113 * C263;
    const double C3919 = C3885 * C263;
    const double C22546 = C22512 * C263;
    const double C422 = C113 * C395;
    const double C1121 = C1086 * C598;
    const double C4077 = C3885 * C598;
    const double C7951 = C7916 * C598;
    const double C22704 = C22512 * C598;
    const double C26691 = C48044 * C598;
    const double C4243 = C3885 * C700;
    const double C5223 = C113 * C700;
    const double C22870 = C22512 * C700;
    const double C2520 = C113 * C951;
    const double C3766 = C2905 * C1089;
    const double C16417 = C2905 * C7919;
    const double C20562 = C2905 * C47890;
    const double C34325 = C2905 * C23726;
    const double C37914 = C2905 * C47925;
    const double C48594 = C48592 + C48587;
    const double C12751 = C12742 + C12743;
    const double C32668 = C32659 + C32660;
    const double C10333 = C10311 + C10312;
    const double C16878 = C16856 + C16857;
    const double C18859 = C18853 + C18854;
    const double C25182 = C25168 + C25169;
    const double C48246 = C48108 * C48225;
    const double C48251 = 3 * C48225;
    const double C48306 = ae * C48225;
    const double C48305 = C48107 * C48225;
    const double C1504 =
        ((zP - zQ) * (C48160 + ae * C48107 * C48225 +
                      C48107 * (ae * C48225 + C48107 * C48184))) /
        C47869;
    const double C12736 = C7916 * C1964;
    const double C29845 = C48044 * C1964;
    const double C32653 = C1086 * C1964;
    const double C10317 = C7916 * C2385;
    const double C16862 = C1086 * C2385;
    const double C18849 = C3885 * C2385;
    const double C25164 = C22512 * C2385;
    const double C30071 = C48044 * C2385;
    const double C48617 = C48107 * C48615;
    const double C10277 =
        (2 * C48322 * C48581 + C48322 * (C48581 + C48615 * C48330)) / C47864;
    const double C11183 =
        (3 * (C48581 + C48615 * C48330) +
         C48322 *
             (2 * C48322 * C48615 +
              C48322 * (C48615 + (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) *
                                     C48330))) /
        C47864;
    const double C18266 = C18262 * C9219;
    const double C10759 = C7916 * C9860;
    const double C17300 = C1086 * C9860;
    const double C47405 = C48044 * C9860;
    const double C612 =
        (C48126 + ae * C48129 + C48108 * C48140 + ae * C48107 * C48243 +
         C48107 * (ae * C48243 + C48107 * C48160)) /
        C47869;
    const double C714 = ((zP - zQ) * (ae * C48243 + C48107 * C48160)) / C47869;
    const double C1306 = (2 * (ae * C48243 + C48107 * C48160) +
                          ae * (C48243 + C48225 * std::pow(C48107, 2)) +
                          C48107 * (C48160 + ae * C48107 * C48225 +
                                    C48107 * (ae * C48225 + C48107 * C48184))) /
                         C47869;
    const double C135 = (3 * (C48234 + C48108 * C48238 + C48424 * ae) +
                         C48108 * (2 * C48238 + C48108 * C48243 + C48426 * ae) +
                         (2 * C48424 + C48108 * C48426) * ae) /
                        C47864;
    const double C271 =
        (C48107 * (2 * C48238 + C48108 * C48243 + C48426 * ae)) / C47864;
    const double C403 =
        (C48322 * (2 * C48238 + C48108 * C48243 + C48426 * ae)) / C47864;
    const double C605 =
        (C48234 + C48108 * C48238 + C48424 * ae + C48243 * C48293) / C47864;
    const double C707 = (C48322 * C48107 * C48243) / C47864;
    const double C958 =
        (C48234 + C48108 * C48238 + C48424 * ae + C48243 * C48330) / C47864;
    const double C1298 =
        (2 * C48107 * C48243 + C48107 * (C48243 + C48225 * C48293)) / C47864;
    const double C1496 = (C48322 * (C48243 + C48225 * C48293)) / C47864;
    const double C2851 =
        (2 * C48322 * C48243 + C48322 * (C48243 + C48225 * C48330)) / C47864;
    const double C11503 = C49182 * C1810;
    const double C23907 = C49182 * C1810;
    const double C11657 = C49182 * C1968;
    const double C12737 = C49172 * C1968;
    const double C24061 = C49182 * C1968;
    const double C29846 = C26650 * C1968;
    const double C32654 = C49172 * C1968;
    const double C2683 = C48877 * C2392;
    const double C6684 = C48940 * C2392;
    const double C10316 = C7909 * C2392;
    const double C16861 = C49195 * C2392;
    const double C18852 = C49139 * C2392;
    const double C24953 = C48940 * C2392;
    const double C25167 = C22505 * C2392;
    const double C30074 = C48943 * C2392;
    const double C10318 = C49172 * C2393;
    const double C16863 = C49172 * C2393;
    const double C18850 = C48940 * C2393;
    const double C25165 = C48940 * C2393;
    const double C30072 = C26650 * C2393;
    const double C19058 = C48940 * C3323;
    const double C20405 = C48877 * C3323;
    const double C25403 = C48940 * C3323;
    const double C3767 = C2906 * C1082;
    const double C16418 = C2906 * C49191;
    const double C18005 = C2906 * C48780;
    const double C20561 = C2906 * C49117;
    const double C20551 = C2906 * C48790;
    const double C34324 = C2906 * C23719;
    const double C34314 = C2906 * C48790;
    const double C37915 = C2906 * C48793;
    const double C14779 = C49182 * C9398;
    const double C41889 = C49182 * C9398;
    const double C18507 = C18505 * C48780;
    const double C48189 = C48169 + C48187;
    const double C48188 = C48170 + C48186;
    const double C2881 = C48877 * C2859;
    const double C48359 = C48356 + C48357;
    const double C18017 = C18013 * C48780;
    const double C21294 = C18013 * C48790;
    const double C35057 = C18013 * C48790;
    const double C48383 = C48371 + C48381;
    const double C11192 = C49172 * C10280;
    const double C17725 = C49172 * C10280;
    const double C22025 = C48940 * C10280;
    const double C43003 = C48940 * C10280;
    const double C47824 = C26650 * C10280;
    const double C18267 = C18263 * C48780;
    const double C48265 = C48108 * C48264;
    const double C48308 = C48264 * C48293;
    const double C3759 =
        (3 * (C48243 + C48225 * C48330) +
         C48322 * (2 * C48322 * C48225 + C48322 * (C48225 + C48264 * C48330))) /
        C47864;
    const double C48360 = C48354 + C48358;
    const double C48384 = C48369 + C48382;
    const double C125 = 5 * (3 * C48426 + C48108 * C48430) +
                        C48108 * (4 * C48430 + C48108 * C48436);
    const double C268 = C48107 * (4 * C48430 + C48108 * C48436);
    const double C400 = C48322 * (4 * C48430 + C48108 * C48436);
    const double C599 = 3 * C48426 + C48108 * C48430 + C48436 * C48293;
    const double C701 = C48322 * C48107 * C48436;
    const double C952 = 3 * C48426 + C48108 * C48430 + C48436 * C48330;
    const double C9544 = 5 * (3 * C48512 + C48107 * C48580) +
                         C48107 * (4 * C48580 + C48107 * C48618);
    const double C9630 = C48322 * (4 * C48580 + C48107 * C48618);
    const double C9861 = 3 * C48512 + C48107 * C48580 + C48618 * C48330;
    const double C49183 = C49148 / C47864;
    const double C49202 = C49186 / C47870;
    const double C49203 = C49187 + C49152;
    const double C20271 = C49152 - C48983 / C47876;
    const double C49185 = C49149 / C47864;
    const double C47907 = C47903 / C47864;
    const double C5363 = C439 * C3889;
    const double C31571 = C439 * C22516;
    const double C47906 = C47902 / C47864;
    const double C2894 = C2522 * C1087;
    const double C2888 = C443 * C1087;
    const double C2910 = C2902 * C1087;
    const double C2908 = C2900 * C1087;
    const double C3348 = C3344 * C1087;
    const double C3346 = C3342 * C1087;
    const double C3778 = C3775 * C1087;
    const double C2896 = C2524 * C1088;
    const double C2890 = C441 * C1088;
    const double C2876 = C2522 * C1088;
    const double C2868 = C443 * C1088;
    const double C3330 = C2701 * C1088;
    const double C3768 = C2907 * C1088;
    const double C34323 = C2907 * C23725;
    const double C34319 = C2522 * C23725;
    const double C34315 = C443 * C23725;
    const double C34311 = C3775 * C23725;
    const double C34307 = C2902 * C23725;
    const double C34303 = C2900 * C23725;
    const double C34693 = C18260 * C23725;
    const double C34689 = C3344 * C23725;
    const double C34685 = C3342 * C23725;
    const double C35060 = C18010 * C23725;
    const double C49213 = C49154 + C49205;
    const double C3881 = C49192 - (C48793 * C48776) / C47864;
    const double C31570 = C440 * C49193;
    const double C105 = C49193 / C47870 - C48791 / C49161;
    const double C5362 = C440 * C3882;
    const double C49206 = C49157 + C49192;
    const double C48015 = C48011 / C47864;
    const double C22548 = C22511 * C123;
    const double C22538 = C22511 * C133;
    const double C22534 = C22511 * C122;
    const double C22530 = C22511 * C131;
    const double C22526 = C22511 * C121;
    const double C22522 = C22511 * C129;
    const double C22518 = C22511 * C120;
    const double C22722 = C22511 * C266;
    const double C22718 = C22511 * C275;
    const double C22714 = C22511 * C265;
    const double C22710 = C22511 * C273;
    const double C22706 = C22511 * C264;
    const double C22888 = C22511 * C398;
    const double C22884 = C22511 * C407;
    const double C22880 = C22511 * C397;
    const double C22876 = C22511 * C405;
    const double C22872 = C22511 * C396;
    const double C24960 = C22511 * C950;
    const double C24950 = C22511 * C956;
    const double C24946 = C22511 * C949;
    const double C25178 = C22511 * C698;
    const double C25174 = C22511 * C705;
    const double C25170 = C22511 * C2374;
    const double C25166 = C22511 * C2384;
    const double C25408 = C22511 * C2848;
    const double C25404 = C22511 * C2853;
    const double C25396 = C22511 * C954;
    const double C25392 = C22511 * C948;
    const double C25386 = C22511 * C409;
    const double C25382 = C22511 * C399;
    const double C25972 = C22511 * C2380;
    const double C25968 = C22511 * C2372;
    const double C25964 = C22511 * C703;
    const double C25960 = C22511 * C697;
    const double C26528 = C22511 * C2849;
    const double C26524 = C22511 * C2855;
    const double C28235 = C22511 * C699;
    const double C43000 = C22511 * C3317;
    const double C42996 = C22511 * C3313;
    const double C43376 = C22511 * C3751;
    const double C43372 = C22511 * C3755;
    const double C48026 = C48020 / C47864;
    const double C26705 = C26677 + C26678;
    const double C26702 = C26671 + C26672;
    const double C26699 = C26665 + C26666;
    const double C26898 = C26883 + C26884;
    const double C26895 = C26877 + C26878;
    const double C26892 = C26871 + C26872;
    const double C27080 = C27065 + C27066;
    const double C27077 = C27059 + C27060;
    const double C27074 = C27053 + C27054;
    const double C29860 = C29851 + C29852;
    const double C30096 = C30077 + C30078;
    const double C30090 = C30067 + C30068;
    const double C30087 = C30061 + C30062;
    const double C30652 = C30645 + C30646;
    const double C30649 = C30639 + C30640;
    const double C31202 = C31193 + C31194;
    const double C31199 = C31187 + C31188;
    const double C11348 = C11320 * C1294;
    const double C11338 = C11320 * C1300;
    const double C11330 = C11320 * C1295;
    const double C11510 = C11320 * C1801;
    const double C11502 = C11320 * C1806;
    const double C11664 = C11320 * C1959;
    const double C11656 = C11320 * C1964;
    const double C14396 = C11320 * C1962;
    const double C14388 = C11320 * C1958;
    const double C14778 = C11320 * C9394;
    const double C14770 = C11320 * C9392;
    const double C15154 = C11320 * C9860;
    const double C15146 = C11320 * C9864;
    const double C23752 = C23724 * C1294;
    const double C23742 = C23724 * C1300;
    const double C23734 = C23724 * C1295;
    const double C23914 = C23724 * C1801;
    const double C23906 = C23724 * C1806;
    const double C24068 = C23724 * C1959;
    const double C24060 = C23724 * C1964;
    const double C41506 = C23724 * C1962;
    const double C41498 = C23724 * C1958;
    const double C41888 = C23724 * C9394;
    const double C41880 = C23724 * C9392;
    const double C42264 = C23724 * C9860;
    const double C42256 = C23724 * C9864;
    const double C49214 = C49177 + C49209;
    const double C11312 = C49199 - (C48943 * C48932) / C47864;
    const double C1146 = C1136 + C1137;
    const double C1145 = C1133 + C1134;
    const double C32868 = C1543 + C1544;
    const double C32865 = C1544 + C1543;
    const double C32867 = C1540 + C1541;
    const double C32866 = C1541 + C1540;
    const double C17723 = C16873 + C16874;
    const double C17722 = C16870 + C16871;
    const double C23755 = C49200 * C604;
    const double C23741 = C49200 * C611;
    const double C23733 = C49200 * C602;
    const double C23917 = C49200 * C1301;
    const double C23909 = C49200 * C1307;
    const double C24071 = C49200 * C1499;
    const double C24063 = C49200 * C1505;
    const double C41505 = C49200 * C1506;
    const double C41497 = C49200 * C1501;
    const double C41887 = C49200 * C1967;
    const double C41879 = C49200 * C1961;
    const double C42267 = C49200 * C2379;
    const double C42259 = C49200 * C2391;
    const double C9211 = C49200 / C47870 - C48941 / C49161;
    const double C11351 = C11313 * C604;
    const double C11337 = C11313 * C611;
    const double C11329 = C11313 * C602;
    const double C11513 = C11313 * C1301;
    const double C11505 = C11313 * C1307;
    const double C11667 = C11313 * C1499;
    const double C11659 = C11313 * C1505;
    const double C14395 = C11313 * C1506;
    const double C14387 = C11313 * C1501;
    const double C14777 = C11313 * C1967;
    const double C14769 = C11313 * C1961;
    const double C15157 = C11313 * C2379;
    const double C15149 = C11313 * C2391;
    const double C49210 = C49179 + C49199;
    const double C7976 = C7966 + C7967;
    const double C7975 = C7963 + C7964;
    const double C12951 = C8341 + C8342;
    const double C12948 = C8342 + C8341;
    const double C12950 = C8338 + C8339;
    const double C12949 = C8339 + C8338;
    const double C11190 = C10328 + C10329;
    const double C11189 = C10325 + C10326;
    const double C22388 = C20151 * C9219;
    const double C39525 = C20151 * C23725;
    const double C22401 = C22390 * C9219;
    const double C3338 = C2697 * C1088;
    const double C20928 = C2697 * C47890;
    const double C34691 = C2697 * C23726;
    const double C19066 = C6705 + C6706;
    const double C19055 = C6706 + C6705;
    const double C20932 = C20409 * C47890;
    const double C34695 = C20409 * C23726;
    const double C14771 = C49182 * C9395;
    const double C41881 = C49182 * C9395;
    const double C20164 = C20152 * C49117;
    const double C22389 = C20152 * C48780;
    const double C39526 = C20152 * C23719;
    const double C22402 = C22391 * C48780;
    const double C2695 = C2680 + C2681;
    const double C6701 = C6679 + C6680;
    const double C24968 = C24958 + C24959;
    const double C177 = C166 + C167;
    const double C305 = C290 + C291;
    const double C3937 = C3919 + C3920;
    const double C22564 = C22546 + C22547;
    const double C437 = C422 + C423;
    const double C1142 = C1121 + C1122;
    const double C4099 = C4077 + C4078;
    const double C7972 = C7951 + C7952;
    const double C22726 = C22704 + C22705;
    const double C26712 = C26691 + C26692;
    const double C4265 = C4243 + C4244;
    const double C5226 = C5223 + C5224;
    const double C22892 = C22870 + C22871;
    const double C2527 = C2520 + C2521;
    const double C9306 =
        (4 * (2 * C48518 + C48107 * C48594 + C48519 * ae) +
         C48107 *
             (3 * C48594 +
              C48107 * (2 * C48586 +
                        C48107 * (C48165 +
                                  C48107 * (C48107 * C48108 * C48177 + C48259) +
                                  C48107 * C48255 * ae) +
                        C48588 * ae) +
              C48593 * ae) +
         (3 * C48519 + C48107 * C48593) * ae) /
        C47864;
    const double C9396 =
        (C48322 *
         (3 * C48594 +
          C48107 *
              (2 * C48586 +
               C48107 * (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                         C48107 * C48255 * ae) +
               C48588 * ae) +
          C48593 * ae)) /
        C47864;
    const double C10125 =
        (2 * C48518 + C48107 * C48594 + C48519 * ae +
         (2 * C48586 +
          C48107 * (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                    C48107 * C48255 * ae) +
          C48588 * ae) *
             C48330) /
        C47864;
    const double C10278 =
        (2 * C48322 * C48594 +
         C48322 *
             (C48594 + (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                        C48107 * C48255 * ae) *
                           C48330)) /
        C47864;
    const double C48248 = C48245 + C48246;
    const double C48309 = C48306 + C48307;
    const double C2388 = (C48107 * C48243 + C48305 * C48330) / C47864;
    const double C3321 =
        (2 * C48322 * C48305 + C48322 * (C48305 + C48107 * C48264 * C48330)) /
        C47864;
    const double C1510 = C49172 * C1504;
    const double C6448 = C48940 * C1504;
    const double C8308 = C49172 * C1504;
    const double C27048 = C26650 * C1504;
    const double C28230 = C48940 * C1504;
    const double C48619 = C48601 + C48617;
    const double C11198 = C49172 * C10277;
    const double C17731 = C49172 * C10277;
    const double C22021 = C48940 * C10277;
    const double C42999 = C48940 * C10277;
    const double C47830 = C26650 * C10277;
    const double C1114 = C49172 * C612;
    const double C1314 = C49195 * C612;
    const double C4082 = C48940 * C612;
    const double C7944 = C49172 * C612;
    const double C8128 = C7909 * C612;
    const double C11343 = C11313 * C612;
    const double C22709 = C48940 * C612;
    const double C23747 = C49200 * C612;
    const double C26684 = C26650 * C612;
    const double C26868 = C48943 * C612;
    const double C1512 = C49195 * C714;
    const double C2687 = C48877 * C714;
    const double C4248 = C48940 * C714;
    const double C6450 = C49139 * C714;
    const double C8310 = C7909 * C714;
    const double C22875 = C48940 * C714;
    const double C27050 = C48943 * C714;
    const double C28232 = C22505 * C714;
    const double C1312 = C49172 * C1306;
    const double C8126 = C49172 * C1306;
    const double C11341 = C49182 * C1306;
    const double C23745 = C49182 * C1306;
    const double C26866 = C26650 * C1306;
    const double C162 = C113 * C135;
    const double C3917 = C3884 * C135;
    const double C22544 = C22511 * C135;
    const double C292 = C113 * C271;
    const double C1117 = C1085 * C271;
    const double C3913 = C3885 * C271;
    const double C4075 = C3884 * C271;
    const double C7947 = C7915 * C271;
    const double C22540 = C22512 * C271;
    const double C22702 = C22511 * C271;
    const double C424 = C113 * C403;
    const double C4241 = C3884 * C403;
    const double C22868 = C22511 * C403;
    const double C1113 = C1086 * C605;
    const double C1313 = C1085 * C605;
    const double C4081 = C3885 * C605;
    const double C7943 = C7916 * C605;
    const double C8127 = C7915 * C605;
    const double C22708 = C22512 * C605;
    const double C26683 = C48044 * C605;
    const double C1511 = C1085 * C707;
    const double C2686 = C113 * C707;
    const double C4247 = C3885 * C707;
    const double C6449 = C3884 * C707;
    const double C8309 = C7915 * C707;
    const double C22874 = C22512 * C707;
    const double C28231 = C22511 * C707;
    const double C2516 = C113 * C958;
    const double C6677 = C3884 * C958;
    const double C24956 = C22511 * C958;
    const double C1311 = C1086 * C1298;
    const double C8125 = C7916 * C1298;
    const double C11340 = C11320 * C1298;
    const double C23744 = C23724 * C1298;
    const double C26865 = C48044 * C1298;
    const double C1509 = C1086 * C1496;
    const double C6447 = C3885 * C1496;
    const double C8307 = C7916 * C1496;
    const double C27047 = C48044 * C1496;
    const double C28229 = C22512 * C1496;
    const double C2880 = C113 * C2851;
    const double C12748 = C12736 + C12737;
    const double C29857 = C29845 + C29846;
    const double C32665 = C32653 + C32654;
    const double C2696 = C2682 + C2683;
    const double C6703 = C6683 + C6684;
    const double C10335 = C10315 + C10316;
    const double C16880 = C16860 + C16861;
    const double C18858 = C18851 + C18852;
    const double C24965 = C24952 + C24953;
    const double C10336 = C10317 + C10318;
    const double C16881 = C16862 + C16863;
    const double C18857 = C18849 + C18850;
    const double C25180 = C25164 + C25165;
    const double C30093 = C30071 + C30072;
    const double C19067 = C19057 + C19058;
    const double C20408 = C20404 + C20405;
    const double C25422 = C25402 + C25403;
    const double C138 = (5 * (3 * C48141 + C48108 * C48161) +
                         C48108 * (4 * C48161 + C48108 * C48189)) /
                        C47864;
    const double C279 = (C48107 * (4 * C48161 + C48108 * C48189) +
                         (4 * C48430 + C48108 * C48436) * ae) /
                        C47864;
    const double C411 = (C48322 * (4 * C48161 + C48108 * C48189)) / C47864;
    const double C608 =
        (3 * C48141 + C48108 * C48161 +
         C48107 * (C48107 * C48189 + C48436 * ae) + C48107 * C48436 * ae) /
        C47864;
    const double C710 = (C48322 * (C48107 * C48189 + C48436 * ae)) / C47864;
    const double C961 =
        (3 * C48141 + C48108 * C48161 + C48189 * C48330) / C47864;
    const double C146 =
        (5 * (3 * C48160 + ae * C48161 + C48108 * C48188) +
         ae * (4 * C48161 + C48108 * C48189) +
         C48108 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C281 =
        (ae * (3 * (C48122 * C48123 * C48191 + C48108 * C48201 + C48196 * ae) +
               C48108 * (2 * C48201 +
                         C48108 * (C48198 +
                                   C48108 * (C48108 * C48145 * C48146 * C48191 +
                                             C48193 * ae) +
                                   C48108 * C48193 * ae) +
                         C48199 * ae) +
               (2 * C48196 + C48108 * C48199) * ae) +
         C48107 * (3 * C48160 + ae * C48161 + C48108 * C48188)) /
        C47869;
    const double C286 =
        (ae * (4 * (2 * C48201 + C48108 * C48225 + C48199 * ae) +
               C48108 * (3 * C48225 +
                         C48108 * (2 * C48220 +
                                   C48108 * (C48214 +
                                             C48108 * (C48108 * C48167 *
                                                           C48168 * C48191 +
                                                       C48213 * ae) +
                                             C48108 * C48213 * ae) +
                                   C48219 * ae) +
                         C48223 * ae) +
               (3 * C48199 + C48108 * C48223) * ae) +
         C48107 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C413 =
        ((zP - zQ) * (3 * C48160 + ae * C48161 + C48108 * C48188)) / C47869;
    const double C418 =
        ((zP - zQ) *
         (4 * C48188 + ae * C48189 +
          C48108 * (3 * C48184 + ae * C48185 +
                    C48108 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C966 = (2 * C48140 + ae * C48141 + C48108 * C48160 +
                         C48188 * std::pow(zP - zQ, 2)) /
                        C47869;
    const double C967 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 +
         (3 * C48184 + ae * C48185 +
          C48108 *
              (2 * C48180 + ae * C48181 +
               C48108 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(zP - zQ, 2)) /
        C47869;
    const double C2862 =
        (2 * C48322 * C48188 +
         C48322 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                std::pow(C48322, 2))) /
        C47869;
    const double C10127 =
        (2 * C48302 + ae * C48303 + C48107 * C48359 +
         (2 * C48353 + ae * C48355 +
          C48107 *
              (C48180 + ae * C48107 * C48261 +
               C48107 * (ae * C48261 +
                         C48107 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             C48330) /
        C47869;
    const double C10281 =
        (2 * C48322 * C48359 +
         C48322 * (C48359 + (C48180 + ae * C48107 * C48261 +
                             C48107 * (ae * C48261 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48330)) /
        C47869;
    const double C9866 =
        (2 * C48294 + ae * C48296 + C48107 * C48345 + C48383 * C48330) / C47869;
    const double C9867 =
        (3 * C48345 + ae * C48346 + C48107 * C48383 +
         (3 * C48379 + ae * C48380 +
          C48107 *
              (2 * C48373 + ae * C48375 +
               C48107 * (C48176 + ae * C48107 * C48258 +
                         C48107 * (ae * C48258 + C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             C48330) /
        C47869;
    const double C10741 =
        (2 * C48322 * C48383 +
         C48322 * (C48383 + (2 * C48373 + ae * C48375 +
                             C48107 * (C48176 + ae * C48107 * C48258 +
                                       C48107 * (ae * C48258 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48330)) /
        C47869;
    const double C11205 = C11191 + C11192;
    const double C17738 = C17724 + C17725;
    const double C22029 = C22024 + C22025;
    const double C43007 = C43002 + C43003;
    const double C47837 = C47823 + C47824;
    const double C48266 = C48252 + C48265;
    const double C48310 = C48225 + C48308;
    const double C9309 =
        (4 * (2 * C48302 + ae * C48303 + C48107 * C48359) +
         ae * (3 * C48303 + C48107 * C48360) +
         C48107 *
             (3 * C48359 + ae * C48360 +
              C48107 *
                  (2 * C48353 + ae * C48355 +
                   C48107 * (C48180 + ae * C48107 * C48261 +
                             C48107 * (ae * C48261 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C9399 =
        (C48322 *
         (3 * C48359 + ae * C48360 +
          C48107 * (2 * C48353 + ae * C48355 +
                    C48107 * (C48180 + ae * C48107 * C48261 +
                              C48107 * (ae * C48261 +
                                        C48107 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C9307 = (4 * (2 * C48298 + C48107 * C48303) +
                          C48107 * (3 * C48303 + C48107 * C48360)) /
                         C47864;
    const double C9397 = (C48322 * (3 * C48303 + C48107 * C48360)) / C47864;
    const double C10126 =
        (2 * C48298 + C48107 * C48303 + C48360 * C48330) / C47864;
    const double C9547 =
        (5 * (3 * C48345 + ae * C48346 + C48107 * C48383) +
         ae * (4 * C48346 + C48107 * C48384) +
         C48107 *
             (4 * C48383 + ae * C48384 +
              C48107 *
                  (3 * C48379 + ae * C48380 +
                   C48107 * (2 * C48373 + ae * C48375 +
                             C48107 * (C48176 + ae * C48107 * C48258 +
                                       C48107 * (ae * C48258 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C9633 =
        (C48322 *
         (4 * C48383 + ae * C48384 +
          C48107 * (3 * C48379 + ae * C48380 +
                    C48107 * (2 * C48373 + ae * C48375 +
                              C48107 * (C48176 + ae * C48107 * C48258 +
                                        C48107 * (ae * C48258 +
                                                  C48107 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C9546 = (5 * (3 * C48296 + C48107 * C48346) +
                          C48107 * (4 * C48346 + C48107 * C48384)) /
                         C47864;
    const double C9632 = (C48322 * (4 * C48346 + C48107 * C48384)) / C47864;
    const double C9865 =
        (3 * C48296 + C48107 * C48346 + C48384 * C48330) / C47864;
    const double C49215 = C49183 + C49211;
    const double C20270 = C49202 - (C48985 * C48974) / C47864;
    const double C17811 = C49203 / C47870 - C48983 / C49161;
    const double C49212 = C49185 + C49202;
    const double C47909 = C47906 - C47885;
    const double C3764 = C2910 + C2911;
    const double C35056 = C34311 + C34312;
    const double C35055 = C34307 + C34308;
    const double C31574 = C442 * C49213;
    const double C31566 = C2901 * C49213;
    const double C31940 = C3343 * C49213;
    const double C32311 = C2903 * C49213;
    const double C102 =
        (C49204 + 2 * C48785) / C47870 - (C49213 * C48776) / C47864;
    const double C5368 = C440 * C3881;
    const double C5360 = C442 * C3881;
    const double C5734 = C2700 * C3881;
    const double C6101 = C2523 * C3881;
    const double C31576 = C440 * C49206;
    const double C31568 = C442 * C49206;
    const double C31942 = C2700 * C49206;
    const double C32309 = C2523 * C49206;
    const double C103 =
        (C49191 + 2 * C48793 + C49213) / C47870 - (C49206 * C48776) / C47864;
    const double C104 = (C49159 + C48790 / C47864 + C49206) / C47870 -
                        (C49193 * C48776) / C47864;
    const double C48019 = C48015 - C47996;
    const double C22565 = C22548 + C22549;
    const double C22560 = C22538 + C22539;
    const double C22558 = C22534 + C22535;
    const double C22556 = C22530 + C22531;
    const double C22554 = C22526 + C22527;
    const double C22552 = C22522 + C22523;
    const double C22550 = C22518 + C22519;
    const double C22735 = C22722 + C22723;
    const double C22733 = C22718 + C22719;
    const double C22731 = C22714 + C22715;
    const double C22729 = C22710 + C22711;
    const double C22727 = C22706 + C22707;
    const double C22901 = C22888 + C22889;
    const double C22899 = C22884 + C22885;
    const double C22897 = C22880 + C22881;
    const double C22895 = C22876 + C22877;
    const double C22893 = C22872 + C22873;
    const double C24969 = C24960 + C24961;
    const double C24964 = C24950 + C24951;
    const double C24962 = C24946 + C24947;
    const double C25187 = C25178 + C25179;
    const double C25185 = C25174 + C25175;
    const double C25183 = C25170 + C25171;
    const double C25181 = C25166 + C25167;
    const double C25425 = C25408 + C25409;
    const double C25423 = C25404 + C25405;
    const double C25420 = C25396 + C25397;
    const double C25418 = C25392 + C25393;
    const double C25416 = C25386 + C25387;
    const double C25414 = C25382 + C25383;
    const double C25982 = C25972 + C25973;
    const double C25980 = C25968 + C25969;
    const double C25978 = C25964 + C25965;
    const double C25976 = C25960 + C25961;
    const double C26535 = C26528 + C26529;
    const double C26533 = C26524 + C26525;
    const double C28240 = C28235 + C28236;
    const double C43006 = C43000 + C43001;
    const double C43004 = C42996 + C42997;
    const double C43384 = C43376 + C43377;
    const double C43382 = C43372 + C43373;
    const double C11368 = C11348 + C11349;
    const double C11363 = C11338 + C11339;
    const double C11359 = C11330 + C11331;
    const double C11522 = C11510 + C11511;
    const double C11518 = C11502 + C11503;
    const double C11676 = C11664 + C11665;
    const double C11672 = C11656 + C11657;
    const double C14405 = C14396 + C14397;
    const double C14401 = C14388 + C14389;
    const double C14787 = C14778 + C14779;
    const double C23772 = C23752 + C23753;
    const double C23767 = C23742 + C23743;
    const double C23763 = C23734 + C23735;
    const double C23926 = C23914 + C23915;
    const double C23922 = C23906 + C23907;
    const double C24080 = C24068 + C24069;
    const double C24076 = C24060 + C24061;
    const double C41515 = C41506 + C41507;
    const double C41511 = C41498 + C41499;
    const double C41897 = C41888 + C41889;
    const double C23759 = C49214 * C130;
    const double C23751 = C49214 * C142;
    const double C23737 = C49214 * C141;
    const double C23729 = C49214 * C128;
    const double C23921 = C49214 * C276;
    const double C23913 = C49214 * C284;
    const double C24075 = C49214 * C408;
    const double C24067 = C49214 * C416;
    const double C41501 = C49214 * C417;
    const double C41493 = C49214 * C410;
    const double C41883 = C49214 * C712;
    const double C41875 = C49214 * C702;
    const double C42271 = C49214 * C953;
    const double C42263 = C49214 * C963;
    const double C9208 =
        (C49207 + 2 * C48936) / C47870 - (C49214 * C48932) / C47864;
    const double C11353 = C11312 * C274;
    const double C11345 = C11312 * C283;
    const double C11335 = C11312 * C284;
    const double C11327 = C11312 * C276;
    const double C11515 = C11312 * C602;
    const double C11507 = C11312 * C611;
    const double C11669 = C11312 * C704;
    const double C11661 = C11312 * C713;
    const double C14393 = C11312 * C712;
    const double C14385 = C11312 * C702;
    const double C14775 = C11312 * C1506;
    const double C14767 = C11312 * C1501;
    const double C15159 = C11312 * C2378;
    const double C15151 = C11312 * C2390;
    const double C1147 = C1145 + C1135;
    const double C32872 = C1542 + C32868;
    const double C32869 = C32865 + C1542;
    const double C32871 = C1539 + C32867;
    const double C32870 = C32866 + C1539;
    const double C17737 = C17723 + C16875;
    const double C17736 = C17722 + C16872;
    const double C23757 = C49210 * C274;
    const double C23749 = C49210 * C283;
    const double C23739 = C49210 * C284;
    const double C23731 = C49210 * C276;
    const double C23919 = C49210 * C602;
    const double C23911 = C49210 * C611;
    const double C24073 = C49210 * C704;
    const double C24065 = C49210 * C713;
    const double C41503 = C49210 * C712;
    const double C41495 = C49210 * C702;
    const double C41885 = C49210 * C1506;
    const double C41877 = C49210 * C1501;
    const double C42269 = C49210 * C2378;
    const double C42261 = C49210 * C2390;
    const double C9209 =
        (C49195 + 2 * C48943 + C49214) / C47870 - (C49210 * C48932) / C47864;
    const double C9210 = (C49172 + C48940 / C47864 + C49210) / C47870 -
                         (C49200 * C48932) / C47864;
    const double C7977 = C7975 + C7965;
    const double C12955 = C8340 + C12951;
    const double C12952 = C12948 + C8340;
    const double C12954 = C8337 + C12950;
    const double C12953 = C12949 + C8337;
    const double C11204 = C11190 + C10330;
    const double C11203 = C11189 + C10327;
    const double C20153 = C19055 * C47890;
    const double C39527 = C19055 * C23726;
    const double C14783 = C14770 + C14771;
    const double C41893 = C41880 + C41881;
    const double C22400 = C22388 + C22389;
    const double C39529 = C39525 + C39526;
    const double C22407 = C22401 + C22402;
    const double C3340 = C2695 * C1089;
    const double C16011 = C2695 * C7919;
    const double C37508 = C2695 * C47925;
    const double C5371 = C437 * C3889;
    const double C31579 = C437 * C22516;
    const double C5737 = C5226 * C3889;
    const double C31945 = C5226 * C22516;
    const double C2898 = C2527 * C1089;
    const double C6098 = C2527 * C3889;
    const double C15597 = C2527 * C7919;
    const double C32306 = C2527 * C22516;
    const double C37094 = C2527 * C47925;
    const double C48249 = C48248 + C48247;
    const double C2394 =
        (ae * C48243 + C48107 * C48160 + C48309 * std::pow(zP - zQ, 2)) /
        C47869;
    const double C2395 =
        (C48160 + ae * C48305 + C48107 * C48309 +
         (C48184 + ae * C48107 * C48264 +
          C48107 *
              (ae * C48264 +
               C48107 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(zP - zQ, 2)) /
        C47869;
    const double C3324 =
        (2 * C48322 * C48309 +
         C48322 * (C48309 + (ae * C48264 +
                             C48107 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                std::pow(C48322, 2))) /
        C47869;
    const double C2678 = C113 * C2388;
    const double C6675 = C3885 * C2388;
    const double C24954 = C22512 * C2388;
    const double C48620 = C48619 + C48604;
    const double C11208 = C11197 + C11198;
    const double C17741 = C17730 + C17731;
    const double C22027 = C22020 + C22021;
    const double C43005 = C42998 + C42999;
    const double C47840 = C47829 + C47830;
    const double C175 = C162 + C163;
    const double C3936 = C3917 + C3918;
    const double C22563 = C22544 + C22545;
    const double C306 = C292 + C293;
    const double C1140 = C1117 + C1118;
    const double C3934 = C3913 + C3914;
    const double C4098 = C4075 + C4076;
    const double C7970 = C7947 + C7948;
    const double C22561 = C22540 + C22541;
    const double C22725 = C22702 + C22703;
    const double C438 = C424 + C425;
    const double C4264 = C4241 + C4242;
    const double C22891 = C22868 + C22869;
    const double C1138 = C1113 + C1114;
    const double C1336 = C1313 + C1314;
    const double C4101 = C4081 + C4082;
    const double C7968 = C7943 + C7944;
    const double C8150 = C8127 + C8128;
    const double C22728 = C22708 + C22709;
    const double C26708 = C26683 + C26684;
    const double C1534 = C1511 + C1512;
    const double C2698 = C2686 + C2687;
    const double C4267 = C4247 + C4248;
    const double C6464 = C6449 + C6450;
    const double C8332 = C8309 + C8310;
    const double C22894 = C22874 + C22875;
    const double C28238 = C28231 + C28232;
    const double C2525 = C2516 + C2517;
    const double C6700 = C6677 + C6678;
    const double C24967 = C24956 + C24957;
    const double C1335 = C1311 + C1312;
    const double C8149 = C8125 + C8126;
    const double C11364 = C11340 + C11341;
    const double C23768 = C23744 + C23745;
    const double C26889 = C26865 + C26866;
    const double C1533 = C1509 + C1510;
    const double C6463 = C6447 + C6448;
    const double C8331 = C8307 + C8308;
    const double C27071 = C27047 + C27048;
    const double C28237 = C28229 + C28230;
    const double C2904 = C2880 + C2881;
    const double C3339 = C2696 * C1082;
    const double C16010 = C2696 * C49191;
    const double C20929 = C2696 * C48790;
    const double C34692 = C2696 * C48790;
    const double C37507 = C2696 * C48793;
    const double C19065 = C6703 + C6704;
    const double C19056 = C6704 + C6703;
    const double C20933 = C20408 * C48790;
    const double C34696 = C20408 * C48790;
    const double C289 = C48877 * C281;
    const double C3916 = C48940 * C281;
    const double C22543 = C48940 * C281;
    const double C421 = C48877 * C413;
    const double C2519 = C48877 * C966;
    const double C10766 = C49172 * C9866;
    const double C15147 = C49182 * C9866;
    const double C17307 = C49172 * C9866;
    const double C42257 = C49182 * C9866;
    const double C47412 = C26650 * C9866;
    const double C48267 = C48266 + C48256;
    const double C1811 =
        (3 * (C48160 + ae * C48305 + C48107 * C48309) +
         ae * (2 * C48305 + C48107 * C48310) +
         C48107 *
             (2 * C48309 + ae * C48310 +
              C48107 *
                  (C48184 + ae * C48107 * C48264 +
                   C48107 * (ae * C48264 +
                             C48107 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C1969 =
        ((zP - zQ) *
         (2 * C48309 + ae * C48310 +
          C48107 * (C48184 + ae * C48107 * C48264 +
                    C48107 * (ae * C48264 +
                              C48107 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C1808 = (3 * (C48243 + C48225 * C48293) +
                          C48107 * (2 * C48305 + C48107 * C48310)) /
                         C47864;
    const double C1966 = (C48322 * (2 * C48305 + C48107 * C48310)) / C47864;
    const double C2389 = (C48243 + C48225 * C48293 + C48310 * C48330) / C47864;
    const double C17808 =
        (C49208 + 2 * C48978) / C47870 - (C49215 * C48974) / C47864;
    const double C17809 =
        (C49197 + 2 * C48985 + C49215) / C47870 - (C49212 * C48974) / C47864;
    const double C17810 = (C49175 + C48982 / C47864 + C49212) / C47870 -
                          (C49203 * C48974) / C47864;
    const double C20163 = C20151 * C47909;
    const double C20560 = C2907 * C47909;
    const double C20556 = C2522 * C47909;
    const double C20552 = C443 * C47909;
    const double C20548 = C3775 * C47909;
    const double C20544 = C2902 * C47909;
    const double C20540 = C2900 * C47909;
    const double C20930 = C18260 * C47909;
    const double C20926 = C3344 * C47909;
    const double C20922 = C3342 * C47909;
    const double C21297 = C18010 * C47909;
    const double C47912 = C47909 / C47870;
    const double C47911 = C47862 * C47909;
    const double C3773 = C3764 + C2876;
    const double C35062 = C35056 + C34313;
    const double C35061 = C35055 + C34309;
    const double C48025 = C48019 / C47870;
    const double C48024 = C47940 * C48019;
    const double C22568 = C22558 + C22559;
    const double C22567 = C22556 + C22557;
    const double C22566 = C22554 + C22555;
    const double C25413 = C22900 + C22901;
    const double C25390 = C22901 + C22900;
    const double C25412 = C22898 + C22899;
    const double C25391 = C22899 + C22898;
    const double C28033 = C22897 + C22896;
    const double C28436 = C22896 + C22897;
    const double C25410 = C24965 + C24964;
    const double C25401 = C24964 + C24965;
    const double C25411 = C24963 + C24962;
    const double C25400 = C24962 + C24963;
    const double C26519 = C25420 + C25421;
    const double C26518 = C25418 + C25419;
    const double C43368 = C26535 + C26534;
    const double C43369 = C26533 + C26532;
    const double C17745 = C17737 * C48780;
    const double C17744 = C17736 * C9219;
    const double C11212 = C11204 * C48780;
    const double C11211 = C11203 * C9219;
    const double C39530 = C39529 + C39527;
    const double C613 =
        (2 * C48140 + ae * C48141 + C48108 * C48160 + ae * C48107 * C48249 +
         C48107 * (ae * C48249 + C48107 * C48188)) /
        C47869;
    const double C715 = ((zP - zQ) * (ae * C48249 + C48107 * C48188)) / C47869;
    const double C136 = (4 * (2 * C48238 + C48108 * C48243 + C48426 * ae) +
                         C48108 * (3 * C48243 + C48108 * C48249 + C48430 * ae) +
                         (3 * C48426 + C48108 * C48430) * ae) /
                        C47864;
    const double C269 =
        (C48107 * (3 * C48243 + C48108 * C48249 + C48430 * ae)) / C47864;
    const double C401 =
        (C48322 * (3 * C48243 + C48108 * C48249 + C48430 * ae)) / C47864;
    const double C607 =
        (2 * C48238 + C48108 * C48243 + C48426 * ae + C48249 * C48293) / C47864;
    const double C709 = (C48322 * C48107 * C48249) / C47864;
    const double C960 =
        (2 * C48238 + C48108 * C48243 + C48426 * ae + C48249 * C48330) / C47864;
    const double C2679 = C48877 * C2394;
    const double C6676 = C48940 * C2394;
    const double C24955 = C48940 * C2394;
    const double C9545 =
        (5 * (3 * C48581 + C48107 * C48620 + C48580 * ae) +
         C48107 *
             (4 * C48620 +
              C48107 *
                  (3 * C48615 +
                   C48107 *
                       (2 * C48607 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) +
                        C48609 * ae) +
                   C48614 * ae) +
              C48618 * ae) +
         (4 * C48580 + C48107 * C48618) * ae) /
        C47864;
    const double C9631 =
        (C48322 *
         (4 * C48620 +
          C48107 * (3 * C48615 +
                    C48107 * (2 * C48607 +
                              C48107 * (C48153 +
                                        C48107 * (C48107 * C48177 + C48254) +
                                        C48107 * C48213 * ae) +
                              C48609 * ae) +
                    C48614 * ae) +
          C48618 * ae)) /
        C47864;
    const double C9862 =
        (2 * C48511 + C48107 * C48581 + C48512 * ae + C48620 * C48330) / C47864;
    const double C9863 =
        (3 * C48581 + C48107 * C48620 + C48580 * ae +
         (3 * C48615 +
          C48107 * (2 * C48607 +
                    C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                              C48107 * C48213 * ae) +
                    C48609 * ae) +
          C48614 * ae) *
             C48330) /
        C47864;
    const double C10739 =
        (2 * C48322 * C48620 +
         C48322 *
             (C48620 + (2 * C48607 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) +
                        C48609 * ae) *
                           C48330)) /
        C47864;
    const double C3942 = C3933 + C3934;
    const double C22569 = C22560 + C22561;
    const double C2893 = C438 * C49159;
    const double C5370 = C438 * C3882;
    const double C5364 = C438 * C49176;
    const double C15592 = C438 * C49159;
    const double C31578 = C438 * C49193;
    const double C31572 = C438 * C49176;
    const double C37089 = C438 * C26653;
    const double C1148 = C1146 + C1138;
    const double C7978 = C7976 + C7968;
    const double C3333 = C2698 * C49159;
    const double C5736 = C2698 * C3882;
    const double C16006 = C2698 * C49159;
    const double C31944 = C2698 * C49193;
    const double C37503 = C2698 * C26653;
    const double C6252 = C4268 + C4267;
    const double C6691 = C4267 + C4268;
    const double C28034 = C22895 + C22894;
    const double C28435 = C22894 + C22895;
    const double C2897 = C2525 * C1082;
    const double C2879 = C2525 * C49159;
    const double C6099 = C2525 * C3882;
    const double C15596 = C2525 * C49191;
    const double C15586 = C2525 * C49159;
    const double C20559 = C2525 * C48790;
    const double C32307 = C2525 * C49193;
    const double C34322 = C2525 * C48790;
    const double C37093 = C2525 * C48793;
    const double C37083 = C2525 * C26653;
    const double C3765 = C2904 * C49159;
    const double C16416 = C2904 * C49159;
    const double C20563 = C2904 * C48790;
    const double C34326 = C2904 * C48790;
    const double C37913 = C2904 * C26653;
    const double C20154 = C19056 * C48790;
    const double C39528 = C19056 * C48790;
    const double C10778 = C10765 + C10766;
    const double C15162 = C15146 + C15147;
    const double C17319 = C17306 + C17307;
    const double C42272 = C42256 + C42257;
    const double C47418 = C47411 + C47412;
    const double C48268 = C48108 * C48267;
    const double C1309 =
        (2 * (ae * C48249 + C48107 * C48188) +
         ae * (C48249 + C48267 * std::pow(C48107, 2)) +
         C48107 *
             (C48188 + ae * C48107 * C48267 +
              C48107 *
                  (ae * C48267 +
                   C48107 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C1507 =
        ((zP - zQ) *
         (C48188 + ae * C48107 * C48267 +
          C48107 * (ae * C48267 +
                    C48107 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C2676 =
        (ae * C48249 + C48107 * C48188 +
         (ae * C48267 +
          C48107 *
              (2 * C48180 + ae * C48181 +
               C48108 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(zP - zQ, 2)) /
        C47869;
    const double C1305 =
        (2 * C48107 * C48249 + C48107 * (C48249 + C48267 * C48293)) / C47864;
    const double C1503 = (C48322 * (C48249 + C48267 * C48293)) / C47864;
    const double C2675 = (C48107 * C48249 + C48107 * C48267 * C48330) / C47864;
    const double C2858 =
        (2 * C48322 * C48249 + C48322 * (C48249 + C48267 * C48330)) / C47864;
    const double C20169 = C20163 + C20164;
    const double C21293 = C20548 + C20549;
    const double C21292 = C20544 + C20545;
    const double C47915 = C47912 - C47907;
    const double C7918 = C47912 + (C47898 * ae) / C47864;
    const double C47914 = C47911 + C49117;
    const double C3776 = C3773 + C2877;
    const double C35064 = C35062 + C34314;
    const double C35063 = C35061 + C34310;
    const double C48030 = C48025 - C48026;
    const double C48029 = C48024 + C49139;
    const double C26521 = C25401 * C48790;
    const double C46593 = C25401 * C48790;
    const double C26520 = C25400 * C23726;
    const double C46592 = C25400 * C47890;
    const double C26531 = C26519 * C23719;
    const double C43367 = C26519 * C48780;
    const double C46591 = C26519 * C49117;
    const double C26530 = C26518 * C23725;
    const double C43366 = C26518 * C9219;
    const double C46590 = C26518 * C47909;
    const double C43379 = C43368 * C9219;
    const double C43380 = C43369 * C48780;
    const double C17746 = C17744 + C17745;
    const double C11213 = C11211 + C11212;
    const double C1116 = C49172 * C613;
    const double C4074 = C48940 * C613;
    const double C7946 = C49172 * C613;
    const double C22701 = C48940 * C613;
    const double C26686 = C26650 * C613;
    const double C4240 = C48940 * C715;
    const double C5222 = C48877 * C715;
    const double C22867 = C48940 * C715;
    const double C164 = C113 * C136;
    const double C288 = C113 * C269;
    const double C3915 = C3885 * C269;
    const double C22542 = C22512 * C269;
    const double C420 = C113 * C401;
    const double C1115 = C1086 * C607;
    const double C4073 = C3885 * C607;
    const double C7945 = C7916 * C607;
    const double C22700 = C22512 * C607;
    const double C26685 = C48044 * C607;
    const double C4239 = C3885 * C709;
    const double C5221 = C113 * C709;
    const double C22866 = C22512 * C709;
    const double C2518 = C113 * C960;
    const double C2694 = C2678 + C2679;
    const double C6699 = C6675 + C6676;
    const double C24966 = C24954 + C24955;
    const double C10760 = C49172 * C9862;
    const double C15155 = C49182 * C9862;
    const double C17301 = C49172 * C9862;
    const double C42265 = C49182 * C9862;
    const double C47406 = C26650 * C9862;
    const double C39531 = C39530 + C39528;
    const double C48269 = C48251 + C48268;
    const double C20170 = C20169 + C20153;
    const double C21299 = C21293 + C20550;
    const double C21298 = C21292 + C20546;
    const double C37092 = C2524 * C47915;
    const double C37086 = C441 * C47915;
    const double C37080 = C2522 * C47915;
    const double C37074 = C443 * C47915;
    const double C37506 = C2697 * C47915;
    const double C37500 = C2701 * C47915;
    const double C37916 = C2907 * C47915;
    const double C117 =
        (C47915 / C47870 + ((C47862 * C47925 + C26653) * ae) / C47864) /
            C47870 -
        ((C47862 * (C47925 / C47870 + (0 * ae) / C47864) + C49176) * be) /
            C47864;
    const double C3888 =
        C47915 / C47870 - ((C47862 * C47925 + C26653) * be) / C47864;
    const double C22515 =
        C47915 / C47870 + ((C47862 * C47925 + C26653) * ae) / C47864;
    const double C15595 = C2524 * C7918;
    const double C15589 = C441 * C7918;
    const double C15583 = C2522 * C7918;
    const double C15577 = C443 * C7918;
    const double C16009 = C2697 * C7918;
    const double C16003 = C2701 * C7918;
    const double C16419 = C2907 * C7918;
    const double C47916 = C47914 * be;
    const double C7917 = C47901 + (C47914 * ae) / C47864 + C47890;
    const double C3779 = C3776 + C2878;
    const double C26693 = C48030 * C264;
    const double C26687 = C48030 * C271;
    const double C26681 = C48030 * C273;
    const double C26675 = C48030 * C265;
    const double C26669 = C48030 * C275;
    const double C26663 = C48030 * C266;
    const double C26885 = C48030 * C596;
    const double C26879 = C48030 * C603;
    const double C26873 = C48030 * C597;
    const double C26867 = C48030 * C605;
    const double C27067 = C48030 * C698;
    const double C27061 = C48030 * C705;
    const double C27055 = C48030 * C699;
    const double C27049 = C48030 * C707;
    const double C29853 = C48030 * C1493;
    const double C29847 = C48030 * C1498;
    const double C30079 = C48030 * C2374;
    const double C30073 = C48030 * C2384;
    const double C30065 = C48030 * C703;
    const double C30059 = C48030 * C697;
    const double C30643 = C48030 * C1500;
    const double C30637 = C48030 * C1494;
    const double C31195 = C48030 * C2372;
    const double C31189 = C48030 * C2380;
    const double C47409 = C48030 * C2381;
    const double C47403 = C48030 * C2373;
    const double C47831 = C48030 * C3313;
    const double C47825 = C48030 * C3317;
    const double C9217 =
        (C48030 / C47870 + ((C47940 * C48044 + C26650) * ae) / C47864) /
            C47870 -
        ((C47940 * (C48044 / C47870 + (0 * ae) / C47864) + C49182) * be) /
            C47864;
    const double C11319 =
        C48030 / C47870 - ((C47940 * C48044 + C26650) * be) / C47864;
    const double C23723 =
        C48030 / C47870 + ((C47940 * C48044 + C26650) * ae) / C47864;
    const double C48033 = C48029 * be;
    const double C26536 = C26530 + C26531;
    const double C43378 = C43366 + C43367;
    const double C46594 = C46590 + C46591;
    const double C43385 = C43379 + C43380;
    const double C176 = C164 + C165;
    const double C304 = C288 + C289;
    const double C3935 = C3915 + C3916;
    const double C22562 = C22542 + C22543;
    const double C436 = C420 + C421;
    const double C1139 = C1115 + C1116;
    const double C4097 = C4073 + C4074;
    const double C7969 = C7945 + C7946;
    const double C22724 = C22700 + C22701;
    const double C26709 = C26685 + C26686;
    const double C4263 = C4239 + C4240;
    const double C5225 = C5221 + C5222;
    const double C22890 = C22866 + C22867;
    const double C2526 = C2518 + C2519;
    const double C3341 = C2694 * C49159;
    const double C16012 = C2694 * C49159;
    const double C37509 = C2694 * C26653;
    const double C10775 = C10759 + C10760;
    const double C15166 = C15154 + C15155;
    const double C17316 = C17300 + C17301;
    const double C42276 = C42264 + C42265;
    const double C47415 = C47405 + C47406;
    const double C48270 = C48269 + C48257;
    const double C20171 = C20170 + C20154;
    const double C21301 = C21299 + C20551;
    const double C21300 = C21298 + C20547;
    const double C5369 = C439 * C3888;
    const double C5361 = C441 * C3888;
    const double C5735 = C2699 * C3888;
    const double C6100 = C2524 * C3888;
    const double C31577 = C439 * C22515;
    const double C31569 = C441 * C22515;
    const double C31943 = C2699 * C22515;
    const double C32308 = C2524 * C22515;
    const double C47917 = C47916 / C47864;
    const double C15593 = C2522 * C7917;
    const double C15587 = C443 * C7917;
    const double C15581 = C2902 * C7917;
    const double C15575 = C2900 * C7917;
    const double C16007 = C3344 * C7917;
    const double C16001 = C3342 * C7917;
    const double C16421 = C3775 * C7917;
    const double C3780 = C3779 + C2879;
    const double C26713 = C26693 + C26694;
    const double C26710 = C26687 + C26688;
    const double C26707 = C26681 + C26682;
    const double C26704 = C26675 + C26676;
    const double C26701 = C26669 + C26670;
    const double C26698 = C26663 + C26664;
    const double C26899 = C26885 + C26886;
    const double C26896 = C26879 + C26880;
    const double C26893 = C26873 + C26874;
    const double C26890 = C26867 + C26868;
    const double C27081 = C27067 + C27068;
    const double C27078 = C27061 + C27062;
    const double C27075 = C27055 + C27056;
    const double C27072 = C27049 + C27050;
    const double C29861 = C29853 + C29854;
    const double C29858 = C29847 + C29848;
    const double C30097 = C30079 + C30080;
    const double C30094 = C30073 + C30074;
    const double C30089 = C30065 + C30066;
    const double C30086 = C30059 + C30060;
    const double C30651 = C30643 + C30644;
    const double C30648 = C30637 + C30638;
    const double C31203 = C31195 + C31196;
    const double C31200 = C31189 + C31190;
    const double C47417 = C47409 + C47410;
    const double C47414 = C47403 + C47404;
    const double C47841 = C47831 + C47832;
    const double C47838 = C47825 + C47826;
    const double C11350 = C11319 * C597;
    const double C11342 = C11319 * C605;
    const double C11336 = C11319 * C603;
    const double C11328 = C11319 * C596;
    const double C11512 = C11319 * C1295;
    const double C11504 = C11319 * C1300;
    const double C11666 = C11319 * C1493;
    const double C11658 = C11319 * C1498;
    const double C14394 = C11319 * C1500;
    const double C14386 = C11319 * C1494;
    const double C14776 = C11319 * C1962;
    const double C14768 = C11319 * C1958;
    const double C15156 = C11319 * C2373;
    const double C15148 = C11319 * C2381;
    const double C23754 = C23723 * C597;
    const double C23746 = C23723 * C605;
    const double C23740 = C23723 * C603;
    const double C23732 = C23723 * C596;
    const double C23916 = C23723 * C1295;
    const double C23908 = C23723 * C1300;
    const double C24070 = C23723 * C1493;
    const double C24062 = C23723 * C1498;
    const double C41504 = C23723 * C1500;
    const double C41496 = C23723 * C1494;
    const double C41886 = C23723 * C1962;
    const double C41878 = C23723 * C1958;
    const double C42266 = C23723 * C2373;
    const double C42258 = C23723 * C2381;
    const double C48035 = C48033 / C47864;
    const double C26537 = C26536 + C26520;
    const double C46595 = C46594 + C46592;
    const double C5372 = C436 * C49176;
    const double C31580 = C436 * C49176;
    const double C5738 = C5225 * C49176;
    const double C31946 = C5225 * C49176;
    const double C2899 = C2526 * C49159;
    const double C6097 = C2526 * C49176;
    const double C15598 = C2526 * C49159;
    const double C32305 = C2526 * C49176;
    const double C37095 = C2526 * C26653;
    const double C614 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 + ae * C48107 * C48270 +
         C48107 *
             (ae * C48270 +
              C48107 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C716 =
        ((zP - zQ) *
         (ae * C48270 +
          C48107 * (3 * C48184 + ae * C48185 +
                    C48108 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C139 = (5 * (3 * C48243 + C48108 * C48249 + C48430 * ae) +
                         C48108 * (4 * C48249 + C48108 * C48270 + C48436 * ae) +
                         (4 * C48430 + C48108 * C48436) * ae) /
                        C47864;
    const double C280 =
        (C48107 * (4 * C48249 + C48108 * C48270 + C48436 * ae)) / C47864;
    const double C412 =
        (C48322 * (4 * C48249 + C48108 * C48270 + C48436 * ae)) / C47864;
    const double C609 =
        (3 * C48243 + C48108 * C48249 + C48430 * ae + C48270 * C48293) / C47864;
    const double C711 = (C48322 * C48107 * C48270) / C47864;
    const double C962 =
        (3 * C48243 + C48108 * C48249 + C48430 * ae + C48270 * C48330) / C47864;
    const double C47918 = C47901 - C47917;
    const double C16415 = C15581 + C15582;
    const double C11369 = C11350 + C11351;
    const double C11365 = C11342 + C11343;
    const double C11362 = C11336 + C11337;
    const double C11358 = C11328 + C11329;
    const double C11523 = C11512 + C11513;
    const double C11519 = C11504 + C11505;
    const double C11677 = C11666 + C11667;
    const double C11673 = C11658 + C11659;
    const double C14404 = C14394 + C14395;
    const double C14400 = C14386 + C14387;
    const double C14786 = C14776 + C14777;
    const double C14782 = C14768 + C14769;
    const double C15167 = C15156 + C15157;
    const double C15163 = C15148 + C15149;
    const double C23773 = C23754 + C23755;
    const double C23769 = C23746 + C23747;
    const double C23766 = C23740 + C23741;
    const double C23762 = C23732 + C23733;
    const double C23927 = C23916 + C23917;
    const double C23923 = C23908 + C23909;
    const double C24081 = C24070 + C24071;
    const double C24077 = C24062 + C24063;
    const double C41514 = C41504 + C41505;
    const double C41510 = C41496 + C41497;
    const double C41896 = C41886 + C41887;
    const double C41892 = C41878 + C41879;
    const double C42277 = C42266 + C42267;
    const double C42273 = C42258 + C42259;
    const double C48037 = C48023 - C48035;
    const double C26538 = C26537 + C26521;
    const double C46596 = C46595 + C46593;
    const double C47919 = C47918 + C47890;
    const double C16422 = C16415 + C15583;
    const double C48038 = C48037 + C48008;
    const double C37090 = C2522 * C47919;
    const double C37084 = C443 * C47919;
    const double C37078 = C2902 * C47919;
    const double C37072 = C2900 * C47919;
    const double C37504 = C3344 * C47919;
    const double C37498 = C3342 * C47919;
    const double C37918 = C3775 * C47919;
    const double C114 =
        (((((0 - (C47862 * C47863) / C47864) * ae) / C47864 -
           (0 * be) / C47876 + (2 * C47865) / C47864) /
              C47870 -
          ((C47862 * C47899 + 0) * be) / C47864 + C47882 - C47892) /
             C47870 +
         ((C47862 * C47913 + 0) * ae) / C47864) /
            C47870 -
        ((C47862 * (C47913 / C47870 +
                    ((C47862 * C47919 + C48785) * ae) / C47864 + C47915) +
          C49213) *
         be) /
            C47864 +
        C47919 / C47870 + ((C47862 * C47915 + C48793) * ae) / C47864 +
        2 * (C47890 / C47870 - (0 * be) / C47864);
    const double C115 =
        (C47913 / C47870 + ((C47862 * C47919 + C48785) * ae) / C47864 +
         C47915) /
            C47870 -
        ((C47862 * (C47919 / C47870 +
                    ((C47862 * C47915 + C48793) * ae) / C47864 + 2 * C47925) +
          C49206) *
         be) /
            C47864 +
        2 * (C47915 / C47870 + ((C47862 * C47925 + C26653) * ae) / C47864);
    const double C116 =
        (C47919 / C47870 + ((C47862 * C47915 + C48793) * ae) / C47864 +
         2 * C47925) /
            C47870 -
        ((C47862 *
              (C47915 / C47870 + ((C47862 * C47925 + C26653) * ae) / C47864) +
          C49193) *
         be) /
            C47864 +
        3 * (C47925 / C47870 + (0 * ae) / C47864);
    const double C3886 =
        C47913 / C47870 - ((C47862 * C47919 + C48785) * be) / C47864 + C47915;
    const double C3887 = C47919 / C47870 -
                         ((C47862 * C47915 + C48793) * be) / C47864 +
                         2 * C47925;
    const double C22513 =
        C47913 / C47870 + ((C47862 * C47919 + C48785) * ae) / C47864 + C47915;
    const double C22514 = C47919 / C47870 +
                          ((C47862 * C47915 + C48793) * ae) / C47864 +
                          2 * C47925;
    const double C16423 = C16422 + C15584;
    const double C26695 = C48038 * C122;
    const double C26689 = C48038 * C133;
    const double C26679 = C48038 * C131;
    const double C26673 = C48038 * C121;
    const double C26667 = C48038 * C129;
    const double C26661 = C48038 * C120;
    const double C26887 = C48038 * C266;
    const double C26881 = C48038 * C275;
    const double C26875 = C48038 * C265;
    const double C26869 = C48038 * C273;
    const double C27069 = C48038 * C398;
    const double C27063 = C48038 * C407;
    const double C27057 = C48038 * C397;
    const double C27051 = C48038 * C405;
    const double C29855 = C48038 * C698;
    const double C29849 = C48038 * C705;
    const double C30081 = C48038 * C949;
    const double C30075 = C48038 * C956;
    const double C30063 = C48038 * C409;
    const double C30057 = C48038 * C399;
    const double C30641 = C48038 * C703;
    const double C30635 = C48038 * C697;
    const double C31197 = C48038 * C948;
    const double C31191 = C48038 * C954;
    const double C47407 = C48038 * C2380;
    const double C47401 = C48038 * C2372;
    const double C47833 = C48038 * C2849;
    const double C47827 = C48038 * C2855;
    const double C9214 =
        (((((0 - (C47940 * C47991) / C47864) * ae) / C47864 -
           (0 * be) / C47876 + (2 * C47992) / C47864) /
              C47870 -
          ((C47940 * C48027 + 0) * be) / C47864 + C48001 - C48014) /
             C47870 +
         ((C47940 * C48036 + 0) * ae) / C47864) /
            C47870 -
        ((C47940 * (C48036 / C47870 +
                    ((C47940 * C48038 + C48936) * ae) / C47864 + C48030) +
          C49214) *
         be) /
            C47864 +
        C48038 / C47870 + ((C47940 * C48030 + C48943) * ae) / C47864 +
        2 * (C48008 / C47870 - (0 * be) / C47864);
    const double C9215 =
        (C48036 / C47870 + ((C47940 * C48038 + C48936) * ae) / C47864 +
         C48030) /
            C47870 -
        ((C47940 * (C48038 / C47870 +
                    ((C47940 * C48030 + C48943) * ae) / C47864 + 2 * C48044) +
          C49210) *
         be) /
            C47864 +
        2 * (C48030 / C47870 + ((C47940 * C48044 + C26650) * ae) / C47864);
    const double C9216 =
        (C48038 / C47870 + ((C47940 * C48030 + C48943) * ae) / C47864 +
         2 * C48044) /
            C47870 -
        ((C47940 *
              (C48030 / C47870 + ((C47940 * C48044 + C26650) * ae) / C47864) +
          C49200) *
         be) /
            C47864 +
        3 * (C48044 / C47870 + (0 * ae) / C47864);
    const double C11317 =
        C48036 / C47870 - ((C47940 * C48038 + C48936) * be) / C47864 + C48030;
    const double C11318 = C48038 / C47870 -
                          ((C47940 * C48030 + C48943) * be) / C47864 +
                          2 * C48044;
    const double C23721 =
        C48036 / C47870 + ((C47940 * C48038 + C48936) * ae) / C47864 + C48030;
    const double C23722 = C48038 / C47870 +
                          ((C47940 * C48030 + C48943) * ae) / C47864 +
                          2 * C48044;
    const double C37912 = C37078 + C37079;
    const double C5365 = C443 * C3886;
    const double C5357 = C2900 * C3886;
    const double C5731 = C3342 * C3886;
    const double C6104 = C2902 * C3886;
    const double C5367 = C441 * C3887;
    const double C5359 = C443 * C3887;
    const double C5733 = C2701 * C3887;
    const double C6102 = C2522 * C3887;
    const double C31573 = C443 * C22513;
    const double C31565 = C2900 * C22513;
    const double C31939 = C3342 * C22513;
    const double C32312 = C2902 * C22513;
    const double C31575 = C441 * C22514;
    const double C31567 = C443 * C22514;
    const double C31941 = C2701 * C22514;
    const double C32310 = C2522 * C22514;
    const double C16424 = C16423 + C15585;
    const double C26714 = C26695 + C26696;
    const double C26711 = C26689 + C26690;
    const double C26706 = C26679 + C26680;
    const double C26703 = C26673 + C26674;
    const double C26700 = C26667 + C26668;
    const double C26697 = C26661 + C26662;
    const double C26900 = C26887 + C26888;
    const double C26897 = C26881 + C26882;
    const double C26894 = C26875 + C26876;
    const double C26891 = C26869 + C26870;
    const double C27082 = C27069 + C27070;
    const double C27079 = C27063 + C27064;
    const double C27076 = C27057 + C27058;
    const double C27073 = C27051 + C27052;
    const double C29862 = C29855 + C29856;
    const double C29859 = C29849 + C29850;
    const double C30098 = C30081 + C30082;
    const double C30095 = C30075 + C30076;
    const double C30088 = C30063 + C30064;
    const double C30085 = C30057 + C30058;
    const double C30650 = C30641 + C30642;
    const double C30647 = C30635 + C30636;
    const double C31204 = C31197 + C31198;
    const double C31201 = C31191 + C31192;
    const double C47416 = C47407 + C47408;
    const double C47413 = C47401 + C47402;
    const double C47842 = C47833 + C47834;
    const double C47839 = C47827 + C47828;
    const double C11354 = C11317 * C121;
    const double C11346 = C11317 * C131;
    const double C11332 = C11317 * C129;
    const double C11324 = C11317 * C120;
    const double C11516 = C11317 * C266;
    const double C11508 = C11317 * C275;
    const double C11670 = C11317 * C398;
    const double C11662 = C11317 * C407;
    const double C14390 = C11317 * C409;
    const double C14382 = C11317 * C399;
    const double C14772 = C11317 * C703;
    const double C14764 = C11317 * C697;
    const double C15160 = C11317 * C948;
    const double C15152 = C11317 * C954;
    const double C11352 = C11318 * C265;
    const double C11344 = C11318 * C273;
    const double C11334 = C11318 * C275;
    const double C11326 = C11318 * C266;
    const double C11514 = C11318 * C596;
    const double C11506 = C11318 * C603;
    const double C11668 = C11318 * C698;
    const double C11660 = C11318 * C705;
    const double C14392 = C11318 * C703;
    const double C14384 = C11318 * C697;
    const double C14774 = C11318 * C1500;
    const double C14766 = C11318 * C1494;
    const double C15158 = C11318 * C2372;
    const double C15150 = C11318 * C2380;
    const double C23758 = C23721 * C121;
    const double C23750 = C23721 * C131;
    const double C23736 = C23721 * C129;
    const double C23728 = C23721 * C120;
    const double C23920 = C23721 * C266;
    const double C23912 = C23721 * C275;
    const double C24074 = C23721 * C398;
    const double C24066 = C23721 * C407;
    const double C41500 = C23721 * C409;
    const double C41492 = C23721 * C399;
    const double C41882 = C23721 * C703;
    const double C41874 = C23721 * C697;
    const double C42270 = C23721 * C948;
    const double C42262 = C23721 * C954;
    const double C23756 = C23722 * C265;
    const double C23748 = C23722 * C273;
    const double C23738 = C23722 * C275;
    const double C23730 = C23722 * C266;
    const double C23918 = C23722 * C596;
    const double C23910 = C23722 * C603;
    const double C24072 = C23722 * C698;
    const double C24064 = C23722 * C705;
    const double C41502 = C23722 * C703;
    const double C41494 = C23722 * C697;
    const double C41884 = C23722 * C1500;
    const double C41876 = C23722 * C1494;
    const double C42268 = C23722 * C2372;
    const double C42260 = C23722 * C2380;
    const double C37919 = C37912 + C37080;
    const double C16425 = C16424 + C15586;
    const double C26716 = C26706 + C26707;
    const double C26715 = C26703 + C26704;
    const double C30084 = C27081 + C27082;
    const double C30069 = C27082 + C27081;
    const double C30083 = C27078 + C27079;
    const double C30070 = C27079 + C27078;
    const double C47821 = C31204 + C31203;
    const double C47822 = C31201 + C31200;
    const double C11371 = C11354 + C11355;
    const double C11367 = C11346 + C11347;
    const double C11360 = C11332 + C11333;
    const double C11356 = C11324 + C11325;
    const double C11525 = C11516 + C11517;
    const double C11521 = C11508 + C11509;
    const double C11679 = C11670 + C11671;
    const double C11675 = C11662 + C11663;
    const double C14402 = C14390 + C14391;
    const double C14398 = C14382 + C14383;
    const double C14784 = C14772 + C14773;
    const double C14780 = C14764 + C14765;
    const double C15169 = C15160 + C15161;
    const double C15165 = C15152 + C15153;
    const double C11370 = C11352 + C11353;
    const double C11366 = C11344 + C11345;
    const double C11361 = C11334 + C11335;
    const double C11357 = C11326 + C11327;
    const double C11524 = C11514 + C11515;
    const double C11520 = C11506 + C11507;
    const double C11678 = C11668 + C11669;
    const double C11674 = C11660 + C11661;
    const double C14403 = C14392 + C14393;
    const double C14399 = C14384 + C14385;
    const double C14785 = C14774 + C14775;
    const double C14781 = C14766 + C14767;
    const double C15168 = C15158 + C15159;
    const double C15164 = C15150 + C15151;
    const double C23775 = C23758 + C23759;
    const double C23771 = C23750 + C23751;
    const double C23764 = C23736 + C23737;
    const double C23760 = C23728 + C23729;
    const double C23929 = C23920 + C23921;
    const double C23925 = C23912 + C23913;
    const double C24083 = C24074 + C24075;
    const double C24079 = C24066 + C24067;
    const double C41512 = C41500 + C41501;
    const double C41508 = C41492 + C41493;
    const double C41894 = C41882 + C41883;
    const double C41890 = C41874 + C41875;
    const double C42279 = C42270 + C42271;
    const double C42275 = C42262 + C42263;
    const double C23774 = C23756 + C23757;
    const double C23770 = C23748 + C23749;
    const double C23765 = C23738 + C23739;
    const double C23761 = C23730 + C23731;
    const double C23928 = C23918 + C23919;
    const double C23924 = C23910 + C23911;
    const double C24082 = C24072 + C24073;
    const double C24078 = C24064 + C24065;
    const double C41513 = C41502 + C41503;
    const double C41509 = C41494 + C41495;
    const double C41895 = C41884 + C41885;
    const double C41891 = C41876 + C41877;
    const double C42278 = C42268 + C42269;
    const double C42274 = C42260 + C42261;
    const double C37920 = C37919 + C37081;
    const double C26718 = C26716 + C26708;
    const double C26717 = C26715 + C26705;
    const double C30100 = C27080 + C30084;
    const double C30091 = C30069 + C27080;
    const double C30099 = C27077 + C30083;
    const double C30092 = C30070 + C27077;
    const double C47835 = C47821 + C31202;
    const double C47836 = C47822 + C31199;
    const double C37921 = C37920 + C37082;
    const double C47843 = C47835 * C9219;
    const double C47844 = C47836 * C48780;
    const double C37922 = C37921 + C37083;
    const double C47845 = C47843 + C47844;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                   C48943 * C278 + C48044 * C595 + C26650 * C600) *
                      C47919 +
                  (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                   C48943 * C285 + C48044 * C601 + C26650 * C610) *
                      C48785 +
                  (C26697 + C26698 + C26699) * C47915 +
                  (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                  C26718 * C26653) *
                     C48895 * C48866 * C48849 * C110 -
                 ((C26709 + C26710 + C26711) * C26653 +
                  (C26712 + C26713 + C26714) * C47925 +
                  (C26708 + C26707 + C26706) * C48793 +
                  (C26705 + C26704 + C26703) * C47915 +
                  (C26702 + C26701 + C26700) * C48785 +
                  (C26699 + C26698 + C26697) * C47919) *
                     C48895 * C48866 * C48849 * C111 +
                 (C26717 * C47919 + C26718 * C48785 +
                  (C26714 + C26713 + C26712) * C47915 +
                  (C26711 + C26710 + C26709) * C48793 +
                  (C48038 * C123 + C48936 * C134 + C48030 * C263 +
                   C48943 * C270 + C48044 * C599 + C26650 * C608) *
                      C47925 +
                  (C48038 * C135 + C48936 * C144 + C48030 * C269 +
                   C48943 * C281 + C48044 * C609 + C26650 * C614) *
                      C26653) *
                     C48895 * C48866 * C48849 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C48866 * C259 -
                  ((C26889 + C26890 + C26891) * C26653 +
                   (C26892 + C26893 + C26894) * C47925 +
                   (C26895 + C26896 + C26897) * C48793 +
                   (C26898 + C26899 + C26900) * C47915 +
                   (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                    C48943 * C610 + C48038 * C277 + C48936 * C285) *
                       C48785 +
                   (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                    C48943 * C600 + C48038 * C267 + C48936 * C278) *
                       C47919) *
                      C48895 * C48866 * C49167) *
                     C261 +
                 (((C26900 + C26899 + C26898) * C47919 +
                   (C26897 + C26896 + C26895) * C48785 +
                   (C26894 + C26893 + C26892) * C47915 +
                   (C26891 + C26890 + C26889) * C48793 +
                   (C48038 * C264 + C48936 * C272 + C48030 * C598 +
                    C48943 * C606 + C48044 * C1297 + C26650 * C1304) *
                       C47925 +
                   (C48038 * C271 + C48936 * C282 + C48030 * C607 +
                    C48943 * C613 + C48044 * C1305 + C26650 * C1309) *
                       C26653) *
                      C48895 * C48866 * C49167 -
                  ((C26709 + C26710 + C26711) * C26653 +
                   (C26712 + C26713 + C26714) * C47925 +
                   (C26708 + C26707 + C26706) * C48793 +
                   (C26705 + C26704 + C26703) * C47915 +
                   (C26702 + C26701 + C26700) * C48785 +
                   (C26699 + C26698 + C26697) * C47919) *
                      C48895 * C48866 * C259) *
                     C49165)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C393 -
                  ((C27071 + C27072 + C27073) * C26653 +
                   (C27074 + C27075 + C27076) * C47925 +
                   (C27077 + C27078 + C27079) * C48793 +
                   (C27080 + C27081 + C27082) * C47915 +
                   (C48044 * C1500 + C26650 * C1506 + C48030 * C703 +
                    C48943 * C712 + C48038 * C409 + C48936 * C417) *
                       C48785 +
                   (C48044 * C1494 + C26650 * C1501 + C48030 * C697 +
                    C48943 * C702 + C48038 * C399 + C48936 * C410) *
                       C47919) *
                      C48895 * C49169) *
                     C48849 * C261 +
                 (((C27082 + C27081 + C27080) * C47919 +
                   (C27079 + C27078 + C27077) * C48785 +
                   (C27076 + C27075 + C27074) * C47915 +
                   (C27073 + C27072 + C27071) * C48793 +
                   (C48038 * C396 + C48936 * C404 + C48030 * C700 +
                    C48943 * C708 + C48044 * C1495 + C26650 * C1502) *
                       C47925 +
                   (C48038 * C403 + C48936 * C414 + C48030 * C709 +
                    C48943 * C715 + C48044 * C1503 + C26650 * C1507) *
                       C26653) *
                      C48895 * C49169 -
                  ((C26709 + C26710 + C26711) * C26653 +
                   (C26712 + C26713 + C26714) * C47925 +
                   (C26708 + C26707 + C26706) * C48793 +
                   (C26705 + C26704 + C26703) * C47915 +
                   (C26702 + C26701 + C26700) * C48785 +
                   (C26699 + C26698 + C26697) * C47919) *
                      C48895 * C393) *
                     C48849 * C49165)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C48866 * C525 -
                  ((C26889 + C26890 + C26891) * C26653 +
                   (C26892 + C26893 + C26894) * C47925 +
                   (C26895 + C26896 + C26897) * C48793 +
                   (C26898 + C26899 + C26900) * C47915 +
                   (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                    C48943 * C610 + C48038 * C277 + C48936 * C285) *
                       C48785 +
                   (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                    C48943 * C600 + C48038 * C267 + C48936 * C278) *
                       C47919) *
                      C48895 * C48866 * C49167) *
                     C527 +
                 (((C26900 + C26899 + C26898) * C47919 +
                   (C26897 + C26896 + C26895) * C48785 +
                   (C26894 + C26893 + C26892) * C47915 +
                   (C26891 + C26890 + C26889) * C48793 +
                   (C48038 * C264 + C48936 * C272 + C48030 * C598 +
                    C48943 * C606 + C48044 * C1297 + C26650 * C1304) *
                       C47925 +
                   (C48038 * C271 + C48936 * C282 + C48030 * C607 +
                    C48943 * C613 + C48044 * C1305 + C26650 * C1309) *
                       C26653) *
                      C48895 * C48866 * C49167 -
                  ((C26709 + C26710 + C26711) * C26653 +
                   (C26712 + C26713 + C26714) * C47925 +
                   (C26708 + C26707 + C26706) * C48793 +
                   (C26705 + C26704 + C26703) * C47915 +
                   (C26702 + C26701 + C26700) * C48785 +
                   (C26699 + C26698 + C26697) * C47919) *
                      C48895 * C48866 * C525) *
                     C49165)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                   C48943 * C278 + C48044 * C595 + C26650 * C600) *
                      C47919 +
                  (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                   C48943 * C285 + C48044 * C601 + C26650 * C610) *
                      C48785 +
                  (C26697 + C26698 + C26699) * C47915 +
                  (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                  C26718 * C26653) *
                     C48895 * C48866 * C591 -
                 ((C26889 + C26890 + C26891) * C26653 +
                  (C26892 + C26893 + C26894) * C47925 +
                  (C26895 + C26896 + C26897) * C48793 +
                  (C26898 + C26899 + C26900) * C47915 +
                  (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                   C48943 * C610 + C48038 * C277 + C48936 * C285) *
                      C48785 +
                  (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                   C48943 * C600 + C48038 * C267 + C48936 * C278) *
                      C47919) *
                     C48895 * C48866 * C592 +
                 ((C48038 * C595 + C48936 * C600 + C48030 * C1296 +
                   C48943 * C1303 + C48044 * C1800 + C26650 * C1803) *
                      C47919 +
                  (C48038 * C601 + C48936 * C610 + C48030 * C1302 +
                   C48943 * C1308 + C48044 * C1804 + C26650 * C1809) *
                      C48785 +
                  (C48038 * C596 + C48936 * C602 + C48030 * C1295 +
                   C48943 * C1301 + C48044 * C1801 + C26650 * C1805) *
                      C47915 +
                  (C48038 * C603 + C48936 * C611 + C48030 * C1300 +
                   C48943 * C1307 + C48044 * C1806 + C26650 * C1810) *
                      C48793 +
                  (C48038 * C597 + C48936 * C604 + C48030 * C1294 +
                   C48943 * C1299 + C48044 * C1802 + C26650 * C1807) *
                      C47925 +
                  (C48038 * C605 + C48936 * C612 + C48030 * C1298 +
                   C48943 * C1306 + C48044 * C1808 + C26650 * C1811) *
                      C26653) *
                     C48895 * C48866 * C593) *
                C48815) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C393 -
                  ((C27071 + C27072 + C27073) * C26653 +
                   (C27074 + C27075 + C27076) * C47925 +
                   (C27077 + C27078 + C27079) * C48793 +
                   (C27080 + C27081 + C27082) * C47915 +
                   (C48044 * C1500 + C26650 * C1506 + C48030 * C703 +
                    C48943 * C712 + C48038 * C409 + C48936 * C417) *
                       C48785 +
                   (C48044 * C1494 + C26650 * C1501 + C48030 * C697 +
                    C48943 * C702 + C48038 * C399 + C48936 * C410) *
                       C47919) *
                      C48895 * C49169) *
                     C525 +
                 (((C48038 * C697 + C48936 * C702 + C48030 * C1494 +
                    C48943 * C1501 + C48044 * C1958 + C26650 * C1961) *
                       C47919 +
                   (C48038 * C703 + C48936 * C712 + C48030 * C1500 +
                    C48943 * C1506 + C48044 * C1962 + C26650 * C1967) *
                       C48785 +
                   (C48038 * C698 + C48936 * C704 + C48030 * C1493 +
                    C48943 * C1499 + C48044 * C1959 + C26650 * C1963) *
                       C47915 +
                   (C48038 * C705 + C48936 * C713 + C48030 * C1498 +
                    C48943 * C1505 + C48044 * C1964 + C26650 * C1968) *
                       C48793 +
                   (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                    C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                       C47925 +
                   (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                    C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                       C26653) *
                      C48895 * C49169 -
                  ((C26889 + C26890 + C26891) * C26653 +
                   (C26892 + C26893 + C26894) * C47925 +
                   (C26895 + C26896 + C26897) * C48793 +
                   (C26898 + C26899 + C26900) * C47915 +
                   (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                    C48943 * C610 + C48038 * C277 + C48936 * C285) *
                       C48785 +
                   (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                    C48943 * C600 + C48038 * C267 + C48936 * C278) *
                       C47919) *
                      C48895 * C393) *
                     C49167) *
                C48815) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C799 -
                  ((C27071 + C27072 + C27073) * C26653 +
                   (C27074 + C27075 + C27076) * C47925 +
                   (C27077 + C27078 + C27079) * C48793 +
                   (C27080 + C27081 + C27082) * C47915 +
                   (C48044 * C1500 + C26650 * C1506 + C48030 * C703 +
                    C48943 * C712 + C48038 * C409 + C48936 * C417) *
                       C48785 +
                   (C48044 * C1494 + C26650 * C1501 + C48030 * C697 +
                    C48943 * C702 + C48038 * C399 + C48936 * C410) *
                       C47919) *
                      C48895 * C49169) *
                     C48849 * C527 +
                 (((C27082 + C27081 + C27080) * C47919 +
                   (C27079 + C27078 + C27077) * C48785 +
                   (C27076 + C27075 + C27074) * C47915 +
                   (C27073 + C27072 + C27071) * C48793 +
                   (C48038 * C396 + C48936 * C404 + C48030 * C700 +
                    C48943 * C708 + C48044 * C1495 + C26650 * C1502) *
                       C47925 +
                   (C48038 * C403 + C48936 * C414 + C48030 * C709 +
                    C48943 * C715 + C48044 * C1503 + C26650 * C1507) *
                       C26653) *
                      C48895 * C49169 -
                  ((C26709 + C26710 + C26711) * C26653 +
                   (C26712 + C26713 + C26714) * C47925 +
                   (C26708 + C26707 + C26706) * C48793 +
                   (C26705 + C26704 + C26703) * C47915 +
                   (C26702 + C26701 + C26700) * C48785 +
                   (C26699 + C26698 + C26697) * C47919) *
                      C48895 * C799) *
                     C48849 * C49165)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C47919 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C48785 +
                   (C26697 + C26698 + C26699) * C47915 +
                   (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                   C26718 * C26653) *
                      C48895 * C799 -
                  ((C27071 + C27072 + C27073) * C26653 +
                   (C27074 + C27075 + C27076) * C47925 +
                   (C27077 + C27078 + C27079) * C48793 +
                   (C27080 + C27081 + C27082) * C47915 +
                   (C48044 * C1500 + C26650 * C1506 + C48030 * C703 +
                    C48943 * C712 + C48038 * C409 + C48936 * C417) *
                       C48785 +
                   (C48044 * C1494 + C26650 * C1501 + C48030 * C697 +
                    C48943 * C702 + C48038 * C399 + C48936 * C410) *
                       C47919) *
                      C48895 * C49169) *
                     C259 +
                 (((C48038 * C697 + C48936 * C702 + C48030 * C1494 +
                    C48943 * C1501 + C48044 * C1958 + C26650 * C1961) *
                       C47919 +
                   (C48038 * C703 + C48936 * C712 + C48030 * C1500 +
                    C48943 * C1506 + C48044 * C1962 + C26650 * C1967) *
                       C48785 +
                   (C48038 * C698 + C48936 * C704 + C48030 * C1493 +
                    C48943 * C1499 + C48044 * C1959 + C26650 * C1963) *
                       C47915 +
                   (C48038 * C705 + C48936 * C713 + C48030 * C1498 +
                    C48943 * C1505 + C48044 * C1964 + C26650 * C1968) *
                       C48793 +
                   (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                    C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                       C47925 +
                   (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                    C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                       C26653) *
                      C48895 * C49169 -
                  ((C26889 + C26890 + C26891) * C26653 +
                   (C26892 + C26893 + C26894) * C47925 +
                   (C26895 + C26896 + C26897) * C48793 +
                   (C26898 + C26899 + C26900) * C47915 +
                   (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                    C48943 * C610 + C48038 * C277 + C48936 * C285) *
                       C48785 +
                   (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                    C48943 * C600 + C48038 * C267 + C48936 * C278) *
                       C47919) *
                      C48895 * C799) *
                     C49167) *
                C48815) /
               (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                   C48943 * C278 + C48044 * C595 + C26650 * C600) *
                      C47919 +
                  (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                   C48943 * C285 + C48044 * C601 + C26650 * C610) *
                      C48785 +
                  (C26697 + C26698 + C26699) * C47915 +
                  (C26700 + C26701 + C26702) * C48793 + C26717 * C47925 +
                  C26718 * C26653) *
                     C48895 * C945 -
                 ((C27071 + C27072 + C27073) * C26653 +
                  (C27074 + C27075 + C27076) * C47925 +
                  (C27077 + C27078 + C27079) * C48793 +
                  (C27080 + C27081 + C27082) * C47915 +
                  (C48044 * C1500 + C26650 * C1506 + C48030 * C703 +
                   C48943 * C712 + C48038 * C409 + C48936 * C417) *
                      C48785 +
                  (C48044 * C1494 + C26650 * C1501 + C48030 * C697 +
                   C48943 * C702 + C48038 * C399 + C48936 * C410) *
                      C47919) *
                     C48895 * C946 +
                 ((C48038 * C948 + C48936 * C953 + C48030 * C2372 +
                   C48943 * C2378 + C48044 * C2373 + C26650 * C2379) *
                      C47919 +
                  (C48038 * C954 + C48936 * C963 + C48030 * C2380 +
                   C48943 * C2390 + C48044 * C2381 + C26650 * C2391) *
                      C48785 +
                  (C48038 * C949 + C48936 * C955 + C48030 * C2374 +
                   C48943 * C2382 + C48044 * C2375 + C26650 * C2383) *
                      C47915 +
                  (C48038 * C956 + C48936 * C964 + C48030 * C2384 +
                   C48943 * C2392 + C48044 * C2385 + C26650 * C2393) *
                      C48793 +
                  (C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                   C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                      C47925 +
                  (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                   C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                      C26653) *
                     C48895 * C947) *
                C48849 * C48815) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                    C48943 * C278 + C48044 * C595 + C26650 * C600) *
                       C23725 +
                   (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                    C48943 * C285 + C48044 * C601 + C26650 * C610) *
                       C23719 +
                   (C26697 + C26698 + C26699) * C23726 +
                   (C26700 + C26701 + C26702) * C48790) *
                      C49140 +
                  ((C48038 * C399 + C48936 * C410 + C48030 * C697 +
                    C48943 * C702 + C48044 * C1494 + C26650 * C1501) *
                       C23725 +
                   (C48038 * C409 + C48936 * C417 + C48030 * C703 +
                    C48943 * C712 + C48044 * C1500 + C26650 * C1506) *
                       C23719 +
                   (C27082 + C27081 + C27080) * C23726 +
                   (C27079 + C27078 + C27077) * C48790) *
                      C48982) *
                     C48866 * C48849 * C110 -
                 (((C27071 + C27072 + C27073) * C48790 +
                   (C27074 + C27075 + C27076) * C23726 +
                   (C27077 + C27078 + C27079) * C23719 +
                   (C27080 + C27081 + C27082) * C23725) *
                      C48982 +
                  ((C26708 + C26707 + C26706) * C48790 +
                   (C26705 + C26704 + C26703) * C23726 +
                   (C26702 + C26701 + C26700) * C23719 +
                   (C26699 + C26698 + C26697) * C23725) *
                      C49140) *
                     C48866 * C48849 * C111 +
                 ((C26717 * C23725 + C26718 * C23719 +
                   (C26714 + C26713 + C26712) * C23726 +
                   (C26711 + C26710 + C26709) * C48790) *
                      C49140 +
                  ((C27076 + C27075 + C27074) * C23725 +
                   (C27073 + C27072 + C27071) * C23719 +
                   (C48038 * C396 + C48936 * C404 + C48030 * C700 +
                    C48943 * C708 + C48044 * C1495 + C26650 * C1502) *
                       C23726 +
                   (C48038 * C403 + C48936 * C414 + C48030 * C709 +
                    C48943 * C715 + C48044 * C1503 + C26650 * C1507) *
                       C48790) *
                      C48982) *
                     C48866 * C48849 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C48038 * C399 + C48936 * C410 + C48030 * C697 +
                      C48943 * C702 + C48044 * C1494 + C26650 * C1501) *
                         C23725 +
                     (C48038 * C409 + C48936 * C417 + C48030 * C703 +
                      C48943 * C712 + C48044 * C1500 + C26650 * C1506) *
                         C23719 +
                     (C27082 + C27081 + C27080) * C23726 +
                     (C27079 + C27078 + C27077) * C48790) *
                        C48982) *
                       C48866 * C259 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C23726 +
                     (C48044 * C1962 + C26650 * C1967 + C48030 * C1500 +
                      C48943 * C1506 + C48038 * C703 + C48936 * C712) *
                         C23719 +
                     (C48044 * C1958 + C26650 * C1961 + C48030 * C1494 +
                      C48943 * C1501 + C48038 * C697 + C48936 * C702) *
                         C23725) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C23726 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C23719 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C23725) *
                        C49140) *
                       C48866 * C49167) *
                      C261 +
                  ((((C26900 + C26899 + C26898) * C23725 +
                     (C26897 + C26896 + C26895) * C23719 +
                     (C26894 + C26893 + C26892) * C23726 +
                     (C26891 + C26890 + C26889) * C48790) *
                        C49140 +
                    ((C29862 + C29861 + C29860) * C23725 +
                     (C29859 + C29858 + C29857) * C23719 +
                     (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                      C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                         C23726 +
                     (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                      C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                         C48790) *
                        C48982) *
                       C48866 * C49167 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C23726 +
                     (C27077 + C27078 + C27079) * C23719 +
                     (C27080 + C27081 + C27082) * C23725) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C23726 +
                     (C26702 + C26701 + C26700) * C23719 +
                     (C26699 + C26698 + C26697) * C23725) *
                        C49140) *
                       C48866 * C259) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C30085 + C30086 + C30087) * C23725 +
                     (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                     C30092 * C48790) *
                        C48982) *
                       C393 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C23726 +
                     (C48044 * C2381 + C26650 * C2391 + C48030 * C2380 +
                      C48943 * C2390 + C48038 * C954 + C48936 * C963) *
                         C23719 +
                     (C48044 * C2373 + C26650 * C2379 + C48030 * C2372 +
                      C48943 * C2378 + C48038 * C948 + C48936 * C953) *
                         C23725) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C23726 +
                     (C30090 + C30089 + C30088) * C23719 +
                     (C30087 + C30086 + C30085) * C23725) *
                        C49140) *
                       C49169) *
                      C48849 * C261 +
                  (((C30091 * C23725 + C30092 * C23719 +
                     (C27076 + C27075 + C27074) * C23726 +
                     (C27073 + C27072 + C27071) * C48790) *
                        C49140 +
                    ((C30098 + C30097 + C30096) * C23725 +
                     (C30095 + C30094 + C30093) * C23719 +
                     (C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                      C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                         C23726 +
                     (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                      C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C23726 + C30099 * C23719 +
                     C30100 * C23725) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C23726 +
                     (C26702 + C26701 + C26700) * C23719 +
                     (C26699 + C26698 + C26697) * C23725) *
                        C49140) *
                       C393) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[12] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C30085 + C30086 + C30087) * C23725 +
                     (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                     C30092 * C48790) *
                        C48982) *
                       C48866 * C525 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C23726 +
                     (C48044 * C1962 + C26650 * C1967 + C48030 * C1500 +
                      C48943 * C1506 + C48038 * C703 + C48936 * C712) *
                         C23719 +
                     (C48044 * C1958 + C26650 * C1961 + C48030 * C1494 +
                      C48943 * C1501 + C48038 * C697 + C48936 * C702) *
                         C23725) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C23726 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C23719 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C23725) *
                        C49140) *
                       C48866 * C49167) *
                      C527 +
                  ((((C26900 + C26899 + C26898) * C23725 +
                     (C26897 + C26896 + C26895) * C23719 +
                     (C26894 + C26893 + C26892) * C23726 +
                     (C26891 + C26890 + C26889) * C48790) *
                        C49140 +
                    ((C29862 + C29861 + C29860) * C23725 +
                     (C29859 + C29858 + C29857) * C23719 +
                     (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                      C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                         C23726 +
                     (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                      C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                         C48790) *
                        C48982) *
                       C48866 * C49167 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C23726 + C30099 * C23719 +
                     C30100 * C23725) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C23726 +
                     (C26702 + C26701 + C26700) * C23719 +
                     (C26699 + C26698 + C26697) * C23725) *
                        C49140) *
                       C48866 * C525) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C23725 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C23719 +
                    (C26697 + C26698 + C26699) * C23726 +
                    (C26700 + C26701 + C26702) * C48790) *
                       C49140 +
                   ((C30085 + C30086 + C30087) * C23725 +
                    (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                    C30092 * C48790) *
                       C48982) *
                      C48866 * C591 -
                  (((C29857 + C29858 + C29859) * C48790 +
                    (C29860 + C29861 + C29862) * C23726 +
                    (C48044 * C1962 + C26650 * C1967 + C48030 * C1500 +
                     C48943 * C1506 + C48038 * C703 + C48936 * C712) *
                        C23719 +
                    (C48044 * C1958 + C26650 * C1961 + C48030 * C1494 +
                     C48943 * C1501 + C48038 * C697 + C48936 * C702) *
                        C23725) *
                       C48982 +
                   ((C26895 + C26896 + C26897) * C48790 +
                    (C26898 + C26899 + C26900) * C23726 +
                    (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                     C48943 * C610 + C48038 * C277 + C48936 * C285) *
                        C23719 +
                    (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                     C48943 * C600 + C48038 * C267 + C48936 * C278) *
                        C23725) *
                       C49140) *
                      C48866 * C592 +
                  (((C48038 * C595 + C48936 * C600 + C48030 * C1296 +
                     C48943 * C1303 + C48044 * C1800 + C26650 * C1803) *
                        C23725 +
                    (C48038 * C601 + C48936 * C610 + C48030 * C1302 +
                     C48943 * C1308 + C48044 * C1804 + C26650 * C1809) *
                        C23719 +
                    (C48038 * C596 + C48936 * C602 + C48030 * C1295 +
                     C48943 * C1301 + C48044 * C1801 + C26650 * C1805) *
                        C23726 +
                    (C48038 * C603 + C48936 * C611 + C48030 * C1300 +
                     C48943 * C1307 + C48044 * C1806 + C26650 * C1810) *
                        C48790) *
                       C49140 +
                   ((C48038 * C1494 + C48936 * C1501 + C48030 * C1958 +
                     C48943 * C1961 + C48044 * C9392 + C26650 * C9395) *
                        C23725 +
                    (C48038 * C1500 + C48936 * C1506 + C48030 * C1962 +
                     C48943 * C1967 + C48044 * C9394 + C26650 * C9398) *
                        C23719 +
                    (C48038 * C1493 + C48936 * C1499 + C48030 * C1959 +
                     C48943 * C1963 + C48044 * C9393 + C26650 * C9396) *
                        C23726 +
                    (C48038 * C1498 + C48936 * C1505 + C48030 * C1964 +
                     C48943 * C1968 + C48044 * C9397 + C26650 * C9399) *
                        C48790) *
                       C48982) *
                      C48866 * C593) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C30085 + C30086 + C30087) * C23725 +
                     (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                     C30092 * C48790) *
                        C48982) *
                       C393 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C23726 +
                     (C48044 * C2381 + C26650 * C2391 + C48030 * C2380 +
                      C48943 * C2390 + C48038 * C954 + C48936 * C963) *
                         C23719 +
                     (C48044 * C2373 + C26650 * C2379 + C48030 * C2372 +
                      C48943 * C2378 + C48038 * C948 + C48936 * C953) *
                         C23725) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C23726 +
                     (C30090 + C30089 + C30088) * C23719 +
                     (C30087 + C30086 + C30085) * C23725) *
                        C49140) *
                       C49169) *
                      C525 +
                  ((((C30647 + C30648 + C30649) * C23725 +
                     (C30650 + C30651 + C30652) * C23719 +
                     (C29862 + C29861 + C29860) * C23726 +
                     (C29859 + C29858 + C29857) * C48790) *
                        C49140 +
                    ((C48038 * C2372 + C48936 * C2378 + C48030 * C2373 +
                      C48943 * C2379 + C48044 * C9860 + C26650 * C9862) *
                         C23725 +
                     (C48038 * C2380 + C48936 * C2390 + C48030 * C2381 +
                      C48943 * C2391 + C48044 * C9864 + C26650 * C9866) *
                         C23719 +
                     (C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C23726 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C23726 +
                     (C30652 + C30651 + C30650) * C23719 +
                     (C30649 + C30648 + C30647) * C23725) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C23726 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C23719 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C23725) *
                        C49140) *
                       C393) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C30085 + C30086 + C30087) * C23725 +
                     (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                     C30092 * C48790) *
                        C48982) *
                       C799 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C23726 +
                     (C48044 * C2381 + C26650 * C2391 + C48030 * C2380 +
                      C48943 * C2390 + C48038 * C954 + C48936 * C963) *
                         C23719 +
                     (C48044 * C2373 + C26650 * C2379 + C48030 * C2372 +
                      C48943 * C2378 + C48038 * C948 + C48936 * C953) *
                         C23725) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C23726 +
                     (C30090 + C30089 + C30088) * C23719 +
                     (C30087 + C30086 + C30085) * C23725) *
                        C49140) *
                       C49169) *
                      C48849 * C527 +
                  (((C30091 * C23725 + C30092 * C23719 +
                     (C27076 + C27075 + C27074) * C23726 +
                     (C27073 + C27072 + C27071) * C48790) *
                        C49140 +
                    ((C30098 + C30097 + C30096) * C23725 +
                     (C30095 + C30094 + C30093) * C23719 +
                     (C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                      C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                         C23726 +
                     (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                      C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C23726 + C30099 * C23719 +
                     C30100 * C23725) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C23726 +
                     (C26702 + C26701 + C26700) * C23719 +
                     (C26699 + C26698 + C26697) * C23725) *
                        C49140) *
                       C799) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C23725 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C23719 +
                     (C26697 + C26698 + C26699) * C23726 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C49140 +
                    ((C30085 + C30086 + C30087) * C23725 +
                     (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                     C30092 * C48790) *
                        C48982) *
                       C799 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C23726 +
                     (C48044 * C2381 + C26650 * C2391 + C48030 * C2380 +
                      C48943 * C2390 + C48038 * C954 + C48936 * C963) *
                         C23719 +
                     (C48044 * C2373 + C26650 * C2379 + C48030 * C2372 +
                      C48943 * C2378 + C48038 * C948 + C48936 * C953) *
                         C23725) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C23726 +
                     (C30090 + C30089 + C30088) * C23719 +
                     (C30087 + C30086 + C30085) * C23725) *
                        C49140) *
                       C49169) *
                      C259 +
                  ((((C30647 + C30648 + C30649) * C23725 +
                     (C30650 + C30651 + C30652) * C23719 +
                     (C29862 + C29861 + C29860) * C23726 +
                     (C29859 + C29858 + C29857) * C48790) *
                        C49140 +
                    ((C48038 * C2372 + C48936 * C2378 + C48030 * C2373 +
                      C48943 * C2379 + C48044 * C9860 + C26650 * C9862) *
                         C23725 +
                     (C48038 * C2380 + C48936 * C2390 + C48030 * C2381 +
                      C48943 * C2391 + C48044 * C9864 + C26650 * C9866) *
                         C23719 +
                     (C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C23726 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C23726 +
                     (C30652 + C30651 + C30650) * C23719 +
                     (C30649 + C30648 + C30647) * C23725) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C23726 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C23719 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C23725) *
                        C49140) *
                       C799) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C23725 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C23719 +
                    (C26697 + C26698 + C26699) * C23726 +
                    (C26700 + C26701 + C26702) * C48790) *
                       C49140 +
                   ((C30085 + C30086 + C30087) * C23725 +
                    (C30088 + C30089 + C30090) * C23719 + C30091 * C23726 +
                    C30092 * C48790) *
                       C48982) *
                      C945 -
                  (((C30093 + C30094 + C30095) * C48790 +
                    (C30096 + C30097 + C30098) * C23726 +
                    (C31199 + C31200 + C31201) * C23719 +
                    (C31202 + C31203 + C31204) * C23725) *
                       C48982 +
                   (C30099 * C48790 + C30100 * C23726 +
                    (C30090 + C30089 + C30088) * C23719 +
                    (C30087 + C30086 + C30085) * C23725) *
                       C49140) *
                      C946 +
                  (((C31204 + C31203 + C31202) * C23725 +
                    (C31201 + C31200 + C31199) * C23719 +
                    (C30098 + C30097 + C30096) * C23726 +
                    (C30095 + C30094 + C30093) * C48790) *
                       C49140 +
                   ((C48038 * C2849 + C48936 * C2856 + C48030 * C3313 +
                     C48943 * C3316 + C48044 * C10274 + C26650 * C10277) *
                        C23725 +
                    (C48038 * C2855 + C48936 * C2861 + C48030 * C3317 +
                     C48943 * C3322 + C48044 * C10276 + C26650 * C10280) *
                        C23719 +
                    (C48038 * C2848 + C48936 * C2854 + C48030 * C3314 +
                     C48943 * C3318 + C48044 * C10275 + C26650 * C10278) *
                        C23726 +
                    (C48038 * C2853 + C48936 * C2860 + C48030 * C3319 +
                     C48943 * C3323 + C48044 * C10279 + C26650 * C10281) *
                        C48790) *
                       C48982) *
                      C947) *
                 C48849 * C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C48866 * C48849 * C110 -
          ((C23768 + C23769 + C23770 + C23771) * C48790 +
           (C23772 + C23773 + C23774 + C23775) * C23726 +
           (C23767 + C23766 + C23765 + C23764) * C23719 +
           (C23763 + C23762 + C23761 + C23760) * C23725) *
              C48895 * C48866 * C48849 * C111 +
          ((C23775 + C23774 + C23773 + C23772) * C23725 +
           (C23771 + C23770 + C23769 + C23768) * C23719 +
           (C23721 * C122 + C49214 * C132 + C23722 * C264 + C49210 * C272 +
            C23723 * C598 + C49200 * C606 + C23724 * C1297 + C49182 * C1304) *
               C23726 +
           (C23721 * C133 + C49214 * C143 + C23722 * C271 + C49210 * C282 +
            C23723 * C607 + C49200 * C613 + C23724 * C1305 + C49182 * C1309) *
               C48790) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C48866 * C48849 * C110 -
          ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
           (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
           (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
           (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
              C48895 * C48866 * C48849 * C111 +
          (C22566 * C22513 + C22567 * C49213 + C22568 * C22514 +
           C22569 * C49206 + (C22565 + C22564) * C22515 +
           (C22563 + C22562) * C49193 +
           (C22511 * C124 + C22505 * C137 + C22512 * C268 + C48940 * C279) *
               C22516 +
           (C22511 * C136 + C22505 * C145 + C22512 * C280 + C48940 * C286) *
               C49176) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C23725 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C23719 +
            (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
               C49208 +
           ((C22511 * C399 + C22505 * C410 + C22512 * C697 + C48940 * C702) *
                C23725 +
            (C22511 * C409 + C22505 * C417 + C22512 * C703 + C48940 * C712) *
                C23719 +
            (C22901 + C22900) * C23726 + (C22899 + C22898) * C48790) *
               C49197 +
           ((C22511 * C948 + C22505 * C953 + C22512 * C2372 + C48940 * C2378) *
                C23725 +
            (C22511 * C954 + C22505 * C963 + C22512 * C2380 + C48940 * C2390) *
                C23719 +
            (C24962 + C24963) * C23726 + (C24964 + C24965) * C48790) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C24966 + C24967) * C48790 + (C24968 + C24969) * C23726 +
            (C24965 + C24964) * C23719 + (C24963 + C24962) * C23725) *
               C49175 +
           ((C22894 + C22895) * C48790 + (C22896 + C22897) * C23726 +
            (C22898 + C22899) * C23719 + (C22900 + C22901) * C23725) *
               C49197 +
           ((C22557 + C22556) * C48790 + (C22555 + C22554) * C23726 +
            (C22553 + C22552) * C23719 + (C22551 + C22550) * C23725) *
               C49208) *
              C48866 * C48849 * C111 +
          ((C22566 * C23725 + C22567 * C23719 + C22568 * C23726 +
            C22569 * C48790) *
               C49208 +
           ((C22897 + C22896) * C23725 + (C22895 + C22894) * C23719 +
            (C22893 + C22892) * C23726 + (C22891 + C22890) * C48790) *
               C49197 +
           ((C24969 + C24968) * C23725 + (C24967 + C24966) * C23719 +
            (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                C23726 +
            (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                C48790) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C48866 * C259 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C23929 + C23928 + C23927 + C23926) * C23725 +
            (C23925 + C23924 + C23923 + C23922) * C23719 +
            (C23721 * C265 + C49214 * C274 + C23722 * C597 + C49210 * C604 +
             C23723 * C1294 + C49200 * C1299 + C23724 * C1802 +
             C49182 * C1807) *
                C23726 +
            (C23721 * C273 + C49214 * C283 + C23722 * C605 + C49210 * C612 +
             C23723 * C1298 + C49200 * C1306 + C23724 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C48866 * C259 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C22735 + C22734) * C22513 + (C22733 + C22732) * C49213 +
            (C22731 + C22730) * C22514 + (C22729 + C22728) * C49206 +
            (C22727 + C22726) * C22515 + (C22725 + C22724) * C49193 +
            (C22511 * C263 + C22505 * C270 + C22512 * C599 + C48940 * C608) *
                C22516 +
            (C22511 * C269 + C22505 * C281 + C22512 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C22511 * C399 + C22505 * C410 + C22512 * C697 + C48940 * C702) *
                 C23725 +
             (C22511 * C409 + C22505 * C417 + C22512 * C703 + C48940 * C712) *
                 C23719 +
             (C22901 + C22900) * C23726 + (C22899 + C22898) * C48790) *
                C49197 +
            ((C22511 * C948 + C22505 * C953 + C22512 * C2372 + C48940 * C2378) *
                 C23725 +
             (C22511 * C954 + C22505 * C963 + C22512 * C2380 + C48940 * C2390) *
                 C23719 +
             (C24962 + C24963) * C23726 + (C24964 + C24965) * C48790) *
                C49175) *
               C48866 * C259 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C23726 +
             (C22512 * C2381 + C48940 * C2391 + C22511 * C2380 +
              C22505 * C2390) *
                 C23719 +
             (C22512 * C2373 + C48940 * C2379 + C22511 * C2372 +
              C22505 * C2378) *
                 C23725) *
                C49175 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C23726 +
             (C22512 * C1500 + C48940 * C1506 + C22511 * C703 + C22505 * C712) *
                 C23719 +
             (C22512 * C1494 + C48940 * C1501 + C22511 * C697 + C22505 * C702) *
                 C23725) *
                C49197 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C23726 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C23719 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C23725) *
                C49208) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C23725 + (C22733 + C22732) * C23719 +
             (C22731 + C22730) * C23726 + (C22729 + C22728) * C48790) *
                C49208 +
            ((C25187 + C25186) * C23725 + (C25185 + C25184) * C23719 +
             (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                 C23726 +
             (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                 C48790) *
                C49197 +
            ((C25183 + C25182) * C23725 + (C25181 + C25180) * C23719 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C23726 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C48790) *
                C49175) *
               C48866 * C49167 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C23726 +
             (C24965 + C24964) * C23719 + (C24963 + C24962) * C23725) *
                C49175 +
            ((C22894 + C22895) * C48790 + (C22896 + C22897) * C23726 +
             (C22898 + C22899) * C23719 + (C22900 + C22901) * C23725) *
                C49197 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C23726 +
             (C22553 + C22552) * C23719 + (C22551 + C22550) * C23725) *
                C49208) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C393 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C24083 + C24082 + C24081 + C24080) * C23725 +
            (C24079 + C24078 + C24077 + C24076) * C23719 +
            (C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C23726 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C393 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C22901 + C22900) * C22513 + (C22899 + C22898) * C49213 +
            (C22897 + C22896) * C22514 + (C22895 + C22894) * C49206 +
            (C22893 + C22892) * C22515 + (C22891 + C22890) * C49193 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C22516 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
             C25390 * C23726 + C25391 * C48790) *
                C49197 +
            ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
             C25400 * C23726 + C25401 * C48790) *
                C49175) *
               C393 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C23726 +
             (C22512 * C3317 + C48940 * C3322 + C22511 * C2855 +
              C22505 * C2861) *
                 C23719 +
             (C22512 * C3313 + C48940 * C3316 + C22511 * C2849 +
              C22505 * C2856) *
                 C23725) *
                C49175 +
            (C25410 * C48790 + C25411 * C23726 + (C25421 + C25420) * C23719 +
             (C25419 + C25418) * C23725) *
                C49197 +
            (C25412 * C48790 + C25413 * C23726 + (C25417 + C25416) * C23719 +
             (C25415 + C25414) * C23725) *
                C49208) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C23725 + C25391 * C23719 + (C22897 + C22896) * C23726 +
             (C22895 + C22894) * C48790) *
                C49208 +
            (C25400 * C23725 + C25401 * C23719 + (C24969 + C24968) * C23726 +
             (C24967 + C24966) * C48790) *
                C49197 +
            ((C25425 + C25424) * C23725 + (C25423 + C25422) * C23719 +
             (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
              C48940 * C3320) *
                 C23726 +
             (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
              C48940 * C3324) *
                 C48790) *
                C49175) *
               C49169 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C23726 +
             C25410 * C23719 + C25411 * C23725) *
                C49175 +
            ((C22894 + C22895) * C48790 + (C22896 + C22897) * C23726 +
             C25412 * C23719 + C25413 * C23725) *
                C49197 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C23726 +
             (C22553 + C22552) * C23719 + (C22551 + C22550) * C23725) *
                C49208) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C48866 * C525 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C23929 + C23928 + C23927 + C23926) * C23725 +
            (C23925 + C23924 + C23923 + C23922) * C23719 +
            (C23721 * C265 + C49214 * C274 + C23722 * C597 + C49210 * C604 +
             C23723 * C1294 + C49200 * C1299 + C23724 * C1802 +
             C49182 * C1807) *
                C23726 +
            (C23721 * C273 + C49214 * C283 + C23722 * C605 + C49210 * C612 +
             C23723 * C1298 + C49200 * C1306 + C23724 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C48866 * C525 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C22735 + C22734) * C22513 + (C22733 + C22732) * C49213 +
            (C22731 + C22730) * C22514 + (C22729 + C22728) * C49206 +
            (C22727 + C22726) * C22515 + (C22725 + C22724) * C49193 +
            (C22511 * C263 + C22505 * C270 + C22512 * C599 + C48940 * C608) *
                C22516 +
            (C22511 * C269 + C22505 * C281 + C22512 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
             C25390 * C23726 + C25391 * C48790) *
                C49197 +
            ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
             C25400 * C23726 + C25401 * C48790) *
                C49175) *
               C48866 * C525 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C23726 +
             (C22512 * C2381 + C48940 * C2391 + C22511 * C2380 +
              C22505 * C2390) *
                 C23719 +
             (C22512 * C2373 + C48940 * C2379 + C22511 * C2372 +
              C22505 * C2378) *
                 C23725) *
                C49175 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C23726 +
             (C22512 * C1500 + C48940 * C1506 + C22511 * C703 + C22505 * C712) *
                 C23719 +
             (C22512 * C1494 + C48940 * C1501 + C22511 * C697 + C22505 * C702) *
                 C23725) *
                C49197 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C23726 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C23719 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C23725) *
                C49208) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C23725 + (C22733 + C22732) * C23719 +
             (C22731 + C22730) * C23726 + (C22729 + C22728) * C48790) *
                C49208 +
            ((C25187 + C25186) * C23725 + (C25185 + C25184) * C23719 +
             (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                 C23726 +
             (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                 C48790) *
                C49197 +
            ((C25183 + C25182) * C23725 + (C25181 + C25180) * C23719 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C23726 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C48790) *
                C49175) *
               C48866 * C49167 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C23726 +
             C25410 * C23719 + C25411 * C23725) *
                C49175 +
            ((C22894 + C22895) * C48790 + (C22896 + C22897) * C23726 +
             C25412 * C23719 + C25413 * C23725) *
                C49197 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C23726 +
             (C22553 + C22552) * C23719 + (C22551 + C22550) * C23725) *
                C49208) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C48866 * C591 -
          ((C23922 + C23923 + C23924 + C23925) * C48790 +
           (C23926 + C23927 + C23928 + C23929) * C23726 +
           (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
            C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
               C23719 +
           (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
            C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
               C23725) *
              C48895 * C48866 * C592 +
          ((C23721 * C595 + C49214 * C600 + C23722 * C1296 + C49210 * C1303 +
            C23723 * C1800 + C49200 * C1803 + C23724 * C9302 + C49182 * C9305) *
               C23725 +
           (C23721 * C601 + C49214 * C610 + C23722 * C1302 + C49210 * C1308 +
            C23723 * C1804 + C49200 * C1809 + C23724 * C9304 + C49182 * C9308) *
               C23719 +
           (C23721 * C596 + C49214 * C602 + C23722 * C1295 + C49210 * C1301 +
            C23723 * C1801 + C49200 * C1805 + C23724 * C9303 + C49182 * C9306) *
               C23726 +
           (C23721 * C603 + C49214 * C611 + C23722 * C1300 + C49210 * C1307 +
            C23723 * C1806 + C49200 * C1810 + C23724 * C9307 + C49182 * C9309) *
               C48790) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C48866 * C591 -
          ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
           (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
           (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
           (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
               C49213 +
           (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
               C22513) *
              C48895 * C48866 * C592 +
          ((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
               C22513 +
           (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
               C49213 +
           (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
               C22514 +
           (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
               C49206 +
           (C22511 * C597 + C22505 * C604 + C22512 * C1294 + C48940 * C1299) *
               C22515 +
           (C22511 * C605 + C22505 * C612 + C22512 * C1298 + C48940 * C1306) *
               C49193 +
           (C22511 * C598 + C22505 * C606 + C22512 * C1297 + C48940 * C1304) *
               C22516 +
           (C22511 * C607 + C22505 * C613 + C22512 * C1305 + C48940 * C1309) *
               C49176) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C23725 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C23719 +
            (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
               C49208 +
           ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
            C25390 * C23726 + C25391 * C48790) *
               C49197 +
           ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
            C25400 * C23726 + C25401 * C48790) *
               C49175) *
              C48866 * C591 -
          (((C25180 + C25181) * C48790 + (C25182 + C25183) * C23726 +
            (C22512 * C2381 + C48940 * C2391 + C22511 * C2380 +
             C22505 * C2390) *
                C23719 +
            (C22512 * C2373 + C48940 * C2379 + C22511 * C2372 +
             C22505 * C2378) *
                C23725) *
               C49175 +
           ((C25184 + C25185) * C48790 + (C25186 + C25187) * C23726 +
            (C22512 * C1500 + C48940 * C1506 + C22511 * C703 + C22505 * C712) *
                C23719 +
            (C22512 * C1494 + C48940 * C1501 + C22511 * C697 + C22505 * C702) *
                C23725) *
               C49197 +
           ((C22732 + C22733) * C48790 + (C22734 + C22735) * C23726 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C23719 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C23725) *
               C49208) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C23725 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C23719 +
            (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
                C23726 +
            (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
                C48790) *
               C49208 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C23725 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C23719 +
            (C22511 * C1493 + C22505 * C1499 + C22512 * C1959 +
             C48940 * C1963) *
                C23726 +
            (C22511 * C1498 + C22505 * C1505 + C22512 * C1964 +
             C48940 * C1968) *
                C48790) *
               C49197 +
           ((C22511 * C2373 + C22505 * C2379 + C22512 * C9860 +
             C48940 * C9862) *
                C23725 +
            (C22511 * C2381 + C22505 * C2391 + C22512 * C9864 +
             C48940 * C9866) *
                C23719 +
            (C22511 * C2375 + C22505 * C2383 + C22512 * C10124 +
             C48940 * C10125) *
                C23726 +
            (C22511 * C2385 + C22505 * C2393 + C22512 * C10126 +
             C48940 * C10127) *
                C48790) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C393 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C525 +
          (((C23721 * C697 + C49214 * C702 + C23722 * C1494 + C49210 * C1501 +
             C23723 * C1958 + C49200 * C1961 + C23724 * C9392 +
             C49182 * C9395) *
                C23725 +
            (C23721 * C703 + C49214 * C712 + C23722 * C1500 + C49210 * C1506 +
             C23723 * C1962 + C49200 * C1967 + C23724 * C9394 +
             C49182 * C9398) *
                C23719 +
            (C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
             C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
             C49182 * C9396) *
                C23726 +
            (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
             C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C393 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C525 +
          (((C22511 * C697 + C22505 * C702 + C22512 * C1494 + C48940 * C1501) *
                C22513 +
            (C22511 * C703 + C22505 * C712 + C22512 * C1500 + C48940 * C1506) *
                C49213 +
            (C22511 * C698 + C22505 * C704 + C22512 * C1493 + C48940 * C1499) *
                C22514 +
            (C22511 * C705 + C22505 * C713 + C22512 * C1498 + C48940 * C1505) *
                C49206 +
            (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                C22515 +
            (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                C49193 +
            (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                C22516 +
            (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
             C25390 * C23726 + C25391 * C48790) *
                C49197 +
            ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
             C25400 * C23726 + C25401 * C48790) *
                C49175) *
               C393 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C23726 +
             (C22512 * C3317 + C48940 * C3322 + C22511 * C2855 +
              C22505 * C2861) *
                 C23719 +
             (C22512 * C3313 + C48940 * C3316 + C22511 * C2849 +
              C22505 * C2856) *
                 C23725) *
                C49175 +
            (C25410 * C48790 + C25411 * C23726 + (C25421 + C25420) * C23719 +
             (C25419 + C25418) * C23725) *
                C49197 +
            (C25412 * C48790 + C25413 * C23726 + (C25417 + C25416) * C23719 +
             (C25415 + C25414) * C23725) *
                C49208) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C23725 + (C25978 + C25979) * C23719 +
             (C25187 + C25186) * C23726 + (C25185 + C25184) * C48790) *
                C49208 +
            ((C25980 + C25981) * C23725 + (C25982 + C25983) * C23719 +
             (C25183 + C25182) * C23726 + (C25181 + C25180) * C48790) *
                C49197 +
            ((C22511 * C3313 + C22505 * C3316 + C22512 * C10274 +
              C48940 * C10277) *
                 C23725 +
             (C22511 * C3317 + C22505 * C3322 + C22512 * C10276 +
              C48940 * C10280) *
                 C23719 +
             (C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C23726 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C49175) *
               C49169 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C23726 +
             (C25983 + C25982) * C23719 + (C25981 + C25980) * C23725) *
                C49175 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C23726 +
             (C25979 + C25978) * C23719 + (C25977 + C25976) * C23725) *
                C49197 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C23726 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C23719 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C23725) *
                C49208) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C799 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C24083 + C24082 + C24081 + C24080) * C23725 +
            (C24079 + C24078 + C24077 + C24076) * C23719 +
            (C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C23726 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C799 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C22901 + C22900) * C22513 + (C22899 + C22898) * C49213 +
            (C22897 + C22896) * C22514 + (C22895 + C22894) * C49206 +
            (C22893 + C22892) * C22515 + (C22891 + C22890) * C49193 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C22516 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
             C25390 * C23726 + C25391 * C48790) *
                C49197 +
            ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
             C25400 * C23726 + C25401 * C48790) *
                C49175) *
               C799 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C23726 +
             (C22512 * C3317 + C48940 * C3322 + C22511 * C2855 +
              C22505 * C2861) *
                 C23719 +
             (C22512 * C3313 + C48940 * C3316 + C22511 * C2849 +
              C22505 * C2856) *
                 C23725) *
                C49175 +
            (C25410 * C48790 + C25411 * C23726 + (C25421 + C25420) * C23719 +
             (C25419 + C25418) * C23725) *
                C49197 +
            (C25412 * C48790 + C25413 * C23726 + (C25417 + C25416) * C23719 +
             (C25415 + C25414) * C23725) *
                C49208) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C23725 + C25391 * C23719 + (C22897 + C22896) * C23726 +
             (C22895 + C22894) * C48790) *
                C49208 +
            (C25400 * C23725 + C25401 * C23719 + (C24969 + C24968) * C23726 +
             (C24967 + C24966) * C48790) *
                C49197 +
            ((C25425 + C25424) * C23725 + (C25423 + C25422) * C23719 +
             (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
              C48940 * C3320) *
                 C23726 +
             (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
              C48940 * C3324) *
                 C48790) *
                C49175) *
               C49169 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C23726 +
             C25410 * C23719 + C25411 * C23725) *
                C49175 +
            ((C22894 + C22895) * C48790 + (C22896 + C22897) * C23726 +
             C25412 * C23719 + C25413 * C23725) *
                C49197 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C23726 +
             (C22553 + C22552) * C23719 + (C22551 + C22550) * C23725) *
                C49208) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C799 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C259 +
          (((C23721 * C697 + C49214 * C702 + C23722 * C1494 + C49210 * C1501 +
             C23723 * C1958 + C49200 * C1961 + C23724 * C9392 +
             C49182 * C9395) *
                C23725 +
            (C23721 * C703 + C49214 * C712 + C23722 * C1500 + C49210 * C1506 +
             C23723 * C1962 + C49200 * C1967 + C23724 * C9394 +
             C49182 * C9398) *
                C23719 +
            (C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
             C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
             C49182 * C9396) *
                C23726 +
            (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
             C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C799 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C259 +
          (((C22511 * C697 + C22505 * C702 + C22512 * C1494 + C48940 * C1501) *
                C22513 +
            (C22511 * C703 + C22505 * C712 + C22512 * C1500 + C48940 * C1506) *
                C49213 +
            (C22511 * C698 + C22505 * C704 + C22512 * C1493 + C48940 * C1499) *
                C22514 +
            (C22511 * C705 + C22505 * C713 + C22512 * C1498 + C48940 * C1505) *
                C49206 +
            (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                C22515 +
            (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                C49193 +
            (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                C22516 +
            (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C23725 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C23719 +
             (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
                C49208 +
            ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
             C25390 * C23726 + C25391 * C48790) *
                C49197 +
            ((C25418 + C25419) * C23725 + (C25420 + C25421) * C23719 +
             C25400 * C23726 + C25401 * C48790) *
                C49175) *
               C799 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C23726 +
             (C22512 * C3317 + C48940 * C3322 + C22511 * C2855 +
              C22505 * C2861) *
                 C23719 +
             (C22512 * C3313 + C48940 * C3316 + C22511 * C2849 +
              C22505 * C2856) *
                 C23725) *
                C49175 +
            (C25410 * C48790 + C25411 * C23726 + (C25421 + C25420) * C23719 +
             (C25419 + C25418) * C23725) *
                C49197 +
            (C25412 * C48790 + C25413 * C23726 + (C25417 + C25416) * C23719 +
             (C25415 + C25414) * C23725) *
                C49208) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C23725 + (C25978 + C25979) * C23719 +
             (C25187 + C25186) * C23726 + (C25185 + C25184) * C48790) *
                C49208 +
            ((C25980 + C25981) * C23725 + (C25982 + C25983) * C23719 +
             (C25183 + C25182) * C23726 + (C25181 + C25180) * C48790) *
                C49197 +
            ((C22511 * C3313 + C22505 * C3316 + C22512 * C10274 +
              C48940 * C10277) *
                 C23725 +
             (C22511 * C3317 + C22505 * C3322 + C22512 * C10276 +
              C48940 * C10280) *
                 C23719 +
             (C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C23726 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C49175) *
               C49169 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C23726 +
             (C25983 + C25982) * C23719 + (C25981 + C25980) * C23725) *
                C49175 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C23726 +
             (C25979 + C25978) * C23719 + (C25977 + C25976) * C23725) *
                C49197 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C23726 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C23719 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C23725) *
                C49208) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C945 -
          ((C24076 + C24077 + C24078 + C24079) * C48790 +
           (C24080 + C24081 + C24082 + C24083) * C23726 +
           (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
            C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
               C23719 +
           (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
            C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
               C23725) *
              C48895 * C946 +
          ((C23721 * C948 + C49214 * C953 + C23722 * C2372 + C49210 * C2378 +
            C23723 * C2373 + C49200 * C2379 + C23724 * C9860 + C49182 * C9862) *
               C23725 +
           (C23721 * C954 + C49214 * C963 + C23722 * C2380 + C49210 * C2390 +
            C23723 * C2381 + C49200 * C2391 + C23724 * C9864 + C49182 * C9866) *
               C23719 +
           (C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
            C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
            C49182 * C10125) *
               C23726 +
           (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
            C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
            C49182 * C10127) *
               C48790) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C945 -
          ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
           (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
           (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
           (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
               C49213 +
           (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
               C22513) *
              C48895 * C946 +
          ((C22511 * C948 + C22505 * C953 + C22512 * C2372 + C48940 * C2378) *
               C22513 +
           (C22511 * C954 + C22505 * C963 + C22512 * C2380 + C48940 * C2390) *
               C49213 +
           (C22511 * C949 + C22505 * C955 + C22512 * C2374 + C48940 * C2382) *
               C22514 +
           (C22511 * C956 + C22505 * C964 + C22512 * C2384 + C48940 * C2392) *
               C49206 +
           (C22511 * C950 + C22505 * C957 + C22512 * C2376 + C48940 * C2386) *
               C22515 +
           (C22511 * C958 + C22505 * C965 + C22512 * C2388 + C48940 * C2394) *
               C49193 +
           (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
               C22516 +
           (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
               C49176) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C23725 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C23719 +
            (C22550 + C22551) * C23726 + (C22552 + C22553) * C48790) *
               C49208 +
           ((C25414 + C25415) * C23725 + (C25416 + C25417) * C23719 +
            C25390 * C23726 + C25391 * C48790) *
               C49197 +
           C26538 * C49175) *
              C945 -
          (((C25422 + C25423) * C48790 + (C25424 + C25425) * C23726 +
            (C26532 + C26533) * C23719 + (C26534 + C26535) * C23725) *
               C49175 +
           (C25410 * C48790 + C25411 * C23726 + (C25421 + C25420) * C23719 +
            (C25419 + C25418) * C23725) *
               C49197 +
           (C25412 * C48790 + C25413 * C23726 + (C25417 + C25416) * C23719 +
            (C25415 + C25414) * C23725) *
               C49208) *
              C946 +
          (C26538 * C49208 +
           ((C26535 + C26534) * C23725 + (C26533 + C26532) * C23719 +
            (C25425 + C25424) * C23726 + (C25423 + C25422) * C48790) *
               C49197 +
           ((C22511 * C3751 + C22505 * C3754 + C22512 * C11180 +
             C48940 * C11182) *
                C23725 +
            (C22511 * C3755 + C22505 * C3760 + C22512 * C11184 +
             C48940 * C11186) *
                C23719 +
            (C22511 * C3752 + C22505 * C3756 + C22512 * C17895 +
             C48940 * C17896) *
                C23726 +
            (C22511 * C3757 + C22505 * C3761 + C22512 * C17897 +
             C48940 * C17898) *
                C48790) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47919 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48785 +
            (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
            C22566 * C47925 + C22567 * C26653) *
               C49140 +
           ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
            C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
            C28034 * C26653) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C22890 + C22891) * C26653 + (C22892 + C22893) * C47925 +
            (C22894 + C22895) * C48793 + (C22896 + C22897) * C47915 +
            C25412 * C48785 + C25413 * C47919) *
               C48982 +
           ((C22561 + C22560) * C26653 + (C22559 + C22558) * C47925 +
            (C22557 + C22556) * C48793 + (C22555 + C22554) * C47915 +
            (C22553 + C22552) * C48785 + (C22551 + C22550) * C47919) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C22566 * C47919 + C22567 * C48785 + C22568 * C47915 +
            C22569 * C48793 + (C22565 + C22564) * C47925 +
            (C22563 + C22562) * C26653) *
               C49140 +
           (C28033 * C47919 + C28034 * C48785 + (C22893 + C22892) * C47915 +
            (C22891 + C22890) * C48793 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C47925 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C26653) *
               C48982) *
              C48866 * C48849 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C48866 * C259 -
           (((C28237 + C28238) * C26653 + (C28239 + C28240) * C47925 +
             (C25184 + C25185) * C48793 + (C25186 + C25187) * C47915 +
             (C25979 + C25978) * C48785 + (C25977 + C25976) * C47919) *
                C48982 +
            ((C22728 + C22729) * C26653 + (C22730 + C22731) * C47925 +
             (C22732 + C22733) * C48793 + (C22734 + C22735) * C47915 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48785 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47919) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C47919 + (C22733 + C22732) * C48785 +
             (C22731 + C22730) * C47915 + (C22729 + C22728) * C48793 +
             (C22727 + C22726) * C47925 + (C22725 + C22724) * C26653) *
                C49140 +
            ((C25187 + C25186) * C47919 + (C25185 + C25184) * C48785 +
             (C28240 + C28239) * C47915 + (C28238 + C28237) * C48793 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C47925 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C26653) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C26653 + (C22892 + C22893) * C47925 +
             (C22894 + C22895) * C48793 + (C22896 + C22897) * C47915 +
             C25412 * C48785 + C25413 * C47919) *
                C48982 +
            ((C22561 + C22560) * C26653 + (C22559 + C22558) * C47925 +
             (C22557 + C22556) * C48793 + (C22555 + C22554) * C47915 +
             (C22553 + C22552) * C48785 + (C22551 + C22550) * C47919) *
                C49140) *
               C48866 * C259) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C26653 + (C24968 + C24969) * C47925 +
             C25410 * C48793 + C25411 * C47915 + (C25421 + C25420) * C48785 +
             (C25419 + C25418) * C47919) *
                C48982 +
            (C28435 * C26653 + C28436 * C47925 + C25412 * C48793 +
             C25413 * C47915 + (C25417 + C25416) * C48785 +
             (C25415 + C25414) * C47919) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C47919 + C25391 * C48785 + C28033 * C47915 +
             C28034 * C48793 + (C22893 + C22892) * C47925 +
             (C22891 + C22890) * C26653) *
                C49140 +
            (C25400 * C47919 + C25401 * C48785 + (C24969 + C24968) * C47915 +
             (C24967 + C24966) * C48793 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C47925 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C26653) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C26653 + (C22892 + C22893) * C47925 +
             C28435 * C48793 + C28436 * C47915 + C25412 * C48785 +
             C25413 * C47919) *
                C48982 +
            ((C22561 + C22560) * C26653 + (C22559 + C22558) * C47925 +
             (C22557 + C22556) * C48793 + (C22555 + C22554) * C47915 +
             (C22553 + C22552) * C48785 + (C22551 + C22550) * C47919) *
                C49140) *
               C393) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C48866 * C525 -
           (((C28237 + C28238) * C26653 + (C28239 + C28240) * C47925 +
             (C25184 + C25185) * C48793 + (C25186 + C25187) * C47915 +
             (C25979 + C25978) * C48785 + (C25977 + C25976) * C47919) *
                C48982 +
            ((C22728 + C22729) * C26653 + (C22730 + C22731) * C47925 +
             (C22732 + C22733) * C48793 + (C22734 + C22735) * C47915 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48785 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47919) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C47919 + (C22733 + C22732) * C48785 +
             (C22731 + C22730) * C47915 + (C22729 + C22728) * C48793 +
             (C22727 + C22726) * C47925 + (C22725 + C22724) * C26653) *
                C49140 +
            ((C25187 + C25186) * C47919 + (C25185 + C25184) * C48785 +
             (C28240 + C28239) * C47915 + (C28238 + C28237) * C48793 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C47925 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C26653) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C26653 + (C22892 + C22893) * C47925 +
             C28435 * C48793 + C28436 * C47915 + C25412 * C48785 +
             C25413 * C47919) *
                C48982 +
            ((C22561 + C22560) * C26653 + (C22559 + C22558) * C47925 +
             (C22557 + C22556) * C48793 + (C22555 + C22554) * C47915 +
             (C22553 + C22552) * C48785 + (C22551 + C22550) * C47919) *
                C49140) *
               C48866 * C525) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47919 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48785 +
            (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
            C22566 * C47925 + C22567 * C26653) *
               C49140 +
           ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
            C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
            C28034 * C26653) *
               C48982) *
              C48866 * C591 -
          (((C28237 + C28238) * C26653 + (C28239 + C28240) * C47925 +
            (C25184 + C25185) * C48793 + (C25186 + C25187) * C47915 +
            (C25979 + C25978) * C48785 + (C25977 + C25976) * C47919) *
               C48982 +
           ((C22728 + C22729) * C26653 + (C22730 + C22731) * C47925 +
            (C22732 + C22733) * C48793 + (C22734 + C22735) * C47915 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C48785 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C47919) *
               C49140) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C47919 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C48785 +
            (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
                C47915 +
            (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
                C48793 +
            (C22511 * C597 + C22505 * C604 + C22512 * C1294 + C48940 * C1299) *
                C47925 +
            (C22511 * C605 + C22505 * C612 + C22512 * C1298 + C48940 * C1306) *
                C26653) *
               C49140 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C47919 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C48785 +
            (C22511 * C1493 + C22505 * C1499 + C22512 * C1959 +
             C48940 * C1963) *
                C47915 +
            (C22511 * C1498 + C22505 * C1505 + C22512 * C1964 +
             C48940 * C1968) *
                C48793 +
            (C22511 * C1492 + C22505 * C1497 + C22512 * C1960 +
             C48940 * C1965) *
                C47925 +
            (C22511 * C1496 + C22505 * C1504 + C22512 * C1966 +
             C48940 * C1969) *
                C26653) *
               C48982) *
              C48866 * C593) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C26653 + (C24968 + C24969) * C47925 +
             C25410 * C48793 + C25411 * C47915 + (C25421 + C25420) * C48785 +
             (C25419 + C25418) * C47919) *
                C48982 +
            (C28435 * C26653 + C28436 * C47925 + C25412 * C48793 +
             C25413 * C47915 + (C25417 + C25416) * C48785 +
             (C25415 + C25414) * C47919) *
                C49140) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C47919 + (C25978 + C25979) * C48785 +
             (C25187 + C25186) * C47915 + (C25185 + C25184) * C48793 +
             (C28240 + C28239) * C47925 + (C28238 + C28237) * C26653) *
                C49140 +
            ((C25980 + C25981) * C47919 + (C25982 + C25983) * C48785 +
             (C25183 + C25182) * C47915 + (C25181 + C25180) * C48793 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C47925 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C26653) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C26653 + (C28239 + C28240) * C47925 +
             (C25184 + C25185) * C48793 + (C25186 + C25187) * C47915 +
             (C25979 + C25978) * C48785 + (C25977 + C25976) * C47919) *
                C48982 +
            ((C22728 + C22729) * C26653 + (C22730 + C22731) * C47925 +
             (C22732 + C22733) * C48793 + (C22734 + C22735) * C47915 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48785 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47919) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C26653 + (C24968 + C24969) * C47925 +
             C25410 * C48793 + C25411 * C47915 + (C25421 + C25420) * C48785 +
             (C25419 + C25418) * C47919) *
                C48982 +
            (C28435 * C26653 + C28436 * C47925 + C25412 * C48793 +
             C25413 * C47915 + (C25417 + C25416) * C48785 +
             (C25415 + C25414) * C47919) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C47919 + C25391 * C48785 + C28033 * C47915 +
             C28034 * C48793 + (C22893 + C22892) * C47925 +
             (C22891 + C22890) * C26653) *
                C49140 +
            (C25400 * C47919 + C25401 * C48785 + (C24969 + C24968) * C47915 +
             (C24967 + C24966) * C48793 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C47925 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C26653) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C26653 + (C22892 + C22893) * C47925 +
             C28435 * C48793 + C28436 * C47915 + C25412 * C48785 +
             C25413 * C47919) *
                C48982 +
            ((C22561 + C22560) * C26653 + (C22559 + C22558) * C47925 +
             (C22557 + C22556) * C48793 + (C22555 + C22554) * C47915 +
             (C22553 + C22552) * C48785 + (C22551 + C22550) * C47919) *
                C49140) *
               C799) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47919 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48785 +
             (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
             C22566 * C47925 + C22567 * C26653) *
                C49140 +
            ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
             C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
             C28034 * C26653) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C26653 + (C24968 + C24969) * C47925 +
             C25410 * C48793 + C25411 * C47915 + (C25421 + C25420) * C48785 +
             (C25419 + C25418) * C47919) *
                C48982 +
            (C28435 * C26653 + C28436 * C47925 + C25412 * C48793 +
             C25413 * C47915 + (C25417 + C25416) * C48785 +
             (C25415 + C25414) * C47919) *
                C49140) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C47919 + (C25978 + C25979) * C48785 +
             (C25187 + C25186) * C47915 + (C25185 + C25184) * C48793 +
             (C28240 + C28239) * C47925 + (C28238 + C28237) * C26653) *
                C49140 +
            ((C25980 + C25981) * C47919 + (C25982 + C25983) * C48785 +
             (C25183 + C25182) * C47915 + (C25181 + C25180) * C48793 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C47925 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C26653) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C26653 + (C28239 + C28240) * C47925 +
             (C25184 + C25185) * C48793 + (C25186 + C25187) * C47915 +
             (C25979 + C25978) * C48785 + (C25977 + C25976) * C47919) *
                C48982 +
            ((C22728 + C22729) * C26653 + (C22730 + C22731) * C47925 +
             (C22732 + C22733) * C48793 + (C22734 + C22735) * C47915 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48785 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47919) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47919 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48785 +
            (C22550 + C22551) * C47915 + (C22552 + C22553) * C48793 +
            C22566 * C47925 + C22567 * C26653) *
               C49140 +
           ((C25414 + C25415) * C47919 + (C25416 + C25417) * C48785 +
            C25390 * C47915 + C25391 * C48793 + C28033 * C47925 +
            C28034 * C26653) *
               C48982) *
              C945 -
          (((C24966 + C24967) * C26653 + (C24968 + C24969) * C47925 +
            C25410 * C48793 + C25411 * C47915 + (C25421 + C25420) * C48785 +
            (C25419 + C25418) * C47919) *
               C48982 +
           (C28435 * C26653 + C28436 * C47925 + C25412 * C48793 +
            C25413 * C47915 + (C25417 + C25416) * C48785 +
            (C25415 + C25414) * C47919) *
               C49140) *
              C946 +
          ((C26518 * C47919 + C26519 * C48785 + C25400 * C47915 +
            C25401 * C48793 + (C24969 + C24968) * C47925 +
            (C24967 + C24966) * C26653) *
               C49140 +
           ((C26535 + C26534) * C47919 + (C26533 + C26532) * C48785 +
            (C25425 + C25424) * C47915 + (C25423 + C25422) * C48793 +
            (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
             C48940 * C3320) *
                C47925 +
            (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
             C48940 * C3324) *
                C26653) *
               C48982) *
              C947) *
         C48849 * C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C48866 * C48849 * C110 -
          ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
           (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
           (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
           (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
              C48895 * C48866 * C48849 * C111 +
          (C22566 * C22513 + C22567 * C49213 + C22568 * C22514 +
           C22569 * C49206 + (C22565 + C22564) * C22515 +
           (C22563 + C22562) * C49193 +
           (C22511 * C124 + C22505 * C137 + C22512 * C268 + C48940 * C279) *
               C22516 +
           (C22511 * C136 + C22505 * C145 + C22512 * C280 + C48940 * C286) *
               C49176) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C48866 * C48849 * C110 -
          ((C23768 + C23769 + C23770 + C23771) * C48790 +
           (C23772 + C23773 + C23774 + C23775) * C23726 +
           (C23767 + C23766 + C23765 + C23764) * C23719 +
           (C23763 + C23762 + C23761 + C23760) * C23725) *
              C48895 * C48866 * C48849 * C111 +
          ((C23775 + C23774 + C23773 + C23772) * C23725 +
           (C23771 + C23770 + C23769 + C23768) * C23719 +
           (C23721 * C122 + C49214 * C132 + C23722 * C264 + C49210 * C272 +
            C23723 * C598 + C49200 * C606 + C23724 * C1297 + C49182 * C1304) *
               C23726 +
           (C23721 * C133 + C49214 * C143 + C23722 * C271 + C49210 * C282 +
            C23723 * C607 + C49200 * C613 + C23724 * C1305 + C49182 * C1309) *
               C48790) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C48866 * C259 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C22735 + C22734) * C22513 + (C22733 + C22732) * C49213 +
            (C22731 + C22730) * C22514 + (C22729 + C22728) * C49206 +
            (C22727 + C22726) * C22515 + (C22725 + C22724) * C49193 +
            (C22511 * C263 + C22505 * C270 + C22512 * C599 + C48940 * C608) *
                C22516 +
            (C22511 * C269 + C22505 * C281 + C22512 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C48866 * C259 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C23929 + C23928 + C23927 + C23926) * C23725 +
            (C23925 + C23924 + C23923 + C23922) * C23719 +
            (C23721 * C265 + C49214 * C274 + C23722 * C597 + C49210 * C604 +
             C23723 * C1294 + C49200 * C1299 + C23724 * C1802 +
             C49182 * C1807) *
                C23726 +
            (C23721 * C273 + C49214 * C283 + C23722 * C605 + C49210 * C612 +
             C23723 * C1298 + C49200 * C1306 + C23724 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C393 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C22901 + C22900) * C22513 + (C22899 + C22898) * C49213 +
            (C22897 + C22896) * C22514 + (C22895 + C22894) * C49206 +
            (C22893 + C22892) * C22515 + (C22891 + C22890) * C49193 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C22516 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C393 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C24083 + C24082 + C24081 + C24080) * C23725 +
            (C24079 + C24078 + C24077 + C24076) * C23719 +
            (C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C23726 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C48866 * C525 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C22735 + C22734) * C22513 + (C22733 + C22732) * C49213 +
            (C22731 + C22730) * C22514 + (C22729 + C22728) * C49206 +
            (C22727 + C22726) * C22515 + (C22725 + C22724) * C49193 +
            (C22511 * C263 + C22505 * C270 + C22512 * C599 + C48940 * C608) *
                C22516 +
            (C22511 * C269 + C22505 * C281 + C22512 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C48866 * C525 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C23929 + C23928 + C23927 + C23926) * C23725 +
            (C23925 + C23924 + C23923 + C23922) * C23719 +
            (C23721 * C265 + C49214 * C274 + C23722 * C597 + C49210 * C604 +
             C23723 * C1294 + C49200 * C1299 + C23724 * C1802 +
             C49182 * C1807) *
                C23726 +
            (C23721 * C273 + C49214 * C283 + C23722 * C605 + C49210 * C612 +
             C23723 * C1298 + C49200 * C1306 + C23724 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C48866 * C591 -
          ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
           (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
           (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
           (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
               C49213 +
           (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
               C22513) *
              C48895 * C48866 * C592 +
          ((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
               C22513 +
           (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
               C49213 +
           (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
               C22514 +
           (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
               C49206 +
           (C22511 * C597 + C22505 * C604 + C22512 * C1294 + C48940 * C1299) *
               C22515 +
           (C22511 * C605 + C22505 * C612 + C22512 * C1298 + C48940 * C1306) *
               C49193 +
           (C22511 * C598 + C22505 * C606 + C22512 * C1297 + C48940 * C1304) *
               C22516 +
           (C22511 * C607 + C22505 * C613 + C22512 * C1305 + C48940 * C1309) *
               C49176) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C48866 * C591 -
          ((C23922 + C23923 + C23924 + C23925) * C48790 +
           (C23926 + C23927 + C23928 + C23929) * C23726 +
           (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
            C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
               C23719 +
           (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
            C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
               C23725) *
              C48895 * C48866 * C592 +
          ((C23721 * C595 + C49214 * C600 + C23722 * C1296 + C49210 * C1303 +
            C23723 * C1800 + C49200 * C1803 + C23724 * C9302 + C49182 * C9305) *
               C23725 +
           (C23721 * C601 + C49214 * C610 + C23722 * C1302 + C49210 * C1308 +
            C23723 * C1804 + C49200 * C1809 + C23724 * C9304 + C49182 * C9308) *
               C23719 +
           (C23721 * C596 + C49214 * C602 + C23722 * C1295 + C49210 * C1301 +
            C23723 * C1801 + C49200 * C1805 + C23724 * C9303 + C49182 * C9306) *
               C23726 +
           (C23721 * C603 + C49214 * C611 + C23722 * C1300 + C49210 * C1307 +
            C23723 * C1806 + C49200 * C1810 + C23724 * C9307 + C49182 * C9309) *
               C48790) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C393 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C525 +
          (((C22511 * C697 + C22505 * C702 + C22512 * C1494 + C48940 * C1501) *
                C22513 +
            (C22511 * C703 + C22505 * C712 + C22512 * C1500 + C48940 * C1506) *
                C49213 +
            (C22511 * C698 + C22505 * C704 + C22512 * C1493 + C48940 * C1499) *
                C22514 +
            (C22511 * C705 + C22505 * C713 + C22512 * C1498 + C48940 * C1505) *
                C49206 +
            (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                C22515 +
            (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                C49193 +
            (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                C22516 +
            (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C393 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C525 +
          (((C23721 * C697 + C49214 * C702 + C23722 * C1494 + C49210 * C1501 +
             C23723 * C1958 + C49200 * C1961 + C23724 * C9392 +
             C49182 * C9395) *
                C23725 +
            (C23721 * C703 + C49214 * C712 + C23722 * C1500 + C49210 * C1506 +
             C23723 * C1962 + C49200 * C1967 + C23724 * C9394 +
             C49182 * C9398) *
                C23719 +
            (C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
             C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
             C49182 * C9396) *
                C23726 +
            (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
             C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C799 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C22901 + C22900) * C22513 + (C22899 + C22898) * C49213 +
            (C22897 + C22896) * C22514 + (C22895 + C22894) * C49206 +
            (C22893 + C22892) * C22515 + (C22891 + C22890) * C49193 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C22516 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C22562 + C22563) * C49176 + (C22564 + C22565) * C22516 +
            (C22561 + C22560) * C49193 + (C22559 + C22558) * C22515 +
            (C22557 + C22556) * C49206 + (C22555 + C22554) * C22514 +
            (C22553 + C22552) * C49213 + (C22551 + C22550) * C22513) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C799 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C24083 + C24082 + C24081 + C24080) * C23725 +
            (C24079 + C24078 + C24077 + C24076) * C23719 +
            (C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C23726 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C23768 + C23769 + C23770 + C23771) * C48790 +
            (C23772 + C23773 + C23774 + C23775) * C23726 +
            (C23767 + C23766 + C23765 + C23764) * C23719 +
            (C23763 + C23762 + C23761 + C23760) * C23725) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C22513 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49213 +
            (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
            C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
            C22569 * C49176) *
               C48895 * C799 -
           ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
            (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
            (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
            (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
                C49213 +
            (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
                C22513) *
               C48895 * C49169) *
              C259 +
          (((C22511 * C697 + C22505 * C702 + C22512 * C1494 + C48940 * C1501) *
                C22513 +
            (C22511 * C703 + C22505 * C712 + C22512 * C1500 + C48940 * C1506) *
                C49213 +
            (C22511 * C698 + C22505 * C704 + C22512 * C1493 + C48940 * C1499) *
                C22514 +
            (C22511 * C705 + C22505 * C713 + C22512 * C1498 + C48940 * C1505) *
                C49206 +
            (C22511 * C699 + C22505 * C706 + C22512 * C1492 + C48940 * C1497) *
                C22515 +
            (C22511 * C707 + C22505 * C714 + C22512 * C1496 + C48940 * C1504) *
                C49193 +
            (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                C22516 +
            (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C22724 + C22725) * C49176 + (C22726 + C22727) * C22516 +
            (C22728 + C22729) * C49193 + (C22730 + C22731) * C22515 +
            (C22732 + C22733) * C49206 + (C22734 + C22735) * C22514 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49213 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C22513) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C23725 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C23719 +
            (C23760 + C23761 + C23762 + C23763) * C23726 +
            (C23764 + C23765 + C23766 + C23767) * C48790) *
               C48895 * C799 -
           ((C24076 + C24077 + C24078 + C24079) * C48790 +
            (C24080 + C24081 + C24082 + C24083) * C23726 +
            (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
             C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
                C23719 +
            (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
             C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
                C23725) *
               C48895 * C49169) *
              C259 +
          (((C23721 * C697 + C49214 * C702 + C23722 * C1494 + C49210 * C1501 +
             C23723 * C1958 + C49200 * C1961 + C23724 * C9392 +
             C49182 * C9395) *
                C23725 +
            (C23721 * C703 + C49214 * C712 + C23722 * C1500 + C49210 * C1506 +
             C23723 * C1962 + C49200 * C1967 + C23724 * C9394 +
             C49182 * C9398) *
                C23719 +
            (C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
             C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
             C49182 * C9396) *
                C23726 +
            (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
             C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C23922 + C23923 + C23924 + C23925) * C48790 +
            (C23926 + C23927 + C23928 + C23929) * C23726 +
            (C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C23719 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C23725) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
               C22513 +
           (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
               C49213 +
           (C22550 + C22551) * C22514 + (C22552 + C22553) * C49206 +
           C22566 * C22515 + C22567 * C49193 + C22568 * C22516 +
           C22569 * C49176) *
              C48895 * C945 -
          ((C22890 + C22891) * C49176 + (C22892 + C22893) * C22516 +
           (C22894 + C22895) * C49193 + (C22896 + C22897) * C22515 +
           (C22898 + C22899) * C49206 + (C22900 + C22901) * C22514 +
           (C22512 * C703 + C48940 * C712 + C22511 * C409 + C22505 * C417) *
               C49213 +
           (C22512 * C697 + C48940 * C702 + C22511 * C399 + C22505 * C410) *
               C22513) *
              C48895 * C946 +
          ((C22511 * C948 + C22505 * C953 + C22512 * C2372 + C48940 * C2378) *
               C22513 +
           (C22511 * C954 + C22505 * C963 + C22512 * C2380 + C48940 * C2390) *
               C49213 +
           (C22511 * C949 + C22505 * C955 + C22512 * C2374 + C48940 * C2382) *
               C22514 +
           (C22511 * C956 + C22505 * C964 + C22512 * C2384 + C48940 * C2392) *
               C49206 +
           (C22511 * C950 + C22505 * C957 + C22512 * C2376 + C48940 * C2386) *
               C22515 +
           (C22511 * C958 + C22505 * C965 + C22512 * C2388 + C48940 * C2394) *
               C49193 +
           (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
               C22516 +
           (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
               C49176) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
            C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
               C23725 +
           (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
            C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
               C23719 +
           (C23760 + C23761 + C23762 + C23763) * C23726 +
           (C23764 + C23765 + C23766 + C23767) * C48790) *
              C48895 * C945 -
          ((C24076 + C24077 + C24078 + C24079) * C48790 +
           (C24080 + C24081 + C24082 + C24083) * C23726 +
           (C23724 * C1962 + C49182 * C1967 + C23723 * C1500 + C49200 * C1506 +
            C23722 * C703 + C49210 * C712 + C23721 * C409 + C49214 * C417) *
               C23719 +
           (C23724 * C1958 + C49182 * C1961 + C23723 * C1494 + C49200 * C1501 +
            C23722 * C697 + C49210 * C702 + C23721 * C399 + C49214 * C410) *
               C23725) *
              C48895 * C946 +
          ((C23721 * C948 + C49214 * C953 + C23722 * C2372 + C49210 * C2378 +
            C23723 * C2373 + C49200 * C2379 + C23724 * C9860 + C49182 * C9862) *
               C23725 +
           (C23721 * C954 + C49214 * C963 + C23722 * C2380 + C49210 * C2390 +
            C23723 * C2381 + C49200 * C2391 + C23724 * C9864 + C49182 * C9866) *
               C23719 +
           (C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
            C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
            C49182 * C10125) *
               C23726 +
           (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
            C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
            C49182 * C10127) *
               C48790) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C47909 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C49117 +
                    (C26697 + C26698 + C26699) * C47890 +
                    (C26700 + C26701 + C26702) * C48790) *
                       C31302 +
                   ((C30085 + C30086 + C30087) * C47909 +
                    (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                    C30092 * C48790) *
                       C48982) *
                      C48866 * C48849 * C110 -
                  (((C27071 + C27072 + C27073) * C48790 +
                    (C27074 + C27075 + C27076) * C47890 + C30099 * C49117 +
                    C30100 * C47909) *
                       C48982 +
                   ((C26708 + C26707 + C26706) * C48790 +
                    (C26705 + C26704 + C26703) * C47890 +
                    (C26702 + C26701 + C26700) * C49117 +
                    (C26699 + C26698 + C26697) * C47909) *
                       C31302) *
                      C48866 * C48849 * C111 +
                  ((C26717 * C47909 + C26718 * C49117 +
                    (C26714 + C26713 + C26712) * C47890 +
                    (C26711 + C26710 + C26709) * C48790) *
                       C31302 +
                   ((C27076 + C27075 + C27074) * C47909 +
                    (C27073 + C27072 + C27071) * C49117 +
                    (C48038 * C396 + C48936 * C404 + C48030 * C700 +
                     C48943 * C708 + C48044 * C1495 + C26650 * C1502) *
                        C47890 +
                    (C48038 * C403 + C48936 * C414 + C48030 * C709 +
                     C48943 * C715 + C48044 * C1503 + C26650 * C1507) *
                        C48790) *
                       C48982) *
                      C48866 * C48849 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C48866 * C259 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C47890 +
                     (C30652 + C30651 + C30650) * C49117 +
                     (C30649 + C30648 + C30647) * C47909) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C47890 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C49117 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C47909) *
                        C31302) *
                       C48866 * C49167) *
                      C261 +
                  ((((C26900 + C26899 + C26898) * C47909 +
                     (C26897 + C26896 + C26895) * C49117 +
                     (C26894 + C26893 + C26892) * C47890 +
                     (C26891 + C26890 + C26889) * C48790) *
                        C31302 +
                    ((C29862 + C29861 + C29860) * C47909 +
                     (C29859 + C29858 + C29857) * C49117 +
                     (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                      C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                         C47890 +
                     (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                      C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                         C48790) *
                        C48982) *
                       C48866 * C49167 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C47890 + C30099 * C49117 +
                     C30100 * C47909) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C47890 +
                     (C26702 + C26701 + C26700) * C49117 +
                     (C26699 + C26698 + C26697) * C47909) *
                        C31302) *
                       C48866 * C259) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C393 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C47890 +
                     (C31199 + C31200 + C31201) * C49117 +
                     (C31202 + C31203 + C31204) * C47909) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C47890 +
                     (C30090 + C30089 + C30088) * C49117 +
                     (C30087 + C30086 + C30085) * C47909) *
                        C31302) *
                       C49169) *
                      C48849 * C261 +
                  (((C30091 * C47909 + C30092 * C49117 +
                     (C27076 + C27075 + C27074) * C47890 +
                     (C27073 + C27072 + C27071) * C48790) *
                        C31302 +
                    ((C30098 + C30097 + C30096) * C47909 +
                     (C30095 + C30094 + C30093) * C49117 +
                     (C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                      C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                         C47890 +
                     (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                      C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C47890 + C30099 * C49117 +
                     C30100 * C47909) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C47890 +
                     (C26702 + C26701 + C26700) * C49117 +
                     (C26699 + C26698 + C26697) * C47909) *
                        C31302) *
                       C393) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C48866 * C525 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C47890 +
                     (C30652 + C30651 + C30650) * C49117 +
                     (C30649 + C30648 + C30647) * C47909) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C47890 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C49117 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C47909) *
                        C31302) *
                       C48866 * C49167) *
                      C527 +
                  ((((C26900 + C26899 + C26898) * C47909 +
                     (C26897 + C26896 + C26895) * C49117 +
                     (C26894 + C26893 + C26892) * C47890 +
                     (C26891 + C26890 + C26889) * C48790) *
                        C31302 +
                    ((C29862 + C29861 + C29860) * C47909 +
                     (C29859 + C29858 + C29857) * C49117 +
                     (C48038 * C699 + C48936 * C706 + C48030 * C1492 +
                      C48943 * C1497 + C48044 * C1960 + C26650 * C1965) *
                         C47890 +
                     (C48038 * C707 + C48936 * C714 + C48030 * C1496 +
                      C48943 * C1504 + C48044 * C1966 + C26650 * C1969) *
                         C48790) *
                        C48982) *
                       C48866 * C49167 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C47890 + C30099 * C49117 +
                     C30100 * C47909) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C47890 +
                     (C26702 + C26701 + C26700) * C49117 +
                     (C26699 + C26698 + C26697) * C47909) *
                        C31302) *
                       C48866 * C525) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C47909 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C49117 +
                    (C26697 + C26698 + C26699) * C47890 +
                    (C26700 + C26701 + C26702) * C48790) *
                       C31302 +
                   ((C30085 + C30086 + C30087) * C47909 +
                    (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                    C30092 * C48790) *
                       C48982) *
                      C48866 * C591 -
                  (((C29857 + C29858 + C29859) * C48790 +
                    (C29860 + C29861 + C29862) * C47890 +
                    (C30652 + C30651 + C30650) * C49117 +
                    (C30649 + C30648 + C30647) * C47909) *
                       C48982 +
                   ((C26895 + C26896 + C26897) * C48790 +
                    (C26898 + C26899 + C26900) * C47890 +
                    (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                     C48943 * C610 + C48038 * C277 + C48936 * C285) *
                        C49117 +
                    (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                     C48943 * C600 + C48038 * C267 + C48936 * C278) *
                        C47909) *
                       C31302) *
                      C48866 * C592 +
                  (((C48038 * C595 + C48936 * C600 + C48030 * C1296 +
                     C48943 * C1303 + C48044 * C1800 + C26650 * C1803) *
                        C47909 +
                    (C48038 * C601 + C48936 * C610 + C48030 * C1302 +
                     C48943 * C1308 + C48044 * C1804 + C26650 * C1809) *
                        C49117 +
                    (C48038 * C596 + C48936 * C602 + C48030 * C1295 +
                     C48943 * C1301 + C48044 * C1801 + C26650 * C1805) *
                        C47890 +
                    (C48038 * C603 + C48936 * C611 + C48030 * C1300 +
                     C48943 * C1307 + C48044 * C1806 + C26650 * C1810) *
                        C48790) *
                       C31302 +
                   ((C48038 * C1494 + C48936 * C1501 + C48030 * C1958 +
                     C48943 * C1961 + C48044 * C9392 + C26650 * C9395) *
                        C47909 +
                    (C48038 * C1500 + C48936 * C1506 + C48030 * C1962 +
                     C48943 * C1967 + C48044 * C9394 + C26650 * C9398) *
                        C49117 +
                    (C48038 * C1493 + C48936 * C1499 + C48030 * C1959 +
                     C48943 * C1963 + C48044 * C9393 + C26650 * C9396) *
                        C47890 +
                    (C48038 * C1498 + C48936 * C1505 + C48030 * C1964 +
                     C48943 * C1968 + C48044 * C9397 + C26650 * C9399) *
                        C48790) *
                       C48982) *
                      C48866 * C593) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C393 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C47890 +
                     (C31199 + C31200 + C31201) * C49117 +
                     (C31202 + C31203 + C31204) * C47909) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C47890 +
                     (C30090 + C30089 + C30088) * C49117 +
                     (C30087 + C30086 + C30085) * C47909) *
                        C31302) *
                       C49169) *
                      C525 +
                  ((((C30647 + C30648 + C30649) * C47909 +
                     (C30650 + C30651 + C30652) * C49117 +
                     (C29862 + C29861 + C29860) * C47890 +
                     (C29859 + C29858 + C29857) * C48790) *
                        C31302 +
                    ((C48038 * C2372 + C48936 * C2378 + C48030 * C2373 +
                      C48943 * C2379 + C48044 * C9860 + C26650 * C9862) *
                         C47909 +
                     (C48038 * C2380 + C48936 * C2390 + C48030 * C2381 +
                      C48943 * C2391 + C48044 * C9864 + C26650 * C9866) *
                         C49117 +
                     (C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C47890 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C47890 +
                     (C30652 + C30651 + C30650) * C49117 +
                     (C30649 + C30648 + C30647) * C47909) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C47890 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C49117 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C47909) *
                        C31302) *
                       C393) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C799 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C47890 +
                     (C31199 + C31200 + C31201) * C49117 +
                     (C31202 + C31203 + C31204) * C47909) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C47890 +
                     (C30090 + C30089 + C30088) * C49117 +
                     (C30087 + C30086 + C30085) * C47909) *
                        C31302) *
                       C49169) *
                      C48849 * C527 +
                  (((C30091 * C47909 + C30092 * C49117 +
                     (C27076 + C27075 + C27074) * C47890 +
                     (C27073 + C27072 + C27071) * C48790) *
                        C31302 +
                    ((C30098 + C30097 + C30096) * C47909 +
                     (C30095 + C30094 + C30093) * C49117 +
                     (C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                      C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                         C47890 +
                     (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                      C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C27071 + C27072 + C27073) * C48790 +
                     (C27074 + C27075 + C27076) * C47890 + C30099 * C49117 +
                     C30100 * C47909) *
                        C48982 +
                    ((C26708 + C26707 + C26706) * C48790 +
                     (C26705 + C26704 + C26703) * C47890 +
                     (C26702 + C26701 + C26700) * C49117 +
                     (C26699 + C26698 + C26697) * C47909) *
                        C31302) *
                       C799) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C47909 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C49117 +
                     (C26697 + C26698 + C26699) * C47890 +
                     (C26700 + C26701 + C26702) * C48790) *
                        C31302 +
                    ((C30085 + C30086 + C30087) * C47909 +
                     (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                     C30092 * C48790) *
                        C48982) *
                       C799 -
                   (((C30093 + C30094 + C30095) * C48790 +
                     (C30096 + C30097 + C30098) * C47890 +
                     (C31199 + C31200 + C31201) * C49117 +
                     (C31202 + C31203 + C31204) * C47909) *
                        C48982 +
                    (C30099 * C48790 + C30100 * C47890 +
                     (C30090 + C30089 + C30088) * C49117 +
                     (C30087 + C30086 + C30085) * C47909) *
                        C31302) *
                       C49169) *
                      C259 +
                  ((((C30647 + C30648 + C30649) * C47909 +
                     (C30650 + C30651 + C30652) * C49117 +
                     (C29862 + C29861 + C29860) * C47890 +
                     (C29859 + C29858 + C29857) * C48790) *
                        C31302 +
                    ((C48038 * C2372 + C48936 * C2378 + C48030 * C2373 +
                      C48943 * C2379 + C48044 * C9860 + C26650 * C9862) *
                         C47909 +
                     (C48038 * C2380 + C48936 * C2390 + C48030 * C2381 +
                      C48943 * C2391 + C48044 * C9864 + C26650 * C9866) *
                         C49117 +
                     (C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C47890 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48790) *
                        C48982) *
                       C49169 -
                   (((C29857 + C29858 + C29859) * C48790 +
                     (C29860 + C29861 + C29862) * C47890 +
                     (C30652 + C30651 + C30650) * C49117 +
                     (C30649 + C30648 + C30647) * C47909) *
                        C48982 +
                    ((C26895 + C26896 + C26897) * C48790 +
                     (C26898 + C26899 + C26900) * C47890 +
                     (C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C49117 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C47909) *
                        C31302) *
                       C799) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C47909 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C49117 +
                    (C26697 + C26698 + C26699) * C47890 +
                    (C26700 + C26701 + C26702) * C48790) *
                       C31302 +
                   ((C30085 + C30086 + C30087) * C47909 +
                    (C30088 + C30089 + C30090) * C49117 + C30091 * C47890 +
                    C30092 * C48790) *
                       C48982) *
                      C945 -
                  (((C30093 + C30094 + C30095) * C48790 +
                    (C30096 + C30097 + C30098) * C47890 +
                    (C31199 + C31200 + C31201) * C49117 +
                    (C31202 + C31203 + C31204) * C47909) *
                       C48982 +
                   (C30099 * C48790 + C30100 * C47890 +
                    (C30090 + C30089 + C30088) * C49117 +
                    (C30087 + C30086 + C30085) * C47909) *
                       C31302) *
                      C946 +
                  (((C31204 + C31203 + C31202) * C47909 +
                    (C31201 + C31200 + C31199) * C49117 +
                    (C30098 + C30097 + C30096) * C47890 +
                    (C30095 + C30094 + C30093) * C48790) *
                       C31302 +
                   ((C48038 * C2849 + C48936 * C2856 + C48030 * C3313 +
                     C48943 * C3316 + C48044 * C10274 + C26650 * C10277) *
                        C47909 +
                    (C48038 * C2855 + C48936 * C2861 + C48030 * C3317 +
                     C48943 * C3322 + C48044 * C10276 + C26650 * C10280) *
                        C49117 +
                    (C48038 * C2848 + C48936 * C2854 + C48030 * C3314 +
                     C48943 * C3318 + C48044 * C10275 + C26650 * C10278) *
                        C47890 +
                    (C48038 * C2853 + C48936 * C2860 + C48030 * C3319 +
                     C48943 * C3323 + C48044 * C10279 + C26650 * C10281) *
                        C48790) *
                       C48982) *
                      C947) *
                 C48849 * C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C9219 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C48780) *
                       C48978 +
                   ((C30085 + C30086 + C30087) * C9219 +
                    (C30088 + C30089 + C30090) * C48780) *
                       C48985 +
                   ((C31204 + C31203 + C31202) * C9219 +
                    (C31201 + C31200 + C31199) * C48780) *
                       C36778) *
                      C48866 * C48849 * C110 -
                  (((C30093 + C30094 + C30095) * C48780 +
                    (C30096 + C30097 + C30098) * C9219) *
                       C36778 +
                   (C30099 * C48780 + C30100 * C9219) * C48985 +
                   ((C26702 + C26701 + C26700) * C48780 +
                    (C26699 + C26698 + C26697) * C9219) *
                       C48978) *
                      C48866 * C48849 * C111 +
                  ((C26717 * C9219 + C26718 * C48780) * C48978 +
                   ((C27076 + C27075 + C27074) * C9219 +
                    (C27073 + C27072 + C27071) * C48780) *
                       C48985 +
                   ((C48038 * C950 + C48936 * C957 + C48030 * C2376 +
                     C48943 * C2386 + C48044 * C2377 + C26650 * C2387) *
                        C9219 +
                    (C48038 * C958 + C48936 * C965 + C48030 * C2388 +
                     C48943 * C2394 + C48044 * C2389 + C26650 * C2395) *
                        C48780) *
                       C36778) *
                      C48866 * C48849 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C48866 * C259 -
                   (((C48044 * C9864 + C26650 * C9866 + C48030 * C2381 +
                      C48943 * C2391 + C48038 * C2380 + C48936 * C2390) *
                         C48780 +
                     (C48044 * C9860 + C26650 * C9862 + C48030 * C2373 +
                      C48943 * C2379 + C48038 * C2372 + C48936 * C2378) *
                         C9219) *
                        C36778 +
                    ((C30652 + C30651 + C30650) * C48780 +
                     (C30649 + C30648 + C30647) * C9219) *
                        C48985 +
                    ((C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C48780 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C9219) *
                        C48978) *
                       C48866 * C49167) *
                      C261 +
                  ((((C26900 + C26899 + C26898) * C9219 +
                     (C26897 + C26896 + C26895) * C48780) *
                        C48978 +
                    ((C29862 + C29861 + C29860) * C9219 +
                     (C29859 + C29858 + C29857) * C48780) *
                        C48985 +
                    ((C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C9219 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48780) *
                        C36778) *
                       C48866 * C49167 -
                   (((C30093 + C30094 + C30095) * C48780 +
                     (C30096 + C30097 + C30098) * C9219) *
                        C36778 +
                    (C30099 * C48780 + C30100 * C9219) * C48985 +
                    ((C26702 + C26701 + C26700) * C48780 +
                     (C26699 + C26698 + C26697) * C9219) *
                        C48978) *
                       C48866 * C259) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C393 -
                   (((C48044 * C10276 + C26650 * C10280 + C48030 * C3317 +
                      C48943 * C3322 + C48038 * C2855 + C48936 * C2861) *
                         C48780 +
                     (C48044 * C10274 + C26650 * C10277 + C48030 * C3313 +
                      C48943 * C3316 + C48038 * C2849 + C48936 * C2856) *
                         C9219) *
                        C36778 +
                    ((C31199 + C31200 + C31201) * C48780 +
                     (C31202 + C31203 + C31204) * C9219) *
                        C48985 +
                    ((C30090 + C30089 + C30088) * C48780 +
                     (C30087 + C30086 + C30085) * C9219) *
                        C48978) *
                       C49169) *
                      C48849 * C261 +
                  (((C30091 * C9219 + C30092 * C48780) * C48978 +
                    ((C30098 + C30097 + C30096) * C9219 +
                     (C30095 + C30094 + C30093) * C48780) *
                        C48985 +
                    ((C48038 * C2848 + C48936 * C2854 + C48030 * C3314 +
                      C48943 * C3318 + C48044 * C10275 + C26650 * C10278) *
                         C9219 +
                     (C48038 * C2853 + C48936 * C2860 + C48030 * C3319 +
                      C48943 * C3323 + C48044 * C10279 + C26650 * C10281) *
                         C48780) *
                        C36778) *
                       C49169 -
                   (((C30093 + C30094 + C30095) * C48780 +
                     (C30096 + C30097 + C30098) * C9219) *
                        C36778 +
                    (C30099 * C48780 + C30100 * C9219) * C48985 +
                    ((C26702 + C26701 + C26700) * C48780 +
                     (C26699 + C26698 + C26697) * C9219) *
                        C48978) *
                       C393) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C48866 * C525 -
                   (((C48044 * C9864 + C26650 * C9866 + C48030 * C2381 +
                      C48943 * C2391 + C48038 * C2380 + C48936 * C2390) *
                         C48780 +
                     (C48044 * C9860 + C26650 * C9862 + C48030 * C2373 +
                      C48943 * C2379 + C48038 * C2372 + C48936 * C2378) *
                         C9219) *
                        C36778 +
                    ((C30652 + C30651 + C30650) * C48780 +
                     (C30649 + C30648 + C30647) * C9219) *
                        C48985 +
                    ((C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C48780 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C9219) *
                        C48978) *
                       C48866 * C49167) *
                      C527 +
                  ((((C26900 + C26899 + C26898) * C9219 +
                     (C26897 + C26896 + C26895) * C48780) *
                        C48978 +
                    ((C29862 + C29861 + C29860) * C9219 +
                     (C29859 + C29858 + C29857) * C48780) *
                        C48985 +
                    ((C48038 * C2374 + C48936 * C2382 + C48030 * C2375 +
                      C48943 * C2383 + C48044 * C10124 + C26650 * C10125) *
                         C9219 +
                     (C48038 * C2384 + C48936 * C2392 + C48030 * C2385 +
                      C48943 * C2393 + C48044 * C10126 + C26650 * C10127) *
                         C48780) *
                        C36778) *
                       C48866 * C49167 -
                   (((C30093 + C30094 + C30095) * C48780 +
                     (C30096 + C30097 + C30098) * C9219) *
                        C36778 +
                    (C30099 * C48780 + C30100 * C9219) * C48985 +
                    ((C26702 + C26701 + C26700) * C48780 +
                     (C26699 + C26698 + C26697) * C9219) *
                        C48978) *
                       C48866 * C525) *
                      C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C9219 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C48780) *
                       C48978 +
                   ((C30085 + C30086 + C30087) * C9219 +
                    (C30088 + C30089 + C30090) * C48780) *
                       C48985 +
                   ((C31204 + C31203 + C31202) * C9219 +
                    (C31201 + C31200 + C31199) * C48780) *
                       C36778) *
                      C48866 * C591 -
                  (((C48044 * C9864 + C26650 * C9866 + C48030 * C2381 +
                     C48943 * C2391 + C48038 * C2380 + C48936 * C2390) *
                        C48780 +
                    (C48044 * C9860 + C26650 * C9862 + C48030 * C2373 +
                     C48943 * C2379 + C48038 * C2372 + C48936 * C2378) *
                        C9219) *
                       C36778 +
                   ((C30652 + C30651 + C30650) * C48780 +
                    (C30649 + C30648 + C30647) * C9219) *
                       C48985 +
                   ((C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                     C48943 * C610 + C48038 * C277 + C48936 * C285) *
                        C48780 +
                    (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                     C48943 * C600 + C48038 * C267 + C48936 * C278) *
                        C9219) *
                       C48978) *
                      C48866 * C592 +
                  (((C48038 * C595 + C48936 * C600 + C48030 * C1296 +
                     C48943 * C1303 + C48044 * C1800 + C26650 * C1803) *
                        C9219 +
                    (C48038 * C601 + C48936 * C610 + C48030 * C1302 +
                     C48943 * C1308 + C48044 * C1804 + C26650 * C1809) *
                        C48780) *
                       C48978 +
                   ((C48038 * C1494 + C48936 * C1501 + C48030 * C1958 +
                     C48943 * C1961 + C48044 * C9392 + C26650 * C9395) *
                        C9219 +
                    (C48038 * C1500 + C48936 * C1506 + C48030 * C1962 +
                     C48943 * C1967 + C48044 * C9394 + C26650 * C9398) *
                        C48780) *
                       C48985 +
                   ((C48038 * C2373 + C48936 * C2379 + C48030 * C9860 +
                     C48943 * C9862 + C48044 * C9861 + C26650 * C9863) *
                        C9219 +
                    (C48038 * C2381 + C48936 * C2391 + C48030 * C9864 +
                     C48943 * C9866 + C48044 * C9865 + C26650 * C9867) *
                        C48780) *
                       C36778) *
                      C48866 * C593) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C393 -
                   (((C48044 * C10276 + C26650 * C10280 + C48030 * C3317 +
                      C48943 * C3322 + C48038 * C2855 + C48936 * C2861) *
                         C48780 +
                     (C48044 * C10274 + C26650 * C10277 + C48030 * C3313 +
                      C48943 * C3316 + C48038 * C2849 + C48936 * C2856) *
                         C9219) *
                        C36778 +
                    ((C31199 + C31200 + C31201) * C48780 +
                     (C31202 + C31203 + C31204) * C9219) *
                        C48985 +
                    ((C30090 + C30089 + C30088) * C48780 +
                     (C30087 + C30086 + C30085) * C9219) *
                        C48978) *
                       C49169) *
                      C525 +
                  ((((C30647 + C30648 + C30649) * C9219 +
                     (C30650 + C30651 + C30652) * C48780) *
                        C48978 +
                    ((C47413 + C47414 + C47415) * C9219 +
                     (C47416 + C47417 + C47418) * C48780) *
                        C48985 +
                    ((C48038 * C3313 + C48936 * C3316 + C48030 * C10274 +
                      C48943 * C10277 + C48044 * C10738 + C26650 * C10739) *
                         C9219 +
                     (C48038 * C3317 + C48936 * C3322 + C48030 * C10276 +
                      C48943 * C10280 + C48044 * C10740 + C26650 * C10741) *
                         C48780) *
                        C36778) *
                       C49169 -
                   (((C47418 + C47417 + C47416) * C48780 +
                     (C47415 + C47414 + C47413) * C9219) *
                        C36778 +
                    ((C30652 + C30651 + C30650) * C48780 +
                     (C30649 + C30648 + C30647) * C9219) *
                        C48985 +
                    ((C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C48780 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C9219) *
                        C48978) *
                       C393) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C799 -
                   (((C48044 * C10276 + C26650 * C10280 + C48030 * C3317 +
                      C48943 * C3322 + C48038 * C2855 + C48936 * C2861) *
                         C48780 +
                     (C48044 * C10274 + C26650 * C10277 + C48030 * C3313 +
                      C48943 * C3316 + C48038 * C2849 + C48936 * C2856) *
                         C9219) *
                        C36778 +
                    ((C31199 + C31200 + C31201) * C48780 +
                     (C31202 + C31203 + C31204) * C9219) *
                        C48985 +
                    ((C30090 + C30089 + C30088) * C48780 +
                     (C30087 + C30086 + C30085) * C9219) *
                        C48978) *
                       C49169) *
                      C48849 * C527 +
                  (((C30091 * C9219 + C30092 * C48780) * C48978 +
                    ((C30098 + C30097 + C30096) * C9219 +
                     (C30095 + C30094 + C30093) * C48780) *
                        C48985 +
                    ((C48038 * C2848 + C48936 * C2854 + C48030 * C3314 +
                      C48943 * C3318 + C48044 * C10275 + C26650 * C10278) *
                         C9219 +
                     (C48038 * C2853 + C48936 * C2860 + C48030 * C3319 +
                      C48943 * C3323 + C48044 * C10279 + C26650 * C10281) *
                         C48780) *
                        C36778) *
                       C49169 -
                   (((C30093 + C30094 + C30095) * C48780 +
                     (C30096 + C30097 + C30098) * C9219) *
                        C36778 +
                    (C30099 * C48780 + C30100 * C9219) * C48985 +
                    ((C26702 + C26701 + C26700) * C48780 +
                     (C26699 + C26698 + C26697) * C9219) *
                        C48978) *
                       C799) *
                      C48849 * C49165)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                      C48943 * C278 + C48044 * C595 + C26650 * C600) *
                         C9219 +
                     (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                      C48943 * C285 + C48044 * C601 + C26650 * C610) *
                         C48780) *
                        C48978 +
                    ((C30085 + C30086 + C30087) * C9219 +
                     (C30088 + C30089 + C30090) * C48780) *
                        C48985 +
                    ((C31204 + C31203 + C31202) * C9219 +
                     (C31201 + C31200 + C31199) * C48780) *
                        C36778) *
                       C799 -
                   (((C48044 * C10276 + C26650 * C10280 + C48030 * C3317 +
                      C48943 * C3322 + C48038 * C2855 + C48936 * C2861) *
                         C48780 +
                     (C48044 * C10274 + C26650 * C10277 + C48030 * C3313 +
                      C48943 * C3316 + C48038 * C2849 + C48936 * C2856) *
                         C9219) *
                        C36778 +
                    ((C31199 + C31200 + C31201) * C48780 +
                     (C31202 + C31203 + C31204) * C9219) *
                        C48985 +
                    ((C30090 + C30089 + C30088) * C48780 +
                     (C30087 + C30086 + C30085) * C9219) *
                        C48978) *
                       C49169) *
                      C259 +
                  ((((C30647 + C30648 + C30649) * C9219 +
                     (C30650 + C30651 + C30652) * C48780) *
                        C48978 +
                    ((C47413 + C47414 + C47415) * C9219 +
                     (C47416 + C47417 + C47418) * C48780) *
                        C48985 +
                    ((C48038 * C3313 + C48936 * C3316 + C48030 * C10274 +
                      C48943 * C10277 + C48044 * C10738 + C26650 * C10739) *
                         C9219 +
                     (C48038 * C3317 + C48936 * C3322 + C48030 * C10276 +
                      C48943 * C10280 + C48044 * C10740 + C26650 * C10741) *
                         C48780) *
                        C36778) *
                       C49169 -
                   (((C47418 + C47417 + C47416) * C48780 +
                     (C47415 + C47414 + C47413) * C9219) *
                        C36778 +
                    ((C30652 + C30651 + C30650) * C48780 +
                     (C30649 + C30648 + C30647) * C9219) *
                        C48985 +
                    ((C48044 * C1302 + C26650 * C1308 + C48030 * C601 +
                      C48943 * C610 + C48038 * C277 + C48936 * C285) *
                         C48780 +
                     (C48044 * C1296 + C26650 * C1303 + C48030 * C595 +
                      C48943 * C600 + C48038 * C267 + C48936 * C278) *
                         C9219) *
                        C48978) *
                       C799) *
                      C49167) *
                 C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48038 * C119 + C48936 * C126 + C48030 * C267 +
                     C48943 * C278 + C48044 * C595 + C26650 * C600) *
                        C9219 +
                    (C48038 * C127 + C48936 * C140 + C48030 * C277 +
                     C48943 * C285 + C48044 * C601 + C26650 * C610) *
                        C48780) *
                       C48978 +
                   ((C30085 + C30086 + C30087) * C9219 +
                    (C30088 + C30089 + C30090) * C48780) *
                       C48985 +
                   C47845 * C36778) *
                      C945 -
                  (((C47837 + C47838 + C47839) * C48780 +
                    (C47840 + C47841 + C47842) * C9219) *
                       C36778 +
                   ((C31199 + C31200 + C31201) * C48780 +
                    (C31202 + C31203 + C31204) * C9219) *
                       C48985 +
                   ((C30090 + C30089 + C30088) * C48780 +
                    (C30087 + C30086 + C30085) * C9219) *
                       C48978) *
                      C946 +
                  (C47845 * C48978 +
                   ((C47842 + C47841 + C47840) * C9219 +
                    (C47839 + C47838 + C47837) * C48780) *
                       C48985 +
                   ((C48038 * C3751 + C48936 * C3754 + C48030 * C11180 +
                     C48943 * C11182 + C48044 * C11181 + C26650 * C11183) *
                        C9219 +
                    (C48038 * C3755 + C48936 * C3760 + C48030 * C11184 +
                     C48943 * C11186 + C48044 * C11185 + C26650 * C11187) *
                        C48780) *
                       C36778) *
                      C947) *
                 C48849 * C48815) /
                (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C23721 * C399 + C49214 * C410 + C23722 * C697 + C49210 * C702 +
             C23723 * C1494 + C49200 * C1501 + C23724 * C1958 +
             C49182 * C1961) *
                C9219 +
            (C23721 * C409 + C49214 * C417 + C23722 * C703 + C49210 * C712 +
             C23723 * C1500 + C49200 * C1506 + C23724 * C1962 +
             C49182 * C1967) *
                C48780) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C24076 + C24077 + C24078 + C24079) * C48780 +
            (C24080 + C24081 + C24082 + C24083) * C9219) *
               C48982 +
           ((C23767 + C23766 + C23765 + C23764) * C48780 +
            (C23763 + C23762 + C23761 + C23760) * C9219) *
               C31302) *
              C48866 * C48849 * C111 +
          (((C23775 + C23774 + C23773 + C23772) * C9219 +
            (C23771 + C23770 + C23769 + C23768) * C48780) *
               C31302 +
           ((C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C9219 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48780) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
            C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
            C25413 * C7917) *
               C48982 +
           ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
            (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
            (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C22566 * C7917 + C22567 * C49204 + C22568 * C7918 +
            C22569 * C49191 + (C22565 + C22564) * C7919 +
            (C22563 + C22562) * C49159) *
               C31302 +
           (C28033 * C7917 + C28034 * C49204 + (C22893 + C22892) * C7918 +
            (C22891 + C22890) * C49191 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C7919 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49159) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C9219 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48780) *
               C49215 +
           ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
           (C26518 * C9219 + C26519 * C48780) * C49203 +
           ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
              C48866 * C48849 * C110 -
          (((C25422 + C25423) * C48780 + (C25424 + C25425) * C9219) * C49188 +
           (C25410 * C48780 + C25411 * C9219) * C49203 +
           (C25412 * C48780 + C25413 * C9219) * C49212 +
           ((C22553 + C22552) * C48780 + (C22551 + C22550) * C9219) * C49215) *
              C48866 * C48849 * C111 +
          ((C22566 * C9219 + C22567 * C48780) * C49215 +
           (C28033 * C9219 + C28034 * C48780) * C49212 +
           ((C24969 + C24968) * C9219 + (C24967 + C24966) * C48780) * C49203 +
           ((C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
             C48940 * C3320) *
                C9219 +
            (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
             C48940 * C3324) *
                C48780) *
               C49188) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C23721 * C399 + C49214 * C410 + C23722 * C697 + C49210 * C702 +
              C23723 * C1494 + C49200 * C1501 + C23724 * C1958 +
              C49182 * C1961) *
                 C9219 +
             (C23721 * C409 + C49214 * C417 + C23722 * C703 + C49210 * C712 +
              C23723 * C1500 + C49200 * C1506 + C23724 * C1962 +
              C49182 * C1967) *
                 C48780) *
                C48982) *
               C48866 * C259 -
           (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 +
              C49200 * C1967 + C23722 * C1500 + C49210 * C1506 + C23721 * C703 +
              C49214 * C712) *
                 C48780 +
             (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 +
              C49200 * C1961 + C23722 * C1494 + C49210 * C1501 + C23721 * C697 +
              C49214 * C702) *
                 C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C23929 + C23928 + C23927 + C23926) * C9219 +
             (C23925 + C23924 + C23923 + C23922) * C48780) *
                C31302 +
            ((C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
              C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
              C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C48866 * C259 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C7917 + (C22733 + C22732) * C49204 +
             (C22731 + C22730) * C7918 + (C22729 + C22728) * C49191 +
             (C22727 + C22726) * C7919 + (C22725 + C22724) * C49159) *
                C31302 +
            ((C25187 + C25186) * C7917 + (C25185 + C25184) * C49204 +
             (C28240 + C28239) * C7918 + (C28238 + C28237) * C49191 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C7919 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C48866 * C259 -
           (((C22512 * C10276 + C48940 * C10280 + C22511 * C3317 +
              C22505 * C3322) *
                 C48780 +
             (C22512 * C10274 + C48940 * C10277 + C22511 * C3313 +
              C22505 * C3316) *
                 C9219) *
                C49188 +
            ((C25983 + C25982) * C48780 + (C25981 + C25980) * C9219) * C49203 +
            ((C25979 + C25978) * C48780 + (C25977 + C25976) * C9219) * C49212 +
            ((C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48780 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C9219) *
                C49215) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C9219 + (C22733 + C22732) * C48780) * C49215 +
            ((C25187 + C25186) * C9219 + (C25185 + C25184) * C48780) * C49212 +
            ((C25183 + C25182) * C9219 + (C25181 + C25180) * C48780) * C49203 +
            ((C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C9219 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48780) *
                C49188) *
               C48866 * C49167 -
           (((C25422 + C25423) * C48780 + (C25424 + C25425) * C9219) * C49188 +
            (C25410 * C48780 + C25411 * C9219) * C49203 +
            (C25412 * C48780 + C25413 * C9219) * C49212 +
            ((C22553 + C22552) * C48780 + (C22551 + C22550) * C9219) * C49215) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C393 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C48849 * C261 +
          ((((C24083 + C24082 + C24081 + C24080) * C9219 +
             (C24079 + C24078 + C24077 + C24076) * C48780) *
                C31302 +
            ((C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
              C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
              C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C7917 + C25391 * C49204 + C28033 * C7918 +
             C28034 * C49191 + (C22893 + C22892) * C7919 +
             (C22891 + C22890) * C49159) *
                C31302 +
            (C25400 * C7917 + C25401 * C49204 + (C24969 + C24968) * C7918 +
             (C24967 + C24966) * C49191 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C7919 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C393 -
           (((C22512 * C11184 + C48940 * C11186 + C22511 * C3755 +
              C22505 * C3760) *
                 C48780 +
             (C22512 * C11180 + C48940 * C11182 + C22511 * C3751 +
              C22505 * C3754) *
                 C9219) *
                C49188 +
            ((C26532 + C26533) * C48780 + (C26534 + C26535) * C9219) * C49203 +
            ((C25421 + C25420) * C48780 + (C25419 + C25418) * C9219) * C49212 +
            ((C25417 + C25416) * C48780 + (C25415 + C25414) * C9219) * C49215) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C9219 + C25391 * C48780) * C49215 +
            (C25400 * C9219 + C25401 * C48780) * C49212 +
            ((C25425 + C25424) * C9219 + (C25423 + C25422) * C48780) * C49203 +
            ((C22511 * C3752 + C22505 * C3756 + C22512 * C17895 +
              C48940 * C17896) *
                 C9219 +
             (C22511 * C3757 + C22505 * C3761 + C22512 * C17897 +
              C48940 * C17898) *
                 C48780) *
                C49188) *
               C49169 -
           (((C25422 + C25423) * C48780 + (C25424 + C25425) * C9219) * C49188 +
            (C25410 * C48780 + C25411 * C9219) * C49203 +
            (C25412 * C48780 + C25413 * C9219) * C49212 +
            ((C22553 + C22552) * C48780 + (C22551 + C22550) * C9219) * C49215) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C48866 * C525 -
           (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 +
              C49200 * C1967 + C23722 * C1500 + C49210 * C1506 + C23721 * C703 +
              C49214 * C712) *
                 C48780 +
             (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 +
              C49200 * C1961 + C23722 * C1494 + C49210 * C1501 + C23721 * C697 +
              C49214 * C702) *
                 C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C23929 + C23928 + C23927 + C23926) * C9219 +
             (C23925 + C23924 + C23923 + C23922) * C48780) *
                C31302 +
            ((C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
              C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
              C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C48866 * C525 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C7917 + (C22733 + C22732) * C49204 +
             (C22731 + C22730) * C7918 + (C22729 + C22728) * C49191 +
             (C22727 + C22726) * C7919 + (C22725 + C22724) * C49159) *
                C31302 +
            ((C25187 + C25186) * C7917 + (C25185 + C25184) * C49204 +
             (C28240 + C28239) * C7918 + (C28238 + C28237) * C49191 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C7919 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C48866 * C525 -
           (((C22512 * C10276 + C48940 * C10280 + C22511 * C3317 +
              C22505 * C3322) *
                 C48780 +
             (C22512 * C10274 + C48940 * C10277 + C22511 * C3313 +
              C22505 * C3316) *
                 C9219) *
                C49188 +
            ((C25983 + C25982) * C48780 + (C25981 + C25980) * C9219) * C49203 +
            ((C25979 + C25978) * C48780 + (C25977 + C25976) * C9219) * C49212 +
            ((C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48780 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C9219) *
                C49215) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C9219 + (C22733 + C22732) * C48780) * C49215 +
            ((C25187 + C25186) * C9219 + (C25185 + C25184) * C48780) * C49212 +
            ((C25183 + C25182) * C9219 + (C25181 + C25180) * C48780) * C49203 +
            ((C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C9219 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48780) *
                C49188) *
               C48866 * C49167 -
           (((C25422 + C25423) * C48780 + (C25424 + C25425) * C9219) * C49188 +
            (C25410 * C48780 + C25411 * C9219) * C49203 +
            (C25412 * C48780 + C25413 * C9219) * C49212 +
            ((C22553 + C22552) * C48780 + (C22551 + C22550) * C9219) * C49215) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C41508 + C41509 + C41510 + C41511) * C9219 +
            (C41512 + C41513 + C41514 + C41515) * C48780) *
               C48982) *
              C48866 * C591 -
          (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 + C49200 * C1967 +
             C23722 * C1500 + C49210 * C1506 + C23721 * C703 + C49214 * C712) *
                C48780 +
            (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 + C49200 * C1961 +
             C23722 * C1494 + C49210 * C1501 + C23721 * C697 + C49214 * C702) *
                C9219) *
               C48982 +
           ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C48780 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C9219) *
               C31302) *
              C48866 * C592 +
          (((C23721 * C595 + C49214 * C600 + C23722 * C1296 + C49210 * C1303 +
             C23723 * C1800 + C49200 * C1803 + C23724 * C9302 +
             C49182 * C9305) *
                C9219 +
            (C23721 * C601 + C49214 * C610 + C23722 * C1302 + C49210 * C1308 +
             C23723 * C1804 + C49200 * C1809 + C23724 * C9304 +
             C49182 * C9308) *
                C48780) *
               C31302 +
           ((C23721 * C1494 + C49214 * C1501 + C23722 * C1958 + C49210 * C1961 +
             C23723 * C9392 + C49200 * C9395 + C23724 * C9630 +
             C49182 * C9631) *
                C9219 +
            (C23721 * C1500 + C49214 * C1506 + C23722 * C1962 + C49210 * C1967 +
             C23723 * C9394 + C49200 * C9398 + C23724 * C9632 +
             C49182 * C9633) *
                C48780) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C48866 * C591 -
          (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
            (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
            (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
               C48982 +
           ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
            (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49204 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C7917) *
               C31302) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C7917 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C49204 +
            (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
                C7918 +
            (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
                C49191 +
            (C22511 * C597 + C22505 * C604 + C22512 * C1294 + C48940 * C1299) *
                C7919 +
            (C22511 * C605 + C22505 * C612 + C22512 * C1298 + C48940 * C1306) *
                C49159) *
               C31302 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C7917 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C49204 +
            (C22511 * C1493 + C22505 * C1499 + C22512 * C1959 +
             C48940 * C1963) *
                C7918 +
            (C22511 * C1498 + C22505 * C1505 + C22512 * C1964 +
             C48940 * C1968) *
                C49191 +
            (C22511 * C1492 + C22505 * C1497 + C22512 * C1960 +
             C48940 * C1965) *
                C7919 +
            (C22511 * C1496 + C22505 * C1504 + C22512 * C1966 +
             C48940 * C1969) *
                C49159) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C9219 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48780) *
               C49215 +
           ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
           (C26518 * C9219 + C26519 * C48780) * C49203 +
           ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
              C48866 * C591 -
          (((C22512 * C10276 + C48940 * C10280 + C22511 * C3317 +
             C22505 * C3322) *
                C48780 +
            (C22512 * C10274 + C48940 * C10277 + C22511 * C3313 +
             C22505 * C3316) *
                C9219) *
               C49188 +
           ((C25983 + C25982) * C48780 + (C25981 + C25980) * C9219) * C49203 +
           ((C25979 + C25978) * C48780 + (C25977 + C25976) * C9219) * C49212 +
           ((C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C48780 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C9219) *
               C49215) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C9219 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C48780) *
               C49215 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C9219 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C48780) *
               C49212 +
           ((C22511 * C2373 + C22505 * C2379 + C22512 * C9860 +
             C48940 * C9862) *
                C9219 +
            (C22511 * C2381 + C22505 * C2391 + C22512 * C9864 +
             C48940 * C9866) *
                C48780) *
               C49203 +
           ((C22511 * C10274 + C22505 * C10277 + C22512 * C10738 +
             C48940 * C10739) *
                C9219 +
            (C22511 * C10276 + C22505 * C10280 + C22512 * C10740 +
             C48940 * C10741) *
                C48780) *
               C49188) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C393 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C525 +
          ((((C41890 + C41891 + C41892 + C41893) * C9219 +
             (C41894 + C41895 + C41896 + C41897) * C48780) *
                C31302 +
            ((C23721 * C2372 + C49214 * C2378 + C23722 * C2373 +
              C49210 * C2379 + C23723 * C9860 + C49200 * C9862 +
              C23724 * C9861 + C49182 * C9863) *
                 C9219 +
             (C23721 * C2380 + C49214 * C2390 + C23722 * C2381 +
              C49210 * C2391 + C23723 * C9864 + C49200 * C9866 +
              C23724 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C41897 + C41896 + C41895 + C41894) * C48780 +
             (C41893 + C41892 + C41891 + C41890) * C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C7917 + (C25978 + C25979) * C49204 +
             (C25187 + C25186) * C7918 + (C25185 + C25184) * C49191 +
             (C28240 + C28239) * C7919 + (C28238 + C28237) * C49159) *
                C31302 +
            ((C25980 + C25981) * C7917 + (C25982 + C25983) * C49204 +
             (C25183 + C25182) * C7918 + (C25181 + C25180) * C49191 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C7919 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C393 -
           (((C22512 * C11184 + C48940 * C11186 + C22511 * C3755 +
              C22505 * C3760) *
                 C48780 +
             (C22512 * C11180 + C48940 * C11182 + C22511 * C3751 +
              C22505 * C3754) *
                 C9219) *
                C49188 +
            ((C26532 + C26533) * C48780 + (C26534 + C26535) * C9219) * C49203 +
            ((C25421 + C25420) * C48780 + (C25419 + C25418) * C9219) * C49212 +
            ((C25417 + C25416) * C48780 + (C25415 + C25414) * C9219) * C49215) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C9219 + (C25978 + C25979) * C48780) * C49215 +
            ((C25980 + C25981) * C9219 + (C25982 + C25983) * C48780) * C49212 +
            ((C43004 + C43005) * C9219 + (C43006 + C43007) * C48780) * C49203 +
            ((C22511 * C11180 + C22505 * C11182 + C22512 * C11181 +
              C48940 * C11183) *
                 C9219 +
             (C22511 * C11184 + C22505 * C11186 + C22512 * C11185 +
              C48940 * C11187) *
                 C48780) *
                C49188) *
               C49169 -
           (((C43007 + C43006) * C48780 + (C43005 + C43004) * C9219) * C49188 +
            ((C25983 + C25982) * C48780 + (C25981 + C25980) * C9219) * C49203 +
            ((C25979 + C25978) * C48780 + (C25977 + C25976) * C9219) * C49212 +
            ((C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48780 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C9219) *
                C49215) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C799 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C48849 * C527 +
          ((((C24083 + C24082 + C24081 + C24080) * C9219 +
             (C24079 + C24078 + C24077 + C24076) * C48780) *
                C31302 +
            ((C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
              C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
              C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C7917 + C25391 * C49204 + C28033 * C7918 +
             C28034 * C49191 + (C22893 + C22892) * C7919 +
             (C22891 + C22890) * C49159) *
                C31302 +
            (C25400 * C7917 + C25401 * C49204 + (C24969 + C24968) * C7918 +
             (C24967 + C24966) * C49191 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C7919 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C799 -
           (((C22512 * C11184 + C48940 * C11186 + C22511 * C3755 +
              C22505 * C3760) *
                 C48780 +
             (C22512 * C11180 + C48940 * C11182 + C22511 * C3751 +
              C22505 * C3754) *
                 C9219) *
                C49188 +
            ((C26532 + C26533) * C48780 + (C26534 + C26535) * C9219) * C49203 +
            ((C25421 + C25420) * C48780 + (C25419 + C25418) * C9219) * C49212 +
            ((C25417 + C25416) * C48780 + (C25415 + C25414) * C9219) * C49215) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C9219 + C25391 * C48780) * C49215 +
            (C25400 * C9219 + C25401 * C48780) * C49212 +
            ((C25425 + C25424) * C9219 + (C25423 + C25422) * C48780) * C49203 +
            ((C22511 * C3752 + C22505 * C3756 + C22512 * C17895 +
              C48940 * C17896) *
                 C9219 +
             (C22511 * C3757 + C22505 * C3761 + C22512 * C17897 +
              C48940 * C17898) *
                 C48780) *
                C49188) *
               C49169 -
           (((C25422 + C25423) * C48780 + (C25424 + C25425) * C9219) * C49188 +
            (C25410 * C48780 + C25411 * C9219) * C49203 +
            (C25412 * C48780 + C25413 * C9219) * C49212 +
            ((C22553 + C22552) * C48780 + (C22551 + C22550) * C9219) * C49215) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C799 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C259 +
          ((((C41890 + C41891 + C41892 + C41893) * C9219 +
             (C41894 + C41895 + C41896 + C41897) * C48780) *
                C31302 +
            ((C23721 * C2372 + C49214 * C2378 + C23722 * C2373 +
              C49210 * C2379 + C23723 * C9860 + C49200 * C9862 +
              C23724 * C9861 + C49182 * C9863) *
                 C9219 +
             (C23721 * C2380 + C49214 * C2390 + C23722 * C2381 +
              C49210 * C2391 + C23723 * C9864 + C49200 * C9866 +
              C23724 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C41897 + C41896 + C41895 + C41894) * C48780 +
             (C41893 + C41892 + C41891 + C41890) * C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C7917 + (C25978 + C25979) * C49204 +
             (C25187 + C25186) * C7918 + (C25185 + C25184) * C49191 +
             (C28240 + C28239) * C7919 + (C28238 + C28237) * C49159) *
                C31302 +
            ((C25980 + C25981) * C7917 + (C25982 + C25983) * C49204 +
             (C25183 + C25182) * C7918 + (C25181 + C25180) * C49191 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C7919 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C9219 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C48780) *
                C49215 +
            ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
            (C26518 * C9219 + C26519 * C48780) * C49203 +
            ((C26535 + C26534) * C9219 + (C26533 + C26532) * C48780) * C49188) *
               C799 -
           (((C22512 * C11184 + C48940 * C11186 + C22511 * C3755 +
              C22505 * C3760) *
                 C48780 +
             (C22512 * C11180 + C48940 * C11182 + C22511 * C3751 +
              C22505 * C3754) *
                 C9219) *
                C49188 +
            ((C26532 + C26533) * C48780 + (C26534 + C26535) * C9219) * C49203 +
            ((C25421 + C25420) * C48780 + (C25419 + C25418) * C9219) * C49212 +
            ((C25417 + C25416) * C48780 + (C25415 + C25414) * C9219) * C49215) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C9219 + (C25978 + C25979) * C48780) * C49215 +
            ((C25980 + C25981) * C9219 + (C25982 + C25983) * C48780) * C49212 +
            ((C43004 + C43005) * C9219 + (C43006 + C43007) * C48780) * C49203 +
            ((C22511 * C11180 + C22505 * C11182 + C22512 * C11181 +
              C48940 * C11183) *
                 C9219 +
             (C22511 * C11184 + C22505 * C11186 + C22512 * C11185 +
              C48940 * C11187) *
                 C48780) *
                C49188) *
               C49169 -
           (((C43007 + C43006) * C48780 + (C43005 + C43004) * C9219) * C49188 +
            ((C25983 + C25982) * C48780 + (C25981 + C25980) * C9219) * C49203 +
            ((C25979 + C25978) * C48780 + (C25977 + C25976) * C9219) * C49212 +
            ((C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C48780 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C9219) *
                C49215) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C41508 + C41509 + C41510 + C41511) * C9219 +
            (C41512 + C41513 + C41514 + C41515) * C48780) *
               C48982) *
              C945 -
          (((C42272 + C42273 + C42274 + C42275) * C48780 +
            (C42276 + C42277 + C42278 + C42279) * C9219) *
               C48982 +
           ((C41515 + C41514 + C41513 + C41512) * C48780 +
            (C41511 + C41510 + C41509 + C41508) * C9219) *
               C31302) *
              C946 +
          (((C42279 + C42278 + C42277 + C42276) * C9219 +
            (C42275 + C42274 + C42273 + C42272) * C48780) *
               C31302 +
           ((C23721 * C2849 + C49214 * C2856 + C23722 * C3313 + C49210 * C3316 +
             C23723 * C10274 + C49200 * C10277 + C23724 * C10738 +
             C49182 * C10739) *
                C9219 +
            (C23721 * C2855 + C49214 * C2861 + C23722 * C3317 + C49210 * C3322 +
             C23723 * C10276 + C49200 * C10280 + C23724 * C10740 +
             C49182 * C10741) *
                C48780) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C945 -
          (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
            C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
            (C25419 + C25418) * C7917) *
               C48982 +
           (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
            C25413 * C7918 + (C25417 + C25416) * C49204 +
            (C25415 + C25414) * C7917) *
               C31302) *
              C946 +
          ((C26518 * C7917 + C26519 * C49204 + C25400 * C7918 +
            C25401 * C49191 + (C24969 + C24968) * C7919 +
            (C24967 + C24966) * C49159) *
               C31302 +
           ((C26535 + C26534) * C7917 + (C26533 + C26532) * C49204 +
            (C25425 + C25424) * C7918 + (C25423 + C25422) * C49191 +
            (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
             C48940 * C3320) *
                C7919 +
            (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
             C48940 * C3324) *
                C49159) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C9219 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C48780) *
               C49215 +
           ((C25414 + C25415) * C9219 + (C25416 + C25417) * C48780) * C49212 +
           C43378 * C49203 + C43385 * C49188) *
              C945 -
          (((C43381 + C43382) * C48780 + (C43383 + C43384) * C9219) * C49188 +
           ((C26532 + C26533) * C48780 + (C26534 + C26535) * C9219) * C49203 +
           ((C25421 + C25420) * C48780 + (C25419 + C25418) * C9219) * C49212 +
           ((C25417 + C25416) * C48780 + (C25415 + C25414) * C9219) * C49215) *
              C946 +
          (C43378 * C49215 + C43385 * C49212 +
           ((C43384 + C43383) * C9219 + (C43382 + C43381) * C48780) * C49203 +
           ((C22511 * C17981 + C22505 * C17984 + C22512 * C18243 +
             C48940 * C18244) *
                C9219 +
            (C22511 * C17983 + C22505 * C17987 + C22512 * C18245 +
             C48940 * C18246) *
                C48780) *
               C49188) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47909 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49117 +
            (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
               C48978 +
           ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
            C25390 * C47890 + C25391 * C48790) *
               C48985 +
           (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
            C25401 * C48790) *
               C36778) *
              C48866 * C48849 * C110 -
          (((C24966 + C24967) * C48790 + (C24968 + C24969) * C47890 +
            C25410 * C49117 + C25411 * C47909) *
               C36778 +
           (C28435 * C48790 + C28436 * C47890 + C25412 * C49117 +
            C25413 * C47909) *
               C48985 +
           ((C22557 + C22556) * C48790 + (C22555 + C22554) * C47890 +
            (C22553 + C22552) * C49117 + (C22551 + C22550) * C47909) *
               C48978) *
              C48866 * C48849 * C111 +
          ((C22566 * C47909 + C22567 * C49117 + C22568 * C47890 +
            C22569 * C48790) *
               C48978 +
           (C28033 * C47909 + C28034 * C49117 + (C22893 + C22892) * C47890 +
            (C22891 + C22890) * C48790) *
               C48985 +
           ((C24969 + C24968) * C47909 + (C24967 + C24966) * C49117 +
            (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                C47890 +
            (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                C48790) *
               C36778) *
              C48866 * C48849 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C48866 * C259 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C47890 +
             (C25983 + C25982) * C49117 + (C25981 + C25980) * C47909) *
                C36778 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C47890 +
             (C25979 + C25978) * C49117 + (C25977 + C25976) * C47909) *
                C48985 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C47890 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49117 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47909) *
                C48978) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C47909 + (C22733 + C22732) * C49117 +
             (C22731 + C22730) * C47890 + (C22729 + C22728) * C48790) *
                C48978 +
            ((C25187 + C25186) * C47909 + (C25185 + C25184) * C49117 +
             (C28240 + C28239) * C47890 + (C28238 + C28237) * C48790) *
                C48985 +
            ((C25183 + C25182) * C47909 + (C25181 + C25180) * C49117 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C47890 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C48790) *
                C36778) *
               C48866 * C49167 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C47890 +
             C25410 * C49117 + C25411 * C47909) *
                C36778 +
            (C28435 * C48790 + C28436 * C47890 + C25412 * C49117 +
             C25413 * C47909) *
                C48985 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C47890 +
             (C22553 + C22552) * C49117 + (C22551 + C22550) * C47909) *
                C48978) *
               C48866 * C259) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C393 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C47890 +
             (C26532 + C26533) * C49117 + (C26534 + C26535) * C47909) *
                C36778 +
            (C25410 * C48790 + C25411 * C47890 + (C25421 + C25420) * C49117 +
             (C25419 + C25418) * C47909) *
                C48985 +
            (C25412 * C48790 + C25413 * C47890 + (C25417 + C25416) * C49117 +
             (C25415 + C25414) * C47909) *
                C48978) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C47909 + C25391 * C49117 + C28033 * C47890 +
             C28034 * C48790) *
                C48978 +
            (C25400 * C47909 + C25401 * C49117 + (C24969 + C24968) * C47890 +
             (C24967 + C24966) * C48790) *
                C48985 +
            ((C25425 + C25424) * C47909 + (C25423 + C25422) * C49117 +
             (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
              C48940 * C3320) *
                 C47890 +
             (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
              C48940 * C3324) *
                 C48790) *
                C36778) *
               C49169 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C47890 +
             C25410 * C49117 + C25411 * C47909) *
                C36778 +
            (C28435 * C48790 + C28436 * C47890 + C25412 * C49117 +
             C25413 * C47909) *
                C48985 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C47890 +
             (C22553 + C22552) * C49117 + (C22551 + C22550) * C47909) *
                C48978) *
               C393) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C48866 * C525 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C47890 +
             (C25983 + C25982) * C49117 + (C25981 + C25980) * C47909) *
                C36778 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C47890 +
             (C25979 + C25978) * C49117 + (C25977 + C25976) * C47909) *
                C48985 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C47890 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49117 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47909) *
                C48978) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C47909 + (C22733 + C22732) * C49117 +
             (C22731 + C22730) * C47890 + (C22729 + C22728) * C48790) *
                C48978 +
            ((C25187 + C25186) * C47909 + (C25185 + C25184) * C49117 +
             (C28240 + C28239) * C47890 + (C28238 + C28237) * C48790) *
                C48985 +
            ((C25183 + C25182) * C47909 + (C25181 + C25180) * C49117 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C47890 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C48790) *
                C36778) *
               C48866 * C49167 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C47890 +
             C25410 * C49117 + C25411 * C47909) *
                C36778 +
            (C28435 * C48790 + C28436 * C47890 + C25412 * C49117 +
             C25413 * C47909) *
                C48985 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C47890 +
             (C22553 + C22552) * C49117 + (C22551 + C22550) * C47909) *
                C48978) *
               C48866 * C525) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47909 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49117 +
            (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
               C48978 +
           ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
            C25390 * C47890 + C25391 * C48790) *
               C48985 +
           (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
            C25401 * C48790) *
               C36778) *
              C48866 * C591 -
          (((C25180 + C25181) * C48790 + (C25182 + C25183) * C47890 +
            (C25983 + C25982) * C49117 + (C25981 + C25980) * C47909) *
               C36778 +
           ((C25184 + C25185) * C48790 + (C25186 + C25187) * C47890 +
            (C25979 + C25978) * C49117 + (C25977 + C25976) * C47909) *
               C48985 +
           ((C22732 + C22733) * C48790 + (C22734 + C22735) * C47890 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49117 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C47909) *
               C48978) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C47909 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C49117 +
            (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
                C47890 +
            (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
                C48790) *
               C48978 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C47909 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C49117 +
            (C22511 * C1493 + C22505 * C1499 + C22512 * C1959 +
             C48940 * C1963) *
                C47890 +
            (C22511 * C1498 + C22505 * C1505 + C22512 * C1964 +
             C48940 * C1968) *
                C48790) *
               C48985 +
           ((C22511 * C2373 + C22505 * C2379 + C22512 * C9860 +
             C48940 * C9862) *
                C47909 +
            (C22511 * C2381 + C22505 * C2391 + C22512 * C9864 +
             C48940 * C9866) *
                C49117 +
            (C22511 * C2375 + C22505 * C2383 + C22512 * C10124 +
             C48940 * C10125) *
                C47890 +
            (C22511 * C2385 + C22505 * C2393 + C22512 * C10126 +
             C48940 * C10127) *
                C48790) *
               C36778) *
              C48866 * C593) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C393 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C47890 +
             (C26532 + C26533) * C49117 + (C26534 + C26535) * C47909) *
                C36778 +
            (C25410 * C48790 + C25411 * C47890 + (C25421 + C25420) * C49117 +
             (C25419 + C25418) * C47909) *
                C48985 +
            (C25412 * C48790 + C25413 * C47890 + (C25417 + C25416) * C49117 +
             (C25415 + C25414) * C47909) *
                C48978) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C47909 + (C25978 + C25979) * C49117 +
             (C25187 + C25186) * C47890 + (C25185 + C25184) * C48790) *
                C48978 +
            ((C25980 + C25981) * C47909 + (C25982 + C25983) * C49117 +
             (C25183 + C25182) * C47890 + (C25181 + C25180) * C48790) *
                C48985 +
            ((C43004 + C43005) * C47909 + (C43006 + C43007) * C49117 +
             (C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C47890 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C36778) *
               C49169 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C47890 +
             (C25983 + C25982) * C49117 + (C25981 + C25980) * C47909) *
                C36778 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C47890 +
             (C25979 + C25978) * C49117 + (C25977 + C25976) * C47909) *
                C48985 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C47890 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49117 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47909) *
                C48978) *
               C393) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C799 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C47890 +
             (C26532 + C26533) * C49117 + (C26534 + C26535) * C47909) *
                C36778 +
            (C25410 * C48790 + C25411 * C47890 + (C25421 + C25420) * C49117 +
             (C25419 + C25418) * C47909) *
                C48985 +
            (C25412 * C48790 + C25413 * C47890 + (C25417 + C25416) * C49117 +
             (C25415 + C25414) * C47909) *
                C48978) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C47909 + C25391 * C49117 + C28033 * C47890 +
             C28034 * C48790) *
                C48978 +
            (C25400 * C47909 + C25401 * C49117 + (C24969 + C24968) * C47890 +
             (C24967 + C24966) * C48790) *
                C48985 +
            ((C25425 + C25424) * C47909 + (C25423 + C25422) * C49117 +
             (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
              C48940 * C3320) *
                 C47890 +
             (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
              C48940 * C3324) *
                 C48790) *
                C36778) *
               C49169 -
           (((C24966 + C24967) * C48790 + (C24968 + C24969) * C47890 +
             C25410 * C49117 + C25411 * C47909) *
                C36778 +
            (C28435 * C48790 + C28436 * C47890 + C25412 * C49117 +
             C25413 * C47909) *
                C48985 +
            ((C22557 + C22556) * C48790 + (C22555 + C22554) * C47890 +
             (C22553 + C22552) * C49117 + (C22551 + C22550) * C47909) *
                C48978) *
               C799) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C47909 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49117 +
             (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
                C48978 +
            ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
             C25390 * C47890 + C25391 * C48790) *
                C48985 +
            (C26518 * C47909 + C26519 * C49117 + C25400 * C47890 +
             C25401 * C48790) *
                C36778) *
               C799 -
           (((C25422 + C25423) * C48790 + (C25424 + C25425) * C47890 +
             (C26532 + C26533) * C49117 + (C26534 + C26535) * C47909) *
                C36778 +
            (C25410 * C48790 + C25411 * C47890 + (C25421 + C25420) * C49117 +
             (C25419 + C25418) * C47909) *
                C48985 +
            (C25412 * C48790 + C25413 * C47890 + (C25417 + C25416) * C49117 +
             (C25415 + C25414) * C47909) *
                C48978) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C47909 + (C25978 + C25979) * C49117 +
             (C25187 + C25186) * C47890 + (C25185 + C25184) * C48790) *
                C48978 +
            ((C25980 + C25981) * C47909 + (C25982 + C25983) * C49117 +
             (C25183 + C25182) * C47890 + (C25181 + C25180) * C48790) *
                C48985 +
            ((C43004 + C43005) * C47909 + (C43006 + C43007) * C49117 +
             (C22511 * C3314 + C22505 * C3318 + C22512 * C10275 +
              C48940 * C10278) *
                 C47890 +
             (C22511 * C3319 + C22505 * C3323 + C22512 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C36778) *
               C49169 -
           (((C25180 + C25181) * C48790 + (C25182 + C25183) * C47890 +
             (C25983 + C25982) * C49117 + (C25981 + C25980) * C47909) *
                C36778 +
            ((C25184 + C25185) * C48790 + (C25186 + C25187) * C47890 +
             (C25979 + C25978) * C49117 + (C25977 + C25976) * C47909) *
                C48985 +
            ((C22732 + C22733) * C48790 + (C22734 + C22735) * C47890 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49117 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C47909) *
                C48978) *
               C799) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C47909 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49117 +
            (C22550 + C22551) * C47890 + (C22552 + C22553) * C48790) *
               C48978 +
           ((C25414 + C25415) * C47909 + (C25416 + C25417) * C49117 +
            C25390 * C47890 + C25391 * C48790) *
               C48985 +
           C46596 * C36778) *
              C945 -
          (((C25422 + C25423) * C48790 + (C25424 + C25425) * C47890 +
            (C26532 + C26533) * C49117 + (C26534 + C26535) * C47909) *
               C36778 +
           (C25410 * C48790 + C25411 * C47890 + (C25421 + C25420) * C49117 +
            (C25419 + C25418) * C47909) *
               C48985 +
           (C25412 * C48790 + C25413 * C47890 + (C25417 + C25416) * C49117 +
            (C25415 + C25414) * C47909) *
               C48978) *
              C946 +
          (C46596 * C48978 +
           (C43368 * C47909 + C43369 * C49117 + (C25425 + C25424) * C47890 +
            (C25423 + C25422) * C48790) *
               C48985 +
           ((C43384 + C43383) * C47909 + (C43382 + C43381) * C49117 +
            (C22511 * C3752 + C22505 * C3756 + C22512 * C17895 +
             C48940 * C17896) *
                C47890 +
            (C22511 * C3757 + C22505 * C3761 + C22512 * C17897 +
             C48940 * C17898) *
                C48790) *
               C36778) *
              C947) *
         C48849 * C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
            C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
            C25413 * C7917) *
               C48982 +
           ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
            (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
            (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C22566 * C7917 + C22567 * C49204 + C22568 * C7918 +
            C22569 * C49191 + (C22565 + C22564) * C7919 +
            (C22563 + C22562) * C49159) *
               C31302 +
           (C28033 * C7917 + C28034 * C49204 + (C22893 + C22892) * C7918 +
            (C22891 + C22890) * C49191 +
            (C22511 * C395 + C22505 * C402 + C22512 * C701 + C48940 * C710) *
                C7919 +
            (C22511 * C401 + C22505 * C413 + C22512 * C711 + C48940 * C716) *
                C49159) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C23721 * C399 + C49214 * C410 + C23722 * C697 + C49210 * C702 +
             C23723 * C1494 + C49200 * C1501 + C23724 * C1958 +
             C49182 * C1961) *
                C9219 +
            (C23721 * C409 + C49214 * C417 + C23722 * C703 + C49210 * C712 +
             C23723 * C1500 + C49200 * C1506 + C23724 * C1962 +
             C49182 * C1967) *
                C48780) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C24076 + C24077 + C24078 + C24079) * C48780 +
            (C24080 + C24081 + C24082 + C24083) * C9219) *
               C48982 +
           ((C23767 + C23766 + C23765 + C23764) * C48780 +
            (C23763 + C23762 + C23761 + C23760) * C9219) *
               C31302) *
              C48866 * C48849 * C111 +
          (((C23775 + C23774 + C23773 + C23772) * C9219 +
            (C23771 + C23770 + C23769 + C23768) * C48780) *
               C31302 +
           ((C23721 * C397 + C49214 * C406 + C23722 * C699 + C49210 * C706 +
             C23723 * C1492 + C49200 * C1497 + C23724 * C1960 +
             C49182 * C1965) *
                C9219 +
            (C23721 * C405 + C49214 * C415 + C23722 * C707 + C49210 * C714 +
             C23723 * C1496 + C49200 * C1504 + C23724 * C1966 +
             C49182 * C1969) *
                C48780) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C48866 * C259 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C22735 + C22734) * C7917 + (C22733 + C22732) * C49204 +
             (C22731 + C22730) * C7918 + (C22729 + C22728) * C49191 +
             (C22727 + C22726) * C7919 + (C22725 + C22724) * C49159) *
                C31302 +
            ((C25187 + C25186) * C7917 + (C25185 + C25184) * C49204 +
             (C28240 + C28239) * C7918 + (C28238 + C28237) * C49191 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C7919 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C23721 * C399 + C49214 * C410 + C23722 * C697 + C49210 * C702 +
              C23723 * C1494 + C49200 * C1501 + C23724 * C1958 +
              C49182 * C1961) *
                 C9219 +
             (C23721 * C409 + C49214 * C417 + C23722 * C703 + C49210 * C712 +
              C23723 * C1500 + C49200 * C1506 + C23724 * C1962 +
              C49182 * C1967) *
                 C48780) *
                C48982) *
               C48866 * C259 -
           (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 +
              C49200 * C1967 + C23722 * C1500 + C49210 * C1506 + C23721 * C703 +
              C49214 * C712) *
                 C48780 +
             (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 +
              C49200 * C1961 + C23722 * C1494 + C49210 * C1501 + C23721 * C697 +
              C49214 * C702) *
                 C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C23929 + C23928 + C23927 + C23926) * C9219 +
             (C23925 + C23924 + C23923 + C23922) * C48780) *
                C31302 +
            ((C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
              C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
              C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C25390 * C7917 + C25391 * C49204 + C28033 * C7918 +
             C28034 * C49191 + (C22893 + C22892) * C7919 +
             (C22891 + C22890) * C49159) *
                C31302 +
            (C25400 * C7917 + C25401 * C49204 + (C24969 + C24968) * C7918 +
             (C24967 + C24966) * C49191 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C7919 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C393 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C48849 * C261 +
          ((((C24083 + C24082 + C24081 + C24080) * C9219 +
             (C24079 + C24078 + C24077 + C24076) * C48780) *
                C31302 +
            ((C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
              C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
              C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C48866 * C525 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C22735 + C22734) * C7917 + (C22733 + C22732) * C49204 +
             (C22731 + C22730) * C7918 + (C22729 + C22728) * C49191 +
             (C22727 + C22726) * C7919 + (C22725 + C22724) * C49159) *
                C31302 +
            ((C25187 + C25186) * C7917 + (C25185 + C25184) * C49204 +
             (C28240 + C28239) * C7918 + (C28238 + C28237) * C49191 +
             (C22511 * C700 + C22505 * C708 + C22512 * C1495 + C48940 * C1502) *
                 C7919 +
             (C22511 * C709 + C22505 * C715 + C22512 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C48866 * C525 -
           (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 +
              C49200 * C1967 + C23722 * C1500 + C49210 * C1506 + C23721 * C703 +
              C49214 * C712) *
                 C48780 +
             (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 +
              C49200 * C1961 + C23722 * C1494 + C49210 * C1501 + C23721 * C697 +
              C49214 * C702) *
                 C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C23929 + C23928 + C23927 + C23926) * C9219 +
             (C23925 + C23924 + C23923 + C23922) * C48780) *
                C31302 +
            ((C23721 * C698 + C49214 * C704 + C23722 * C1493 + C49210 * C1499 +
              C23723 * C1959 + C49200 * C1963 + C23724 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C23721 * C705 + C49214 * C713 + C23722 * C1498 + C49210 * C1505 +
              C23723 * C1964 + C49200 * C1968 + C23724 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C48866 * C591 -
          (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
            (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
            (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
               C48982 +
           ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
            (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
            (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                C49204 +
            (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                C7917) *
               C31302) *
              C48866 * C592 +
          (((C22511 * C595 + C22505 * C600 + C22512 * C1296 + C48940 * C1303) *
                C7917 +
            (C22511 * C601 + C22505 * C610 + C22512 * C1302 + C48940 * C1308) *
                C49204 +
            (C22511 * C596 + C22505 * C602 + C22512 * C1295 + C48940 * C1301) *
                C7918 +
            (C22511 * C603 + C22505 * C611 + C22512 * C1300 + C48940 * C1307) *
                C49191 +
            (C22511 * C597 + C22505 * C604 + C22512 * C1294 + C48940 * C1299) *
                C7919 +
            (C22511 * C605 + C22505 * C612 + C22512 * C1298 + C48940 * C1306) *
                C49159) *
               C31302 +
           ((C22511 * C1494 + C22505 * C1501 + C22512 * C1958 +
             C48940 * C1961) *
                C7917 +
            (C22511 * C1500 + C22505 * C1506 + C22512 * C1962 +
             C48940 * C1967) *
                C49204 +
            (C22511 * C1493 + C22505 * C1499 + C22512 * C1959 +
             C48940 * C1963) *
                C7918 +
            (C22511 * C1498 + C22505 * C1505 + C22512 * C1964 +
             C48940 * C1968) *
                C49191 +
            (C22511 * C1492 + C22505 * C1497 + C22512 * C1960 +
             C48940 * C1965) *
                C7919 +
            (C22511 * C1496 + C22505 * C1504 + C22512 * C1966 +
             C48940 * C1969) *
                C49159) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C41508 + C41509 + C41510 + C41511) * C9219 +
            (C41512 + C41513 + C41514 + C41515) * C48780) *
               C48982) *
              C48866 * C591 -
          (((C23724 * C9394 + C49182 * C9398 + C23723 * C1962 + C49200 * C1967 +
             C23722 * C1500 + C49210 * C1506 + C23721 * C703 + C49214 * C712) *
                C48780 +
            (C23724 * C9392 + C49182 * C9395 + C23723 * C1958 + C49200 * C1961 +
             C23722 * C1494 + C49210 * C1501 + C23721 * C697 + C49214 * C702) *
                C9219) *
               C48982 +
           ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 + C49200 * C1308 +
             C23722 * C601 + C49210 * C610 + C23721 * C277 + C49214 * C285) *
                C48780 +
            (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 + C49200 * C1303 +
             C23722 * C595 + C49210 * C600 + C23721 * C267 + C49214 * C278) *
                C9219) *
               C31302) *
              C48866 * C592 +
          (((C23721 * C595 + C49214 * C600 + C23722 * C1296 + C49210 * C1303 +
             C23723 * C1800 + C49200 * C1803 + C23724 * C9302 +
             C49182 * C9305) *
                C9219 +
            (C23721 * C601 + C49214 * C610 + C23722 * C1302 + C49210 * C1308 +
             C23723 * C1804 + C49200 * C1809 + C23724 * C9304 +
             C49182 * C9308) *
                C48780) *
               C31302 +
           ((C23721 * C1494 + C49214 * C1501 + C23722 * C1958 + C49210 * C1961 +
             C23723 * C9392 + C49200 * C9395 + C23724 * C9630 +
             C49182 * C9631) *
                C9219 +
            (C23721 * C1500 + C49214 * C1506 + C23722 * C1962 + C49210 * C1967 +
             C23723 * C9394 + C49200 * C9398 + C23724 * C9632 +
             C49182 * C9633) *
                C48780) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C393 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C525 +
          ((((C25976 + C25977) * C7917 + (C25978 + C25979) * C49204 +
             (C25187 + C25186) * C7918 + (C25185 + C25184) * C49191 +
             (C28240 + C28239) * C7919 + (C28238 + C28237) * C49159) *
                C31302 +
            ((C25980 + C25981) * C7917 + (C25982 + C25983) * C49204 +
             (C25183 + C25182) * C7918 + (C25181 + C25180) * C49191 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C7919 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C393 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C525 +
          ((((C41890 + C41891 + C41892 + C41893) * C9219 +
             (C41894 + C41895 + C41896 + C41897) * C48780) *
                C31302 +
            ((C23721 * C2372 + C49214 * C2378 + C23722 * C2373 +
              C49210 * C2379 + C23723 * C9860 + C49200 * C9862 +
              C23724 * C9861 + C49182 * C9863) *
                 C9219 +
             (C23721 * C2380 + C49214 * C2390 + C23722 * C2381 +
              C49210 * C2391 + C23723 * C9864 + C49200 * C9866 +
              C23724 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C41897 + C41896 + C41895 + C41894) * C48780 +
             (C41893 + C41892 + C41891 + C41890) * C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C25390 * C7917 + C25391 * C49204 + C28033 * C7918 +
             C28034 * C49191 + (C22893 + C22892) * C7919 +
             (C22891 + C22890) * C49159) *
                C31302 +
            (C25400 * C7917 + C25401 * C49204 + (C24969 + C24968) * C7918 +
             (C24967 + C24966) * C49191 +
             (C22511 * C951 + C22505 * C959 + C22512 * C2673 + C48940 * C2674) *
                 C7919 +
             (C22511 * C960 + C22505 * C966 + C22512 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C22890 + C22891) * C49159 + (C22892 + C22893) * C7919 +
             C28435 * C49191 + C28436 * C7918 + C25412 * C49204 +
             C25413 * C7917) *
                C48982 +
            ((C22561 + C22560) * C49159 + (C22559 + C22558) * C7919 +
             (C22557 + C22556) * C49191 + (C22555 + C22554) * C7918 +
             (C22553 + C22552) * C49204 + (C22551 + C22550) * C7917) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C799 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C48849 * C527 +
          ((((C24083 + C24082 + C24081 + C24080) * C9219 +
             (C24079 + C24078 + C24077 + C24076) * C48780) *
                C31302 +
            ((C23721 * C949 + C49214 * C955 + C23722 * C2374 + C49210 * C2382 +
              C23723 * C2375 + C49200 * C2383 + C23724 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C23721 * C956 + C49214 * C964 + C23722 * C2384 + C49210 * C2392 +
              C23723 * C2385 + C49200 * C2393 + C23724 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C24076 + C24077 + C24078 + C24079) * C48780 +
             (C24080 + C24081 + C24082 + C24083) * C9219) *
                C48982 +
            ((C23767 + C23766 + C23765 + C23764) * C48780 +
             (C23763 + C23762 + C23761 + C23760) * C9219) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                 C7917 +
             (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                 C49204 +
             (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
             C22566 * C7919 + C22567 * C49159) *
                C31302 +
            ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
             C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
             C28034 * C49159) *
                C48982) *
               C799 -
           (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
             C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
             (C25419 + C25418) * C7917) *
                C48982 +
            (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
             C25413 * C7918 + (C25417 + C25416) * C49204 +
             (C25415 + C25414) * C7917) *
                C31302) *
               C49169) *
              C259 +
          ((((C25976 + C25977) * C7917 + (C25978 + C25979) * C49204 +
             (C25187 + C25186) * C7918 + (C25185 + C25184) * C49191 +
             (C28240 + C28239) * C7919 + (C28238 + C28237) * C49159) *
                C31302 +
            ((C25980 + C25981) * C7917 + (C25982 + C25983) * C49204 +
             (C25183 + C25182) * C7918 + (C25181 + C25180) * C49191 +
             (C22511 * C2376 + C22505 * C2386 + C22512 * C2377 +
              C48940 * C2387) *
                 C7919 +
             (C22511 * C2388 + C22505 * C2394 + C22512 * C2389 +
              C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C28237 + C28238) * C49159 + (C28239 + C28240) * C7919 +
             (C25184 + C25185) * C49191 + (C25186 + C25187) * C7918 +
             (C25979 + C25978) * C49204 + (C25977 + C25976) * C7917) *
                C48982 +
            ((C22728 + C22729) * C49159 + (C22730 + C22731) * C7919 +
             (C22732 + C22733) * C49191 + (C22734 + C22735) * C7918 +
             (C22512 * C601 + C48940 * C610 + C22511 * C277 + C22505 * C285) *
                 C49204 +
             (C22512 * C595 + C48940 * C600 + C22511 * C267 + C22505 * C278) *
                 C7917) *
                C31302) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
              C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                 C9219 +
             (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
              C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                 C48780) *
                C31302 +
            ((C41508 + C41509 + C41510 + C41511) * C9219 +
             (C41512 + C41513 + C41514 + C41515) * C48780) *
                C48982) *
               C799 -
           (((C23724 * C9864 + C49182 * C9866 + C23723 * C2381 +
              C49200 * C2391 + C23722 * C2380 + C49210 * C2390 + C23721 * C954 +
              C49214 * C963) *
                 C48780 +
             (C23724 * C9860 + C49182 * C9862 + C23723 * C2373 +
              C49200 * C2379 + C23722 * C2372 + C49210 * C2378 + C23721 * C948 +
              C49214 * C953) *
                 C9219) *
                C48982 +
            ((C41515 + C41514 + C41513 + C41512) * C48780 +
             (C41511 + C41510 + C41509 + C41508) * C9219) *
                C31302) *
               C49169) *
              C259 +
          ((((C41890 + C41891 + C41892 + C41893) * C9219 +
             (C41894 + C41895 + C41896 + C41897) * C48780) *
                C31302 +
            ((C23721 * C2372 + C49214 * C2378 + C23722 * C2373 +
              C49210 * C2379 + C23723 * C9860 + C49200 * C9862 +
              C23724 * C9861 + C49182 * C9863) *
                 C9219 +
             (C23721 * C2380 + C49214 * C2390 + C23722 * C2381 +
              C49210 * C2391 + C23723 * C9864 + C49200 * C9866 +
              C23724 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C41897 + C41896 + C41895 + C41894) * C48780 +
             (C41893 + C41892 + C41891 + C41890) * C9219) *
                C48982 +
            ((C23724 * C1804 + C49182 * C1809 + C23723 * C1302 +
              C49200 * C1308 + C23722 * C601 + C49210 * C610 + C23721 * C277 +
              C49214 * C285) *
                 C48780 +
             (C23724 * C1800 + C49182 * C1803 + C23723 * C1296 +
              C49200 * C1303 + C23722 * C595 + C49210 * C600 + C23721 * C267 +
              C49214 * C278) *
                 C9219) *
                C31302) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C22505 * C126 + C22512 * C267 + C48940 * C278) *
                C7917 +
            (C22511 * C127 + C22505 * C140 + C22512 * C277 + C48940 * C285) *
                C49204 +
            (C22550 + C22551) * C7918 + (C22552 + C22553) * C49191 +
            C22566 * C7919 + C22567 * C49159) *
               C31302 +
           ((C25414 + C25415) * C7917 + (C25416 + C25417) * C49204 +
            C25390 * C7918 + C25391 * C49191 + C28033 * C7919 +
            C28034 * C49159) *
               C48982) *
              C945 -
          (((C24966 + C24967) * C49159 + (C24968 + C24969) * C7919 +
            C25410 * C49191 + C25411 * C7918 + (C25421 + C25420) * C49204 +
            (C25419 + C25418) * C7917) *
               C48982 +
           (C28435 * C49159 + C28436 * C7919 + C25412 * C49191 +
            C25413 * C7918 + (C25417 + C25416) * C49204 +
            (C25415 + C25414) * C7917) *
               C31302) *
              C946 +
          ((C26518 * C7917 + C26519 * C49204 + C25400 * C7918 +
            C25401 * C49191 + (C24969 + C24968) * C7919 +
            (C24967 + C24966) * C49159) *
               C31302 +
           ((C26535 + C26534) * C7917 + (C26533 + C26532) * C49204 +
            (C25425 + C25424) * C7918 + (C25423 + C25422) * C49191 +
            (C22511 * C2847 + C22505 * C2852 + C22512 * C3315 +
             C48940 * C3320) *
                C7919 +
            (C22511 * C2851 + C22505 * C2859 + C22512 * C3321 +
             C48940 * C3324) *
                C49159) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23721 * C119 + C49214 * C126 + C23722 * C267 + C49210 * C278 +
             C23723 * C595 + C49200 * C600 + C23724 * C1296 + C49182 * C1303) *
                C9219 +
            (C23721 * C127 + C49214 * C140 + C23722 * C277 + C49210 * C285 +
             C23723 * C601 + C49200 * C610 + C23724 * C1302 + C49182 * C1308) *
                C48780) *
               C31302 +
           ((C41508 + C41509 + C41510 + C41511) * C9219 +
            (C41512 + C41513 + C41514 + C41515) * C48780) *
               C48982) *
              C945 -
          (((C42272 + C42273 + C42274 + C42275) * C48780 +
            (C42276 + C42277 + C42278 + C42279) * C9219) *
               C48982 +
           ((C41515 + C41514 + C41513 + C41512) * C48780 +
            (C41511 + C41510 + C41509 + C41508) * C9219) *
               C31302) *
              C946 +
          (((C42279 + C42278 + C42277 + C42276) * C9219 +
            (C42275 + C42274 + C42273 + C42272) * C48780) *
               C31302 +
           ((C23721 * C2849 + C49214 * C2856 + C23722 * C3313 + C49210 * C3316 +
             C23723 * C10274 + C49200 * C10277 + C23724 * C10738 +
             C49182 * C10739) *
                C9219 +
            (C23721 * C2855 + C49214 * C2861 + C23722 * C3317 + C49210 * C3322 +
             C23723 * C10276 + C49200 * C10280 + C23724 * C10740 +
             C49182 * C10741) *
                C48780) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C48866 * C48849 * C110 -
          ((C11364 + C11365 + C11366 + C11367) * C48790 +
           (C11368 + C11369 + C11370 + C11371) * C47890 +
           (C11363 + C11362 + C11361 + C11360) * C49117 +
           (C11359 + C11358 + C11357 + C11356) * C47909) *
              C48895 * C48866 * C48849 * C111 +
          ((C11371 + C11370 + C11369 + C11368) * C47909 +
           (C11367 + C11366 + C11365 + C11364) * C49117 +
           (C11317 * C122 + C11311 * C132 + C11318 * C264 + C11312 * C272 +
            C11319 * C598 + C11313 * C606 + C11320 * C1297 + C49182 * C1304) *
               C47890 +
           (C11317 * C133 + C11311 * C143 + C11318 * C271 + C11312 * C282 +
            C11319 * C607 + C11313 * C613 + C11320 * C1305 + C49182 * C1309) *
               C48790) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C48866 * C48849 * C110 -
          ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
           (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
           (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
           (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
              C48895 * C48866 * C48849 * C111 +
          (C3939 * C3886 + C3940 * C3880 + C3941 * C3887 + C3942 * C3881 +
           (C3938 + C3937) * C3888 + (C3936 + C3935) * C3882 +
           (C3884 * C124 + C49139 * C137 + C3885 * C268 + C48940 * C279) *
               C3889 +
           (C3884 * C136 + C49139 * C145 + C3885 * C280 + C48940 * C286) *
               C49176) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47909 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C49117 +
            (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
               C15279 +
           ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
            C6673 * C47890 + C6674 * C48790) *
               C15280 +
           ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
            (C6706 + C6705) * C47890 + (C6704 + C6703) * C48790) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C6699 + C6700) * C48790 + (C6701 + C6702) * C47890 +
            (C6703 + C6704) * C49117 + (C6705 + C6706) * C47909) *
               C49175 +
           (C6691 * C48790 + C6692 * C47890 + C6693 * C49117 + C6694 * C47909) *
               C15280 +
           ((C3930 + C3929) * C48790 + (C3928 + C3927) * C47890 +
            (C3926 + C3925) * C49117 + (C3924 + C3923) * C47909) *
               C15279) *
              C48866 * C48849 * C111 +
          ((C3939 * C47909 + C3940 * C49117 + C3941 * C47890 + C3942 * C48790) *
               C15279 +
           (C6251 * C47909 + C6252 * C49117 + (C4266 + C4265) * C47890 +
            (C4264 + C4263) * C48790) *
               C15280 +
           ((C6702 + C6701) * C47909 + (C6700 + C6699) * C49117 +
            (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                C47890 +
            (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                C48790) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C48866 * C259 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C11525 + C11524 + C11523 + C11522) * C47909 +
            (C11521 + C11520 + C11519 + C11518) * C49117 +
            (C11317 * C265 + C11311 * C274 + C11318 * C597 + C11312 * C604 +
             C11319 * C1294 + C11313 * C1299 + C11320 * C1802 +
             C49182 * C1807) *
                C47890 +
            (C11317 * C273 + C11311 * C283 + C11318 * C605 + C11312 * C612 +
             C11319 * C1298 + C11313 * C1306 + C11320 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C48866 * C259 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C4108 + C4107) * C3886 + (C4106 + C4105) * C3880 +
            (C4104 + C4103) * C3887 + (C4102 + C4101) * C3881 +
            (C4100 + C4099) * C3888 + (C4098 + C4097) * C3882 +
            (C3884 * C263 + C49139 * C270 + C3885 * C599 + C48940 * C608) *
                C3889 +
            (C3884 * C269 + C49139 * C281 + C3885 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             (C6706 + C6705) * C47890 + (C6704 + C6703) * C48790) *
                C49175) *
               C48866 * C259 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C47890 +
             (C3885 * C2381 + C48940 * C2391 + C3884 * C2380 + C49139 * C2390) *
                 C49117 +
             (C3885 * C2373 + C48940 * C2379 + C3884 * C2372 + C49139 * C2378) *
                 C47909) *
                C49175 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C47890 +
             (C7252 + C7251) * C49117 + (C7250 + C7249) * C47909) *
                C15280 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C47890 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C49117 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47909) *
                C15279) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C47909 + (C4106 + C4105) * C49117 +
             (C4104 + C4103) * C47890 + (C4102 + C4101) * C48790) *
                C15279 +
            ((C6470 + C6469) * C47909 + (C6468 + C6467) * C49117 +
             (C6466 + C6465) * C47890 + (C6464 + C6463) * C48790) *
                C15280 +
            ((C18860 + C18859) * C47909 + (C18858 + C18857) * C49117 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C47890 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C48790) *
                C49175) *
               C48866 * C49167 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C47890 +
             (C6703 + C6704) * C49117 + (C6705 + C6706) * C47909) *
                C49175 +
            (C6691 * C48790 + C6692 * C47890 + C6693 * C49117 +
             C6694 * C47909) *
                C15280 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C47890 +
             (C3926 + C3925) * C49117 + (C3924 + C3923) * C47909) *
                C15279) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C393 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C11679 + C11678 + C11677 + C11676) * C47909 +
            (C11675 + C11674 + C11673 + C11672) * C49117 +
            (C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C47890 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C393 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C4274 + C4273) * C3886 + (C4272 + C4271) * C3880 +
            (C4270 + C4269) * C3887 + (C4268 + C4267) * C3881 +
            (C4266 + C4265) * C3888 + (C4264 + C4263) * C3882 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C3889 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             C19055 * C47890 + C19056 * C48790) *
                C49175) *
               C393 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C47890 +
             (C3885 * C3317 + C48940 * C3322 + C3884 * C2855 + C49139 * C2861) *
                 C49117 +
             (C3885 * C3313 + C48940 * C3316 + C3884 * C2849 + C49139 * C2856) *
                 C47909) *
                C49175 +
            (C19065 * C48790 + C19066 * C47890 + (C7795 + C7796) * C49117 +
             (C7797 + C7798) * C47909) *
                C15280 +
            (C6693 * C48790 + C6694 * C47890 + (C6698 + C6697) * C49117 +
             (C6696 + C6695) * C47909) *
                C15279) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C47909 + C6674 * C49117 + C6251 * C47890 +
             C6252 * C48790) *
                C15279 +
            (C19055 * C47909 + C19056 * C49117 + (C6702 + C6701) * C47890 +
             (C6700 + C6699) * C48790) *
                C15280 +
            ((C19070 + C19069) * C47909 + (C19068 + C19067) * C49117 +
             (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                 C47890 +
             (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                 C48790) *
                C49175) *
               C49169 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C47890 +
             C19065 * C49117 + C19066 * C47909) *
                C49175 +
            (C6691 * C48790 + C6692 * C47890 + C6693 * C49117 +
             C6694 * C47909) *
                C15280 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C47890 +
             (C3926 + C3925) * C49117 + (C3924 + C3923) * C47909) *
                C15279) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C48866 * C525 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C11525 + C11524 + C11523 + C11522) * C47909 +
            (C11521 + C11520 + C11519 + C11518) * C49117 +
            (C11317 * C265 + C11311 * C274 + C11318 * C597 + C11312 * C604 +
             C11319 * C1294 + C11313 * C1299 + C11320 * C1802 +
             C49182 * C1807) *
                C47890 +
            (C11317 * C273 + C11311 * C283 + C11318 * C605 + C11312 * C612 +
             C11319 * C1298 + C11313 * C1306 + C11320 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C48866 * C525 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C4108 + C4107) * C3886 + (C4106 + C4105) * C3880 +
            (C4104 + C4103) * C3887 + (C4102 + C4101) * C3881 +
            (C4100 + C4099) * C3888 + (C4098 + C4097) * C3882 +
            (C3884 * C263 + C49139 * C270 + C3885 * C599 + C48940 * C608) *
                C3889 +
            (C3884 * C269 + C49139 * C281 + C3885 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             C19055 * C47890 + C19056 * C48790) *
                C49175) *
               C48866 * C525 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C47890 +
             (C3885 * C2381 + C48940 * C2391 + C3884 * C2380 + C49139 * C2390) *
                 C49117 +
             (C3885 * C2373 + C48940 * C2379 + C3884 * C2372 + C49139 * C2378) *
                 C47909) *
                C49175 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C47890 +
             (C7252 + C7251) * C49117 + (C7250 + C7249) * C47909) *
                C15280 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C47890 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C49117 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47909) *
                C15279) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C47909 + (C4106 + C4105) * C49117 +
             (C4104 + C4103) * C47890 + (C4102 + C4101) * C48790) *
                C15279 +
            ((C6470 + C6469) * C47909 + (C6468 + C6467) * C49117 +
             (C6466 + C6465) * C47890 + (C6464 + C6463) * C48790) *
                C15280 +
            ((C18860 + C18859) * C47909 + (C18858 + C18857) * C49117 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C47890 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C48790) *
                C49175) *
               C48866 * C49167 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C47890 +
             C19065 * C49117 + C19066 * C47909) *
                C49175 +
            (C6691 * C48790 + C6692 * C47890 + C6693 * C49117 +
             C6694 * C47909) *
                C15280 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C47890 +
             (C3926 + C3925) * C49117 + (C3924 + C3923) * C47909) *
                C15279) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C48866 * C591 -
          ((C11518 + C11519 + C11520 + C11521) * C48790 +
           (C11522 + C11523 + C11524 + C11525) * C47890 +
           (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
            C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
               C49117 +
           (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
            C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
               C47909) *
              C48895 * C48866 * C592 +
          ((C11317 * C595 + C11311 * C600 + C11318 * C1296 + C11312 * C1303 +
            C11319 * C1800 + C11313 * C1803 + C11320 * C9302 + C49182 * C9305) *
               C47909 +
           (C11317 * C601 + C11311 * C610 + C11318 * C1302 + C11312 * C1308 +
            C11319 * C1804 + C11313 * C1809 + C11320 * C9304 + C49182 * C9308) *
               C49117 +
           (C11317 * C596 + C11311 * C602 + C11318 * C1295 + C11312 * C1301 +
            C11319 * C1801 + C11313 * C1805 + C11320 * C9303 + C49182 * C9306) *
               C47890 +
           (C11317 * C603 + C11311 * C611 + C11318 * C1300 + C11312 * C1307 +
            C11319 * C1806 + C11313 * C1810 + C11320 * C9307 + C49182 * C9309) *
               C48790) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C48866 * C591 -
          ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
           (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
           (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
           (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
               C3880 +
           (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
               C3886) *
              C48895 * C48866 * C592 +
          ((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
               C3886 +
           (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
               C3880 +
           (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
               C3887 +
           (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
               C3881 +
           (C3884 * C597 + C49139 * C604 + C3885 * C1294 + C48940 * C1299) *
               C3888 +
           (C3884 * C605 + C49139 * C612 + C3885 * C1298 + C48940 * C1306) *
               C3882 +
           (C3884 * C598 + C49139 * C606 + C3885 * C1297 + C48940 * C1304) *
               C3889 +
           (C3884 * C607 + C49139 * C613 + C3885 * C1305 + C48940 * C1309) *
               C49176) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47909 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C49117 +
            (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
               C15279 +
           ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
            C6673 * C47890 + C6674 * C48790) *
               C15280 +
           ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
            C19055 * C47890 + C19056 * C48790) *
               C49175) *
              C48866 * C591 -
          (((C18857 + C18858) * C48790 + (C18859 + C18860) * C47890 +
            (C3885 * C2381 + C48940 * C2391 + C3884 * C2380 + C49139 * C2390) *
                C49117 +
            (C3885 * C2373 + C48940 * C2379 + C3884 * C2372 + C49139 * C2378) *
                C47909) *
               C49175 +
           ((C6467 + C6468) * C48790 + (C6469 + C6470) * C47890 +
            (C7252 + C7251) * C49117 + (C7250 + C7249) * C47909) *
               C15280 +
           ((C4105 + C4106) * C48790 + (C4107 + C4108) * C47890 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C49117 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C47909) *
               C15279) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C47909 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C49117 +
            (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
                C47890 +
            (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
                C48790) *
               C15279 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C47909 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C49117 +
            (C3884 * C1493 + C49139 * C1499 + C3885 * C1959 + C48940 * C1963) *
                C47890 +
            (C3884 * C1498 + C49139 * C1505 + C3885 * C1964 + C48940 * C1968) *
                C48790) *
               C15280 +
           ((C3884 * C2373 + C49139 * C2379 + C3885 * C9860 + C48940 * C9862) *
                C47909 +
            (C3884 * C2381 + C49139 * C2391 + C3885 * C9864 + C48940 * C9866) *
                C49117 +
            (C3884 * C2375 + C49139 * C2383 + C3885 * C10124 +
             C48940 * C10125) *
                C47890 +
            (C3884 * C2385 + C49139 * C2393 + C3885 * C10126 +
             C48940 * C10127) *
                C48790) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C393 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C525 +
          (((C11317 * C697 + C11311 * C702 + C11318 * C1494 + C11312 * C1501 +
             C11319 * C1958 + C11313 * C1961 + C11320 * C9392 +
             C49182 * C9395) *
                C47909 +
            (C11317 * C703 + C11311 * C712 + C11318 * C1500 + C11312 * C1506 +
             C11319 * C1962 + C11313 * C1967 + C11320 * C9394 +
             C49182 * C9398) *
                C49117 +
            (C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
             C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
             C49182 * C9396) *
                C47890 +
            (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
             C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C393 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C525 +
          (((C3884 * C697 + C49139 * C702 + C3885 * C1494 + C48940 * C1501) *
                C3886 +
            (C3884 * C703 + C49139 * C712 + C3885 * C1500 + C48940 * C1506) *
                C3880 +
            (C3884 * C698 + C49139 * C704 + C3885 * C1493 + C48940 * C1499) *
                C3887 +
            (C3884 * C705 + C49139 * C713 + C3885 * C1498 + C48940 * C1505) *
                C3881 +
            (C3884 * C699 + C49139 * C706 + C3885 * C1492 + C48940 * C1497) *
                C3888 +
            (C3884 * C707 + C49139 * C714 + C3885 * C1496 + C48940 * C1504) *
                C3882 +
            (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                C3889 +
            (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             C19055 * C47890 + C19056 * C48790) *
                C49175) *
               C393 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C47890 +
             (C3885 * C3317 + C48940 * C3322 + C3884 * C2855 + C49139 * C2861) *
                 C49117 +
             (C3885 * C3313 + C48940 * C3316 + C3884 * C2849 + C49139 * C2856) *
                 C47909) *
                C49175 +
            (C19065 * C48790 + C19066 * C47890 + (C7795 + C7796) * C49117 +
             (C7797 + C7798) * C47909) *
                C15280 +
            (C6693 * C48790 + C6694 * C47890 + (C6698 + C6697) * C49117 +
             (C6696 + C6695) * C47909) *
                C15279) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C47909 + (C7251 + C7252) * C49117 +
             (C6470 + C6469) * C47890 + (C6468 + C6467) * C48790) *
                C15279 +
            ((C19613 + C19614) * C47909 + (C19615 + C19616) * C49117 +
             (C18860 + C18859) * C47890 + (C18858 + C18857) * C48790) *
                C15280 +
            ((C3884 * C3313 + C49139 * C3316 + C3885 * C10274 +
              C48940 * C10277) *
                 C47909 +
             (C3884 * C3317 + C49139 * C3322 + C3885 * C10276 +
              C48940 * C10280) *
                 C49117 +
             (C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C47890 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C49175) *
               C49169 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C47890 +
             (C19616 + C19615) * C49117 + (C19614 + C19613) * C47909) *
                C49175 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C47890 +
             (C7252 + C7251) * C49117 + (C7250 + C7249) * C47909) *
                C15280 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C47890 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C49117 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47909) *
                C15279) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C799 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C11679 + C11678 + C11677 + C11676) * C47909 +
            (C11675 + C11674 + C11673 + C11672) * C49117 +
            (C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C47890 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C799 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C4274 + C4273) * C3886 + (C4272 + C4271) * C3880 +
            (C4270 + C4269) * C3887 + (C4268 + C4267) * C3881 +
            (C4266 + C4265) * C3888 + (C4264 + C4263) * C3882 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C3889 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             C19055 * C47890 + C19056 * C48790) *
                C49175) *
               C799 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C47890 +
             (C3885 * C3317 + C48940 * C3322 + C3884 * C2855 + C49139 * C2861) *
                 C49117 +
             (C3885 * C3313 + C48940 * C3316 + C3884 * C2849 + C49139 * C2856) *
                 C47909) *
                C49175 +
            (C19065 * C48790 + C19066 * C47890 + (C7795 + C7796) * C49117 +
             (C7797 + C7798) * C47909) *
                C15280 +
            (C6693 * C48790 + C6694 * C47890 + (C6698 + C6697) * C49117 +
             (C6696 + C6695) * C47909) *
                C15279) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C47909 + C6674 * C49117 + C6251 * C47890 +
             C6252 * C48790) *
                C15279 +
            (C19055 * C47909 + C19056 * C49117 + (C6702 + C6701) * C47890 +
             (C6700 + C6699) * C48790) *
                C15280 +
            ((C19070 + C19069) * C47909 + (C19068 + C19067) * C49117 +
             (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                 C47890 +
             (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                 C48790) *
                C49175) *
               C49169 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C47890 +
             C19065 * C49117 + C19066 * C47909) *
                C49175 +
            (C6691 * C48790 + C6692 * C47890 + C6693 * C49117 +
             C6694 * C47909) *
                C15280 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C47890 +
             (C3926 + C3925) * C49117 + (C3924 + C3923) * C47909) *
                C15279) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C799 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C259 +
          (((C11317 * C697 + C11311 * C702 + C11318 * C1494 + C11312 * C1501 +
             C11319 * C1958 + C11313 * C1961 + C11320 * C9392 +
             C49182 * C9395) *
                C47909 +
            (C11317 * C703 + C11311 * C712 + C11318 * C1500 + C11312 * C1506 +
             C11319 * C1962 + C11313 * C1967 + C11320 * C9394 +
             C49182 * C9398) *
                C49117 +
            (C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
             C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
             C49182 * C9396) *
                C47890 +
            (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
             C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C799 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C259 +
          (((C3884 * C697 + C49139 * C702 + C3885 * C1494 + C48940 * C1501) *
                C3886 +
            (C3884 * C703 + C49139 * C712 + C3885 * C1500 + C48940 * C1506) *
                C3880 +
            (C3884 * C698 + C49139 * C704 + C3885 * C1493 + C48940 * C1499) *
                C3887 +
            (C3884 * C705 + C49139 * C713 + C3885 * C1498 + C48940 * C1505) *
                C3881 +
            (C3884 * C699 + C49139 * C706 + C3885 * C1492 + C48940 * C1497) *
                C3888 +
            (C3884 * C707 + C49139 * C714 + C3885 * C1496 + C48940 * C1504) *
                C3882 +
            (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                C3889 +
            (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47909 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C49117 +
             (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
                C15279 +
            ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
             C6673 * C47890 + C6674 * C48790) *
                C15280 +
            ((C7798 + C7797) * C47909 + (C7796 + C7795) * C49117 +
             C19055 * C47890 + C19056 * C48790) *
                C49175) *
               C799 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C47890 +
             (C3885 * C3317 + C48940 * C3322 + C3884 * C2855 + C49139 * C2861) *
                 C49117 +
             (C3885 * C3313 + C48940 * C3316 + C3884 * C2849 + C49139 * C2856) *
                 C47909) *
                C49175 +
            (C19065 * C48790 + C19066 * C47890 + (C7795 + C7796) * C49117 +
             (C7797 + C7798) * C47909) *
                C15280 +
            (C6693 * C48790 + C6694 * C47890 + (C6698 + C6697) * C49117 +
             (C6696 + C6695) * C47909) *
                C15279) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C47909 + (C7251 + C7252) * C49117 +
             (C6470 + C6469) * C47890 + (C6468 + C6467) * C48790) *
                C15279 +
            ((C19613 + C19614) * C47909 + (C19615 + C19616) * C49117 +
             (C18860 + C18859) * C47890 + (C18858 + C18857) * C48790) *
                C15280 +
            ((C3884 * C3313 + C49139 * C3316 + C3885 * C10274 +
              C48940 * C10277) *
                 C47909 +
             (C3884 * C3317 + C49139 * C3322 + C3885 * C10276 +
              C48940 * C10280) *
                 C49117 +
             (C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C47890 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C49175) *
               C49169 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C47890 +
             (C19616 + C19615) * C49117 + (C19614 + C19613) * C47909) *
                C49175 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C47890 +
             (C7252 + C7251) * C49117 + (C7250 + C7249) * C47909) *
                C15280 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C47890 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C49117 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47909) *
                C15279) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C945 -
          ((C11672 + C11673 + C11674 + C11675) * C48790 +
           (C11676 + C11677 + C11678 + C11679) * C47890 +
           (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
            C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
               C49117 +
           (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
            C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
               C47909) *
              C48895 * C946 +
          ((C11317 * C948 + C11311 * C953 + C11318 * C2372 + C11312 * C2378 +
            C11319 * C2373 + C11313 * C2379 + C11320 * C9860 + C49182 * C9862) *
               C47909 +
           (C11317 * C954 + C11311 * C963 + C11318 * C2380 + C11312 * C2390 +
            C11319 * C2381 + C11313 * C2391 + C11320 * C9864 + C49182 * C9866) *
               C49117 +
           (C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
            C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
            C49182 * C10125) *
               C47890 +
           (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
            C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
            C49182 * C10127) *
               C48790) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C945 -
          ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
           (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
           (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
           (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
               C3880 +
           (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
               C3886) *
              C48895 * C946 +
          ((C3884 * C948 + C49139 * C953 + C3885 * C2372 + C48940 * C2378) *
               C3886 +
           (C3884 * C954 + C49139 * C963 + C3885 * C2380 + C48940 * C2390) *
               C3880 +
           (C3884 * C949 + C49139 * C955 + C3885 * C2374 + C48940 * C2382) *
               C3887 +
           (C3884 * C956 + C49139 * C964 + C3885 * C2384 + C48940 * C2392) *
               C3881 +
           (C3884 * C950 + C49139 * C957 + C3885 * C2376 + C48940 * C2386) *
               C3888 +
           (C3884 * C958 + C49139 * C965 + C3885 * C2388 + C48940 * C2394) *
               C3882 +
           (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
               C3889 +
           (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
               C49176) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47909 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C49117 +
            (C3923 + C3924) * C47890 + (C3925 + C3926) * C48790) *
               C15279 +
           ((C6695 + C6696) * C47909 + (C6697 + C6698) * C49117 +
            C6673 * C47890 + C6674 * C48790) *
               C15280 +
           C20171 * C49175) *
              C945 -
          (((C19067 + C19068) * C48790 + (C19069 + C19070) * C47890 +
            (C20165 + C20166) * C49117 + (C20167 + C20168) * C47909) *
               C49175 +
           (C19065 * C48790 + C19066 * C47890 + (C7795 + C7796) * C49117 +
            (C7797 + C7798) * C47909) *
               C15280 +
           (C6693 * C48790 + C6694 * C47890 + (C6698 + C6697) * C49117 +
            (C6696 + C6695) * C47909) *
               C15279) *
              C946 +
          (C20171 * C15279 +
           ((C20168 + C20167) * C47909 + (C20166 + C20165) * C49117 +
            (C19070 + C19069) * C47890 + (C19068 + C19067) * C48790) *
               C15280 +
           ((C3884 * C3751 + C49139 * C3754 + C3885 * C11180 +
             C48940 * C11182) *
                C47909 +
            (C3884 * C3755 + C49139 * C3760 + C3885 * C11184 +
             C48940 * C11186) *
                C49117 +
            (C3884 * C3752 + C49139 * C3756 + C3885 * C17895 +
             C48940 * C17896) *
                C47890 +
            (C3884 * C3757 + C49139 * C3761 + C3885 * C17897 +
             C48940 * C17898) *
                C48790) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C11317 * C399 + C11311 * C410 + C11318 * C697 + C11312 * C702 +
             C11319 * C1494 + C11313 * C1501 + C11320 * C1958 +
             C49182 * C1961) *
                C9219 +
            (C11317 * C409 + C11311 * C417 + C11318 * C703 + C11312 * C712 +
             C11319 * C1500 + C11313 * C1506 + C11320 * C1962 +
             C49182 * C1967) *
                C48780) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C11672 + C11673 + C11674 + C11675) * C48780 +
            (C11676 + C11677 + C11678 + C11679) * C9219) *
               C48982 +
           ((C11363 + C11362 + C11361 + C11360) * C48780 +
            (C11359 + C11358 + C11357 + C11356) * C9219) *
               C49140) *
              C48866 * C48849 * C111 +
          (((C11371 + C11370 + C11369 + C11368) * C9219 +
            (C11367 + C11366 + C11365 + C11364) * C48780) *
               C49140 +
           ((C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C9219 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48780) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C3884 * C399 + C49139 * C410 + C3885 * C697 + C48940 * C702) *
                C1087 +
            (C3884 * C409 + C49139 * C417 + C3885 * C703 + C48940 * C712) *
                C1081 +
            (C4274 + C4273) * C1088 + (C4272 + C4271) * C1082 + C6251 * C1089 +
            C6252 * C49159) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
            (C4267 + C4268) * C1082 + (C4269 + C4270) * C1088 +
            (C4271 + C4272) * C1081 + (C4273 + C4274) * C1087) *
               C48982 +
           ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
            (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
            (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C3939 * C1087 + C3940 * C1081 + C3941 * C1088 + C3942 * C1082 +
            (C3938 + C3937) * C1089 + (C3936 + C3935) * C49159) *
               C49140 +
           (C6251 * C1087 + C6252 * C1081 + (C4266 + C4265) * C1088 +
            (C4264 + C4263) * C1082 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C1089 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49159) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C9219 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48780) *
               C20269 +
           ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
           (C20151 * C9219 + C20152 * C48780) * C20271 +
           ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
              C48866 * C48849 * C110 -
          (((C19067 + C19068) * C48780 + (C19069 + C19070) * C9219) * C49188 +
           (C19065 * C48780 + C19066 * C9219) * C20271 +
           (C6693 * C48780 + C6694 * C9219) * C20270 +
           ((C3926 + C3925) * C48780 + (C3924 + C3923) * C9219) * C20269) *
              C48866 * C48849 * C111 +
          ((C3939 * C9219 + C3940 * C48780) * C20269 +
           (C6251 * C9219 + C6252 * C48780) * C20270 +
           ((C6702 + C6701) * C9219 + (C6700 + C6699) * C48780) * C20271 +
           ((C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                C9219 +
            (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                C48780) *
               C49188) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C11317 * C399 + C11311 * C410 + C11318 * C697 + C11312 * C702 +
              C11319 * C1494 + C11313 * C1501 + C11320 * C1958 +
              C49182 * C1961) *
                 C9219 +
             (C11317 * C409 + C11311 * C417 + C11318 * C703 + C11312 * C712 +
              C11319 * C1500 + C11313 * C1506 + C11320 * C1962 +
              C49182 * C1967) *
                 C48780) *
                C48982) *
               C48866 * C259 -
           (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 +
              C11313 * C1967 + C11318 * C1500 + C11312 * C1506 + C11317 * C703 +
              C11311 * C712) *
                 C48780 +
             (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 +
              C11313 * C1961 + C11318 * C1494 + C11312 * C1501 + C11317 * C697 +
              C11311 * C702) *
                 C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C11525 + C11524 + C11523 + C11522) * C9219 +
             (C11521 + C11520 + C11519 + C11518) * C48780) *
                C49140 +
            ((C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
              C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
              C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C3884 * C399 + C49139 * C410 + C3885 * C697 + C48940 * C702) *
                 C1087 +
             (C3884 * C409 + C49139 * C417 + C3885 * C703 + C48940 * C712) *
                 C1081 +
             (C4274 + C4273) * C1088 + (C4272 + C4271) * C1082 + C6251 * C1089 +
             C6252 * C49159) *
                C48982) *
               C48866 * C259 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                 C1081 +
             (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                 C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C1087 + (C4106 + C4105) * C1081 +
             (C4104 + C4103) * C1088 + (C4102 + C4101) * C1082 +
             (C4100 + C4099) * C1089 + (C4098 + C4097) * C49159) *
                C49140 +
            ((C6470 + C6469) * C1087 + (C6468 + C6467) * C1081 +
             (C6466 + C6465) * C1088 + (C6464 + C6463) * C1082 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C1089 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             (C4267 + C4268) * C1082 + (C4269 + C4270) * C1088 +
             (C4271 + C4272) * C1081 + (C4273 + C4274) * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C48866 * C259 -
           (((C3885 * C10276 + C48940 * C10280 + C3884 * C3317 +
              C49139 * C3322) *
                 C48780 +
             (C3885 * C10274 + C48940 * C10277 + C3884 * C3313 +
              C49139 * C3316) *
                 C9219) *
                C49188 +
            ((C19616 + C19615) * C48780 + (C19614 + C19613) * C9219) * C20271 +
            ((C7252 + C7251) * C48780 + (C7250 + C7249) * C9219) * C20270 +
            ((C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48780 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C9219) *
                C20269) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C9219 + (C4106 + C4105) * C48780) * C20269 +
            ((C6470 + C6469) * C9219 + (C6468 + C6467) * C48780) * C20270 +
            ((C18860 + C18859) * C9219 + (C18858 + C18857) * C48780) * C20271 +
            ((C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C9219 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48780) *
                C49188) *
               C48866 * C49167 -
           (((C19067 + C19068) * C48780 + (C19069 + C19070) * C9219) * C49188 +
            (C19065 * C48780 + C19066 * C9219) * C20271 +
            (C6693 * C48780 + C6694 * C9219) * C20270 +
            ((C3926 + C3925) * C48780 + (C3924 + C3923) * C9219) * C20269) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C393 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C48849 * C261 +
          ((((C11679 + C11678 + C11677 + C11676) * C9219 +
             (C11675 + C11674 + C11673 + C11672) * C48780) *
                C49140 +
            ((C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
              C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
              C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C1087 + C6674 * C1081 + C6251 * C1088 + C6252 * C1082 +
             (C4266 + C4265) * C1089 + (C4264 + C4263) * C49159) *
                C49140 +
            ((C6706 + C6705) * C1087 + (C6704 + C6703) * C1081 +
             (C6702 + C6701) * C1088 + (C6700 + C6699) * C1082 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C1089 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C393 -
           (((C3885 * C11184 + C48940 * C11186 + C3884 * C3755 +
              C49139 * C3760) *
                 C48780 +
             (C3885 * C11180 + C48940 * C11182 + C3884 * C3751 +
              C49139 * C3754) *
                 C9219) *
                C49188 +
            ((C20165 + C20166) * C48780 + (C20167 + C20168) * C9219) * C20271 +
            ((C7795 + C7796) * C48780 + (C7797 + C7798) * C9219) * C20270 +
            ((C6698 + C6697) * C48780 + (C6696 + C6695) * C9219) * C20269) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C9219 + C6674 * C48780) * C20269 +
            (C19055 * C9219 + C19056 * C48780) * C20270 +
            ((C19070 + C19069) * C9219 + (C19068 + C19067) * C48780) * C20271 +
            ((C3884 * C3752 + C49139 * C3756 + C3885 * C17895 +
              C48940 * C17896) *
                 C9219 +
             (C3884 * C3757 + C49139 * C3761 + C3885 * C17897 +
              C48940 * C17898) *
                 C48780) *
                C49188) *
               C49169 -
           (((C19067 + C19068) * C48780 + (C19069 + C19070) * C9219) * C49188 +
            (C19065 * C48780 + C19066 * C9219) * C20271 +
            (C6693 * C48780 + C6694 * C9219) * C20270 +
            ((C3926 + C3925) * C48780 + (C3924 + C3923) * C9219) * C20269) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C48866 * C525 -
           (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 +
              C11313 * C1967 + C11318 * C1500 + C11312 * C1506 + C11317 * C703 +
              C11311 * C712) *
                 C48780 +
             (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 +
              C11313 * C1961 + C11318 * C1494 + C11312 * C1501 + C11317 * C697 +
              C11311 * C702) *
                 C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C11525 + C11524 + C11523 + C11522) * C9219 +
             (C11521 + C11520 + C11519 + C11518) * C48780) *
                C49140 +
            ((C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
              C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
              C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C48866 * C525 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                 C1081 +
             (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                 C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C1087 + (C4106 + C4105) * C1081 +
             (C4104 + C4103) * C1088 + (C4102 + C4101) * C1082 +
             (C4100 + C4099) * C1089 + (C4098 + C4097) * C49159) *
                C49140 +
            ((C6470 + C6469) * C1087 + (C6468 + C6467) * C1081 +
             (C6466 + C6465) * C1088 + (C6464 + C6463) * C1082 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C1089 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C48866 * C525 -
           (((C3885 * C10276 + C48940 * C10280 + C3884 * C3317 +
              C49139 * C3322) *
                 C48780 +
             (C3885 * C10274 + C48940 * C10277 + C3884 * C3313 +
              C49139 * C3316) *
                 C9219) *
                C49188 +
            ((C19616 + C19615) * C48780 + (C19614 + C19613) * C9219) * C20271 +
            ((C7252 + C7251) * C48780 + (C7250 + C7249) * C9219) * C20270 +
            ((C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48780 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C9219) *
                C20269) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C9219 + (C4106 + C4105) * C48780) * C20269 +
            ((C6470 + C6469) * C9219 + (C6468 + C6467) * C48780) * C20270 +
            ((C18860 + C18859) * C9219 + (C18858 + C18857) * C48780) * C20271 +
            ((C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C9219 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48780) *
                C49188) *
               C48866 * C49167 -
           (((C19067 + C19068) * C48780 + (C19069 + C19070) * C9219) * C49188 +
            (C19065 * C48780 + C19066 * C9219) * C20271 +
            (C6693 * C48780 + C6694 * C9219) * C20270 +
            ((C3926 + C3925) * C48780 + (C3924 + C3923) * C9219) * C20269) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C14398 + C14399 + C14400 + C14401) * C9219 +
            (C14402 + C14403 + C14404 + C14405) * C48780) *
               C48982) *
              C48866 * C591 -
          (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 + C11313 * C1967 +
             C11318 * C1500 + C11312 * C1506 + C11317 * C703 + C11311 * C712) *
                C48780 +
            (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 + C11313 * C1961 +
             C11318 * C1494 + C11312 * C1501 + C11317 * C697 + C11311 * C702) *
                C9219) *
               C48982 +
           ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C48780 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C9219) *
               C49140) *
              C48866 * C592 +
          (((C11317 * C595 + C11311 * C600 + C11318 * C1296 + C11312 * C1303 +
             C11319 * C1800 + C11313 * C1803 + C11320 * C9302 +
             C49182 * C9305) *
                C9219 +
            (C11317 * C601 + C11311 * C610 + C11318 * C1302 + C11312 * C1308 +
             C11319 * C1804 + C11313 * C1809 + C11320 * C9304 +
             C49182 * C9308) *
                C48780) *
               C49140 +
           ((C11317 * C1494 + C11311 * C1501 + C11318 * C1958 + C11312 * C1961 +
             C11319 * C9392 + C11313 * C9395 + C11320 * C9630 +
             C49182 * C9631) *
                C9219 +
            (C11317 * C1500 + C11311 * C1506 + C11318 * C1962 + C11312 * C1967 +
             C11319 * C9394 + C11313 * C9398 + C11320 * C9632 +
             C49182 * C9633) *
                C48780) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
            C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
               C48982) *
              C48866 * C591 -
          (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
            (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
            (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                C1081 +
            (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                C1087) *
               C48982 +
           ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
            (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C1081 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C1087) *
               C49140) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C1087 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C1081 +
            (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
                C1088 +
            (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
                C1082 +
            (C3884 * C597 + C49139 * C604 + C3885 * C1294 + C48940 * C1299) *
                C1089 +
            (C3884 * C605 + C49139 * C612 + C3885 * C1298 + C48940 * C1306) *
                C49159) *
               C49140 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C1087 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C1081 +
            (C3884 * C1493 + C49139 * C1499 + C3885 * C1959 + C48940 * C1963) *
                C1088 +
            (C3884 * C1498 + C49139 * C1505 + C3885 * C1964 + C48940 * C1968) *
                C1082 +
            (C3884 * C1492 + C49139 * C1497 + C3885 * C1960 + C48940 * C1965) *
                C1089 +
            (C3884 * C1496 + C49139 * C1504 + C3885 * C1966 + C48940 * C1969) *
                C49159) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C9219 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48780) *
               C20269 +
           ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
           (C20151 * C9219 + C20152 * C48780) * C20271 +
           ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
              C48866 * C591 -
          (((C3885 * C10276 + C48940 * C10280 + C3884 * C3317 +
             C49139 * C3322) *
                C48780 +
            (C3885 * C10274 + C48940 * C10277 + C3884 * C3313 +
             C49139 * C3316) *
                C9219) *
               C49188 +
           ((C19616 + C19615) * C48780 + (C19614 + C19613) * C9219) * C20271 +
           ((C7252 + C7251) * C48780 + (C7250 + C7249) * C9219) * C20270 +
           ((C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C48780 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C9219) *
               C20269) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C9219 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C48780) *
               C20269 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C9219 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C48780) *
               C20270 +
           ((C3884 * C2373 + C49139 * C2379 + C3885 * C9860 + C48940 * C9862) *
                C9219 +
            (C3884 * C2381 + C49139 * C2391 + C3885 * C9864 + C48940 * C9866) *
                C48780) *
               C20271 +
           ((C3884 * C10274 + C49139 * C10277 + C3885 * C10738 +
             C48940 * C10739) *
                C9219 +
            (C3884 * C10276 + C49139 * C10280 + C3885 * C10740 +
             C48940 * C10741) *
                C48780) *
               C49188) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C393 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C525 +
          ((((C14780 + C14781 + C14782 + C14783) * C9219 +
             (C14784 + C14785 + C14786 + C14787) * C48780) *
                C49140 +
            ((C11317 * C2372 + C11311 * C2378 + C11318 * C2373 +
              C11312 * C2379 + C11319 * C9860 + C11313 * C9862 +
              C11320 * C9861 + C49182 * C9863) *
                 C9219 +
             (C11317 * C2380 + C11311 * C2390 + C11318 * C2381 +
              C11312 * C2391 + C11319 * C9864 + C11313 * C9866 +
              C11320 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C14787 + C14786 + C14785 + C14784) * C48780 +
             (C14783 + C14782 + C14781 + C14780) * C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C1087 + (C7251 + C7252) * C1081 +
             (C6470 + C6469) * C1088 + (C6468 + C6467) * C1082 +
             (C6466 + C6465) * C1089 + (C6464 + C6463) * C49159) *
                C49140 +
            ((C3884 * C2372 + C49139 * C2378 + C3885 * C2373 + C48940 * C2379) *
                 C1087 +
             (C3884 * C2380 + C49139 * C2390 + C3885 * C2381 + C48940 * C2391) *
                 C1081 +
             (C3884 * C2374 + C49139 * C2382 + C3885 * C2375 + C48940 * C2383) *
                 C1088 +
             (C3884 * C2384 + C49139 * C2392 + C3885 * C2385 + C48940 * C2393) *
                 C1082 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C1089 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C7252 + C7251) * C1081 + (C7250 + C7249) * C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C393 -
           (((C3885 * C11184 + C48940 * C11186 + C3884 * C3755 +
              C49139 * C3760) *
                 C48780 +
             (C3885 * C11180 + C48940 * C11182 + C3884 * C3751 +
              C49139 * C3754) *
                 C9219) *
                C49188 +
            ((C20165 + C20166) * C48780 + (C20167 + C20168) * C9219) * C20271 +
            ((C7795 + C7796) * C48780 + (C7797 + C7798) * C9219) * C20270 +
            ((C6698 + C6697) * C48780 + (C6696 + C6695) * C9219) * C20269) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C9219 + (C7251 + C7252) * C48780) * C20269 +
            ((C19613 + C19614) * C9219 + (C19615 + C19616) * C48780) * C20270 +
            ((C22026 + C22027) * C9219 + (C22028 + C22029) * C48780) * C20271 +
            ((C3884 * C11180 + C49139 * C11182 + C3885 * C11181 +
              C48940 * C11183) *
                 C9219 +
             (C3884 * C11184 + C49139 * C11186 + C3885 * C11185 +
              C48940 * C11187) *
                 C48780) *
                C49188) *
               C49169 -
           (((C22029 + C22028) * C48780 + (C22027 + C22026) * C9219) * C49188 +
            ((C19616 + C19615) * C48780 + (C19614 + C19613) * C9219) * C20271 +
            ((C7252 + C7251) * C48780 + (C7250 + C7249) * C9219) * C20270 +
            ((C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48780 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C9219) *
                C20269) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C799 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C48849 * C527 +
          ((((C11679 + C11678 + C11677 + C11676) * C9219 +
             (C11675 + C11674 + C11673 + C11672) * C48780) *
                C49140 +
            ((C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
              C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
              C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C1087 + C6674 * C1081 + C6251 * C1088 + C6252 * C1082 +
             (C4266 + C4265) * C1089 + (C4264 + C4263) * C49159) *
                C49140 +
            ((C6706 + C6705) * C1087 + (C6704 + C6703) * C1081 +
             (C6702 + C6701) * C1088 + (C6700 + C6699) * C1082 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C1089 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C799 -
           (((C3885 * C11184 + C48940 * C11186 + C3884 * C3755 +
              C49139 * C3760) *
                 C48780 +
             (C3885 * C11180 + C48940 * C11182 + C3884 * C3751 +
              C49139 * C3754) *
                 C9219) *
                C49188 +
            ((C20165 + C20166) * C48780 + (C20167 + C20168) * C9219) * C20271 +
            ((C7795 + C7796) * C48780 + (C7797 + C7798) * C9219) * C20270 +
            ((C6698 + C6697) * C48780 + (C6696 + C6695) * C9219) * C20269) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C9219 + C6674 * C48780) * C20269 +
            (C19055 * C9219 + C19056 * C48780) * C20270 +
            ((C19070 + C19069) * C9219 + (C19068 + C19067) * C48780) * C20271 +
            ((C3884 * C3752 + C49139 * C3756 + C3885 * C17895 +
              C48940 * C17896) *
                 C9219 +
             (C3884 * C3757 + C49139 * C3761 + C3885 * C17897 +
              C48940 * C17898) *
                 C48780) *
                C49188) *
               C49169 -
           (((C19067 + C19068) * C48780 + (C19069 + C19070) * C9219) * C49188 +
            (C19065 * C48780 + C19066 * C9219) * C20271 +
            (C6693 * C48780 + C6694 * C9219) * C20270 +
            ((C3926 + C3925) * C48780 + (C3924 + C3923) * C9219) * C20269) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C799 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C259 +
          ((((C14780 + C14781 + C14782 + C14783) * C9219 +
             (C14784 + C14785 + C14786 + C14787) * C48780) *
                C49140 +
            ((C11317 * C2372 + C11311 * C2378 + C11318 * C2373 +
              C11312 * C2379 + C11319 * C9860 + C11313 * C9862 +
              C11320 * C9861 + C49182 * C9863) *
                 C9219 +
             (C11317 * C2380 + C11311 * C2390 + C11318 * C2381 +
              C11312 * C2391 + C11319 * C9864 + C11313 * C9866 +
              C11320 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C14787 + C14786 + C14785 + C14784) * C48780 +
             (C14783 + C14782 + C14781 + C14780) * C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C1087 + (C7251 + C7252) * C1081 +
             (C6470 + C6469) * C1088 + (C6468 + C6467) * C1082 +
             (C6466 + C6465) * C1089 + (C6464 + C6463) * C49159) *
                C49140 +
            ((C3884 * C2372 + C49139 * C2378 + C3885 * C2373 + C48940 * C2379) *
                 C1087 +
             (C3884 * C2380 + C49139 * C2390 + C3885 * C2381 + C48940 * C2391) *
                 C1081 +
             (C3884 * C2374 + C49139 * C2382 + C3885 * C2375 + C48940 * C2383) *
                 C1088 +
             (C3884 * C2384 + C49139 * C2392 + C3885 * C2385 + C48940 * C2393) *
                 C1082 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C1089 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C7252 + C7251) * C1081 + (C7250 + C7249) * C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C9219 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48780) *
                C20269 +
            ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
            (C20151 * C9219 + C20152 * C48780) * C20271 +
            ((C20168 + C20167) * C9219 + (C20166 + C20165) * C48780) * C49188) *
               C799 -
           (((C3885 * C11184 + C48940 * C11186 + C3884 * C3755 +
              C49139 * C3760) *
                 C48780 +
             (C3885 * C11180 + C48940 * C11182 + C3884 * C3751 +
              C49139 * C3754) *
                 C9219) *
                C49188 +
            ((C20165 + C20166) * C48780 + (C20167 + C20168) * C9219) * C20271 +
            ((C7795 + C7796) * C48780 + (C7797 + C7798) * C9219) * C20270 +
            ((C6698 + C6697) * C48780 + (C6696 + C6695) * C9219) * C20269) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C9219 + (C7251 + C7252) * C48780) * C20269 +
            ((C19613 + C19614) * C9219 + (C19615 + C19616) * C48780) * C20270 +
            ((C22026 + C22027) * C9219 + (C22028 + C22029) * C48780) * C20271 +
            ((C3884 * C11180 + C49139 * C11182 + C3885 * C11181 +
              C48940 * C11183) *
                 C9219 +
             (C3884 * C11184 + C49139 * C11186 + C3885 * C11185 +
              C48940 * C11187) *
                 C48780) *
                C49188) *
               C49169 -
           (((C22029 + C22028) * C48780 + (C22027 + C22026) * C9219) * C49188 +
            ((C19616 + C19615) * C48780 + (C19614 + C19613) * C9219) * C20271 +
            ((C7252 + C7251) * C48780 + (C7250 + C7249) * C9219) * C20270 +
            ((C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48780 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C9219) *
                C20269) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C14398 + C14399 + C14400 + C14401) * C9219 +
            (C14402 + C14403 + C14404 + C14405) * C48780) *
               C48982) *
              C945 -
          (((C15162 + C15163 + C15164 + C15165) * C48780 +
            (C15166 + C15167 + C15168 + C15169) * C9219) *
               C48982 +
           ((C14405 + C14404 + C14403 + C14402) * C48780 +
            (C14401 + C14400 + C14399 + C14398) * C9219) *
               C49140) *
              C946 +
          (((C15169 + C15168 + C15167 + C15166) * C9219 +
            (C15165 + C15164 + C15163 + C15162) * C48780) *
               C49140 +
           ((C11317 * C2849 + C11311 * C2856 + C11318 * C3313 + C11312 * C3316 +
             C11319 * C10274 + C11313 * C10277 + C11320 * C10738 +
             C49182 * C10739) *
                C9219 +
            (C11317 * C2855 + C11311 * C2861 + C11318 * C3317 + C11312 * C3322 +
             C11319 * C10276 + C11313 * C10280 + C11320 * C10740 +
             C49182 * C10741) *
                C48780) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
            C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
               C48982) *
              C945 -
          (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
            (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
            (C7795 + C7796) * C1081 + (C7797 + C7798) * C1087) *
               C48982 +
           (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
            (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
               C49140) *
              C946 +
          (((C7798 + C7797) * C1087 + (C7796 + C7795) * C1081 +
            (C6706 + C6705) * C1088 + (C6704 + C6703) * C1082 +
            (C6702 + C6701) * C1089 + (C6700 + C6699) * C49159) *
               C49140 +
           ((C3884 * C2849 + C49139 * C2856 + C3885 * C3313 + C48940 * C3316) *
                C1087 +
            (C3884 * C2855 + C49139 * C2861 + C3885 * C3317 + C48940 * C3322) *
                C1081 +
            (C3884 * C2848 + C49139 * C2854 + C3885 * C3314 + C48940 * C3318) *
                C1088 +
            (C3884 * C2853 + C49139 * C2860 + C3885 * C3319 + C48940 * C3323) *
                C1082 +
            (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                C1089 +
            (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                C49159) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C9219 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48780) *
               C20269 +
           ((C6695 + C6696) * C9219 + (C6697 + C6698) * C48780) * C20270 +
           C22400 * C20271 + C22407 * C49188) *
              C945 -
          (((C22403 + C22404) * C48780 + (C22405 + C22406) * C9219) * C49188 +
           ((C20165 + C20166) * C48780 + (C20167 + C20168) * C9219) * C20271 +
           ((C7795 + C7796) * C48780 + (C7797 + C7798) * C9219) * C20270 +
           ((C6698 + C6697) * C48780 + (C6696 + C6695) * C9219) * C20269) *
              C946 +
          (C22400 * C20269 + C22407 * C20270 +
           ((C22406 + C22405) * C9219 + (C22404 + C22403) * C48780) * C20271 +
           ((C3884 * C17981 + C49139 * C17984 + C3885 * C18243 +
             C48940 * C18244) *
                C9219 +
            (C3884 * C17983 + C49139 * C17987 + C3885 * C18245 +
             C48940 * C18246) *
                C48780) *
               C49188) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48877 * C126) * C114 +
               (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48895 * C48866 * C48849 * C110 -
              (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
               C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
               C169 * C102 + C168 * C114) *
                  C48895 * C48866 * C48849 * C111 +
              (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
               C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
               (C113 * C125 + C48877 * C138) * C118 +
               (C113 * C139 + C48877 * C146) * C106) *
                  C48895 * C48866 * C48849 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                C1086 * C595 + C49172 * C600) *
                   C1087 +
               (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                C1086 * C601 + C49172 * C610) *
                   C1081 +
               (C1127 + C1128 + C1129) * C1088 +
               (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
               C1148 * C49159) *
                  C48895 * C48866 * C48849 * C110 -
              ((C1139 + C1140 + C1141) * C49159 +
               (C1142 + C1143 + C1144) * C1089 +
               (C1138 + C1137 + C1136) * C1082 +
               (C1135 + C1134 + C1133) * C1088 +
               (C1132 + C1131 + C1130) * C1081 +
               (C1129 + C1128 + C1127) * C1087) *
                  C48895 * C48866 * C48849 * C111 +
              (C1147 * C1087 + C1148 * C1081 + (C1144 + C1143 + C1142) * C1088 +
               (C1141 + C1140 + C1139) * C1082 +
               (C1084 * C123 + C49207 * C134 + C1085 * C263 + C49195 * C270 +
                C1086 * C599 + C49172 * C608) *
                   C1089 +
               (C1084 * C135 + C49207 * C144 + C1085 * C269 + C49195 * C281 +
                C1086 * C609 + C49172 * C614) *
                   C49159) *
                  C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           ((C113 * C399 + C48877 * C410) * C1087 +
            (C113 * C409 + C48877 * C417) * C1081 + C443 * C1088 +
            C442 * C1082 + C441 * C1089 + C440 * C49159) *
               C49197 +
           ((C113 * C948 + C48877 * C953) * C1087 +
            (C113 * C954 + C48877 * C963) * C1081 + C2522 * C1088 +
            C2523 * C1082 + C2524 * C1089 + C2525 * C49159) *
               C49175) *
              C48866 * C48849 * C110 -
          ((C2526 * C49159 + C2527 * C1089 + C2525 * C1082 + C2524 * C1088 +
            C2523 * C1081 + C2522 * C1087) *
               C49175 +
           (C438 * C49159 + C439 * C1089 + C440 * C1082 + C441 * C1088 +
            C442 * C1081 + C443 * C1087) *
               C49197 +
           (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
            C169 * C1081 + C168 * C1087) *
               C49208) *
              C48866 * C48849 * C111 +
          ((C170 * C1087 + C171 * C1081 + C172 * C1088 + C173 * C1082 +
            C174 * C1089 + C175 * C49159) *
               C49208 +
           (C441 * C1087 + C440 * C1081 + C439 * C1088 + C438 * C1082 +
            C437 * C1089 + C436 * C49159) *
               C49197 +
           (C2524 * C1087 + C2525 * C1081 + C2527 * C1088 + C2526 * C1082 +
            (C113 * C952 + C48877 * C961) * C1089 +
            (C113 * C962 + C48877 * C967) * C49159) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
           (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
           (C7962 + C7961 + C7960) * C49204 + (C7959 + C7958 + C7957) * C7917) *
              C48895 * C48866 * C48849 * C111 +
          (C7977 * C7917 + C7978 * C49204 + (C7974 + C7973 + C7972) * C7918 +
           (C7971 + C7970 + C7969) * C49191 +
           (C7914 * C123 + C7908 * C134 + C7915 * C263 + C7909 * C270 +
            C7916 * C599 + C49172 * C608) *
               C7919 +
           (C7914 * C135 + C7908 * C144 + C7915 * C269 + C7909 * C281 +
            C7916 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C48849 * C110 -
          ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
            C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
            C9214 * C129 + C9208 * C141) *
               C48780 +
           (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
            C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
            C9214 * C120 + C9208 * C128) *
               C9219) *
              C48895 * C48866 * C48849 * C111 +
          ((C9214 * C121 + C9208 * C130 + C9215 * C265 + C9209 * C274 +
            C9216 * C597 + C9210 * C604 + C9217 * C1294 + C9211 * C1299 +
            C9218 * C1802 + C9212 * C1807) *
               C9219 +
           (C9214 * C131 + C9208 * C142 + C9215 * C273 + C9209 * C283 +
            C9216 * C605 + C9210 * C612 + C9217 * C1298 + C9211 * C1306 +
            C9218 * C1808 + C9212 * C1811) *
               C48780) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C7914 * C399 + C7908 * C410 + C7915 * C697 + C7909 * C702 +
             C7916 * C1494 + C49172 * C1501) *
                C9219 +
            (C7914 * C409 + C7908 * C417 + C7915 * C703 + C7909 * C712 +
             C7916 * C1500 + C49172 * C1506) *
                C48780) *
               C49197 +
           ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
             C7916 * C2373 + C49172 * C2379) *
                C9219 +
            (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
             C7916 * C2381 + C49172 * C2391) *
                C48780) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C7916 * C2385 + C49172 * C2393 + C7915 * C2384 + C7909 * C2392 +
             C7914 * C956 + C7908 * C964) *
                C48780 +
            (C7916 * C2375 + C49172 * C2383 + C7915 * C2374 + C7909 * C2382 +
             C7914 * C949 + C7908 * C955) *
                C9219) *
               C49175 +
           ((C8337 + C8338 + C8339) * C48780 +
            (C8340 + C8341 + C8342) * C9219) *
               C49197 +
           ((C7962 + C7961 + C7960) * C48780 +
            (C7959 + C7958 + C7957) * C9219) *
               C49208) *
              C48866 * C48849 * C111 +
          ((C7977 * C9219 + C7978 * C48780) * C49208 +
           ((C8336 + C8335 + C8334) * C9219 +
            (C8333 + C8332 + C8331) * C48780) *
               C49197 +
           ((C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
             C7916 * C2377 + C49172 * C2387) *
                C9219 +
            (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
             C7916 * C2389 + C49172 * C2395) *
                C48780) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C2900 * C7917 + C2901 * C49204 + C443 * C7918 + C442 * C49191 +
            C441 * C7919 + C440 * C49159) *
               C15280 +
           (C2902 * C7917 + C2903 * C49204 + C2522 * C7918 + C2523 * C49191 +
            C2524 * C7919 + C2525 * C49159) *
               C49175) *
              C48866 * C48849 * C110 -
          ((C2526 * C49159 + C2527 * C7919 + C2525 * C49191 + C2524 * C7918 +
            C2523 * C49204 + C2522 * C7917) *
               C49175 +
           (C438 * C49159 + C439 * C7919 + C440 * C49191 + C441 * C7918 +
            C442 * C49204 + C443 * C7917) *
               C15280 +
           (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
            C169 * C49204 + C168 * C7917) *
               C15279) *
              C48866 * C48849 * C111 +
          ((C170 * C7917 + C171 * C49204 + C172 * C7918 + C173 * C49191 +
            C174 * C7919 + C175 * C49159) *
               C15279 +
           (C441 * C7917 + C440 * C49204 + C439 * C7918 + C438 * C49191 +
            C437 * C7919 + C436 * C49159) *
               C15280 +
           (C2524 * C7917 + C2525 * C49204 + C2527 * C7918 + C2526 * C49191 +
            (C113 * C952 + C48877 * C961) * C7919 +
            (C113 * C962 + C48877 * C967) * C49159) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C1084 * C399 + C49207 * C410 + C1085 * C697 + C49195 * C702 +
             C1086 * C1494 + C49172 * C1501) *
                C9219 +
            (C1084 * C409 + C49207 * C417 + C1085 * C703 + C49195 * C712 +
             C1086 * C1500 + C49172 * C1506) *
                C48780) *
               C15280 +
           ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
             C1086 * C2373 + C49172 * C2379) *
                C9219 +
            (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
             C1086 * C2381 + C49172 * C2391) *
                C48780) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C1086 * C2385 + C49172 * C2393 + C1085 * C2384 + C49195 * C2392 +
             C1084 * C956 + C49207 * C964) *
                C48780 +
            (C1086 * C2375 + C49172 * C2383 + C1085 * C2374 + C49195 * C2382 +
             C1084 * C949 + C49207 * C955) *
                C9219) *
               C49175 +
           ((C1539 + C1540 + C1541) * C48780 +
            (C1542 + C1543 + C1544) * C9219) *
               C15280 +
           ((C1132 + C1131 + C1130) * C48780 +
            (C1129 + C1128 + C1127) * C9219) *
               C15279) *
              C48866 * C48849 * C111 +
          ((C1147 * C9219 + C1148 * C48780) * C15279 +
           ((C1538 + C1537 + C1536) * C9219 +
            (C1535 + C1534 + C1533) * C48780) *
               C15280 +
           ((C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
             C1086 * C2377 + C49172 * C2387) *
                C9219 +
            (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
             C1086 * C2389 + C49172 * C2395) *
                C48780) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C9219 +
            (C113 * C127 + C48877 * C140) * C48780) *
               C17808 +
           (C2900 * C9219 + C2901 * C48780) * C17809 +
           (C2902 * C9219 + C2903 * C48780) * C17810 +
           (C3775 * C9219 + C3774 * C48780) * C17811 +
           ((C113 * C3751 + C48877 * C3754) * C9219 +
            (C113 * C3755 + C48877 * C3760) * C48780) *
               C17812) *
              C48866 * C48849 * C110 -
          (((C113 * C3757 + C48877 * C3761) * C48780 +
            (C113 * C3752 + C48877 * C3756) * C9219) *
               C17812 +
           (C2906 * C48780 + C2907 * C9219) * C17811 +
           (C2523 * C48780 + C2522 * C9219) * C17810 +
           (C442 * C48780 + C443 * C9219) * C17809 +
           (C169 * C48780 + C168 * C9219) * C17808) *
              C48866 * C48849 * C111 +
          ((C170 * C9219 + C171 * C48780) * C17808 +
           (C441 * C9219 + C440 * C48780) * C17809 +
           (C2524 * C9219 + C2525 * C48780) * C17810 +
           (C2905 * C9219 + C2904 * C48780) * C17811 +
           ((C113 * C3753 + C48877 * C3758) * C9219 +
            (C113 * C3759 + C48877 * C3762) * C48780) *
               C17812) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C48866 * C259 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C48877 * C285) * C102 +
                (C113 * C267 + C48877 * C278) * C114) *
                   C48895 * C48866 * C49167) *
                  C261 +
              ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                (C113 * C268 + C48877 * C279) * C118 +
                (C113 * C280 + C48877 * C286) * C106) *
                   C48895 * C48866 * C49167 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48895 * C48866 * C259) *
                  C49165) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C48866 * C259 -
               ((C1335 + C1336 + C1337) * C49159 +
                (C1338 + C1339 + C1340) * C1089 +
                (C1341 + C1342 + C1343) * C1082 +
                (C1344 + C1345 + C1346) * C1088 +
                (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
                 C1084 * C277 + C49207 * C285) *
                    C1081 +
                (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
                 C1084 * C267 + C49207 * C278) *
                    C1087) *
                   C48895 * C48866 * C49167) *
                  C261 +
              (((C1346 + C1345 + C1344) * C1087 +
                (C1343 + C1342 + C1341) * C1081 +
                (C1340 + C1339 + C1338) * C1088 +
                (C1337 + C1336 + C1335) * C1082 +
                (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
                 C1086 * C1297 + C49172 * C1304) *
                    C1089 +
                (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
                 C1086 * C1305 + C49172 * C1309) *
                    C49159) *
                   C48895 * C48866 * C49167 -
               ((C1139 + C1140 + C1141) * C49159 +
                (C1142 + C1143 + C1144) * C1089 +
                (C1138 + C1137 + C1136) * C1082 +
                (C1135 + C1134 + C1133) * C1088 +
                (C1132 + C1131 + C1130) * C1081 +
                (C1129 + C1128 + C1127) * C1087) *
                   C48895 * C48866 * C259) *
                  C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            ((C113 * C399 + C48877 * C410) * C1087 +
             (C113 * C409 + C48877 * C417) * C1081 + C443 * C1088 +
             C442 * C1082 + C441 * C1089 + C440 * C49159) *
                C49197 +
            ((C113 * C948 + C48877 * C953) * C1087 +
             (C113 * C954 + C48877 * C963) * C1081 + C2522 * C1088 +
             C2523 * C1082 + C2524 * C1089 + C2525 * C49159) *
                C49175) *
               C48866 * C259 -
           ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
             (C113 * C2380 + C48877 * C2390) * C1081 +
             (C113 * C2372 + C48877 * C2378) * C1087) *
                C49175 +
            (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
             (C113 * C703 + C48877 * C712) * C1081 +
             (C113 * C697 + C48877 * C702) * C1087) *
                C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C48866 * C49167) *
              C261 +
          (((C311 * C1087 + C310 * C1081 + C309 * C1088 + C308 * C1082 +
             C307 * C1089 + C306 * C49159) *
                C49208 +
            (C2701 * C1087 + C2700 * C1081 + C2699 * C1088 + C2698 * C1082 +
             (C113 * C700 + C48877 * C708) * C1089 +
             (C113 * C709 + C48877 * C715) * C49159) *
                C49197 +
            (C2697 * C1087 + C2696 * C1081 + C2695 * C1088 + C2694 * C1082 +
             (C113 * C2673 + C48877 * C2674) * C1089 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2526 * C49159 + C2527 * C1089 + C2525 * C1082 + C2524 * C1088 +
             C2523 * C1081 + C2522 * C1087) *
                C49175 +
            (C438 * C49159 + C439 * C1089 + C440 * C1082 + C441 * C1088 +
             C442 * C1081 + C443 * C1087) *
                C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C259 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C259 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C7914 * C399 + C7908 * C410 + C7915 * C697 + C7909 * C702 +
              C7916 * C1494 + C49172 * C1501) *
                 C9219 +
             (C7914 * C409 + C7908 * C417 + C7915 * C703 + C7909 * C712 +
              C7916 * C1500 + C49172 * C1506) *
                 C48780) *
                C49197 +
            ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
              C7916 * C2373 + C49172 * C2379) *
                 C9219 +
             (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
              C7916 * C2381 + C49172 * C2391) *
                 C48780) *
                C49175) *
               C48866 * C259 -
           (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
              C7914 * C2380 + C7908 * C2390) *
                 C48780 +
             (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
              C7914 * C2372 + C7908 * C2378) *
                 C9219) *
                C49175 +
            ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
              C7914 * C703 + C7908 * C712) *
                 C48780 +
             (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
              C7914 * C697 + C7908 * C702) *
                 C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C48866 * C49167) *
              C261 +
          ((((C8160 + C8159 + C8158) * C9219 +
             (C8157 + C8156 + C8155) * C48780) *
                C49208 +
            ((C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
              C7916 * C1959 + C49172 * C1963) *
                 C9219 +
             (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
              C7916 * C1964 + C49172 * C1968) *
                 C48780) *
                C49197 +
            ((C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C9219 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C7916 * C2385 + C49172 * C2393 + C7915 * C2384 + C7909 * C2392 +
              C7914 * C956 + C7908 * C964) *
                 C48780 +
             (C7916 * C2375 + C49172 * C2383 + C7915 * C2374 + C7909 * C2382 +
              C7914 * C949 + C7908 * C955) *
                 C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C2900 * C7917 + C2901 * C49204 + C443 * C7918 + C442 * C49191 +
             C441 * C7919 + C440 * C49159) *
                C15280 +
            (C2902 * C7917 + C2903 * C49204 + C2522 * C7918 + C2523 * C49191 +
             C2524 * C7919 + C2525 * C49159) *
                C49175) *
               C48866 * C259 -
           ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
             C3345 * C49204 + C3344 * C7917) *
                C49175 +
            (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
             C3343 * C49204 + C3342 * C7917) *
                C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C48866 * C49167) *
              C261 +
          (((C311 * C7917 + C310 * C49204 + C309 * C7918 + C308 * C49191 +
             C307 * C7919 + C306 * C49159) *
                C15279 +
            (C2701 * C7917 + C2700 * C49204 + C2699 * C7918 + C2698 * C49191 +
             C5226 * C7919 + C5225 * C49159) *
                C15280 +
            (C2697 * C7917 + C2696 * C49204 + C2695 * C7918 + C2694 * C49191 +
             (C113 * C2673 + C48877 * C2674) * C7919 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2526 * C49159 + C2527 * C7919 + C2525 * C49191 + C2524 * C7918 +
             C2523 * C49204 + C2522 * C7917) *
                C49175 +
            (C438 * C49159 + C439 * C7919 + C440 * C49191 + C441 * C7918 +
             C442 * C49204 + C443 * C7917) *
                C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C1084 * C399 + C49207 * C410 + C1085 * C697 + C49195 * C702 +
              C1086 * C1494 + C49172 * C1501) *
                 C9219 +
             (C1084 * C409 + C49207 * C417 + C1085 * C703 + C49195 * C712 +
              C1086 * C1500 + C49172 * C1506) *
                 C48780) *
                C15280 +
            ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
              C1086 * C2373 + C49172 * C2379) *
                 C9219 +
             (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
              C1086 * C2381 + C49172 * C2391) *
                 C48780) *
                C49175) *
               C48866 * C259 -
           (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
              C1084 * C2380 + C49207 * C2390) *
                 C48780 +
             (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
              C1084 * C2372 + C49207 * C2378) *
                 C9219) *
                C49175 +
            ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
              C1084 * C703 + C49207 * C712) *
                 C48780 +
             (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
              C1084 * C697 + C49207 * C702) *
                 C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C48866 * C49167) *
              C261 +
          ((((C1346 + C1345 + C1344) * C9219 +
             (C1343 + C1342 + C1341) * C48780) *
                C15279 +
            ((C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
              C1086 * C1959 + C49172 * C1963) *
                 C9219 +
             (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
              C1086 * C1964 + C49172 * C1968) *
                 C48780) *
                C15280 +
            ((C1084 * C2374 + C49207 * C2382 + C1085 * C2375 + C49195 * C2383 +
              C1086 * C10124 + C49172 * C10125) *
                 C9219 +
             (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 + C49195 * C2393 +
              C1086 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C1086 * C2385 + C49172 * C2393 + C1085 * C2384 + C49195 * C2392 +
              C1084 * C956 + C49207 * C964) *
                 C48780 +
             (C1086 * C2375 + C49172 * C2383 + C1085 * C2374 + C49195 * C2382 +
              C1084 * C949 + C49207 * C955) *
                 C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C2900 * C9219 + C2901 * C48780) * C17809 +
            (C2902 * C9219 + C2903 * C48780) * C17810 +
            (C3775 * C9219 + C3774 * C48780) * C17811 +
            ((C113 * C3751 + C48877 * C3754) * C9219 +
             (C113 * C3755 + C48877 * C3760) * C48780) *
                C17812) *
               C48866 * C259 -
           (((C113 * C11184 + C48877 * C11186) * C48780 +
             (C113 * C11180 + C48877 * C11182) * C9219) *
                C17812 +
            ((C113 * C3317 + C48877 * C3322) * C48780 +
             (C113 * C3313 + C48877 * C3316) * C9219) *
                C17811 +
            (C3345 * C48780 + C3344 * C9219) * C17810 +
            (C3343 * C48780 + C3342 * C9219) * C17809 +
            ((C113 * C277 + C48877 * C285) * C48780 +
             (C113 * C267 + C48877 * C278) * C9219) *
                C17808) *
               C48866 * C49167) *
              C261 +
          (((C311 * C9219 + C310 * C48780) * C17808 +
            (C2701 * C9219 + C2700 * C48780) * C17809 +
            (C2697 * C9219 + C2696 * C48780) * C17810 +
            ((C113 * C3314 + C48877 * C3318) * C9219 +
             (C113 * C3319 + C48877 * C3323) * C48780) *
                C17811 +
            ((C113 * C17895 + C48877 * C17896) * C9219 +
             (C113 * C17897 + C48877 * C17898) * C48780) *
                C17812) *
               C48866 * C49167 -
           (((C113 * C3757 + C48877 * C3761) * C48780 +
             (C113 * C3752 + C48877 * C3756) * C9219) *
                C17812 +
            (C2906 * C48780 + C2907 * C9219) * C17811 +
            (C2523 * C48780 + C2522 * C9219) * C17810 +
            (C442 * C48780 + C443 * C9219) * C17809 +
            (C169 * C48780 + C168 * C9219) * C17808) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C393 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C48877 * C417) * C102 +
                (C113 * C399 + C48877 * C410) * C114) *
                   C48895 * C49169) *
                  C48849 * C261 +
              ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                (C113 * C400 + C48877 * C411) * C118 +
                (C113 * C412 + C48877 * C418) * C106) *
                   C48895 * C49169 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48895 * C393) *
                  C48849 * C49165) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C393 -
               ((C1533 + C1534 + C1535) * C49159 +
                (C1536 + C1537 + C1538) * C1089 +
                (C1539 + C1540 + C1541) * C1082 +
                (C1542 + C1543 + C1544) * C1088 +
                (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
                 C1084 * C409 + C49207 * C417) *
                    C1081 +
                (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
                 C1084 * C399 + C49207 * C410) *
                    C1087) *
                   C48895 * C49169) *
                  C48849 * C261 +
              (((C1544 + C1543 + C1542) * C1087 +
                (C1541 + C1540 + C1539) * C1081 +
                (C1538 + C1537 + C1536) * C1088 +
                (C1535 + C1534 + C1533) * C1082 +
                (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
                 C1086 * C1495 + C49172 * C1502) *
                    C1089 +
                (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
                 C1086 * C1503 + C49172 * C1507) *
                    C49159) *
                   C48895 * C49169 -
               ((C1139 + C1140 + C1141) * C49159 +
                (C1142 + C1143 + C1144) * C1089 +
                (C1138 + C1137 + C1136) * C1082 +
                (C1135 + C1134 + C1133) * C1088 +
                (C1132 + C1131 + C1130) * C1081 +
                (C1129 + C1128 + C1127) * C1087) *
                   C48895 * C393) *
                  C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C48849 * C261 +
          (((C2888 + C2889 + C2890 + C2891 + C2892 + C2893) * C49208 +
            (C2894 + C2895 + C2896 + C2897 + C2898 + C2899) * C49197 +
            (C2907 * C1087 + C2906 * C1081 + C2905 * C1088 + C2904 * C1082 +
             (C113 * C2850 + C48877 * C2857) * C1089 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C393 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C48849 * C261 +
          ((((C8342 + C8341 + C8340) * C9219 +
             (C8339 + C8338 + C8337) * C48780) *
                C49208 +
            ((C10331 + C10332 + C10333) * C9219 +
             (C10334 + C10335 + C10336) * C48780) *
                C49197 +
            ((C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
              C7916 * C10275 + C49172 * C10278) *
                 C9219 +
             (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
              C7916 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C48849 * C261 +
          (((C15587 + C15588 + C15589 + C15590 + C15591 + C15592) * C15279 +
            (C15593 + C15594 + C15595 + C15596 + C15597 + C15598) * C15280 +
            (C2907 * C7917 + C2906 * C49204 + C2905 * C7918 + C2904 * C49191 +
             (C113 * C2850 + C48877 * C2857) * C7919 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C393 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C48849 * C261 +
          ((((C1544 + C1543 + C1542) * C9219 +
             (C1541 + C1540 + C1539) * C48780) *
                C15279 +
            ((C16876 + C16877 + C16878) * C9219 +
             (C16879 + C16880 + C16881) * C48780) *
                C15280 +
            ((C1084 * C2848 + C49207 * C2854 + C1085 * C3314 + C49195 * C3318 +
              C1086 * C10275 + C49172 * C10278) *
                 C9219 +
             (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 + C49195 * C3323 +
              C1086 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
               C393 -
           (((C113 * C17983 + C48877 * C17987) * C48780 +
             (C113 * C17981 + C48877 * C17984) * C9219) *
                C17812 +
            (C18015 + C18014) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49169) *
              C48849 * C261 +
          (((C18000 + C18001) * C17808 + (C18002 + C18003) * C17809 +
            (C18004 + C18005) * C17810 + (C18016 + C18017) * C17811 +
            ((C113 * C17982 + C48877 * C17985) * C9219 +
             (C113 * C17986 + C48877 * C17988) * C48780) *
                C17812) *
               C49169 -
           ((C18017 + C18016) * C17812 + (C18005 + C18004) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            (C169 * C48780 + C168 * C9219) * C17808) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C48866 * C525 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C48877 * C285) * C102 +
                (C113 * C267 + C48877 * C278) * C114) *
                   C48895 * C48866 * C49167) *
                  C527 +
              ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                (C113 * C268 + C48877 * C279) * C118 +
                (C113 * C280 + C48877 * C286) * C106) *
                   C48895 * C48866 * C49167 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48895 * C48866 * C525) *
                  C49165) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C48866 * C525 -
               ((C1335 + C1336 + C1337) * C49159 +
                (C1338 + C1339 + C1340) * C1089 +
                (C1341 + C1342 + C1343) * C1082 +
                (C1344 + C1345 + C1346) * C1088 +
                (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
                 C1084 * C277 + C49207 * C285) *
                    C1081 +
                (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
                 C1084 * C267 + C49207 * C278) *
                    C1087) *
                   C48895 * C48866 * C49167) *
                  C527 +
              (((C1346 + C1345 + C1344) * C1087 +
                (C1343 + C1342 + C1341) * C1081 +
                (C1340 + C1339 + C1338) * C1088 +
                (C1337 + C1336 + C1335) * C1082 +
                (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
                 C1086 * C1297 + C49172 * C1304) *
                    C1089 +
                (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
                 C1086 * C1305 + C49172 * C1309) *
                    C49159) *
                   C48895 * C48866 * C49167 -
               ((C1139 + C1140 + C1141) * C49159 +
                (C1142 + C1143 + C1144) * C1089 +
                (C1138 + C1137 + C1136) * C1082 +
                (C1135 + C1134 + C1133) * C1088 +
                (C1132 + C1131 + C1130) * C1081 +
                (C1129 + C1128 + C1127) * C1087) *
                   C48895 * C48866 * C525) *
                  C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C48866 * C525 -
           ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
             (C113 * C2380 + C48877 * C2390) * C1081 +
             (C113 * C2372 + C48877 * C2378) * C1087) *
                C49175 +
            (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
             (C113 * C703 + C48877 * C712) * C1081 +
             (C113 * C697 + C48877 * C702) * C1087) *
                C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C48866 * C49167) *
              C527 +
          (((C311 * C1087 + C310 * C1081 + C309 * C1088 + C308 * C1082 +
             C307 * C1089 + C306 * C49159) *
                C49208 +
            (C2701 * C1087 + C2700 * C1081 + C2699 * C1088 + C2698 * C1082 +
             (C113 * C700 + C48877 * C708) * C1089 +
             (C113 * C709 + C48877 * C715) * C49159) *
                C49197 +
            (C2697 * C1087 + C2696 * C1081 + C2695 * C1088 + C2694 * C1082 +
             (C113 * C2673 + C48877 * C2674) * C1089 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C525 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C525 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C48866 * C525 -
           (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
              C7914 * C2380 + C7908 * C2390) *
                 C48780 +
             (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
              C7914 * C2372 + C7908 * C2378) *
                 C9219) *
                C49175 +
            ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
              C7914 * C703 + C7908 * C712) *
                 C48780 +
             (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
              C7914 * C697 + C7908 * C702) *
                 C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C48866 * C49167) *
              C527 +
          ((((C8160 + C8159 + C8158) * C9219 +
             (C8157 + C8156 + C8155) * C48780) *
                C49208 +
            ((C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
              C7916 * C1959 + C49172 * C1963) *
                 C9219 +
             (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
              C7916 * C1964 + C49172 * C1968) *
                 C48780) *
                C49197 +
            ((C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C9219 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C48866 * C525 -
           ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
             C3345 * C49204 + C3344 * C7917) *
                C49175 +
            (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
             C3343 * C49204 + C3342 * C7917) *
                C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C48866 * C49167) *
              C527 +
          (((C311 * C7917 + C310 * C49204 + C309 * C7918 + C308 * C49191 +
             C307 * C7919 + C306 * C49159) *
                C15279 +
            (C2701 * C7917 + C2700 * C49204 + C2699 * C7918 + C2698 * C49191 +
             C5226 * C7919 + C5225 * C49159) *
                C15280 +
            (C2697 * C7917 + C2696 * C49204 + C2695 * C7918 + C2694 * C49191 +
             (C113 * C2673 + C48877 * C2674) * C7919 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C48866 * C525 -
           (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
              C1084 * C2380 + C49207 * C2390) *
                 C48780 +
             (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
              C1084 * C2372 + C49207 * C2378) *
                 C9219) *
                C49175 +
            ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
              C1084 * C703 + C49207 * C712) *
                 C48780 +
             (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
              C1084 * C697 + C49207 * C702) *
                 C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C48866 * C49167) *
              C527 +
          ((((C1346 + C1345 + C1344) * C9219 +
             (C1343 + C1342 + C1341) * C48780) *
                C15279 +
            ((C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
              C1086 * C1959 + C49172 * C1963) *
                 C9219 +
             (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
              C1086 * C1964 + C49172 * C1968) *
                 C48780) *
                C15280 +
            ((C1084 * C2374 + C49207 * C2382 + C1085 * C2375 + C49195 * C2383 +
              C1086 * C10124 + C49172 * C10125) *
                 C9219 +
             (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 + C49195 * C2393 +
              C1086 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
               C48866 * C525 -
           (((C113 * C11184 + C48877 * C11186) * C48780 +
             (C113 * C11180 + C48877 * C11182) * C9219) *
                C17812 +
            ((C113 * C3317 + C48877 * C3322) * C48780 +
             (C113 * C3313 + C48877 * C3316) * C9219) *
                C17811 +
            (C3345 * C48780 + C3344 * C9219) * C17810 +
            (C3343 * C48780 + C3342 * C9219) * C17809 +
            ((C113 * C277 + C48877 * C285) * C48780 +
             (C113 * C267 + C48877 * C278) * C9219) *
                C17808) *
               C48866 * C49167) *
              C527 +
          (((C311 * C9219 + C310 * C48780) * C17808 +
            (C2701 * C9219 + C2700 * C48780) * C17809 +
            (C2697 * C9219 + C2696 * C48780) * C17810 +
            ((C113 * C3314 + C48877 * C3318) * C9219 +
             (C113 * C3319 + C48877 * C3323) * C48780) *
                C17811 +
            ((C113 * C17895 + C48877 * C17896) * C9219 +
             (C113 * C17897 + C48877 * C17898) * C48780) *
                C17812) *
               C48866 * C49167 -
           ((C18017 + C18016) * C17812 + (C18005 + C18004) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            (C169 * C48780 + C168 * C9219) * C17808) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48877 * C126) * C114 +
               (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48895 * C48866 * C591 -
              (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
               C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
               (C113 * C277 + C48877 * C285) * C102 +
               (C113 * C267 + C48877 * C278) * C114) *
                  C48895 * C48866 * C592 +
              ((C113 * C595 + C48877 * C600) * C114 +
               (C113 * C601 + C48877 * C610) * C102 +
               (C113 * C596 + C48877 * C602) * C115 +
               (C113 * C603 + C48877 * C611) * C103 +
               (C113 * C597 + C48877 * C604) * C116 +
               (C113 * C605 + C48877 * C612) * C104 +
               (C113 * C598 + C48877 * C606) * C117 +
               (C113 * C607 + C48877 * C613) * C105 +
               (C113 * C599 + C48877 * C608) * C118 +
               (C113 * C609 + C48877 * C614) * C106) *
                  C48895 * C48866 * C593) *
             C48815 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                C1086 * C595 + C49172 * C600) *
                   C1087 +
               (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                C1086 * C601 + C49172 * C610) *
                   C1081 +
               (C1127 + C1128 + C1129) * C1088 +
               (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
               C1148 * C49159) *
                  C48895 * C48866 * C591 -
              ((C1335 + C1336 + C1337) * C49159 +
               (C1338 + C1339 + C1340) * C1089 +
               (C1341 + C1342 + C1343) * C1082 +
               (C1344 + C1345 + C1346) * C1088 +
               (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
                C1084 * C277 + C49207 * C285) *
                   C1081 +
               (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
                C1084 * C267 + C49207 * C278) *
                   C1087) *
                  C48895 * C48866 * C592 +
              ((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
                C1086 * C1800 + C49172 * C1803) *
                   C1087 +
               (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
                C1086 * C1804 + C49172 * C1809) *
                   C1081 +
               (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
                C1086 * C1801 + C49172 * C1805) *
                   C1088 +
               (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
                C1086 * C1806 + C49172 * C1810) *
                   C1082 +
               (C1084 * C597 + C49207 * C604 + C1085 * C1294 + C49195 * C1299 +
                C1086 * C1802 + C49172 * C1807) *
                   C1089 +
               (C1084 * C605 + C49207 * C612 + C1085 * C1298 + C49195 * C1306 +
                C1086 * C1808 + C49172 * C1811) *
                   C49159) *
                  C48895 * C48866 * C593) *
             C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
           (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
              C48866 * C591 -
          ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
            (C113 * C2380 + C48877 * C2390) * C1081 +
            (C113 * C2372 + C48877 * C2378) * C1087) *
               C49175 +
           (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
            (C113 * C703 + C48877 * C712) * C1081 +
            (C113 * C697 + C48877 * C702) * C1087) *
               C49197 +
           (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
            (C113 * C277 + C48877 * C285) * C1081 +
            (C113 * C267 + C48877 * C278) * C1087) *
               C49208) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C1087 +
            (C113 * C601 + C48877 * C610) * C1081 +
            (C113 * C596 + C48877 * C602) * C1088 +
            (C113 * C603 + C48877 * C611) * C1082 +
            (C113 * C597 + C48877 * C604) * C1089 +
            (C113 * C605 + C48877 * C612) * C49159) *
               C49208 +
           ((C113 * C1494 + C48877 * C1501) * C1087 +
            (C113 * C1500 + C48877 * C1506) * C1081 +
            (C113 * C1493 + C48877 * C1499) * C1088 +
            (C113 * C1498 + C48877 * C1505) * C1082 +
            (C113 * C1492 + C48877 * C1497) * C1089 +
            (C113 * C1496 + C48877 * C1504) * C49159) *
               C49197 +
           ((C113 * C2373 + C48877 * C2379) * C1087 +
            (C113 * C2381 + C48877 * C2391) * C1081 +
            (C113 * C2375 + C48877 * C2383) * C1088 +
            (C113 * C2385 + C48877 * C2393) * C1082 +
            (C113 * C2377 + C48877 * C2387) * C1089 +
            (C113 * C2389 + C48877 * C2395) * C49159) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C591 -
          ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
           (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
           (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
            C7914 * C277 + C7908 * C285) *
               C49204 +
           (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
            C7914 * C267 + C7908 * C278) *
               C7917) *
              C48895 * C48866 * C592 +
          ((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
            C7916 * C1800 + C49172 * C1803) *
               C7917 +
           (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
            C7916 * C1804 + C49172 * C1809) *
               C49204 +
           (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
            C7916 * C1801 + C49172 * C1805) *
               C7918 +
           (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
            C7916 * C1806 + C49172 * C1810) *
               C49191 +
           (C7914 * C597 + C7908 * C604 + C7915 * C1294 + C7909 * C1299 +
            C7916 * C1802 + C49172 * C1807) *
               C7919 +
           (C7914 * C605 + C7908 * C612 + C7915 * C1298 + C7909 * C1306 +
            C7916 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C591 -
          ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
            C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
            C9214 * C277 + C9208 * C285) *
               C48780 +
           (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
            C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
            C9214 * C267 + C9208 * C278) *
               C9219) *
              C48895 * C48866 * C592 +
          ((C9214 * C595 + C9208 * C600 + C9215 * C1296 + C9209 * C1303 +
            C9216 * C1800 + C9210 * C1803 + C9217 * C9302 + C9211 * C9305 +
            C9218 * C9544 + C9212 * C9545) *
               C9219 +
           (C9214 * C601 + C9208 * C610 + C9215 * C1302 + C9209 * C1308 +
            C9216 * C1804 + C9210 * C1809 + C9217 * C9304 + C9211 * C9308 +
            C9218 * C9546 + C9212 * C9547) *
               C48780) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C10319 + C10320 + C10321) * C9219 +
            (C10322 + C10323 + C10324) * C48780) *
               C49197 +
           ((C10325 + C10326 + C10327) * C9219 +
            (C10328 + C10329 + C10330) * C48780) *
               C49175) *
              C48866 * C591 -
          (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
             C7914 * C2380 + C7908 * C2390) *
                C48780 +
            (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
             C7914 * C2372 + C7908 * C2378) *
                C9219) *
               C49175 +
           ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
             C7914 * C703 + C7908 * C712) *
                C48780 +
            (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
             C7914 * C697 + C7908 * C702) *
                C9219) *
               C49197 +
           ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C48780 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C9219) *
               C49208) *
              C48866 * C592 +
          (((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
             C7916 * C1800 + C49172 * C1803) *
                C9219 +
            (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
             C7916 * C1804 + C49172 * C1809) *
                C48780) *
               C49208 +
           ((C7914 * C1494 + C7908 * C1501 + C7915 * C1958 + C7909 * C1961 +
             C7916 * C9392 + C49172 * C9395) *
                C9219 +
            (C7914 * C1500 + C7908 * C1506 + C7915 * C1962 + C7909 * C1967 +
             C7916 * C9394 + C49172 * C9398) *
                C48780) *
               C49197 +
           ((C7914 * C2373 + C7908 * C2379 + C7915 * C9860 + C7909 * C9862 +
             C7916 * C9861 + C49172 * C9863) *
                C9219 +
            (C7914 * C2381 + C7908 * C2391 + C7915 * C9864 + C7909 * C9866 +
             C7916 * C9865 + C49172 * C9867) *
                C48780) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
           (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
              C48866 * C591 -
          ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
            C3345 * C49204 + C3344 * C7917) *
               C49175 +
           (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
            C3343 * C49204 + C3342 * C7917) *
               C15280 +
           (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
            (C113 * C277 + C48877 * C285) * C49204 +
            (C113 * C267 + C48877 * C278) * C7917) *
               C15279) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C7917 +
            (C113 * C601 + C48877 * C610) * C49204 +
            (C113 * C596 + C48877 * C602) * C7918 +
            (C113 * C603 + C48877 * C611) * C49191 +
            (C113 * C597 + C48877 * C604) * C7919 +
            (C113 * C605 + C48877 * C612) * C49159) *
               C15279 +
           ((C113 * C1494 + C48877 * C1501) * C7917 +
            (C113 * C1500 + C48877 * C1506) * C49204 +
            (C113 * C1493 + C48877 * C1499) * C7918 +
            (C113 * C1498 + C48877 * C1505) * C49191 +
            (C113 * C1492 + C48877 * C1497) * C7919 +
            (C113 * C1496 + C48877 * C1504) * C49159) *
               C15280 +
           ((C113 * C2373 + C48877 * C2379) * C7917 +
            (C113 * C2381 + C48877 * C2391) * C49204 +
            (C113 * C2375 + C48877 * C2383) * C7918 +
            (C113 * C2385 + C48877 * C2393) * C49191 +
            (C113 * C2377 + C48877 * C2387) * C7919 +
            (C113 * C2389 + C48877 * C2395) * C49159) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C16864 + C16865 + C16866) * C9219 +
            (C16867 + C16868 + C16869) * C48780) *
               C15280 +
           ((C16870 + C16871 + C16872) * C9219 +
            (C16873 + C16874 + C16875) * C48780) *
               C49175) *
              C48866 * C591 -
          (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
             C1084 * C2380 + C49207 * C2390) *
                C48780 +
            (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
             C1084 * C2372 + C49207 * C2378) *
                C9219) *
               C49175 +
           ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
             C1084 * C703 + C49207 * C712) *
                C48780 +
            (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
             C1084 * C697 + C49207 * C702) *
                C9219) *
               C15280 +
           ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C48780 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C9219) *
               C15279) *
              C48866 * C592 +
          (((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
             C1086 * C1800 + C49172 * C1803) *
                C9219 +
            (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
             C1086 * C1804 + C49172 * C1809) *
                C48780) *
               C15279 +
           ((C1084 * C1494 + C49207 * C1501 + C1085 * C1958 + C49195 * C1961 +
             C1086 * C9392 + C49172 * C9395) *
                C9219 +
            (C1084 * C1500 + C49207 * C1506 + C1085 * C1962 + C49195 * C1967 +
             C1086 * C9394 + C49172 * C9398) *
                C48780) *
               C15280 +
           ((C1084 * C2373 + C49207 * C2379 + C1085 * C9860 + C49195 * C9862 +
             C1086 * C9861 + C49172 * C9863) *
                C9219 +
            (C1084 * C2381 + C49207 * C2391 + C1085 * C9864 + C49195 * C9866 +
             C1086 * C9865 + C49172 * C9867) *
                C48780) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C9219 +
            (C113 * C127 + C48877 * C140) * C48780) *
               C17808 +
           (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
           (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
              C48866 * C591 -
          (((C113 * C11184 + C48877 * C11186) * C48780 +
            (C113 * C11180 + C48877 * C11182) * C9219) *
               C17812 +
           ((C113 * C3317 + C48877 * C3322) * C48780 +
            (C113 * C3313 + C48877 * C3316) * C9219) *
               C17811 +
           (C3345 * C48780 + C3344 * C9219) * C17810 +
           (C3343 * C48780 + C3342 * C9219) * C17809 +
           ((C113 * C277 + C48877 * C285) * C48780 +
            (C113 * C267 + C48877 * C278) * C9219) *
               C17808) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C9219 +
            (C113 * C601 + C48877 * C610) * C48780) *
               C17808 +
           ((C113 * C1494 + C48877 * C1501) * C9219 +
            (C113 * C1500 + C48877 * C1506) * C48780) *
               C17809 +
           ((C113 * C2373 + C48877 * C2379) * C9219 +
            (C113 * C2381 + C48877 * C2391) * C48780) *
               C17810 +
           ((C113 * C10274 + C48877 * C10277) * C9219 +
            (C113 * C10276 + C48877 * C10280) * C48780) *
               C17811 +
           ((C113 * C11181 + C48877 * C11183) * C9219 +
            (C113 * C11185 + C48877 * C11187) * C48780) *
               C17812) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C393 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C48877 * C417) * C102 +
                (C113 * C399 + C48877 * C410) * C114) *
                   C48895 * C49169) *
                  C525 +
              (((C113 * C697 + C48877 * C702) * C114 +
                (C113 * C703 + C48877 * C712) * C102 +
                (C113 * C698 + C48877 * C704) * C115 +
                (C113 * C705 + C48877 * C713) * C103 +
                (C113 * C699 + C48877 * C706) * C116 +
                (C113 * C707 + C48877 * C714) * C104 +
                (C113 * C700 + C48877 * C708) * C117 +
                (C113 * C709 + C48877 * C715) * C105 +
                (C113 * C701 + C48877 * C710) * C118 +
                (C113 * C711 + C48877 * C716) * C106) *
                   C48895 * C49169 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C48877 * C285) * C102 +
                (C113 * C267 + C48877 * C278) * C114) *
                   C48895 * C393) *
                  C49167) *
             C48815 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C393 -
               ((C1533 + C1534 + C1535) * C49159 +
                (C1536 + C1537 + C1538) * C1089 +
                (C1539 + C1540 + C1541) * C1082 +
                (C1542 + C1543 + C1544) * C1088 +
                (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
                 C1084 * C409 + C49207 * C417) *
                    C1081 +
                (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
                 C1084 * C399 + C49207 * C410) *
                    C1087) *
                   C48895 * C49169) *
                  C525 +
              (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
                 C1086 * C1958 + C49172 * C1961) *
                    C1087 +
                (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
                 C1086 * C1962 + C49172 * C1967) *
                    C1081 +
                (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
                 C1086 * C1959 + C49172 * C1963) *
                    C1088 +
                (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
                 C1086 * C1964 + C49172 * C1968) *
                    C1082 +
                (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
                 C1086 * C1960 + C49172 * C1965) *
                    C1089 +
                (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
                 C1086 * C1966 + C49172 * C1969) *
                    C49159) *
                   C48895 * C49169 -
               ((C1335 + C1336 + C1337) * C49159 +
                (C1338 + C1339 + C1340) * C1089 +
                (C1341 + C1342 + C1343) * C1082 +
                (C1344 + C1345 + C1346) * C1088 +
                (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
                 C1084 * C277 + C49207 * C285) *
                    C1081 +
                (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
                 C1084 * C267 + C49207 * C278) *
                    C1087) *
                   C48895 * C393) *
                  C49167) *
             C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C525 +
          (((C3346 + C3347 + C3330 + C3331 + C3332 + C3333) * C49208 +
            (C3348 + C3349 + C3338 + C3339 + C3340 + C3341) * C49197 +
            ((C113 * C3313 + C48877 * C3316) * C1087 +
             (C113 * C3317 + C48877 * C3322) * C1081 +
             (C113 * C3314 + C48877 * C3318) * C1088 +
             (C113 * C3319 + C48877 * C3323) * C1082 +
             (C113 * C3315 + C48877 * C3320) * C1089 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C3341 + C3340 + C3339 + C3338 + C3349 + C3348) * C49175 +
            (C3333 + C3332 + C3331 + C3330 + C3347 + C3346) * C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C525 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C525 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C393 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C525 +
          ((((C10767 + C10768 + C10769) * C9219 +
             (C10770 + C10771 + C10772) * C48780) *
                C49208 +
            ((C10773 + C10774 + C10775) * C9219 +
             (C10776 + C10777 + C10778) * C48780) *
                C49197 +
            ((C7914 * C3313 + C7908 * C3316 + C7915 * C10274 + C7909 * C10277 +
              C7916 * C10738 + C49172 * C10739) *
                 C9219 +
             (C7914 * C3317 + C7908 * C3322 + C7915 * C10276 + C7909 * C10280 +
              C7916 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10778 + C10777 + C10776) * C48780 +
             (C10775 + C10774 + C10773) * C9219) *
                C49175 +
            ((C10772 + C10771 + C10770) * C48780 +
             (C10769 + C10768 + C10767) * C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C525 +
          (((C16001 + C16002 + C16003 + C16004 + C16005 + C16006) * C15279 +
            (C16007 + C16008 + C16009 + C16010 + C16011 + C16012) * C15280 +
            ((C113 * C3313 + C48877 * C3316) * C7917 +
             (C113 * C3317 + C48877 * C3322) * C49204 +
             (C113 * C3314 + C48877 * C3318) * C7918 +
             (C113 * C3319 + C48877 * C3323) * C49191 +
             (C113 * C3315 + C48877 * C3320) * C7919 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C16012 + C16011 + C16010 + C16009 + C16008 + C16007) * C49175 +
            (C16006 + C16005 + C16004 + C16003 + C16002 + C16001) * C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C393 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C525 +
          ((((C17308 + C17309 + C17310) * C9219 +
             (C17311 + C17312 + C17313) * C48780) *
                C15279 +
            ((C17314 + C17315 + C17316) * C9219 +
             (C17317 + C17318 + C17319) * C48780) *
                C15280 +
            ((C1084 * C3313 + C49207 * C3316 + C1085 * C10274 +
              C49195 * C10277 + C1086 * C10738 + C49172 * C10739) *
                 C9219 +
             (C1084 * C3317 + C49207 * C3322 + C1085 * C10276 +
              C49195 * C10280 + C1086 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C17319 + C17318 + C17317) * C48780 +
             (C17316 + C17315 + C17314) * C9219) *
                C49175 +
            ((C17313 + C17312 + C17311) * C48780 +
             (C17310 + C17309 + C17308) * C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
               C393 -
           (((C113 * C17983 + C48877 * C17987) * C48780 +
             (C113 * C17981 + C48877 * C17984) * C9219) *
                C17812 +
            (C18015 + C18014) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49169) *
              C525 +
          (((C18248 + C18249) * C17808 + (C18250 + C18251) * C17809 +
            (C18264 + C18265) * C17810 + (C18266 + C18267) * C17811 +
            ((C113 * C18243 + C48877 * C18244) * C9219 +
             (C113 * C18245 + C48877 * C18246) * C48780) *
                C17812) *
               C49169 -
           ((C18267 + C18266) * C17812 + (C18265 + C18264) * C17811 +
            (C18251 + C18250) * C17810 + (C18249 + C18248) * C17809 +
            ((C113 * C277 + C48877 * C285) * C48780 +
             (C113 * C267 + C48877 * C278) * C9219) *
                C17808) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C799 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C48877 * C417) * C102 +
                (C113 * C399 + C48877 * C410) * C114) *
                   C48895 * C49169) *
                  C48849 * C527 +
              ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                (C113 * C400 + C48877 * C411) * C118 +
                (C113 * C412 + C48877 * C418) * C106) *
                   C48895 * C49169 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48895 * C799) *
                  C48849 * C49165) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C799 -
               ((C1533 + C1534 + C1535) * C49159 +
                (C1536 + C1537 + C1538) * C1089 +
                (C1539 + C1540 + C1541) * C1082 +
                (C1542 + C1543 + C1544) * C1088 +
                (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
                 C1084 * C409 + C49207 * C417) *
                    C1081 +
                (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
                 C1084 * C399 + C49207 * C410) *
                    C1087) *
                   C48895 * C49169) *
                  C48849 * C527 +
              (((C1544 + C1543 + C1542) * C1087 +
                (C1541 + C1540 + C1539) * C1081 +
                (C1538 + C1537 + C1536) * C1088 +
                (C1535 + C1534 + C1533) * C1082 +
                (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
                 C1086 * C1495 + C49172 * C1502) *
                    C1089 +
                (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
                 C1086 * C1503 + C49172 * C1507) *
                    C49159) *
                   C48895 * C49169 -
               ((C1139 + C1140 + C1141) * C49159 +
                (C1142 + C1143 + C1144) * C1089 +
                (C1138 + C1137 + C1136) * C1082 +
                (C1135 + C1134 + C1133) * C1088 +
                (C1132 + C1131 + C1130) * C1081 +
                (C1129 + C1128 + C1127) * C1087) *
                   C48895 * C799) *
                  C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C48849 * C527 +
          (((C2888 + C2889 + C2890 + C2891 + C2892 + C2893) * C49208 +
            (C2894 + C2895 + C2896 + C2897 + C2898 + C2899) * C49197 +
            (C2907 * C1087 + C2906 * C1081 + C2905 * C1088 + C2904 * C1082 +
             (C113 * C2850 + C48877 * C2857) * C1089 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C799 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C48849 * C527 +
          ((((C8342 + C8341 + C8340) * C9219 +
             (C8339 + C8338 + C8337) * C48780) *
                C49208 +
            ((C10331 + C10332 + C10333) * C9219 +
             (C10334 + C10335 + C10336) * C48780) *
                C49197 +
            ((C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
              C7916 * C10275 + C49172 * C10278) *
                 C9219 +
             (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
              C7916 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C48849 * C527 +
          (((C15587 + C15588 + C15589 + C15590 + C15591 + C15592) * C15279 +
            (C15593 + C15594 + C15595 + C15596 + C15597 + C15598) * C15280 +
            (C2907 * C7917 + C2906 * C49204 + C2905 * C7918 + C2904 * C49191 +
             (C113 * C2850 + C48877 * C2857) * C7919 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C799 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C48849 * C527 +
          ((((C1544 + C1543 + C1542) * C9219 +
             (C1541 + C1540 + C1539) * C48780) *
                C15279 +
            ((C16876 + C16877 + C16878) * C9219 +
             (C16879 + C16880 + C16881) * C48780) *
                C15280 +
            ((C1084 * C2848 + C49207 * C2854 + C1085 * C3314 + C49195 * C3318 +
              C1086 * C10275 + C49172 * C10278) *
                 C9219 +
             (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 + C49195 * C3323 +
              C1086 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
               C799 -
           (((C113 * C17983 + C48877 * C17987) * C48780 +
             (C113 * C17981 + C48877 * C17984) * C9219) *
                C17812 +
            (C18015 + C18014) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49169) *
              C48849 * C527 +
          (((C18000 + C18001) * C17808 + (C18002 + C18003) * C17809 +
            (C18004 + C18005) * C17810 + (C18016 + C18017) * C17811 +
            ((C113 * C17982 + C48877 * C17985) * C9219 +
             (C113 * C17986 + C48877 * C17988) * C48780) *
                C17812) *
               C49169 -
           ((C18017 + C18016) * C17812 + (C18005 + C18004) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            (C169 * C48780 + C168 * C9219) * C17808) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48877 * C126) * C114 +
                (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48895 * C799 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C48877 * C417) * C102 +
                (C113 * C399 + C48877 * C410) * C114) *
                   C48895 * C49169) *
                  C259 +
              (((C113 * C697 + C48877 * C702) * C114 +
                (C113 * C703 + C48877 * C712) * C102 +
                (C113 * C698 + C48877 * C704) * C115 +
                (C113 * C705 + C48877 * C713) * C103 +
                (C113 * C699 + C48877 * C706) * C116 +
                (C113 * C707 + C48877 * C714) * C104 +
                (C113 * C700 + C48877 * C708) * C117 +
                (C113 * C709 + C48877 * C715) * C105 +
                (C113 * C701 + C48877 * C710) * C118 +
                (C113 * C711 + C48877 * C716) * C106) *
                   C48895 * C49169 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C48877 * C285) * C102 +
                (C113 * C267 + C48877 * C278) * C114) *
                   C48895 * C799) *
                  C49167) *
             C48815 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                 C1086 * C595 + C49172 * C600) *
                    C1087 +
                (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                 C1086 * C601 + C49172 * C610) *
                    C1081 +
                (C1127 + C1128 + C1129) * C1088 +
                (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
                C1148 * C49159) *
                   C48895 * C799 -
               ((C1533 + C1534 + C1535) * C49159 +
                (C1536 + C1537 + C1538) * C1089 +
                (C1539 + C1540 + C1541) * C1082 +
                (C1542 + C1543 + C1544) * C1088 +
                (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
                 C1084 * C409 + C49207 * C417) *
                    C1081 +
                (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
                 C1084 * C399 + C49207 * C410) *
                    C1087) *
                   C48895 * C49169) *
                  C259 +
              (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
                 C1086 * C1958 + C49172 * C1961) *
                    C1087 +
                (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
                 C1086 * C1962 + C49172 * C1967) *
                    C1081 +
                (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
                 C1086 * C1959 + C49172 * C1963) *
                    C1088 +
                (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
                 C1086 * C1964 + C49172 * C1968) *
                    C1082 +
                (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
                 C1086 * C1960 + C49172 * C1965) *
                    C1089 +
                (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
                 C1086 * C1966 + C49172 * C1969) *
                    C49159) *
                   C48895 * C49169 -
               ((C1335 + C1336 + C1337) * C49159 +
                (C1338 + C1339 + C1340) * C1089 +
                (C1341 + C1342 + C1343) * C1082 +
                (C1344 + C1345 + C1346) * C1088 +
                (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
                 C1084 * C277 + C49207 * C285) *
                    C1081 +
                (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
                 C1084 * C267 + C49207 * C278) *
                    C1087) *
                   C48895 * C799) *
                  C49167) *
             C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C259 +
          (((C3346 + C3347 + C3330 + C3331 + C3332 + C3333) * C49208 +
            (C3348 + C3349 + C3338 + C3339 + C3340 + C3341) * C49197 +
            ((C113 * C3313 + C48877 * C3316) * C1087 +
             (C113 * C3317 + C48877 * C3322) * C1081 +
             (C113 * C3314 + C48877 * C3318) * C1088 +
             (C113 * C3319 + C48877 * C3323) * C1082 +
             (C113 * C3315 + C48877 * C3320) * C1089 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C3341 + C3340 + C3339 + C3338 + C3349 + C3348) * C49175 +
            (C3333 + C3332 + C3331 + C3330 + C3347 + C3346) * C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C259 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C259 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C799 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C259 +
          ((((C10767 + C10768 + C10769) * C9219 +
             (C10770 + C10771 + C10772) * C48780) *
                C49208 +
            ((C10773 + C10774 + C10775) * C9219 +
             (C10776 + C10777 + C10778) * C48780) *
                C49197 +
            ((C7914 * C3313 + C7908 * C3316 + C7915 * C10274 + C7909 * C10277 +
              C7916 * C10738 + C49172 * C10739) *
                 C9219 +
             (C7914 * C3317 + C7908 * C3322 + C7915 * C10276 + C7909 * C10280 +
              C7916 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10778 + C10777 + C10776) * C48780 +
             (C10775 + C10774 + C10773) * C9219) *
                C49175 +
            ((C10772 + C10771 + C10770) * C48780 +
             (C10769 + C10768 + C10767) * C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C259 +
          (((C16001 + C16002 + C16003 + C16004 + C16005 + C16006) * C15279 +
            (C16007 + C16008 + C16009 + C16010 + C16011 + C16012) * C15280 +
            ((C113 * C3313 + C48877 * C3316) * C7917 +
             (C113 * C3317 + C48877 * C3322) * C49204 +
             (C113 * C3314 + C48877 * C3318) * C7918 +
             (C113 * C3319 + C48877 * C3323) * C49191 +
             (C113 * C3315 + C48877 * C3320) * C7919 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C16012 + C16011 + C16010 + C16009 + C16008 + C16007) * C49175 +
            (C16006 + C16005 + C16004 + C16003 + C16002 + C16001) * C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C799 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C259 +
          ((((C17308 + C17309 + C17310) * C9219 +
             (C17311 + C17312 + C17313) * C48780) *
                C15279 +
            ((C17314 + C17315 + C17316) * C9219 +
             (C17317 + C17318 + C17319) * C48780) *
                C15280 +
            ((C1084 * C3313 + C49207 * C3316 + C1085 * C10274 +
              C49195 * C10277 + C1086 * C10738 + C49172 * C10739) *
                 C9219 +
             (C1084 * C3317 + C49207 * C3322 + C1085 * C10276 +
              C49195 * C10280 + C1086 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C17319 + C17318 + C17317) * C48780 +
             (C17316 + C17315 + C17314) * C9219) *
                C49175 +
            ((C17313 + C17312 + C17311) * C48780 +
             (C17310 + C17309 + C17308) * C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C9219 +
             (C113 * C127 + C48877 * C140) * C48780) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18014 + C18015) * C17812) *
               C799 -
           (((C113 * C17983 + C48877 * C17987) * C48780 +
             (C113 * C17981 + C48877 * C17984) * C9219) *
                C17812 +
            (C18015 + C18014) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49169) *
              C259 +
          (((C18248 + C18249) * C17808 + (C18250 + C18251) * C17809 +
            (C18264 + C18265) * C17810 + (C18266 + C18267) * C17811 +
            ((C113 * C18243 + C48877 * C18244) * C9219 +
             (C113 * C18245 + C48877 * C18246) * C48780) *
                C17812) *
               C49169 -
           ((C18267 + C18266) * C17812 + (C18265 + C18264) * C17811 +
            (C18251 + C18250) * C17810 + (C18249 + C18248) * C17809 +
            ((C113 * C277 + C48877 * C285) * C48780 +
             (C113 * C267 + C48877 * C278) * C9219) *
                C17808) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48877 * C126) * C114 +
               (C113 * C127 + C48877 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48895 * C945 -
              (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
               C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
               (C113 * C409 + C48877 * C417) * C102 +
               (C113 * C399 + C48877 * C410) * C114) *
                  C48895 * C946 +
              ((C113 * C948 + C48877 * C953) * C114 +
               (C113 * C954 + C48877 * C963) * C102 +
               (C113 * C949 + C48877 * C955) * C115 +
               (C113 * C956 + C48877 * C964) * C103 +
               (C113 * C950 + C48877 * C957) * C116 +
               (C113 * C958 + C48877 * C965) * C104 +
               (C113 * C951 + C48877 * C959) * C117 +
               (C113 * C960 + C48877 * C966) * C105 +
               (C113 * C952 + C48877 * C961) * C118 +
               (C113 * C962 + C48877 * C967) * C106) *
                  C48895 * C947) *
             C48849 * C48815 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
                C1086 * C595 + C49172 * C600) *
                   C1087 +
               (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
                C1086 * C601 + C49172 * C610) *
                   C1081 +
               (C1127 + C1128 + C1129) * C1088 +
               (C1130 + C1131 + C1132) * C1082 + C1147 * C1089 +
               C1148 * C49159) *
                  C48895 * C945 -
              ((C1533 + C1534 + C1535) * C49159 +
               (C1536 + C1537 + C1538) * C1089 +
               (C1539 + C1540 + C1541) * C1082 +
               (C1542 + C1543 + C1544) * C1088 +
               (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
                C1084 * C409 + C49207 * C417) *
                   C1081 +
               (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
                C1084 * C399 + C49207 * C410) *
                   C1087) *
                  C48895 * C946 +
              ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
                C1086 * C2373 + C49172 * C2379) *
                   C1087 +
               (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
                C1086 * C2381 + C49172 * C2391) *
                   C1081 +
               (C1084 * C949 + C49207 * C955 + C1085 * C2374 + C49195 * C2382 +
                C1086 * C2375 + C49172 * C2383) *
                   C1088 +
               (C1084 * C956 + C49207 * C964 + C1085 * C2384 + C49195 * C2392 +
                C1086 * C2385 + C49172 * C2393) *
                   C1082 +
               (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
                C1086 * C2377 + C49172 * C2387) *
                   C1089 +
               (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
                C1086 * C2389 + C49172 * C2395) *
                   C49159) *
                  C48895 * C947) *
             C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
           C3780 * C49175) *
              C945 -
          ((C3765 + C3766 + C3767 + C3768 + C3777 + C3778) * C49175 +
           (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
           (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
              C946 +
          (C3780 * C49208 +
           (C3778 + C3777 + C3768 + C3767 + C3766 + C3765) * C49197 +
           ((C113 * C3751 + C48877 * C3754) * C1087 +
            (C113 * C3755 + C48877 * C3760) * C1081 +
            (C113 * C3752 + C48877 * C3756) * C1088 +
            (C113 * C3757 + C48877 * C3761) * C1082 +
            (C113 * C3753 + C48877 * C3758) * C1089 +
            (C113 * C3759 + C48877 * C3762) * C49159) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C945 -
          ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
           (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
           (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
            C7914 * C409 + C7908 * C417) *
               C49204 +
           (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
            C7914 * C399 + C7908 * C410) *
               C7917) *
              C48895 * C946 +
          ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
            C7916 * C2373 + C49172 * C2379) *
               C7917 +
           (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
            C7916 * C2381 + C49172 * C2391) *
               C49204 +
           (C7914 * C949 + C7908 * C955 + C7915 * C2374 + C7909 * C2382 +
            C7916 * C2375 + C49172 * C2383) *
               C7918 +
           (C7914 * C956 + C7908 * C964 + C7915 * C2384 + C7909 * C2392 +
            C7916 * C2385 + C49172 * C2393) *
               C49191 +
           (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
            C7916 * C2377 + C49172 * C2387) *
               C7919 +
           (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
            C7916 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C945 -
          ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
            C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
            C9214 * C409 + C9208 * C417) *
               C48780 +
           (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
            C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
            C9214 * C399 + C9208 * C410) *
               C9219) *
              C48895 * C946 +
          ((C9214 * C948 + C9208 * C953 + C9215 * C2372 + C9209 * C2378 +
            C9216 * C2373 + C9210 * C2379 + C9217 * C9860 + C9211 * C9862 +
            C9218 * C9861 + C9212 * C9863) *
               C9219 +
           (C9214 * C954 + C9208 * C963 + C9215 * C2380 + C9209 * C2390 +
            C9216 * C2381 + C9210 * C2391 + C9217 * C9864 + C9211 * C9866 +
            C9218 * C9865 + C9212 * C9867) *
               C48780) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C10319 + C10320 + C10321) * C9219 +
            (C10322 + C10323 + C10324) * C48780) *
               C49197 +
           C11213 * C49175) *
              C945 -
          (((C11205 + C11206 + C11207) * C48780 +
            (C11208 + C11209 + C11210) * C9219) *
               C49175 +
           ((C10330 + C10329 + C10328) * C48780 +
            (C10327 + C10326 + C10325) * C9219) *
               C49197 +
           ((C10324 + C10323 + C10322) * C48780 +
            (C10321 + C10320 + C10319) * C9219) *
               C49208) *
              C946 +
          (C11213 * C49208 +
           ((C11210 + C11209 + C11208) * C9219 +
            (C11207 + C11206 + C11205) * C48780) *
               C49197 +
           ((C7914 * C3751 + C7908 * C3754 + C7915 * C11180 + C7909 * C11182 +
             C7916 * C11181 + C49172 * C11183) *
                C9219 +
            (C7914 * C3755 + C7908 * C3760 + C7915 * C11184 + C7909 * C11186 +
             C7916 * C11185 + C49172 * C11187) *
                C48780) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
           C16425 * C49175) *
              C945 -
          ((C16416 + C16417 + C16418 + C16419 + C16420 + C16421) * C49175 +
           (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
           (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
              C946 +
          (C16425 * C15279 +
           (C16421 + C16420 + C16419 + C16418 + C16417 + C16416) * C15280 +
           ((C113 * C3751 + C48877 * C3754) * C7917 +
            (C113 * C3755 + C48877 * C3760) * C49204 +
            (C113 * C3752 + C48877 * C3756) * C7918 +
            (C113 * C3757 + C48877 * C3761) * C49191 +
            (C113 * C3753 + C48877 * C3758) * C7919 +
            (C113 * C3759 + C48877 * C3762) * C49159) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C16864 + C16865 + C16866) * C9219 +
            (C16867 + C16868 + C16869) * C48780) *
               C15280 +
           C17746 * C49175) *
              C945 -
          (((C17738 + C17739 + C17740) * C48780 +
            (C17741 + C17742 + C17743) * C9219) *
               C49175 +
           ((C16875 + C16874 + C16873) * C48780 +
            (C16872 + C16871 + C16870) * C9219) *
               C15280 +
           ((C16869 + C16868 + C16867) * C48780 +
            (C16866 + C16865 + C16864) * C9219) *
               C15279) *
              C946 +
          (C17746 * C15279 +
           ((C17743 + C17742 + C17741) * C9219 +
            (C17740 + C17739 + C17738) * C48780) *
               C15280 +
           ((C1084 * C3751 + C49207 * C3754 + C1085 * C11180 + C49195 * C11182 +
             C1086 * C11181 + C49172 * C11183) *
                C9219 +
            (C1084 * C3755 + C49207 * C3760 + C1085 * C11184 + C49195 * C11186 +
             C1086 * C11185 + C49172 * C11187) *
                C48780) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C9219 +
            (C113 * C127 + C48877 * C140) * C48780) *
               C17808 +
           (C17990 + C17991) * C17809 + C18498 * C17810 + C18499 * C17811 +
           C18500 * C17812) *
              C945 -
          ((C18507 + C18508) * C17812 + (C18015 + C18014) * C17811 +
           (C17995 + C17994) * C17810 + (C17993 + C17992) * C17809 +
           (C17991 + C17990) * C17808) *
              C946 +
          (C18498 * C17808 + C18499 * C17809 + C18500 * C17810 +
           (C18508 + C18507) * C17811 +
           ((C113 * C18493 + C48877 * C18494) * C9219 +
            (C113 * C18495 + C48877 * C18496) * C48780) *
               C17812) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 +
            (C8342 + C8341 + C8340) * C47890 +
            (C8339 + C8338 + C8337) * C48790) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C8331 + C8332 + C8333) * C48790 +
            (C8334 + C8335 + C8336) * C47890 +
            (C8337 + C8338 + C8339) * C49117 +
            (C8340 + C8341 + C8342) * C47909) *
               C48982 +
           ((C7968 + C7967 + C7966) * C48790 +
            (C7965 + C7964 + C7963) * C47890 +
            (C7962 + C7961 + C7960) * C49117 +
            (C7959 + C7958 + C7957) * C47909) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C7977 * C47909 + C7978 * C49117 + (C7974 + C7973 + C7972) * C47890 +
            (C7971 + C7970 + C7969) * C48790) *
               C49140 +
           ((C8336 + C8335 + C8334) * C47909 +
            (C8333 + C8332 + C8331) * C49117 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C47890 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C48790) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C2900 * C3886 + C2901 * C3880 + C443 * C3887 + C442 * C3881 +
            C441 * C3888 + C440 * C3882 + C439 * C3889 + C438 * C49176) *
               C48982) *
              C48866 * C48849 * C110 -
          ((C436 * C49176 + C437 * C3889 + C438 * C3882 + C439 * C3888 +
            C440 * C3881 + C441 * C3887 + C442 * C3880 + C443 * C3886) *
               C48982 +
           (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
            C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C170 * C3886 + C171 * C3880 + C172 * C3887 + C173 * C3881 +
            C174 * C3888 + C175 * C3882 + C177 * C3889 + C176 * C49176) *
               C49140 +
           (C441 * C3886 + C440 * C3880 + C439 * C3887 + C438 * C3881 +
            C437 * C3888 + C436 * C3882 +
            (C113 * C400 + C48877 * C411) * C3889 +
            (C113 * C412 + C48877 * C418) * C49176) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C47909 +
            (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
            C169 * C48790) *
               C20269 +
           (C2900 * C47909 + C2901 * C49117 + C443 * C47890 + C442 * C48790) *
               C20270 +
           (C2902 * C47909 + C2903 * C49117 + C2522 * C47890 + C2523 * C48790) *
               C20271 +
           (C3775 * C47909 + C3774 * C49117 + C2907 * C47890 + C2906 * C48790) *
               C49188) *
              C48866 * C48849 * C110 -
          ((C2904 * C48790 + C2905 * C47890 + C2906 * C49117 + C2907 * C47909) *
               C49188 +
           (C2525 * C48790 + C2524 * C47890 + C2523 * C49117 + C2522 * C47909) *
               C20271 +
           (C440 * C48790 + C441 * C47890 + C442 * C49117 + C443 * C47909) *
               C20270 +
           (C171 * C48790 + C170 * C47890 + C169 * C49117 + C168 * C47909) *
               C20269) *
              C48866 * C48849 * C111 +
          ((C170 * C47909 + C171 * C49117 + C172 * C47890 + C173 * C48790) *
               C20269 +
           (C441 * C47909 + C440 * C49117 + C439 * C47890 + C438 * C48790) *
               C20270 +
           (C2524 * C47909 + C2525 * C49117 + C2527 * C47890 + C2526 * C48790) *
               C20271 +
           (C2905 * C47909 + C2904 * C49117 +
            (C113 * C2850 + C48877 * C2857) * C47890 +
            (C113 * C2858 + C48877 * C2862) * C48790) *
               C49188) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 +
             (C8342 + C8341 + C8340) * C47890 +
             (C8339 + C8338 + C8337) * C48790) *
                C48982) *
               C48866 * C259 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C8160 + C8159 + C8158) * C47909 +
             (C8157 + C8156 + C8155) * C49117 +
             (C8154 + C8153 + C8152) * C47890 +
             (C8151 + C8150 + C8149) * C48790) *
                C49140 +
            ((C12753 + C12752 + C12751) * C47909 +
             (C12750 + C12749 + C12748) * C49117 +
             (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
              C7916 * C1960 + C49172 * C1965) *
                 C47890 +
             (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
              C7916 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 +
             (C8337 + C8338 + C8339) * C49117 +
             (C8340 + C8341 + C8342) * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C2900 * C3886 + C2901 * C3880 + C443 * C3887 + C442 * C3881 +
             C441 * C3888 + C440 * C3882 + C439 * C3889 + C438 * C49176) *
                C48982) *
               C48866 * C259 -
           ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
             C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C48866 * C49167) *
              C261 +
          (((C311 * C3886 + C310 * C3880 + C309 * C3887 + C308 * C3881 +
             C307 * C3888 + C306 * C3882 + C305 * C3889 + C304 * C49176) *
                C49140 +
            (C2701 * C3886 + C2700 * C3880 + C2699 * C3887 + C2698 * C3881 +
             C5226 * C3888 + C5225 * C3882 +
             (C113 * C701 + C48877 * C710) * C3889 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C436 * C49176 + C437 * C3889 + C438 * C3882 + C439 * C3888 +
             C440 * C3881 + C441 * C3887 + C442 * C3880 + C443 * C3886) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C2900 * C47909 + C2901 * C49117 + C443 * C47890 + C442 * C48790) *
                C20270 +
            (C2902 * C47909 + C2903 * C49117 + C2522 * C47890 +
             C2523 * C48790) *
                C20271 +
            (C3775 * C47909 + C3774 * C49117 + C2907 * C47890 +
             C2906 * C48790) *
                C49188) *
               C48866 * C259 -
           ((C20408 * C48790 + C20409 * C47890 + C18261 * C49117 +
             C18260 * C47909) *
                C49188 +
            (C2696 * C48790 + C2697 * C47890 + C3345 * C49117 +
             C3344 * C47909) *
                C20271 +
            (C2700 * C48790 + C2701 * C47890 + C3343 * C49117 +
             C3342 * C47909) *
                C20270 +
            (C310 * C48790 + C311 * C47890 +
             (C113 * C277 + C48877 * C285) * C49117 +
             (C113 * C267 + C48877 * C278) * C47909) *
                C20269) *
               C48866 * C49167) *
              C261 +
          (((C311 * C47909 + C310 * C49117 + C309 * C47890 + C308 * C48790) *
                C20269 +
            (C2701 * C47909 + C2700 * C49117 + C2699 * C47890 +
             C2698 * C48790) *
                C20270 +
            (C2697 * C47909 + C2696 * C49117 + C2695 * C47890 +
             C2694 * C48790) *
                C20271 +
            (C20409 * C47909 + C20408 * C49117 +
             (C113 * C3315 + C48877 * C3320) * C47890 +
             (C113 * C3321 + C48877 * C3324) * C48790) *
                C49188) *
               C48866 * C49167 -
           ((C2904 * C48790 + C2905 * C47890 + C2906 * C49117 +
             C2907 * C47909) *
                C49188 +
            (C2525 * C48790 + C2524 * C47890 + C2523 * C49117 +
             C2522 * C47909) *
                C20271 +
            (C440 * C48790 + C441 * C47890 + C442 * C49117 + C443 * C47909) *
                C20270 +
            (C171 * C48790 + C170 * C47890 + C169 * C49117 + C168 * C47909) *
                C20269) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C393 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C12952 * C47909 + C12953 * C49117 +
             (C8336 + C8335 + C8334) * C47890 +
             (C8333 + C8332 + C8331) * C48790) *
                C49140 +
            ((C10331 + C10332 + C10333) * C47909 +
             (C10334 + C10335 + C10336) * C49117 +
             (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
              C7916 * C2377 + C49172 * C2387) *
                 C47890 +
             (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
              C7916 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C5365 + C5366 + C5367 + C5368 + C5369 + C5370 + C5371 + C5372) *
                C49140 +
            (C2522 * C3886 + C2523 * C3880 + C2524 * C3887 + C2525 * C3881 +
             C2527 * C3888 + C2526 * C3882 +
             (C113 * C952 + C48877 * C961) * C3889 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C20540 + C20541 + C20542 + C20543) * C20270 +
            (C20544 + C20545 + C20546 + C20547) * C20271 +
            (C20548 + C20549 + C20550 + C20551) * C49188) *
               C393 -
           ((C18013 * C48790 + C18012 * C47890 + C18011 * C49117 +
             C18010 * C47909) *
                C49188 +
            (C20551 + C20550 + C20549 + C20548) * C20271 +
            (C20547 + C20546 + C20545 + C20544) * C20270 +
            (C20543 + C20542 + C20541 + C20540) * C20269) *
               C49169) *
              C48849 * C261 +
          (((C20552 + C20553 + C20554 + C20555) * C20269 +
            (C20556 + C20557 + C20558 + C20559) * C20270 +
            (C20560 + C20561 + C20562 + C20563) * C20271 +
            (C18012 * C47909 + C18013 * C49117 +
             (C113 * C3753 + C48877 * C3758) * C47890 +
             (C113 * C3759 + C48877 * C3762) * C48790) *
                C49188) *
               C49169 -
           ((C20563 + C20562 + C20561 + C20560) * C49188 +
            (C20559 + C20558 + C20557 + C20556) * C20271 +
            (C20555 + C20554 + C20553 + C20552) * C20270 +
            (C171 * C48790 + C170 * C47890 + C169 * C49117 + C168 * C47909) *
                C20269) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C48866 * C525 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C8160 + C8159 + C8158) * C47909 +
             (C8157 + C8156 + C8155) * C49117 +
             (C8154 + C8153 + C8152) * C47890 +
             (C8151 + C8150 + C8149) * C48790) *
                C49140 +
            ((C12753 + C12752 + C12751) * C47909 +
             (C12750 + C12749 + C12748) * C49117 +
             (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
              C7916 * C1960 + C49172 * C1965) *
                 C47890 +
             (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
              C7916 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C48866 * C525 -
           ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
             C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C48866 * C49167) *
              C527 +
          (((C311 * C3886 + C310 * C3880 + C309 * C3887 + C308 * C3881 +
             C307 * C3888 + C306 * C3882 + C305 * C3889 + C304 * C49176) *
                C49140 +
            (C2701 * C3886 + C2700 * C3880 + C2699 * C3887 + C2698 * C3881 +
             C5226 * C3888 + C5225 * C3882 +
             (C113 * C701 + C48877 * C710) * C3889 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C20540 + C20541 + C20542 + C20543) * C20270 +
            (C20544 + C20545 + C20546 + C20547) * C20271 +
            (C20548 + C20549 + C20550 + C20551) * C49188) *
               C48866 * C525 -
           ((C20408 * C48790 + C20409 * C47890 + C18261 * C49117 +
             C18260 * C47909) *
                C49188 +
            (C2696 * C48790 + C2697 * C47890 + C3345 * C49117 +
             C3344 * C47909) *
                C20271 +
            (C2700 * C48790 + C2701 * C47890 + C3343 * C49117 +
             C3342 * C47909) *
                C20270 +
            (C310 * C48790 + C311 * C47890 +
             (C113 * C277 + C48877 * C285) * C49117 +
             (C113 * C267 + C48877 * C278) * C47909) *
                C20269) *
               C48866 * C49167) *
              C527 +
          (((C311 * C47909 + C310 * C49117 + C309 * C47890 + C308 * C48790) *
                C20269 +
            (C2701 * C47909 + C2700 * C49117 + C2699 * C47890 +
             C2698 * C48790) *
                C20270 +
            (C2697 * C47909 + C2696 * C49117 + C2695 * C47890 +
             C2694 * C48790) *
                C20271 +
            (C20409 * C47909 + C20408 * C49117 +
             (C113 * C3315 + C48877 * C3320) * C47890 +
             (C113 * C3321 + C48877 * C3324) * C48790) *
                C49188) *
               C48866 * C49167 -
           ((C20563 + C20562 + C20561 + C20560) * C49188 +
            (C20559 + C20558 + C20557 + C20556) * C20271 +
            (C20555 + C20554 + C20553 + C20552) * C20270 +
            (C171 * C48790 + C170 * C47890 + C169 * C49117 + C168 * C47909) *
                C20269) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
            C12953 * C48790) *
               C48982) *
              C48866 * C591 -
          (((C12748 + C12749 + C12750) * C48790 +
            (C12751 + C12752 + C12753) * C47890 +
            (C10772 + C10771 + C10770) * C49117 +
            (C10769 + C10768 + C10767) * C47909) *
               C48982 +
           ((C8155 + C8156 + C8157) * C48790 +
            (C8158 + C8159 + C8160) * C47890 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49117 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C47909) *
               C49140) *
              C48866 * C592 +
          (((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
             C7916 * C1800 + C49172 * C1803) *
                C47909 +
            (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
             C7916 * C1804 + C49172 * C1809) *
                C49117 +
            (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
             C7916 * C1801 + C49172 * C1805) *
                C47890 +
            (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
             C7916 * C1806 + C49172 * C1810) *
                C48790) *
               C49140 +
           ((C7914 * C1494 + C7908 * C1501 + C7915 * C1958 + C7909 * C1961 +
             C7916 * C9392 + C49172 * C9395) *
                C47909 +
            (C7914 * C1500 + C7908 * C1506 + C7915 * C1962 + C7909 * C1967 +
             C7916 * C9394 + C49172 * C9398) *
                C49117 +
            (C7914 * C1493 + C7908 * C1499 + C7915 * C1959 + C7909 * C1963 +
             C7916 * C9393 + C49172 * C9396) *
                C47890 +
            (C7914 * C1498 + C7908 * C1505 + C7915 * C1964 + C7909 * C1968 +
             C7916 * C9397 + C49172 * C9399) *
                C48790) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
               C48982) *
              C48866 * C591 -
          ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
            C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
               C48982 +
           (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
            C310 * C3881 + C311 * C3887 +
            (C113 * C277 + C48877 * C285) * C3880 +
            (C113 * C267 + C48877 * C278) * C3886) *
               C49140) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C3886 +
            (C113 * C601 + C48877 * C610) * C3880 +
            (C113 * C596 + C48877 * C602) * C3887 +
            (C113 * C603 + C48877 * C611) * C3881 +
            (C113 * C597 + C48877 * C604) * C3888 +
            (C113 * C605 + C48877 * C612) * C3882 +
            (C113 * C598 + C48877 * C606) * C3889 +
            (C113 * C607 + C48877 * C613) * C49176) *
               C49140 +
           ((C113 * C1494 + C48877 * C1501) * C3886 +
            (C113 * C1500 + C48877 * C1506) * C3880 +
            (C113 * C1493 + C48877 * C1499) * C3887 +
            (C113 * C1498 + C48877 * C1505) * C3881 +
            (C113 * C1492 + C48877 * C1497) * C3888 +
            (C113 * C1496 + C48877 * C1504) * C3882 +
            (C113 * C1495 + C48877 * C1502) * C3889 +
            (C113 * C1503 + C48877 * C1507) * C49176) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C47909 +
            (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
            C169 * C48790) *
               C20269 +
           (C20540 + C20541 + C20542 + C20543) * C20270 +
           (C20544 + C20545 + C20546 + C20547) * C20271 +
           (C20548 + C20549 + C20550 + C20551) * C49188) *
              C48866 * C591 -
          ((C20408 * C48790 + C20409 * C47890 + C18261 * C49117 +
            C18260 * C47909) *
               C49188 +
           (C2696 * C48790 + C2697 * C47890 + C3345 * C49117 + C3344 * C47909) *
               C20271 +
           (C2700 * C48790 + C2701 * C47890 + C3343 * C49117 + C3342 * C47909) *
               C20270 +
           (C310 * C48790 + C311 * C47890 +
            (C113 * C277 + C48877 * C285) * C49117 +
            (C113 * C267 + C48877 * C278) * C47909) *
               C20269) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C47909 +
            (C113 * C601 + C48877 * C610) * C49117 +
            (C113 * C596 + C48877 * C602) * C47890 +
            (C113 * C603 + C48877 * C611) * C48790) *
               C20269 +
           ((C113 * C1494 + C48877 * C1501) * C47909 +
            (C113 * C1500 + C48877 * C1506) * C49117 +
            (C113 * C1493 + C48877 * C1499) * C47890 +
            (C113 * C1498 + C48877 * C1505) * C48790) *
               C20270 +
           ((C113 * C2373 + C48877 * C2379) * C47909 +
            (C113 * C2381 + C48877 * C2391) * C49117 +
            (C113 * C2375 + C48877 * C2383) * C47890 +
            (C113 * C2385 + C48877 * C2393) * C48790) *
               C20271 +
           ((C113 * C10274 + C48877 * C10277) * C47909 +
            (C113 * C10276 + C48877 * C10280) * C49117 +
            (C113 * C10275 + C48877 * C10278) * C47890 +
            (C113 * C10279 + C48877 * C10281) * C48790) *
               C49188) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C393 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C525 +
          ((((C10767 + C10768 + C10769) * C47909 +
             (C10770 + C10771 + C10772) * C49117 +
             (C12753 + C12752 + C12751) * C47890 +
             (C12750 + C12749 + C12748) * C48790) *
                C49140 +
            ((C10773 + C10774 + C10775) * C47909 +
             (C10776 + C10777 + C10778) * C49117 +
             (C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C47890 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48790) *
                C48982) *
               C49169 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C525 +
          (((C5731 + C5732 + C5733 + C5734 + C5735 + C5736 + C5737 + C5738) *
                C49140 +
            (C3344 * C3886 + C3345 * C3880 + C2697 * C3887 + C2696 * C3881 +
             C2695 * C3888 + C2694 * C3882 +
             (C113 * C2673 + C48877 * C2674) * C3889 +
             (C113 * C2675 + C48877 * C2676) * C49176) *
                C48982) *
               C49169 -
           ((C5738 + C5737 + C5736 + C5735 + C5734 + C5733 + C5732 + C5731) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C20540 + C20541 + C20542 + C20543) * C20270 +
            (C20544 + C20545 + C20546 + C20547) * C20271 +
            (C20548 + C20549 + C20550 + C20551) * C49188) *
               C393 -
           ((C18013 * C48790 + C18012 * C47890 + C18011 * C49117 +
             C18010 * C47909) *
                C49188 +
            (C20551 + C20550 + C20549 + C20548) * C20271 +
            (C20547 + C20546 + C20545 + C20544) * C20270 +
            (C20543 + C20542 + C20541 + C20540) * C20269) *
               C49169) *
              C525 +
          (((C20922 + C20923 + C20924 + C20925) * C20269 +
            (C20926 + C20927 + C20928 + C20929) * C20270 +
            (C20930 + C20931 + C20932 + C20933) * C20271 +
            (C18262 * C47909 + C18263 * C49117 +
             (C113 * C17895 + C48877 * C17896) * C47890 +
             (C113 * C17897 + C48877 * C17898) * C48790) *
                C49188) *
               C49169 -
           ((C20933 + C20932 + C20931 + C20930) * C49188 +
            (C20929 + C20928 + C20927 + C20926) * C20271 +
            (C20925 + C20924 + C20923 + C20922) * C20270 +
            (C310 * C48790 + C311 * C47890 +
             (C113 * C277 + C48877 * C285) * C49117 +
             (C113 * C267 + C48877 * C278) * C47909) *
                C20269) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C799 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C12952 * C47909 + C12953 * C49117 +
             (C8336 + C8335 + C8334) * C47890 +
             (C8333 + C8332 + C8331) * C48790) *
                C49140 +
            ((C10331 + C10332 + C10333) * C47909 +
             (C10334 + C10335 + C10336) * C49117 +
             (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
              C7916 * C2377 + C49172 * C2387) *
                 C47890 +
             (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
              C7916 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C5365 + C5366 + C5367 + C5368 + C5369 + C5370 + C5371 + C5372) *
                C49140 +
            (C2522 * C3886 + C2523 * C3880 + C2524 * C3887 + C2525 * C3881 +
             C2527 * C3888 + C2526 * C3882 +
             (C113 * C952 + C48877 * C961) * C3889 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C20540 + C20541 + C20542 + C20543) * C20270 +
            (C20544 + C20545 + C20546 + C20547) * C20271 +
            (C20548 + C20549 + C20550 + C20551) * C49188) *
               C799 -
           ((C18013 * C48790 + C18012 * C47890 + C18011 * C49117 +
             C18010 * C47909) *
                C49188 +
            (C20551 + C20550 + C20549 + C20548) * C20271 +
            (C20547 + C20546 + C20545 + C20544) * C20270 +
            (C20543 + C20542 + C20541 + C20540) * C20269) *
               C49169) *
              C48849 * C527 +
          (((C20552 + C20553 + C20554 + C20555) * C20269 +
            (C20556 + C20557 + C20558 + C20559) * C20270 +
            (C20560 + C20561 + C20562 + C20563) * C20271 +
            (C18012 * C47909 + C18013 * C49117 +
             (C113 * C3753 + C48877 * C3758) * C47890 +
             (C113 * C3759 + C48877 * C3762) * C48790) *
                C49188) *
               C49169 -
           ((C20563 + C20562 + C20561 + C20560) * C49188 +
            (C20559 + C20558 + C20557 + C20556) * C20271 +
            (C20555 + C20554 + C20553 + C20552) * C20270 +
            (C171 * C48790 + C170 * C47890 + C169 * C49117 + C168 * C47909) *
                C20269) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C799 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C259 +
          ((((C10767 + C10768 + C10769) * C47909 +
             (C10770 + C10771 + C10772) * C49117 +
             (C12753 + C12752 + C12751) * C47890 +
             (C12750 + C12749 + C12748) * C48790) *
                C49140 +
            ((C10773 + C10774 + C10775) * C47909 +
             (C10776 + C10777 + C10778) * C49117 +
             (C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C47890 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48790) *
                C48982) *
               C49169 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C259 +
          (((C5731 + C5732 + C5733 + C5734 + C5735 + C5736 + C5737 + C5738) *
                C49140 +
            (C3344 * C3886 + C3345 * C3880 + C2697 * C3887 + C2696 * C3881 +
             C2695 * C3888 + C2694 * C3882 +
             (C113 * C2673 + C48877 * C2674) * C3889 +
             (C113 * C2675 + C48877 * C2676) * C49176) *
                C48982) *
               C49169 -
           ((C5738 + C5737 + C5736 + C5735 + C5734 + C5733 + C5732 + C5731) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47909 +
             (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
             C169 * C48790) *
                C20269 +
            (C20540 + C20541 + C20542 + C20543) * C20270 +
            (C20544 + C20545 + C20546 + C20547) * C20271 +
            (C20548 + C20549 + C20550 + C20551) * C49188) *
               C799 -
           ((C18013 * C48790 + C18012 * C47890 + C18011 * C49117 +
             C18010 * C47909) *
                C49188 +
            (C20551 + C20550 + C20549 + C20548) * C20271 +
            (C20547 + C20546 + C20545 + C20544) * C20270 +
            (C20543 + C20542 + C20541 + C20540) * C20269) *
               C49169) *
              C259 +
          (((C20922 + C20923 + C20924 + C20925) * C20269 +
            (C20926 + C20927 + C20928 + C20929) * C20270 +
            (C20930 + C20931 + C20932 + C20933) * C20271 +
            (C18262 * C47909 + C18263 * C49117 +
             (C113 * C17895 + C48877 * C17896) * C47890 +
             (C113 * C17897 + C48877 * C17898) * C48790) *
                C49188) *
               C49169 -
           ((C20933 + C20932 + C20931 + C20930) * C49188 +
            (C20929 + C20928 + C20927 + C20926) * C20271 +
            (C20925 + C20924 + C20923 + C20922) * C20270 +
            (C310 * C48790 + C311 * C47890 +
             (C113 * C277 + C48877 * C285) * C49117 +
             (C113 * C267 + C48877 * C278) * C47909) *
                C20269) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
            C12953 * C48790) *
               C48982) *
              C945 -
          (((C10336 + C10335 + C10334) * C48790 +
            (C10333 + C10332 + C10331) * C47890 +
            (C10330 + C10329 + C10328) * C49117 +
            (C10327 + C10326 + C10325) * C47909) *
               C48982 +
           (C12954 * C48790 + C12955 * C47890 +
            (C10324 + C10323 + C10322) * C49117 +
            (C10321 + C10320 + C10319) * C47909) *
               C49140) *
              C946 +
          ((C11203 * C47909 + C11204 * C49117 +
            (C10331 + C10332 + C10333) * C47890 +
            (C10334 + C10335 + C10336) * C48790) *
               C49140 +
           ((C11210 + C11209 + C11208) * C47909 +
            (C11207 + C11206 + C11205) * C49117 +
            (C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
             C7916 * C10275 + C49172 * C10278) *
                C47890 +
            (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
             C7916 * C10279 + C49172 * C10281) *
                C48790) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
               C48982) *
              C945 -
          ((C6097 + C6098 + C6099 + C6100 + C6101 + C6102 + C6103 + C6104) *
               C48982 +
           (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
               C49140) *
              C946 +
          ((C6104 + C6103 + C6102 + C6101 + C6100 + C6099 + C6098 + C6097) *
               C49140 +
           (C3775 * C3886 + C3774 * C3880 + C2907 * C3887 + C2906 * C3881 +
            C2905 * C3888 + C2904 * C3882 +
            (C113 * C2850 + C48877 * C2857) * C3889 +
            (C113 * C2858 + C48877 * C2862) * C49176) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C47909 +
            (C113 * C127 + C48877 * C140) * C49117 + C168 * C47890 +
            C169 * C48790) *
               C20269 +
           (C20540 + C20541 + C20542 + C20543) * C20270 + C21300 * C20271 +
           C21301 * C49188) *
              C945 -
          ((C21294 + C21295 + C21296 + C21297) * C49188 +
           (C20551 + C20550 + C20549 + C20548) * C20271 +
           (C20547 + C20546 + C20545 + C20544) * C20270 +
           (C20543 + C20542 + C20541 + C20540) * C20269) *
              C946 +
          (C21300 * C20269 + C21301 * C20270 +
           (C21297 + C21296 + C21295 + C21294) * C20271 +
           (C18506 * C47909 + C18505 * C49117 +
            (C113 * C17982 + C48877 * C17985) * C47890 +
            (C113 * C17986 + C48877 * C17988) * C48790) *
               C49188) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
           (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
           (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
              C48895 * C48866 * C48849 * C111 +
          (C1147 * C1087 + C1148 * C1081 + (C1144 + C1143 + C1142) * C1088 +
           (C1141 + C1140 + C1139) * C1082 +
           (C1084 * C123 + C49207 * C134 + C1085 * C263 + C49195 * C270 +
            C1086 * C599 + C49172 * C608) *
               C1089 +
           (C1084 * C135 + C49207 * C144 + C1085 * C269 + C49195 * C281 +
            C1086 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C48849 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C48895 * C48866 * C48849 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C48877 * C138) * C118 +
           (C113 * C139 + C48877 * C146) * C106) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
           (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
           (C7962 + C7961 + C7960) * C49204 + (C7959 + C7958 + C7957) * C7917) *
              C48895 * C48866 * C48849 * C111 +
          (C7977 * C7917 + C7978 * C49204 + (C7974 + C7973 + C7972) * C7918 +
           (C7971 + C7970 + C7969) * C49191 +
           (C7914 * C123 + C7908 * C134 + C7915 * C263 + C7909 * C270 +
            C7916 * C599 + C49172 * C608) *
               C7919 +
           (C7914 * C135 + C7908 * C144 + C7915 * C269 + C7909 * C281 +
            C7916 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C48849 * C110 -
          ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
            C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
            C9214 * C129 + C9208 * C141) *
               C48780 +
           (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
            C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
            C9214 * C120 + C9208 * C128) *
               C9219) *
              C48895 * C48866 * C48849 * C111 +
          ((C9214 * C121 + C9208 * C130 + C9215 * C265 + C9209 * C274 +
            C9216 * C597 + C9210 * C604 + C9217 * C1294 + C9211 * C1299 +
            C9218 * C1802 + C9212 * C1807) *
               C9219 +
           (C9214 * C131 + C9208 * C142 + C9215 * C273 + C9209 * C283 +
            C9216 * C605 + C9210 * C612 + C9217 * C1298 + C9211 * C1306 +
            C9218 * C1808 + C9212 * C1811) *
               C48780) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C2900 * C7917 + C2901 * C49204 + C443 * C7918 + C442 * C49191 +
            C441 * C7919 + C440 * C49159) *
               C15280 +
           (C2902 * C7917 + C2903 * C49204 + C2522 * C7918 + C2523 * C49191 +
            C2524 * C7919 + C2525 * C49159) *
               C49175) *
              C48866 * C48849 * C110 -
          ((C2526 * C49159 + C2527 * C7919 + C2525 * C49191 + C2524 * C7918 +
            C2523 * C49204 + C2522 * C7917) *
               C49175 +
           (C438 * C49159 + C439 * C7919 + C440 * C49191 + C441 * C7918 +
            C442 * C49204 + C443 * C7917) *
               C15280 +
           (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
            C169 * C49204 + C168 * C7917) *
               C15279) *
              C48866 * C48849 * C111 +
          ((C170 * C7917 + C171 * C49204 + C172 * C7918 + C173 * C49191 +
            C174 * C7919 + C175 * C49159) *
               C15279 +
           (C441 * C7917 + C440 * C49204 + C439 * C7918 + C438 * C49191 +
            C437 * C7919 + C436 * C49159) *
               C15280 +
           (C2524 * C7917 + C2525 * C49204 + C2527 * C7918 + C2526 * C49191 +
            (C113 * C952 + C48877 * C961) * C7919 +
            (C113 * C962 + C48877 * C967) * C49159) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C1084 * C399 + C49207 * C410 + C1085 * C697 + C49195 * C702 +
             C1086 * C1494 + C49172 * C1501) *
                C9219 +
            (C1084 * C409 + C49207 * C417 + C1085 * C703 + C49195 * C712 +
             C1086 * C1500 + C49172 * C1506) *
                C48780) *
               C15280 +
           ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
             C1086 * C2373 + C49172 * C2379) *
                C9219 +
            (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
             C1086 * C2381 + C49172 * C2391) *
                C48780) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C1086 * C2385 + C49172 * C2393 + C1085 * C2384 + C49195 * C2392 +
             C1084 * C956 + C49207 * C964) *
                C48780 +
            (C1086 * C2375 + C49172 * C2383 + C1085 * C2374 + C49195 * C2382 +
             C1084 * C949 + C49207 * C955) *
                C9219) *
               C49175 +
           ((C1539 + C1540 + C1541) * C48780 +
            (C1542 + C1543 + C1544) * C9219) *
               C15280 +
           ((C1132 + C1131 + C1130) * C48780 +
            (C1129 + C1128 + C1127) * C9219) *
               C15279) *
              C48866 * C48849 * C111 +
          ((C1147 * C9219 + C1148 * C48780) * C15279 +
           ((C1538 + C1537 + C1536) * C9219 +
            (C1535 + C1534 + C1533) * C48780) *
               C15280 +
           ((C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
             C1086 * C2377 + C49172 * C2387) *
                C9219 +
            (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
             C1086 * C2389 + C49172 * C2395) *
                C48780) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C259 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C259 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C261 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C259 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C259 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C2900 * C7917 + C2901 * C49204 + C443 * C7918 + C442 * C49191 +
             C441 * C7919 + C440 * C49159) *
                C15280 +
            (C2902 * C7917 + C2903 * C49204 + C2522 * C7918 + C2523 * C49191 +
             C2524 * C7919 + C2525 * C49159) *
                C49175) *
               C48866 * C259 -
           ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
             C3345 * C49204 + C3344 * C7917) *
                C49175 +
            (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
             C3343 * C49204 + C3342 * C7917) *
                C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C48866 * C49167) *
              C261 +
          (((C311 * C7917 + C310 * C49204 + C309 * C7918 + C308 * C49191 +
             C307 * C7919 + C306 * C49159) *
                C15279 +
            (C2701 * C7917 + C2700 * C49204 + C2699 * C7918 + C2698 * C49191 +
             C5226 * C7919 + C5225 * C49159) *
                C15280 +
            (C2697 * C7917 + C2696 * C49204 + C2695 * C7918 + C2694 * C49191 +
             (C113 * C2673 + C48877 * C2674) * C7919 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2526 * C49159 + C2527 * C7919 + C2525 * C49191 + C2524 * C7918 +
             C2523 * C49204 + C2522 * C7917) *
                C49175 +
            (C438 * C49159 + C439 * C7919 + C440 * C49191 + C441 * C7918 +
             C442 * C49204 + C443 * C7917) *
                C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C1084 * C399 + C49207 * C410 + C1085 * C697 + C49195 * C702 +
              C1086 * C1494 + C49172 * C1501) *
                 C9219 +
             (C1084 * C409 + C49207 * C417 + C1085 * C703 + C49195 * C712 +
              C1086 * C1500 + C49172 * C1506) *
                 C48780) *
                C15280 +
            ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
              C1086 * C2373 + C49172 * C2379) *
                 C9219 +
             (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
              C1086 * C2381 + C49172 * C2391) *
                 C48780) *
                C49175) *
               C48866 * C259 -
           (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
              C1084 * C2380 + C49207 * C2390) *
                 C48780 +
             (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
              C1084 * C2372 + C49207 * C2378) *
                 C9219) *
                C49175 +
            ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
              C1084 * C703 + C49207 * C712) *
                 C48780 +
             (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
              C1084 * C697 + C49207 * C702) *
                 C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C48866 * C49167) *
              C261 +
          ((((C1346 + C1345 + C1344) * C9219 +
             (C1343 + C1342 + C1341) * C48780) *
                C15279 +
            ((C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
              C1086 * C1959 + C49172 * C1963) *
                 C9219 +
             (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
              C1086 * C1964 + C49172 * C1968) *
                 C48780) *
                C15280 +
            ((C1084 * C2374 + C49207 * C2382 + C1085 * C2375 + C49195 * C2383 +
              C1086 * C10124 + C49172 * C10125) *
                 C9219 +
             (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 + C49195 * C2393 +
              C1086 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C1086 * C2385 + C49172 * C2393 + C1085 * C2384 + C49195 * C2392 +
              C1084 * C956 + C49207 * C964) *
                 C48780 +
             (C1086 * C2375 + C49172 * C2383 + C1085 * C2374 + C49195 * C2382 +
              C1084 * C949 + C49207 * C955) *
                 C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C261 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C48849 * C261 +
          (((C15587 + C15588 + C15589 + C15590 + C15591 + C15592) * C15279 +
            (C15593 + C15594 + C15595 + C15596 + C15597 + C15598) * C15280 +
            (C2907 * C7917 + C2906 * C49204 + C2905 * C7918 + C2904 * C49191 +
             (C113 * C2850 + C48877 * C2857) * C7919 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C393 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C48849 * C261 +
          ((((C1544 + C1543 + C1542) * C9219 +
             (C1541 + C1540 + C1539) * C48780) *
                C15279 +
            ((C16876 + C16877 + C16878) * C9219 +
             (C16879 + C16880 + C16881) * C48780) *
                C15280 +
            ((C1084 * C2848 + C49207 * C2854 + C1085 * C3314 + C49195 * C3318 +
              C1086 * C10275 + C49172 * C10278) *
                 C9219 +
             (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 + C49195 * C3323 +
              C1086 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C525 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C525 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C527 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C525 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C525 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C48866 * C525 -
           ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
             C3345 * C49204 + C3344 * C7917) *
                C49175 +
            (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
             C3343 * C49204 + C3342 * C7917) *
                C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C48866 * C49167) *
              C527 +
          (((C311 * C7917 + C310 * C49204 + C309 * C7918 + C308 * C49191 +
             C307 * C7919 + C306 * C49159) *
                C15279 +
            (C2701 * C7917 + C2700 * C49204 + C2699 * C7918 + C2698 * C49191 +
             C5226 * C7919 + C5225 * C49159) *
                C15280 +
            (C2697 * C7917 + C2696 * C49204 + C2695 * C7918 + C2694 * C49191 +
             (C113 * C2673 + C48877 * C2674) * C7919 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C48866 * C525 -
           (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
              C1084 * C2380 + C49207 * C2390) *
                 C48780 +
             (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
              C1084 * C2372 + C49207 * C2378) *
                 C9219) *
                C49175 +
            ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
              C1084 * C703 + C49207 * C712) *
                 C48780 +
             (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
              C1084 * C697 + C49207 * C702) *
                 C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C48866 * C49167) *
              C527 +
          ((((C1346 + C1345 + C1344) * C9219 +
             (C1343 + C1342 + C1341) * C48780) *
                C15279 +
            ((C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
              C1086 * C1959 + C49172 * C1963) *
                 C9219 +
             (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
              C1086 * C1964 + C49172 * C1968) *
                 C48780) *
                C15280 +
            ((C1084 * C2374 + C49207 * C2382 + C1085 * C2375 + C49195 * C2383 +
              C1086 * C10124 + C49172 * C10125) *
                 C9219 +
             (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 + C49195 * C2393 +
              C1086 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C591 -
          ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
           (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
           (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
            C1084 * C277 + C49207 * C285) *
               C1081 +
           (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
            C1084 * C267 + C49207 * C278) *
               C1087) *
              C48895 * C48866 * C592 +
          ((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
            C1086 * C1800 + C49172 * C1803) *
               C1087 +
           (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
            C1086 * C1804 + C49172 * C1809) *
               C1081 +
           (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
            C1086 * C1801 + C49172 * C1805) *
               C1088 +
           (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
            C1086 * C1806 + C49172 * C1810) *
               C1082 +
           (C1084 * C597 + C49207 * C604 + C1085 * C1294 + C49195 * C1299 +
            C1086 * C1802 + C49172 * C1807) *
               C1089 +
           (C1084 * C605 + C49207 * C612 + C1085 * C1298 + C49195 * C1306 +
            C1086 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C591 -
          (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 + C308 * C104 +
           C309 * C116 + C310 * C103 + C311 * C115 +
           (C113 * C277 + C48877 * C285) * C102 +
           (C113 * C267 + C48877 * C278) * C114) *
              C48895 * C48866 * C592 +
          ((C113 * C595 + C48877 * C600) * C114 +
           (C113 * C601 + C48877 * C610) * C102 +
           (C113 * C596 + C48877 * C602) * C115 +
           (C113 * C603 + C48877 * C611) * C103 +
           (C113 * C597 + C48877 * C604) * C116 +
           (C113 * C605 + C48877 * C612) * C104 +
           (C113 * C598 + C48877 * C606) * C117 +
           (C113 * C607 + C48877 * C613) * C105 +
           (C113 * C599 + C48877 * C608) * C118 +
           (C113 * C609 + C48877 * C614) * C106) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C591 -
          ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
           (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
           (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
            C7914 * C277 + C7908 * C285) *
               C49204 +
           (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
            C7914 * C267 + C7908 * C278) *
               C7917) *
              C48895 * C48866 * C592 +
          ((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
            C7916 * C1800 + C49172 * C1803) *
               C7917 +
           (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
            C7916 * C1804 + C49172 * C1809) *
               C49204 +
           (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
            C7916 * C1801 + C49172 * C1805) *
               C7918 +
           (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
            C7916 * C1806 + C49172 * C1810) *
               C49191 +
           (C7914 * C597 + C7908 * C604 + C7915 * C1294 + C7909 * C1299 +
            C7916 * C1802 + C49172 * C1807) *
               C7919 +
           (C7914 * C605 + C7908 * C612 + C7915 * C1298 + C7909 * C1306 +
            C7916 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C591 -
          ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
            C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
            C9214 * C277 + C9208 * C285) *
               C48780 +
           (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
            C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
            C9214 * C267 + C9208 * C278) *
               C9219) *
              C48895 * C48866 * C592 +
          ((C9214 * C595 + C9208 * C600 + C9215 * C1296 + C9209 * C1303 +
            C9216 * C1800 + C9210 * C1803 + C9217 * C9302 + C9211 * C9305 +
            C9218 * C9544 + C9212 * C9545) *
               C9219 +
           (C9214 * C601 + C9208 * C610 + C9215 * C1302 + C9209 * C1308 +
            C9216 * C1804 + C9210 * C1809 + C9217 * C9304 + C9211 * C9308 +
            C9218 * C9546 + C9212 * C9547) *
               C48780) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
           (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
              C48866 * C591 -
          ((C2694 * C49159 + C2695 * C7919 + C2696 * C49191 + C2697 * C7918 +
            C3345 * C49204 + C3344 * C7917) *
               C49175 +
           (C2698 * C49159 + C2699 * C7919 + C2700 * C49191 + C2701 * C7918 +
            C3343 * C49204 + C3342 * C7917) *
               C15280 +
           (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
            (C113 * C277 + C48877 * C285) * C49204 +
            (C113 * C267 + C48877 * C278) * C7917) *
               C15279) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C7917 +
            (C113 * C601 + C48877 * C610) * C49204 +
            (C113 * C596 + C48877 * C602) * C7918 +
            (C113 * C603 + C48877 * C611) * C49191 +
            (C113 * C597 + C48877 * C604) * C7919 +
            (C113 * C605 + C48877 * C612) * C49159) *
               C15279 +
           ((C113 * C1494 + C48877 * C1501) * C7917 +
            (C113 * C1500 + C48877 * C1506) * C49204 +
            (C113 * C1493 + C48877 * C1499) * C7918 +
            (C113 * C1498 + C48877 * C1505) * C49191 +
            (C113 * C1492 + C48877 * C1497) * C7919 +
            (C113 * C1496 + C48877 * C1504) * C49159) *
               C15280 +
           ((C113 * C2373 + C48877 * C2379) * C7917 +
            (C113 * C2381 + C48877 * C2391) * C49204 +
            (C113 * C2375 + C48877 * C2383) * C7918 +
            (C113 * C2385 + C48877 * C2393) * C49191 +
            (C113 * C2377 + C48877 * C2387) * C7919 +
            (C113 * C2389 + C48877 * C2395) * C49159) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C16864 + C16865 + C16866) * C9219 +
            (C16867 + C16868 + C16869) * C48780) *
               C15280 +
           ((C16870 + C16871 + C16872) * C9219 +
            (C16873 + C16874 + C16875) * C48780) *
               C49175) *
              C48866 * C591 -
          (((C1086 * C9864 + C49172 * C9866 + C1085 * C2381 + C49195 * C2391 +
             C1084 * C2380 + C49207 * C2390) *
                C48780 +
            (C1086 * C9860 + C49172 * C9862 + C1085 * C2373 + C49195 * C2379 +
             C1084 * C2372 + C49207 * C2378) *
                C9219) *
               C49175 +
           ((C1086 * C1962 + C49172 * C1967 + C1085 * C1500 + C49195 * C1506 +
             C1084 * C703 + C49207 * C712) *
                C48780 +
            (C1086 * C1958 + C49172 * C1961 + C1085 * C1494 + C49195 * C1501 +
             C1084 * C697 + C49207 * C702) *
                C9219) *
               C15280 +
           ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C48780 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C9219) *
               C15279) *
              C48866 * C592 +
          (((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
             C1086 * C1800 + C49172 * C1803) *
                C9219 +
            (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
             C1086 * C1804 + C49172 * C1809) *
                C48780) *
               C15279 +
           ((C1084 * C1494 + C49207 * C1501 + C1085 * C1958 + C49195 * C1961 +
             C1086 * C9392 + C49172 * C9395) *
                C9219 +
            (C1084 * C1500 + C49207 * C1506 + C1085 * C1962 + C49195 * C1967 +
             C1086 * C9394 + C49172 * C9398) *
                C48780) *
               C15280 +
           ((C1084 * C2373 + C49207 * C2379 + C1085 * C9860 + C49195 * C9862 +
             C1086 * C9861 + C49172 * C9863) *
                C9219 +
            (C1084 * C2381 + C49207 * C2391 + C1085 * C9864 + C49195 * C9866 +
             C1086 * C9865 + C49172 * C9867) *
                C48780) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C525 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C525 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C525 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C525 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C525 +
          (((C16001 + C16002 + C16003 + C16004 + C16005 + C16006) * C15279 +
            (C16007 + C16008 + C16009 + C16010 + C16011 + C16012) * C15280 +
            ((C113 * C3313 + C48877 * C3316) * C7917 +
             (C113 * C3317 + C48877 * C3322) * C49204 +
             (C113 * C3314 + C48877 * C3318) * C7918 +
             (C113 * C3319 + C48877 * C3323) * C49191 +
             (C113 * C3315 + C48877 * C3320) * C7919 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C16012 + C16011 + C16010 + C16009 + C16008 + C16007) * C49175 +
            (C16006 + C16005 + C16004 + C16003 + C16002 + C16001) * C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C393 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C525 +
          ((((C17308 + C17309 + C17310) * C9219 +
             (C17311 + C17312 + C17313) * C48780) *
                C15279 +
            ((C17314 + C17315 + C17316) * C9219 +
             (C17317 + C17318 + C17319) * C48780) *
                C15280 +
            ((C1084 * C3313 + C49207 * C3316 + C1085 * C10274 +
              C49195 * C10277 + C1086 * C10738 + C49172 * C10739) *
                 C9219 +
             (C1084 * C3317 + C49207 * C3322 + C1085 * C10276 +
              C49195 * C10280 + C1086 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C17319 + C17318 + C17317) * C48780 +
             (C17316 + C17315 + C17314) * C9219) *
                C49175 +
            ((C17313 + C17312 + C17311) * C48780 +
             (C17310 + C17309 + C17308) * C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C527 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C48849 * C527 +
          (((C15587 + C15588 + C15589 + C15590 + C15591 + C15592) * C15279 +
            (C15593 + C15594 + C15595 + C15596 + C15597 + C15598) * C15280 +
            (C2907 * C7917 + C2906 * C49204 + C2905 * C7918 + C2904 * C49191 +
             (C113 * C2850 + C48877 * C2857) * C7919 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C15598 + C15597 + C15596 + C15595 + C15594 + C15593) * C49175 +
            (C15592 + C15591 + C15590 + C15589 + C15588 + C15587) * C15280 +
            (C173 * C49159 + C172 * C7919 + C171 * C49191 + C170 * C7918 +
             C169 * C49204 + C168 * C7917) *
                C15279) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C799 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C48849 * C527 +
          ((((C1544 + C1543 + C1542) * C9219 +
             (C1541 + C1540 + C1539) * C48780) *
                C15279 +
            ((C16876 + C16877 + C16878) * C9219 +
             (C16879 + C16880 + C16881) * C48780) *
                C15280 +
            ((C1084 * C2848 + C49207 * C2854 + C1085 * C3314 + C49195 * C3318 +
              C1086 * C10275 + C49172 * C10278) *
                 C9219 +
             (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 + C49195 * C3323 +
              C1086 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C16881 + C16880 + C16879) * C48780 +
             (C16878 + C16877 + C16876) * C9219) *
                C49175 +
            ((C1539 + C1540 + C1541) * C48780 +
             (C1542 + C1543 + C1544) * C9219) *
                C15280 +
            ((C1132 + C1131 + C1130) * C48780 +
             (C1129 + C1128 + C1127) * C9219) *
                C15279) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C259 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C259 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C259 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C259 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C7917 +
             (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
             C169 * C49191 + C170 * C7919 + C171 * C49159) *
                C15279 +
            (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
            (C15581 + C15582 + C15583 + C15584 + C15585 + C15586) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C7919 + C2906 * C49191 + C2907 * C7918 +
             C3774 * C49204 + C3775 * C7917) *
                C49175 +
            (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
            (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
               C49169) *
              C259 +
          (((C16001 + C16002 + C16003 + C16004 + C16005 + C16006) * C15279 +
            (C16007 + C16008 + C16009 + C16010 + C16011 + C16012) * C15280 +
            ((C113 * C3313 + C48877 * C3316) * C7917 +
             (C113 * C3317 + C48877 * C3322) * C49204 +
             (C113 * C3314 + C48877 * C3318) * C7918 +
             (C113 * C3319 + C48877 * C3323) * C49191 +
             (C113 * C3315 + C48877 * C3320) * C7919 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C16012 + C16011 + C16010 + C16009 + C16008 + C16007) * C49175 +
            (C16006 + C16005 + C16004 + C16003 + C16002 + C16001) * C15280 +
            (C308 * C49159 + C309 * C7919 + C310 * C49191 + C311 * C7918 +
             (C113 * C277 + C48877 * C285) * C49204 +
             (C113 * C267 + C48877 * C278) * C7917) *
                C15279) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C9219 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C48780) *
                C15279 +
            ((C16864 + C16865 + C16866) * C9219 +
             (C16867 + C16868 + C16869) * C48780) *
                C15280 +
            ((C16870 + C16871 + C16872) * C9219 +
             (C16873 + C16874 + C16875) * C48780) *
                C49175) *
               C799 -
           (((C1086 * C10276 + C49172 * C10280 + C1085 * C3317 +
              C49195 * C3322 + C1084 * C2855 + C49207 * C2861) *
                 C48780 +
             (C1086 * C10274 + C49172 * C10277 + C1085 * C3313 +
              C49195 * C3316 + C1084 * C2849 + C49207 * C2856) *
                 C9219) *
                C49175 +
            ((C16875 + C16874 + C16873) * C48780 +
             (C16872 + C16871 + C16870) * C9219) *
                C15280 +
            ((C16869 + C16868 + C16867) * C48780 +
             (C16866 + C16865 + C16864) * C9219) *
                C15279) *
               C49169) *
              C259 +
          ((((C17308 + C17309 + C17310) * C9219 +
             (C17311 + C17312 + C17313) * C48780) *
                C15279 +
            ((C17314 + C17315 + C17316) * C9219 +
             (C17317 + C17318 + C17319) * C48780) *
                C15280 +
            ((C1084 * C3313 + C49207 * C3316 + C1085 * C10274 +
              C49195 * C10277 + C1086 * C10738 + C49172 * C10739) *
                 C9219 +
             (C1084 * C3317 + C49207 * C3322 + C1085 * C10276 +
              C49195 * C10280 + C1086 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C17319 + C17318 + C17317) * C48780 +
             (C17316 + C17315 + C17314) * C9219) *
                C49175 +
            ((C17313 + C17312 + C17311) * C48780 +
             (C17310 + C17309 + C17308) * C9219) *
                C15280 +
            ((C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C48780 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C9219) *
                C15279) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C945 -
          ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
           (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
           (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
            C1084 * C409 + C49207 * C417) *
               C1081 +
           (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
            C1084 * C399 + C49207 * C410) *
               C1087) *
              C48895 * C946 +
          ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
            C1086 * C2373 + C49172 * C2379) *
               C1087 +
           (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
            C1086 * C2381 + C49172 * C2391) *
               C1081 +
           (C1084 * C949 + C49207 * C955 + C1085 * C2374 + C49195 * C2382 +
            C1086 * C2375 + C49172 * C2383) *
               C1088 +
           (C1084 * C956 + C49207 * C964 + C1085 * C2384 + C49195 * C2392 +
            C1086 * C2385 + C49172 * C2393) *
               C1082 +
           (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
            C1086 * C2377 + C49172 * C2387) *
               C1089 +
           (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
            C1086 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C945 -
          (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 + C440 * C104 +
           C441 * C116 + C442 * C103 + C443 * C115 +
           (C113 * C409 + C48877 * C417) * C102 +
           (C113 * C399 + C48877 * C410) * C114) *
              C48895 * C946 +
          ((C113 * C948 + C48877 * C953) * C114 +
           (C113 * C954 + C48877 * C963) * C102 +
           (C113 * C949 + C48877 * C955) * C115 +
           (C113 * C956 + C48877 * C964) * C103 +
           (C113 * C950 + C48877 * C957) * C116 +
           (C113 * C958 + C48877 * C965) * C104 +
           (C113 * C951 + C48877 * C959) * C117 +
           (C113 * C960 + C48877 * C966) * C105 +
           (C113 * C952 + C48877 * C961) * C118 +
           (C113 * C962 + C48877 * C967) * C106) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C945 -
          ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
           (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
           (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
            C7914 * C409 + C7908 * C417) *
               C49204 +
           (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
            C7914 * C399 + C7908 * C410) *
               C7917) *
              C48895 * C946 +
          ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
            C7916 * C2373 + C49172 * C2379) *
               C7917 +
           (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
            C7916 * C2381 + C49172 * C2391) *
               C49204 +
           (C7914 * C949 + C7908 * C955 + C7915 * C2374 + C7909 * C2382 +
            C7916 * C2375 + C49172 * C2383) *
               C7918 +
           (C7914 * C956 + C7908 * C964 + C7915 * C2384 + C7909 * C2392 +
            C7916 * C2385 + C49172 * C2393) *
               C49191 +
           (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
            C7916 * C2377 + C49172 * C2387) *
               C7919 +
           (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
            C7916 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C945 -
          ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
            C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
            C9214 * C409 + C9208 * C417) *
               C48780 +
           (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
            C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
            C9214 * C399 + C9208 * C410) *
               C9219) *
              C48895 * C946 +
          ((C9214 * C948 + C9208 * C953 + C9215 * C2372 + C9209 * C2378 +
            C9216 * C2373 + C9210 * C2379 + C9217 * C9860 + C9211 * C9862 +
            C9218 * C9861 + C9212 * C9863) *
               C9219 +
           (C9214 * C954 + C9208 * C963 + C9215 * C2380 + C9209 * C2390 +
            C9216 * C2381 + C9210 * C2391 + C9217 * C9864 + C9211 * C9866 +
            C9218 * C9865 + C9212 * C9867) *
               C48780) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C7917 +
            (C113 * C127 + C48877 * C140) * C49204 + C168 * C7918 +
            C169 * C49191 + C170 * C7919 + C171 * C49159) *
               C15279 +
           (C15575 + C15576 + C15577 + C15578 + C15579 + C15580) * C15280 +
           C16425 * C49175) *
              C945 -
          ((C16416 + C16417 + C16418 + C16419 + C16420 + C16421) * C49175 +
           (C15586 + C15585 + C15584 + C15583 + C15582 + C15581) * C15280 +
           (C15580 + C15579 + C15578 + C15577 + C15576 + C15575) * C15279) *
              C946 +
          (C16425 * C15279 +
           (C16421 + C16420 + C16419 + C16418 + C16417 + C16416) * C15280 +
           ((C113 * C3751 + C48877 * C3754) * C7917 +
            (C113 * C3755 + C48877 * C3760) * C49204 +
            (C113 * C3752 + C48877 * C3756) * C7918 +
            (C113 * C3757 + C48877 * C3761) * C49191 +
            (C113 * C3753 + C48877 * C3758) * C7919 +
            (C113 * C3759 + C48877 * C3762) * C49159) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C9219 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C48780) *
               C15279 +
           ((C16864 + C16865 + C16866) * C9219 +
            (C16867 + C16868 + C16869) * C48780) *
               C15280 +
           C17746 * C49175) *
              C945 -
          (((C17738 + C17739 + C17740) * C48780 +
            (C17741 + C17742 + C17743) * C9219) *
               C49175 +
           ((C16875 + C16874 + C16873) * C48780 +
            (C16872 + C16871 + C16870) * C9219) *
               C15280 +
           ((C16869 + C16868 + C16867) * C48780 +
            (C16866 + C16865 + C16864) * C9219) *
               C15279) *
              C946 +
          (C17746 * C15279 +
           ((C17743 + C17742 + C17741) * C9219 +
            (C17740 + C17739 + C17738) * C48780) *
               C15280 +
           ((C1084 * C3751 + C49207 * C3754 + C1085 * C11180 + C49195 * C11182 +
             C1086 * C11181 + C49172 * C11183) *
                C9219 +
            (C1084 * C3755 + C49207 * C3760 + C1085 * C11184 + C49195 * C11186 +
             C1086 * C11185 + C49172 * C11187) *
                C48780) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47919 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48785 +
            (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
            C3939 * C47925 + C3940 * C26653) *
               C31302 +
           ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
            C6673 * C47915 + C6674 * C48793 + C6251 * C47925 + C6252 * C26653) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C4263 + C4264) * C26653 + (C4265 + C4266) * C47925 +
            C6691 * C48793 + C6692 * C47915 + C6693 * C48785 + C6694 * C47919) *
               C48982 +
           ((C3934 + C3933) * C26653 + (C3932 + C3931) * C47925 +
            (C3930 + C3929) * C48793 + (C3928 + C3927) * C47915 +
            (C3926 + C3925) * C48785 + (C3924 + C3923) * C47919) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C3939 * C47919 + C3940 * C48785 + C3941 * C47915 + C3942 * C48793 +
            (C3938 + C3937) * C47925 + (C3936 + C3935) * C26653) *
               C31302 +
           (C6251 * C47919 + C6252 * C48785 + (C4266 + C4265) * C47915 +
            (C4264 + C4263) * C48793 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C47925 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C26653) *
               C48982) *
              C48866 * C48849 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C48866 * C259 -
           (((C6463 + C6464) * C26653 + (C6465 + C6466) * C47925 +
             (C6467 + C6468) * C48793 + (C6469 + C6470) * C47915 +
             (C7252 + C7251) * C48785 + (C7250 + C7249) * C47919) *
                C48982 +
            ((C4101 + C4102) * C26653 + (C4103 + C4104) * C47925 +
             (C4105 + C4106) * C48793 + (C4107 + C4108) * C47915 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48785 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47919) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C47919 + (C4106 + C4105) * C48785 +
             (C4104 + C4103) * C47915 + (C4102 + C4101) * C48793 +
             (C4100 + C4099) * C47925 + (C4098 + C4097) * C26653) *
                C31302 +
            ((C6470 + C6469) * C47919 + (C6468 + C6467) * C48785 +
             (C6466 + C6465) * C47915 + (C6464 + C6463) * C48793 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C47925 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C26653) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C26653 + (C4265 + C4266) * C47925 +
             C6691 * C48793 + C6692 * C47915 + C6693 * C48785 +
             C6694 * C47919) *
                C48982 +
            ((C3934 + C3933) * C26653 + (C3932 + C3931) * C47925 +
             (C3930 + C3929) * C48793 + (C3928 + C3927) * C47915 +
             (C3926 + C3925) * C48785 + (C3924 + C3923) * C47919) *
                C31302) *
               C48866 * C259) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C26653 + (C6701 + C6702) * C47925 +
             C19065 * C48793 + C19066 * C47915 + (C7795 + C7796) * C48785 +
             (C7797 + C7798) * C47919) *
                C48982 +
            (C6691 * C26653 + C6692 * C47925 + C6693 * C48793 + C6694 * C47915 +
             (C6698 + C6697) * C48785 + (C6696 + C6695) * C47919) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C47919 + C6674 * C48785 + C6251 * C47915 + C6252 * C48793 +
             (C4266 + C4265) * C47925 + (C4264 + C4263) * C26653) *
                C31302 +
            (C19055 * C47919 + C19056 * C48785 + (C6702 + C6701) * C47915 +
             (C6700 + C6699) * C48793 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C47925 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C26653) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C26653 + (C4265 + C4266) * C47925 +
             C6691 * C48793 + C6692 * C47915 + C6693 * C48785 +
             C6694 * C47919) *
                C48982 +
            ((C3934 + C3933) * C26653 + (C3932 + C3931) * C47925 +
             (C3930 + C3929) * C48793 + (C3928 + C3927) * C47915 +
             (C3926 + C3925) * C48785 + (C3924 + C3923) * C47919) *
                C31302) *
               C393) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C48866 * C525 -
           (((C6463 + C6464) * C26653 + (C6465 + C6466) * C47925 +
             (C6467 + C6468) * C48793 + (C6469 + C6470) * C47915 +
             (C7252 + C7251) * C48785 + (C7250 + C7249) * C47919) *
                C48982 +
            ((C4101 + C4102) * C26653 + (C4103 + C4104) * C47925 +
             (C4105 + C4106) * C48793 + (C4107 + C4108) * C47915 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48785 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47919) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C47919 + (C4106 + C4105) * C48785 +
             (C4104 + C4103) * C47915 + (C4102 + C4101) * C48793 +
             (C4100 + C4099) * C47925 + (C4098 + C4097) * C26653) *
                C31302 +
            ((C6470 + C6469) * C47919 + (C6468 + C6467) * C48785 +
             (C6466 + C6465) * C47915 + (C6464 + C6463) * C48793 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C47925 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C26653) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C26653 + (C4265 + C4266) * C47925 +
             C6691 * C48793 + C6692 * C47915 + C6693 * C48785 +
             C6694 * C47919) *
                C48982 +
            ((C3934 + C3933) * C26653 + (C3932 + C3931) * C47925 +
             (C3930 + C3929) * C48793 + (C3928 + C3927) * C47915 +
             (C3926 + C3925) * C48785 + (C3924 + C3923) * C47919) *
                C31302) *
               C48866 * C525) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47919 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48785 +
            (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
            C3939 * C47925 + C3940 * C26653) *
               C31302 +
           ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
            C6673 * C47915 + C6674 * C48793 + C6251 * C47925 + C6252 * C26653) *
               C48982) *
              C48866 * C591 -
          (((C6463 + C6464) * C26653 + (C6465 + C6466) * C47925 +
            (C6467 + C6468) * C48793 + (C6469 + C6470) * C47915 +
            (C7252 + C7251) * C48785 + (C7250 + C7249) * C47919) *
               C48982 +
           ((C4101 + C4102) * C26653 + (C4103 + C4104) * C47925 +
            (C4105 + C4106) * C48793 + (C4107 + C4108) * C47915 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C48785 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C47919) *
               C31302) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C47919 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C48785 +
            (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
                C47915 +
            (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
                C48793 +
            (C3884 * C597 + C49139 * C604 + C3885 * C1294 + C48940 * C1299) *
                C47925 +
            (C3884 * C605 + C49139 * C612 + C3885 * C1298 + C48940 * C1306) *
                C26653) *
               C31302 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C47919 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C48785 +
            (C3884 * C1493 + C49139 * C1499 + C3885 * C1959 + C48940 * C1963) *
                C47915 +
            (C3884 * C1498 + C49139 * C1505 + C3885 * C1964 + C48940 * C1968) *
                C48793 +
            (C3884 * C1492 + C49139 * C1497 + C3885 * C1960 + C48940 * C1965) *
                C47925 +
            (C3884 * C1496 + C49139 * C1504 + C3885 * C1966 + C48940 * C1969) *
                C26653) *
               C48982) *
              C48866 * C593) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C26653 + (C6701 + C6702) * C47925 +
             C19065 * C48793 + C19066 * C47915 + (C7795 + C7796) * C48785 +
             (C7797 + C7798) * C47919) *
                C48982 +
            (C6691 * C26653 + C6692 * C47925 + C6693 * C48793 + C6694 * C47915 +
             (C6698 + C6697) * C48785 + (C6696 + C6695) * C47919) *
                C31302) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C47919 + (C7251 + C7252) * C48785 +
             (C6470 + C6469) * C47915 + (C6468 + C6467) * C48793 +
             (C6466 + C6465) * C47925 + (C6464 + C6463) * C26653) *
                C31302 +
            ((C19613 + C19614) * C47919 + (C19615 + C19616) * C48785 +
             (C18860 + C18859) * C47915 + (C18858 + C18857) * C48793 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C47925 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C26653) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C26653 + (C6465 + C6466) * C47925 +
             (C6467 + C6468) * C48793 + (C6469 + C6470) * C47915 +
             (C7252 + C7251) * C48785 + (C7250 + C7249) * C47919) *
                C48982 +
            ((C4101 + C4102) * C26653 + (C4103 + C4104) * C47925 +
             (C4105 + C4106) * C48793 + (C4107 + C4108) * C47915 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48785 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47919) *
                C31302) *
               C393) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C26653 + (C6701 + C6702) * C47925 +
             C19065 * C48793 + C19066 * C47915 + (C7795 + C7796) * C48785 +
             (C7797 + C7798) * C47919) *
                C48982 +
            (C6691 * C26653 + C6692 * C47925 + C6693 * C48793 + C6694 * C47915 +
             (C6698 + C6697) * C48785 + (C6696 + C6695) * C47919) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C47919 + C6674 * C48785 + C6251 * C47915 + C6252 * C48793 +
             (C4266 + C4265) * C47925 + (C4264 + C4263) * C26653) *
                C31302 +
            (C19055 * C47919 + C19056 * C48785 + (C6702 + C6701) * C47915 +
             (C6700 + C6699) * C48793 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C47925 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C26653) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C26653 + (C4265 + C4266) * C47925 +
             C6691 * C48793 + C6692 * C47915 + C6693 * C48785 +
             C6694 * C47919) *
                C48982 +
            ((C3934 + C3933) * C26653 + (C3932 + C3931) * C47925 +
             (C3930 + C3929) * C48793 + (C3928 + C3927) * C47915 +
             (C3926 + C3925) * C48785 + (C3924 + C3923) * C47919) *
                C31302) *
               C799) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C47919 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C48785 +
             (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
             C3939 * C47925 + C3940 * C26653) *
                C31302 +
            ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
             C6673 * C47915 + C6674 * C48793 + C6251 * C47925 +
             C6252 * C26653) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C26653 + (C6701 + C6702) * C47925 +
             C19065 * C48793 + C19066 * C47915 + (C7795 + C7796) * C48785 +
             (C7797 + C7798) * C47919) *
                C48982 +
            (C6691 * C26653 + C6692 * C47925 + C6693 * C48793 + C6694 * C47915 +
             (C6698 + C6697) * C48785 + (C6696 + C6695) * C47919) *
                C31302) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C47919 + (C7251 + C7252) * C48785 +
             (C6470 + C6469) * C47915 + (C6468 + C6467) * C48793 +
             (C6466 + C6465) * C47925 + (C6464 + C6463) * C26653) *
                C31302 +
            ((C19613 + C19614) * C47919 + (C19615 + C19616) * C48785 +
             (C18860 + C18859) * C47915 + (C18858 + C18857) * C48793 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C47925 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C26653) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C26653 + (C6465 + C6466) * C47925 +
             (C6467 + C6468) * C48793 + (C6469 + C6470) * C47915 +
             (C7252 + C7251) * C48785 + (C7250 + C7249) * C47919) *
                C48982 +
            ((C4101 + C4102) * C26653 + (C4103 + C4104) * C47925 +
             (C4105 + C4106) * C48793 + (C4107 + C4108) * C47915 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C48785 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C47919) *
                C31302) *
               C799) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C47919 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C48785 +
            (C3923 + C3924) * C47915 + (C3925 + C3926) * C48793 +
            C3939 * C47925 + C3940 * C26653) *
               C31302 +
           ((C6695 + C6696) * C47919 + (C6697 + C6698) * C48785 +
            C6673 * C47915 + C6674 * C48793 + C6251 * C47925 + C6252 * C26653) *
               C48982) *
              C945 -
          (((C6699 + C6700) * C26653 + (C6701 + C6702) * C47925 +
            C19065 * C48793 + C19066 * C47915 + (C7795 + C7796) * C48785 +
            (C7797 + C7798) * C47919) *
               C48982 +
           (C6691 * C26653 + C6692 * C47925 + C6693 * C48793 + C6694 * C47915 +
            (C6698 + C6697) * C48785 + (C6696 + C6695) * C47919) *
               C31302) *
              C946 +
          ((C20151 * C47919 + C20152 * C48785 + C19055 * C47915 +
            C19056 * C48793 + (C6702 + C6701) * C47925 +
            (C6700 + C6699) * C26653) *
               C31302 +
           (C22390 * C47919 + C22391 * C48785 + (C19070 + C19069) * C47915 +
            (C19068 + C19067) * C48793 +
            (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                C47925 +
            (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                C26653) *
               C48982) *
              C947) *
         C48849 * C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C23725 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C23719 +
            (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
               C48978 +
           ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
            C6673 * C23726 + C6674 * C48790) *
               C48985 +
           (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
            C19056 * C48790) *
               C36778) *
              C48866 * C48849 * C110 -
          (((C6699 + C6700) * C48790 + (C6701 + C6702) * C23726 +
            C19065 * C23719 + C19066 * C23725) *
               C36778 +
           (C6691 * C48790 + C6692 * C23726 + C6693 * C23719 + C6694 * C23725) *
               C48985 +
           ((C3930 + C3929) * C48790 + (C3928 + C3927) * C23726 +
            (C3926 + C3925) * C23719 + (C3924 + C3923) * C23725) *
               C48978) *
              C48866 * C48849 * C111 +
          ((C3939 * C23725 + C3940 * C23719 + C3941 * C23726 + C3942 * C48790) *
               C48978 +
           (C6251 * C23725 + C6252 * C23719 + (C4266 + C4265) * C23726 +
            (C4264 + C4263) * C48790) *
               C48985 +
           ((C6702 + C6701) * C23725 + (C6700 + C6699) * C23719 +
            (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                C23726 +
            (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                C48790) *
               C36778) *
              C48866 * C48849 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C48866 * C259 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C23726 +
             (C19616 + C19615) * C23719 + (C19614 + C19613) * C23725) *
                C36778 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C23726 +
             (C7252 + C7251) * C23719 + (C7250 + C7249) * C23725) *
                C48985 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C23726 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C23719 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C23725) *
                C48978) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C23725 + (C4106 + C4105) * C23719 +
             (C4104 + C4103) * C23726 + (C4102 + C4101) * C48790) *
                C48978 +
            ((C6470 + C6469) * C23725 + (C6468 + C6467) * C23719 +
             (C6466 + C6465) * C23726 + (C6464 + C6463) * C48790) *
                C48985 +
            ((C18860 + C18859) * C23725 + (C18858 + C18857) * C23719 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C23726 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C48790) *
                C36778) *
               C48866 * C49167 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C23726 +
             C19065 * C23719 + C19066 * C23725) *
                C36778 +
            (C6691 * C48790 + C6692 * C23726 + C6693 * C23719 +
             C6694 * C23725) *
                C48985 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C23726 +
             (C3926 + C3925) * C23719 + (C3924 + C3923) * C23725) *
                C48978) *
               C48866 * C259) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C393 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C23726 +
             (C20165 + C20166) * C23719 + (C20167 + C20168) * C23725) *
                C36778 +
            (C19065 * C48790 + C19066 * C23726 + (C7795 + C7796) * C23719 +
             (C7797 + C7798) * C23725) *
                C48985 +
            (C6693 * C48790 + C6694 * C23726 + (C6698 + C6697) * C23719 +
             (C6696 + C6695) * C23725) *
                C48978) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C23725 + C6674 * C23719 + C6251 * C23726 +
             C6252 * C48790) *
                C48978 +
            (C19055 * C23725 + C19056 * C23719 + (C6702 + C6701) * C23726 +
             (C6700 + C6699) * C48790) *
                C48985 +
            ((C19070 + C19069) * C23725 + (C19068 + C19067) * C23719 +
             (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                 C23726 +
             (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                 C48790) *
                C36778) *
               C49169 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C23726 +
             C19065 * C23719 + C19066 * C23725) *
                C36778 +
            (C6691 * C48790 + C6692 * C23726 + C6693 * C23719 +
             C6694 * C23725) *
                C48985 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C23726 +
             (C3926 + C3925) * C23719 + (C3924 + C3923) * C23725) *
                C48978) *
               C393) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C48866 * C525 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C23726 +
             (C19616 + C19615) * C23719 + (C19614 + C19613) * C23725) *
                C36778 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C23726 +
             (C7252 + C7251) * C23719 + (C7250 + C7249) * C23725) *
                C48985 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C23726 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C23719 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C23725) *
                C48978) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C23725 + (C4106 + C4105) * C23719 +
             (C4104 + C4103) * C23726 + (C4102 + C4101) * C48790) *
                C48978 +
            ((C6470 + C6469) * C23725 + (C6468 + C6467) * C23719 +
             (C6466 + C6465) * C23726 + (C6464 + C6463) * C48790) *
                C48985 +
            ((C18860 + C18859) * C23725 + (C18858 + C18857) * C23719 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C23726 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C48790) *
                C36778) *
               C48866 * C49167 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C23726 +
             C19065 * C23719 + C19066 * C23725) *
                C36778 +
            (C6691 * C48790 + C6692 * C23726 + C6693 * C23719 +
             C6694 * C23725) *
                C48985 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C23726 +
             (C3926 + C3925) * C23719 + (C3924 + C3923) * C23725) *
                C48978) *
               C48866 * C525) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C23725 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C23719 +
            (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
               C48978 +
           ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
            C6673 * C23726 + C6674 * C48790) *
               C48985 +
           (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
            C19056 * C48790) *
               C36778) *
              C48866 * C591 -
          (((C18857 + C18858) * C48790 + (C18859 + C18860) * C23726 +
            (C19616 + C19615) * C23719 + (C19614 + C19613) * C23725) *
               C36778 +
           ((C6467 + C6468) * C48790 + (C6469 + C6470) * C23726 +
            (C7252 + C7251) * C23719 + (C7250 + C7249) * C23725) *
               C48985 +
           ((C4105 + C4106) * C48790 + (C4107 + C4108) * C23726 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C23719 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C23725) *
               C48978) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C23725 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C23719 +
            (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
                C23726 +
            (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
                C48790) *
               C48978 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C23725 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C23719 +
            (C3884 * C1493 + C49139 * C1499 + C3885 * C1959 + C48940 * C1963) *
                C23726 +
            (C3884 * C1498 + C49139 * C1505 + C3885 * C1964 + C48940 * C1968) *
                C48790) *
               C48985 +
           ((C3884 * C2373 + C49139 * C2379 + C3885 * C9860 + C48940 * C9862) *
                C23725 +
            (C3884 * C2381 + C49139 * C2391 + C3885 * C9864 + C48940 * C9866) *
                C23719 +
            (C3884 * C2375 + C49139 * C2383 + C3885 * C10124 +
             C48940 * C10125) *
                C23726 +
            (C3884 * C2385 + C49139 * C2393 + C3885 * C10126 +
             C48940 * C10127) *
                C48790) *
               C36778) *
              C48866 * C593) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C393 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C23726 +
             (C20165 + C20166) * C23719 + (C20167 + C20168) * C23725) *
                C36778 +
            (C19065 * C48790 + C19066 * C23726 + (C7795 + C7796) * C23719 +
             (C7797 + C7798) * C23725) *
                C48985 +
            (C6693 * C48790 + C6694 * C23726 + (C6698 + C6697) * C23719 +
             (C6696 + C6695) * C23725) *
                C48978) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C23725 + (C7251 + C7252) * C23719 +
             (C6470 + C6469) * C23726 + (C6468 + C6467) * C48790) *
                C48978 +
            ((C19613 + C19614) * C23725 + (C19615 + C19616) * C23719 +
             (C18860 + C18859) * C23726 + (C18858 + C18857) * C48790) *
                C48985 +
            ((C22026 + C22027) * C23725 + (C22028 + C22029) * C23719 +
             (C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C23726 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C36778) *
               C49169 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C23726 +
             (C19616 + C19615) * C23719 + (C19614 + C19613) * C23725) *
                C36778 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C23726 +
             (C7252 + C7251) * C23719 + (C7250 + C7249) * C23725) *
                C48985 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C23726 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C23719 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C23725) *
                C48978) *
               C393) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C799 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C23726 +
             (C20165 + C20166) * C23719 + (C20167 + C20168) * C23725) *
                C36778 +
            (C19065 * C48790 + C19066 * C23726 + (C7795 + C7796) * C23719 +
             (C7797 + C7798) * C23725) *
                C48985 +
            (C6693 * C48790 + C6694 * C23726 + (C6698 + C6697) * C23719 +
             (C6696 + C6695) * C23725) *
                C48978) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C23725 + C6674 * C23719 + C6251 * C23726 +
             C6252 * C48790) *
                C48978 +
            (C19055 * C23725 + C19056 * C23719 + (C6702 + C6701) * C23726 +
             (C6700 + C6699) * C48790) *
                C48985 +
            ((C19070 + C19069) * C23725 + (C19068 + C19067) * C23719 +
             (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                 C23726 +
             (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                 C48790) *
                C36778) *
               C49169 -
           (((C6699 + C6700) * C48790 + (C6701 + C6702) * C23726 +
             C19065 * C23719 + C19066 * C23725) *
                C36778 +
            (C6691 * C48790 + C6692 * C23726 + C6693 * C23719 +
             C6694 * C23725) *
                C48985 +
            ((C3930 + C3929) * C48790 + (C3928 + C3927) * C23726 +
             (C3926 + C3925) * C23719 + (C3924 + C3923) * C23725) *
                C48978) *
               C799) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C23725 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C23719 +
             (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
                C48978 +
            ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
             C6673 * C23726 + C6674 * C48790) *
                C48985 +
            (C20151 * C23725 + C20152 * C23719 + C19055 * C23726 +
             C19056 * C48790) *
                C36778) *
               C799 -
           (((C19067 + C19068) * C48790 + (C19069 + C19070) * C23726 +
             (C20165 + C20166) * C23719 + (C20167 + C20168) * C23725) *
                C36778 +
            (C19065 * C48790 + C19066 * C23726 + (C7795 + C7796) * C23719 +
             (C7797 + C7798) * C23725) *
                C48985 +
            (C6693 * C48790 + C6694 * C23726 + (C6698 + C6697) * C23719 +
             (C6696 + C6695) * C23725) *
                C48978) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C23725 + (C7251 + C7252) * C23719 +
             (C6470 + C6469) * C23726 + (C6468 + C6467) * C48790) *
                C48978 +
            ((C19613 + C19614) * C23725 + (C19615 + C19616) * C23719 +
             (C18860 + C18859) * C23726 + (C18858 + C18857) * C48790) *
                C48985 +
            ((C22026 + C22027) * C23725 + (C22028 + C22029) * C23719 +
             (C3884 * C3314 + C49139 * C3318 + C3885 * C10275 +
              C48940 * C10278) *
                 C23726 +
             (C3884 * C3319 + C49139 * C3323 + C3885 * C10279 +
              C48940 * C10281) *
                 C48790) *
                C36778) *
               C49169 -
           (((C18857 + C18858) * C48790 + (C18859 + C18860) * C23726 +
             (C19616 + C19615) * C23719 + (C19614 + C19613) * C23725) *
                C36778 +
            ((C6467 + C6468) * C48790 + (C6469 + C6470) * C23726 +
             (C7252 + C7251) * C23719 + (C7250 + C7249) * C23725) *
                C48985 +
            ((C4105 + C4106) * C48790 + (C4107 + C4108) * C23726 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C23719 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C23725) *
                C48978) *
               C799) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C23725 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C23719 +
            (C3923 + C3924) * C23726 + (C3925 + C3926) * C48790) *
               C48978 +
           ((C6695 + C6696) * C23725 + (C6697 + C6698) * C23719 +
            C6673 * C23726 + C6674 * C48790) *
               C48985 +
           C39531 * C36778) *
              C945 -
          (((C19067 + C19068) * C48790 + (C19069 + C19070) * C23726 +
            (C20165 + C20166) * C23719 + (C20167 + C20168) * C23725) *
               C36778 +
           (C19065 * C48790 + C19066 * C23726 + (C7795 + C7796) * C23719 +
            (C7797 + C7798) * C23725) *
               C48985 +
           (C6693 * C48790 + C6694 * C23726 + (C6698 + C6697) * C23719 +
            (C6696 + C6695) * C23725) *
               C48978) *
              C946 +
          (C39531 * C48978 +
           (C22390 * C23725 + C22391 * C23719 + (C19070 + C19069) * C23726 +
            (C19068 + C19067) * C48790) *
               C48985 +
           ((C22406 + C22405) * C23725 + (C22404 + C22403) * C23719 +
            (C3884 * C3752 + C49139 * C3756 + C3885 * C17895 +
             C48940 * C17896) *
                C23726 +
            (C3884 * C3757 + C49139 * C3761 + C3885 * C17897 +
             C48940 * C17898) *
                C48790) *
               C36778) *
              C947) *
         C48849 * C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C23725 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C23719 +
            (C1127 + C1128 + C1129) * C23726 +
            (C1130 + C1131 + C1132) * C48790) *
               C31302 +
           ((C16864 + C16865 + C16866) * C23725 +
            (C16867 + C16868 + C16869) * C23719 +
            (C1544 + C1543 + C1542) * C23726 +
            (C1541 + C1540 + C1539) * C48790) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C1533 + C1534 + C1535) * C48790 +
            (C1536 + C1537 + C1538) * C23726 +
            (C1539 + C1540 + C1541) * C23719 +
            (C1542 + C1543 + C1544) * C23725) *
               C48982 +
           ((C1138 + C1137 + C1136) * C48790 +
            (C1135 + C1134 + C1133) * C23726 +
            (C1132 + C1131 + C1130) * C23719 +
            (C1129 + C1128 + C1127) * C23725) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C1147 * C23725 + C1148 * C23719 + (C1144 + C1143 + C1142) * C23726 +
            (C1141 + C1140 + C1139) * C48790) *
               C31302 +
           ((C1538 + C1537 + C1536) * C23725 +
            (C1535 + C1534 + C1533) * C23719 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C23726 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C48790) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C22513 +
            (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
            C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
            C173 * C49176) *
               C31302 +
           (C2900 * C22513 + C2901 * C49213 + C443 * C22514 + C442 * C49206 +
            C441 * C22515 + C440 * C49193 + C439 * C22516 + C438 * C49176) *
               C48982) *
              C48866 * C48849 * C110 -
          ((C436 * C49176 + C437 * C22516 + C438 * C49193 + C439 * C22515 +
            C440 * C49206 + C441 * C22514 + C442 * C49213 + C443 * C22513) *
               C48982 +
           (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
            C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C170 * C22513 + C171 * C49213 + C172 * C22514 + C173 * C49206 +
            C174 * C22515 + C175 * C49193 + C177 * C22516 + C176 * C49176) *
               C31302 +
           (C441 * C22513 + C440 * C49213 + C439 * C22514 + C438 * C49206 +
            C437 * C22515 + C436 * C49193 +
            (C113 * C400 + C48877 * C411) * C22516 +
            (C113 * C412 + C48877 * C418) * C49176) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C23725 +
            (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
            C169 * C48790) *
               C49215 +
           (C2900 * C23725 + C2901 * C23719 + C443 * C23726 + C442 * C48790) *
               C49212 +
           (C2902 * C23725 + C2903 * C23719 + C2522 * C23726 + C2523 * C48790) *
               C49203 +
           (C3775 * C23725 + C3774 * C23719 + C2907 * C23726 + C2906 * C48790) *
               C49188) *
              C48866 * C48849 * C110 -
          ((C2904 * C48790 + C2905 * C23726 + C2906 * C23719 + C2907 * C23725) *
               C49188 +
           (C2525 * C48790 + C2524 * C23726 + C2523 * C23719 + C2522 * C23725) *
               C49203 +
           (C440 * C48790 + C441 * C23726 + C442 * C23719 + C443 * C23725) *
               C49212 +
           (C171 * C48790 + C170 * C23726 + C169 * C23719 + C168 * C23725) *
               C49215) *
              C48866 * C48849 * C111 +
          ((C170 * C23725 + C171 * C23719 + C172 * C23726 + C173 * C48790) *
               C49215 +
           (C441 * C23725 + C440 * C23719 + C439 * C23726 + C438 * C48790) *
               C49212 +
           (C2524 * C23725 + C2525 * C23719 + C2527 * C23726 + C2526 * C48790) *
               C49203 +
           (C2905 * C23725 + C2904 * C23719 +
            (C113 * C2850 + C48877 * C2857) * C23726 +
            (C113 * C2858 + C48877 * C2862) * C48790) *
               C49188) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 +
             (C1544 + C1543 + C1542) * C23726 +
             (C1541 + C1540 + C1539) * C48790) *
                C48982) *
               C48866 * C259 -
           (((C32665 + C32666 + C32667) * C48790 +
             (C32668 + C32669 + C32670) * C23726 +
             (C17313 + C17312 + C17311) * C23719 +
             (C17310 + C17309 + C17308) * C23725) *
                C48982 +
            ((C1341 + C1342 + C1343) * C48790 +
             (C1344 + C1345 + C1346) * C23726 +
             (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C23719 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C23725) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C1346 + C1345 + C1344) * C23725 +
             (C1343 + C1342 + C1341) * C23719 +
             (C1340 + C1339 + C1338) * C23726 +
             (C1337 + C1336 + C1335) * C48790) *
                C31302 +
            ((C32670 + C32669 + C32668) * C23725 +
             (C32667 + C32666 + C32665) * C23719 +
             (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
              C1086 * C1960 + C49172 * C1965) *
                 C23726 +
             (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
              C1086 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 +
             (C1539 + C1540 + C1541) * C23719 +
             (C1542 + C1543 + C1544) * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C2900 * C22513 + C2901 * C49213 + C443 * C22514 + C442 * C49206 +
             C441 * C22515 + C440 * C49193 + C439 * C22516 + C438 * C49176) *
                C48982) *
               C48866 * C259 -
           ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
             C2700 * C49206 + C2701 * C22514 + C3343 * C49213 +
             C3342 * C22513) *
                C48982 +
            (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
             C310 * C49206 + C311 * C22514 +
             (C113 * C277 + C48877 * C285) * C49213 +
             (C113 * C267 + C48877 * C278) * C22513) *
                C31302) *
               C48866 * C49167) *
              C261 +
          (((C311 * C22513 + C310 * C49213 + C309 * C22514 + C308 * C49206 +
             C307 * C22515 + C306 * C49193 + C305 * C22516 + C304 * C49176) *
                C31302 +
            (C2701 * C22513 + C2700 * C49213 + C2699 * C22514 + C2698 * C49206 +
             C5226 * C22515 + C5225 * C49193 +
             (C113 * C701 + C48877 * C710) * C22516 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C436 * C49176 + C437 * C22516 + C438 * C49193 + C439 * C22515 +
             C440 * C49206 + C441 * C22514 + C442 * C49213 + C443 * C22513) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C23725 +
             (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
             C169 * C48790) *
                C49215 +
            (C2900 * C23725 + C2901 * C23719 + C443 * C23726 + C442 * C48790) *
                C49212 +
            (C2902 * C23725 + C2903 * C23719 + C2522 * C23726 +
             C2523 * C48790) *
                C49203 +
            (C3775 * C23725 + C3774 * C23719 + C2907 * C23726 +
             C2906 * C48790) *
                C49188) *
               C48866 * C259 -
           ((C20408 * C48790 + C20409 * C23726 + C18261 * C23719 +
             C18260 * C23725) *
                C49188 +
            (C2696 * C48790 + C2697 * C23726 + C3345 * C23719 +
             C3344 * C23725) *
                C49203 +
            (C2700 * C48790 + C2701 * C23726 + C3343 * C23719 +
             C3342 * C23725) *
                C49212 +
            (C310 * C48790 + C311 * C23726 +
             (C113 * C277 + C48877 * C285) * C23719 +
             (C113 * C267 + C48877 * C278) * C23725) *
                C49215) *
               C48866 * C49167) *
              C261 +
          (((C311 * C23725 + C310 * C23719 + C309 * C23726 + C308 * C48790) *
                C49215 +
            (C2701 * C23725 + C2700 * C23719 + C2699 * C23726 +
             C2698 * C48790) *
                C49212 +
            (C2697 * C23725 + C2696 * C23719 + C2695 * C23726 +
             C2694 * C48790) *
                C49203 +
            (C20409 * C23725 + C20408 * C23719 +
             (C113 * C3315 + C48877 * C3320) * C23726 +
             (C113 * C3321 + C48877 * C3324) * C48790) *
                C49188) *
               C48866 * C49167 -
           ((C2904 * C48790 + C2905 * C23726 + C2906 * C23719 +
             C2907 * C23725) *
                C49188 +
            (C2525 * C48790 + C2524 * C23726 + C2523 * C23719 +
             C2522 * C23725) *
                C49203 +
            (C440 * C48790 + C441 * C23726 + C442 * C23719 + C443 * C23725) *
                C49212 +
            (C171 * C48790 + C170 * C23726 + C169 * C23719 + C168 * C23725) *
                C49215) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C393 -
           (((C16881 + C16880 + C16879) * C48790 +
             (C16878 + C16877 + C16876) * C23726 +
             (C16875 + C16874 + C16873) * C23719 +
             (C16872 + C16871 + C16870) * C23725) *
                C48982 +
            (C32871 * C48790 + C32872 * C23726 +
             (C16869 + C16868 + C16867) * C23719 +
             (C16866 + C16865 + C16864) * C23725) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C32869 * C23725 + C32870 * C23719 +
             (C1538 + C1537 + C1536) * C23726 +
             (C1535 + C1534 + C1533) * C48790) *
                C31302 +
            ((C16876 + C16877 + C16878) * C23725 +
             (C16879 + C16880 + C16881) * C23719 +
             (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
              C1086 * C2377 + C49172 * C2387) *
                 C23726 +
             (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
              C1086 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 + C2524 * C22515 +
             C2523 * C49206 + C2522 * C22514 + C2903 * C49213 +
             C2902 * C22513) *
                C48982 +
            (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 + C31566 +
             C31565) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C31573 + C31574 + C31575 + C31576 + C31577 + C31578 + C31579 +
             C31580) *
                C31302 +
            (C2522 * C22513 + C2523 * C49213 + C2524 * C22514 + C2525 * C49206 +
             C2527 * C22515 + C2526 * C49193 +
             (C113 * C952 + C48877 * C961) * C22516 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C23725 +
             (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
             C169 * C48790) *
                C49215 +
            (C34303 + C34304 + C34305 + C34306) * C49212 +
            (C34307 + C34308 + C34309 + C34310) * C49203 +
            (C34311 + C34312 + C34313 + C34314) * C49188) *
               C393 -
           ((C18013 * C48790 + C18012 * C23726 + C18011 * C23719 +
             C18010 * C23725) *
                C49188 +
            (C34314 + C34313 + C34312 + C34311) * C49203 +
            (C34310 + C34309 + C34308 + C34307) * C49212 +
            (C34306 + C34305 + C34304 + C34303) * C49215) *
               C49169) *
              C48849 * C261 +
          (((C34315 + C34316 + C34317 + C34318) * C49215 +
            (C34319 + C34320 + C34321 + C34322) * C49212 +
            (C34323 + C34324 + C34325 + C34326) * C49203 +
            (C18012 * C23725 + C18013 * C23719 +
             (C113 * C3753 + C48877 * C3758) * C23726 +
             (C113 * C3759 + C48877 * C3762) * C48790) *
                C49188) *
               C49169 -
           ((C34326 + C34325 + C34324 + C34323) * C49188 +
            (C34322 + C34321 + C34320 + C34319) * C49203 +
            (C34318 + C34317 + C34316 + C34315) * C49212 +
            (C171 * C48790 + C170 * C23726 + C169 * C23719 + C168 * C23725) *
                C49215) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C48866 * C525 -
           (((C32665 + C32666 + C32667) * C48790 +
             (C32668 + C32669 + C32670) * C23726 +
             (C17313 + C17312 + C17311) * C23719 +
             (C17310 + C17309 + C17308) * C23725) *
                C48982 +
            ((C1341 + C1342 + C1343) * C48790 +
             (C1344 + C1345 + C1346) * C23726 +
             (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C23719 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C23725) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C1346 + C1345 + C1344) * C23725 +
             (C1343 + C1342 + C1341) * C23719 +
             (C1340 + C1339 + C1338) * C23726 +
             (C1337 + C1336 + C1335) * C48790) *
                C31302 +
            ((C32670 + C32669 + C32668) * C23725 +
             (C32667 + C32666 + C32665) * C23719 +
             (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
              C1086 * C1960 + C49172 * C1965) *
                 C23726 +
             (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
              C1086 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C48866 * C525 -
           ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
             C2700 * C49206 + C2701 * C22514 + C3343 * C49213 +
             C3342 * C22513) *
                C48982 +
            (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
             C310 * C49206 + C311 * C22514 +
             (C113 * C277 + C48877 * C285) * C49213 +
             (C113 * C267 + C48877 * C278) * C22513) *
                C31302) *
               C48866 * C49167) *
              C527 +
          (((C311 * C22513 + C310 * C49213 + C309 * C22514 + C308 * C49206 +
             C307 * C22515 + C306 * C49193 + C305 * C22516 + C304 * C49176) *
                C31302 +
            (C2701 * C22513 + C2700 * C49213 + C2699 * C22514 + C2698 * C49206 +
             C5226 * C22515 + C5225 * C49193 +
             (C113 * C701 + C48877 * C710) * C22516 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C23725 +
             (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
             C169 * C48790) *
                C49215 +
            (C34303 + C34304 + C34305 + C34306) * C49212 +
            (C34307 + C34308 + C34309 + C34310) * C49203 +
            (C34311 + C34312 + C34313 + C34314) * C49188) *
               C48866 * C525 -
           ((C20408 * C48790 + C20409 * C23726 + C18261 * C23719 +
             C18260 * C23725) *
                C49188 +
            (C2696 * C48790 + C2697 * C23726 + C3345 * C23719 +
             C3344 * C23725) *
                C49203 +
            (C2700 * C48790 + C2701 * C23726 + C3343 * C23719 +
             C3342 * C23725) *
                C49212 +
            (C310 * C48790 + C311 * C23726 +
             (C113 * C277 + C48877 * C285) * C23719 +
             (C113 * C267 + C48877 * C278) * C23725) *
                C49215) *
               C48866 * C49167) *
              C527 +
          (((C311 * C23725 + C310 * C23719 + C309 * C23726 + C308 * C48790) *
                C49215 +
            (C2701 * C23725 + C2700 * C23719 + C2699 * C23726 +
             C2698 * C48790) *
                C49212 +
            (C2697 * C23725 + C2696 * C23719 + C2695 * C23726 +
             C2694 * C48790) *
                C49203 +
            (C20409 * C23725 + C20408 * C23719 +
             (C113 * C3315 + C48877 * C3320) * C23726 +
             (C113 * C3321 + C48877 * C3324) * C48790) *
                C49188) *
               C48866 * C49167 -
           ((C34326 + C34325 + C34324 + C34323) * C49188 +
            (C34322 + C34321 + C34320 + C34319) * C49203 +
            (C34318 + C34317 + C34316 + C34315) * C49212 +
            (C171 * C48790 + C170 * C23726 + C169 * C23719 + C168 * C23725) *
                C49215) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C23725 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C23719 +
            (C1127 + C1128 + C1129) * C23726 +
            (C1130 + C1131 + C1132) * C48790) *
               C31302 +
           ((C16864 + C16865 + C16866) * C23725 +
            (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
            C32870 * C48790) *
               C48982) *
              C48866 * C591 -
          (((C32665 + C32666 + C32667) * C48790 +
            (C32668 + C32669 + C32670) * C23726 +
            (C17313 + C17312 + C17311) * C23719 +
            (C17310 + C17309 + C17308) * C23725) *
               C48982 +
           ((C1341 + C1342 + C1343) * C48790 +
            (C1344 + C1345 + C1346) * C23726 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C23719 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C23725) *
               C31302) *
              C48866 * C592 +
          (((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
             C1086 * C1800 + C49172 * C1803) *
                C23725 +
            (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
             C1086 * C1804 + C49172 * C1809) *
                C23719 +
            (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
             C1086 * C1801 + C49172 * C1805) *
                C23726 +
            (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
             C1086 * C1806 + C49172 * C1810) *
                C48790) *
               C31302 +
           ((C1084 * C1494 + C49207 * C1501 + C1085 * C1958 + C49195 * C1961 +
             C1086 * C9392 + C49172 * C9395) *
                C23725 +
            (C1084 * C1500 + C49207 * C1506 + C1085 * C1962 + C49195 * C1967 +
             C1086 * C9394 + C49172 * C9398) *
                C23719 +
            (C1084 * C1493 + C49207 * C1499 + C1085 * C1959 + C49195 * C1963 +
             C1086 * C9393 + C49172 * C9396) *
                C23726 +
            (C1084 * C1498 + C49207 * C1505 + C1085 * C1964 + C49195 * C1968 +
             C1086 * C9397 + C49172 * C9399) *
                C48790) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C22513 +
            (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
            C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
            C173 * C49176) *
               C31302 +
           (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
            C31572) *
               C48982) *
              C48866 * C591 -
          ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
            C2700 * C49206 + C2701 * C22514 + C3343 * C49213 + C3342 * C22513) *
               C48982 +
           (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
            C310 * C49206 + C311 * C22514 +
            (C113 * C277 + C48877 * C285) * C49213 +
            (C113 * C267 + C48877 * C278) * C22513) *
               C31302) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C22513 +
            (C113 * C601 + C48877 * C610) * C49213 +
            (C113 * C596 + C48877 * C602) * C22514 +
            (C113 * C603 + C48877 * C611) * C49206 +
            (C113 * C597 + C48877 * C604) * C22515 +
            (C113 * C605 + C48877 * C612) * C49193 +
            (C113 * C598 + C48877 * C606) * C22516 +
            (C113 * C607 + C48877 * C613) * C49176) *
               C31302 +
           ((C113 * C1494 + C48877 * C1501) * C22513 +
            (C113 * C1500 + C48877 * C1506) * C49213 +
            (C113 * C1493 + C48877 * C1499) * C22514 +
            (C113 * C1498 + C48877 * C1505) * C49206 +
            (C113 * C1492 + C48877 * C1497) * C22515 +
            (C113 * C1496 + C48877 * C1504) * C49193 +
            (C113 * C1495 + C48877 * C1502) * C22516 +
            (C113 * C1503 + C48877 * C1507) * C49176) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C23725 +
            (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
            C169 * C48790) *
               C49215 +
           (C34303 + C34304 + C34305 + C34306) * C49212 +
           (C34307 + C34308 + C34309 + C34310) * C49203 +
           (C34311 + C34312 + C34313 + C34314) * C49188) *
              C48866 * C591 -
          ((C20408 * C48790 + C20409 * C23726 + C18261 * C23719 +
            C18260 * C23725) *
               C49188 +
           (C2696 * C48790 + C2697 * C23726 + C3345 * C23719 + C3344 * C23725) *
               C49203 +
           (C2700 * C48790 + C2701 * C23726 + C3343 * C23719 + C3342 * C23725) *
               C49212 +
           (C310 * C48790 + C311 * C23726 +
            (C113 * C277 + C48877 * C285) * C23719 +
            (C113 * C267 + C48877 * C278) * C23725) *
               C49215) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C23725 +
            (C113 * C601 + C48877 * C610) * C23719 +
            (C113 * C596 + C48877 * C602) * C23726 +
            (C113 * C603 + C48877 * C611) * C48790) *
               C49215 +
           ((C113 * C1494 + C48877 * C1501) * C23725 +
            (C113 * C1500 + C48877 * C1506) * C23719 +
            (C113 * C1493 + C48877 * C1499) * C23726 +
            (C113 * C1498 + C48877 * C1505) * C48790) *
               C49212 +
           ((C113 * C2373 + C48877 * C2379) * C23725 +
            (C113 * C2381 + C48877 * C2391) * C23719 +
            (C113 * C2375 + C48877 * C2383) * C23726 +
            (C113 * C2385 + C48877 * C2393) * C48790) *
               C49203 +
           ((C113 * C10274 + C48877 * C10277) * C23725 +
            (C113 * C10276 + C48877 * C10280) * C23719 +
            (C113 * C10275 + C48877 * C10278) * C23726 +
            (C113 * C10279 + C48877 * C10281) * C48790) *
               C49188) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[158] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                       C49195 * C278 + C1086 * C595 + C49172 * C600) *
                          C23725 +
                      (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                       C49195 * C285 + C1086 * C601 + C49172 * C610) *
                          C23719 +
                      (C1127 + C1128 + C1129) * C23726 +
                      (C1130 + C1131 + C1132) * C48790) *
                         C31302 +
                     ((C16864 + C16865 + C16866) * C23725 +
                      (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                      C32870 * C48790) *
                         C48982) *
                        C393 -
                    (((C16881 + C16880 + C16879) * C48790 +
                      (C16878 + C16877 + C16876) * C23726 +
                      (C16875 + C16874 + C16873) * C23719 +
                      (C16872 + C16871 + C16870) * C23725) *
                         C48982 +
                     (C32871 * C48790 + C32872 * C23726 +
                      (C16869 + C16868 + C16867) * C23719 +
                      (C16866 + C16865 + C16864) * C23725) *
                         C31302) *
                        C49169) *
                       C525 +
                   ((((C17308 + C17309 + C17310) * C23725 +
                      (C17311 + C17312 + C17313) * C23719 +
                      (C32670 + C32669 + C32668) * C23726 +
                      (C32667 + C32666 + C32665) * C48790) *
                         C31302 +
                     ((C17314 + C17315 + C17316) * C23725 +
                      (C17317 + C17318 + C17319) * C23719 +
                      (C1084 * C2374 + C49207 * C2382 + C1085 * C2375 +
                       C49195 * C2383 + C1086 * C10124 + C49172 * C10125) *
                          C23726 +
                      (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 +
                       C49195 * C2393 + C1086 * C10126 + C49172 * C10127) *
                          C48790) *
                         C48982) *
                        C49169 -
                    (((C32665 + C32666 + C32667) * C48790 +
                      (C32668 + C32669 + C32670) * C23726 +
                      (C17313 + C17312 + C17311) * C23719 +
                      (C17310 + C17309 + C17308) * C23725) *
                         C48982 +
                     ((C1341 + C1342 + C1343) * C48790 +
                      (C1344 + C1345 + C1346) * C23726 +
                      (C1086 * C1302 + C49172 * C1308 + C1085 * C601 +
                       C49195 * C610 + C1084 * C277 + C49207 * C285) *
                          C23719 +
                      (C1086 * C1296 + C49172 * C1303 + C1085 * C595 +
                       C49195 * C600 + C1084 * C267 + C49207 * C278) *
                          C23725) *
                         C31302) *
                        C393) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C22513 +
                      (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                      C169 * C49206 + C170 * C22515 + C171 * C49193 +
                      C172 * C22516 + C173 * C49176) *
                         C31302 +
                     (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                      C31571 + C31572) *
                         C48982) *
                        C393 -
                    ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 +
                      C2524 * C22515 + C2523 * C49206 + C2522 * C22514 +
                      C2903 * C49213 + C2902 * C22513) *
                         C48982 +
                     (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                      C31566 + C31565) *
                         C31302) *
                        C49169) *
                       C525 +
                   (((C31939 + C31940 + C31941 + C31942 + C31943 + C31944 +
                      C31945 + C31946) *
                         C31302 +
                     (C3344 * C22513 + C3345 * C49213 + C2697 * C22514 +
                      C2696 * C49206 + C2695 * C22515 + C2694 * C49193 +
                      (C113 * C2673 + C48877 * C2674) * C22516 +
                      (C113 * C2675 + C48877 * C2676) * C49176) *
                         C48982) *
                        C49169 -
                    ((C31946 + C31945 + C31944 + C31943 + C31942 + C31941 +
                      C31940 + C31939) *
                         C48982 +
                     (C306 * C49176 + C307 * C22516 + C308 * C49193 +
                      C309 * C22515 + C310 * C49206 + C311 * C22514 +
                      (C113 * C277 + C48877 * C285) * C49213 +
                      (C113 * C267 + C48877 * C278) * C22513) *
                         C31302) *
                        C393) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C23725 +
                      (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
                      C169 * C48790) *
                         C49215 +
                     (C34303 + C34304 + C34305 + C34306) * C49212 +
                     (C34307 + C34308 + C34309 + C34310) * C49203 +
                     (C34311 + C34312 + C34313 + C34314) * C49188) *
                        C393 -
                    ((C18013 * C48790 + C18012 * C23726 + C18011 * C23719 +
                      C18010 * C23725) *
                         C49188 +
                     (C34314 + C34313 + C34312 + C34311) * C49203 +
                     (C34310 + C34309 + C34308 + C34307) * C49212 +
                     (C34306 + C34305 + C34304 + C34303) * C49215) *
                        C49169) *
                       C525 +
                   (((C34685 + C34686 + C34687 + C34688) * C49215 +
                     (C34689 + C34690 + C34691 + C34692) * C49212 +
                     (C34693 + C34694 + C34695 + C34696) * C49203 +
                     (C18262 * C23725 + C18263 * C23719 +
                      (C113 * C17895 + C48877 * C17896) * C23726 +
                      (C113 * C17897 + C48877 * C17898) * C48790) *
                         C49188) *
                        C49169 -
                    ((C34696 + C34695 + C34694 + C34693) * C49188 +
                     (C34692 + C34691 + C34690 + C34689) * C49203 +
                     (C34688 + C34687 + C34686 + C34685) * C49212 +
                     (C310 * C48790 + C311 * C23726 +
                      (C113 * C277 + C48877 * C285) * C23719 +
                      (C113 * C267 + C48877 * C278) * C23725) *
                         C49215) *
                        C393) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C799 -
           (((C16881 + C16880 + C16879) * C48790 +
             (C16878 + C16877 + C16876) * C23726 +
             (C16875 + C16874 + C16873) * C23719 +
             (C16872 + C16871 + C16870) * C23725) *
                C48982 +
            (C32871 * C48790 + C32872 * C23726 +
             (C16869 + C16868 + C16867) * C23719 +
             (C16866 + C16865 + C16864) * C23725) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C32869 * C23725 + C32870 * C23719 +
             (C1538 + C1537 + C1536) * C23726 +
             (C1535 + C1534 + C1533) * C48790) *
                C31302 +
            ((C16876 + C16877 + C16878) * C23725 +
             (C16879 + C16880 + C16881) * C23719 +
             (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
              C1086 * C2377 + C49172 * C2387) *
                 C23726 +
             (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
              C1086 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 + C2524 * C22515 +
             C2523 * C49206 + C2522 * C22514 + C2903 * C49213 +
             C2902 * C22513) *
                C48982 +
            (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 + C31566 +
             C31565) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C31573 + C31574 + C31575 + C31576 + C31577 + C31578 + C31579 +
             C31580) *
                C31302 +
            (C2522 * C22513 + C2523 * C49213 + C2524 * C22514 + C2525 * C49206 +
             C2527 * C22515 + C2526 * C49193 +
             (C113 * C952 + C48877 * C961) * C22516 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C23725 +
             (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
             C169 * C48790) *
                C49215 +
            (C34303 + C34304 + C34305 + C34306) * C49212 +
            (C34307 + C34308 + C34309 + C34310) * C49203 +
            (C34311 + C34312 + C34313 + C34314) * C49188) *
               C799 -
           ((C18013 * C48790 + C18012 * C23726 + C18011 * C23719 +
             C18010 * C23725) *
                C49188 +
            (C34314 + C34313 + C34312 + C34311) * C49203 +
            (C34310 + C34309 + C34308 + C34307) * C49212 +
            (C34306 + C34305 + C34304 + C34303) * C49215) *
               C49169) *
              C48849 * C527 +
          (((C34315 + C34316 + C34317 + C34318) * C49215 +
            (C34319 + C34320 + C34321 + C34322) * C49212 +
            (C34323 + C34324 + C34325 + C34326) * C49203 +
            (C18012 * C23725 + C18013 * C23719 +
             (C113 * C3753 + C48877 * C3758) * C23726 +
             (C113 * C3759 + C48877 * C3762) * C48790) *
                C49188) *
               C49169 -
           ((C34326 + C34325 + C34324 + C34323) * C49188 +
            (C34322 + C34321 + C34320 + C34319) * C49203 +
            (C34318 + C34317 + C34316 + C34315) * C49212 +
            (C171 * C48790 + C170 * C23726 + C169 * C23719 + C168 * C23725) *
                C49215) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                       C49195 * C278 + C1086 * C595 + C49172 * C600) *
                          C23725 +
                      (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                       C49195 * C285 + C1086 * C601 + C49172 * C610) *
                          C23719 +
                      (C1127 + C1128 + C1129) * C23726 +
                      (C1130 + C1131 + C1132) * C48790) *
                         C31302 +
                     ((C16864 + C16865 + C16866) * C23725 +
                      (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                      C32870 * C48790) *
                         C48982) *
                        C799 -
                    (((C16881 + C16880 + C16879) * C48790 +
                      (C16878 + C16877 + C16876) * C23726 +
                      (C16875 + C16874 + C16873) * C23719 +
                      (C16872 + C16871 + C16870) * C23725) *
                         C48982 +
                     (C32871 * C48790 + C32872 * C23726 +
                      (C16869 + C16868 + C16867) * C23719 +
                      (C16866 + C16865 + C16864) * C23725) *
                         C31302) *
                        C49169) *
                       C259 +
                   ((((C17308 + C17309 + C17310) * C23725 +
                      (C17311 + C17312 + C17313) * C23719 +
                      (C32670 + C32669 + C32668) * C23726 +
                      (C32667 + C32666 + C32665) * C48790) *
                         C31302 +
                     ((C17314 + C17315 + C17316) * C23725 +
                      (C17317 + C17318 + C17319) * C23719 +
                      (C1084 * C2374 + C49207 * C2382 + C1085 * C2375 +
                       C49195 * C2383 + C1086 * C10124 + C49172 * C10125) *
                          C23726 +
                      (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 +
                       C49195 * C2393 + C1086 * C10126 + C49172 * C10127) *
                          C48790) *
                         C48982) *
                        C49169 -
                    (((C32665 + C32666 + C32667) * C48790 +
                      (C32668 + C32669 + C32670) * C23726 +
                      (C17313 + C17312 + C17311) * C23719 +
                      (C17310 + C17309 + C17308) * C23725) *
                         C48982 +
                     ((C1341 + C1342 + C1343) * C48790 +
                      (C1344 + C1345 + C1346) * C23726 +
                      (C1086 * C1302 + C49172 * C1308 + C1085 * C601 +
                       C49195 * C610 + C1084 * C277 + C49207 * C285) *
                          C23719 +
                      (C1086 * C1296 + C49172 * C1303 + C1085 * C595 +
                       C49195 * C600 + C1084 * C267 + C49207 * C278) *
                          C23725) *
                         C31302) *
                        C799) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C22513 +
                      (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                      C169 * C49206 + C170 * C22515 + C171 * C49193 +
                      C172 * C22516 + C173 * C49176) *
                         C31302 +
                     (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                      C31571 + C31572) *
                         C48982) *
                        C799 -
                    ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 +
                      C2524 * C22515 + C2523 * C49206 + C2522 * C22514 +
                      C2903 * C49213 + C2902 * C22513) *
                         C48982 +
                     (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                      C31566 + C31565) *
                         C31302) *
                        C49169) *
                       C259 +
                   (((C31939 + C31940 + C31941 + C31942 + C31943 + C31944 +
                      C31945 + C31946) *
                         C31302 +
                     (C3344 * C22513 + C3345 * C49213 + C2697 * C22514 +
                      C2696 * C49206 + C2695 * C22515 + C2694 * C49193 +
                      (C113 * C2673 + C48877 * C2674) * C22516 +
                      (C113 * C2675 + C48877 * C2676) * C49176) *
                         C48982) *
                        C49169 -
                    ((C31946 + C31945 + C31944 + C31943 + C31942 + C31941 +
                      C31940 + C31939) *
                         C48982 +
                     (C306 * C49176 + C307 * C22516 + C308 * C49193 +
                      C309 * C22515 + C310 * C49206 + C311 * C22514 +
                      (C113 * C277 + C48877 * C285) * C49213 +
                      (C113 * C267 + C48877 * C278) * C22513) *
                         C31302) *
                        C799) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C23725 +
                      (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
                      C169 * C48790) *
                         C49215 +
                     (C34303 + C34304 + C34305 + C34306) * C49212 +
                     (C34307 + C34308 + C34309 + C34310) * C49203 +
                     (C34311 + C34312 + C34313 + C34314) * C49188) *
                        C799 -
                    ((C18013 * C48790 + C18012 * C23726 + C18011 * C23719 +
                      C18010 * C23725) *
                         C49188 +
                     (C34314 + C34313 + C34312 + C34311) * C49203 +
                     (C34310 + C34309 + C34308 + C34307) * C49212 +
                     (C34306 + C34305 + C34304 + C34303) * C49215) *
                        C49169) *
                       C259 +
                   (((C34685 + C34686 + C34687 + C34688) * C49215 +
                     (C34689 + C34690 + C34691 + C34692) * C49212 +
                     (C34693 + C34694 + C34695 + C34696) * C49203 +
                     (C18262 * C23725 + C18263 * C23719 +
                      (C113 * C17895 + C48877 * C17896) * C23726 +
                      (C113 * C17897 + C48877 * C17898) * C48790) *
                         C49188) *
                        C49169 -
                    ((C34696 + C34695 + C34694 + C34693) * C49188 +
                     (C34692 + C34691 + C34690 + C34689) * C49203 +
                     (C34688 + C34687 + C34686 + C34685) * C49212 +
                     (C310 * C48790 + C311 * C23726 +
                      (C113 * C277 + C48877 * C285) * C23719 +
                      (C113 * C267 + C48877 * C278) * C23725) *
                         C49215) *
                        C799) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[161] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                      C49195 * C278 + C1086 * C595 + C49172 * C600) *
                         C23725 +
                     (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                      C49195 * C285 + C1086 * C601 + C49172 * C610) *
                         C23719 +
                     (C1127 + C1128 + C1129) * C23726 +
                     (C1130 + C1131 + C1132) * C48790) *
                        C31302 +
                    ((C16864 + C16865 + C16866) * C23725 +
                     (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                     C32870 * C48790) *
                        C48982) *
                       C945 -
                   (((C16881 + C16880 + C16879) * C48790 +
                     (C16878 + C16877 + C16876) * C23726 +
                     (C16875 + C16874 + C16873) * C23719 +
                     (C16872 + C16871 + C16870) * C23725) *
                        C48982 +
                    (C32871 * C48790 + C32872 * C23726 +
                     (C16869 + C16868 + C16867) * C23719 +
                     (C16866 + C16865 + C16864) * C23725) *
                        C31302) *
                       C946 +
                   ((C17736 * C23725 + C17737 * C23719 +
                     (C16876 + C16877 + C16878) * C23726 +
                     (C16879 + C16880 + C16881) * C48790) *
                        C31302 +
                    ((C17743 + C17742 + C17741) * C23725 +
                     (C17740 + C17739 + C17738) * C23719 +
                     (C1084 * C2848 + C49207 * C2854 + C1085 * C3314 +
                      C49195 * C3318 + C1086 * C10275 + C49172 * C10278) *
                         C23726 +
                     (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 +
                      C49195 * C3323 + C1086 * C10279 + C49172 * C10281) *
                         C48790) *
                        C48982) *
                       C947) *
                  C48849 * C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C48877 * C126) * C22513 +
                     (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                     C169 * C49206 + C170 * C22515 + C171 * C49193 +
                     C172 * C22516 + C173 * C49176) *
                        C31302 +
                    (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                     C31571 + C31572) *
                        C48982) *
                       C945 -
                   ((C32305 + C32306 + C32307 + C32308 + C32309 + C32310 +
                     C32311 + C32312) *
                        C48982 +
                    (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                     C31566 + C31565) *
                        C31302) *
                       C946 +
                   ((C32312 + C32311 + C32310 + C32309 + C32308 + C32307 +
                     C32306 + C32305) *
                        C31302 +
                    (C3775 * C22513 + C3774 * C49213 + C2907 * C22514 +
                     C2906 * C49206 + C2905 * C22515 + C2904 * C49193 +
                     (C113 * C2850 + C48877 * C2857) * C22516 +
                     (C113 * C2858 + C48877 * C2862) * C49176) *
                        C48982) *
                       C947) *
                  C48849 * C48815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C48877 * C126) * C23725 +
                     (C113 * C127 + C48877 * C140) * C23719 + C168 * C23726 +
                     C169 * C48790) *
                        C49215 +
                    (C34303 + C34304 + C34305 + C34306) * C49212 +
                    C35063 * C49203 + C35064 * C49188) *
                       C945 -
                   ((C35057 + C35058 + C35059 + C35060) * C49188 +
                    (C34314 + C34313 + C34312 + C34311) * C49203 +
                    (C34310 + C34309 + C34308 + C34307) * C49212 +
                    (C34306 + C34305 + C34304 + C34303) * C49215) *
                       C946 +
                   (C35063 * C49215 + C35064 * C49212 +
                    (C35060 + C35059 + C35058 + C35057) * C49203 +
                    (C18506 * C23725 + C18505 * C23719 +
                     (C113 * C17982 + C48877 * C17985) * C23726 +
                     (C113 * C17986 + C48877 * C17988) * C48790) *
                        C49188) *
                       C947) *
                  C48849 * C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C48877 * C126) * C47919 +
                     (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
                     C169 * C48793 + C170 * C47925 + C171 * C26653) *
                        C48978 +
                    (C2900 * C47919 + C2901 * C48785 + C443 * C47915 +
                     C442 * C48793 + C441 * C47925 + C440 * C26653) *
                        C48985 +
                    (C2902 * C47919 + C2903 * C48785 + C2522 * C47915 +
                     C2523 * C48793 + C2524 * C47925 + C2525 * C26653) *
                        C36778) *
                       C48866 * C48849 * C110 -
                   ((C2526 * C26653 + C2527 * C47925 + C2525 * C48793 +
                     C2524 * C47915 + C2523 * C48785 + C2522 * C47919) *
                        C36778 +
                    (C438 * C26653 + C439 * C47925 + C440 * C48793 +
                     C441 * C47915 + C442 * C48785 + C443 * C47919) *
                        C48985 +
                    (C173 * C26653 + C172 * C47925 + C171 * C48793 +
                     C170 * C47915 + C169 * C48785 + C168 * C47919) *
                        C48978) *
                       C48866 * C48849 * C111 +
                   ((C170 * C47919 + C171 * C48785 + C172 * C47915 +
                     C173 * C48793 + C174 * C47925 + C175 * C26653) *
                        C48978 +
                    (C441 * C47919 + C440 * C48785 + C439 * C47915 +
                     C438 * C48793 + C437 * C47925 + C436 * C26653) *
                        C48985 +
                    (C2524 * C47919 + C2525 * C48785 + C2527 * C47915 +
                     C2526 * C48793 + (C113 * C952 + C48877 * C961) * C47925 +
                     (C113 * C962 + C48877 * C967) * C26653) *
                        C36778) *
                       C48866 * C48849 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C2900 * C47919 + C2901 * C48785 + C443 * C47915 + C442 * C48793 +
             C441 * C47925 + C440 * C26653) *
                C48985 +
            (C2902 * C47919 + C2903 * C48785 + C2522 * C47915 + C2523 * C48793 +
             C2524 * C47925 + C2525 * C26653) *
                C36778) *
               C48866 * C259 -
           ((C2694 * C26653 + C2695 * C47925 + C2696 * C48793 + C2697 * C47915 +
             C3345 * C48785 + C3344 * C47919) *
                C36778 +
            (C2698 * C26653 + C2699 * C47925 + C2700 * C48793 + C2701 * C47915 +
             C3343 * C48785 + C3342 * C47919) *
                C48985 +
            (C308 * C26653 + C309 * C47925 + C310 * C48793 + C311 * C47915 +
             (C113 * C277 + C48877 * C285) * C48785 +
             (C113 * C267 + C48877 * C278) * C47919) *
                C48978) *
               C48866 * C49167) *
              C261 +
          (((C311 * C47919 + C310 * C48785 + C309 * C47915 + C308 * C48793 +
             C307 * C47925 + C306 * C26653) *
                C48978 +
            (C2701 * C47919 + C2700 * C48785 + C2699 * C47915 + C2698 * C48793 +
             C5226 * C47925 + C5225 * C26653) *
                C48985 +
            (C2697 * C47919 + C2696 * C48785 + C2695 * C47915 + C2694 * C48793 +
             (C113 * C2673 + C48877 * C2674) * C47925 +
             (C113 * C2675 + C48877 * C2676) * C26653) *
                C36778) *
               C48866 * C49167 -
           ((C2526 * C26653 + C2527 * C47925 + C2525 * C48793 + C2524 * C47915 +
             C2523 * C48785 + C2522 * C47919) *
                C36778 +
            (C438 * C26653 + C439 * C47925 + C440 * C48793 + C441 * C47915 +
             C442 * C48785 + C443 * C47919) *
                C48985 +
            (C173 * C26653 + C172 * C47925 + C171 * C48793 + C170 * C47915 +
             C169 * C48785 + C168 * C47919) *
                C48978) *
               C48866 * C259) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
            (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
               C393 -
           ((C2904 * C26653 + C2905 * C47925 + C2906 * C48793 + C2907 * C47915 +
             C3774 * C48785 + C3775 * C47919) *
                C36778 +
            (C37083 + C37082 + C37081 + C37080 + C37079 + C37078) * C48985 +
            (C37077 + C37076 + C37075 + C37074 + C37073 + C37072) * C48978) *
               C49169) *
              C48849 * C261 +
          (((C37084 + C37085 + C37086 + C37087 + C37088 + C37089) * C48978 +
            (C37090 + C37091 + C37092 + C37093 + C37094 + C37095) * C48985 +
            (C2907 * C47919 + C2906 * C48785 + C2905 * C47915 + C2904 * C48793 +
             (C113 * C2850 + C48877 * C2857) * C47925 +
             (C113 * C2858 + C48877 * C2862) * C26653) *
                C36778) *
               C49169 -
           ((C37095 + C37094 + C37093 + C37092 + C37091 + C37090) * C36778 +
            (C37089 + C37088 + C37087 + C37086 + C37085 + C37084) * C48985 +
            (C173 * C26653 + C172 * C47925 + C171 * C48793 + C170 * C47915 +
             C169 * C48785 + C168 * C47919) *
                C48978) *
               C393) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
            (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
               C48866 * C525 -
           ((C2694 * C26653 + C2695 * C47925 + C2696 * C48793 + C2697 * C47915 +
             C3345 * C48785 + C3344 * C47919) *
                C36778 +
            (C2698 * C26653 + C2699 * C47925 + C2700 * C48793 + C2701 * C47915 +
             C3343 * C48785 + C3342 * C47919) *
                C48985 +
            (C308 * C26653 + C309 * C47925 + C310 * C48793 + C311 * C47915 +
             (C113 * C277 + C48877 * C285) * C48785 +
             (C113 * C267 + C48877 * C278) * C47919) *
                C48978) *
               C48866 * C49167) *
              C527 +
          (((C311 * C47919 + C310 * C48785 + C309 * C47915 + C308 * C48793 +
             C307 * C47925 + C306 * C26653) *
                C48978 +
            (C2701 * C47919 + C2700 * C48785 + C2699 * C47915 + C2698 * C48793 +
             C5226 * C47925 + C5225 * C26653) *
                C48985 +
            (C2697 * C47919 + C2696 * C48785 + C2695 * C47915 + C2694 * C48793 +
             (C113 * C2673 + C48877 * C2674) * C47925 +
             (C113 * C2675 + C48877 * C2676) * C26653) *
                C36778) *
               C48866 * C49167 -
           ((C37095 + C37094 + C37093 + C37092 + C37091 + C37090) * C36778 +
            (C37089 + C37088 + C37087 + C37086 + C37085 + C37084) * C48985 +
            (C173 * C26653 + C172 * C47925 + C171 * C48793 + C170 * C47915 +
             C169 * C48785 + C168 * C47919) *
                C48978) *
               C48866 * C525) *
              C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C47919 +
            (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
            C169 * C48793 + C170 * C47925 + C171 * C26653) *
               C48978 +
           (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
           (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
              C48866 * C591 -
          ((C2694 * C26653 + C2695 * C47925 + C2696 * C48793 + C2697 * C47915 +
            C3345 * C48785 + C3344 * C47919) *
               C36778 +
           (C2698 * C26653 + C2699 * C47925 + C2700 * C48793 + C2701 * C47915 +
            C3343 * C48785 + C3342 * C47919) *
               C48985 +
           (C308 * C26653 + C309 * C47925 + C310 * C48793 + C311 * C47915 +
            (C113 * C277 + C48877 * C285) * C48785 +
            (C113 * C267 + C48877 * C278) * C47919) *
               C48978) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C47919 +
            (C113 * C601 + C48877 * C610) * C48785 +
            (C113 * C596 + C48877 * C602) * C47915 +
            (C113 * C603 + C48877 * C611) * C48793 +
            (C113 * C597 + C48877 * C604) * C47925 +
            (C113 * C605 + C48877 * C612) * C26653) *
               C48978 +
           ((C113 * C1494 + C48877 * C1501) * C47919 +
            (C113 * C1500 + C48877 * C1506) * C48785 +
            (C113 * C1493 + C48877 * C1499) * C47915 +
            (C113 * C1498 + C48877 * C1505) * C48793 +
            (C113 * C1492 + C48877 * C1497) * C47925 +
            (C113 * C1496 + C48877 * C1504) * C26653) *
               C48985 +
           ((C113 * C2373 + C48877 * C2379) * C47919 +
            (C113 * C2381 + C48877 * C2391) * C48785 +
            (C113 * C2375 + C48877 * C2383) * C47915 +
            (C113 * C2385 + C48877 * C2393) * C48793 +
            (C113 * C2377 + C48877 * C2387) * C47925 +
            (C113 * C2389 + C48877 * C2395) * C26653) *
               C36778) *
              C48866 * C593) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
            (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
               C393 -
           ((C2904 * C26653 + C2905 * C47925 + C2906 * C48793 + C2907 * C47915 +
             C3774 * C48785 + C3775 * C47919) *
                C36778 +
            (C37083 + C37082 + C37081 + C37080 + C37079 + C37078) * C48985 +
            (C37077 + C37076 + C37075 + C37074 + C37073 + C37072) * C48978) *
               C49169) *
              C525 +
          (((C37498 + C37499 + C37500 + C37501 + C37502 + C37503) * C48978 +
            (C37504 + C37505 + C37506 + C37507 + C37508 + C37509) * C48985 +
            (C18260 * C47919 + C18261 * C48785 + C20409 * C47915 +
             C20408 * C48793 + (C113 * C3315 + C48877 * C3320) * C47925 +
             (C113 * C3321 + C48877 * C3324) * C26653) *
                C36778) *
               C49169 -
           ((C37509 + C37508 + C37507 + C37506 + C37505 + C37504) * C36778 +
            (C37503 + C37502 + C37501 + C37500 + C37499 + C37498) * C48985 +
            (C308 * C26653 + C309 * C47925 + C310 * C48793 + C311 * C47915 +
             (C113 * C277 + C48877 * C285) * C48785 +
             (C113 * C267 + C48877 * C278) * C47919) *
                C48978) *
               C393) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
            (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
               C799 -
           ((C2904 * C26653 + C2905 * C47925 + C2906 * C48793 + C2907 * C47915 +
             C3774 * C48785 + C3775 * C47919) *
                C36778 +
            (C37083 + C37082 + C37081 + C37080 + C37079 + C37078) * C48985 +
            (C37077 + C37076 + C37075 + C37074 + C37073 + C37072) * C48978) *
               C49169) *
              C48849 * C527 +
          (((C37084 + C37085 + C37086 + C37087 + C37088 + C37089) * C48978 +
            (C37090 + C37091 + C37092 + C37093 + C37094 + C37095) * C48985 +
            (C2907 * C47919 + C2906 * C48785 + C2905 * C47915 + C2904 * C48793 +
             (C113 * C2850 + C48877 * C2857) * C47925 +
             (C113 * C2858 + C48877 * C2862) * C26653) *
                C36778) *
               C49169 -
           ((C37095 + C37094 + C37093 + C37092 + C37091 + C37090) * C36778 +
            (C37089 + C37088 + C37087 + C37086 + C37085 + C37084) * C48985 +
            (C173 * C26653 + C172 * C47925 + C171 * C48793 + C170 * C47915 +
             C169 * C48785 + C168 * C47919) *
                C48978) *
               C799) *
              C48849 * C49165)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C47919 +
             (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
             C169 * C48793 + C170 * C47925 + C171 * C26653) *
                C48978 +
            (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
            (C37078 + C37079 + C37080 + C37081 + C37082 + C37083) * C36778) *
               C799 -
           ((C2904 * C26653 + C2905 * C47925 + C2906 * C48793 + C2907 * C47915 +
             C3774 * C48785 + C3775 * C47919) *
                C36778 +
            (C37083 + C37082 + C37081 + C37080 + C37079 + C37078) * C48985 +
            (C37077 + C37076 + C37075 + C37074 + C37073 + C37072) * C48978) *
               C49169) *
              C259 +
          (((C37498 + C37499 + C37500 + C37501 + C37502 + C37503) * C48978 +
            (C37504 + C37505 + C37506 + C37507 + C37508 + C37509) * C48985 +
            (C18260 * C47919 + C18261 * C48785 + C20409 * C47915 +
             C20408 * C48793 + (C113 * C3315 + C48877 * C3320) * C47925 +
             (C113 * C3321 + C48877 * C3324) * C26653) *
                C36778) *
               C49169 -
           ((C37509 + C37508 + C37507 + C37506 + C37505 + C37504) * C36778 +
            (C37503 + C37502 + C37501 + C37500 + C37499 + C37498) * C48985 +
            (C308 * C26653 + C309 * C47925 + C310 * C48793 + C311 * C47915 +
             (C113 * C277 + C48877 * C285) * C48785 +
             (C113 * C267 + C48877 * C278) * C47919) *
                C48978) *
               C799) *
              C49167) *
         C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C47919 +
            (C113 * C127 + C48877 * C140) * C48785 + C168 * C47915 +
            C169 * C48793 + C170 * C47925 + C171 * C26653) *
               C48978 +
           (C37072 + C37073 + C37074 + C37075 + C37076 + C37077) * C48985 +
           C37922 * C36778) *
              C945 -
          ((C37913 + C37914 + C37915 + C37916 + C37917 + C37918) * C36778 +
           (C37083 + C37082 + C37081 + C37080 + C37079 + C37078) * C48985 +
           (C37077 + C37076 + C37075 + C37074 + C37073 + C37072) * C48978) *
              C946 +
          (C37922 * C48978 +
           (C37918 + C37917 + C37916 + C37915 + C37914 + C37913) * C48985 +
           (C18010 * C47919 + C18011 * C48785 + C18012 * C47915 +
            C18013 * C48793 + (C113 * C3753 + C48877 * C3758) * C47925 +
            (C113 * C3759 + C48877 * C3762) * C26653) *
               C36778) *
              C947) *
         C48849 * C48815) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C22513 +
            (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
            C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
            C173 * C49176) *
               C31302 +
           (C2900 * C22513 + C2901 * C49213 + C443 * C22514 + C442 * C49206 +
            C441 * C22515 + C440 * C49193 + C439 * C22516 + C438 * C49176) *
               C48982) *
              C48866 * C48849 * C110 -
          ((C436 * C49176 + C437 * C22516 + C438 * C49193 + C439 * C22515 +
            C440 * C49206 + C441 * C22514 + C442 * C49213 + C443 * C22513) *
               C48982 +
           (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
            C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C170 * C22513 + C171 * C49213 + C172 * C22514 + C173 * C49206 +
            C174 * C22515 + C175 * C49193 + C177 * C22516 + C176 * C49176) *
               C31302 +
           (C441 * C22513 + C440 * C49213 + C439 * C22514 + C438 * C49206 +
            C437 * C22515 + C436 * C49193 +
            (C113 * C400 + C48877 * C411) * C22516 +
            (C113 * C412 + C48877 * C418) * C49176) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C23725 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C23719 +
            (C1127 + C1128 + C1129) * C23726 +
            (C1130 + C1131 + C1132) * C48790) *
               C31302 +
           ((C16864 + C16865 + C16866) * C23725 +
            (C16867 + C16868 + C16869) * C23719 +
            (C1544 + C1543 + C1542) * C23726 +
            (C1541 + C1540 + C1539) * C48790) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C1533 + C1534 + C1535) * C48790 +
            (C1536 + C1537 + C1538) * C23726 +
            (C1539 + C1540 + C1541) * C23719 +
            (C1542 + C1543 + C1544) * C23725) *
               C48982 +
           ((C1138 + C1137 + C1136) * C48790 +
            (C1135 + C1134 + C1133) * C23726 +
            (C1132 + C1131 + C1130) * C23719 +
            (C1129 + C1128 + C1127) * C23725) *
               C31302) *
              C48866 * C48849 * C111 +
          ((C1147 * C23725 + C1148 * C23719 + (C1144 + C1143 + C1142) * C23726 +
            (C1141 + C1140 + C1139) * C48790) *
               C31302 +
           ((C1538 + C1537 + C1536) * C23725 +
            (C1535 + C1534 + C1533) * C23719 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C23726 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C48790) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C2900 * C22513 + C2901 * C49213 + C443 * C22514 + C442 * C49206 +
             C441 * C22515 + C440 * C49193 + C439 * C22516 + C438 * C49176) *
                C48982) *
               C48866 * C259 -
           ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
             C2700 * C49206 + C2701 * C22514 + C3343 * C49213 +
             C3342 * C22513) *
                C48982 +
            (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
             C310 * C49206 + C311 * C22514 +
             (C113 * C277 + C48877 * C285) * C49213 +
             (C113 * C267 + C48877 * C278) * C22513) *
                C31302) *
               C48866 * C49167) *
              C261 +
          (((C311 * C22513 + C310 * C49213 + C309 * C22514 + C308 * C49206 +
             C307 * C22515 + C306 * C49193 + C305 * C22516 + C304 * C49176) *
                C31302 +
            (C2701 * C22513 + C2700 * C49213 + C2699 * C22514 + C2698 * C49206 +
             C5226 * C22515 + C5225 * C49193 +
             (C113 * C701 + C48877 * C710) * C22516 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C436 * C49176 + C437 * C22516 + C438 * C49193 + C439 * C22515 +
             C440 * C49206 + C441 * C22514 + C442 * C49213 + C443 * C22513) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 +
             (C1544 + C1543 + C1542) * C23726 +
             (C1541 + C1540 + C1539) * C48790) *
                C48982) *
               C48866 * C259 -
           (((C32665 + C32666 + C32667) * C48790 +
             (C32668 + C32669 + C32670) * C23726 +
             (C17313 + C17312 + C17311) * C23719 +
             (C17310 + C17309 + C17308) * C23725) *
                C48982 +
            ((C1341 + C1342 + C1343) * C48790 +
             (C1344 + C1345 + C1346) * C23726 +
             (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C23719 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C23725) *
                C31302) *
               C48866 * C49167) *
              C261 +
          ((((C1346 + C1345 + C1344) * C23725 +
             (C1343 + C1342 + C1341) * C23719 +
             (C1340 + C1339 + C1338) * C23726 +
             (C1337 + C1336 + C1335) * C48790) *
                C31302 +
            ((C32670 + C32669 + C32668) * C23725 +
             (C32667 + C32666 + C32665) * C23719 +
             (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
              C1086 * C1960 + C49172 * C1965) *
                 C23726 +
             (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
              C1086 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 +
             (C1539 + C1540 + C1541) * C23719 +
             (C1542 + C1543 + C1544) * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 + C2524 * C22515 +
             C2523 * C49206 + C2522 * C22514 + C2903 * C49213 +
             C2902 * C22513) *
                C48982 +
            (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 + C31566 +
             C31565) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C31573 + C31574 + C31575 + C31576 + C31577 + C31578 + C31579 +
             C31580) *
                C31302 +
            (C2522 * C22513 + C2523 * C49213 + C2524 * C22514 + C2525 * C49206 +
             C2527 * C22515 + C2526 * C49193 +
             (C113 * C952 + C48877 * C961) * C22516 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C393 -
           (((C16881 + C16880 + C16879) * C48790 +
             (C16878 + C16877 + C16876) * C23726 +
             (C16875 + C16874 + C16873) * C23719 +
             (C16872 + C16871 + C16870) * C23725) *
                C48982 +
            (C32871 * C48790 + C32872 * C23726 +
             (C16869 + C16868 + C16867) * C23719 +
             (C16866 + C16865 + C16864) * C23725) *
                C31302) *
               C49169) *
              C48849 * C261 +
          (((C32869 * C23725 + C32870 * C23719 +
             (C1538 + C1537 + C1536) * C23726 +
             (C1535 + C1534 + C1533) * C48790) *
                C31302 +
            ((C16876 + C16877 + C16878) * C23725 +
             (C16879 + C16880 + C16881) * C23719 +
             (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
              C1086 * C2377 + C49172 * C2387) *
                 C23726 +
             (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
              C1086 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C48866 * C525 -
           ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
             C2700 * C49206 + C2701 * C22514 + C3343 * C49213 +
             C3342 * C22513) *
                C48982 +
            (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
             C310 * C49206 + C311 * C22514 +
             (C113 * C277 + C48877 * C285) * C49213 +
             (C113 * C267 + C48877 * C278) * C22513) *
                C31302) *
               C48866 * C49167) *
              C527 +
          (((C311 * C22513 + C310 * C49213 + C309 * C22514 + C308 * C49206 +
             C307 * C22515 + C306 * C49193 + C305 * C22516 + C304 * C49176) *
                C31302 +
            (C2701 * C22513 + C2700 * C49213 + C2699 * C22514 + C2698 * C49206 +
             C5226 * C22515 + C5225 * C49193 +
             (C113 * C701 + C48877 * C710) * C22516 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C48866 * C525 -
           (((C32665 + C32666 + C32667) * C48790 +
             (C32668 + C32669 + C32670) * C23726 +
             (C17313 + C17312 + C17311) * C23719 +
             (C17310 + C17309 + C17308) * C23725) *
                C48982 +
            ((C1341 + C1342 + C1343) * C48790 +
             (C1344 + C1345 + C1346) * C23726 +
             (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
              C1084 * C277 + C49207 * C285) *
                 C23719 +
             (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
              C1084 * C267 + C49207 * C278) *
                 C23725) *
                C31302) *
               C48866 * C49167) *
              C527 +
          ((((C1346 + C1345 + C1344) * C23725 +
             (C1343 + C1342 + C1341) * C23719 +
             (C1340 + C1339 + C1338) * C23726 +
             (C1337 + C1336 + C1335) * C48790) *
                C31302 +
            ((C32670 + C32669 + C32668) * C23725 +
             (C32667 + C32666 + C32665) * C23719 +
             (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
              C1086 * C1960 + C49172 * C1965) *
                 C23726 +
             (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
              C1086 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C22513 +
            (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
            C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
            C173 * C49176) *
               C31302 +
           (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
            C31572) *
               C48982) *
              C48866 * C591 -
          ((C5225 * C49176 + C5226 * C22516 + C2698 * C49193 + C2699 * C22515 +
            C2700 * C49206 + C2701 * C22514 + C3343 * C49213 + C3342 * C22513) *
               C48982 +
           (C306 * C49176 + C307 * C22516 + C308 * C49193 + C309 * C22515 +
            C310 * C49206 + C311 * C22514 +
            (C113 * C277 + C48877 * C285) * C49213 +
            (C113 * C267 + C48877 * C278) * C22513) *
               C31302) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C22513 +
            (C113 * C601 + C48877 * C610) * C49213 +
            (C113 * C596 + C48877 * C602) * C22514 +
            (C113 * C603 + C48877 * C611) * C49206 +
            (C113 * C597 + C48877 * C604) * C22515 +
            (C113 * C605 + C48877 * C612) * C49193 +
            (C113 * C598 + C48877 * C606) * C22516 +
            (C113 * C607 + C48877 * C613) * C49176) *
               C31302 +
           ((C113 * C1494 + C48877 * C1501) * C22513 +
            (C113 * C1500 + C48877 * C1506) * C49213 +
            (C113 * C1493 + C48877 * C1499) * C22514 +
            (C113 * C1498 + C48877 * C1505) * C49206 +
            (C113 * C1492 + C48877 * C1497) * C22515 +
            (C113 * C1496 + C48877 * C1504) * C49193 +
            (C113 * C1495 + C48877 * C1502) * C22516 +
            (C113 * C1503 + C48877 * C1507) * C49176) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C23725 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C23719 +
            (C1127 + C1128 + C1129) * C23726 +
            (C1130 + C1131 + C1132) * C48790) *
               C31302 +
           ((C16864 + C16865 + C16866) * C23725 +
            (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
            C32870 * C48790) *
               C48982) *
              C48866 * C591 -
          (((C32665 + C32666 + C32667) * C48790 +
            (C32668 + C32669 + C32670) * C23726 +
            (C17313 + C17312 + C17311) * C23719 +
            (C17310 + C17309 + C17308) * C23725) *
               C48982 +
           ((C1341 + C1342 + C1343) * C48790 +
            (C1344 + C1345 + C1346) * C23726 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C23719 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C23725) *
               C31302) *
              C48866 * C592 +
          (((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
             C1086 * C1800 + C49172 * C1803) *
                C23725 +
            (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
             C1086 * C1804 + C49172 * C1809) *
                C23719 +
            (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
             C1086 * C1801 + C49172 * C1805) *
                C23726 +
            (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
             C1086 * C1806 + C49172 * C1810) *
                C48790) *
               C31302 +
           ((C1084 * C1494 + C49207 * C1501 + C1085 * C1958 + C49195 * C1961 +
             C1086 * C9392 + C49172 * C9395) *
                C23725 +
            (C1084 * C1500 + C49207 * C1506 + C1085 * C1962 + C49195 * C1967 +
             C1086 * C9394 + C49172 * C9398) *
                C23719 +
            (C1084 * C1493 + C49207 * C1499 + C1085 * C1959 + C49195 * C1963 +
             C1086 * C9393 + C49172 * C9396) *
                C23726 +
            (C1084 * C1498 + C49207 * C1505 + C1085 * C1964 + C49195 * C1968 +
             C1086 * C9397 + C49172 * C9399) *
                C48790) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C22513 +
                      (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                      C169 * C49206 + C170 * C22515 + C171 * C49193 +
                      C172 * C22516 + C173 * C49176) *
                         C31302 +
                     (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                      C31571 + C31572) *
                         C48982) *
                        C393 -
                    ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 +
                      C2524 * C22515 + C2523 * C49206 + C2522 * C22514 +
                      C2903 * C49213 + C2902 * C22513) *
                         C48982 +
                     (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                      C31566 + C31565) *
                         C31302) *
                        C49169) *
                       C525 +
                   (((C31939 + C31940 + C31941 + C31942 + C31943 + C31944 +
                      C31945 + C31946) *
                         C31302 +
                     (C3344 * C22513 + C3345 * C49213 + C2697 * C22514 +
                      C2696 * C49206 + C2695 * C22515 + C2694 * C49193 +
                      (C113 * C2673 + C48877 * C2674) * C22516 +
                      (C113 * C2675 + C48877 * C2676) * C49176) *
                         C48982) *
                        C49169 -
                    ((C31946 + C31945 + C31944 + C31943 + C31942 + C31941 +
                      C31940 + C31939) *
                         C48982 +
                     (C306 * C49176 + C307 * C22516 + C308 * C49193 +
                      C309 * C22515 + C310 * C49206 + C311 * C22514 +
                      (C113 * C277 + C48877 * C285) * C49213 +
                      (C113 * C267 + C48877 * C278) * C22513) *
                         C31302) *
                        C393) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                       C49195 * C278 + C1086 * C595 + C49172 * C600) *
                          C23725 +
                      (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                       C49195 * C285 + C1086 * C601 + C49172 * C610) *
                          C23719 +
                      (C1127 + C1128 + C1129) * C23726 +
                      (C1130 + C1131 + C1132) * C48790) *
                         C31302 +
                     ((C16864 + C16865 + C16866) * C23725 +
                      (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                      C32870 * C48790) *
                         C48982) *
                        C393 -
                    (((C16881 + C16880 + C16879) * C48790 +
                      (C16878 + C16877 + C16876) * C23726 +
                      (C16875 + C16874 + C16873) * C23719 +
                      (C16872 + C16871 + C16870) * C23725) *
                         C48982 +
                     (C32871 * C48790 + C32872 * C23726 +
                      (C16869 + C16868 + C16867) * C23719 +
                      (C16866 + C16865 + C16864) * C23725) *
                         C31302) *
                        C49169) *
                       C525 +
                   ((((C17308 + C17309 + C17310) * C23725 +
                      (C17311 + C17312 + C17313) * C23719 +
                      (C32670 + C32669 + C32668) * C23726 +
                      (C32667 + C32666 + C32665) * C48790) *
                         C31302 +
                     ((C17314 + C17315 + C17316) * C23725 +
                      (C17317 + C17318 + C17319) * C23719 +
                      (C1084 * C2374 + C49207 * C2382 + C1085 * C2375 +
                       C49195 * C2383 + C1086 * C10124 + C49172 * C10125) *
                          C23726 +
                      (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 +
                       C49195 * C2393 + C1086 * C10126 + C49172 * C10127) *
                          C48790) *
                         C48982) *
                        C49169 -
                    (((C32665 + C32666 + C32667) * C48790 +
                      (C32668 + C32669 + C32670) * C23726 +
                      (C17313 + C17312 + C17311) * C23719 +
                      (C17310 + C17309 + C17308) * C23725) *
                         C48982 +
                     ((C1341 + C1342 + C1343) * C48790 +
                      (C1344 + C1345 + C1346) * C23726 +
                      (C1086 * C1302 + C49172 * C1308 + C1085 * C601 +
                       C49195 * C610 + C1084 * C277 + C49207 * C285) *
                          C23719 +
                      (C1086 * C1296 + C49172 * C1303 + C1085 * C595 +
                       C49195 * C600 + C1084 * C267 + C49207 * C278) *
                          C23725) *
                         C31302) *
                        C393) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C22513 +
             (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
             C169 * C49206 + C170 * C22515 + C171 * C49193 + C172 * C22516 +
             C173 * C49176) *
                C31302 +
            (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 + C31571 +
             C31572) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 + C2524 * C22515 +
             C2523 * C49206 + C2522 * C22514 + C2903 * C49213 +
             C2902 * C22513) *
                C48982 +
            (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 + C31566 +
             C31565) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C31573 + C31574 + C31575 + C31576 + C31577 + C31578 + C31579 +
             C31580) *
                C31302 +
            (C2522 * C22513 + C2523 * C49213 + C2524 * C22514 + C2525 * C49206 +
             C2527 * C22515 + C2526 * C49193 +
             (C113 * C952 + C48877 * C961) * C22516 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C31580 + C31579 + C31578 + C31577 + C31576 + C31575 + C31574 +
             C31573) *
                C48982 +
            (C175 * C49176 + C174 * C22516 + C173 * C49193 + C172 * C22515 +
             C171 * C49206 + C170 * C22514 + C169 * C49213 + C168 * C22513) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
              C1086 * C595 + C49172 * C600) *
                 C23725 +
             (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
              C1086 * C601 + C49172 * C610) *
                 C23719 +
             (C1127 + C1128 + C1129) * C23726 +
             (C1130 + C1131 + C1132) * C48790) *
                C31302 +
            ((C16864 + C16865 + C16866) * C23725 +
             (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
             C32870 * C48790) *
                C48982) *
               C799 -
           (((C16881 + C16880 + C16879) * C48790 +
             (C16878 + C16877 + C16876) * C23726 +
             (C16875 + C16874 + C16873) * C23719 +
             (C16872 + C16871 + C16870) * C23725) *
                C48982 +
            (C32871 * C48790 + C32872 * C23726 +
             (C16869 + C16868 + C16867) * C23719 +
             (C16866 + C16865 + C16864) * C23725) *
                C31302) *
               C49169) *
              C48849 * C527 +
          (((C32869 * C23725 + C32870 * C23719 +
             (C1538 + C1537 + C1536) * C23726 +
             (C1535 + C1534 + C1533) * C48790) *
                C31302 +
            ((C16876 + C16877 + C16878) * C23725 +
             (C16879 + C16880 + C16881) * C23719 +
             (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
              C1086 * C2377 + C49172 * C2387) *
                 C23726 +
             (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
              C1086 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C1533 + C1534 + C1535) * C48790 +
             (C1536 + C1537 + C1538) * C23726 + C32871 * C23719 +
             C32872 * C23725) *
                C48982 +
            ((C1138 + C1137 + C1136) * C48790 +
             (C1135 + C1134 + C1133) * C23726 +
             (C1132 + C1131 + C1130) * C23719 +
             (C1129 + C1128 + C1127) * C23725) *
                C31302) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48877 * C126) * C22513 +
                      (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                      C169 * C49206 + C170 * C22515 + C171 * C49193 +
                      C172 * C22516 + C173 * C49176) *
                         C31302 +
                     (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                      C31571 + C31572) *
                         C48982) *
                        C799 -
                    ((C2526 * C49176 + C2527 * C22516 + C2525 * C49193 +
                      C2524 * C22515 + C2523 * C49206 + C2522 * C22514 +
                      C2903 * C49213 + C2902 * C22513) *
                         C48982 +
                     (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                      C31566 + C31565) *
                         C31302) *
                        C49169) *
                       C259 +
                   (((C31939 + C31940 + C31941 + C31942 + C31943 + C31944 +
                      C31945 + C31946) *
                         C31302 +
                     (C3344 * C22513 + C3345 * C49213 + C2697 * C22514 +
                      C2696 * C49206 + C2695 * C22515 + C2694 * C49193 +
                      (C113 * C2673 + C48877 * C2674) * C22516 +
                      (C113 * C2675 + C48877 * C2676) * C49176) *
                         C48982) *
                        C49169 -
                    ((C31946 + C31945 + C31944 + C31943 + C31942 + C31941 +
                      C31940 + C31939) *
                         C48982 +
                     (C306 * C49176 + C307 * C22516 + C308 * C49193 +
                      C309 * C22515 + C310 * C49206 + C311 * C22514 +
                      (C113 * C277 + C48877 * C285) * C49213 +
                      (C113 * C267 + C48877 * C278) * C22513) *
                         C31302) *
                        C799) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                       C49195 * C278 + C1086 * C595 + C49172 * C600) *
                          C23725 +
                      (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                       C49195 * C285 + C1086 * C601 + C49172 * C610) *
                          C23719 +
                      (C1127 + C1128 + C1129) * C23726 +
                      (C1130 + C1131 + C1132) * C48790) *
                         C31302 +
                     ((C16864 + C16865 + C16866) * C23725 +
                      (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                      C32870 * C48790) *
                         C48982) *
                        C799 -
                    (((C16881 + C16880 + C16879) * C48790 +
                      (C16878 + C16877 + C16876) * C23726 +
                      (C16875 + C16874 + C16873) * C23719 +
                      (C16872 + C16871 + C16870) * C23725) *
                         C48982 +
                     (C32871 * C48790 + C32872 * C23726 +
                      (C16869 + C16868 + C16867) * C23719 +
                      (C16866 + C16865 + C16864) * C23725) *
                         C31302) *
                        C49169) *
                       C259 +
                   ((((C17308 + C17309 + C17310) * C23725 +
                      (C17311 + C17312 + C17313) * C23719 +
                      (C32670 + C32669 + C32668) * C23726 +
                      (C32667 + C32666 + C32665) * C48790) *
                         C31302 +
                     ((C17314 + C17315 + C17316) * C23725 +
                      (C17317 + C17318 + C17319) * C23719 +
                      (C1084 * C2374 + C49207 * C2382 + C1085 * C2375 +
                       C49195 * C2383 + C1086 * C10124 + C49172 * C10125) *
                          C23726 +
                      (C1084 * C2384 + C49207 * C2392 + C1085 * C2385 +
                       C49195 * C2393 + C1086 * C10126 + C49172 * C10127) *
                          C48790) *
                         C48982) *
                        C49169 -
                    (((C32665 + C32666 + C32667) * C48790 +
                      (C32668 + C32669 + C32670) * C23726 +
                      (C17313 + C17312 + C17311) * C23719 +
                      (C17310 + C17309 + C17308) * C23725) *
                         C48982 +
                     ((C1341 + C1342 + C1343) * C48790 +
                      (C1344 + C1345 + C1346) * C23726 +
                      (C1086 * C1302 + C49172 * C1308 + C1085 * C601 +
                       C49195 * C610 + C1084 * C277 + C49207 * C285) *
                          C23719 +
                      (C1086 * C1296 + C49172 * C1303 + C1085 * C595 +
                       C49195 * C600 + C1084 * C267 + C49207 * C278) *
                          C23725) *
                         C31302) *
                        C799) *
                       C49167) *
                  C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C48877 * C126) * C22513 +
                     (C113 * C127 + C48877 * C140) * C49213 + C168 * C22514 +
                     C169 * C49206 + C170 * C22515 + C171 * C49193 +
                     C172 * C22516 + C173 * C49176) *
                        C31302 +
                    (C31565 + C31566 + C31567 + C31568 + C31569 + C31570 +
                     C31571 + C31572) *
                        C48982) *
                       C945 -
                   ((C32305 + C32306 + C32307 + C32308 + C32309 + C32310 +
                     C32311 + C32312) *
                        C48982 +
                    (C31572 + C31571 + C31570 + C31569 + C31568 + C31567 +
                     C31566 + C31565) *
                        C31302) *
                       C946 +
                   ((C32312 + C32311 + C32310 + C32309 + C32308 + C32307 +
                     C32306 + C32305) *
                        C31302 +
                    (C3775 * C22513 + C3774 * C49213 + C2907 * C22514 +
                     C2906 * C49206 + C2905 * C22515 + C2904 * C49193 +
                     (C113 * C2850 + C48877 * C2857) * C22516 +
                     (C113 * C2858 + C48877 * C2862) * C49176) *
                        C48982) *
                       C947) *
                  C48849 * C48815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C1084 * C119 + C49207 * C126 + C1085 * C267 +
                      C49195 * C278 + C1086 * C595 + C49172 * C600) *
                         C23725 +
                     (C1084 * C127 + C49207 * C140 + C1085 * C277 +
                      C49195 * C285 + C1086 * C601 + C49172 * C610) *
                         C23719 +
                     (C1127 + C1128 + C1129) * C23726 +
                     (C1130 + C1131 + C1132) * C48790) *
                        C31302 +
                    ((C16864 + C16865 + C16866) * C23725 +
                     (C16867 + C16868 + C16869) * C23719 + C32869 * C23726 +
                     C32870 * C48790) *
                        C48982) *
                       C945 -
                   (((C16881 + C16880 + C16879) * C48790 +
                     (C16878 + C16877 + C16876) * C23726 +
                     (C16875 + C16874 + C16873) * C23719 +
                     (C16872 + C16871 + C16870) * C23725) *
                        C48982 +
                    (C32871 * C48790 + C32872 * C23726 +
                     (C16869 + C16868 + C16867) * C23719 +
                     (C16866 + C16865 + C16864) * C23725) *
                        C31302) *
                       C946 +
                   ((C17736 * C23725 + C17737 * C23719 +
                     (C16876 + C16877 + C16878) * C23726 +
                     (C16879 + C16880 + C16881) * C48790) *
                        C31302 +
                    ((C17743 + C17742 + C17741) * C23725 +
                     (C17740 + C17739 + C17738) * C23719 +
                     (C1084 * C2848 + C49207 * C2854 + C1085 * C3314 +
                      C49195 * C3318 + C1086 * C10275 + C49172 * C10278) *
                         C23726 +
                     (C1084 * C2853 + C49207 * C2860 + C1085 * C3319 +
                      C49195 * C3323 + C1086 * C10279 + C49172 * C10281) *
                         C48790) *
                        C48982) *
                       C947) *
                  C48849 * C48815) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C48866 * C48849 * C110 -
          ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
           (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
           (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
           (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
              C48895 * C48866 * C48849 * C111 +
          (C3939 * C3886 + C3940 * C3880 + C3941 * C3887 + C3942 * C3881 +
           (C3938 + C3937) * C3888 + (C3936 + C3935) * C3882 +
           (C3884 * C124 + C49139 * C137 + C3885 * C268 + C48940 * C279) *
               C3889 +
           (C3884 * C136 + C49139 * C145 + C3885 * C280 + C48940 * C286) *
               C49176) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C48866 * C48849 * C110 -
          ((C11364 + C11365 + C11366 + C11367) * C48790 +
           (C11368 + C11369 + C11370 + C11371) * C47890 +
           (C11363 + C11362 + C11361 + C11360) * C49117 +
           (C11359 + C11358 + C11357 + C11356) * C47909) *
              C48895 * C48866 * C48849 * C111 +
          ((C11371 + C11370 + C11369 + C11368) * C47909 +
           (C11367 + C11366 + C11365 + C11364) * C49117 +
           (C11317 * C122 + C11311 * C132 + C11318 * C264 + C11312 * C272 +
            C11319 * C598 + C11313 * C606 + C11320 * C1297 + C49182 * C1304) *
               C47890 +
           (C11317 * C133 + C11311 * C143 + C11318 * C271 + C11312 * C282 +
            C11319 * C607 + C11313 * C613 + C11320 * C1305 + C49182 * C1309) *
               C48790) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C48866 * C259 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C4108 + C4107) * C3886 + (C4106 + C4105) * C3880 +
            (C4104 + C4103) * C3887 + (C4102 + C4101) * C3881 +
            (C4100 + C4099) * C3888 + (C4098 + C4097) * C3882 +
            (C3884 * C263 + C49139 * C270 + C3885 * C599 + C48940 * C608) *
                C3889 +
            (C3884 * C269 + C49139 * C281 + C3885 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C48866 * C259 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C11525 + C11524 + C11523 + C11522) * C47909 +
            (C11521 + C11520 + C11519 + C11518) * C49117 +
            (C11317 * C265 + C11311 * C274 + C11318 * C597 + C11312 * C604 +
             C11319 * C1294 + C11313 * C1299 + C11320 * C1802 +
             C49182 * C1807) *
                C47890 +
            (C11317 * C273 + C11311 * C283 + C11318 * C605 + C11312 * C612 +
             C11319 * C1298 + C11313 * C1306 + C11320 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C393 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C4274 + C4273) * C3886 + (C4272 + C4271) * C3880 +
            (C4270 + C4269) * C3887 + (C4268 + C4267) * C3881 +
            (C4266 + C4265) * C3888 + (C4264 + C4263) * C3882 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C3889 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C393 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C11679 + C11678 + C11677 + C11676) * C47909 +
            (C11675 + C11674 + C11673 + C11672) * C49117 +
            (C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C47890 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C48866 * C525 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C4108 + C4107) * C3886 + (C4106 + C4105) * C3880 +
            (C4104 + C4103) * C3887 + (C4102 + C4101) * C3881 +
            (C4100 + C4099) * C3888 + (C4098 + C4097) * C3882 +
            (C3884 * C263 + C49139 * C270 + C3885 * C599 + C48940 * C608) *
                C3889 +
            (C3884 * C269 + C49139 * C281 + C3885 * C609 + C48940 * C614) *
                C49176) *
               C48895 * C48866 * C49167 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C48866 * C525 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C11525 + C11524 + C11523 + C11522) * C47909 +
            (C11521 + C11520 + C11519 + C11518) * C49117 +
            (C11317 * C265 + C11311 * C274 + C11318 * C597 + C11312 * C604 +
             C11319 * C1294 + C11313 * C1299 + C11320 * C1802 +
             C49182 * C1807) *
                C47890 +
            (C11317 * C273 + C11311 * C283 + C11318 * C605 + C11312 * C612 +
             C11319 * C1298 + C11313 * C1306 + C11320 * C1808 +
             C49182 * C1811) *
                C48790) *
               C48895 * C48866 * C49167 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C48866 * C591 -
          ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
           (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
           (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
           (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
               C3880 +
           (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
               C3886) *
              C48895 * C48866 * C592 +
          ((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
               C3886 +
           (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
               C3880 +
           (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
               C3887 +
           (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
               C3881 +
           (C3884 * C597 + C49139 * C604 + C3885 * C1294 + C48940 * C1299) *
               C3888 +
           (C3884 * C605 + C49139 * C612 + C3885 * C1298 + C48940 * C1306) *
               C3882 +
           (C3884 * C598 + C49139 * C606 + C3885 * C1297 + C48940 * C1304) *
               C3889 +
           (C3884 * C607 + C49139 * C613 + C3885 * C1305 + C48940 * C1309) *
               C49176) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C48866 * C591 -
          ((C11518 + C11519 + C11520 + C11521) * C48790 +
           (C11522 + C11523 + C11524 + C11525) * C47890 +
           (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
            C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
               C49117 +
           (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
            C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
               C47909) *
              C48895 * C48866 * C592 +
          ((C11317 * C595 + C11311 * C600 + C11318 * C1296 + C11312 * C1303 +
            C11319 * C1800 + C11313 * C1803 + C11320 * C9302 + C49182 * C9305) *
               C47909 +
           (C11317 * C601 + C11311 * C610 + C11318 * C1302 + C11312 * C1308 +
            C11319 * C1804 + C11313 * C1809 + C11320 * C9304 + C49182 * C9308) *
               C49117 +
           (C11317 * C596 + C11311 * C602 + C11318 * C1295 + C11312 * C1301 +
            C11319 * C1801 + C11313 * C1805 + C11320 * C9303 + C49182 * C9306) *
               C47890 +
           (C11317 * C603 + C11311 * C611 + C11318 * C1300 + C11312 * C1307 +
            C11319 * C1806 + C11313 * C1810 + C11320 * C9307 + C49182 * C9309) *
               C48790) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C393 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C525 +
          (((C3884 * C697 + C49139 * C702 + C3885 * C1494 + C48940 * C1501) *
                C3886 +
            (C3884 * C703 + C49139 * C712 + C3885 * C1500 + C48940 * C1506) *
                C3880 +
            (C3884 * C698 + C49139 * C704 + C3885 * C1493 + C48940 * C1499) *
                C3887 +
            (C3884 * C705 + C49139 * C713 + C3885 * C1498 + C48940 * C1505) *
                C3881 +
            (C3884 * C699 + C49139 * C706 + C3885 * C1492 + C48940 * C1497) *
                C3888 +
            (C3884 * C707 + C49139 * C714 + C3885 * C1496 + C48940 * C1504) *
                C3882 +
            (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                C3889 +
            (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C393 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C525 +
          (((C11317 * C697 + C11311 * C702 + C11318 * C1494 + C11312 * C1501 +
             C11319 * C1958 + C11313 * C1961 + C11320 * C9392 +
             C49182 * C9395) *
                C47909 +
            (C11317 * C703 + C11311 * C712 + C11318 * C1500 + C11312 * C1506 +
             C11319 * C1962 + C11313 * C1967 + C11320 * C9394 +
             C49182 * C9398) *
                C49117 +
            (C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
             C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
             C49182 * C9396) *
                C47890 +
            (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
             C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C799 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C4274 + C4273) * C3886 + (C4272 + C4271) * C3880 +
            (C4270 + C4269) * C3887 + (C4268 + C4267) * C3881 +
            (C4266 + C4265) * C3888 + (C4264 + C4263) * C3882 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C3889 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49176) *
               C48895 * C49169 -
           ((C3935 + C3936) * C49176 + (C3937 + C3938) * C3889 +
            (C3934 + C3933) * C3882 + (C3932 + C3931) * C3888 +
            (C3930 + C3929) * C3881 + (C3928 + C3927) * C3887 +
            (C3926 + C3925) * C3880 + (C3924 + C3923) * C3886) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C799 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C11679 + C11678 + C11677 + C11676) * C47909 +
            (C11675 + C11674 + C11673 + C11672) * C49117 +
            (C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C47890 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48790) *
               C48895 * C49169 -
           ((C11364 + C11365 + C11366 + C11367) * C48790 +
            (C11368 + C11369 + C11370 + C11371) * C47890 +
            (C11363 + C11362 + C11361 + C11360) * C49117 +
            (C11359 + C11358 + C11357 + C11356) * C47909) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C3886 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C3880 +
            (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
            C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
               C48895 * C799 -
           ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
            (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
            (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
            (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
                C3880 +
            (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
                C3886) *
               C48895 * C49169) *
              C259 +
          (((C3884 * C697 + C49139 * C702 + C3885 * C1494 + C48940 * C1501) *
                C3886 +
            (C3884 * C703 + C49139 * C712 + C3885 * C1500 + C48940 * C1506) *
                C3880 +
            (C3884 * C698 + C49139 * C704 + C3885 * C1493 + C48940 * C1499) *
                C3887 +
            (C3884 * C705 + C49139 * C713 + C3885 * C1498 + C48940 * C1505) *
                C3881 +
            (C3884 * C699 + C49139 * C706 + C3885 * C1492 + C48940 * C1497) *
                C3888 +
            (C3884 * C707 + C49139 * C714 + C3885 * C1496 + C48940 * C1504) *
                C3882 +
            (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                C3889 +
            (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                C49176) *
               C48895 * C49169 -
           ((C4097 + C4098) * C49176 + (C4099 + C4100) * C3889 +
            (C4101 + C4102) * C3882 + (C4103 + C4104) * C3888 +
            (C4105 + C4106) * C3881 + (C4107 + C4108) * C3887 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C3880 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C3886) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C47909 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C49117 +
            (C11356 + C11357 + C11358 + C11359) * C47890 +
            (C11360 + C11361 + C11362 + C11363) * C48790) *
               C48895 * C799 -
           ((C11672 + C11673 + C11674 + C11675) * C48790 +
            (C11676 + C11677 + C11678 + C11679) * C47890 +
            (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
             C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
                C49117 +
            (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
             C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
                C47909) *
               C48895 * C49169) *
              C259 +
          (((C11317 * C697 + C11311 * C702 + C11318 * C1494 + C11312 * C1501 +
             C11319 * C1958 + C11313 * C1961 + C11320 * C9392 +
             C49182 * C9395) *
                C47909 +
            (C11317 * C703 + C11311 * C712 + C11318 * C1500 + C11312 * C1506 +
             C11319 * C1962 + C11313 * C1967 + C11320 * C9394 +
             C49182 * C9398) *
                C49117 +
            (C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
             C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
             C49182 * C9396) *
                C47890 +
            (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
             C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
             C49182 * C9399) *
                C48790) *
               C48895 * C49169 -
           ((C11518 + C11519 + C11520 + C11521) * C48790 +
            (C11522 + C11523 + C11524 + C11525) * C47890 +
            (C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C49117 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C47909) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
               C3886 +
           (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
               C3880 +
           (C3923 + C3924) * C3887 + (C3925 + C3926) * C3881 + C3939 * C3888 +
           C3940 * C3882 + C3941 * C3889 + C3942 * C49176) *
              C48895 * C945 -
          ((C4263 + C4264) * C49176 + (C4265 + C4266) * C3889 +
           (C4267 + C4268) * C3882 + (C4269 + C4270) * C3888 +
           (C4271 + C4272) * C3881 + (C4273 + C4274) * C3887 +
           (C3885 * C703 + C48940 * C712 + C3884 * C409 + C49139 * C417) *
               C3880 +
           (C3885 * C697 + C48940 * C702 + C3884 * C399 + C49139 * C410) *
               C3886) *
              C48895 * C946 +
          ((C3884 * C948 + C49139 * C953 + C3885 * C2372 + C48940 * C2378) *
               C3886 +
           (C3884 * C954 + C49139 * C963 + C3885 * C2380 + C48940 * C2390) *
               C3880 +
           (C3884 * C949 + C49139 * C955 + C3885 * C2374 + C48940 * C2382) *
               C3887 +
           (C3884 * C956 + C49139 * C964 + C3885 * C2384 + C48940 * C2392) *
               C3881 +
           (C3884 * C950 + C49139 * C957 + C3885 * C2376 + C48940 * C2386) *
               C3888 +
           (C3884 * C958 + C49139 * C965 + C3885 * C2388 + C48940 * C2394) *
               C3882 +
           (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
               C3889 +
           (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
               C49176) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
            C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
               C47909 +
           (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
            C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
               C49117 +
           (C11356 + C11357 + C11358 + C11359) * C47890 +
           (C11360 + C11361 + C11362 + C11363) * C48790) *
              C48895 * C945 -
          ((C11672 + C11673 + C11674 + C11675) * C48790 +
           (C11676 + C11677 + C11678 + C11679) * C47890 +
           (C11320 * C1962 + C49182 * C1967 + C11319 * C1500 + C11313 * C1506 +
            C11318 * C703 + C11312 * C712 + C11317 * C409 + C11311 * C417) *
               C49117 +
           (C11320 * C1958 + C49182 * C1961 + C11319 * C1494 + C11313 * C1501 +
            C11318 * C697 + C11312 * C702 + C11317 * C399 + C11311 * C410) *
               C47909) *
              C48895 * C946 +
          ((C11317 * C948 + C11311 * C953 + C11318 * C2372 + C11312 * C2378 +
            C11319 * C2373 + C11313 * C2379 + C11320 * C9860 + C49182 * C9862) *
               C47909 +
           (C11317 * C954 + C11311 * C963 + C11318 * C2380 + C11312 * C2390 +
            C11319 * C2381 + C11313 * C2391 + C11320 * C9864 + C49182 * C9866) *
               C49117 +
           (C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
            C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
            C49182 * C10125) *
               C47890 +
           (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
            C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
            C49182 * C10127) *
               C48790) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C3884 * C399 + C49139 * C410 + C3885 * C697 + C48940 * C702) *
                C1087 +
            (C3884 * C409 + C49139 * C417 + C3885 * C703 + C48940 * C712) *
                C1081 +
            (C4274 + C4273) * C1088 + (C4272 + C4271) * C1082 + C6251 * C1089 +
            C6252 * C49159) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
            (C4267 + C4268) * C1082 + (C4269 + C4270) * C1088 +
            (C4271 + C4272) * C1081 + (C4273 + C4274) * C1087) *
               C48982 +
           ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
            (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
            (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C3939 * C1087 + C3940 * C1081 + C3941 * C1088 + C3942 * C1082 +
            (C3938 + C3937) * C1089 + (C3936 + C3935) * C49159) *
               C49140 +
           (C6251 * C1087 + C6252 * C1081 + (C4266 + C4265) * C1088 +
            (C4264 + C4263) * C1082 +
            (C3884 * C395 + C49139 * C402 + C3885 * C701 + C48940 * C710) *
                C1089 +
            (C3884 * C401 + C49139 * C413 + C3885 * C711 + C48940 * C716) *
                C49159) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C11317 * C399 + C11311 * C410 + C11318 * C697 + C11312 * C702 +
             C11319 * C1494 + C11313 * C1501 + C11320 * C1958 +
             C49182 * C1961) *
                C9219 +
            (C11317 * C409 + C11311 * C417 + C11318 * C703 + C11312 * C712 +
             C11319 * C1500 + C11313 * C1506 + C11320 * C1962 +
             C49182 * C1967) *
                C48780) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C11672 + C11673 + C11674 + C11675) * C48780 +
            (C11676 + C11677 + C11678 + C11679) * C9219) *
               C48982 +
           ((C11363 + C11362 + C11361 + C11360) * C48780 +
            (C11359 + C11358 + C11357 + C11356) * C9219) *
               C49140) *
              C48866 * C48849 * C111 +
          (((C11371 + C11370 + C11369 + C11368) * C9219 +
            (C11367 + C11366 + C11365 + C11364) * C48780) *
               C49140 +
           ((C11317 * C397 + C11311 * C406 + C11318 * C699 + C11312 * C706 +
             C11319 * C1492 + C11313 * C1497 + C11320 * C1960 +
             C49182 * C1965) *
                C9219 +
            (C11317 * C405 + C11311 * C415 + C11318 * C707 + C11312 * C714 +
             C11319 * C1496 + C11313 * C1504 + C11320 * C1966 +
             C49182 * C1969) *
                C48780) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C3884 * C399 + C49139 * C410 + C3885 * C697 + C48940 * C702) *
                 C1087 +
             (C3884 * C409 + C49139 * C417 + C3885 * C703 + C48940 * C712) *
                 C1081 +
             (C4274 + C4273) * C1088 + (C4272 + C4271) * C1082 + C6251 * C1089 +
             C6252 * C49159) *
                C48982) *
               C48866 * C259 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                 C1081 +
             (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                 C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C4108 + C4107) * C1087 + (C4106 + C4105) * C1081 +
             (C4104 + C4103) * C1088 + (C4102 + C4101) * C1082 +
             (C4100 + C4099) * C1089 + (C4098 + C4097) * C49159) *
                C49140 +
            ((C6470 + C6469) * C1087 + (C6468 + C6467) * C1081 +
             (C6466 + C6465) * C1088 + (C6464 + C6463) * C1082 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C1089 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             (C4267 + C4268) * C1082 + (C4269 + C4270) * C1088 +
             (C4271 + C4272) * C1081 + (C4273 + C4274) * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C11317 * C399 + C11311 * C410 + C11318 * C697 + C11312 * C702 +
              C11319 * C1494 + C11313 * C1501 + C11320 * C1958 +
              C49182 * C1961) *
                 C9219 +
             (C11317 * C409 + C11311 * C417 + C11318 * C703 + C11312 * C712 +
              C11319 * C1500 + C11313 * C1506 + C11320 * C1962 +
              C49182 * C1967) *
                 C48780) *
                C48982) *
               C48866 * C259 -
           (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 +
              C11313 * C1967 + C11318 * C1500 + C11312 * C1506 + C11317 * C703 +
              C11311 * C712) *
                 C48780 +
             (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 +
              C11313 * C1961 + C11318 * C1494 + C11312 * C1501 + C11317 * C697 +
              C11311 * C702) *
                 C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C11525 + C11524 + C11523 + C11522) * C9219 +
             (C11521 + C11520 + C11519 + C11518) * C48780) *
                C49140 +
            ((C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
              C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
              C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C6673 * C1087 + C6674 * C1081 + C6251 * C1088 + C6252 * C1082 +
             (C4266 + C4265) * C1089 + (C4264 + C4263) * C49159) *
                C49140 +
            ((C6706 + C6705) * C1087 + (C6704 + C6703) * C1081 +
             (C6702 + C6701) * C1088 + (C6700 + C6699) * C1082 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C1089 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C393 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C48849 * C261 +
          ((((C11679 + C11678 + C11677 + C11676) * C9219 +
             (C11675 + C11674 + C11673 + C11672) * C48780) *
                C49140 +
            ((C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
              C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
              C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C48866 * C525 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                 C1081 +
             (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                 C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C4108 + C4107) * C1087 + (C4106 + C4105) * C1081 +
             (C4104 + C4103) * C1088 + (C4102 + C4101) * C1082 +
             (C4100 + C4099) * C1089 + (C4098 + C4097) * C49159) *
                C49140 +
            ((C6470 + C6469) * C1087 + (C6468 + C6467) * C1081 +
             (C6466 + C6465) * C1088 + (C6464 + C6463) * C1082 +
             (C3884 * C700 + C49139 * C708 + C3885 * C1495 + C48940 * C1502) *
                 C1089 +
             (C3884 * C709 + C49139 * C715 + C3885 * C1503 + C48940 * C1507) *
                 C49159) *
                C48982) *
               C48866 * C49167 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C48866 * C525 -
           (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 +
              C11313 * C1967 + C11318 * C1500 + C11312 * C1506 + C11317 * C703 +
              C11311 * C712) *
                 C48780 +
             (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 +
              C11313 * C1961 + C11318 * C1494 + C11312 * C1501 + C11317 * C697 +
              C11311 * C702) *
                 C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C11525 + C11524 + C11523 + C11522) * C9219 +
             (C11521 + C11520 + C11519 + C11518) * C48780) *
                C49140 +
            ((C11317 * C698 + C11311 * C704 + C11318 * C1493 + C11312 * C1499 +
              C11319 * C1959 + C11313 * C1963 + C11320 * C9393 +
              C49182 * C9396) *
                 C9219 +
             (C11317 * C705 + C11311 * C713 + C11318 * C1498 + C11312 * C1505 +
              C11319 * C1964 + C11313 * C1968 + C11320 * C9397 +
              C49182 * C9399) *
                 C48780) *
                C48982) *
               C48866 * C49167 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
            C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
               C48982) *
              C48866 * C591 -
          (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
            (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
            (C3885 * C1500 + C48940 * C1506 + C3884 * C703 + C49139 * C712) *
                C1081 +
            (C3885 * C1494 + C48940 * C1501 + C3884 * C697 + C49139 * C702) *
                C1087) *
               C48982 +
           ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
            (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
            (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                C1081 +
            (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                C1087) *
               C49140) *
              C48866 * C592 +
          (((C3884 * C595 + C49139 * C600 + C3885 * C1296 + C48940 * C1303) *
                C1087 +
            (C3884 * C601 + C49139 * C610 + C3885 * C1302 + C48940 * C1308) *
                C1081 +
            (C3884 * C596 + C49139 * C602 + C3885 * C1295 + C48940 * C1301) *
                C1088 +
            (C3884 * C603 + C49139 * C611 + C3885 * C1300 + C48940 * C1307) *
                C1082 +
            (C3884 * C597 + C49139 * C604 + C3885 * C1294 + C48940 * C1299) *
                C1089 +
            (C3884 * C605 + C49139 * C612 + C3885 * C1298 + C48940 * C1306) *
                C49159) *
               C49140 +
           ((C3884 * C1494 + C49139 * C1501 + C3885 * C1958 + C48940 * C1961) *
                C1087 +
            (C3884 * C1500 + C49139 * C1506 + C3885 * C1962 + C48940 * C1967) *
                C1081 +
            (C3884 * C1493 + C49139 * C1499 + C3885 * C1959 + C48940 * C1963) *
                C1088 +
            (C3884 * C1498 + C49139 * C1505 + C3885 * C1964 + C48940 * C1968) *
                C1082 +
            (C3884 * C1492 + C49139 * C1497 + C3885 * C1960 + C48940 * C1965) *
                C1089 +
            (C3884 * C1496 + C49139 * C1504 + C3885 * C1966 + C48940 * C1969) *
                C49159) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C14398 + C14399 + C14400 + C14401) * C9219 +
            (C14402 + C14403 + C14404 + C14405) * C48780) *
               C48982) *
              C48866 * C591 -
          (((C11320 * C9394 + C49182 * C9398 + C11319 * C1962 + C11313 * C1967 +
             C11318 * C1500 + C11312 * C1506 + C11317 * C703 + C11311 * C712) *
                C48780 +
            (C11320 * C9392 + C49182 * C9395 + C11319 * C1958 + C11313 * C1961 +
             C11318 * C1494 + C11312 * C1501 + C11317 * C697 + C11311 * C702) *
                C9219) *
               C48982 +
           ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 + C11313 * C1308 +
             C11318 * C601 + C11312 * C610 + C11317 * C277 + C11311 * C285) *
                C48780 +
            (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 + C11313 * C1303 +
             C11318 * C595 + C11312 * C600 + C11317 * C267 + C11311 * C278) *
                C9219) *
               C49140) *
              C48866 * C592 +
          (((C11317 * C595 + C11311 * C600 + C11318 * C1296 + C11312 * C1303 +
             C11319 * C1800 + C11313 * C1803 + C11320 * C9302 +
             C49182 * C9305) *
                C9219 +
            (C11317 * C601 + C11311 * C610 + C11318 * C1302 + C11312 * C1308 +
             C11319 * C1804 + C11313 * C1809 + C11320 * C9304 +
             C49182 * C9308) *
                C48780) *
               C49140 +
           ((C11317 * C1494 + C11311 * C1501 + C11318 * C1958 + C11312 * C1961 +
             C11319 * C9392 + C11313 * C9395 + C11320 * C9630 +
             C49182 * C9631) *
                C9219 +
            (C11317 * C1500 + C11311 * C1506 + C11318 * C1962 + C11312 * C1967 +
             C11319 * C9394 + C11313 * C9398 + C11320 * C9632 +
             C49182 * C9633) *
                C48780) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C393 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C525 +
          ((((C7249 + C7250) * C1087 + (C7251 + C7252) * C1081 +
             (C6470 + C6469) * C1088 + (C6468 + C6467) * C1082 +
             (C6466 + C6465) * C1089 + (C6464 + C6463) * C49159) *
                C49140 +
            ((C3884 * C2372 + C49139 * C2378 + C3885 * C2373 + C48940 * C2379) *
                 C1087 +
             (C3884 * C2380 + C49139 * C2390 + C3885 * C2381 + C48940 * C2391) *
                 C1081 +
             (C3884 * C2374 + C49139 * C2382 + C3885 * C2375 + C48940 * C2383) *
                 C1088 +
             (C3884 * C2384 + C49139 * C2392 + C3885 * C2385 + C48940 * C2393) *
                 C1082 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C1089 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C7252 + C7251) * C1081 + (C7250 + C7249) * C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C393 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C525 +
          ((((C14780 + C14781 + C14782 + C14783) * C9219 +
             (C14784 + C14785 + C14786 + C14787) * C48780) *
                C49140 +
            ((C11317 * C2372 + C11311 * C2378 + C11318 * C2373 +
              C11312 * C2379 + C11319 * C9860 + C11313 * C9862 +
              C11320 * C9861 + C49182 * C9863) *
                 C9219 +
             (C11317 * C2380 + C11311 * C2390 + C11318 * C2381 +
              C11312 * C2391 + C11319 * C9864 + C11313 * C9866 +
              C11320 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C14787 + C14786 + C14785 + C14784) * C48780 +
             (C14783 + C14782 + C14781 + C14780) * C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C6673 * C1087 + C6674 * C1081 + C6251 * C1088 + C6252 * C1082 +
             (C4266 + C4265) * C1089 + (C4264 + C4263) * C49159) *
                C49140 +
            ((C6706 + C6705) * C1087 + (C6704 + C6703) * C1081 +
             (C6702 + C6701) * C1088 + (C6700 + C6699) * C1082 +
             (C3884 * C951 + C49139 * C959 + C3885 * C2673 + C48940 * C2674) *
                 C1089 +
             (C3884 * C960 + C49139 * C966 + C3885 * C2675 + C48940 * C2676) *
                 C49159) *
                C48982) *
               C49169 -
           (((C4263 + C4264) * C49159 + (C4265 + C4266) * C1089 +
             C6691 * C1082 + C6692 * C1088 + C6693 * C1081 + C6694 * C1087) *
                C48982 +
            ((C3934 + C3933) * C49159 + (C3932 + C3931) * C1089 +
             (C3930 + C3929) * C1082 + (C3928 + C3927) * C1088 +
             (C3926 + C3925) * C1081 + (C3924 + C3923) * C1087) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C799 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C48849 * C527 +
          ((((C11679 + C11678 + C11677 + C11676) * C9219 +
             (C11675 + C11674 + C11673 + C11672) * C48780) *
                C49140 +
            ((C11317 * C949 + C11311 * C955 + C11318 * C2374 + C11312 * C2382 +
              C11319 * C2375 + C11313 * C2383 + C11320 * C10124 +
              C49182 * C10125) *
                 C9219 +
             (C11317 * C956 + C11311 * C964 + C11318 * C2384 + C11312 * C2392 +
              C11319 * C2385 + C11313 * C2393 + C11320 * C10126 +
              C49182 * C10127) *
                 C48780) *
                C48982) *
               C49169 -
           (((C11672 + C11673 + C11674 + C11675) * C48780 +
             (C11676 + C11677 + C11678 + C11679) * C9219) *
                C48982 +
            ((C11363 + C11362 + C11361 + C11360) * C48780 +
             (C11359 + C11358 + C11357 + C11356) * C9219) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                 C1087 +
             (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                 C1081 +
             (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
             C3940 * C49159) *
                C49140 +
            ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
             C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
                C48982) *
               C799 -
           (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
             (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
             (C3885 * C2380 + C48940 * C2390 + C3884 * C954 + C49139 * C963) *
                 C1081 +
             (C3885 * C2372 + C48940 * C2378 + C3884 * C948 + C49139 * C953) *
                 C1087) *
                C48982 +
            (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
             (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
                C49140) *
               C49169) *
              C259 +
          ((((C7249 + C7250) * C1087 + (C7251 + C7252) * C1081 +
             (C6470 + C6469) * C1088 + (C6468 + C6467) * C1082 +
             (C6466 + C6465) * C1089 + (C6464 + C6463) * C49159) *
                C49140 +
            ((C3884 * C2372 + C49139 * C2378 + C3885 * C2373 + C48940 * C2379) *
                 C1087 +
             (C3884 * C2380 + C49139 * C2390 + C3885 * C2381 + C48940 * C2391) *
                 C1081 +
             (C3884 * C2374 + C49139 * C2382 + C3885 * C2375 + C48940 * C2383) *
                 C1088 +
             (C3884 * C2384 + C49139 * C2392 + C3885 * C2385 + C48940 * C2393) *
                 C1082 +
             (C3884 * C2376 + C49139 * C2386 + C3885 * C2377 + C48940 * C2387) *
                 C1089 +
             (C3884 * C2388 + C49139 * C2394 + C3885 * C2389 + C48940 * C2395) *
                 C49159) *
                C48982) *
               C49169 -
           (((C6463 + C6464) * C49159 + (C6465 + C6466) * C1089 +
             (C6467 + C6468) * C1082 + (C6469 + C6470) * C1088 +
             (C7252 + C7251) * C1081 + (C7250 + C7249) * C1087) *
                C48982 +
            ((C4101 + C4102) * C49159 + (C4103 + C4104) * C1089 +
             (C4105 + C4106) * C1082 + (C4107 + C4108) * C1088 +
             (C3885 * C601 + C48940 * C610 + C3884 * C277 + C49139 * C285) *
                 C1081 +
             (C3885 * C595 + C48940 * C600 + C3884 * C267 + C49139 * C278) *
                 C1087) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
              C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                 C9219 +
             (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
              C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                 C48780) *
                C49140 +
            ((C14398 + C14399 + C14400 + C14401) * C9219 +
             (C14402 + C14403 + C14404 + C14405) * C48780) *
                C48982) *
               C799 -
           (((C11320 * C9864 + C49182 * C9866 + C11319 * C2381 +
              C11313 * C2391 + C11318 * C2380 + C11312 * C2390 + C11317 * C954 +
              C11311 * C963) *
                 C48780 +
             (C11320 * C9860 + C49182 * C9862 + C11319 * C2373 +
              C11313 * C2379 + C11318 * C2372 + C11312 * C2378 + C11317 * C948 +
              C11311 * C953) *
                 C9219) *
                C48982 +
            ((C14405 + C14404 + C14403 + C14402) * C48780 +
             (C14401 + C14400 + C14399 + C14398) * C9219) *
                C49140) *
               C49169) *
              C259 +
          ((((C14780 + C14781 + C14782 + C14783) * C9219 +
             (C14784 + C14785 + C14786 + C14787) * C48780) *
                C49140 +
            ((C11317 * C2372 + C11311 * C2378 + C11318 * C2373 +
              C11312 * C2379 + C11319 * C9860 + C11313 * C9862 +
              C11320 * C9861 + C49182 * C9863) *
                 C9219 +
             (C11317 * C2380 + C11311 * C2390 + C11318 * C2381 +
              C11312 * C2391 + C11319 * C9864 + C11313 * C9866 +
              C11320 * C9865 + C49182 * C9867) *
                 C48780) *
                C48982) *
               C49169 -
           (((C14787 + C14786 + C14785 + C14784) * C48780 +
             (C14783 + C14782 + C14781 + C14780) * C9219) *
                C48982 +
            ((C11320 * C1804 + C49182 * C1809 + C11319 * C1302 +
              C11313 * C1308 + C11318 * C601 + C11312 * C610 + C11317 * C277 +
              C11311 * C285) *
                 C48780 +
             (C11320 * C1800 + C49182 * C1803 + C11319 * C1296 +
              C11313 * C1303 + C11318 * C595 + C11312 * C600 + C11317 * C267 +
              C11311 * C278) *
                 C9219) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3884 * C119 + C49139 * C126 + C3885 * C267 + C48940 * C278) *
                C1087 +
            (C3884 * C127 + C49139 * C140 + C3885 * C277 + C48940 * C285) *
                C1081 +
            (C3923 + C3924) * C1088 + (C3925 + C3926) * C1082 + C3939 * C1089 +
            C3940 * C49159) *
               C49140 +
           ((C6695 + C6696) * C1087 + (C6697 + C6698) * C1081 + C6673 * C1088 +
            C6674 * C1082 + C6251 * C1089 + C6252 * C49159) *
               C48982) *
              C945 -
          (((C6699 + C6700) * C49159 + (C6701 + C6702) * C1089 +
            (C6703 + C6704) * C1082 + (C6705 + C6706) * C1088 +
            (C7795 + C7796) * C1081 + (C7797 + C7798) * C1087) *
               C48982 +
           (C6691 * C49159 + C6692 * C1089 + C6693 * C1082 + C6694 * C1088 +
            (C6698 + C6697) * C1081 + (C6696 + C6695) * C1087) *
               C49140) *
              C946 +
          (((C7798 + C7797) * C1087 + (C7796 + C7795) * C1081 +
            (C6706 + C6705) * C1088 + (C6704 + C6703) * C1082 +
            (C6702 + C6701) * C1089 + (C6700 + C6699) * C49159) *
               C49140 +
           ((C3884 * C2849 + C49139 * C2856 + C3885 * C3313 + C48940 * C3316) *
                C1087 +
            (C3884 * C2855 + C49139 * C2861 + C3885 * C3317 + C48940 * C3322) *
                C1081 +
            (C3884 * C2848 + C49139 * C2854 + C3885 * C3314 + C48940 * C3318) *
                C1088 +
            (C3884 * C2853 + C49139 * C2860 + C3885 * C3319 + C48940 * C3323) *
                C1082 +
            (C3884 * C2847 + C49139 * C2852 + C3885 * C3315 + C48940 * C3320) *
                C1089 +
            (C3884 * C2851 + C49139 * C2859 + C3885 * C3321 + C48940 * C3324) *
                C49159) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11317 * C119 + C11311 * C126 + C11318 * C267 + C11312 * C278 +
             C11319 * C595 + C11313 * C600 + C11320 * C1296 + C49182 * C1303) *
                C9219 +
            (C11317 * C127 + C11311 * C140 + C11318 * C277 + C11312 * C285 +
             C11319 * C601 + C11313 * C610 + C11320 * C1302 + C49182 * C1308) *
                C48780) *
               C49140 +
           ((C14398 + C14399 + C14400 + C14401) * C9219 +
            (C14402 + C14403 + C14404 + C14405) * C48780) *
               C48982) *
              C945 -
          (((C15162 + C15163 + C15164 + C15165) * C48780 +
            (C15166 + C15167 + C15168 + C15169) * C9219) *
               C48982 +
           ((C14405 + C14404 + C14403 + C14402) * C48780 +
            (C14401 + C14400 + C14399 + C14398) * C9219) *
               C49140) *
              C946 +
          (((C15169 + C15168 + C15167 + C15166) * C9219 +
            (C15165 + C15164 + C15163 + C15162) * C48780) *
               C49140 +
           ((C11317 * C2849 + C11311 * C2856 + C11318 * C3313 + C11312 * C3316 +
             C11319 * C10274 + C11313 * C10277 + C11320 * C10738 +
             C49182 * C10739) *
                C9219 +
            (C11317 * C2855 + C11311 * C2861 + C11318 * C3317 + C11312 * C3322 +
             C11319 * C10276 + C11313 * C10280 + C11320 * C10740 +
             C49182 * C10741) *
                C48780) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
           (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
           (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
              C48895 * C48866 * C48849 * C111 +
          (C1147 * C1087 + C1148 * C1081 + (C1144 + C1143 + C1142) * C1088 +
           (C1141 + C1140 + C1139) * C1082 +
           (C1084 * C123 + C49207 * C134 + C1085 * C263 + C49195 * C270 +
            C1086 * C599 + C49172 * C608) *
               C1089 +
           (C1084 * C135 + C49207 * C144 + C1085 * C269 + C49195 * C281 +
            C1086 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C48849 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C48895 * C48866 * C48849 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C48877 * C138) * C118 +
           (C113 * C139 + C48877 * C146) * C106) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           ((C113 * C399 + C48877 * C410) * C1087 +
            (C113 * C409 + C48877 * C417) * C1081 + C443 * C1088 +
            C442 * C1082 + C441 * C1089 + C440 * C49159) *
               C49197 +
           ((C113 * C948 + C48877 * C953) * C1087 +
            (C113 * C954 + C48877 * C963) * C1081 + C2522 * C1088 +
            C2523 * C1082 + C2524 * C1089 + C2525 * C49159) *
               C49175) *
              C48866 * C48849 * C110 -
          ((C2526 * C49159 + C2527 * C1089 + C2525 * C1082 + C2524 * C1088 +
            C2523 * C1081 + C2522 * C1087) *
               C49175 +
           (C438 * C49159 + C439 * C1089 + C440 * C1082 + C441 * C1088 +
            C442 * C1081 + C443 * C1087) *
               C49197 +
           (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
            C169 * C1081 + C168 * C1087) *
               C49208) *
              C48866 * C48849 * C111 +
          ((C170 * C1087 + C171 * C1081 + C172 * C1088 + C173 * C1082 +
            C174 * C1089 + C175 * C49159) *
               C49208 +
           (C441 * C1087 + C440 * C1081 + C439 * C1088 + C438 * C1082 +
            C437 * C1089 + C436 * C49159) *
               C49197 +
           (C2524 * C1087 + C2525 * C1081 + C2527 * C1088 + C2526 * C1082 +
            (C113 * C952 + C48877 * C961) * C1089 +
            (C113 * C962 + C48877 * C967) * C49159) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
           (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
           (C7962 + C7961 + C7960) * C49204 + (C7959 + C7958 + C7957) * C7917) *
              C48895 * C48866 * C48849 * C111 +
          (C7977 * C7917 + C7978 * C49204 + (C7974 + C7973 + C7972) * C7918 +
           (C7971 + C7970 + C7969) * C49191 +
           (C7914 * C123 + C7908 * C134 + C7915 * C263 + C7909 * C270 +
            C7916 * C599 + C49172 * C608) *
               C7919 +
           (C7914 * C135 + C7908 * C144 + C7915 * C269 + C7909 * C281 +
            C7916 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C48849 * C110 -
          ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
            C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
            C9214 * C129 + C9208 * C141) *
               C48780 +
           (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
            C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
            C9214 * C120 + C9208 * C128) *
               C9219) *
              C48895 * C48866 * C48849 * C111 +
          ((C9214 * C121 + C9208 * C130 + C9215 * C265 + C9209 * C274 +
            C9216 * C597 + C9210 * C604 + C9217 * C1294 + C9211 * C1299 +
            C9218 * C1802 + C9212 * C1807) *
               C9219 +
           (C9214 * C131 + C9208 * C142 + C9215 * C273 + C9209 * C283 +
            C9216 * C605 + C9210 * C612 + C9217 * C1298 + C9211 * C1306 +
            C9218 * C1808 + C9212 * C1811) *
               C48780) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C7914 * C399 + C7908 * C410 + C7915 * C697 + C7909 * C702 +
             C7916 * C1494 + C49172 * C1501) *
                C9219 +
            (C7914 * C409 + C7908 * C417 + C7915 * C703 + C7909 * C712 +
             C7916 * C1500 + C49172 * C1506) *
                C48780) *
               C49197 +
           ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
             C7916 * C2373 + C49172 * C2379) *
                C9219 +
            (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
             C7916 * C2381 + C49172 * C2391) *
                C48780) *
               C49175) *
              C48866 * C48849 * C110 -
          (((C7916 * C2385 + C49172 * C2393 + C7915 * C2384 + C7909 * C2392 +
             C7914 * C956 + C7908 * C964) *
                C48780 +
            (C7916 * C2375 + C49172 * C2383 + C7915 * C2374 + C7909 * C2382 +
             C7914 * C949 + C7908 * C955) *
                C9219) *
               C49175 +
           ((C8337 + C8338 + C8339) * C48780 +
            (C8340 + C8341 + C8342) * C9219) *
               C49197 +
           ((C7962 + C7961 + C7960) * C48780 +
            (C7959 + C7958 + C7957) * C9219) *
               C49208) *
              C48866 * C48849 * C111 +
          ((C7977 * C9219 + C7978 * C48780) * C49208 +
           ((C8336 + C8335 + C8334) * C9219 +
            (C8333 + C8332 + C8331) * C48780) *
               C49197 +
           ((C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
             C7916 * C2377 + C49172 * C2387) *
                C9219 +
            (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
             C7916 * C2389 + C49172 * C2395) *
                C48780) *
               C49175) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C259 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C259 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C261 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            ((C113 * C399 + C48877 * C410) * C1087 +
             (C113 * C409 + C48877 * C417) * C1081 + C443 * C1088 +
             C442 * C1082 + C441 * C1089 + C440 * C49159) *
                C49197 +
            ((C113 * C948 + C48877 * C953) * C1087 +
             (C113 * C954 + C48877 * C963) * C1081 + C2522 * C1088 +
             C2523 * C1082 + C2524 * C1089 + C2525 * C49159) *
                C49175) *
               C48866 * C259 -
           ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
             (C113 * C2380 + C48877 * C2390) * C1081 +
             (C113 * C2372 + C48877 * C2378) * C1087) *
                C49175 +
            (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
             (C113 * C703 + C48877 * C712) * C1081 +
             (C113 * C697 + C48877 * C702) * C1087) *
                C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C48866 * C49167) *
              C261 +
          (((C311 * C1087 + C310 * C1081 + C309 * C1088 + C308 * C1082 +
             C307 * C1089 + C306 * C49159) *
                C49208 +
            (C2701 * C1087 + C2700 * C1081 + C2699 * C1088 + C2698 * C1082 +
             (C113 * C700 + C48877 * C708) * C1089 +
             (C113 * C709 + C48877 * C715) * C49159) *
                C49197 +
            (C2697 * C1087 + C2696 * C1081 + C2695 * C1088 + C2694 * C1082 +
             (C113 * C2673 + C48877 * C2674) * C1089 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2526 * C49159 + C2527 * C1089 + C2525 * C1082 + C2524 * C1088 +
             C2523 * C1081 + C2522 * C1087) *
                C49175 +
            (C438 * C49159 + C439 * C1089 + C440 * C1082 + C441 * C1088 +
             C442 * C1081 + C443 * C1087) *
                C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C259 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C259 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C7914 * C399 + C7908 * C410 + C7915 * C697 + C7909 * C702 +
              C7916 * C1494 + C49172 * C1501) *
                 C9219 +
             (C7914 * C409 + C7908 * C417 + C7915 * C703 + C7909 * C712 +
              C7916 * C1500 + C49172 * C1506) *
                 C48780) *
                C49197 +
            ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
              C7916 * C2373 + C49172 * C2379) *
                 C9219 +
             (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
              C7916 * C2381 + C49172 * C2391) *
                 C48780) *
                C49175) *
               C48866 * C259 -
           (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
              C7914 * C2380 + C7908 * C2390) *
                 C48780 +
             (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
              C7914 * C2372 + C7908 * C2378) *
                 C9219) *
                C49175 +
            ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
              C7914 * C703 + C7908 * C712) *
                 C48780 +
             (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
              C7914 * C697 + C7908 * C702) *
                 C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C48866 * C49167) *
              C261 +
          ((((C8160 + C8159 + C8158) * C9219 +
             (C8157 + C8156 + C8155) * C48780) *
                C49208 +
            ((C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
              C7916 * C1959 + C49172 * C1963) *
                 C9219 +
             (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
              C7916 * C1964 + C49172 * C1968) *
                 C48780) *
                C49197 +
            ((C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C9219 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C7916 * C2385 + C49172 * C2393 + C7915 * C2384 + C7909 * C2392 +
              C7914 * C956 + C7908 * C964) *
                 C48780 +
             (C7916 * C2375 + C49172 * C2383 + C7915 * C2374 + C7909 * C2382 +
              C7914 * C949 + C7908 * C955) *
                 C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C261 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C48849 * C261 +
          (((C2888 + C2889 + C2890 + C2891 + C2892 + C2893) * C49208 +
            (C2894 + C2895 + C2896 + C2897 + C2898 + C2899) * C49197 +
            (C2907 * C1087 + C2906 * C1081 + C2905 * C1088 + C2904 * C1082 +
             (C113 * C2850 + C48877 * C2857) * C1089 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C393 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C48849 * C261 +
          ((((C8342 + C8341 + C8340) * C9219 +
             (C8339 + C8338 + C8337) * C48780) *
                C49208 +
            ((C10331 + C10332 + C10333) * C9219 +
             (C10334 + C10335 + C10336) * C48780) *
                C49197 +
            ((C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
              C7916 * C10275 + C49172 * C10278) *
                 C9219 +
             (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
              C7916 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C525 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C525 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C527 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C48866 * C525 -
           ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
             (C113 * C2380 + C48877 * C2390) * C1081 +
             (C113 * C2372 + C48877 * C2378) * C1087) *
                C49175 +
            (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
             (C113 * C703 + C48877 * C712) * C1081 +
             (C113 * C697 + C48877 * C702) * C1087) *
                C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C48866 * C49167) *
              C527 +
          (((C311 * C1087 + C310 * C1081 + C309 * C1088 + C308 * C1082 +
             C307 * C1089 + C306 * C49159) *
                C49208 +
            (C2701 * C1087 + C2700 * C1081 + C2699 * C1088 + C2698 * C1082 +
             (C113 * C700 + C48877 * C708) * C1089 +
             (C113 * C709 + C48877 * C715) * C49159) *
                C49197 +
            (C2697 * C1087 + C2696 * C1081 + C2695 * C1088 + C2694 * C1082 +
             (C113 * C2673 + C48877 * C2674) * C1089 +
             (C113 * C2675 + C48877 * C2676) * C49159) *
                C49175) *
               C48866 * C49167 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C525 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C525 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C48866 * C525 -
           (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
              C7914 * C2380 + C7908 * C2390) *
                 C48780 +
             (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
              C7914 * C2372 + C7908 * C2378) *
                 C9219) *
                C49175 +
            ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
              C7914 * C703 + C7908 * C712) *
                 C48780 +
             (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
              C7914 * C697 + C7908 * C702) *
                 C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C48866 * C49167) *
              C527 +
          ((((C8160 + C8159 + C8158) * C9219 +
             (C8157 + C8156 + C8155) * C48780) *
                C49208 +
            ((C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
              C7916 * C1959 + C49172 * C1963) *
                 C9219 +
             (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
              C7916 * C1964 + C49172 * C1968) *
                 C48780) *
                C49197 +
            ((C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C9219 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48780) *
                C49175) *
               C48866 * C49167 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C591 -
          ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
           (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
           (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
            C1084 * C277 + C49207 * C285) *
               C1081 +
           (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
            C1084 * C267 + C49207 * C278) *
               C1087) *
              C48895 * C48866 * C592 +
          ((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
            C1086 * C1800 + C49172 * C1803) *
               C1087 +
           (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
            C1086 * C1804 + C49172 * C1809) *
               C1081 +
           (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
            C1086 * C1801 + C49172 * C1805) *
               C1088 +
           (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
            C1086 * C1806 + C49172 * C1810) *
               C1082 +
           (C1084 * C597 + C49207 * C604 + C1085 * C1294 + C49195 * C1299 +
            C1086 * C1802 + C49172 * C1807) *
               C1089 +
           (C1084 * C605 + C49207 * C612 + C1085 * C1298 + C49195 * C1306 +
            C1086 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C591 -
          (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 + C308 * C104 +
           C309 * C116 + C310 * C103 + C311 * C115 +
           (C113 * C277 + C48877 * C285) * C102 +
           (C113 * C267 + C48877 * C278) * C114) *
              C48895 * C48866 * C592 +
          ((C113 * C595 + C48877 * C600) * C114 +
           (C113 * C601 + C48877 * C610) * C102 +
           (C113 * C596 + C48877 * C602) * C115 +
           (C113 * C603 + C48877 * C611) * C103 +
           (C113 * C597 + C48877 * C604) * C116 +
           (C113 * C605 + C48877 * C612) * C104 +
           (C113 * C598 + C48877 * C606) * C117 +
           (C113 * C607 + C48877 * C613) * C105 +
           (C113 * C599 + C48877 * C608) * C118 +
           (C113 * C609 + C48877 * C614) * C106) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
           (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
              C48866 * C591 -
          ((C2694 * C49159 + C2695 * C1089 + C2696 * C1082 + C2697 * C1088 +
            (C113 * C2380 + C48877 * C2390) * C1081 +
            (C113 * C2372 + C48877 * C2378) * C1087) *
               C49175 +
           (C2698 * C49159 + C2699 * C1089 + C2700 * C1082 + C2701 * C1088 +
            (C113 * C703 + C48877 * C712) * C1081 +
            (C113 * C697 + C48877 * C702) * C1087) *
               C49197 +
           (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
            (C113 * C277 + C48877 * C285) * C1081 +
            (C113 * C267 + C48877 * C278) * C1087) *
               C49208) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C1087 +
            (C113 * C601 + C48877 * C610) * C1081 +
            (C113 * C596 + C48877 * C602) * C1088 +
            (C113 * C603 + C48877 * C611) * C1082 +
            (C113 * C597 + C48877 * C604) * C1089 +
            (C113 * C605 + C48877 * C612) * C49159) *
               C49208 +
           ((C113 * C1494 + C48877 * C1501) * C1087 +
            (C113 * C1500 + C48877 * C1506) * C1081 +
            (C113 * C1493 + C48877 * C1499) * C1088 +
            (C113 * C1498 + C48877 * C1505) * C1082 +
            (C113 * C1492 + C48877 * C1497) * C1089 +
            (C113 * C1496 + C48877 * C1504) * C49159) *
               C49197 +
           ((C113 * C2373 + C48877 * C2379) * C1087 +
            (C113 * C2381 + C48877 * C2391) * C1081 +
            (C113 * C2375 + C48877 * C2383) * C1088 +
            (C113 * C2385 + C48877 * C2393) * C1082 +
            (C113 * C2377 + C48877 * C2387) * C1089 +
            (C113 * C2389 + C48877 * C2395) * C49159) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C591 -
          ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
           (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
           (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
            C7914 * C277 + C7908 * C285) *
               C49204 +
           (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
            C7914 * C267 + C7908 * C278) *
               C7917) *
              C48895 * C48866 * C592 +
          ((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
            C7916 * C1800 + C49172 * C1803) *
               C7917 +
           (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
            C7916 * C1804 + C49172 * C1809) *
               C49204 +
           (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
            C7916 * C1801 + C49172 * C1805) *
               C7918 +
           (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
            C7916 * C1806 + C49172 * C1810) *
               C49191 +
           (C7914 * C597 + C7908 * C604 + C7915 * C1294 + C7909 * C1299 +
            C7916 * C1802 + C49172 * C1807) *
               C7919 +
           (C7914 * C605 + C7908 * C612 + C7915 * C1298 + C7909 * C1306 +
            C7916 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C591 -
          ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
            C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
            C9214 * C277 + C9208 * C285) *
               C48780 +
           (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
            C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
            C9214 * C267 + C9208 * C278) *
               C9219) *
              C48895 * C48866 * C592 +
          ((C9214 * C595 + C9208 * C600 + C9215 * C1296 + C9209 * C1303 +
            C9216 * C1800 + C9210 * C1803 + C9217 * C9302 + C9211 * C9305 +
            C9218 * C9544 + C9212 * C9545) *
               C9219 +
           (C9214 * C601 + C9208 * C610 + C9215 * C1302 + C9209 * C1308 +
            C9216 * C1804 + C9210 * C1809 + C9217 * C9304 + C9211 * C9308 +
            C9218 * C9546 + C9212 * C9547) *
               C48780) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C10319 + C10320 + C10321) * C9219 +
            (C10322 + C10323 + C10324) * C48780) *
               C49197 +
           ((C10325 + C10326 + C10327) * C9219 +
            (C10328 + C10329 + C10330) * C48780) *
               C49175) *
              C48866 * C591 -
          (((C7916 * C9864 + C49172 * C9866 + C7915 * C2381 + C7909 * C2391 +
             C7914 * C2380 + C7908 * C2390) *
                C48780 +
            (C7916 * C9860 + C49172 * C9862 + C7915 * C2373 + C7909 * C2379 +
             C7914 * C2372 + C7908 * C2378) *
                C9219) *
               C49175 +
           ((C7916 * C1962 + C49172 * C1967 + C7915 * C1500 + C7909 * C1506 +
             C7914 * C703 + C7908 * C712) *
                C48780 +
            (C7916 * C1958 + C49172 * C1961 + C7915 * C1494 + C7909 * C1501 +
             C7914 * C697 + C7908 * C702) *
                C9219) *
               C49197 +
           ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C48780 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C9219) *
               C49208) *
              C48866 * C592 +
          (((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
             C7916 * C1800 + C49172 * C1803) *
                C9219 +
            (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
             C7916 * C1804 + C49172 * C1809) *
                C48780) *
               C49208 +
           ((C7914 * C1494 + C7908 * C1501 + C7915 * C1958 + C7909 * C1961 +
             C7916 * C9392 + C49172 * C9395) *
                C9219 +
            (C7914 * C1500 + C7908 * C1506 + C7915 * C1962 + C7909 * C1967 +
             C7916 * C9394 + C49172 * C9398) *
                C48780) *
               C49197 +
           ((C7914 * C2373 + C7908 * C2379 + C7915 * C9860 + C7909 * C9862 +
             C7916 * C9861 + C49172 * C9863) *
                C9219 +
            (C7914 * C2381 + C7908 * C2391 + C7915 * C9864 + C7909 * C9866 +
             C7916 * C9865 + C49172 * C9867) *
                C48780) *
               C49175) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C525 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C525 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C393 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C525 +
          (((C3346 + C3347 + C3330 + C3331 + C3332 + C3333) * C49208 +
            (C3348 + C3349 + C3338 + C3339 + C3340 + C3341) * C49197 +
            ((C113 * C3313 + C48877 * C3316) * C1087 +
             (C113 * C3317 + C48877 * C3322) * C1081 +
             (C113 * C3314 + C48877 * C3318) * C1088 +
             (C113 * C3319 + C48877 * C3323) * C1082 +
             (C113 * C3315 + C48877 * C3320) * C1089 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C3341 + C3340 + C3339 + C3338 + C3349 + C3348) * C49175 +
            (C3333 + C3332 + C3331 + C3330 + C3347 + C3346) * C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C525 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C525 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C393 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C525 +
          ((((C10767 + C10768 + C10769) * C9219 +
             (C10770 + C10771 + C10772) * C48780) *
                C49208 +
            ((C10773 + C10774 + C10775) * C9219 +
             (C10776 + C10777 + C10778) * C48780) *
                C49197 +
            ((C7914 * C3313 + C7908 * C3316 + C7915 * C10274 + C7909 * C10277 +
              C7916 * C10738 + C49172 * C10739) *
                 C9219 +
             (C7914 * C3317 + C7908 * C3322 + C7915 * C10276 + C7909 * C10280 +
              C7916 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10778 + C10777 + C10776) * C48780 +
             (C10775 + C10774 + C10773) * C9219) *
                C49175 +
            ((C10772 + C10771 + C10770) * C48780 +
             (C10769 + C10768 + C10767) * C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C527 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C48849 * C527 +
          (((C2888 + C2889 + C2890 + C2891 + C2892 + C2893) * C49208 +
            (C2894 + C2895 + C2896 + C2897 + C2898 + C2899) * C49197 +
            (C2907 * C1087 + C2906 * C1081 + C2905 * C1088 + C2904 * C1082 +
             (C113 * C2850 + C48877 * C2857) * C1089 +
             (C113 * C2858 + C48877 * C2862) * C49159) *
                C49175) *
               C49169 -
           ((C2899 + C2898 + C2897 + C2896 + C2895 + C2894) * C49175 +
            (C2893 + C2892 + C2891 + C2890 + C2889 + C2888) * C49197 +
            (C173 * C49159 + C172 * C1089 + C171 * C1082 + C170 * C1088 +
             C169 * C1081 + C168 * C1087) *
                C49208) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C799 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C48849 * C527 +
          ((((C8342 + C8341 + C8340) * C9219 +
             (C8339 + C8338 + C8337) * C48780) *
                C49208 +
            ((C10331 + C10332 + C10333) * C9219 +
             (C10334 + C10335 + C10336) * C48780) *
                C49197 +
            ((C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
              C7916 * C10275 + C49172 * C10278) *
                 C9219 +
             (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
              C7916 * C10279 + C49172 * C10281) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10336 + C10335 + C10334) * C48780 +
             (C10333 + C10332 + C10331) * C9219) *
                C49175 +
            ((C8337 + C8338 + C8339) * C48780 +
             (C8340 + C8341 + C8342) * C9219) *
                C49197 +
            ((C7962 + C7961 + C7960) * C48780 +
             (C7959 + C7958 + C7957) * C9219) *
                C49208) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C259 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C259 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C1087 +
             (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
             C169 * C1082 + C170 * C1089 + C171 * C49159) *
                C49208 +
            (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
            (C2910 + C2911 + C2876 + C2877 + C2878 + C2879) * C49175) *
               C799 -
           ((C2904 * C49159 + C2905 * C1089 + C2906 * C1082 + C2907 * C1088 +
             (C113 * C2855 + C48877 * C2861) * C1081 +
             (C113 * C2849 + C48877 * C2856) * C1087) *
                C49175 +
            (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
            (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
               C49169) *
              C259 +
          (((C3346 + C3347 + C3330 + C3331 + C3332 + C3333) * C49208 +
            (C3348 + C3349 + C3338 + C3339 + C3340 + C3341) * C49197 +
            ((C113 * C3313 + C48877 * C3316) * C1087 +
             (C113 * C3317 + C48877 * C3322) * C1081 +
             (C113 * C3314 + C48877 * C3318) * C1088 +
             (C113 * C3319 + C48877 * C3323) * C1082 +
             (C113 * C3315 + C48877 * C3320) * C1089 +
             (C113 * C3321 + C48877 * C3324) * C49159) *
                C49175) *
               C49169 -
           ((C3341 + C3340 + C3339 + C3338 + C3349 + C3348) * C49175 +
            (C3333 + C3332 + C3331 + C3330 + C3347 + C3346) * C49197 +
            (C308 * C49159 + C309 * C1089 + C310 * C1082 + C311 * C1088 +
             (C113 * C277 + C48877 * C285) * C1081 +
             (C113 * C267 + C48877 * C278) * C1087) *
                C49208) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C259 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C259 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C9219 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C48780) *
                C49208 +
            ((C10319 + C10320 + C10321) * C9219 +
             (C10322 + C10323 + C10324) * C48780) *
                C49197 +
            ((C10325 + C10326 + C10327) * C9219 +
             (C10328 + C10329 + C10330) * C48780) *
                C49175) *
               C799 -
           (((C7916 * C10276 + C49172 * C10280 + C7915 * C3317 + C7909 * C3322 +
              C7914 * C2855 + C7908 * C2861) *
                 C48780 +
             (C7916 * C10274 + C49172 * C10277 + C7915 * C3313 + C7909 * C3316 +
              C7914 * C2849 + C7908 * C2856) *
                 C9219) *
                C49175 +
            ((C10330 + C10329 + C10328) * C48780 +
             (C10327 + C10326 + C10325) * C9219) *
                C49197 +
            ((C10324 + C10323 + C10322) * C48780 +
             (C10321 + C10320 + C10319) * C9219) *
                C49208) *
               C49169) *
              C259 +
          ((((C10767 + C10768 + C10769) * C9219 +
             (C10770 + C10771 + C10772) * C48780) *
                C49208 +
            ((C10773 + C10774 + C10775) * C9219 +
             (C10776 + C10777 + C10778) * C48780) *
                C49197 +
            ((C7914 * C3313 + C7908 * C3316 + C7915 * C10274 + C7909 * C10277 +
              C7916 * C10738 + C49172 * C10739) *
                 C9219 +
             (C7914 * C3317 + C7908 * C3322 + C7915 * C10276 + C7909 * C10280 +
              C7916 * C10740 + C49172 * C10741) *
                 C48780) *
                C49175) *
               C49169 -
           (((C10778 + C10777 + C10776) * C48780 +
             (C10775 + C10774 + C10773) * C9219) *
                C49175 +
            ((C10772 + C10771 + C10770) * C48780 +
             (C10769 + C10768 + C10767) * C9219) *
                C49197 +
            ((C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C48780 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C9219) *
                C49208) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C945 -
          ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
           (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
           (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
            C1084 * C409 + C49207 * C417) *
               C1081 +
           (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
            C1084 * C399 + C49207 * C410) *
               C1087) *
              C48895 * C946 +
          ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
            C1086 * C2373 + C49172 * C2379) *
               C1087 +
           (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
            C1086 * C2381 + C49172 * C2391) *
               C1081 +
           (C1084 * C949 + C49207 * C955 + C1085 * C2374 + C49195 * C2382 +
            C1086 * C2375 + C49172 * C2383) *
               C1088 +
           (C1084 * C956 + C49207 * C964 + C1085 * C2384 + C49195 * C2392 +
            C1086 * C2385 + C49172 * C2393) *
               C1082 +
           (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
            C1086 * C2377 + C49172 * C2387) *
               C1089 +
           (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
            C1086 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C945 -
          (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 + C440 * C104 +
           C441 * C116 + C442 * C103 + C443 * C115 +
           (C113 * C409 + C48877 * C417) * C102 +
           (C113 * C399 + C48877 * C410) * C114) *
              C48895 * C946 +
          ((C113 * C948 + C48877 * C953) * C114 +
           (C113 * C954 + C48877 * C963) * C102 +
           (C113 * C949 + C48877 * C955) * C115 +
           (C113 * C956 + C48877 * C964) * C103 +
           (C113 * C950 + C48877 * C957) * C116 +
           (C113 * C958 + C48877 * C965) * C104 +
           (C113 * C951 + C48877 * C959) * C117 +
           (C113 * C960 + C48877 * C966) * C105 +
           (C113 * C952 + C48877 * C961) * C118 +
           (C113 * C962 + C48877 * C967) * C106) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C1087 +
            (C113 * C127 + C48877 * C140) * C1081 + C168 * C1088 +
            C169 * C1082 + C170 * C1089 + C171 * C49159) *
               C49208 +
           (C2908 + C2909 + C2868 + C2869 + C2870 + C2871) * C49197 +
           C3780 * C49175) *
              C945 -
          ((C3765 + C3766 + C3767 + C3768 + C3777 + C3778) * C49175 +
           (C2879 + C2878 + C2877 + C2876 + C2911 + C2910) * C49197 +
           (C2871 + C2870 + C2869 + C2868 + C2909 + C2908) * C49208) *
              C946 +
          (C3780 * C49208 +
           (C3778 + C3777 + C3768 + C3767 + C3766 + C3765) * C49197 +
           ((C113 * C3751 + C48877 * C3754) * C1087 +
            (C113 * C3755 + C48877 * C3760) * C1081 +
            (C113 * C3752 + C48877 * C3756) * C1088 +
            (C113 * C3757 + C48877 * C3761) * C1082 +
            (C113 * C3753 + C48877 * C3758) * C1089 +
            (C113 * C3759 + C48877 * C3762) * C49159) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C945 -
          ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
           (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
           (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
            C7914 * C409 + C7908 * C417) *
               C49204 +
           (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
            C7914 * C399 + C7908 * C410) *
               C7917) *
              C48895 * C946 +
          ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
            C7916 * C2373 + C49172 * C2379) *
               C7917 +
           (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
            C7916 * C2381 + C49172 * C2391) *
               C49204 +
           (C7914 * C949 + C7908 * C955 + C7915 * C2374 + C7909 * C2382 +
            C7916 * C2375 + C49172 * C2383) *
               C7918 +
           (C7914 * C956 + C7908 * C964 + C7915 * C2384 + C7909 * C2392 +
            C7916 * C2385 + C49172 * C2393) *
               C49191 +
           (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
            C7916 * C2377 + C49172 * C2387) *
               C7919 +
           (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
            C7916 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C945 -
          ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
            C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
            C9214 * C409 + C9208 * C417) *
               C48780 +
           (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
            C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
            C9214 * C399 + C9208 * C410) *
               C9219) *
              C48895 * C946 +
          ((C9214 * C948 + C9208 * C953 + C9215 * C2372 + C9209 * C2378 +
            C9216 * C2373 + C9210 * C2379 + C9217 * C9860 + C9211 * C9862 +
            C9218 * C9861 + C9212 * C9863) *
               C9219 +
           (C9214 * C954 + C9208 * C963 + C9215 * C2380 + C9209 * C2390 +
            C9216 * C2381 + C9210 * C2391 + C9217 * C9864 + C9211 * C9866 +
            C9218 * C9865 + C9212 * C9867) *
               C48780) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C9219 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C48780) *
               C49208 +
           ((C10319 + C10320 + C10321) * C9219 +
            (C10322 + C10323 + C10324) * C48780) *
               C49197 +
           C11213 * C49175) *
              C945 -
          (((C11205 + C11206 + C11207) * C48780 +
            (C11208 + C11209 + C11210) * C9219) *
               C49175 +
           ((C10330 + C10329 + C10328) * C48780 +
            (C10327 + C10326 + C10325) * C9219) *
               C49197 +
           ((C10324 + C10323 + C10322) * C48780 +
            (C10321 + C10320 + C10319) * C9219) *
               C49208) *
              C946 +
          (C11213 * C49208 +
           ((C11210 + C11209 + C11208) * C9219 +
            (C11207 + C11206 + C11205) * C48780) *
               C49197 +
           ((C7914 * C3751 + C7908 * C3754 + C7915 * C11180 + C7909 * C11182 +
             C7916 * C11181 + C49172 * C11183) *
                C9219 +
            (C7914 * C3755 + C7908 * C3760 + C7915 * C11184 + C7909 * C11186 +
             C7916 * C11185 + C49172 * C11187) *
                C48780) *
               C49175) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C2900 * C3886 + C2901 * C3880 + C443 * C3887 + C442 * C3881 +
            C441 * C3888 + C440 * C3882 + C439 * C3889 + C438 * C49176) *
               C48982) *
              C48866 * C48849 * C110 -
          ((C436 * C49176 + C437 * C3889 + C438 * C3882 + C439 * C3888 +
            C440 * C3881 + C441 * C3887 + C442 * C3880 + C443 * C3886) *
               C48982 +
           (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
            C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C170 * C3886 + C171 * C3880 + C172 * C3887 + C173 * C3881 +
            C174 * C3888 + C175 * C3882 + C177 * C3889 + C176 * C49176) *
               C49140 +
           (C441 * C3886 + C440 * C3880 + C439 * C3887 + C438 * C3881 +
            C437 * C3888 + C436 * C3882 +
            (C113 * C400 + C48877 * C411) * C3889 +
            (C113 * C412 + C48877 * C418) * C49176) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 +
            (C8342 + C8341 + C8340) * C47890 +
            (C8339 + C8338 + C8337) * C48790) *
               C48982) *
              C48866 * C48849 * C110 -
          (((C8331 + C8332 + C8333) * C48790 +
            (C8334 + C8335 + C8336) * C47890 +
            (C8337 + C8338 + C8339) * C49117 +
            (C8340 + C8341 + C8342) * C47909) *
               C48982 +
           ((C7968 + C7967 + C7966) * C48790 +
            (C7965 + C7964 + C7963) * C47890 +
            (C7962 + C7961 + C7960) * C49117 +
            (C7959 + C7958 + C7957) * C47909) *
               C49140) *
              C48866 * C48849 * C111 +
          ((C7977 * C47909 + C7978 * C49117 + (C7974 + C7973 + C7972) * C47890 +
            (C7971 + C7970 + C7969) * C48790) *
               C49140 +
           ((C8336 + C8335 + C8334) * C47909 +
            (C8333 + C8332 + C8331) * C49117 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C47890 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C48790) *
               C48982) *
              C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C2900 * C3886 + C2901 * C3880 + C443 * C3887 + C442 * C3881 +
             C441 * C3888 + C440 * C3882 + C439 * C3889 + C438 * C49176) *
                C48982) *
               C48866 * C259 -
           ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
             C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C48866 * C49167) *
              C261 +
          (((C311 * C3886 + C310 * C3880 + C309 * C3887 + C308 * C3881 +
             C307 * C3888 + C306 * C3882 + C305 * C3889 + C304 * C49176) *
                C49140 +
            (C2701 * C3886 + C2700 * C3880 + C2699 * C3887 + C2698 * C3881 +
             C5226 * C3888 + C5225 * C3882 +
             (C113 * C701 + C48877 * C710) * C3889 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C436 * C49176 + C437 * C3889 + C438 * C3882 + C439 * C3888 +
             C440 * C3881 + C441 * C3887 + C442 * C3880 + C443 * C3886) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 +
             (C8342 + C8341 + C8340) * C47890 +
             (C8339 + C8338 + C8337) * C48790) *
                C48982) *
               C48866 * C259 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C48866 * C49167) *
              C261 +
          ((((C8160 + C8159 + C8158) * C47909 +
             (C8157 + C8156 + C8155) * C49117 +
             (C8154 + C8153 + C8152) * C47890 +
             (C8151 + C8150 + C8149) * C48790) *
                C49140 +
            ((C12753 + C12752 + C12751) * C47909 +
             (C12750 + C12749 + C12748) * C49117 +
             (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
              C7916 * C1960 + C49172 * C1965) *
                 C47890 +
             (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
              C7916 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 +
             (C8337 + C8338 + C8339) * C49117 +
             (C8340 + C8341 + C8342) * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C5365 + C5366 + C5367 + C5368 + C5369 + C5370 + C5371 + C5372) *
                C49140 +
            (C2522 * C3886 + C2523 * C3880 + C2524 * C3887 + C2525 * C3881 +
             C2527 * C3888 + C2526 * C3882 +
             (C113 * C952 + C48877 * C961) * C3889 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C393 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C48849 * C261 +
          (((C12952 * C47909 + C12953 * C49117 +
             (C8336 + C8335 + C8334) * C47890 +
             (C8333 + C8332 + C8331) * C48790) *
                C49140 +
            ((C10331 + C10332 + C10333) * C47909 +
             (C10334 + C10335 + C10336) * C49117 +
             (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
              C7916 * C2377 + C49172 * C2387) *
                 C47890 +
             (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
              C7916 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C48866 * C525 -
           ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
             C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C48866 * C49167) *
              C527 +
          (((C311 * C3886 + C310 * C3880 + C309 * C3887 + C308 * C3881 +
             C307 * C3888 + C306 * C3882 + C305 * C3889 + C304 * C49176) *
                C49140 +
            (C2701 * C3886 + C2700 * C3880 + C2699 * C3887 + C2698 * C3881 +
             C5226 * C3888 + C5225 * C3882 +
             (C113 * C701 + C48877 * C710) * C3889 +
             (C113 * C711 + C48877 * C716) * C49176) *
                C48982) *
               C48866 * C49167 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C48866 * C525 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C48866 * C49167) *
              C527 +
          ((((C8160 + C8159 + C8158) * C47909 +
             (C8157 + C8156 + C8155) * C49117 +
             (C8154 + C8153 + C8152) * C47890 +
             (C8151 + C8150 + C8149) * C48790) *
                C49140 +
            ((C12753 + C12752 + C12751) * C47909 +
             (C12750 + C12749 + C12748) * C49117 +
             (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
              C7916 * C1960 + C49172 * C1965) *
                 C47890 +
             (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
              C7916 * C1966 + C49172 * C1969) *
                 C48790) *
                C48982) *
               C48866 * C49167 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
               C48982) *
              C48866 * C591 -
          ((C5225 * C49176 + C5226 * C3889 + C2698 * C3882 + C2699 * C3888 +
            C2700 * C3881 + C2701 * C3887 + C3343 * C3880 + C3342 * C3886) *
               C48982 +
           (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
            C310 * C3881 + C311 * C3887 +
            (C113 * C277 + C48877 * C285) * C3880 +
            (C113 * C267 + C48877 * C278) * C3886) *
               C49140) *
              C48866 * C592 +
          (((C113 * C595 + C48877 * C600) * C3886 +
            (C113 * C601 + C48877 * C610) * C3880 +
            (C113 * C596 + C48877 * C602) * C3887 +
            (C113 * C603 + C48877 * C611) * C3881 +
            (C113 * C597 + C48877 * C604) * C3888 +
            (C113 * C605 + C48877 * C612) * C3882 +
            (C113 * C598 + C48877 * C606) * C3889 +
            (C113 * C607 + C48877 * C613) * C49176) *
               C49140 +
           ((C113 * C1494 + C48877 * C1501) * C3886 +
            (C113 * C1500 + C48877 * C1506) * C3880 +
            (C113 * C1493 + C48877 * C1499) * C3887 +
            (C113 * C1498 + C48877 * C1505) * C3881 +
            (C113 * C1492 + C48877 * C1497) * C3888 +
            (C113 * C1496 + C48877 * C1504) * C3882 +
            (C113 * C1495 + C48877 * C1502) * C3889 +
            (C113 * C1503 + C48877 * C1507) * C49176) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
            C12953 * C48790) *
               C48982) *
              C48866 * C591 -
          (((C12748 + C12749 + C12750) * C48790 +
            (C12751 + C12752 + C12753) * C47890 +
            (C10772 + C10771 + C10770) * C49117 +
            (C10769 + C10768 + C10767) * C47909) *
               C48982 +
           ((C8155 + C8156 + C8157) * C48790 +
            (C8158 + C8159 + C8160) * C47890 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49117 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C47909) *
               C49140) *
              C48866 * C592 +
          (((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
             C7916 * C1800 + C49172 * C1803) *
                C47909 +
            (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
             C7916 * C1804 + C49172 * C1809) *
                C49117 +
            (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
             C7916 * C1801 + C49172 * C1805) *
                C47890 +
            (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
             C7916 * C1806 + C49172 * C1810) *
                C48790) *
               C49140 +
           ((C7914 * C1494 + C7908 * C1501 + C7915 * C1958 + C7909 * C1961 +
             C7916 * C9392 + C49172 * C9395) *
                C47909 +
            (C7914 * C1500 + C7908 * C1506 + C7915 * C1962 + C7909 * C1967 +
             C7916 * C9394 + C49172 * C9398) *
                C49117 +
            (C7914 * C1493 + C7908 * C1499 + C7915 * C1959 + C7909 * C1963 +
             C7916 * C9393 + C49172 * C9396) *
                C47890 +
            (C7914 * C1498 + C7908 * C1505 + C7915 * C1964 + C7909 * C1968 +
             C7916 * C9397 + C49172 * C9399) *
                C48790) *
               C48982) *
              C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C393 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C525 +
          (((C5731 + C5732 + C5733 + C5734 + C5735 + C5736 + C5737 + C5738) *
                C49140 +
            (C3344 * C3886 + C3345 * C3880 + C2697 * C3887 + C2696 * C3881 +
             C2695 * C3888 + C2694 * C3882 +
             (C113 * C2673 + C48877 * C2674) * C3889 +
             (C113 * C2675 + C48877 * C2676) * C49176) *
                C48982) *
               C49169 -
           ((C5738 + C5737 + C5736 + C5735 + C5734 + C5733 + C5732 + C5731) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C393 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C525 +
          ((((C10767 + C10768 + C10769) * C47909 +
             (C10770 + C10771 + C10772) * C49117 +
             (C12753 + C12752 + C12751) * C47890 +
             (C12750 + C12749 + C12748) * C48790) *
                C49140 +
            ((C10773 + C10774 + C10775) * C47909 +
             (C10776 + C10777 + C10778) * C49117 +
             (C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C47890 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48790) *
                C48982) *
               C49169 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C5365 + C5366 + C5367 + C5368 + C5369 + C5370 + C5371 + C5372) *
                C49140 +
            (C2522 * C3886 + C2523 * C3880 + C2524 * C3887 + C2525 * C3881 +
             C2527 * C3888 + C2526 * C3882 +
             (C113 * C952 + C48877 * C961) * C3889 +
             (C113 * C962 + C48877 * C967) * C49176) *
                C48982) *
               C49169 -
           ((C5372 + C5371 + C5370 + C5369 + C5368 + C5367 + C5366 + C5365) *
                C48982 +
            (C175 * C49176 + C174 * C3889 + C173 * C3882 + C172 * C3888 +
             C171 * C3881 + C170 * C3887 + C169 * C3880 + C168 * C3886) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C799 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C48849 * C527 +
          (((C12952 * C47909 + C12953 * C49117 +
             (C8336 + C8335 + C8334) * C47890 +
             (C8333 + C8332 + C8331) * C48790) *
                C49140 +
            ((C10331 + C10332 + C10333) * C47909 +
             (C10334 + C10335 + C10336) * C49117 +
             (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
              C7916 * C2377 + C49172 * C2387) *
                 C47890 +
             (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
              C7916 * C2389 + C49172 * C2395) *
                 C48790) *
                C48982) *
               C49169 -
           (((C8331 + C8332 + C8333) * C48790 +
             (C8334 + C8335 + C8336) * C47890 + C12954 * C49117 +
             C12955 * C47909) *
                C48982 +
            ((C7968 + C7967 + C7966) * C48790 +
             (C7965 + C7964 + C7963) * C47890 +
             (C7962 + C7961 + C7960) * C49117 +
             (C7959 + C7958 + C7957) * C47909) *
                C49140) *
               C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48877 * C126) * C3886 +
             (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
             C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
             C173 * C49176) *
                C49140 +
            (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
                C48982) *
               C799 -
           ((C2526 * C49176 + C2527 * C3889 + C2525 * C3882 + C2524 * C3888 +
             C2523 * C3881 + C2522 * C3887 + C2903 * C3880 + C2902 * C3886) *
                C48982 +
            (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
                C49140) *
               C49169) *
              C259 +
          (((C5731 + C5732 + C5733 + C5734 + C5735 + C5736 + C5737 + C5738) *
                C49140 +
            (C3344 * C3886 + C3345 * C3880 + C2697 * C3887 + C2696 * C3881 +
             C2695 * C3888 + C2694 * C3882 +
             (C113 * C2673 + C48877 * C2674) * C3889 +
             (C113 * C2675 + C48877 * C2676) * C49176) *
                C48982) *
               C49169 -
           ((C5738 + C5737 + C5736 + C5735 + C5734 + C5733 + C5732 + C5731) *
                C48982 +
            (C306 * C49176 + C307 * C3889 + C308 * C3882 + C309 * C3888 +
             C310 * C3881 + C311 * C3887 +
             (C113 * C277 + C48877 * C285) * C3880 +
             (C113 * C267 + C48877 * C278) * C3886) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
              C7916 * C595 + C49172 * C600) *
                 C47909 +
             (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
              C7916 * C601 + C49172 * C610) *
                 C49117 +
             (C7957 + C7958 + C7959) * C47890 +
             (C7960 + C7961 + C7962) * C48790) *
                C49140 +
            ((C10319 + C10320 + C10321) * C47909 +
             (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
             C12953 * C48790) *
                C48982) *
               C799 -
           (((C10336 + C10335 + C10334) * C48790 +
             (C10333 + C10332 + C10331) * C47890 +
             (C10330 + C10329 + C10328) * C49117 +
             (C10327 + C10326 + C10325) * C47909) *
                C48982 +
            (C12954 * C48790 + C12955 * C47890 +
             (C10324 + C10323 + C10322) * C49117 +
             (C10321 + C10320 + C10319) * C47909) *
                C49140) *
               C49169) *
              C259 +
          ((((C10767 + C10768 + C10769) * C47909 +
             (C10770 + C10771 + C10772) * C49117 +
             (C12753 + C12752 + C12751) * C47890 +
             (C12750 + C12749 + C12748) * C48790) *
                C49140 +
            ((C10773 + C10774 + C10775) * C47909 +
             (C10776 + C10777 + C10778) * C49117 +
             (C7914 * C2374 + C7908 * C2382 + C7915 * C2375 + C7909 * C2383 +
              C7916 * C10124 + C49172 * C10125) *
                 C47890 +
             (C7914 * C2384 + C7908 * C2392 + C7915 * C2385 + C7909 * C2393 +
              C7916 * C10126 + C49172 * C10127) *
                 C48790) *
                C48982) *
               C49169 -
           (((C12748 + C12749 + C12750) * C48790 +
             (C12751 + C12752 + C12753) * C47890 +
             (C10772 + C10771 + C10770) * C49117 +
             (C10769 + C10768 + C10767) * C47909) *
                C48982 +
            ((C8155 + C8156 + C8157) * C48790 +
             (C8158 + C8159 + C8160) * C47890 +
             (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
              C7914 * C277 + C7908 * C285) *
                 C49117 +
             (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
              C7914 * C267 + C7908 * C278) *
                 C47909) *
                C49140) *
               C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C3886 +
            (C113 * C127 + C48877 * C140) * C3880 + C168 * C3887 +
            C169 * C3881 + C170 * C3888 + C171 * C3882 + C172 * C3889 +
            C173 * C49176) *
               C49140 +
           (C5357 + C5358 + C5359 + C5360 + C5361 + C5362 + C5363 + C5364) *
               C48982) *
              C945 -
          ((C6097 + C6098 + C6099 + C6100 + C6101 + C6102 + C6103 + C6104) *
               C48982 +
           (C5364 + C5363 + C5362 + C5361 + C5360 + C5359 + C5358 + C5357) *
               C49140) *
              C946 +
          ((C6104 + C6103 + C6102 + C6101 + C6100 + C6099 + C6098 + C6097) *
               C49140 +
           (C3775 * C3886 + C3774 * C3880 + C2907 * C3887 + C2906 * C3881 +
            C2905 * C3888 + C2904 * C3882 +
            (C113 * C2850 + C48877 * C2857) * C3889 +
            (C113 * C2858 + C48877 * C2862) * C49176) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C47909 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49117 +
            (C7957 + C7958 + C7959) * C47890 +
            (C7960 + C7961 + C7962) * C48790) *
               C49140 +
           ((C10319 + C10320 + C10321) * C47909 +
            (C10322 + C10323 + C10324) * C49117 + C12952 * C47890 +
            C12953 * C48790) *
               C48982) *
              C945 -
          (((C10336 + C10335 + C10334) * C48790 +
            (C10333 + C10332 + C10331) * C47890 +
            (C10330 + C10329 + C10328) * C49117 +
            (C10327 + C10326 + C10325) * C47909) *
               C48982 +
           (C12954 * C48790 + C12955 * C47890 +
            (C10324 + C10323 + C10322) * C49117 +
            (C10321 + C10320 + C10319) * C47909) *
               C49140) *
              C946 +
          ((C11203 * C47909 + C11204 * C49117 +
            (C10331 + C10332 + C10333) * C47890 +
            (C10334 + C10335 + C10336) * C48790) *
               C49140 +
           ((C11210 + C11209 + C11208) * C47909 +
            (C11207 + C11206 + C11205) * C49117 +
            (C7914 * C2848 + C7908 * C2854 + C7915 * C3314 + C7909 * C3318 +
             C7916 * C10275 + C49172 * C10278) *
                C47890 +
            (C7914 * C2853 + C7908 * C2860 + C7915 * C3319 + C7909 * C3323 +
             C7916 * C10279 + C49172 * C10281) *
                C48790) *
               C48982) *
              C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C48849 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C48895 * C48866 * C48849 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C48877 * C138) * C118 +
           (C113 * C139 + C48877 * C146) * C106) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
           (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
           (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
              C48895 * C48866 * C48849 * C111 +
          (C1147 * C1087 + C1148 * C1081 + (C1144 + C1143 + C1142) * C1088 +
           (C1141 + C1140 + C1139) * C1082 +
           (C1084 * C123 + C49207 * C134 + C1085 * C263 + C49195 * C270 +
            C1086 * C599 + C49172 * C608) *
               C1089 +
           (C1084 * C135 + C49207 * C144 + C1085 * C269 + C49195 * C281 +
            C1086 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C48849 * C110 -
          ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
           (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
           (C7962 + C7961 + C7960) * C49204 + (C7959 + C7958 + C7957) * C7917) *
              C48895 * C48866 * C48849 * C111 +
          (C7977 * C7917 + C7978 * C49204 + (C7974 + C7973 + C7972) * C7918 +
           (C7971 + C7970 + C7969) * C49191 +
           (C7914 * C123 + C7908 * C134 + C7915 * C263 + C7909 * C270 +
            C7916 * C599 + C49172 * C608) *
               C7919 +
           (C7914 * C135 + C7908 * C144 + C7915 * C269 + C7909 * C281 +
            C7916 * C609 + C49172 * C614) *
               C49159) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C48849 * C110 -
          ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
            C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
            C9214 * C129 + C9208 * C141) *
               C48780 +
           (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
            C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
            C9214 * C120 + C9208 * C128) *
               C9219) *
              C48895 * C48866 * C48849 * C111 +
          ((C9214 * C121 + C9208 * C130 + C9215 * C265 + C9209 * C274 +
            C9216 * C597 + C9210 * C604 + C9217 * C1294 + C9211 * C1299 +
            C9218 * C1802 + C9212 * C1807) *
               C9219 +
           (C9214 * C131 + C9208 * C142 + C9215 * C273 + C9209 * C283 +
            C9216 * C605 + C9210 * C612 + C9217 * C1298 + C9211 * C1306 +
            C9218 * C1808 + C9212 * C1811) *
               C48780) *
              C48895 * C48866 * C48849 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C259 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C261 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C259 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C259 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C259 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C261 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C259) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C261 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C261 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C393) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C48866 * C525 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C48866 * C49167) *
              C527 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C48877 * C279) * C118 +
            (C113 * C280 + C48877 * C286) * C106) *
               C48895 * C48866 * C49167 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C48866 * C525 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C1346 + C1345 + C1344) * C1087 + (C1343 + C1342 + C1341) * C1081 +
            (C1340 + C1339 + C1338) * C1088 + (C1337 + C1336 + C1335) * C1082 +
            (C1084 * C264 + C49207 * C272 + C1085 * C598 + C49195 * C606 +
             C1086 * C1297 + C49172 * C1304) *
                C1089 +
            (C1084 * C271 + C49207 * C282 + C1085 * C607 + C49195 * C613 +
             C1086 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C48866 * C525 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C8160 + C8159 + C8158) * C7917 + (C8157 + C8156 + C8155) * C49204 +
            (C8154 + C8153 + C8152) * C7918 + (C8151 + C8150 + C8149) * C49191 +
            (C7914 * C264 + C7908 * C272 + C7915 * C598 + C7909 * C606 +
             C7916 * C1297 + C49172 * C1304) *
                C7919 +
            (C7914 * C271 + C7908 * C282 + C7915 * C607 + C7909 * C613 +
             C7916 * C1305 + C49172 * C1309) *
                C49159) *
               C48895 * C48866 * C49167 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C48866 * C525 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C48866 * C49167) *
              C527 +
          (((C9214 * C266 + C9208 * C276 + C9215 * C596 + C9209 * C602 +
             C9216 * C1295 + C9210 * C1301 + C9217 * C1801 + C9211 * C1805 +
             C9218 * C9303 + C9212 * C9306) *
                C9219 +
            (C9214 * C275 + C9208 * C284 + C9215 * C603 + C9209 * C611 +
             C9216 * C1300 + C9210 * C1307 + C9217 * C1806 + C9211 * C1810 +
             C9218 * C9307 + C9212 * C9309) *
                C48780) *
               C48895 * C48866 * C49167 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C48866 * C525) *
              C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C48866 * C591 -
          (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 + C308 * C104 +
           C309 * C116 + C310 * C103 + C311 * C115 +
           (C113 * C277 + C48877 * C285) * C102 +
           (C113 * C267 + C48877 * C278) * C114) *
              C48895 * C48866 * C592 +
          ((C113 * C595 + C48877 * C600) * C114 +
           (C113 * C601 + C48877 * C610) * C102 +
           (C113 * C596 + C48877 * C602) * C115 +
           (C113 * C603 + C48877 * C611) * C103 +
           (C113 * C597 + C48877 * C604) * C116 +
           (C113 * C605 + C48877 * C612) * C104 +
           (C113 * C598 + C48877 * C606) * C117 +
           (C113 * C607 + C48877 * C613) * C105 +
           (C113 * C599 + C48877 * C608) * C118 +
           (C113 * C609 + C48877 * C614) * C106) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C48866 * C591 -
          ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
           (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
           (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
            C1084 * C277 + C49207 * C285) *
               C1081 +
           (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
            C1084 * C267 + C49207 * C278) *
               C1087) *
              C48895 * C48866 * C592 +
          ((C1084 * C595 + C49207 * C600 + C1085 * C1296 + C49195 * C1303 +
            C1086 * C1800 + C49172 * C1803) *
               C1087 +
           (C1084 * C601 + C49207 * C610 + C1085 * C1302 + C49195 * C1308 +
            C1086 * C1804 + C49172 * C1809) *
               C1081 +
           (C1084 * C596 + C49207 * C602 + C1085 * C1295 + C49195 * C1301 +
            C1086 * C1801 + C49172 * C1805) *
               C1088 +
           (C1084 * C603 + C49207 * C611 + C1085 * C1300 + C49195 * C1307 +
            C1086 * C1806 + C49172 * C1810) *
               C1082 +
           (C1084 * C597 + C49207 * C604 + C1085 * C1294 + C49195 * C1299 +
            C1086 * C1802 + C49172 * C1807) *
               C1089 +
           (C1084 * C605 + C49207 * C612 + C1085 * C1298 + C49195 * C1306 +
            C1086 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C48866 * C591 -
          ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
           (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
           (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
            C7914 * C277 + C7908 * C285) *
               C49204 +
           (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
            C7914 * C267 + C7908 * C278) *
               C7917) *
              C48895 * C48866 * C592 +
          ((C7914 * C595 + C7908 * C600 + C7915 * C1296 + C7909 * C1303 +
            C7916 * C1800 + C49172 * C1803) *
               C7917 +
           (C7914 * C601 + C7908 * C610 + C7915 * C1302 + C7909 * C1308 +
            C7916 * C1804 + C49172 * C1809) *
               C49204 +
           (C7914 * C596 + C7908 * C602 + C7915 * C1295 + C7909 * C1301 +
            C7916 * C1801 + C49172 * C1805) *
               C7918 +
           (C7914 * C603 + C7908 * C611 + C7915 * C1300 + C7909 * C1307 +
            C7916 * C1806 + C49172 * C1810) *
               C49191 +
           (C7914 * C597 + C7908 * C604 + C7915 * C1294 + C7909 * C1299 +
            C7916 * C1802 + C49172 * C1807) *
               C7919 +
           (C7914 * C605 + C7908 * C612 + C7915 * C1298 + C7909 * C1306 +
            C7916 * C1808 + C49172 * C1811) *
               C49159) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C48866 * C591 -
          ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
            C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
            C9214 * C277 + C9208 * C285) *
               C48780 +
           (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
            C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
            C9214 * C267 + C9208 * C278) *
               C9219) *
              C48895 * C48866 * C592 +
          ((C9214 * C595 + C9208 * C600 + C9215 * C1296 + C9209 * C1303 +
            C9216 * C1800 + C9210 * C1803 + C9217 * C9302 + C9211 * C9305 +
            C9218 * C9544 + C9212 * C9545) *
               C9219 +
           (C9214 * C601 + C9208 * C610 + C9215 * C1302 + C9209 * C1308 +
            C9216 * C1804 + C9210 * C1809 + C9217 * C9304 + C9211 * C9308 +
            C9218 * C9546 + C9212 * C9547) *
               C48780) *
              C48895 * C48866 * C593) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C525 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C393 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C525 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C393 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C525 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C393 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C525 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C393) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C48849 * C527 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C48877 * C411) * C118 +
            (C113 * C412 + C48877 * C418) * C106) *
               C48895 * C49169 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C1544 + C1543 + C1542) * C1087 + (C1541 + C1540 + C1539) * C1081 +
            (C1538 + C1537 + C1536) * C1088 + (C1535 + C1534 + C1533) * C1082 +
            (C1084 * C396 + C49207 * C404 + C1085 * C700 + C49195 * C708 +
             C1086 * C1495 + C49172 * C1502) *
                C1089 +
            (C1084 * C403 + C49207 * C414 + C1085 * C709 + C49195 * C715 +
             C1086 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C1139 + C1140 + C1141) * C49159 + (C1142 + C1143 + C1144) * C1089 +
            (C1138 + C1137 + C1136) * C1082 + (C1135 + C1134 + C1133) * C1088 +
            (C1132 + C1131 + C1130) * C1081 + (C1129 + C1128 + C1127) * C1087) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C8342 + C8341 + C8340) * C7917 + (C8339 + C8338 + C8337) * C49204 +
            (C8336 + C8335 + C8334) * C7918 + (C8333 + C8332 + C8331) * C49191 +
            (C7914 * C396 + C7908 * C404 + C7915 * C700 + C7909 * C708 +
             C7916 * C1495 + C49172 * C1502) *
                C7919 +
            (C7914 * C403 + C7908 * C414 + C7915 * C709 + C7909 * C715 +
             C7916 * C1503 + C49172 * C1507) *
                C49159) *
               C48895 * C49169 -
           ((C7969 + C7970 + C7971) * C49159 + (C7972 + C7973 + C7974) * C7919 +
            (C7968 + C7967 + C7966) * C49191 + (C7965 + C7964 + C7963) * C7918 +
            (C7962 + C7961 + C7960) * C49204 +
            (C7959 + C7958 + C7957) * C7917) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C48849 * C527 +
          (((C9214 * C398 + C9208 * C408 + C9215 * C698 + C9209 * C704 +
             C9216 * C1493 + C9210 * C1499 + C9217 * C1959 + C9211 * C1963 +
             C9218 * C9393 + C9212 * C9396) *
                C9219 +
            (C9214 * C407 + C9208 * C416 + C9215 * C705 + C9209 * C713 +
             C9216 * C1498 + C9210 * C1505 + C9217 * C1964 + C9211 * C1968 +
             C9218 * C9397 + C9212 * C9399) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C1806 + C9212 * C1810 + C9217 * C1300 + C9211 * C1307 +
             C9216 * C603 + C9210 * C611 + C9215 * C275 + C9209 * C284 +
             C9214 * C129 + C9208 * C141) *
                C48780 +
            (C9218 * C1801 + C9212 * C1805 + C9217 * C1295 + C9211 * C1301 +
             C9216 * C596 + C9210 * C602 + C9215 * C266 + C9209 * C276 +
             C9214 * C120 + C9208 * C128) *
                C9219) *
               C48895 * C799) *
              C48849 * C49165)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48877 * C126) * C114 +
            (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48895 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C48877 * C417) * C102 +
            (C113 * C399 + C48877 * C410) * C114) *
               C48895 * C49169) *
              C259 +
          (((C113 * C697 + C48877 * C702) * C114 +
            (C113 * C703 + C48877 * C712) * C102 +
            (C113 * C698 + C48877 * C704) * C115 +
            (C113 * C705 + C48877 * C713) * C103 +
            (C113 * C699 + C48877 * C706) * C116 +
            (C113 * C707 + C48877 * C714) * C104 +
            (C113 * C700 + C48877 * C708) * C117 +
            (C113 * C709 + C48877 * C715) * C105 +
            (C113 * C701 + C48877 * C710) * C118 +
            (C113 * C711 + C48877 * C716) * C106) *
               C48895 * C49169 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C48877 * C285) * C102 +
            (C113 * C267 + C48877 * C278) * C114) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
             C1086 * C595 + C49172 * C600) *
                C1087 +
            (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
             C1086 * C601 + C49172 * C610) *
                C1081 +
            (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
            C1147 * C1089 + C1148 * C49159) *
               C48895 * C799 -
           ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
            (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
            (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
             C1084 * C409 + C49207 * C417) *
                C1081 +
            (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
             C1084 * C399 + C49207 * C410) *
                C1087) *
               C48895 * C49169) *
              C259 +
          (((C1084 * C697 + C49207 * C702 + C1085 * C1494 + C49195 * C1501 +
             C1086 * C1958 + C49172 * C1961) *
                C1087 +
            (C1084 * C703 + C49207 * C712 + C1085 * C1500 + C49195 * C1506 +
             C1086 * C1962 + C49172 * C1967) *
                C1081 +
            (C1084 * C698 + C49207 * C704 + C1085 * C1493 + C49195 * C1499 +
             C1086 * C1959 + C49172 * C1963) *
                C1088 +
            (C1084 * C705 + C49207 * C713 + C1085 * C1498 + C49195 * C1505 +
             C1086 * C1964 + C49172 * C1968) *
                C1082 +
            (C1084 * C699 + C49207 * C706 + C1085 * C1492 + C49195 * C1497 +
             C1086 * C1960 + C49172 * C1965) *
                C1089 +
            (C1084 * C707 + C49207 * C714 + C1085 * C1496 + C49195 * C1504 +
             C1086 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C1335 + C1336 + C1337) * C49159 + (C1338 + C1339 + C1340) * C1089 +
            (C1341 + C1342 + C1343) * C1082 + (C1344 + C1345 + C1346) * C1088 +
            (C1086 * C1302 + C49172 * C1308 + C1085 * C601 + C49195 * C610 +
             C1084 * C277 + C49207 * C285) *
                C1081 +
            (C1086 * C1296 + C49172 * C1303 + C1085 * C595 + C49195 * C600 +
             C1084 * C267 + C49207 * C278) *
                C1087) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
             C7916 * C595 + C49172 * C600) *
                C7917 +
            (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
             C7916 * C601 + C49172 * C610) *
                C49204 +
            (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
            C7977 * C7919 + C7978 * C49159) *
               C48895 * C799 -
           ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
            (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
            (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
             C7914 * C409 + C7908 * C417) *
                C49204 +
            (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
             C7914 * C399 + C7908 * C410) *
                C7917) *
               C48895 * C49169) *
              C259 +
          (((C7914 * C697 + C7908 * C702 + C7915 * C1494 + C7909 * C1501 +
             C7916 * C1958 + C49172 * C1961) *
                C7917 +
            (C7914 * C703 + C7908 * C712 + C7915 * C1500 + C7909 * C1506 +
             C7916 * C1962 + C49172 * C1967) *
                C49204 +
            (C7914 * C698 + C7908 * C704 + C7915 * C1493 + C7909 * C1499 +
             C7916 * C1959 + C49172 * C1963) *
                C7918 +
            (C7914 * C705 + C7908 * C713 + C7915 * C1498 + C7909 * C1505 +
             C7916 * C1964 + C49172 * C1968) *
                C49191 +
            (C7914 * C699 + C7908 * C706 + C7915 * C1492 + C7909 * C1497 +
             C7916 * C1960 + C49172 * C1965) *
                C7919 +
            (C7914 * C707 + C7908 * C714 + C7915 * C1496 + C7909 * C1504 +
             C7916 * C1966 + C49172 * C1969) *
                C49159) *
               C48895 * C49169 -
           ((C8149 + C8150 + C8151) * C49159 + (C8152 + C8153 + C8154) * C7919 +
            (C8155 + C8156 + C8157) * C49191 + (C8158 + C8159 + C8160) * C7918 +
            (C7916 * C1302 + C49172 * C1308 + C7915 * C601 + C7909 * C610 +
             C7914 * C277 + C7908 * C285) *
                C49204 +
            (C7916 * C1296 + C49172 * C1303 + C7915 * C595 + C7909 * C600 +
             C7914 * C267 + C7908 * C278) *
                C7917) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
             C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
             C9218 * C1800 + C9212 * C1803) *
                C9219 +
            (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
             C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
             C9218 * C1804 + C9212 * C1809) *
                C48780) *
               C48895 * C799 -
           ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
             C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
             C9214 * C409 + C9208 * C417) *
                C48780 +
            (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
             C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
             C9214 * C399 + C9208 * C410) *
                C9219) *
               C48895 * C49169) *
              C259 +
          (((C9214 * C697 + C9208 * C702 + C9215 * C1494 + C9209 * C1501 +
             C9216 * C1958 + C9210 * C1961 + C9217 * C9392 + C9211 * C9395 +
             C9218 * C9630 + C9212 * C9631) *
                C9219 +
            (C9214 * C703 + C9208 * C712 + C9215 * C1500 + C9209 * C1506 +
             C9216 * C1962 + C9210 * C1967 + C9217 * C9394 + C9211 * C9398 +
             C9218 * C9632 + C9212 * C9633) *
                C48780) *
               C48895 * C49169 -
           ((C9218 * C9304 + C9212 * C9308 + C9217 * C1804 + C9211 * C1809 +
             C9216 * C1302 + C9210 * C1308 + C9215 * C601 + C9209 * C610 +
             C9214 * C277 + C9208 * C285) *
                C48780 +
            (C9218 * C9302 + C9212 * C9305 + C9217 * C1800 + C9211 * C1803 +
             C9216 * C1296 + C9210 * C1303 + C9215 * C595 + C9209 * C600 +
             C9214 * C267 + C9208 * C278) *
                C9219) *
               C48895 * C799) *
              C49167) *
         C48815) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48877 * C126) * C114 +
           (C113 * C127 + C48877 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48895 * C945 -
          (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 + C440 * C104 +
           C441 * C116 + C442 * C103 + C443 * C115 +
           (C113 * C409 + C48877 * C417) * C102 +
           (C113 * C399 + C48877 * C410) * C114) *
              C48895 * C946 +
          ((C113 * C948 + C48877 * C953) * C114 +
           (C113 * C954 + C48877 * C963) * C102 +
           (C113 * C949 + C48877 * C955) * C115 +
           (C113 * C956 + C48877 * C964) * C103 +
           (C113 * C950 + C48877 * C957) * C116 +
           (C113 * C958 + C48877 * C965) * C104 +
           (C113 * C951 + C48877 * C959) * C117 +
           (C113 * C960 + C48877 * C966) * C105 +
           (C113 * C952 + C48877 * C961) * C118 +
           (C113 * C962 + C48877 * C967) * C106) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1084 * C119 + C49207 * C126 + C1085 * C267 + C49195 * C278 +
            C1086 * C595 + C49172 * C600) *
               C1087 +
           (C1084 * C127 + C49207 * C140 + C1085 * C277 + C49195 * C285 +
            C1086 * C601 + C49172 * C610) *
               C1081 +
           (C1127 + C1128 + C1129) * C1088 + (C1130 + C1131 + C1132) * C1082 +
           C1147 * C1089 + C1148 * C49159) *
              C48895 * C945 -
          ((C1533 + C1534 + C1535) * C49159 + (C1536 + C1537 + C1538) * C1089 +
           (C1539 + C1540 + C1541) * C1082 + (C1542 + C1543 + C1544) * C1088 +
           (C1086 * C1500 + C49172 * C1506 + C1085 * C703 + C49195 * C712 +
            C1084 * C409 + C49207 * C417) *
               C1081 +
           (C1086 * C1494 + C49172 * C1501 + C1085 * C697 + C49195 * C702 +
            C1084 * C399 + C49207 * C410) *
               C1087) *
              C48895 * C946 +
          ((C1084 * C948 + C49207 * C953 + C1085 * C2372 + C49195 * C2378 +
            C1086 * C2373 + C49172 * C2379) *
               C1087 +
           (C1084 * C954 + C49207 * C963 + C1085 * C2380 + C49195 * C2390 +
            C1086 * C2381 + C49172 * C2391) *
               C1081 +
           (C1084 * C949 + C49207 * C955 + C1085 * C2374 + C49195 * C2382 +
            C1086 * C2375 + C49172 * C2383) *
               C1088 +
           (C1084 * C956 + C49207 * C964 + C1085 * C2384 + C49195 * C2392 +
            C1086 * C2385 + C49172 * C2393) *
               C1082 +
           (C1084 * C950 + C49207 * C957 + C1085 * C2376 + C49195 * C2386 +
            C1086 * C2377 + C49172 * C2387) *
               C1089 +
           (C1084 * C958 + C49207 * C965 + C1085 * C2388 + C49195 * C2394 +
            C1086 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7914 * C119 + C7908 * C126 + C7915 * C267 + C7909 * C278 +
            C7916 * C595 + C49172 * C600) *
               C7917 +
           (C7914 * C127 + C7908 * C140 + C7915 * C277 + C7909 * C285 +
            C7916 * C601 + C49172 * C610) *
               C49204 +
           (C7957 + C7958 + C7959) * C7918 + (C7960 + C7961 + C7962) * C49191 +
           C7977 * C7919 + C7978 * C49159) *
              C48895 * C945 -
          ((C8331 + C8332 + C8333) * C49159 + (C8334 + C8335 + C8336) * C7919 +
           (C8337 + C8338 + C8339) * C49191 + (C8340 + C8341 + C8342) * C7918 +
           (C7916 * C1500 + C49172 * C1506 + C7915 * C703 + C7909 * C712 +
            C7914 * C409 + C7908 * C417) *
               C49204 +
           (C7916 * C1494 + C49172 * C1501 + C7915 * C697 + C7909 * C702 +
            C7914 * C399 + C7908 * C410) *
               C7917) *
              C48895 * C946 +
          ((C7914 * C948 + C7908 * C953 + C7915 * C2372 + C7909 * C2378 +
            C7916 * C2373 + C49172 * C2379) *
               C7917 +
           (C7914 * C954 + C7908 * C963 + C7915 * C2380 + C7909 * C2390 +
            C7916 * C2381 + C49172 * C2391) *
               C49204 +
           (C7914 * C949 + C7908 * C955 + C7915 * C2374 + C7909 * C2382 +
            C7916 * C2375 + C49172 * C2383) *
               C7918 +
           (C7914 * C956 + C7908 * C964 + C7915 * C2384 + C7909 * C2392 +
            C7916 * C2385 + C49172 * C2393) *
               C49191 +
           (C7914 * C950 + C7908 * C957 + C7915 * C2376 + C7909 * C2386 +
            C7916 * C2377 + C49172 * C2387) *
               C7919 +
           (C7914 * C958 + C7908 * C965 + C7915 * C2388 + C7909 * C2394 +
            C7916 * C2389 + C49172 * C2395) *
               C49159) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9214 * C119 + C9208 * C126 + C9215 * C267 + C9209 * C278 +
            C9216 * C595 + C9210 * C600 + C9217 * C1296 + C9211 * C1303 +
            C9218 * C1800 + C9212 * C1803) *
               C9219 +
           (C9214 * C127 + C9208 * C140 + C9215 * C277 + C9209 * C285 +
            C9216 * C601 + C9210 * C610 + C9217 * C1302 + C9211 * C1308 +
            C9218 * C1804 + C9212 * C1809) *
               C48780) *
              C48895 * C945 -
          ((C9218 * C9394 + C9212 * C9398 + C9217 * C1962 + C9211 * C1967 +
            C9216 * C1500 + C9210 * C1506 + C9215 * C703 + C9209 * C712 +
            C9214 * C409 + C9208 * C417) *
               C48780 +
           (C9218 * C9392 + C9212 * C9395 + C9217 * C1958 + C9211 * C1961 +
            C9216 * C1494 + C9210 * C1501 + C9215 * C697 + C9209 * C702 +
            C9214 * C399 + C9208 * C410) *
               C9219) *
              C48895 * C946 +
          ((C9214 * C948 + C9208 * C953 + C9215 * C2372 + C9209 * C2378 +
            C9216 * C2373 + C9210 * C2379 + C9217 * C9860 + C9211 * C9862 +
            C9218 * C9861 + C9212 * C9863) *
               C9219 +
           (C9214 * C954 + C9208 * C963 + C9215 * C2380 + C9209 * C2390 +
            C9216 * C2381 + C9210 * C2391 + C9217 * C9864 + C9211 * C9866 +
            C9218 * C9865 + C9212 * C9867) *
               C48780) *
              C48895 * C947) *
         C48849 * C48815) /
            (p * q * std::sqrt(p + q));
}
