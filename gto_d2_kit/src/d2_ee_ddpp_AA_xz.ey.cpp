/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47868 = 0 * ae;
    const double C47867 = ae * be;
    const double C47866 = 0 * be;
    const double C47865 = 0 * be;
    const double C47864 = ae + be;
    const double C47863 = 0 * be;
    const double C47862 = xA - xB;
    const double C47923 = 0 * be;
    const double C47948 = 0 * be;
    const double C47947 = zA - zB;
    const double C48003 = 0 * ae;
    const double C47998 = 0 * be;
    const double C47997 = 0 * be;
    const double C48048 = 0 * be;
    const double C48108 = xP - xQ;
    const double C48107 = zP - zQ;
    const double C48106 = p + q;
    const double C48105 = p * q;
    const double C48115 = std::pow(ae, 2);
    const double C48113 = bs[3];
    const double C48123 = bs[4];
    const double C48132 = bs[5];
    const double C48146 = bs[6];
    const double C48168 = bs[7];
    const double C48238 = yP - yQ;
    const double C48486 = bs[2];
    const double C119 = bs[0];
    const double C48922 = ce + de;
    const double C48921 = ce * de;
    const double C48920 = xC - xD;
    const double C48935 = yC - yD;
    const double C48944 = zC - zD;
    const double C48991 = yA - yB;
    const double C47875 = C47868 / C47864;
    const double C47872 = C47866 / C47864;
    const double C47870 = 2 * C47864;
    const double C47869 = std::pow(C47864, 2);
    const double C47874 = C47867 * C47862;
    const double C47873 = C47862 * C47866;
    const double C47871 = C47862 * C47865;
    const double C48888 = C47862 * be;
    const double C48887 = C47862 * ae;
    const double C48886 = std::pow(C47862, 2);
    const double C47924 = C47923 / C47864;
    const double C47999 = C47948 / C47864;
    const double C47949 = C47867 * C47947;
    const double C48000 = C47947 * C47948;
    const double C49003 = std::pow(C47947, 2);
    const double C49086 = C47947 * be;
    const double C49084 = C47947 * ae;
    const double C48010 = C48003 / C47864;
    const double C48005 = C47947 * C47998;
    const double C48049 = C48048 / C47864;
    const double C48133 = std::pow(C48108, 2);
    const double C48197 = C48108 * ae;
    const double C48116 = C48107 * ae;
    const double C48114 = C48108 * C48107;
    const double C48331 = std::pow(C48107, 2);
    const double C48109 = 2 * C48105;
    const double C48287 = std::pow(C48238, 2);
    const double C48932 = 2 * C48922;
    const double C49241 = std::pow(C48922, 2);
    const double C48923 = std::pow(C48920, 2);
    const double C49240 = C48920 * de;
    const double C49239 = C48920 * ce;
    const double C48957 = std::pow(C48935, 2);
    const double C49245 = C48935 * de;
    const double C49243 = C48935 * ce;
    const double C48974 = std::pow(C48944, 2);
    const double C49246 = C48944 * de;
    const double C49244 = C48944 * ce;
    const double C48992 = std::pow(C48991, 2);
    const double C49046 = C48991 * be;
    const double C49044 = C48991 * ae;
    const double C48900 = std::pow(C47870, -1);
    const double C49234 = std::pow(C47870, -2);
    const double C47876 = 2 * C47869;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C47869;
    const double C49238 = C47869 * C47870;
    const double C49237 = 4 * C47869;
    const double C47878 = C47873 / C47864;
    const double C47877 = C47871 / C47864;
    const double C49227 = std::pow(C48887, 2);
    const double C48889 = C48886 * C47867;
    const double C48008 = C48000 / C47864;
    const double C49004 = C49003 * C47867;
    const double C49249 = std::pow(C49084, 2);
    const double C48011 = C48005 / C47864;
    const double C48200 = C48132 * C48197;
    const double C48209 = C48123 * C48197;
    const double C48216 = C48146 * C48197;
    const double C48244 = C48113 * C48197;
    const double C48264 = C48168 * C48197;
    const double C48119 = C48113 * C48116;
    const double C48125 = C48123 * C48116;
    const double C48135 = C48132 * C48116;
    const double C48150 = C48146 * C48116;
    const double C48174 = C48168 * C48116;
    const double C48118 = C48114 * C48115;
    const double C48110 = C48109 / C48106;
    const double C126 = (-(bs[1] * C48116 * C48109) / C48106) / C47864;
    const double C127 = (-(bs[1] * C48197 * C48109) / C48106) / C47864;
    const double C120 = -(C48108 * bs[1] * C48109) / C48106;
    const double C267 = -(C48238 * bs[1] * C48109) / C48106;
    const double C399 = -(C48107 * bs[1] * C48109) / C48106;
    const double C49242 = std::pow(C48932, -1);
    const double C49276 = 2 * C49241;
    const double C48924 = C48923 * C48921;
    const double C48958 = C48957 * C48921;
    const double C48975 = C48974 * C48921;
    const double C48993 = C48992 * C47867;
    const double C49247 = std::pow(C49044, 2);
    const double C47885 = C47866 / C47876;
    const double C47882 = C47865 / C47876;
    const double C47881 = C47863 / C47876;
    const double C48002 = C47948 / C47876;
    const double C48007 = C47998 / C47876;
    const double C48006 = C47997 / C47876;
    const double C49274 = 4 * C49238;
    const double C49273 = C47864 * C49237;
    const double C47883 = 0 - C47878;
    const double C47880 = 0 - C47877;
    const double C48890 = C48889 / C47864;
    const double C48012 = 0 - C48008;
    const double C49005 = C49004 / C47864;
    const double C48015 = 0 - C48011;
    const double C48124 = C48123 * C48118;
    const double C48134 = C48132 * C48118;
    const double C48148 = C48146 * C48118;
    const double C48172 = C48168 * C48118;
    const double C48112 = -C48110;
    const double C48122 = std::pow(C48110, 4);
    const double C48145 = std::pow(C48110, 6);
    const double C141 = (ae * std::pow(C48110, 2) * bs[2] * C48107 * ae +
                         C48108 * std::pow(-C48110, 3) * bs[3] * C48108 *
                             C48107 * std::pow(ae, 2)) /
                        C47869;
    const double C48485 = std::pow(C48110, 2);
    const double C128 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48116) / C47864;
    const double C129 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48197) / C47864 -
        (ae * bs[1] * C48109) / (C48106 * C47864);
    const double C48925 = C48924 / C48922;
    const double C48959 = C48958 / C48922;
    const double C48976 = C48975 / C48922;
    const double C48994 = C48993 / C47864;
    const double C47888 = C47883 * ae;
    const double C47887 = C47880 * ae;
    const double C48891 = -C48890;
    const double C48016 = C48012 * ae;
    const double C49006 = -C49005;
    const double C48019 = C48015 * ae;
    const double C48117 = std::pow(C48112, 3);
    const double C48131 = std::pow(C48112, 5);
    const double C48167 = std::pow(C48112, 7);
    const double C48127 = C48122 * C48125;
    const double C48126 = C48122 * C48124;
    const double C48198 = C48123 * C48122;
    const double C48211 = C48122 * C48209;
    const double C48153 = C48145 * C48150;
    const double C48152 = C48145 * C48148;
    const double C48219 = C48146 * C48145;
    const double C48220 = C48145 * C48216;
    const double C48487 = C48486 * C48485;
    const double C277 = (C48238 * C48485 * C48486 * C48197) / C47864;
    const double C278 = (C48238 * C48485 * C48486 * C48116) / C47864;
    const double C409 = (C48107 * C48485 * C48486 * C48197) / C47864;
    const double C410 = (C48107 * C48485 * C48486 * C48116) / C47864 -
                        (ae * bs[1] * C48109) / (C48106 * C47864);
    const double C48926 = -C48925;
    const double C48960 = -C48959;
    const double C48977 = -C48976;
    const double C48995 = -C48994;
    const double C47892 = C47888 / C47864;
    const double C47891 = C47887 / C47864;
    const double C48892 = std::exp(C48891);
    const double C48020 = C48016 / C47864;
    const double C49007 = std::exp(C49006);
    const double C48023 = C48019 / C47864;
    const double C48120 = C48117 * C48119;
    const double C48210 = C48113 * C48117;
    const double C48245 = C48117 * C48244;
    const double C285 = ((yP - yQ) * C48117 * C48113 * C48118) / C47869;
    const double C417 = (ae * std::pow(C48110, 2) * bs[2] * C48197 +
                         C48107 * C48117 * C48113 * C48118) /
                        C47869;
    const double C48137 = C48131 * C48135;
    const double C48136 = C48131 * C48134;
    const double C48199 = C48132 * C48131;
    const double C48204 = C48131 * C48200;
    const double C48177 = C48167 * C48174;
    const double C48176 = C48167 * C48172;
    const double C48269 = C48167 * C48264;
    const double C48130 = ae * C48127;
    const double C48129 = C48108 * C48127;
    const double C48620 = C48238 * C48127;
    const double C48632 = C48107 * C48127;
    const double C610 =
        (C48117 * C48113 * C48118 + C48126 * std::pow(yP - yQ, 2)) / C47869;
    const double C712 =
        (ae * C48238 * C48117 * C48113 * C48197 + C48107 * C48238 * C48126) /
        C47869;
    const double C48202 = C48108 * C48198;
    const double C48201 = C48198 * ae;
    const double C48493 = C48198 * C48133;
    const double C48597 = C48198 * C48287;
    const double C48621 = C48238 * C48198;
    const double C48634 = C48198 * C48331;
    const double C48734 = C48107 * C48198;
    const double C48247 = C48108 * C48211;
    const double C48298 = C48238 * C48211;
    const double C48329 = ae * C48211;
    const double C48328 = C48107 * C48211;
    const double C48155 = C48153 * C48133;
    const double C48166 = ae * C48153;
    const double C48165 = C48108 * C48153;
    const double C48666 = C48153 * C48287;
    const double C48760 = C48238 * C48153;
    const double C48778 = C48107 * C48153;
    const double C48154 = C48108 * C48152;
    const double C48350 = C48152 * C48287;
    const double C48358 = C48238 * C48152;
    const double C48416 = C48107 * C48152;
    const double C48222 = C48219 * C48133;
    const double C48266 = C48108 * C48219;
    const double C48265 = C48219 * ae;
    const double C48684 = C48219 * C48287;
    const double C48763 = C48238 * C48219;
    const double C48781 = C48219 * C48331;
    const double C48224 = C48108 * C48220;
    const double C48365 = C48220 * C48287;
    const double C48373 = C48238 * C48220;
    const double C48417 = C48220 * C48331;
    const double C48461 = ae * C48220;
    const double C48460 = C48107 * C48220;
    const double C121 = C48487 * C48133 - (bs[1] * C48109) / C48106;
    const double C266 = C48238 * C48108 * C48487;
    const double C398 = C48107 * C48108 * C48487;
    const double C595 = C48487 * C48287 - (bs[1] * C48109) / C48106;
    const double C697 = C48107 * C48238 * C48487;
    const double C948 = C48487 * C48331 - (bs[1] * C48109) / C48106;
    const double C48927 = std::exp(C48926);
    const double C48961 = std::exp(C48960);
    const double C48978 = std::exp(C48977);
    const double C48996 = std::exp(C48995);
    const double C47896 = C47892 - C47882;
    const double C47895 = C47891 - C47881;
    const double C47879 = C47874 * C48892;
    const double C48894 = C48892 * C48887;
    const double C48893 = C48892 / C47870;
    const double C48902 = C48900 * C48892;
    const double C49230 = C48892 * C48888;
    const double C49271 = C49234 * C48892;
    const double C49265 = C48892 * C49227;
    const double C48024 = C48020 - C48007;
    const double C151 = C49007 * C141;
    const double C149 = C49007 * C128;
    const double C1269 = C49007 * C278;
    const double C47950 = C47949 * C49007;
    const double C113 = -(2 * ae * be * (zA - zB) * C49007) / (ae + be);
    const double C49085 = C49007 / C47870;
    const double C49087 = C49007 * C49084;
    const double C49094 = C48900 * C49007;
    const double C49259 = C49007 * C49086;
    const double C49287 = C49234 * C49007;
    const double C49285 = C49007 * C49249;
    const double C48027 = C48023 - C48006;
    const double C142 = (C48117 * C48113 * C48118 + ae * C48108 * C48120 +
                         C48108 * (ae * C48120 + C48108 * std::pow(C48110, 4) *
                                                     bs[4] * C48118)) /
                        C47869;
    const double C143 =
        (2 * (ae * C48120 + C48108 * C48126) +
         ae * (C48120 + C48127 * std::pow(C48108, 2)) +
         C48108 * (C48126 + ae * C48108 * C48127 +
                   C48108 * (ae * C48127 +
                             C48108 * std::pow(C48112, 5) * bs[5] * C48118))) /
        C47869;
    const double C284 = ((yP - yQ) * (ae * C48120 + C48108 * C48126)) / C47869;
    const double C416 = (ae * (C48108 * C48117 * C48113 * C48197 +
                               bs[2] * std::pow(C48110, 2) * ae) +
                         C48107 * (ae * C48120 + C48108 * C48126)) /
                        C47869;
    const double C130 =
        (std::pow(C48110, 2) * bs[2] * C48116 + C48120 * C48133) / C47864;
    const double C132 =
        (2 * C48108 * C48120 + C48108 * (C48120 + C48127 * C48133)) / C47864;
    const double C274 = (C48238 * (C48120 + C48127 * C48133)) / C47864;
    const double C276 = (C48238 * C48108 * C48120) / C47864;
    const double C408 =
        (C48107 * C48108 * C48120 + C48108 * C48487 * ae) / C47864;
    const double C600 = (C48485 * C48486 * C48116 + C48120 * C48287) / C47864;
    const double C702 =
        (C48107 * C48238 * C48120 + C48238 * C48487 * ae) / C47864;
    const double C953 =
        (C48485 * C48486 * C48116 + C48107 * (C48107 * C48120 + C48487 * ae) +
         C48107 * C48487 * ae) /
        C47864;
    const double C1260 =
        (2 * C48238 * C48120 + C48238 * (C48120 + C48127 * C48287)) / C47864;
    const double C48248 = C48210 * ae;
    const double C48492 = C48108 * C48210;
    const double C48588 = C48238 * C48210;
    const double C48633 = C48107 * C48210;
    const double C406 = (C48107 * (C48120 + C48127 * C48133) +
                         (C48487 + C48210 * C48133) * ae) /
                        C47864;
    const double C1470 = (C48107 * (C48120 + C48127 * C48287) +
                          (C48487 + C48210 * C48287) * ae) /
                         C47864;
    const double C122 =
        2 * C48108 * C48487 + C48108 * (C48487 + C48210 * C48133);
    const double C265 = C48238 * (C48487 + C48210 * C48133);
    const double C397 = C48107 * (C48487 + C48210 * C48133);
    const double C1253 =
        2 * C48238 * C48487 + C48238 * (C48487 + C48210 * C48287);
    const double C1463 = C48107 * (C48487 + C48210 * C48287);
    const double C2902 =
        2 * C48107 * C48487 + C48107 * (C48487 + C48210 * C48331);
    const double C963 = (C48117 * C48113 * C48118 + ae * C48107 * C48245 +
                         C48107 * (ae * C48245 + C48107 * C48126)) /
                        C47869;
    const double C131 =
        (C48485 * C48486 * C48197 + C48108 * (C48108 * C48245 + C48487 * ae) +
         C48108 * C48487 * ae) /
        C47864;
    const double C275 = (C48238 * (C48108 * C48245 + C48487 * ae)) / C47864;
    const double C407 = (C48107 * (C48108 * C48245 + C48487 * ae)) / C47864;
    const double C601 = (C48485 * C48486 * C48197 + C48245 * C48287) / C47864;
    const double C703 = (C48107 * C48238 * C48245) / C47864;
    const double C954 = (C48485 * C48486 * C48197 + C48245 * C48331) / C47864;
    const double C1259 =
        (2 * C48238 * C48245 + C48238 * (C48245 + C48211 * C48287)) / C47864;
    const double C1469 = (C48107 * (C48245 + C48211 * C48287)) / C47864;
    const double C2908 =
        (2 * C48107 * C48245 + C48107 * (C48245 + C48211 * C48331)) / C47864;
    const double C1271 = C49007 * C285;
    const double C48139 = C48137 * C48133;
    const double C48144 = ae * C48137;
    const double C48143 = C48108 * C48137;
    const double C48654 = C48137 * C48287;
    const double C48665 = C48238 * C48137;
    const double C48733 = C48107 * C48137;
    const double C1760 =
        (3 * (C48120 + C48127 * C48287) +
         C48238 * (2 * C48238 * C48127 + C48238 * (C48127 + C48137 * C48287))) /
        C47864;
    const double C1935 =
        (C48107 * (2 * C48238 * C48127 + C48238 * (C48127 + C48137 * C48287)) +
         (2 * C48238 * C48210 + C48238 * (C48210 + C48198 * C48287)) * ae) /
        C47864;
    const double C48138 = C48108 * C48136;
    const double C48319 = C48238 * C48136;
    const double C48330 = C48107 * C48136;
    const double C1265 = (2 * C48238 * C48126 +
                          C48238 * (C48126 + C48136 * std::pow(C48238, 2))) /
                         C47869;
    const double C1475 = (ae * (C48245 + C48211 * C48287) +
                          C48107 * (C48126 + C48136 * C48287)) /
                         C47869;
    const double C1766 =
        (3 * (C48126 + C48136 * C48287) +
         C48238 * (2 * C48238 * C48136 + C48238 * (C48136 + C48152 * C48287))) /
        C47869;
    const double C2914 = (2 * (ae * C48245 + C48107 * C48126) +
                          ae * (C48245 + C48211 * std::pow(C48107, 2)) +
                          C48107 * (C48126 + ae * C48107 * C48211 +
                                    C48107 * (ae * C48211 + C48107 * C48136))) /
                         C47869;
    const double C48203 = C48199 * C48133;
    const double C48218 = C48108 * C48199;
    const double C48217 = C48199 * ae;
    const double C48673 = C48199 * C48287;
    const double C48683 = C48238 * C48199;
    const double C48735 = C48199 * C48331;
    const double C48779 = C48107 * C48199;
    const double C48206 = C48108 * C48204;
    const double C48304 = C48204 * C48287;
    const double C48320 = C48238 * C48204;
    const double C48333 = C48204 * C48331;
    const double C48415 = ae * C48204;
    const double C48414 = C48107 * C48204;
    const double C1941 =
        (ae * (2 * C48238 * C48211 + C48238 * (C48211 + C48204 * C48287)) +
         C48107 * (2 * C48238 * C48136 + C48238 * (C48136 + C48152 * C48287))) /
        C47869;
    const double C48179 = C48177 * C48133;
    const double C48178 = C48108 * C48176;
    const double C48359 = C48176 * C48287;
    const double C48444 = C48238 * C48176;
    const double C48462 = C48107 * C48176;
    const double C48271 = C48108 * C48269;
    const double C48374 = C48269 * C48287;
    const double C48445 = C48238 * C48269;
    const double C48464 = C48269 * C48331;
    const double C602 = (C48108 * C48120 + C48129 * C48287) / C47864;
    const double C1279 = C49007 * C610;
    const double C1958 = C49007 * C712;
    const double C48252 = C48202 * ae;
    const double C48496 = 2 * C48202;
    const double C48591 = C48238 * C48202;
    const double C48640 = C48107 * C48202;
    const double C48494 = C48210 + C48493;
    const double C48598 = C48210 + C48597;
    const double C48677 = 2 * C48621;
    const double C48708 = C48107 * C48621;
    const double C48707 = C48621 * ae;
    const double C48636 = C48210 + C48634;
    const double C48739 = 2 * C48734;
    const double C48737 = C48734 * ae;
    const double C2388 = (C48238 * C48126 + ae * C48107 * C48298 +
                          C48107 * (ae * C48298 + C48107 * C48238 * C48136)) /
                         C47869;
    const double C2377 = (C48238 * C48245 + C48298 * C48331) / C47864;
    const double C48157 = C48137 + C48155;
    const double C48173 = 2 * C48165;
    const double C48171 = ae * C48165;
    const double C48657 = C48165 * C48287;
    const double C48722 = C48238 * C48165;
    const double C48746 = C48107 * C48165;
    const double C48668 = C48137 + C48666;
    const double C48764 = C48107 * C48760;
    const double C48351 = C48136 + C48350;
    const double C48360 = 2 * C48358;
    const double C48393 = C48107 * C48358;
    const double C48225 = C48199 + C48222;
    const double C48270 = C48266 * ae;
    const double C48694 = C48266 * C48287;
    const double C48725 = C48238 * C48266;
    const double C48748 = C48266 * C48331;
    const double C48686 = C48199 + C48684;
    const double C48766 = C48763 * C48331;
    const double C48785 = C48199 + C48781;
    const double C48366 = C48204 + C48365;
    const double C48375 = 2 * C48373;
    const double C48394 = C48373 * C48331;
    const double C48443 = ae * C48373;
    const double C48442 = C48107 * C48373;
    const double C48421 = C48204 + C48417;
    const double C48468 = 2 * C48460;
    const double C48466 = ae * C48460;
    const double C49277 = C49242 * C48927;
    const double C49275 = C48927 * C49239;
    const double C261 = -(C48927 * C49240) / C48922;
    const double C49279 = C49242 * C48961;
    const double C49278 = C48961 * C49243;
    const double C525 = -(C48961 * C49245) / C48922;
    const double C49281 = C49242 * C48978;
    const double C49280 = C48978 * C49244;
    const double C799 = -(C48978 * C49246) / C48922;
    const double C49045 = C48996 / C47870;
    const double C49047 = C48996 * C49044;
    const double C49054 = C48900 * C48996;
    const double C49253 = C48996 * C49046;
    const double C49284 = C49234 * C48996;
    const double C49282 = C48996 * C49247;
    const double C47901 = C47896 / C47870;
    const double C47900 = C47862 * C47896;
    const double C47899 = C47895 + C47872;
    const double C47886 = C47879 / C47869;
    const double C47884 = 2 * C47879;
    const double C48895 = C48894 * C48888;
    const double C48901 = C48894 / C47876;
    const double C49231 = C48900 * C48894;
    const double C49229 = C48894 / C47864;
    const double C1078 = (C48892 * std::pow(C48888, 2)) / C47869 + C48893;
    const double C48903 = C48902 * C48888;
    const double C49235 = C48887 * C48902;
    const double C49233 = 2 * C48902;
    const double C49288 = C48902 / C49237;
    const double C106 = C48902 / C49274;
    const double C26391 = C48902 / C47870;
    const double C49267 = C49230 / C47864;
    const double C1079 = (-2 * C48900 * C49230) / C47864;
    const double C49301 = C49265 / C47869;
    const double C48029 = C48024 / C47870;
    const double C48028 = C47947 * C48024;
    const double C47982 = 2 * C47950;
    const double C48004 = C47950 / C47869;
    const double C2509 =
        ((0 * ae) / C47864 - C47950 / C47869) / C47870 + (0 * ae) / C47864;
    const double C5002 =
        ((C49007 - (C47947 * 2 * C47950) / C47864) * ae) / C47864 -
        C47948 / C47876;
    const double C5003 = (0 * ae) / C47864 - C47950 / C47869;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C302 = C113 * C266;
    const double C434 = C113 * C398;
    const double C1276 = C113 * C595;
    const double C1270 = C113 * C277;
    const double C1268 = C113 * C267;
    const double C1959 = C113 * C697;
    const double C15194 = (C49007 * std::pow(C49086, 2)) / C47869 + C49085;
    const double C49088 = C49087 * C49086;
    const double C49093 = C49087 / C47876;
    const double C49252 = C49087 / C47864;
    const double C49250 = C48900 * C49087;
    const double C6454 = C49094 * C712;
    const double C32326 = C49094 * C712;
    const double C2508 =
        (((C49007 - (C47947 * 2 * C47950) / C47864) * ae) / C47864 -
         C47948 / C47876) /
            C47870 +
        ((C47947 * ((0 * ae) / C47864 - C47950 / C47869) + C49094) * ae) /
            C47864;
    const double C49095 = C49094 * C49086;
    const double C49263 = C49084 * C49094;
    const double C49262 = 2 * C49094;
    const double C49300 = C49094 / C49237;
    const double C17813 = C49094 / C49274;
    const double C36601 = C49094 / C47870;
    const double C49296 = C49259 / C47864;
    const double C15195 = (-2 * C48900 * C49259) / C47864;
    const double C49308 = C49285 / C47869;
    const double C48033 = C48027 + C47999;
    const double C155 = C49007 * C142;
    const double C159 = C49007 * C143;
    const double C301 = C49007 * C284;
    const double C433 = C49007 * C416;
    const double C5012 = C49094 * C416;
    const double C30862 = C49094 * C416;
    const double C153 = C49007 * C130;
    const double C157 = C49007 * C132;
    const double C299 = C49007 * C274;
    const double C303 = C49007 * C276;
    const double C435 = C49007 * C408;
    const double C5008 = C49094 * C408;
    const double C30858 = C49094 * C408;
    const double C1277 = C49007 * C600;
    const double C1960 = C49007 * C702;
    const double C6450 = C49094 * C702;
    const double C32322 = C49094 * C702;
    const double C1778 = C49007 * C1260;
    const double C48249 = C48247 + C48248;
    const double C48635 = C48632 + C48248;
    const double C2909 =
        (2 * (C48107 * C48120 + C48487 * ae) +
         C48107 * (C48120 + C48107 * (C48107 * C48127 + C48248) +
                   C48107 * C48210 * ae) +
         (C48487 + C48210 * C48331) * ae) /
        C47864;
    const double C704 =
        (C48107 * C48238 * C48129 + C48238 * C48492 * ae) / C47864;
    const double C955 =
        (C48108 * C48120 + C48107 * (C48107 * C48129 + C48492 * ae) +
         C48107 * C48492 * ae) /
        C47864;
    const double C596 = C48108 * C48487 + C48492 * C48287;
    const double C698 = C48107 * C48238 * C48492;
    const double C949 = C48108 * C48487 + C48492 * C48331;
    const double C1252 =
        2 * C48238 * C48492 + C48238 * (C48492 + C48202 * C48287);
    const double C1462 = C48107 * (C48492 + C48202 * C48287);
    const double C2901 =
        2 * C48107 * C48492 + C48107 * (C48492 + C48202 * C48331);
    const double C2376 =
        (C48238 * C48120 + C48107 * (C48107 * C48238 * C48127 + C48588 * ae) +
         C48107 * C48588 * ae) /
        C47864;
    const double C3357 =
        (2 * (C48107 * C48620 + C48588 * ae) +
         C48107 * (C48620 + C48107 * (C48107 * C48238 * C48137 + C48621 * ae) +
                   C48107 * C48621 * ae) +
         (C48588 + C48621 * C48331) * ae) /
        C47864;
    const double C2370 = C48238 * C48487 + C48588 * C48331;
    const double C3354 =
        2 * C48107 * C48588 + C48107 * (C48588 + C48621 * C48331);
    const double C431 = C49007 * C406;
    const double C5016 = C49094 * C406;
    const double C30866 = C49094 * C406;
    const double C1952 = C49007 * C1470;
    const double C7052 = C49094 * C1470;
    const double C32332 = C49094 * C1470;
    const double C156 = C113 * C122;
    const double C298 = C113 * C265;
    const double C430 = C113 * C397;
    const double C1777 = C113 * C1253;
    const double C1951 = C113 * C1463;
    const double C154 = C113 * C131;
    const double C300 = C113 * C275;
    const double C432 = C113 * C407;
    const double C1278 = C113 * C601;
    const double C1957 = C113 * C703;
    const double C1775 = C113 * C1259;
    const double C1949 = C113 * C1469;
    const double C48141 = C48127 + C48139;
    const double C48156 = C48144 + C48154;
    const double C48149 = 2 * C48143;
    const double C48147 = ae * C48143;
    const double C48624 = C48238 * C48143;
    const double C48639 = C48107 * C48143;
    const double C1258 =
        (2 * C48238 * C48129 + C48238 * (C48129 + C48143 * C48287)) / C47864;
    const double C1468 = (C48107 * (C48129 + C48143 * C48287) +
                          (C48492 + C48202 * C48287) * ae) /
                         C47864;
    const double C1762 =
        (3 * (C48129 + C48143 * C48287) +
         C48238 * (2 * C48238 * C48143 + C48238 * (C48143 + C48165 * C48287))) /
        C47864;
    const double C48655 = C48127 + C48654;
    const double C48667 = 2 * C48665;
    const double C48706 = C48107 * C48665;
    const double C48736 = C48733 + C48201;
    const double C9227 = C49007 * C1760;
    const double C9590 = C49007 * C1935;
    const double C13227 = C49094 * C1935;
    const double C32930 = C49094 * C1935;
    const double C48140 = C48130 + C48138;
    const double C48332 = C48329 + C48330;
    const double C1776 = C49007 * C1265;
    const double C1950 = C49007 * C1475;
    const double C7048 = C49094 * C1475;
    const double C32336 = C49094 * C1475;
    const double C9229 = C49007 * C1766;
    const double C48205 = C48198 + C48203;
    const double C48223 = 2 * C48218;
    const double C48221 = C48218 * ae;
    const double C48601 = C48218 * C48287;
    const double C48625 = C48238 * C48218;
    const double C48641 = C48218 * C48331;
    const double C48747 = C48107 * C48218;
    const double C1937 =
        (C48107 * (2 * C48238 * C48143 + C48238 * (C48143 + C48165 * C48287)) +
         (2 * C48238 * C48202 + C48238 * (C48202 + C48218 * C48287)) * ae) /
        C47864;
    const double C48226 = C48224 + C48217;
    const double C48783 = C48778 + C48217;
    const double C48674 = C48198 + C48673;
    const double C48685 = 2 * C48683;
    const double C48709 = C48683 * C48331;
    const double C48762 = C48107 * C48683;
    const double C48761 = C48683 * ae;
    const double C48738 = C48198 + C48735;
    const double C48786 = 2 * C48779;
    const double C48784 = C48779 * ae;
    const double C48207 = C48206 + C48201;
    const double C48305 = C48211 + C48304;
    const double C48368 = 2 * C48320;
    const double C48392 = ae * C48320;
    const double C48391 = C48107 * C48320;
    const double C3363 =
        (2 * (ae * C48298 + C48107 * C48319) +
         ae * (C48298 + C48320 * std::pow(C48107, 2)) +
         C48107 * (C48319 + ae * C48107 * C48320 +
                   C48107 * (ae * C48320 + C48107 * C48238 * C48152))) /
        C47869;
    const double C3358 =
        (2 * C48107 * C48298 + C48107 * (C48298 + C48320 * C48331)) / C47864;
    const double C48334 = C48211 + C48333;
    const double C48419 = C48415 + C48416;
    const double C48420 = 2 * C48414;
    const double C48418 = ae * C48414;
    const double C9588 = C49007 * C1941;
    const double C13223 = C49094 * C1941;
    const double C32926 = C49094 * C1941;
    const double C48181 = C48153 + C48179;
    const double C48180 = C48166 + C48178;
    const double C48361 = C48152 + C48359;
    const double C48447 = C48107 * C48444;
    const double C48467 = C48461 + C48462;
    const double C48272 = C48271 + C48265;
    const double C48376 = C48220 + C48374;
    const double C48449 = C48445 * C48331;
    const double C48469 = C48220 + C48464;
    const double C1089 = C49007 * C602;
    const double C2907 =
        (2 * (C48107 * C48129 + C48492 * ae) +
         C48107 * (C48129 + C48107 * (C48107 * C48143 + C48252) +
                   C48107 * C48202 * ae) +
         (C48492 + C48202 * C48331) * ae) /
        C47864;
    const double C2378 =
        (C48238 * C48129 + C48107 * (C48107 * C48238 * C48143 + C48591 * ae) +
         C48107 * C48591 * ae) /
        C47864;
    const double C2371 = C48238 * C48492 + C48591 * C48331;
    const double C123 = 3 * (C48487 + C48210 * C48133) +
                        C48108 * (2 * C48492 + C48108 * C48494);
    const double C264 = C48238 * (2 * C48492 + C48108 * C48494);
    const double C396 = C48107 * (2 * C48492 + C48108 * C48494);
    const double C597 = C48487 + C48210 * C48133 + C48494 * C48287;
    const double C699 = C48107 * C48238 * C48494;
    const double C950 = C48487 + C48210 * C48133 + C48494 * C48331;
    const double C2382 =
        (C48120 + C48127 * C48287 +
         C48107 * (C48107 * (C48127 + C48137 * C48287) + C48598 * ae) +
         C48107 * C48598 * ae) /
        C47864;
    const double C1757 = 3 * (C48487 + C48210 * C48287) +
                         C48238 * (2 * C48588 + C48238 * C48598);
    const double C1932 = C48107 * (2 * C48588 + C48238 * C48598);
    const double C2373 = C48487 + C48210 * C48287 + C48598 * C48331;
    const double C3768 = 3 * (C48487 + C48210 * C48331) +
                         C48107 * (2 * C48633 + C48107 * C48636);
    const double C7254 = C49094 * C2388;
    const double C10108 = C49287 * C2388;
    const double C16694 = C49287 * C2388;
    const double C33145 = C49094 * C2388;
    const double C48159 = C48108 * C48157;
    const double C48169 = 3 * C48157;
    const double C48164 = ae * C48157;
    const double C48628 = C48238 * C48157;
    const double C48646 = C48107 * C48157;
    const double C48175 = C48152 + C48171;
    const double C48658 = C48143 + C48657;
    const double C48726 = C48107 * C48722;
    const double C48669 = C48238 * C48668;
    const double C48714 = C48107 * C48668;
    const double C9217 =
        (4 * (2 * C48319 + C48238 * C48351) +
         C48238 *
             (3 * C48351 + C48238 * (2 * C48238 * C48152 +
                                     C48238 * (C48152 + C48176 * C48287)))) /
        C47869;
    const double C48227 = C48108 * C48225;
    const double C48267 = C48225 * ae;
    const double C48605 = C48225 * C48287;
    const double C48629 = C48238 * C48225;
    const double C48648 = C48225 * C48331;
    const double C48695 = C48218 + C48694;
    const double C48727 = C48725 * C48331;
    const double C48751 = C48218 + C48748;
    const double C48687 = C48238 * C48686;
    const double C48717 = C48686 * C48331;
    const double C48769 = C48683 + C48766;
    const double C48788 = C48107 * C48785;
    const double C48369 = C48238 * C48366;
    const double C48372 = 3 * C48366;
    const double C48399 = ae * C48366;
    const double C48398 = C48107 * C48366;
    const double C48396 = C48320 + C48394;
    const double C48448 = 2 * C48442;
    const double C48446 = ae * C48442;
    const double C48424 = C48107 * C48421;
    const double C48463 = 3 * C48421;
    const double C48459 = ae * C48421;
    const double C48470 = C48152 + C48466;
    const double C112 = C49277 / C48932;
    const double C110 = C48927 / C48932 - (C49275 * C49240) / C49241;
    const double C111 = C49275 / C49276 - (C49277 * C49240) / C48922;
    const double C527 = C49275 / C48922;
    const double C593 = C49279 / C48932;
    const double C259 = C49278 / C48922;
    const double C591 = C48961 / C48932 - (C49278 * C49245) / C49241;
    const double C592 = C49278 / C49276 - (C49279 * C49245) / C48922;
    const double C947 = C49281 / C48932;
    const double C393 = C49280 / C48922;
    const double C945 = C48978 / C48932 - (C49280 * C49246) / C49241;
    const double C946 = C49280 / C49276 - (C49281 * C49246) / C48922;
    const double C7911 = (C48996 * std::pow(C49046, 2)) / C47869 + C49045;
    const double C49048 = C49047 * C49046;
    const double C49053 = C49047 / C47876;
    const double C49251 = C49047 / C47864;
    const double C49248 = C48900 * C49047;
    const double C49055 = C49054 * C49046;
    const double C49257 = C49044 * C49054;
    const double C49256 = 2 * C49054;
    const double C49294 = C49054 / C49237;
    const double C9127 = C49054 / C49274;
    const double C26394 = C49054 / C47870;
    const double C49290 = C49253 / C47864;
    const double C7912 = (-2 * C48900 * C49253) / C47864;
    const double C49306 = C49282 / C47869;
    const double C47905 = C47900 + 0;
    const double C47904 = C47899 / C47870;
    const double C47890 = C47875 - C47886;
    const double C47889 = C47862 * C47884;
    const double C1086 =
        ((-C47884 / C47864) / C47870 - (0 * be) / C47864) / C47870 -
        (0 * be) / C47864;
    const double C9128 = -C47884 / C47864;
    const double C23628 = (-C47884 / C47864) / C47870 - (0 * be) / C47864;
    const double C48896 = C48895 / C47869;
    const double C49268 = 2 * C49231;
    const double C48904 = C48903 / C47864;
    const double C49272 = C49235 / C47876;
    const double C49302 = C49229 - C49267;
    const double C23621 = -C49267;
    const double C49316 = C49301 + C48893;
    const double C48034 = C48028 + 0;
    const double C48001 = C47947 * C47982;
    const double C15198 =
        ((-C47948 / C47864) / C47870 -
         ((C49007 - (C47947 * C47982) / C47864) * be) / C47864) /
            C47870 -
        ((C47947 * ((-C47982 / C47864) / C47870 - (0 * be) / C47864) + C49094) *
         be) /
            C47864;
    const double C15199 =
        ((-C47982 / C47864) / C47870 - (0 * be) / C47864) / C47870 -
        (0 * be) / C47864;
    const double C30853 = (-C47982 / C47864) / C47870 - (0 * be) / C47864;
    const double C48014 = C48010 - C48004;
    const double C10107 = C2509 * C2377;
    const double C5021 = C5002 * C122;
    const double C5017 = C5002 * C131;
    const double C5013 = C5002 * C121;
    const double C5009 = C5002 * C129;
    const double C5005 = C5002 * C120;
    const double C5209 = C5002 * C266;
    const double C5205 = C5002 * C275;
    const double C5201 = C5002 * C265;
    const double C5375 = C5002 * C398;
    const double C5371 = C5002 * C407;
    const double C5367 = C5002 * C397;
    const double C6451 = C5002 * C277;
    const double C6447 = C5002 * C267;
    const double C7053 = C5002 * C595;
    const double C7049 = C5002 * C601;
    const double C7259 = C5002 * C697;
    const double C7255 = C5002 * C703;
    const double C13228 = C5002 * C1253;
    const double C13224 = C5002 * C1259;
    const double C13439 = C5002 * C1463;
    const double C13435 = C5002 * C1469;
    const double C5015 = C5003 * C397;
    const double C5011 = C5003 * C407;
    const double C5007 = C5003 * C398;
    const double C6453 = C5003 * C703;
    const double C6449 = C5003 * C697;
    const double C7051 = C5003 * C1463;
    const double C7047 = C5003 * C1469;
    const double C7253 = C5003 * C2377;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C1305 = C1270 + C1271;
    const double C1304 = C1268 + C1269;
    const double C15236 = C15194 * C132;
    const double C15230 = C15194 * C143;
    const double C15220 = C15194 * C142;
    const double C15214 = C15194 * C130;
    const double C15208 = C15194 * C141;
    const double C15202 = C15194 * C128;
    const double C15428 = C15194 * C276;
    const double C15422 = C15194 * C284;
    const double C15416 = C15194 * C274;
    const double C15610 = C15194 * C408;
    const double C15604 = C15194 * C416;
    const double C15598 = C15194 * C406;
    const double C16708 = C15194 * C602;
    const double C16702 = C15194 * C610;
    const double C16696 = C15194 * C600;
    const double C16690 = C15194 * C285;
    const double C16684 = C15194 * C278;
    const double C17152 = C15194 * C1260;
    const double C17146 = C15194 * C1265;
    const double C17333 = C15194 * C702;
    const double C17327 = C15194 * C712;
    const double C17321 = C15194 * C1470;
    const double C17315 = C15194 * C1475;
    const double C49089 = C49088 / C47869;
    const double C5026 = C49252 * C143;
    const double C5022 = C49252 * C132;
    const double C5018 = C49252 * C142;
    const double C5014 = C49252 * C130;
    const double C5010 = C49252 * C141;
    const double C5006 = C49252 * C128;
    const double C5210 = C49252 * C276;
    const double C5206 = C49252 * C284;
    const double C5202 = C49252 * C274;
    const double C5376 = C49252 * C408;
    const double C5372 = C49252 * C416;
    const double C5368 = C49252 * C406;
    const double C6472 = C49252 * C602;
    const double C6452 = C49252 * C285;
    const double C6448 = C49252 * C278;
    const double C7054 = C49252 * C600;
    const double C7050 = C49252 * C610;
    const double C7260 = C49252 * C702;
    const double C7256 = C49252 * C712;
    const double C13229 = C49252 * C1260;
    const double C13225 = C49252 * C1265;
    const double C13440 = C49252 * C1470;
    const double C13436 = C49252 * C1475;
    const double C14576 = C49252 * C1760;
    const double C14572 = C49252 * C1766;
    const double C14722 = C49252 * C1935;
    const double C14718 = C49252 * C1941;
    const double C2507 =
        (((0 - (C47947 * C47948) / C47864) * ae) / C47864 - (0 * be) / C47876) /
            C47870 +
        ((C47947 * (((C49007 - (C47947 * 2 * C47950) / C47864) * ae) / C47864 -
                    C47948 / C47876) +
          C49252) *
         ae) /
            C47864 +
        (0 * ae) / C47864 - C47950 / C47869;
    const double C49286 = 2 * C49250;
    const double C2525 = C2508 * C397;
    const double C2519 = C2508 * C407;
    const double C2513 = C2508 * C398;
    const double C10117 = C2508 * C1469;
    const double C10111 = C2508 * C1463;
    const double C10105 = C2508 * C703;
    const double C10099 = C2508 * C697;
    const double C10750 = C2508 * C2377;
    const double C49096 = C49095 / C47864;
    const double C49299 = C49263 / C47876;
    const double C38183 = C36601 * C2388;
    const double C49313 = C49252 - C49296;
    const double C30850 = -C49296;
    const double C15216 = C15195 * C406;
    const double C15210 = C15195 * C416;
    const double C15204 = C15195 * C408;
    const double C16704 = C15195 * C1475;
    const double C16698 = C15195 * C1470;
    const double C16692 = C15195 * C712;
    const double C16686 = C15195 * C702;
    const double C17150 = C15195 * C1935;
    const double C17144 = C15195 * C1941;
    const double C17325 = C15195 * C2388;
    const double C49320 = C49308 + C49085;
    const double C48037 = C48033 / C47870;
    const double C170 = C152 + C153;
    const double C311 = C302 + C303;
    const double C443 = C434 + C435;
    const double C1306 = C1276 + C1277;
    const double C1964 = C1959 + C1960;
    const double C133 =
        (2 * (C48108 * C48245 + C48487 * ae) +
         C48108 * (C48245 + C48108 * C48249 + C48108 * C48210 * ae) +
         (C48487 + C48210 * C48133) * ae) /
        C47864;
    const double C273 =
        (C48238 * (C48245 + C48108 * C48249 + C48492 * ae)) / C47864;
    const double C405 =
        (C48107 * (C48245 + C48108 * C48249 + C48492 * ae)) / C47864;
    const double C603 =
        (C48108 * C48245 + C48487 * ae + C48249 * C48287) / C47864;
    const double C705 = (C48107 * C48238 * C48249) / C47864;
    const double C956 =
        (C48108 * C48245 + C48487 * ae + C48249 * C48331) / C47864;
    const double C3771 =
        (3 * (C48120 + C48107 * C48635 + C48633 * ae) +
         C48107 * (2 * C48635 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48201) +
                             C48107 * C48198 * ae) +
                   C48636 * ae) +
         (2 * C48633 + C48107 * C48636) * ae) /
        C47864;
    const double C1493 = C49007 * C704;
    const double C5208 = C49094 * C704;
    const double C6698 = C49252 * C704;
    const double C15426 = C15195 * C704;
    const double C19009 = C15194 * C704;
    const double C31058 = C49094 * C704;
    const double C2516 = C49287 * C955;
    const double C5374 = C49094 * C955;
    const double C15206 = C49287 * C955;
    const double C15608 = C15195 * C955;
    const double C31224 = C49094 * C955;
    const double C36611 = C36601 * C955;
    const double C1088 = C113 * C596;
    const double C6471 = C5002 * C596;
    const double C1492 = C113 * C698;
    const double C2739 = C2508 * C698;
    const double C5207 = C5003 * C698;
    const double C6697 = C5002 * C698;
    const double C2515 = C2509 * C949;
    const double C2937 = C2508 * C949;
    const double C5373 = C5003 * C949;
    const double C1290 = C113 * C1252;
    const double C12664 = C5002 * C1252;
    const double C1484 = C113 * C1462;
    const double C6469 = C5003 * C1462;
    const double C10123 = C2508 * C1462;
    const double C12872 = C5002 * C1462;
    const double C2935 = C2509 * C2901;
    const double C7258 = C49094 * C2376;
    const double C10102 = C49287 * C2376;
    const double C16688 = C49287 * C2376;
    const double C17331 = C15195 * C2376;
    const double C33149 = C49094 * C2376;
    const double C38177 = C36601 * C2376;
    const double C10755 = C49287 * C3357;
    const double C17329 = C49287 * C3357;
    const double C21497 = C49300 * C3357;
    const double C38987 = C36601 * C3357;
    const double C42475 = C49300 * C3357;
    const double C7257 = C5003 * C2370;
    const double C10101 = C2509 * C2370;
    const double C10756 = C2508 * C2370;
    const double C10754 = C2509 * C3354;
    const double C172 = C156 + C157;
    const double C309 = C298 + C299;
    const double C441 = C430 + C431;
    const double C1781 = C1777 + C1778;
    const double C1962 = C1951 + C1952;
    const double C171 = C154 + C155;
    const double C310 = C300 + C301;
    const double C442 = C432 + C433;
    const double C1307 = C1278 + C1279;
    const double C1963 = C1957 + C1958;
    const double C134 = (3 * (C48120 + C48127 * C48133) +
                         C48108 * (2 * C48129 + C48108 * C48141)) /
                        C47864;
    const double C272 = (C48238 * (2 * C48129 + C48108 * C48141)) / C47864;
    const double C404 = (C48107 * (2 * C48129 + C48108 * C48141) +
                         (2 * C48492 + C48108 * C48494) * ae) /
                        C47864;
    const double C604 = (C48120 + C48127 * C48133 + C48141 * C48287) / C47864;
    const double C706 =
        (C48107 * C48238 * C48141 + C48238 * C48494 * ae) / C47864;
    const double C957 =
        (C48120 + C48127 * C48133 + C48107 * (C48107 * C48141 + C48494 * ae) +
         C48107 * C48494 * ae) /
        C47864;
    const double C1256 =
        (2 * C48238 * C48141 + C48238 * (C48141 + C48157 * C48287)) / C47864;
    const double C48158 = C48108 * C48156;
    const double C48163 = 2 * C48156;
    const double C48322 = C48238 * C48156;
    const double C48338 = C48107 * C48156;
    const double C48151 = C48136 + C48147;
    const double C48642 = C48639 + C48252;
    const double C1291 = C49007 * C1258;
    const double C12665 = C49252 * C1258;
    const double C1485 = C49007 * C1468;
    const double C6470 = C49094 * C1468;
    const double C12873 = C49252 * C1468;
    const double C16710 = C15195 * C1468;
    const double C32104 = C49094 * C1468;
    const double C9237 = C49007 * C1762;
    const double C9214 =
        (4 * (2 * C48620 + C48238 * C48655) +
         C48238 *
             (3 * C48655 + C48238 * (2 * C48238 * C48137 +
                                     C48238 * (C48137 + C48153 * C48287)))) /
        C47864;
    const double C9332 =
        (C48107 *
             (3 * C48655 + C48238 * (2 * C48238 * C48137 +
                                     C48238 * (C48137 + C48153 * C48287))) +
         (3 * C48598 +
          C48238 * (2 * C48621 + C48238 * (C48198 + C48199 * C48287))) *
             ae) /
        C47864;
    const double C48710 = C48706 + C48707;
    const double C48740 = C48107 * C48736;
    const double C48777 = 2 * C48736;
    const double C144 =
        (3 * (C48126 + ae * C48129 + C48108 * C48140) +
         ae * (2 * C48129 + C48108 * C48141) +
         C48108 *
             (2 * C48140 + ae * C48141 +
              C48108 * (C48136 + ae * C48108 * C48137 +
                        C48108 * (ae * C48137 + C48108 * std::pow(C48110, 6) *
                                                    bs[6] * C48118)))) /
        C47869;
    const double C283 =
        ((yP - yQ) * (C48126 + ae * C48129 + C48108 * C48140)) / C47869;
    const double C415 = (ae * (C48117 * C48113 * C48197 +
                               C48108 * (C48108 * C48211 + C48210 * ae) +
                               C48108 * C48210 * ae) +
                         C48107 * (C48126 + ae * C48129 + C48108 * C48140)) /
                        C47869;
    const double C611 =
        (ae * C48120 + C48108 * C48126 + C48140 * std::pow(yP - yQ, 2)) /
        C47869;
    const double C713 = (ae * C48238 * (C48108 * C48211 + C48210 * ae) +
                         C48107 * C48238 * C48140) /
                        C47869;
    const double C964 = (ae * C48120 + C48108 * C48126 + ae * C48107 * C48249 +
                         C48107 * (ae * C48249 + C48107 * C48140)) /
                        C47869;
    const double C1264 = (2 * C48238 * C48140 +
                          C48238 * (C48140 + C48156 * std::pow(C48238, 2))) /
                         C47869;
    const double C1780 = C1775 + C1776;
    const double C1961 = C1949 + C1950;
    const double C48258 = C48205 * ae;
    const double C48497 = C48108 * C48205;
    const double C48502 = 3 * C48205;
    const double C48594 = C48238 * C48205;
    const double C48647 = C48107 * C48205;
    const double C1466 = (C48107 * (C48141 + C48157 * C48287) +
                          (C48494 + C48205 * C48287) * ae) /
                         C47864;
    const double C1251 =
        2 * C48238 * C48494 + C48238 * (C48494 + C48205 * C48287);
    const double C1461 = C48107 * (C48494 + C48205 * C48287);
    const double C2900 =
        2 * C48107 * C48494 + C48107 * (C48494 + C48205 * C48331);
    const double C48749 = C48746 + C48221;
    const double C48602 = C48202 + C48601;
    const double C48693 = 2 * C48625;
    const double C48724 = C48107 * C48625;
    const double C48723 = C48625 * ae;
    const double C3359 =
        (2 * (C48107 * C48624 + C48591 * ae) +
         C48107 * (C48624 + C48107 * (C48107 * C48238 * C48165 + C48625 * ae) +
                   C48107 * C48625 * ae) +
         (C48591 + C48625 * C48331) * ae) /
        C47864;
    const double C3355 =
        2 * C48107 * C48591 + C48107 * (C48591 + C48625 * C48331);
    const double C48643 = C48202 + C48641;
    const double C48752 = 2 * C48747;
    const double C48750 = C48747 * ae;
    const double C11575 = C49007 * C1937;
    const double C12663 = C49094 * C1937;
    const double C32344 = C49094 * C1937;
    const double C48228 = C48108 * C48226;
    const double C48263 = 2 * C48226;
    const double C48307 = C48226 * C48287;
    const double C48323 = C48238 * C48226;
    const double C48339 = C48226 * C48331;
    const double C48429 = ae * C48226;
    const double C48428 = C48107 * C48226;
    const double C48787 = C48107 * C48783;
    const double C48678 = C48238 * C48674;
    const double C48682 = 3 * C48674;
    const double C48716 = C48107 * C48674;
    const double C48715 = C48674 * ae;
    const double C10299 =
        (2 * (C48107 * C48655 + C48598 * ae) +
         C48107 * (C48655 + C48107 * (C48107 * C48668 + C48674 * ae) +
                   C48107 * C48674 * ae) +
         (C48598 + C48674 * C48331) * ae) /
        C47864;
    const double C10296 =
        2 * C48107 * C48598 + C48107 * (C48598 + C48674 * C48331);
    const double C48711 = C48621 + C48709;
    const double C48767 = 2 * C48762;
    const double C48765 = C48762 * ae;
    const double C48768 = C48764 + C48761;
    const double C48741 = C48107 * C48738;
    const double C48782 = 3 * C48738;
    const double C48780 = C48738 * ae;
    const double C48251 = C48108 * C48207;
    const double C48256 = 2 * C48207;
    const double C48300 = C48238 * C48207;
    const double C48337 = ae * C48207;
    const double C48336 = C48107 * C48207;
    const double C1474 = (ae * (C48249 + C48207 * C48287) +
                          C48107 * (C48140 + C48156 * C48287)) /
                         C47869;
    const double C2913 = (2 * (ae * C48249 + C48107 * C48140) +
                          ae * (C48249 + C48207 * std::pow(C48107, 2)) +
                          C48107 * (C48140 + ae * C48107 * C48207 +
                                    C48107 * (ae * C48207 + C48107 * C48156))) /
                         C47869;
    const double C1257 =
        (2 * C48238 * C48249 + C48238 * (C48249 + C48207 * C48287)) / C47864;
    const double C1467 = (C48107 * (C48249 + C48207 * C48287)) / C47864;
    const double C2906 =
        (2 * C48107 * C48249 + C48107 * (C48249 + C48207 * C48331)) / C47864;
    const double C2391 =
        (C48126 + C48136 * C48287 + ae * C48107 * C48305 +
         C48107 * (ae * C48305 + C48107 * (C48136 + C48152 * C48287))) /
        C47869;
    const double C9335 =
        (ae * (3 * C48305 +
               C48238 * (2 * C48320 + C48238 * (C48204 + C48220 * C48287))) +
         C48107 *
             (3 * C48351 + C48238 * (2 * C48238 * C48152 +
                                     C48238 * (C48152 + C48176 * C48287)))) /
        C47869;
    const double C1761 = (3 * (C48245 + C48211 * C48287) +
                          C48238 * (2 * C48298 + C48238 * C48305)) /
                         C47864;
    const double C1936 = (C48107 * (2 * C48298 + C48238 * C48305)) / C47864;
    const double C2383 = (C48245 + C48211 * C48287 + C48305 * C48331) / C47864;
    const double C10298 =
        (2 * C48107 * C48305 + C48107 * (C48305 + C48366 * C48331)) / C47864;
    const double C48395 = C48392 + C48393;
    const double C10749 = C49287 * C3363;
    const double C17323 = C49287 * C3363;
    const double C21505 = C49300 * C3363;
    const double C38981 = C36601 * C3363;
    const double C42483 = C49300 * C3363;
    const double C10748 = C2509 * C3358;
    const double C3777 =
        (3 * (C48126 + ae * C48328 + C48107 * C48332) +
         ae * (2 * C48328 + C48107 * C48334) +
         C48107 * (2 * C48332 + ae * C48334 +
                   C48107 * (C48136 + ae * C48107 * C48204 +
                             C48107 * (ae * C48204 + C48107 * C48152)))) /
        C47869;
    const double C3772 = (3 * (C48245 + C48211 * C48331) +
                          C48107 * (2 * C48328 + C48107 * C48334)) /
                         C47864;
    const double C48423 = C48107 * C48419;
    const double C48458 = 2 * C48419;
    const double C48422 = C48136 + C48418;
    const double C48183 = C48108 * C48181;
    const double C1764 =
        (3 * (C48141 + C48157 * C48287) +
         C48238 * (2 * C48238 * C48157 + C48238 * (C48157 + C48181 * C48287))) /
        C47864;
    const double C1939 =
        (C48107 * (2 * C48238 * C48157 + C48238 * (C48157 + C48181 * C48287)) +
         (2 * C48238 * C48205 + C48238 * (C48205 + C48225 * C48287)) * ae) /
        C47864;
    const double C48182 = C48108 * C48180;
    const double C48353 = C48180 * C48287;
    const double C48407 = C48238 * C48180;
    const double C48430 = C48107 * C48180;
    const double C1767 =
        (3 * (C48140 + C48156 * C48287) +
         C48238 * (2 * C48238 * C48156 + C48238 * (C48156 + C48180 * C48287))) /
        C47869;
    const double C1942 =
        (ae * (2 * C48238 * C48207 + C48238 * (C48207 + C48226 * C48287)) +
         C48107 * (2 * C48238 * C48156 + C48238 * (C48156 + C48180 * C48287))) /
        C47869;
    const double C48362 = C48238 * C48361;
    const double C48400 = C48107 * C48361;
    const double C10302 =
        (2 * (ae * C48305 + C48107 * C48351) + ae * (C48305 + C48366 * C48331) +
         C48107 * (C48351 + ae * C48107 * C48366 +
                   C48107 * (ae * C48366 + C48107 * C48361))) /
        C47869;
    const double C48451 = C48443 + C48447;
    const double C48471 = C48107 * C48467;
    const double C48273 = C48108 * C48272;
    const double C48383 = C48272 * C48287;
    const double C48408 = C48238 * C48272;
    const double C48431 = C48272 * C48331;
    const double C48377 = C48238 * C48376;
    const double C48401 = C48376 * C48331;
    const double C48452 = C48373 + C48449;
    const double C48472 = C48107 * C48469;
    const double C2936 = C49287 * C2907;
    const double C15606 = C49287 * C2907;
    const double C20197 = C49300 * C2907;
    const double C33807 = C49300 * C2907;
    const double C37011 = C36601 * C2907;
    const double C2738 = C49287 * C2378;
    const double C6696 = C49094 * C2378;
    const double C15424 = C49287 * C2378;
    const double C19007 = C15195 * C2378;
    const double C32570 = C49094 * C2378;
    const double C36829 = C36601 * C2378;
    const double C2737 = C2509 * C2371;
    const double C6695 = C5003 * C2371;
    const double C25202 = C2508 * C2371;
    const double C160 = C113 * C123;
    const double C5035 = C5002 * C123;
    const double C294 = C113 * C264;
    const double C5193 = C5002 * C264;
    const double C426 = C113 * C396;
    const double C2543 = C2508 * C396;
    const double C5023 = C5003 * C396;
    const double C5359 = C5002 * C396;
    const double C1092 = C113 * C597;
    const double C6463 = C5002 * C597;
    const double C1488 = C113 * C699;
    const double C2727 = C2508 * C699;
    const double C5199 = C5003 * C699;
    const double C6689 = C5002 * C699;
    const double C2527 = C2509 * C950;
    const double C2925 = C2508 * C950;
    const double C5365 = C5003 * C950;
    const double C10114 = C49287 * C2382;
    const double C13438 = C49094 * C2382;
    const double C16700 = C49287 * C2382;
    const double C17319 = C15195 * C2382;
    const double C33141 = C49094 * C2382;
    const double C38775 = C36601 * C2382;
    const double C9226 = C113 * C1757;
    const double C14575 = C5002 * C1757;
    const double C9589 = C113 * C1932;
    const double C10571 = C2508 * C1932;
    const double C13226 = C5003 * C1932;
    const double C14721 = C5002 * C1932;
    const double C10113 = C2509 * C2373;
    const double C10744 = C2508 * C2373;
    const double C13437 = C5003 * C2373;
    const double C48161 = C48149 + C48159;
    const double C9215 =
        (4 * (2 * C48624 + C48238 * C48658) +
         C48238 * (3 * C48658 +
                   C48238 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287)))) /
        C47864;
    const double C48670 = C48667 + C48669;
    const double C9490 = C49007 * C9217;
    const double C48229 = C48223 + C48227;
    const double C48606 = C48205 + C48605;
    const double C48650 = C48205 + C48648;
    const double C48696 = C48238 * C48695;
    const double C48729 = C48625 + C48727;
    const double C48754 = C48107 * C48751;
    const double C48688 = C48685 + C48687;
    const double C48719 = C48674 + C48717;
    const double C48771 = C48107 * C48769;
    const double C48790 = C48786 + C48788;
    const double C48370 = C48368 + C48369;
    const double C11176 = (3 * (C48298 + C48320 * C48331) +
                           C48107 * (2 * C48391 + C48107 * C48396)) /
                          C47864;
    const double C48450 = C48358 + C48446;
    const double C48426 = C48420 + C48424;
    const double C49049 = C49048 / C47869;
    const double C49283 = 2 * C49248;
    const double C49056 = C49055 / C47864;
    const double C49293 = C49257 / C47876;
    const double C49310 = C49251 - C49290;
    const double C22509 = -C49290;
    const double C49319 = C49306 + C49045;
    const double C47908 = C47905 * be;
    const double C47894 = C47862 * C47890;
    const double C47922 = C47890 / C47870;
    const double C47893 = C47889 / C47864;
    const double C48897 = C48893 - C48896;
    const double C49303 = C49268 / C47864;
    const double C48905 = C48901 - C48904;
    const double C49317 = C49302 / C47870;
    const double C48038 = C48034 * be;
    const double C48009 = C48001 / C47864;
    const double C15233 = C15198 * C396;
    const double C15215 = C15198 * C397;
    const double C15209 = C15198 * C407;
    const double C15203 = C15198 * C398;
    const double C15425 = C15198 * C698;
    const double C15413 = C15198 * C699;
    const double C15607 = C15198 * C949;
    const double C15595 = C15198 * C950;
    const double C16709 = C15198 * C1462;
    const double C16703 = C15198 * C1469;
    const double C16697 = C15198 * C1463;
    const double C16691 = C15198 * C703;
    const double C16685 = C15198 * C697;
    const double C17149 = C15198 * C1932;
    const double C17330 = C15198 * C2370;
    const double C17324 = C15198 * C2377;
    const double C17318 = C15198 * C2373;
    const double C19006 = C15198 * C2371;
    const double C15217 = C15199 * C950;
    const double C15205 = C15199 * C949;
    const double C15423 = C15199 * C2371;
    const double C15605 = C15199 * C2901;
    const double C16699 = C15199 * C2373;
    const double C16693 = C15199 * C2377;
    const double C16687 = C15199 * C2370;
    const double C17328 = C15199 * C3354;
    const double C17322 = C15199 * C3358;
    const double C30873 = C30853 * C396;
    const double C30865 = C30853 * C397;
    const double C30861 = C30853 * C407;
    const double C30857 = C30853 * C398;
    const double C31057 = C30853 * C698;
    const double C31049 = C30853 * C699;
    const double C31223 = C30853 * C949;
    const double C31215 = C30853 * C950;
    const double C32103 = C30853 * C1462;
    const double C32335 = C30853 * C1469;
    const double C32331 = C30853 * C1463;
    const double C32325 = C30853 * C703;
    const double C32321 = C30853 * C697;
    const double C32569 = C30853 * C2371;
    const double C32929 = C30853 * C1932;
    const double C33148 = C30853 * C2370;
    const double C33144 = C30853 * C2377;
    const double C33140 = C30853 * C2373;
    const double C48018 = C47947 * C48014;
    const double C48047 = C48014 / C47870;
    const double C10138 = C10107 + C10108;
    const double C5042 = C5015 + C5016;
    const double C5040 = C5011 + C5012;
    const double C5038 = C5007 + C5008;
    const double C6480 = C6453 + C6454;
    const double C6478 = C6449 + C6450;
    const double C7057 = C7051 + C7052;
    const double C7055 = C7047 + C7048;
    const double C7261 = C7253 + C7254;
    const double C1313 = C1305 * C1078;
    const double C8065 = C1305 * C49316;
    const double C9221 = C1305 * C48892;
    const double C11419 = C1305 * C49229;
    const double C23761 = C1305 * C23621;
    const double C9220 = C1304 * C9128;
    const double C49090 = C49085 - C49089;
    const double C5045 = C5021 + C5022;
    const double C5043 = C5017 + C5018;
    const double C5041 = C5013 + C5014;
    const double C5039 = C5009 + C5010;
    const double C5037 = C5005 + C5006;
    const double C5222 = C5209 + C5210;
    const double C5220 = C5205 + C5206;
    const double C5218 = C5201 + C5202;
    const double C5388 = C5375 + C5376;
    const double C5386 = C5371 + C5372;
    const double C5384 = C5367 + C5368;
    const double C6479 = C6451 + C6452;
    const double C6477 = C6447 + C6448;
    const double C7058 = C7053 + C7054;
    const double C7056 = C7049 + C7050;
    const double C7264 = C7259 + C7260;
    const double C7262 = C7255 + C7256;
    const double C13235 = C13228 + C13229;
    const double C13233 = C13224 + C13225;
    const double C13444 = C13439 + C13440;
    const double C13442 = C13435 + C13436;
    const double C2545 = C2507 * C122;
    const double C2529 = C2507 * C131;
    const double C2523 = C2507 * C121;
    const double C2517 = C2507 * C129;
    const double C2511 = C2507 * C120;
    const double C2741 = C2507 * C266;
    const double C2735 = C2507 * C275;
    const double C2729 = C2507 * C265;
    const double C2939 = C2507 * C398;
    const double C2933 = C2507 * C407;
    const double C2927 = C2507 * C397;
    const double C10121 = C2507 * C596;
    const double C10115 = C2507 * C601;
    const double C10109 = C2507 * C595;
    const double C10103 = C2507 * C277;
    const double C10097 = C2507 * C267;
    const double C10573 = C2507 * C1253;
    const double C10567 = C2507 * C1259;
    const double C10758 = C2507 * C697;
    const double C10752 = C2507 * C703;
    const double C10746 = C2507 * C1463;
    const double C10740 = C2507 * C1469;
    const double C25204 = C2507 * C698;
    const double C49309 = C49286 / C47864;
    const double C49097 = C49093 - C49096;
    const double C49323 = C49313 / C47870;
    const double C30876 = C30850 * C143;
    const double C30872 = C30850 * C132;
    const double C30868 = C30850 * C142;
    const double C30864 = C30850 * C130;
    const double C30860 = C30850 * C141;
    const double C30856 = C30850 * C128;
    const double C31060 = C30850 * C276;
    const double C31056 = C30850 * C284;
    const double C31052 = C30850 * C274;
    const double C31226 = C30850 * C408;
    const double C31222 = C30850 * C416;
    const double C31218 = C30850 * C406;
    const double C32102 = C30850 * C602;
    const double C32346 = C30850 * C1258;
    const double C32334 = C30850 * C610;
    const double C32330 = C30850 * C600;
    const double C32324 = C30850 * C285;
    const double C32320 = C30850 * C278;
    const double C32572 = C30850 * C704;
    const double C32564 = C30850 * C1468;
    const double C32932 = C30850 * C1260;
    const double C32928 = C30850 * C1265;
    const double C33151 = C30850 * C702;
    const double C33147 = C30850 * C712;
    const double C33143 = C30850 * C1470;
    const double C33139 = C30850 * C1475;
    const double C41731 = C30850 * C1760;
    const double C41727 = C30850 * C1766;
    const double C41877 = C30850 * C1935;
    const double C41873 = C30850 * C1941;
    const double C15197 =
        ((-(0 * be) / C47864) / C47870 -
         ((0 - (C47947 * C47948) / C47864) * be) / C47864) /
            C47870 -
        ((C47947 * ((-C47948 / C47864) / C47870 -
                    ((C49007 - (C47947 * C47982) / C47864) * be) / C47864) +
          C30850) *
         be) /
            C47864 +
        (-C47982 / C47864) / C47870 - (0 * be) / C47864;
    const double C2546 = C49320 * C132;
    const double C2540 = C49320 * C143;
    const double C2530 = C49320 * C142;
    const double C2524 = C49320 * C130;
    const double C2518 = C49320 * C141;
    const double C2512 = C49320 * C128;
    const double C2742 = C49320 * C276;
    const double C2736 = C49320 * C284;
    const double C2730 = C49320 * C274;
    const double C2940 = C49320 * C408;
    const double C2934 = C49320 * C416;
    const double C2928 = C49320 * C406;
    const double C10122 = C49320 * C602;
    const double C10116 = C49320 * C610;
    const double C10110 = C49320 * C600;
    const double C10104 = C49320 * C285;
    const double C10098 = C49320 * C278;
    const double C10574 = C49320 * C1260;
    const double C10568 = C49320 * C1265;
    const double C10759 = C49320 * C702;
    const double C10753 = C49320 * C712;
    const double C10747 = C49320 * C1470;
    const double C10741 = C49320 * C1475;
    const double C25205 = C49320 * C704;
    const double C9230 = C311 * C9128;
    const double C11420 = C311 * C47890;
    const double C23762 = C311 * C23628;
    const double C9222 = C1306 * C9128;
    const double C9594 = C1964 * C9128;
    const double C158 = C113 * C133;
    const double C2539 = C2507 * C133;
    const double C5025 = C5002 * C133;
    const double C296 = C113 * C273;
    const double C2723 = C2507 * C273;
    const double C5197 = C5002 * C273;
    const double C428 = C113 * C405;
    const double C2531 = C2508 * C405;
    const double C2921 = C2507 * C405;
    const double C5019 = C5003 * C405;
    const double C5363 = C5002 * C405;
    const double C15221 = C15198 * C405;
    const double C30869 = C30853 * C405;
    const double C1090 = C113 * C603;
    const double C6467 = C5002 * C603;
    const double C10127 = C2507 * C603;
    const double C1490 = C113 * C705;
    const double C2733 = C2508 * C705;
    const double C5203 = C5003 * C705;
    const double C6693 = C5002 * C705;
    const double C15419 = C15198 * C705;
    const double C25198 = C2507 * C705;
    const double C31053 = C30853 * C705;
    const double C2521 = C2509 * C956;
    const double C2931 = C2508 * C956;
    const double C5369 = C5003 * C956;
    const double C15211 = C15199 * C956;
    const double C15601 = C15198 * C956;
    const double C31219 = C30853 * C956;
    const double C1100 = C1088 + C1089;
    const double C6488 = C6471 + C6472;
    const double C1501 = C1492 + C1493;
    const double C5221 = C5207 + C5208;
    const double C6706 = C6697 + C6698;
    const double C2549 = C2515 + C2516;
    const double C5387 = C5373 + C5374;
    const double C7263 = C7257 + C7258;
    const double C10135 = C10101 + C10102;
    const double C10769 = C10754 + C10755;
    const double C1274 = C309 * C1086;
    const double C11432 = C309 * C47890;
    const double C23774 = C309 * C23628;
    const double C9224 = C1781 * C9128;
    const double C9592 = C1962 * C9128;
    const double C1293 = C310 * C1078;
    const double C1273 = C310 * C1079;
    const double C8077 = C310 * C49316;
    const double C9231 = C310 * C48892;
    const double C11431 = C310 * C49229;
    const double C11421 = C310 * C48902;
    const double C23773 = C310 * C23621;
    const double C23763 = C310 * C48902;
    const double C1315 = C1307 * C1078;
    const double C8071 = C1307 * C49316;
    const double C9223 = C1307 * C48892;
    const double C11423 = C1307 * C49229;
    const double C23765 = C1307 * C23621;
    const double C1967 = C1963 * C1078;
    const double C8657 = C1963 * C49316;
    const double C9593 = C1963 * C48892;
    const double C11956 = C1963 * C49229;
    const double C24292 = C1963 * C23621;
    const double C161 = C49007 * C134;
    const double C5036 = C49252 * C134;
    const double C30886 = C30850 * C134;
    const double C295 = C49007 * C272;
    const double C5194 = C49252 * C272;
    const double C31044 = C30850 * C272;
    const double C427 = C49007 * C404;
    const double C5024 = C49094 * C404;
    const double C5360 = C49252 * C404;
    const double C15234 = C15195 * C404;
    const double C30874 = C49094 * C404;
    const double C31210 = C30850 * C404;
    const double C1093 = C49007 * C604;
    const double C6464 = C49252 * C604;
    const double C32116 = C30850 * C604;
    const double C1489 = C49007 * C706;
    const double C5200 = C49094 * C706;
    const double C6690 = C49252 * C706;
    const double C15414 = C15195 * C706;
    const double C31050 = C49094 * C706;
    const double C35417 = C30850 * C706;
    const double C2528 = C49287 * C957;
    const double C5366 = C49094 * C957;
    const double C15218 = C49287 * C957;
    const double C15596 = C15195 * C957;
    const double C31216 = C49094 * C957;
    const double C36623 = C36601 * C957;
    const double C1287 = C49007 * C1256;
    const double C48170 = C48163 + C48164;
    const double C48160 = C48151 + C48158;
    const double C1311 = C1290 + C1291;
    const double C12671 = C12664 + C12665;
    const double C1497 = C1484 + C1485;
    const double C6487 = C6469 + C6470;
    const double C12877 = C12872 + C12873;
    const double C9492 = C49007 * C9214;
    const double C9586 = C49007 * C9332;
    const double C14574 = C49094 * C9332;
    const double C41729 = C49094 * C9332;
    const double C48742 = C48127 + C48740;
    const double C163 = C49007 * C144;
    const double C5032 = C49252 * C144;
    const double C30882 = C30850 * C144;
    const double C297 = C49007 * C283;
    const double C2724 = C49320 * C283;
    const double C5198 = C49252 * C283;
    const double C15410 = C15194 * C283;
    const double C31048 = C30850 * C283;
    const double C429 = C49007 * C415;
    const double C2922 = C49320 * C415;
    const double C5020 = C49094 * C415;
    const double C5364 = C49252 * C415;
    const double C15222 = C15195 * C415;
    const double C15592 = C15194 * C415;
    const double C30870 = C49094 * C415;
    const double C31214 = C30850 * C415;
    const double C1091 = C49007 * C611;
    const double C6468 = C49252 * C611;
    const double C10128 = C49320 * C611;
    const double C16714 = C15194 * C611;
    const double C32106 = C30850 * C611;
    const double C1491 = C49007 * C713;
    const double C5204 = C49094 * C713;
    const double C6694 = C49252 * C713;
    const double C15420 = C15195 * C713;
    const double C19003 = C15194 * C713;
    const double C25199 = C49320 * C713;
    const double C31054 = C49094 * C713;
    const double C32568 = C30850 * C713;
    const double C2522 = C49287 * C964;
    const double C5370 = C49094 * C964;
    const double C15212 = C49287 * C964;
    const double C15602 = C15195 * C964;
    const double C31220 = C49094 * C964;
    const double C36617 = C36601 * C964;
    const double C1289 = C49007 * C1264;
    const double C12661 = C49252 * C1264;
    const double C32342 = C30850 * C1264;
    const double C1783 = C1780 * C1078;
    const double C8495 = C1780 * C49316;
    const double C9225 = C1780 * C48892;
    const double C11427 = C1780 * C49229;
    const double C23769 = C1780 * C23621;
    const double C1965 = C1961 * C1078;
    const double C8651 = C1961 * C49316;
    const double C9591 = C1961 * C48892;
    const double C11952 = C1961 * C49229;
    const double C24288 = C1961 * C23621;
    const double C48649 = C48646 + C48258;
    const double C2905 =
        (2 * (C48107 * C48141 + C48494 * ae) +
         C48107 * (C48141 + C48107 * (C48107 * C48157 + C48258) +
                   C48107 * C48205 * ae) +
         (C48494 + C48205 * C48331) * ae) /
        C47864;
    const double C48498 = C48496 + C48497;
    const double C2380 =
        (C48238 * C48141 + C48107 * (C48107 * C48238 * C48157 + C48594 * ae) +
         C48107 * C48594 * ae) /
        C47864;
    const double C3361 =
        (2 * (C48107 * C48628 + C48594 * ae) +
         C48107 * (C48628 + C48107 * (C48107 * C48238 * C48181 + C48629 * ae) +
                   C48107 * C48629 * ae) +
         (C48594 + C48629 * C48331) * ae) /
        C47864;
    const double C2372 = C48238 * C48494 + C48594 * C48331;
    const double C3356 =
        2 * C48107 * C48594 + C48107 * (C48594 + C48629 * C48331);
    const double C1481 = C49007 * C1466;
    const double C6462 = C49094 * C1466;
    const double C32114 = C49094 * C1466;
    const double C1286 = C113 * C1251;
    const double C1480 = C113 * C1461;
    const double C6461 = C5003 * C1461;
    const double C32113 = C30853 * C1461;
    const double C2923 = C2509 * C2900;
    const double C15593 = C15199 * C2900;
    const double C48753 = C48107 * C48749;
    const double C2384 =
        (C48129 + C48143 * C48287 +
         C48107 * (C48107 * (C48143 + C48165 * C48287) + C48602 * ae) +
         C48107 * C48602 * ae) /
        C47864;
    const double C9333 =
        (C48107 * (3 * C48658 +
                   C48238 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287))) +
         (3 * C48602 +
          C48238 * (2 * C48625 + C48238 * (C48218 + C48266 * C48287))) *
             ae) /
        C47864;
    const double C10300 =
        (2 * (C48107 * C48658 + C48602 * ae) +
         C48107 * (C48658 +
                   C48107 * (C48107 * (C48165 + C48108 * C48177 * C48287) +
                             C48695 * ae) +
                   C48107 * C48695 * ae) +
         (C48602 + C48695 * C48331) * ae) /
        C47864;
    const double C1758 = 3 * (C48492 + C48202 * C48287) +
                         C48238 * (2 * C48591 + C48238 * C48602);
    const double C1933 = C48107 * (2 * C48591 + C48238 * C48602);
    const double C2374 = C48492 + C48202 * C48287 + C48602 * C48331;
    const double C10297 =
        2 * C48107 * C48602 + C48107 * (C48602 + C48695 * C48331);
    const double C48728 = C48726 + C48723;
    const double C19005 = C49287 * C3359;
    const double C20377 = C49300 * C3359;
    const double C25201 = C49287 * C3359;
    const double C33987 = C49300 * C3359;
    const double C38417 = C36601 * C3359;
    const double C19004 = C15199 * C3355;
    const double C25200 = C2509 * C3355;
    const double C3773 =
        (3 * (C48129 + C48107 * C48642 + C48640 * ae) +
         C48107 * (2 * C48642 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48221) +
                             C48107 * C48218 * ae) +
                   C48643 * ae) +
         (2 * C48640 + C48107 * C48643) * ae) /
        C47864;
    const double C3769 = 3 * (C48492 + C48202 * C48331) +
                         C48107 * (2 * C48640 + C48107 * C48643);
    const double C48230 = C48204 + C48228;
    const double C48308 = C48207 + C48307;
    const double C48382 = 2 * C48323;
    const double C48406 = ae * C48323;
    const double C48405 = C48107 * C48323;
    const double C48341 = C48207 + C48339;
    const double C48434 = 2 * C48428;
    const double C48432 = ae * C48428;
    const double C48789 = C48137 + C48787;
    const double C48679 = C48677 + C48678;
    const double C48718 = C48714 + C48715;
    const double C10743 = C49287 * C10299;
    const double C17317 = C49287 * C10299;
    const double C21881 = C49300 * C10299;
    const double C42859 = C49300 * C10299;
    const double C47433 = C36601 * C10299;
    const double C10742 = C2509 * C10296;
    const double C17316 = C15199 * C10296;
    const double C11175 =
        (3 * (C48620 + C48107 * C48710 + C48708 * ae) +
         C48107 * (2 * C48710 +
                   C48107 * (C48665 +
                             C48107 * (C48107 * C48238 * C48153 + C48683 * ae) +
                             C48107 * C48683 * ae) +
                   C48711 * ae) +
         (2 * C48708 + C48107 * C48711) * ae) /
        C47864;
    const double C11173 = 3 * (C48588 + C48621 * C48331) +
                          C48107 * (2 * C48708 + C48107 * C48711);
    const double C48770 = C48107 * C48768;
    const double C48743 = C48739 + C48741;
    const double C48253 = C48211 + C48251;
    const double C2389 = (C48238 * C48140 + ae * C48107 * C48300 +
                          C48107 * (ae * C48300 + C48107 * C48238 * C48156)) /
                         C47869;
    const double C3364 =
        (2 * (ae * C48300 + C48107 * C48322) +
         ae * (C48300 + C48323 * std::pow(C48107, 2)) +
         C48107 * (C48322 + ae * C48107 * C48323 +
                   C48107 * (ae * C48323 + C48107 * C48238 * C48180))) /
        C47869;
    const double C2379 = (C48238 * C48249 + C48300 * C48331) / C47864;
    const double C3360 =
        (2 * C48107 * C48300 + C48107 * (C48300 + C48323 * C48331)) / C47864;
    const double C48340 = C48337 + C48338;
    const double C1483 = C49007 * C1474;
    const double C6466 = C49094 * C1474;
    const double C12869 = C49252 * C1474;
    const double C16716 = C15195 * C1474;
    const double C32108 = C49094 * C1474;
    const double C32560 = C30850 * C1474;
    const double C2930 = C49287 * C2913;
    const double C15600 = C49287 * C2913;
    const double C20205 = C49300 * C2913;
    const double C33815 = C49300 * C2913;
    const double C37005 = C36601 * C2913;
    const double C1288 = C113 * C1257;
    const double C12660 = C5002 * C1257;
    const double C1482 = C113 * C1467;
    const double C6465 = C5003 * C1467;
    const double C10129 = C2508 * C1467;
    const double C12868 = C5002 * C1467;
    const double C16715 = C15198 * C1467;
    const double C32107 = C30853 * C1467;
    const double C2929 = C2509 * C2906;
    const double C15599 = C15199 * C2906;
    const double C10120 = C49287 * C2391;
    const double C13434 = C49094 * C2391;
    const double C16706 = C49287 * C2391;
    const double C17313 = C15195 * C2391;
    const double C33137 = C49094 * C2391;
    const double C38769 = C36601 * C2391;
    const double C9584 = C49007 * C9335;
    const double C14570 = C49094 * C9335;
    const double C41725 = C49094 * C9335;
    const double C9228 = C113 * C1761;
    const double C14571 = C5002 * C1761;
    const double C9587 = C113 * C1936;
    const double C10565 = C2508 * C1936;
    const double C13222 = C5003 * C1936;
    const double C14717 = C5002 * C1936;
    const double C17143 = C15198 * C1936;
    const double C32925 = C30853 * C1936;
    const double C10119 = C2509 * C2383;
    const double C10738 = C2508 * C2383;
    const double C13433 = C5003 * C2383;
    const double C16705 = C15199 * C2383;
    const double C17312 = C15198 * C2383;
    const double C33136 = C30853 * C2383;
    const double C10736 = C2509 * C10298;
    const double C17310 = C15199 * C10298;
    const double C11179 =
        (3 * (C48319 + ae * C48391 + C48107 * C48395) +
         ae * (2 * C48391 + C48107 * C48396) +
         C48107 *
             (2 * C48395 + ae * C48396 +
              C48107 * (C48358 + ae * C48107 * C48373 +
                        C48107 * (ae * C48373 + C48107 * C48238 * C48176)))) /
        C47869;
    const double C10766 = C10748 + C10749;
    const double C48465 = C48458 + C48459;
    const double C48425 = C48422 + C48423;
    const double C48185 = C48173 + C48183;
    const double C48184 = C48175 + C48182;
    const double C48354 = C48156 + C48353;
    const double C48409 = C48107 * C48407;
    const double C48433 = C48429 + C48430;
    const double C9239 = C49007 * C1767;
    const double C11573 = C49007 * C1942;
    const double C12659 = C49094 * C1942;
    const double C32340 = C49094 * C1942;
    const double C48363 = C48360 + C48362;
    const double C48402 = C48399 + C48400;
    const double C10737 = C49287 * C10302;
    const double C17311 = C49287 * C10302;
    const double C21873 = C49300 * C10302;
    const double C42851 = C49300 * C10302;
    const double C47427 = C36601 * C10302;
    const double C48453 = C48107 * C48451;
    const double C48473 = C48470 + C48471;
    const double C48274 = C48220 + C48273;
    const double C48384 = C48226 + C48383;
    const double C48410 = C48408 * C48331;
    const double C48435 = C48226 + C48431;
    const double C48378 = C48375 + C48377;
    const double C48403 = C48366 + C48401;
    const double C48454 = C48107 * C48452;
    const double C48474 = C48468 + C48472;
    const double C2950 = C2935 + C2936;
    const double C2752 = C2737 + C2738;
    const double C6705 = C6695 + C6696;
    const double C9240 = C9226 + C9227;
    const double C14583 = C14575 + C14576;
    const double C9598 = C9589 + C9590;
    const double C13234 = C13226 + C13227;
    const double C14726 = C14721 + C14722;
    const double C10141 = C10113 + C10114;
    const double C13443 = C13437 + C13438;
    const double C137 = (4 * (2 * C48129 + C48108 * C48141) +
                         C48108 * (3 * C48141 + C48108 * C48161)) /
                        C47864;
    const double C270 = (C48238 * (3 * C48141 + C48108 * C48161)) / C47864;
    const double C606 =
        (2 * C48129 + C48108 * C48141 + C48161 * C48287) / C47864;
    const double C9482 =
        (5 * (3 * C48655 + C48238 * C48670) +
         C48238 * (4 * C48670 +
                   C48238 * (3 * C48668 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287))))) /
        C47864;
    const double C9579 =
        (C48107 * (4 * C48670 +
                   C48238 * (3 * C48668 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287)))) +
         (4 * (2 * C48621 + C48238 * C48674) +
          C48238 *
              (3 * C48674 + C48238 * (2 * C48238 * C48199 +
                                      C48238 * (C48199 + C48219 * C48287)))) *
             ae) /
        C47864;
    const double C48268 = C48229 * ae;
    const double C48503 = C48108 * C48229;
    const double C48609 = C48238 * C48229;
    const double C2386 =
        (C48141 + C48157 * C48287 +
         C48107 * (C48107 * (C48157 + C48181 * C48287) + C48606 * ae) +
         C48107 * C48606 * ae) /
        C47864;
    const double C1759 = 3 * (C48494 + C48205 * C48287) +
                         C48238 * (2 * C48594 + C48238 * C48606);
    const double C1934 = C48107 * (2 * C48594 + C48238 * C48606);
    const double C2375 = C48494 + C48205 * C48287 + C48606 * C48331;
    const double C3770 = 3 * (C48494 + C48205 * C48331) +
                         C48107 * (2 * C48647 + C48107 * C48650);
    const double C48697 = C48693 + C48696;
    const double C17901 = 3 * (C48591 + C48625 * C48331) +
                          C48107 * (2 * C48724 + C48107 * C48729);
    const double C48756 = C48752 + C48754;
    const double C48689 = C48238 * C48688;
    const double C11174 = 3 * (C48598 + C48674 * C48331) +
                          C48107 * (2 * C48716 + C48107 * C48719);
    const double C48773 = C48767 + C48771;
    const double C48792 = C48107 * C48790;
    const double C9213 = (4 * (2 * C48298 + C48238 * C48305) +
                          C48238 * (3 * C48305 + C48238 * C48370)) /
                         C47864;
    const double C9331 = (C48107 * (3 * C48305 + C48238 * C48370)) / C47864;
    const double C9831 =
        (2 * C48298 + C48238 * C48305 + C48370 * C48331) / C47864;
    const double C17989 = (4 * (2 * C48328 + C48107 * C48334) +
                           C48107 * (3 * C48334 + C48107 * C48426)) /
                          C47864;
    const double C49050 = C49045 - C49049;
    const double C49307 = C49283 / C47864;
    const double C49057 = C49053 - C49056;
    const double C49321 = C49310 / C47870;
    const double C47910 = C47908 / C47864;
    const double C47898 = C47894 + C48902;
    const double C47925 = C47922 - C47924;
    const double C7916 = C47922 + (0 * ae) / C47864;
    const double C47897 = C48892 - C47893;
    const double C26558 = C310 * C48897;
    const double C26552 = C1307 * C48897;
    const double C26546 = C1305 * C48897;
    const double C26976 = C1780 * C48897;
    const double C27138 = C1963 * C48897;
    const double C27132 = C1961 * C48897;
    const double C49228 = C48897 * C48887;
    const double C49270 = C49233 + C48897;
    const double C8067 = C310 * C49303;
    const double C26548 = C310 * C48905;
    const double C49236 = C48905 / C47870;
    const double C49232 = C48905 * C48887;
    const double C3878 = C49317 - (C48897 * C48888) / C47864;
    const double C48040 = C48038 / C47864;
    const double C48013 = C49007 - C48009;
    const double C15244 = C15215 + C15216;
    const double C15241 = C15209 + C15210;
    const double C15238 = C15203 + C15204;
    const double C15439 = C15425 + C15426;
    const double C15621 = C15607 + C15608;
    const double C16732 = C16709 + C16710;
    const double C16729 = C16703 + C16704;
    const double C16726 = C16697 + C16698;
    const double C16723 = C16691 + C16692;
    const double C16720 = C16685 + C16686;
    const double C17159 = C17149 + C17150;
    const double C17344 = C17330 + C17331;
    const double C17341 = C17324 + C17325;
    const double C17338 = C17318 + C17319;
    const double C19014 = C19006 + C19007;
    const double C15239 = C15205 + C15206;
    const double C15438 = C15423 + C15424;
    const double C15620 = C15605 + C15606;
    const double C16727 = C16699 + C16700;
    const double C16724 = C16693 + C16694;
    const double C16721 = C16687 + C16688;
    const double C17343 = C17328 + C17329;
    const double C17340 = C17322 + C17323;
    const double C30892 = C30865 + C30866;
    const double C30890 = C30861 + C30862;
    const double C30888 = C30857 + C30858;
    const double C31071 = C31057 + C31058;
    const double C31237 = C31223 + C31224;
    const double C32118 = C32103 + C32104;
    const double C32358 = C32335 + C32336;
    const double C32356 = C32331 + C32332;
    const double C32354 = C32325 + C32326;
    const double C32352 = C32321 + C32322;
    const double C32579 = C32569 + C32570;
    const double C32937 = C32929 + C32930;
    const double C33158 = C33148 + C33149;
    const double C33156 = C33144 + C33145;
    const double C33154 = C33140 + C33141;
    const double C48022 = C48018 + C49094;
    const double C48050 = C48047 - C48049;
    const double C36641 = C49090 * C132;
    const double C36635 = C49090 * C143;
    const double C36625 = C49090 * C142;
    const double C36619 = C49090 * C130;
    const double C36613 = C49090 * C141;
    const double C36607 = C49090 * C128;
    const double C36833 = C49090 * C276;
    const double C36827 = C49090 * C284;
    const double C36821 = C49090 * C274;
    const double C36815 = C49090 * C283;
    const double C37015 = C49090 * C408;
    const double C37009 = C49090 * C416;
    const double C37003 = C49090 * C406;
    const double C36997 = C49090 * C415;
    const double C38197 = C49090 * C602;
    const double C38191 = C49090 * C611;
    const double C38179 = C49090 * C285;
    const double C38173 = C49090 * C278;
    const double C38421 = C49090 * C704;
    const double C38415 = C49090 * C713;
    const double C38779 = C49090 * C600;
    const double C38773 = C49090 * C610;
    const double C38991 = C49090 * C702;
    const double C38985 = C49090 * C712;
    const double C47268 = C49090 * C1260;
    const double C47262 = C49090 * C1265;
    const double C47437 = C49090 * C1470;
    const double C47431 = C49090 * C1475;
    const double C49260 = C49090 * C49084;
    const double C49298 = C49262 + C49090;
    const double C5053 = C5041 + C5042;
    const double C13218 = C7058 + C7057;
    const double C13219 = C7056 + C7055;
    const double C2544 = C49309 * C404;
    const double C2532 = C49309 * C415;
    const double C2526 = C49309 * C406;
    const double C2520 = C49309 * C416;
    const double C2514 = C49309 * C408;
    const double C2740 = C49309 * C704;
    const double C2734 = C49309 * C713;
    const double C2728 = C49309 * C706;
    const double C2938 = C49309 * C955;
    const double C2932 = C49309 * C964;
    const double C2926 = C49309 * C957;
    const double C10130 = C49309 * C1474;
    const double C10124 = C49309 * C1468;
    const double C10118 = C49309 * C1475;
    const double C10112 = C49309 * C1470;
    const double C10106 = C49309 * C712;
    const double C10100 = C49309 * C702;
    const double C10572 = C49309 * C1935;
    const double C10566 = C49309 * C1941;
    const double C10757 = C49309 * C2376;
    const double C10751 = C49309 * C2388;
    const double C10745 = C49309 * C2382;
    const double C10739 = C49309 * C2391;
    const double C25203 = C49309 * C2378;
    const double C36639 = C49097 * C404;
    const double C36627 = C49097 * C415;
    const double C36621 = C49097 * C406;
    const double C36615 = C49097 * C416;
    const double C36609 = C49097 * C408;
    const double C36831 = C49097 * C704;
    const double C36825 = C49097 * C713;
    const double C36819 = C49097 * C706;
    const double C37013 = C49097 * C955;
    const double C37007 = C49097 * C964;
    const double C37001 = C49097 * C957;
    const double C38195 = C49097 * C1468;
    const double C38189 = C49097 * C1474;
    const double C38181 = C49097 * C712;
    const double C38175 = C49097 * C702;
    const double C38419 = C49097 * C2378;
    const double C38777 = C49097 * C1470;
    const double C38771 = C49097 * C1475;
    const double C38989 = C49097 * C2376;
    const double C38983 = C49097 * C2388;
    const double C47266 = C49097 * C1935;
    const double C47260 = C49097 * C1941;
    const double C47435 = C49097 * C2382;
    const double C47429 = C49097 * C2391;
    const double C49264 = C49097 / C47870;
    const double C49261 = C49097 * C49084;
    const double C20181 = C49323 - (C49090 * C49086) / C47864;
    const double C15235 = C15197 * C122;
    const double C15229 = C15197 * C133;
    const double C15219 = C15197 * C131;
    const double C15213 = C15197 * C121;
    const double C15207 = C15197 * C129;
    const double C15201 = C15197 * C120;
    const double C15427 = C15197 * C266;
    const double C15421 = C15197 * C275;
    const double C15415 = C15197 * C265;
    const double C15409 = C15197 * C273;
    const double C15609 = C15197 * C398;
    const double C15603 = C15197 * C407;
    const double C15597 = C15197 * C397;
    const double C15591 = C15197 * C405;
    const double C16713 = C15197 * C603;
    const double C16707 = C15197 * C596;
    const double C16701 = C15197 * C601;
    const double C16695 = C15197 * C595;
    const double C16689 = C15197 * C277;
    const double C16683 = C15197 * C267;
    const double C17151 = C15197 * C1253;
    const double C17145 = C15197 * C1259;
    const double C17332 = C15197 * C697;
    const double C17326 = C15197 * C703;
    const double C17320 = C15197 * C1463;
    const double C17314 = C15197 * C1469;
    const double C19008 = C15197 * C698;
    const double C19002 = C15197 * C705;
    const double C2564 = C2545 + C2546;
    const double C2556 = C2529 + C2530;
    const double C2553 = C2523 + C2524;
    const double C2550 = C2517 + C2518;
    const double C2547 = C2511 + C2512;
    const double C2754 = C2741 + C2742;
    const double C2751 = C2735 + C2736;
    const double C2748 = C2729 + C2730;
    const double C2952 = C2939 + C2940;
    const double C2949 = C2933 + C2934;
    const double C2946 = C2927 + C2928;
    const double C10145 = C10121 + C10122;
    const double C10142 = C10115 + C10116;
    const double C10139 = C10109 + C10110;
    const double C10136 = C10103 + C10104;
    const double C10133 = C10097 + C10098;
    const double C10582 = C10573 + C10574;
    const double C10579 = C10567 + C10568;
    const double C10771 = C10758 + C10759;
    const double C10768 = C10752 + C10753;
    const double C10765 = C10746 + C10747;
    const double C10762 = C10740 + C10741;
    const double C25211 = C25204 + C25205;
    const double C173 = C158 + C159;
    const double C2561 = C2539 + C2540;
    const double C5047 = C5025 + C5026;
    const double C9232 = C1100 * C9128;
    const double C11424 = C1100 * C47890;
    const double C23766 = C1100 * C23628;
    const double C11955 = C1501 * C47890;
    const double C24291 = C1501 * C23628;
    const double C6476 = C5221 + C5222;
    const double C6455 = C5222 + C5221;
    const double C9486 = C9222 + C9223;
    const double C174 = C160 + C161;
    const double C5052 = C5035 + C5036;
    const double C307 = C294 + C295;
    const double C5214 = C5193 + C5194;
    const double C439 = C426 + C427;
    const double C5046 = C5023 + C5024;
    const double C5380 = C5359 + C5360;
    const double C15253 = C15233 + C15234;
    const double C30896 = C30873 + C30874;
    const double C1102 = C1092 + C1093;
    const double C6484 = C6463 + C6464;
    const double C1499 = C1488 + C1489;
    const double C5217 = C5199 + C5200;
    const double C6702 = C6689 + C6690;
    const double C15433 = C15413 + C15414;
    const double C31067 = C31049 + C31050;
    const double C2555 = C2527 + C2528;
    const double C5383 = C5365 + C5366;
    const double C15245 = C15217 + C15218;
    const double C15615 = C15595 + C15596;
    const double C31233 = C31215 + C31216;
    const double C145 =
        (4 * (2 * C48140 + ae * C48141 + C48108 * C48160) +
         ae * (3 * C48141 + C48108 * C48161) +
         C48108 * (3 * C48160 + ae * C48161 +
                   C48108 * (2 * C48156 + ae * C48157 +
                             C48108 * (C48152 + ae * C48108 * C48153 +
                                       C48108 * (ae * C48153 +
                                                 C48108 * std::pow(C48112, 7) *
                                                     bs[7] * C48118))))) /
        C47869;
    const double C282 =
        ((yP - yQ) * (2 * C48140 + ae * C48141 + C48108 * C48160)) / C47869;
    const double C414 =
        (ae * (2 * (C48108 * C48211 + C48210 * ae) +
               C48108 * (C48211 + C48108 * C48207 + C48202 * ae) +
               (C48210 + C48198 * C48133) * ae) +
         C48107 * (2 * C48140 + ae * C48141 + C48108 * C48160)) /
        C47869;
    const double C612 = (C48126 + ae * C48129 + C48108 * C48140 +
                         C48160 * std::pow(yP - yQ, 2)) /
                        C47869;
    const double C714 =
        (ae * C48238 * (C48211 + C48108 * C48207 + C48202 * ae) +
         C48107 * C48238 * C48160) /
        C47869;
    const double C9234 = C1311 * C9128;
    const double C11428 = C1311 * C47890;
    const double C23770 = C1311 * C23628;
    const double C11951 = C1497 * C47890;
    const double C24287 = C1497 * C23628;
    const double C12667 = C6487 + C6488;
    const double C12656 = C6488 + C6487;
    const double C48744 = C48742 + C48737;
    const double C308 = C296 + C297;
    const double C2745 = C2723 + C2724;
    const double C5216 = C5197 + C5198;
    const double C440 = C428 + C429;
    const double C2943 = C2921 + C2922;
    const double C5044 = C5019 + C5020;
    const double C5382 = C5363 + C5364;
    const double C15247 = C15221 + C15222;
    const double C30894 = C30869 + C30870;
    const double C1101 = C1090 + C1091;
    const double C6486 = C6467 + C6468;
    const double C10148 = C10127 + C10128;
    const double C1500 = C1490 + C1491;
    const double C5219 = C5203 + C5204;
    const double C6704 = C6693 + C6694;
    const double C15436 = C15419 + C15420;
    const double C25208 = C25198 + C25199;
    const double C31069 = C31053 + C31054;
    const double C2552 = C2521 + C2522;
    const double C5385 = C5369 + C5370;
    const double C15242 = C15211 + C15212;
    const double C15618 = C15601 + C15602;
    const double C31235 = C31219 + C31220;
    const double C9487 = C9224 + C9225;
    const double C3775 =
        (3 * (C48141 + C48107 * C48649 + C48647 * ae) +
         C48107 * (2 * C48649 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48267) +
                             C48107 * C48225 * ae) +
                   C48650 * ae) +
         (2 * C48647 + C48107 * C48650) * ae) /
        C47864;
    const double C2924 = C49287 * C2905;
    const double C15594 = C49287 * C2905;
    const double C20215 = C49300 * C2905;
    const double C33825 = C49300 * C2905;
    const double C36999 = C36601 * C2905;
    const double C402 = (C48107 * (3 * C48141 + C48108 * C48161) +
                         (3 * C48494 + C48108 * C48498) * ae) /
                        C47864;
    const double C708 =
        (C48107 * C48238 * C48161 + C48238 * C48498 * ae) / C47864;
    const double C959 =
        (2 * C48129 + C48108 * C48141 +
         C48107 * (C48107 * C48161 + C48498 * ae) + C48107 * C48498 * ae) /
        C47864;
    const double C124 = 4 * (2 * C48492 + C48108 * C48494) +
                        C48108 * (3 * C48494 + C48108 * C48498);
    const double C263 = C48238 * (3 * C48494 + C48108 * C48498);
    const double C395 = C48107 * (3 * C48494 + C48108 * C48498);
    const double C598 = 2 * C48492 + C48108 * C48494 + C48498 * C48287;
    const double C700 = C48107 * C48238 * C48498;
    const double C951 = 2 * C48492 + C48108 * C48494 + C48498 * C48331;
    const double C1254 =
        2 * C48238 * C48498 + C48238 * (C48498 + C48229 * C48287);
    const double C1464 = C48107 * (C48498 + C48229 * C48287);
    const double C2903 =
        2 * C48107 * C48498 + C48107 * (C48498 + C48229 * C48331);
    const double C2726 = C49287 * C2380;
    const double C6688 = C49094 * C2380;
    const double C15412 = C49287 * C2380;
    const double C35415 = C49094 * C2380;
    const double C36817 = C36601 * C2380;
    const double C2725 = C2509 * C2372;
    const double C6687 = C5003 * C2372;
    const double C15411 = C15199 * C2372;
    const double C35414 = C30853 * C2372;
    const double C1309 = C1286 + C1287;
    const double C1495 = C1480 + C1481;
    const double C6483 = C6461 + C6462;
    const double C32123 = C32113 + C32114;
    const double C48755 = C48143 + C48753;
    const double C10126 = C49287 * C2384;
    const double C12871 = C49094 * C2384;
    const double C16712 = C49287 * C2384;
    const double C32562 = C49094 * C2384;
    const double C38193 = C36601 * C2384;
    const double C9236 = C113 * C1758;
    const double C11574 = C113 * C1933;
    const double C12662 = C5003 * C1933;
    const double C32343 = C30853 * C1933;
    const double C10125 = C2509 * C2374;
    const double C12870 = C5003 * C2374;
    const double C16711 = C15199 * C2374;
    const double C32561 = C30853 * C2374;
    const double C17902 =
        (3 * (C48624 + C48107 * C48728 + C48724 * ae) +
         C48107 * (2 * C48728 +
                   C48107 * (C48722 +
                             C48107 * (C48107 * C48238 * C48108 * C48177 +
                                       C48725 * ae) +
                             C48107 * C48725 * ae) +
                   C48729 * ae) +
         (2 * C48724 + C48107 * C48729) * ae) /
        C47864;
    const double C19013 = C19004 + C19005;
    const double C25209 = C25200 + C25201;
    const double C20531 = C49300 * C3773;
    const double C34141 = C49300 * C3773;
    const double C48231 = C48230 + C48221;
    const double C2392 =
        (C48140 + C48156 * C48287 + ae * C48107 * C48308 +
         C48107 * (ae * C48308 + C48107 * (C48156 + C48180 * C48287))) /
        C47869;
    const double C1763 = (3 * (C48249 + C48207 * C48287) +
                          C48238 * (2 * C48300 + C48238 * C48308)) /
                         C47864;
    const double C1938 = (C48107 * (2 * C48300 + C48238 * C48308)) / C47864;
    const double C2385 = (C48249 + C48207 * C48287 + C48308 * C48331) / C47864;
    const double C3774 = (3 * (C48249 + C48207 * C48331) +
                          C48107 * (2 * C48336 + C48107 * C48341)) /
                         C47864;
    const double C48436 = C48156 + C48432;
    const double C48791 = C48789 + C48784;
    const double C9830 =
        (2 * C48620 + C48238 * C48655 +
         C48107 * (C48107 * C48670 + C48679 * ae) + C48107 * C48679 * ae) /
        C47864;
    const double C10732 =
        (2 * (C48107 * C48670 + C48679 * ae) +
         C48107 * (C48670 +
                   C48107 * (C48107 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287)) +
                             C48688 * ae) +
                   C48107 * C48688 * ae) +
         (C48679 + C48688 * C48331) * ae) /
        C47864;
    const double C9211 = 4 * (2 * C48588 + C48238 * C48598) +
                         C48238 * (3 * C48598 + C48238 * C48679);
    const double C9329 = C48107 * (3 * C48598 + C48238 * C48679);
    const double C9828 = 2 * C48588 + C48238 * C48598 + C48679 * C48331;
    const double C10731 =
        2 * C48107 * C48679 + C48107 * (C48679 + C48688 * C48331);
    const double C11177 =
        (3 * (C48655 + C48107 * C48718 + C48716 * ae) +
         C48107 * (2 * C48718 +
                   C48107 * (C48668 +
                             C48107 * (C48107 * (C48153 + C48177 * C48287) +
                                       C48686 * ae) +
                             C48107 * C48686 * ae) +
                   C48719 * ae) +
         (2 * C48716 + C48107 * C48719) * ae) /
        C47864;
    const double C10763 = C10742 + C10743;
    const double C17337 = C17316 + C17317;
    const double C22035 = C49300 * C11175;
    const double C43013 = C49300 * C11175;
    const double C48772 = C48665 + C48770;
    const double C17987 = 4 * (2 * C48633 + C48107 * C48636) +
                          C48107 * (3 * C48636 + C48107 * C48743);
    const double C48254 = C48253 + C48252;
    const double C2732 = C49287 * C2389;
    const double C6692 = C49094 * C2389;
    const double C15418 = C49287 * C2389;
    const double C19001 = C15195 * C2389;
    const double C25197 = C49309 * C2389;
    const double C32566 = C49094 * C2389;
    const double C36823 = C36601 * C2389;
    const double C38413 = C49097 * C2389;
    const double C18999 = C49287 * C3364;
    const double C20369 = C49300 * C3364;
    const double C25195 = C49287 * C3364;
    const double C33979 = C49300 * C3364;
    const double C38411 = C36601 * C3364;
    const double C2731 = C2509 * C2379;
    const double C6691 = C5003 * C2379;
    const double C15417 = C15199 * C2379;
    const double C19000 = C15198 * C2379;
    const double C25196 = C2508 * C2379;
    const double C32565 = C30853 * C2379;
    const double C18998 = C15199 * C3360;
    const double C25194 = C2509 * C3360;
    const double C3778 =
        (3 * (C48140 + ae * C48336 + C48107 * C48340) +
         ae * (2 * C48336 + C48107 * C48341) +
         C48107 * (2 * C48340 + ae * C48341 +
                   C48107 * (C48156 + ae * C48107 * C48226 +
                             C48107 * (ae * C48226 + C48107 * C48180)))) /
        C47869;
    const double C1310 = C1288 + C1289;
    const double C12669 = C12660 + C12661;
    const double C1496 = C1482 + C1483;
    const double C6485 = C6465 + C6466;
    const double C12875 = C12868 + C12869;
    const double C16735 = C16715 + C16716;
    const double C32120 = C32107 + C32108;
    const double C2947 = C2929 + C2930;
    const double C15617 = C15599 + C15600;
    const double C9241 = C9228 + C9229;
    const double C14581 = C14571 + C14572;
    const double C9597 = C9587 + C9588;
    const double C13232 = C13222 + C13223;
    const double C14724 = C14717 + C14718;
    const double C17156 = C17143 + C17144;
    const double C32935 = C32925 + C32926;
    const double C10144 = C10119 + C10120;
    const double C13441 = C13433 + C13434;
    const double C16730 = C16705 + C16706;
    const double C17335 = C17312 + C17313;
    const double C33152 = C33136 + C33137;
    const double C22027 = C49300 * C11179;
    const double C43005 = C49300 * C11179;
    const double C17993 =
        (4 * (2 * C48332 + ae * C48334 + C48107 * C48425) +
         ae * (3 * C48334 + C48107 * C48426) +
         C48107 *
             (3 * C48425 + ae * C48426 +
              C48107 * (2 * C48419 + ae * C48421 +
                        C48107 * (C48152 + ae * C48107 * C48220 +
                                  C48107 * (ae * C48220 + C48107 * C48176))))) /
        C47869;
    const double C48187 = C48108 * C48185;
    const double C1261 =
        (2 * C48238 * C48161 + C48238 * (C48161 + C48185 * C48287)) / C47864;
    const double C1471 = (C48107 * (C48161 + C48185 * C48287) +
                          (C48498 + C48229 * C48287) * ae) /
                         C47864;
    const double C48186 = C48108 * C48184;
    const double C48325 = C48238 * C48184;
    const double C48345 = C48107 * C48184;
    const double C1263 = (2 * C48238 * C48160 +
                          C48238 * (C48160 + C48184 * std::pow(C48238, 2))) /
                         C47869;
    const double C1768 =
        (3 * (C48160 + C48184 * C48287) +
         C48238 * (2 * C48238 * C48184 +
                   C48238 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47869;
    const double C9218 =
        (4 * (2 * C48322 + C48238 * C48354) +
         C48238 * (3 * C48354 +
                   C48238 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47869;
    const double C9336 =
        (ae * (3 * C48308 +
               C48238 * (2 * C48323 + C48238 * (C48226 + C48272 * C48287))) +
         C48107 * (3 * C48354 +
                   C48238 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47869;
    const double C48411 = C48406 + C48409;
    const double C48437 = C48107 * C48433;
    const double C9484 =
        (5 * (3 * C48351 + C48238 * C48363) +
         C48238 * (4 * C48363 +
                   C48238 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47869;
    const double C9581 =
        (ae * (4 * (2 * C48320 + C48238 * C48366) +
               C48238 * (3 * C48366 +
                         C48238 * (2 * C48238 * C48220 +
                                   C48238 * (C48220 + C48269 * C48287)))) +
         C48107 * (4 * C48363 +
                   C48238 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47869;
    const double C9834 = (2 * C48319 + C48238 * C48351 + ae * C48107 * C48370 +
                          C48107 * (ae * C48370 + C48107 * C48363)) /
                         C47869;
    const double C10760 = C10736 + C10737;
    const double C17334 = C17310 + C17311;
    const double C48455 = C48450 + C48453;
    const double C48475 = C48107 * C48473;
    const double C48275 = C48274 + C48270;
    const double C48385 = C48238 * C48384;
    const double C10303 =
        (2 * (ae * C48308 + C48107 * C48354) + ae * (C48308 + C48384 * C48331) +
         C48107 * (C48354 + ae * C48107 * C48384 +
                   C48107 * (ae * C48384 +
                             C48107 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47869;
    const double C10301 =
        (2 * C48107 * C48308 + C48107 * (C48308 + C48384 * C48331)) / C47864;
    const double C48412 = C48323 + C48410;
    const double C48438 = C48107 * C48435;
    const double C48379 = C48238 * C48378;
    const double C10734 =
        (2 * (ae * C48370 + C48107 * C48363) + ae * (C48370 + C48378 * C48331) +
         C48107 * (C48363 + ae * C48107 * C48378 +
                   C48107 * (ae * C48378 +
                             C48107 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47869;
    const double C10733 =
        (2 * C48107 * C48370 + C48107 * (C48370 + C48378 * C48331)) / C47864;
    const double C11180 =
        (3 * (C48351 + ae * C48398 + C48107 * C48402) +
         ae * (2 * C48398 + C48107 * C48403) +
         C48107 * (2 * C48402 + ae * C48403 +
                   C48107 * (C48361 + ae * C48107 * C48376 +
                             C48107 * (ae * C48376 +
                                       C48107 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47869;
    const double C11178 = (3 * (C48305 + C48366 * C48331) +
                           C48107 * (2 * C48398 + C48107 * C48403)) /
                          C47864;
    const double C48456 = C48448 + C48454;
    const double C48476 = C48107 * C48474;
    const double C9244 = C9240 * C9128;
    const double C9602 = C9598 * C9128;
    const double C14567 = C13235 + C13234;
    const double C167 = C49007 * C137;
    const double C291 = C49007 * C270;
    const double C1099 = C49007 * C606;
    const double C2910 =
        (2 * (C48107 * C48161 + C48498 * ae) +
         C48107 * (C48161 + C48107 * (C48107 * C48185 + C48268) +
                   C48107 * C48229 * ae) +
         (C48498 + C48229 * C48331) * ae) /
        C47864;
    const double C48504 = C48502 + C48503;
    const double C2715 =
        (C48238 * C48161 + C48107 * (C48107 * C48238 * C48185 + C48609 * ae) +
         C48107 * C48609 * ae) /
        C47864;
    const double C2714 = C48238 * C48498 + C48609 * C48331;
    const double C10093 =
        (2 * C48624 + C48238 * C48658 +
         C48107 * (C48107 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287)) +
                   C48697 * ae) +
         C48107 * C48697 * ae) /
        C47864;
    const double C9212 = 4 * (2 * C48591 + C48238 * C48602) +
                         C48238 * (3 * C48602 + C48238 * C48697);
    const double C9330 = C48107 * (3 * C48602 + C48238 * C48697);
    const double C10092 = 2 * C48591 + C48238 * C48602 + C48697 * C48331;
    const double C17988 = 4 * (2 * C48640 + C48107 * C48643) +
                          C48107 * (3 * C48643 + C48107 * C48756);
    const double C48690 = C48682 + C48689;
    const double C18221 = 4 * (2 * C48708 + C48107 * C48711) +
                          C48107 * (3 * C48711 + C48107 * C48773);
    const double C48794 = C48782 + C48792;
    const double C9489 = C113 * C9213;
    const double C9583 = C113 * C9331;
    const double C14569 = C5003 * C9331;
    const double C41724 = C30853 * C9331;
    const double C10563 = C2509 * C9831;
    const double C14715 = C5003 * C9831;
    const double C17141 = C15199 * C9831;
    const double C41870 = C30853 * C9831;
    const double C49254 = C49050 * C49044;
    const double C49292 = C49256 + C49050;
    const double C49258 = C49057 / C47870;
    const double C49255 = C49057 * C49044;
    const double C11281 = C49321 - (C49050 * C49046) / C47864;
    const double C47913 = C47904 - C47910;
    const double C47903 = C47898 * be;
    const double C26549 = C309 * C47925;
    const double C118 =
        (C47925 / C47870 + (0 * ae) / C47864) / C47870 - (0 * be) / C47864;
    const double C3887 = C47925 / C47870 - (0 * be) / C47864;
    const double C22514 = C47925 / C47870 + (0 * ae) / C47864;
    const double C8068 = C309 * C7916;
    const double C47902 = C47897 * ae;
    const double C1084 =
        ((-C47865 / C47864) / C47870 - (C47883 * be) / C47864) / C47870 -
        ((C47862 * ((-C47872) / C47870 - (C47897 * be) / C47864) + C23621) *
         be) /
            C47864 +
        (-C47884 / C47864) / C47870 - (0 * be) / C47864;
    const double C1085 =
        ((-C47872) / C47870 - (C47897 * be) / C47864) / C47870 -
        ((C47862 * ((-C47884 / C47864) / C47870 - (0 * be) / C47864) + C48902) *
         be) /
            C47864;
    const double C23627 = (-C47872) / C47870 - (C47897 * be) / C47864;
    const double C49266 = C49228 / C47864;
    const double C49304 = C49270 / C47870;
    const double C49305 = C49272 + C49236;
    const double C3880 = C49236 - C48903 / C47876;
    const double C49269 = C49232 / C47864;
    const double C4028 = C310 * C3878;
    const double C4020 = C1305 * C3878;
    const double C4405 = C1307 * C3878;
    const double C4543 = C1963 * C3878;
    const double C48042 = C48037 - C48040;
    const double C48017 = C48013 * ae;
    const double C30852 = (-C47999) / C47870 - (C48013 * be) / C47864;
    const double C48026 = C48022 * be;
    const double C36622 = C48050 * C950;
    const double C36616 = C48050 * C956;
    const double C36610 = C48050 * C949;
    const double C36828 = C48050 * C2371;
    const double C36822 = C48050 * C2379;
    const double C36816 = C48050 * C2372;
    const double C37010 = C48050 * C2901;
    const double C37004 = C48050 * C2906;
    const double C36998 = C48050 * C2900;
    const double C38192 = C48050 * C2374;
    const double C38182 = C48050 * C2377;
    const double C38176 = C48050 * C2370;
    const double C38416 = C48050 * C3355;
    const double C38410 = C48050 * C3360;
    const double C38774 = C48050 * C2373;
    const double C38768 = C48050 * C2383;
    const double C38986 = C48050 * C3354;
    const double C38980 = C48050 * C3358;
    const double C47257 = C48050 * C9831;
    const double C47432 = C48050 * C10296;
    const double C47426 = C48050 * C10298;
    const double C17818 =
        (C48050 / C47870 + (0 * ae) / C47864) / C47870 - (0 * be) / C47864;
    const double C20188 = C48050 / C47870 - (0 * be) / C47864;
    const double C33798 = C48050 / C47870 + (0 * ae) / C47864;
    const double C49295 = C49260 / C47864;
    const double C49314 = C49298 / C47870;
    const double C14565 = C13218 * C9128;
    const double C13231 = C13219 * C49229;
    const double C14566 = C13219 * C48892;
    const double C30019 = C13219 * C23621;
    const double C2563 = C2543 + C2544;
    const double C2557 = C2531 + C2532;
    const double C2554 = C2525 + C2526;
    const double C2551 = C2519 + C2520;
    const double C2548 = C2513 + C2514;
    const double C2753 = C2739 + C2740;
    const double C2750 = C2733 + C2734;
    const double C2747 = C2727 + C2728;
    const double C2951 = C2937 + C2938;
    const double C2948 = C2931 + C2932;
    const double C2945 = C2925 + C2926;
    const double C10149 = C10129 + C10130;
    const double C10146 = C10123 + C10124;
    const double C10143 = C10117 + C10118;
    const double C10140 = C10111 + C10112;
    const double C10137 = C10105 + C10106;
    const double C10134 = C10099 + C10100;
    const double C10581 = C10571 + C10572;
    const double C10578 = C10565 + C10566;
    const double C10770 = C10756 + C10757;
    const double C10767 = C10750 + C10751;
    const double C10764 = C10744 + C10745;
    const double C10761 = C10738 + C10739;
    const double C25210 = C25202 + C25203;
    const double C49315 = C49299 + C49264;
    const double C20183 = C49264 - C49095 / C47876;
    const double C49297 = C49261 / C47864;
    const double C20221 = C20181 * C130;
    const double C20213 = C20181 * C142;
    const double C20199 = C20181 * C141;
    const double C20191 = C20181 * C128;
    const double C20383 = C20181 * C276;
    const double C20375 = C20181 * C284;
    const double C20537 = C20181 * C408;
    const double C20529 = C20181 * C416;
    const double C21499 = C20181 * C285;
    const double C21491 = C20181 * C278;
    const double C21887 = C20181 * C600;
    const double C21879 = C20181 * C610;
    const double C22041 = C20181 * C702;
    const double C22033 = C20181 * C712;
    const double C15254 = C15235 + C15236;
    const double C15251 = C15229 + C15230;
    const double C15246 = C15219 + C15220;
    const double C15243 = C15213 + C15214;
    const double C15240 = C15207 + C15208;
    const double C15237 = C15201 + C15202;
    const double C15440 = C15427 + C15428;
    const double C15437 = C15421 + C15422;
    const double C15434 = C15415 + C15416;
    const double C15431 = C15409 + C15410;
    const double C15622 = C15609 + C15610;
    const double C15619 = C15603 + C15604;
    const double C15616 = C15597 + C15598;
    const double C15613 = C15591 + C15592;
    const double C16734 = C16713 + C16714;
    const double C16731 = C16707 + C16708;
    const double C16728 = C16701 + C16702;
    const double C16725 = C16695 + C16696;
    const double C16722 = C16689 + C16690;
    const double C16719 = C16683 + C16684;
    const double C17160 = C17151 + C17152;
    const double C17157 = C17145 + C17146;
    const double C17345 = C17332 + C17333;
    const double C17342 = C17326 + C17327;
    const double C17339 = C17320 + C17321;
    const double C17336 = C17314 + C17315;
    const double C19015 = C19008 + C19009;
    const double C19012 = C19002 + C19003;
    const double C1296 = C307 * C1086;
    const double C8080 = C307 * C7916;
    const double C26561 = C307 * C47925;
    const double C5055 = C5045 + C5046;
    const double C1282 = C1102 * C1086;
    const double C8074 = C1102 * C7916;
    const double C11436 = C1102 * C47890;
    const double C23778 = C1102 * C23628;
    const double C26555 = C1102 * C47925;
    const double C1954 = C1499 * C1086;
    const double C8654 = C1499 * C7916;
    const double C27135 = C1499 * C47925;
    const double C6251 = C5218 + C5217;
    const double C6474 = C5217 + C5218;
    const double C165 = C49007 * C145;
    const double C293 = C49007 * C282;
    const double C5190 = C49252 * C282;
    const double C31040 = C30850 * C282;
    const double C425 = C49007 * C414;
    const double C2538 = C49309 * C414;
    const double C5028 = C49094 * C414;
    const double C5356 = C49252 * C414;
    const double C15228 = C15195 * C414;
    const double C30878 = C49094 * C414;
    const double C31206 = C30850 * C414;
    const double C36633 = C49097 * C414;
    const double C1095 = C49007 * C612;
    const double C6460 = C49252 * C612;
    const double C32112 = C30850 * C612;
    const double C1487 = C49007 * C714;
    const double C2722 = C49309 * C714;
    const double C5196 = C49094 * C714;
    const double C6686 = C49252 * C714;
    const double C15408 = C15195 * C714;
    const double C31046 = C49094 * C714;
    const double C35413 = C30850 * C714;
    const double C36813 = C49097 * C714;
    const double C13220 = C12656 * C47890;
    const double C30020 = C12656 * C23628;
    const double C17990 =
        (4 * (2 * C48635 + C48107 * C48744 + C48636 * ae) +
         C48107 *
             (3 * C48744 +
              C48107 * (2 * C48736 +
                        C48107 * (C48137 + C48107 * (C48107 * C48153 + C48217) +
                                  C48107 * C48199 * ae) +
                        C48738 * ae) +
              C48743 * ae) +
         (3 * C48636 + C48107 * C48743) * ae) /
        C47864;
    const double C1295 = C308 * C1079;
    const double C1275 = C308 * C49271;
    const double C8079 = C308 * C49303;
    const double C8069 = C308 * C49271;
    const double C11433 = C308 * C48902;
    const double C23775 = C308 * C48902;
    const double C26560 = C308 * C48905;
    const double C26550 = C308 * C26391;
    const double C5054 = C5043 + C5044;
    const double C1299 = C1101 * C1078;
    const double C1281 = C1101 * C1079;
    const double C8083 = C1101 * C49316;
    const double C8073 = C1101 * C49303;
    const double C9233 = C1101 * C48892;
    const double C11435 = C1101 * C49229;
    const double C11425 = C1101 * C48902;
    const double C23777 = C1101 * C23621;
    const double C23767 = C1101 * C48902;
    const double C26564 = C1101 * C48897;
    const double C26554 = C1101 * C48905;
    const double C1955 = C1500 * C1079;
    const double C8655 = C1500 * C49303;
    const double C11954 = C1500 * C48902;
    const double C24290 = C1500 * C48902;
    const double C27136 = C1500 * C48905;
    const double C6475 = C5219 + C5220;
    const double C6456 = C5220 + C5219;
    const double C2944 = C2923 + C2924;
    const double C15614 = C15593 + C15594;
    const double C423 = C49007 * C402;
    const double C5034 = C49094 * C402;
    const double C30884 = C49094 * C402;
    const double C4168 = C49007 * C708;
    const double C5192 = C49094 * C708;
    const double C31042 = C49094 * C708;
    const double C2542 = C49287 * C959;
    const double C5358 = C49094 * C959;
    const double C15232 = C49287 * C959;
    const double C31208 = C49094 * C959;
    const double C36637 = C36601 * C959;
    const double C166 = C113 * C124;
    const double C290 = C113 * C263;
    const double C422 = C113 * C395;
    const double C5033 = C5003 * C395;
    const double C30883 = C30853 * C395;
    const double C1098 = C113 * C598;
    const double C4167 = C113 * C700;
    const double C5191 = C5003 * C700;
    const double C31041 = C30853 * C700;
    const double C2541 = C2509 * C951;
    const double C5357 = C5003 * C951;
    const double C15231 = C15199 * C951;
    const double C31207 = C30853 * C951;
    const double C36636 = C48050 * C951;
    const double C2746 = C2725 + C2726;
    const double C6701 = C6687 + C6688;
    const double C15432 = C15411 + C15412;
    const double C35420 = C35414 + C35415;
    const double C1772 = C1309 * C1086;
    const double C8492 = C1309 * C7916;
    const double C11440 = C1309 * C47890;
    const double C23782 = C1309 * C23628;
    const double C26973 = C1309 * C47925;
    const double C1946 = C1495 * C1086;
    const double C8648 = C1495 * C7916;
    const double C27129 = C1495 * C47925;
    const double C48757 = C48755 + C48750;
    const double C9242 = C9236 + C9237;
    const double C11577 = C11574 + C11575;
    const double C12670 = C12662 + C12663;
    const double C32361 = C32343 + C32344;
    const double C10147 = C10125 + C10126;
    const double C12876 = C12870 + C12871;
    const double C16733 = C16711 + C16712;
    const double C32575 = C32561 + C32562;
    const double C48257 = C48108 * C48231;
    const double C48262 = 3 * C48231;
    const double C48302 = C48238 * C48231;
    const double C48344 = ae * C48231;
    const double C48343 = C48107 * C48231;
    const double C716 =
        (ae * C48238 *
             (3 * C48231 +
              C48108 * (2 * C48226 +
                        C48108 * (C48220 +
                                  C48108 * (C48108 * C48167 * C48168 * C48197 +
                                            C48219 * ae) +
                                  C48108 * C48219 * ae) +
                        C48225 * ae) +
              C48229 * ae) +
         C48107 * C48238 *
             (3 * C48184 + ae * C48185 +
              C48108 * (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47869;
    const double C10132 = C49287 * C2392;
    const double C12867 = C49094 * C2392;
    const double C16718 = C49287 * C2392;
    const double C32558 = C49094 * C2392;
    const double C38187 = C36601 * C2392;
    const double C9238 = C113 * C1763;
    const double C11572 = C113 * C1938;
    const double C12658 = C5003 * C1938;
    const double C32339 = C30853 * C1938;
    const double C10131 = C2509 * C2385;
    const double C12866 = C5003 * C2385;
    const double C16717 = C15199 * C2385;
    const double C32557 = C30853 * C2385;
    const double C38186 = C48050 * C2385;
    const double C48793 = C48107 * C48791;
    const double C10570 = C49287 * C9830;
    const double C14720 = C49094 * C9830;
    const double C17148 = C49287 * C9830;
    const double C41875 = C49094 * C9830;
    const double C47264 = C36601 * C9830;
    const double C9491 = C113 * C9211;
    const double C9585 = C113 * C9329;
    const double C14573 = C5003 * C9329;
    const double C41728 = C30853 * C9329;
    const double C10569 = C2509 * C9828;
    const double C14719 = C5003 * C9828;
    const double C17147 = C15199 * C9828;
    const double C41874 = C30853 * C9828;
    const double C47263 = C48050 * C9828;
    const double C48774 = C48772 + C48765;
    const double C965 =
        (C48126 + ae * C48129 + C48108 * C48140 + ae * C48107 * C48254 +
         C48107 * (ae * C48254 + C48107 * C48160)) /
        C47869;
    const double C1473 = (ae * (C48254 + C48231 * C48287) +
                          C48107 * (C48160 + C48184 * C48287)) /
                         C47869;
    const double C2912 = (2 * (ae * C48254 + C48107 * C48160) +
                          ae * (C48254 + C48231 * std::pow(C48107, 2)) +
                          C48107 * (C48160 + ae * C48107 * C48231 +
                                    C48107 * (ae * C48231 + C48107 * C48184))) /
                         C47869;
    const double C135 = (3 * (C48245 + C48108 * C48249 + C48492 * ae) +
                         C48108 * (2 * C48249 + C48108 * C48254 + C48494 * ae) +
                         (2 * C48492 + C48108 * C48494) * ae) /
                        C47864;
    const double C271 =
        (C48238 * (2 * C48249 + C48108 * C48254 + C48494 * ae)) / C47864;
    const double C403 =
        (C48107 * (2 * C48249 + C48108 * C48254 + C48494 * ae)) / C47864;
    const double C605 =
        (C48245 + C48108 * C48249 + C48492 * ae + C48254 * C48287) / C47864;
    const double C707 = (C48107 * C48238 * C48254) / C47864;
    const double C958 =
        (C48245 + C48108 * C48249 + C48492 * ae + C48254 * C48331) / C47864;
    const double C1255 =
        (2 * C48238 * C48254 + C48238 * (C48254 + C48231 * C48287)) / C47864;
    const double C1465 = (C48107 * (C48254 + C48231 * C48287)) / C47864;
    const double C2904 =
        (2 * C48107 * C48254 + C48107 * (C48254 + C48231 * C48331)) / C47864;
    const double C2749 = C2731 + C2732;
    const double C6703 = C6691 + C6692;
    const double C15435 = C15417 + C15418;
    const double C19011 = C19000 + C19001;
    const double C25207 = C25196 + C25197;
    const double C32577 = C32565 + C32566;
    const double C19010 = C18998 + C18999;
    const double C25206 = C25194 + C25195;
    const double C20523 = C49300 * C3778;
    const double C34133 = C49300 * C3778;
    const double C1773 = C1310 * C1079;
    const double C8493 = C1310 * C49303;
    const double C9235 = C1310 * C48892;
    const double C11439 = C1310 * C49229;
    const double C11429 = C1310 * C48902;
    const double C23781 = C1310 * C23621;
    const double C23771 = C1310 * C48902;
    const double C26974 = C1310 * C48905;
    const double C1947 = C1496 * C1079;
    const double C8649 = C1496 * C49303;
    const double C11950 = C1496 * C48902;
    const double C24286 = C1496 * C48902;
    const double C27130 = C1496 * C48905;
    const double C12666 = C6485 + C6486;
    const double C12657 = C6486 + C6485;
    const double C9245 = C9241 * C48892;
    const double C11810 = C9241 * C49229;
    const double C24146 = C9241 * C23621;
    const double C9601 = C9597 * C48892;
    const double C11948 = C9597 * C49229;
    const double C24284 = C9597 * C23621;
    const double C14568 = C13233 + C13232;
    const double C48189 = C48169 + C48187;
    const double C48188 = C48170 + C48186;
    const double C1285 = C49007 * C1263;
    const double C48439 = C48436 + C48437;
    const double C10564 = C49287 * C9834;
    const double C14716 = C49094 * C9834;
    const double C17142 = C49287 * C9834;
    const double C41871 = C49094 * C9834;
    const double C47258 = C36601 * C9834;
    const double C48477 = C48465 + C48475;
    const double C48276 = C48108 * C48275;
    const double C48310 = C48275 * C48287;
    const double C48326 = C48238 * C48275;
    const double C48346 = C48275 * C48331;
    const double C1943 =
        (ae * (2 * C48238 * C48231 + C48238 * (C48231 + C48275 * C48287)) +
         C48107 * (2 * C48238 * C48184 +
                   C48238 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47869;
    const double C48386 = C48382 + C48385;
    const double C17904 =
        (3 * (C48322 + ae * C48405 + C48107 * C48411) +
         ae * (2 * C48405 + C48107 * C48412) +
         C48107 * (2 * C48411 + ae * C48412 +
                   C48107 * (C48407 + ae * C48107 * C48408 +
                             C48107 * (ae * C48408 +
                                       C48107 * C48238 *
                                           (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47869;
    const double C17903 = (3 * (C48300 + C48323 * C48331) +
                           C48107 * (2 * C48405 + C48107 * C48412)) /
                          C47864;
    const double C48440 = C48434 + C48438;
    const double C48380 = C48372 + C48379;
    const double C18224 =
        (4 * (2 * C48395 + ae * C48396 + C48107 * C48455) +
         ae * (3 * C48396 + C48107 * C48456) +
         C48107 * (3 * C48455 + ae * C48456 +
                   C48107 * (2 * C48451 + ae * C48452 +
                             C48107 * (C48444 + ae * C48107 * C48445 +
                                       C48107 * (ae * C48445 +
                                                 C48107 * C48238 *
                                                     std::pow(C48110, 8) *
                                                     bs[8] * C48118))))) /
        C47869;
    const double C18223 = (4 * (2 * C48391 + C48107 * C48396) +
                           C48107 * (3 * C48396 + C48107 * C48456)) /
                          C47864;
    const double C48478 = C48463 + C48476;
    const double C14578 = C14567 * C9128;
    const double C125 = 5 * (3 * C48494 + C48108 * C48498) +
                        C48108 * (4 * C48498 + C48108 * C48504);
    const double C268 = C48238 * (4 * C48498 + C48108 * C48504);
    const double C400 = C48107 * (4 * C48498 + C48108 * C48504);
    const double C599 = 3 * C48494 + C48108 * C48498 + C48504 * C48287;
    const double C701 = C48107 * C48238 * C48504;
    const double C952 = 3 * C48494 + C48108 * C48498 + C48504 * C48331;
    const double C9832 =
        (3 * C48655 + C48238 * C48670 +
         C48107 * (C48107 * (3 * C48668 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287))) +
                   C48690 * ae) +
         C48107 * C48690 * ae) /
        C47864;
    const double C9481 = 5 * (3 * C48598 + C48238 * C48679) +
                         C48238 * (4 * C48679 + C48238 * C48690);
    const double C9578 = C48107 * (4 * C48679 + C48238 * C48690);
    const double C9829 = 3 * C48598 + C48238 * C48679 + C48690 * C48331;
    const double C18451 = 5 * (3 * C48636 + C48107 * C48743) +
                          C48107 * (4 * C48743 + C48107 * C48794);
    const double C9493 = C9489 + C9490;
    const double C9595 = C9583 + C9584;
    const double C14580 = C14569 + C14570;
    const double C41735 = C41724 + C41725;
    const double C49289 = C49254 / C47864;
    const double C49311 = C49292 / C47870;
    const double C49312 = C49293 + C49258;
    const double C11283 = C49258 - C49055 / C47876;
    const double C49291 = C49255 / C47864;
    const double C47907 = C47903 / C47864;
    const double C4025 = C307 * C3887;
    const double C22652 = C307 * C22514;
    const double C47906 = C47902 / C47864;
    const double C1298 = C1100 * C1084;
    const double C1292 = C311 * C1084;
    const double C1314 = C1306 * C1084;
    const double C1312 = C1304 * C1084;
    const double C1784 = C1781 * C1084;
    const double C1968 = C1964 * C1084;
    const double C1966 = C1962 * C1084;
    const double C1300 = C1102 * C1085;
    const double C1294 = C309 * C1085;
    const double C1280 = C1100 * C1085;
    const double C1272 = C311 * C1085;
    const double C1774 = C1311 * C1085;
    const double C1956 = C1501 * C1085;
    const double C1948 = C1497 * C1085;
    const double C23780 = C1311 * C23627;
    const double C23776 = C1100 * C23627;
    const double C23772 = C311 * C23627;
    const double C23768 = C1781 * C23627;
    const double C23764 = C1306 * C23627;
    const double C23760 = C1304 * C23627;
    const double C24147 = C9240 * C23627;
    const double C24293 = C1964 * C23627;
    const double C24289 = C1962 * C23627;
    const double C24285 = C9598 * C23627;
    const double C30018 = C13218 * C23627;
    const double C49325 = C49266 + C49317;
    const double C3879 = C49304 - (C48905 * C48888) / C47864;
    const double C22651 = C308 * C49305;
    const double C105 = C49305 / C47870 - C48903 / C49273;
    const double C4024 = C308 * C3880;
    const double C49318 = C49269 + C49304;
    const double C48021 = C48017 / C47864;
    const double C30885 = C30852 * C123;
    const double C30875 = C30852 * C133;
    const double C30871 = C30852 * C122;
    const double C30867 = C30852 * C131;
    const double C30863 = C30852 * C121;
    const double C30859 = C30852 * C129;
    const double C30855 = C30852 * C120;
    const double C31059 = C30852 * C266;
    const double C31055 = C30852 * C275;
    const double C31051 = C30852 * C265;
    const double C31047 = C30852 * C273;
    const double C31043 = C30852 * C264;
    const double C31225 = C30852 * C398;
    const double C31221 = C30852 * C407;
    const double C31217 = C30852 * C397;
    const double C31213 = C30852 * C405;
    const double C31209 = C30852 * C396;
    const double C32115 = C30852 * C597;
    const double C32105 = C30852 * C603;
    const double C32101 = C30852 * C596;
    const double C32345 = C30852 * C1252;
    const double C32341 = C30852 * C1257;
    const double C32333 = C30852 * C601;
    const double C32329 = C30852 * C595;
    const double C32323 = C30852 * C277;
    const double C32319 = C30852 * C267;
    const double C32571 = C30852 * C698;
    const double C32567 = C30852 * C705;
    const double C32563 = C30852 * C1462;
    const double C32559 = C30852 * C1467;
    const double C32931 = C30852 * C1253;
    const double C32927 = C30852 * C1259;
    const double C33150 = C30852 * C697;
    const double C33146 = C30852 * C703;
    const double C33142 = C30852 * C1463;
    const double C33138 = C30852 * C1469;
    const double C35416 = C30852 * C699;
    const double C41730 = C30852 * C1757;
    const double C41726 = C30852 * C1761;
    const double C41876 = C30852 * C1932;
    const double C41872 = C30852 * C1936;
    const double C48032 = C48026 / C47864;
    const double C36650 = C36622 + C36623;
    const double C36647 = C36616 + C36617;
    const double C36644 = C36610 + C36611;
    const double C36843 = C36828 + C36829;
    const double C36840 = C36822 + C36823;
    const double C36837 = C36816 + C36817;
    const double C37025 = C37010 + C37011;
    const double C37022 = C37004 + C37005;
    const double C37019 = C36998 + C36999;
    const double C38211 = C38192 + C38193;
    const double C38205 = C38182 + C38183;
    const double C38202 = C38176 + C38177;
    const double C38425 = C38416 + C38417;
    const double C38422 = C38410 + C38411;
    const double C38783 = C38774 + C38775;
    const double C38780 = C38768 + C38769;
    const double C38995 = C38986 + C38987;
    const double C38992 = C38980 + C38981;
    const double C47441 = C47432 + C47433;
    const double C47438 = C47426 + C47427;
    const double C20214 = C20188 * C2900;
    const double C20204 = C20188 * C2906;
    const double C20196 = C20188 * C2901;
    const double C20376 = C20188 * C3355;
    const double C20368 = C20188 * C3360;
    const double C20530 = C20188 * C3769;
    const double C20522 = C20188 * C3774;
    const double C21504 = C20188 * C3358;
    const double C21496 = C20188 * C3354;
    const double C21880 = C20188 * C10296;
    const double C21872 = C20188 * C10298;
    const double C22034 = C20188 * C11173;
    const double C22026 = C20188 * C11176;
    const double C33824 = C33798 * C2900;
    const double C33814 = C33798 * C2906;
    const double C33806 = C33798 * C2901;
    const double C33986 = C33798 * C3355;
    const double C33978 = C33798 * C3360;
    const double C34140 = C33798 * C3769;
    const double C34132 = C33798 * C3774;
    const double C42482 = C33798 * C3358;
    const double C42474 = C33798 * C3354;
    const double C42858 = C33798 * C10296;
    const double C42850 = C33798 * C10298;
    const double C43012 = C33798 * C11173;
    const double C43004 = C33798 * C11176;
    const double C49327 = C49295 + C49323;
    const double C20182 = C49314 - (C49097 * C49086) / C47864;
    const double C14577 = C14565 + C14566;
    const double C2566 = C2556 + C2557;
    const double C2565 = C2553 + C2554;
    const double C24995 = C2753 + C2754;
    const double C24992 = C2754 + C2753;
    const double C24994 = C2750 + C2751;
    const double C24993 = C2751 + C2750;
    const double C10562 = C10142 + C10143;
    const double C10561 = C10139 + C10140;
    const double C33827 = C49315 * C957;
    const double C33813 = C49315 * C964;
    const double C33805 = C49315 * C955;
    const double C33989 = C49315 * C2378;
    const double C33981 = C49315 * C2389;
    const double C34143 = C49315 * C2907;
    const double C34135 = C49315 * C2913;
    const double C42481 = C49315 * C2388;
    const double C42473 = C49315 * C2376;
    const double C42861 = C49315 * C2382;
    const double C42853 = C49315 * C2391;
    const double C43015 = C49315 * C3357;
    const double C43007 = C49315 * C3363;
    const double C17812 = C49315 / C47870 - C49095 / C49273;
    const double C20217 = C20183 * C957;
    const double C20203 = C20183 * C964;
    const double C20195 = C20183 * C955;
    const double C20379 = C20183 * C2378;
    const double C20371 = C20183 * C2389;
    const double C20533 = C20183 * C2907;
    const double C20525 = C20183 * C2913;
    const double C21503 = C20183 * C2388;
    const double C21495 = C20183 * C2376;
    const double C21883 = C20183 * C2382;
    const double C21875 = C20183 * C2391;
    const double C22037 = C20183 * C3357;
    const double C22029 = C20183 * C3363;
    const double C49324 = C49297 + C49314;
    const double C15256 = C15246 + C15247;
    const double C15255 = C15243 + C15244;
    const double C18799 = C15439 + C15440;
    const double C18796 = C15440 + C15439;
    const double C18798 = C15436 + C15437;
    const double C18797 = C15437 + C15436;
    const double C17140 = C16728 + C16729;
    const double C17139 = C16725 + C16726;
    const double C177 = C166 + C167;
    const double C305 = C290 + C291;
    const double C437 = C422 + C423;
    const double C5051 = C5033 + C5034;
    const double C30901 = C30883 + C30884;
    const double C1105 = C1098 + C1099;
    const double C4170 = C4167 + C4168;
    const double C5213 = C5191 + C5192;
    const double C31063 = C31041 + C31042;
    const double C2562 = C2541 + C2542;
    const double C5379 = C5357 + C5358;
    const double C15252 = C15231 + C15232;
    const double C31229 = C31207 + C31208;
    const double C36657 = C36636 + C36637;
    const double C17991 =
        (4 * (2 * C48642 + C48107 * C48757 + C48643 * ae) +
         C48107 *
             (3 * C48757 +
              C48107 * (2 * C48749 +
                        C48107 * (C48165 +
                                  C48107 * (C48107 * C48108 * C48177 + C48270) +
                                  C48107 * C48266 * ae) +
                        C48751 * ae) +
              C48756 * ae) +
         (3 * C48643 + C48107 * C48756) * ae) /
        C47864;
    const double C9246 = C9242 * C9128;
    const double C11809 = C9242 * C47890;
    const double C24145 = C9242 * C23628;
    const double C11947 = C11577 * C47890;
    const double C24283 = C11577 * C23628;
    const double C48259 = C48256 + C48257;
    const double C2390 = (C48238 * C48160 + ae * C48107 * C48302 +
                          C48107 * (ae * C48302 + C48107 * C48238 * C48184)) /
                         C47869;
    const double C2381 = (C48238 * C48254 + C48302 * C48331) / C47864;
    const double C48347 = C48344 + C48345;
    const double C9243 = C9238 + C9239;
    const double C11576 = C11572 + C11573;
    const double C12668 = C12658 + C12659;
    const double C32359 = C32339 + C32340;
    const double C10150 = C10131 + C10132;
    const double C12874 = C12866 + C12867;
    const double C16736 = C16717 + C16718;
    const double C32573 = C32557 + C32558;
    const double C38208 = C38186 + C38187;
    const double C48795 = C48777 + C48793;
    const double C9494 = C9491 + C9492;
    const double C9596 = C9585 + C9586;
    const double C14582 = C14573 + C14574;
    const double C41737 = C41728 + C41729;
    const double C10580 = C10569 + C10570;
    const double C14725 = C14719 + C14720;
    const double C17158 = C17147 + C17148;
    const double C41880 = C41874 + C41875;
    const double C47274 = C47263 + C47264;
    const double C18222 =
        (4 * (2 * C48710 + C48107 * C48774 + C48711 * ae) +
         C48107 * (3 * C48774 +
                   C48107 * (2 * C48768 +
                             C48107 * (C48760 +
                                       C48107 * (C48107 * C48238 * C48177 +
                                                 C48763 * ae) +
                                       C48107 * C48763 * ae) +
                             C48769 * ae) +
                   C48773 * ae) +
         (3 * C48711 + C48107 * C48773) * ae) /
        C47864;
    const double C2534 = C49287 * C965;
    const double C2920 = C49309 * C965;
    const double C5362 = C49094 * C965;
    const double C15224 = C49287 * C965;
    const double C15590 = C15195 * C965;
    const double C20209 = C20183 * C965;
    const double C31212 = C49094 * C965;
    const double C33819 = C49315 * C965;
    const double C36629 = C36601 * C965;
    const double C36995 = C49097 * C965;
    const double C1479 = C49007 * C1473;
    const double C6458 = C49094 * C1473;
    const double C32110 = C49094 * C1473;
    const double C2918 = C49287 * C2912;
    const double C15588 = C49287 * C2912;
    const double C20207 = C49300 * C2912;
    const double C33817 = C49300 * C2912;
    const double C36993 = C36601 * C2912;
    const double C162 = C113 * C135;
    const double C5031 = C5002 * C135;
    const double C30881 = C30852 * C135;
    const double C292 = C113 * C271;
    const double C5189 = C5002 * C271;
    const double C31039 = C30852 * C271;
    const double C424 = C113 * C403;
    const double C2537 = C2508 * C403;
    const double C5027 = C5003 * C403;
    const double C5355 = C5002 * C403;
    const double C15227 = C15198 * C403;
    const double C30877 = C30853 * C403;
    const double C31205 = C30852 * C403;
    const double C1094 = C113 * C605;
    const double C6459 = C5002 * C605;
    const double C32111 = C30852 * C605;
    const double C1486 = C113 * C707;
    const double C2721 = C2508 * C707;
    const double C5195 = C5003 * C707;
    const double C6685 = C5002 * C707;
    const double C15407 = C15198 * C707;
    const double C31045 = C30853 * C707;
    const double C35412 = C30852 * C707;
    const double C2533 = C2509 * C958;
    const double C2919 = C2508 * C958;
    const double C5361 = C5003 * C958;
    const double C15223 = C15199 * C958;
    const double C15589 = C15198 * C958;
    const double C31211 = C30853 * C958;
    const double C36628 = C48050 * C958;
    const double C1284 = C113 * C1255;
    const double C1478 = C113 * C1465;
    const double C6457 = C5003 * C1465;
    const double C32109 = C30853 * C1465;
    const double C2917 = C2509 * C2904;
    const double C15587 = C15199 * C2904;
    const double C20206 = C20188 * C2904;
    const double C33816 = C33798 * C2904;
    const double C36992 = C48050 * C2904;
    const double C13221 = C12657 * C48902;
    const double C30021 = C12657 * C48902;
    const double C9488 = C9244 + C9245;
    const double C14579 = C14568 * C48892;
    const double C138 = (5 * (3 * C48141 + C48108 * C48161) +
                         C48108 * (4 * C48161 + C48108 * C48189)) /
                        C47864;
    const double C279 = (C48238 * (4 * C48161 + C48108 * C48189)) / C47864;
    const double C411 = (C48107 * (4 * C48161 + C48108 * C48189) +
                         (4 * C48498 + C48108 * C48504) * ae) /
                        C47864;
    const double C608 =
        (3 * C48141 + C48108 * C48161 + C48189 * C48287) / C47864;
    const double C710 =
        (C48107 * C48238 * C48189 + C48238 * C48504 * ae) / C47864;
    const double C961 =
        (3 * C48141 + C48108 * C48161 +
         C48107 * (C48107 * C48189 + C48504 * ae) + C48107 * C48504 * ae) /
        C47864;
    const double C146 =
        (5 * (3 * C48160 + ae * C48161 + C48108 * C48188) +
         ae * (4 * C48161 + C48108 * C48189) +
         C48108 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C281 =
        ((yP - yQ) * (3 * C48160 + ae * C48161 + C48108 * C48188)) / C47869;
    const double C286 =
        ((yP - yQ) *
         (4 * C48188 + ae * C48189 +
          C48108 * (3 * C48184 + ae * C48185 +
                    C48108 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47869;
    const double C413 =
        (ae * (3 * (C48122 * C48123 * C48197 + C48108 * C48207 + C48202 * ae) +
               C48108 * (2 * C48207 +
                         C48108 * (C48204 +
                                   C48108 * (C48108 * C48145 * C48146 * C48197 +
                                             C48199 * ae) +
                                   C48108 * C48199 * ae) +
                         C48205 * ae) +
               (2 * C48202 + C48108 * C48205) * ae) +
         C48107 * (3 * C48160 + ae * C48161 + C48108 * C48188)) /
        C47869;
    const double C418 =
        (ae * (4 * (2 * C48207 + C48108 * C48231 + C48205 * ae) +
               C48108 * (3 * C48231 +
                         C48108 * (2 * C48226 +
                                   C48108 * (C48220 +
                                             C48108 * (C48108 * C48167 *
                                                           C48168 * C48197 +
                                                       C48219 * ae) +
                                             C48108 * C48219 * ae) +
                                   C48225 * ae) +
                         C48229 * ae) +
               (3 * C48205 + C48108 * C48229) * ae) +
         C48107 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C613 = (2 * C48140 + ae * C48141 + C48108 * C48160 +
                         C48188 * std::pow(yP - yQ, 2)) /
                        C47869;
    const double C614 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 +
         (3 * C48184 + ae * C48185 +
          C48108 *
              (2 * C48180 + ae * C48181 +
               C48108 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(yP - yQ, 2)) /
        C47869;
    const double C715 =
        (ae * C48238 * (2 * C48207 + C48108 * C48231 + C48205 * ae) +
         C48107 * C48238 * C48188) /
        C47869;
    const double C1266 =
        (2 * C48238 * C48188 +
         C48238 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                std::pow(C48238, 2))) /
        C47869;
    const double C10577 = C10563 + C10564;
    const double C14723 = C14715 + C14716;
    const double C17155 = C17141 + C17142;
    const double C41878 = C41870 + C41871;
    const double C47271 = C47257 + C47258;
    const double C48277 = C48263 + C48276;
    const double C48311 = C48231 + C48310;
    const double C3365 =
        (2 * (ae * C48302 + C48107 * C48325) +
         ae * (C48302 + C48326 * std::pow(C48107, 2)) +
         C48107 * (C48325 + ae * C48107 * C48326 +
                   C48107 * (ae * C48326 +
                             C48107 * C48238 *
                                 (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47869;
    const double C3362 =
        (2 * C48107 * C48302 + C48107 * (C48302 + C48326 * C48331)) / C47864;
    const double C48348 = C48231 + C48346;
    const double C10095 =
        (2 * C48322 + C48238 * C48354 + ae * C48107 * C48386 +
         C48107 * (ae * C48386 +
                   C48107 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47869;
    const double C9216 = (4 * (2 * C48300 + C48238 * C48308) +
                          C48238 * (3 * C48308 + C48238 * C48386)) /
                         C47864;
    const double C9334 = (C48107 * (3 * C48308 + C48238 * C48386)) / C47864;
    const double C10094 =
        (2 * C48300 + C48238 * C48308 + C48386 * C48331) / C47864;
    const double C17994 =
        (4 * (2 * C48340 + ae * C48341 + C48107 * C48439) +
         ae * (3 * C48341 + C48107 * C48440) +
         C48107 *
             (3 * C48439 + ae * C48440 +
              C48107 *
                  (2 * C48433 + ae * C48435 +
                   C48107 * (C48180 + ae * C48107 * C48272 +
                             C48107 * (ae * C48272 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C17992 = (4 * (2 * C48336 + C48107 * C48341) +
                           C48107 * (3 * C48341 + C48107 * C48440)) /
                          C47864;
    const double C9835 =
        (3 * C48351 + C48238 * C48363 + ae * C48107 * C48380 +
         C48107 * (ae * C48380 +
                   C48107 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47869;
    const double C9483 = (5 * (3 * C48305 + C48238 * C48370) +
                          C48238 * (4 * C48370 + C48238 * C48380)) /
                         C47864;
    const double C9580 = (C48107 * (4 * C48370 + C48238 * C48380)) / C47864;
    const double C9833 =
        (3 * C48305 + C48238 * C48370 + C48380 * C48331) / C47864;
    const double C18454 =
        (5 * (3 * C48425 + ae * C48426 + C48107 * C48477) +
         ae * (4 * C48426 + C48107 * C48478) +
         C48107 *
             (4 * C48477 + ae * C48478 +
              C48107 *
                  (3 * C48473 + ae * C48474 +
                   C48107 * (2 * C48467 + ae * C48469 +
                             C48107 * (C48176 + ae * C48107 * C48269 +
                                       C48107 * (ae * C48269 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C18453 = (5 * (3 * C48334 + C48107 * C48426) +
                           C48107 * (4 * C48426 + C48107 * C48478)) /
                          C47864;
    const double C9495 = C9493 * C48892;
    const double C9599 = C9595 * C48892;
    const double C49326 = C49289 + C49321;
    const double C11282 = C49311 - (C49057 * C49046) / C47864;
    const double C9126 = C49312 / C47870 - C49055 / C49273;
    const double C49322 = C49291 + C49311;
    const double C47909 = C47906 - C47885;
    const double C1770 = C1314 + C1315;
    const double C24143 = C23768 + C23769;
    const double C24142 = C23764 + C23765;
    const double C30022 = C30018 + C30019;
    const double C22655 = C310 * C49325;
    const double C22647 = C1305 * C49325;
    const double C23026 = C1307 * C49325;
    const double C23164 = C1963 * C49325;
    const double C102 =
        (C49316 + 2 * C48897) / C47870 - (C49325 * C48888) / C47864;
    const double C4030 = C308 * C3879;
    const double C4022 = C310 * C3879;
    const double C4403 = C1101 * C3879;
    const double C4541 = C1500 * C3879;
    const double C22657 = C308 * C49318;
    const double C22649 = C310 * C49318;
    const double C23024 = C1101 * C49318;
    const double C23162 = C1500 * C49318;
    const double C103 =
        (C49303 + 2 * C48905 + C49325) / C47870 - (C49318 * C48888) / C47864;
    const double C104 = (C49271 + C48902 / C47864 + C49318) / C47870 -
                        (C49305 * C48888) / C47864;
    const double C48025 = C48021 - C48002;
    const double C30902 = C30885 + C30886;
    const double C30897 = C30875 + C30876;
    const double C30895 = C30871 + C30872;
    const double C30893 = C30867 + C30868;
    const double C30891 = C30863 + C30864;
    const double C30889 = C30859 + C30860;
    const double C30887 = C30855 + C30856;
    const double C31072 = C31059 + C31060;
    const double C31070 = C31055 + C31056;
    const double C31068 = C31051 + C31052;
    const double C31066 = C31047 + C31048;
    const double C31064 = C31043 + C31044;
    const double C31238 = C31225 + C31226;
    const double C31236 = C31221 + C31222;
    const double C31234 = C31217 + C31218;
    const double C31232 = C31213 + C31214;
    const double C31230 = C31209 + C31210;
    const double C32124 = C32115 + C32116;
    const double C32119 = C32105 + C32106;
    const double C32117 = C32101 + C32102;
    const double C32362 = C32345 + C32346;
    const double C32360 = C32341 + C32342;
    const double C32357 = C32333 + C32334;
    const double C32355 = C32329 + C32330;
    const double C32353 = C32323 + C32324;
    const double C32351 = C32319 + C32320;
    const double C32580 = C32571 + C32572;
    const double C32578 = C32567 + C32568;
    const double C32576 = C32563 + C32564;
    const double C32574 = C32559 + C32560;
    const double C32938 = C32931 + C32932;
    const double C32936 = C32927 + C32928;
    const double C33159 = C33150 + C33151;
    const double C33157 = C33146 + C33147;
    const double C33155 = C33142 + C33143;
    const double C33153 = C33138 + C33139;
    const double C35421 = C35416 + C35417;
    const double C41738 = C41730 + C41731;
    const double C41736 = C41726 + C41727;
    const double C41881 = C41876 + C41877;
    const double C41879 = C41872 + C41873;
    const double C20234 = C20214 + C20215;
    const double C20229 = C20204 + C20205;
    const double C20225 = C20196 + C20197;
    const double C20388 = C20376 + C20377;
    const double C20384 = C20368 + C20369;
    const double C20542 = C20530 + C20531;
    const double C20538 = C20522 + C20523;
    const double C21513 = C21504 + C21505;
    const double C21509 = C21496 + C21497;
    const double C21892 = C21880 + C21881;
    const double C21888 = C21872 + C21873;
    const double C22046 = C22034 + C22035;
    const double C22042 = C22026 + C22027;
    const double C33844 = C33824 + C33825;
    const double C33839 = C33814 + C33815;
    const double C33835 = C33806 + C33807;
    const double C33998 = C33986 + C33987;
    const double C33994 = C33978 + C33979;
    const double C34152 = C34140 + C34141;
    const double C34148 = C34132 + C34133;
    const double C42491 = C42482 + C42483;
    const double C42487 = C42474 + C42475;
    const double C42870 = C42858 + C42859;
    const double C42866 = C42850 + C42851;
    const double C43024 = C43012 + C43013;
    const double C43020 = C43004 + C43005;
    const double C33831 = C49327 * C130;
    const double C33823 = C49327 * C142;
    const double C33809 = C49327 * C141;
    const double C33801 = C49327 * C128;
    const double C33993 = C49327 * C276;
    const double C33985 = C49327 * C284;
    const double C34147 = C49327 * C408;
    const double C34139 = C49327 * C416;
    const double C42477 = C49327 * C285;
    const double C42469 = C49327 * C278;
    const double C42865 = C49327 * C600;
    const double C42857 = C49327 * C610;
    const double C43019 = C49327 * C702;
    const double C43011 = C49327 * C712;
    const double C17809 =
        (C49320 + 2 * C49090) / C47870 - (C49327 * C49086) / C47864;
    const double C20219 = C20182 * C406;
    const double C20211 = C20182 * C415;
    const double C20201 = C20182 * C416;
    const double C20193 = C20182 * C408;
    const double C20381 = C20182 * C704;
    const double C20373 = C20182 * C713;
    const double C20535 = C20182 * C955;
    const double C20527 = C20182 * C964;
    const double C21501 = C20182 * C712;
    const double C21493 = C20182 * C702;
    const double C21885 = C20182 * C1470;
    const double C21877 = C20182 * C1475;
    const double C22039 = C20182 * C2376;
    const double C22031 = C20182 * C2388;
    const double C2567 = C2565 + C2555;
    const double C24999 = C2752 + C24995;
    const double C24996 = C24992 + C2752;
    const double C24998 = C2749 + C24994;
    const double C24997 = C24993 + C2749;
    const double C10576 = C10562 + C10144;
    const double C10575 = C10561 + C10141;
    const double C33829 = C49324 * C406;
    const double C33821 = C49324 * C415;
    const double C33811 = C49324 * C416;
    const double C33803 = C49324 * C408;
    const double C33991 = C49324 * C704;
    const double C33983 = C49324 * C713;
    const double C34145 = C49324 * C955;
    const double C34137 = C49324 * C964;
    const double C42479 = C49324 * C712;
    const double C42471 = C49324 * C702;
    const double C42863 = C49324 * C1470;
    const double C42855 = C49324 * C1475;
    const double C43017 = C49324 * C2376;
    const double C43009 = C49324 * C2388;
    const double C17810 =
        (C49309 + 2 * C49097 + C49327) / C47870 - (C49324 * C49086) / C47864;
    const double C17811 = (C49287 + C49094 / C47864 + C49324) / C47870 -
                          (C49315 * C49086) / C47864;
    const double C15257 = C15255 + C15245;
    const double C18803 = C15438 + C18799;
    const double C18800 = C18796 + C15438;
    const double C18802 = C15435 + C18798;
    const double C18801 = C18797 + C15435;
    const double C17154 = C17140 + C16730;
    const double C17153 = C17139 + C16727;
    const double C4033 = C305 * C3887;
    const double C22660 = C305 * C22514;
    const double C1302 = C1105 * C1086;
    const double C4400 = C1105 * C3887;
    const double C8086 = C1105 * C7916;
    const double C23021 = C1105 * C22514;
    const double C26567 = C1105 * C47925;
    const double C4538 = C4170 * C3887;
    const double C23159 = C4170 * C22514;
    const double C48260 = C48259 + C48258;
    const double C2720 = C49287 * C2390;
    const double C6684 = C49094 * C2390;
    const double C15406 = C49287 * C2390;
    const double C35411 = C49094 * C2390;
    const double C36811 = C36601 * C2390;
    const double C2719 = C2509 * C2381;
    const double C6683 = C5003 * C2381;
    const double C15405 = C15199 * C2381;
    const double C35410 = C30853 * C2381;
    const double C36810 = C48050 * C2381;
    const double C9247 = C9243 * C48892;
    const double C11808 = C9243 * C48902;
    const double C24144 = C9243 * C48902;
    const double C11946 = C11576 * C48902;
    const double C24282 = C11576 * C48902;
    const double C48796 = C48795 + C48780;
    const double C9496 = C9494 * C9128;
    const double C9600 = C9596 * C9128;
    const double C175 = C162 + C163;
    const double C5050 = C5031 + C5032;
    const double C30900 = C30881 + C30882;
    const double C306 = C292 + C293;
    const double C5212 = C5189 + C5190;
    const double C31062 = C31039 + C31040;
    const double C438 = C424 + C425;
    const double C2560 = C2537 + C2538;
    const double C5048 = C5027 + C5028;
    const double C5378 = C5355 + C5356;
    const double C15250 = C15227 + C15228;
    const double C30898 = C30877 + C30878;
    const double C31228 = C31205 + C31206;
    const double C1103 = C1094 + C1095;
    const double C6482 = C6459 + C6460;
    const double C32122 = C32111 + C32112;
    const double C1498 = C1486 + C1487;
    const double C2744 = C2721 + C2722;
    const double C5215 = C5195 + C5196;
    const double C6700 = C6685 + C6686;
    const double C15430 = C15407 + C15408;
    const double C31065 = C31045 + C31046;
    const double C35419 = C35412 + C35413;
    const double C2558 = C2533 + C2534;
    const double C2942 = C2919 + C2920;
    const double C5381 = C5361 + C5362;
    const double C15248 = C15223 + C15224;
    const double C15612 = C15589 + C15590;
    const double C31231 = C31211 + C31212;
    const double C36653 = C36628 + C36629;
    const double C1308 = C1284 + C1285;
    const double C1494 = C1478 + C1479;
    const double C6481 = C6457 + C6458;
    const double C32121 = C32109 + C32110;
    const double C2941 = C2917 + C2918;
    const double C15611 = C15587 + C15588;
    const double C20230 = C20206 + C20207;
    const double C33840 = C33816 + C33817;
    const double C37016 = C36992 + C36993;
    const double C14584 = C14578 + C14579;
    const double C289 = C49007 * C281;
    const double C421 = C49007 * C413;
    const double C5030 = C49094 * C413;
    const double C30880 = C49094 * C413;
    const double C1097 = C49007 * C613;
    const double C4166 = C49007 * C715;
    const double C5188 = C49094 * C715;
    const double C31038 = C49094 * C715;
    const double C48278 = C48277 + C48267;
    const double C2393 =
        (C48160 + C48184 * C48287 + ae * C48107 * C48311 +
         C48107 * (ae * C48311 +
                   C48107 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47869;
    const double C1765 = (3 * (C48254 + C48231 * C48287) +
                          C48238 * (2 * C48302 + C48238 * C48311)) /
                         C47864;
    const double C1940 = (C48107 * (2 * C48302 + C48238 * C48311)) / C47864;
    const double C2387 = (C48254 + C48231 * C48287 + C48311 * C48331) / C47864;
    const double C3779 =
        (3 * (C48160 + ae * C48343 + C48107 * C48347) +
         ae * (2 * C48343 + C48107 * C48348) +
         C48107 *
             (2 * C48347 + ae * C48348 +
              C48107 *
                  (C48184 + ae * C48107 * C48275 +
                   C48107 * (ae * C48275 +
                             C48107 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C3776 = (3 * (C48254 + C48231 * C48331) +
                          C48107 * (2 * C48343 + C48107 * C48348)) /
                         C47864;
    const double C9123 =
        (C49319 + 2 * C49050) / C47870 - (C49326 * C49046) / C47864;
    const double C9124 =
        (C49307 + 2 * C49057 + C49326) / C47870 - (C49322 * C49046) / C47864;
    const double C9125 = (C49284 + C49054 / C47864 + C49322) / C47870 -
                         (C49312 * C49046) / C47864;
    const double C11438 = C1311 * C47909;
    const double C11434 = C1100 * C47909;
    const double C11430 = C311 * C47909;
    const double C11426 = C1781 * C47909;
    const double C11422 = C1306 * C47909;
    const double C11418 = C1304 * C47909;
    const double C11811 = C9240 * C47909;
    const double C11957 = C1964 * C47909;
    const double C11953 = C1962 * C47909;
    const double C11949 = C9598 * C47909;
    const double C13230 = C13218 * C47909;
    const double C47912 = C47909 / C47870;
    const double C47911 = C47862 * C47909;
    const double C1779 = C1770 + C1280;
    const double C24149 = C24143 + C23770;
    const double C24148 = C24142 + C23766;
    const double C30023 = C30022 + C30020;
    const double C48031 = C48025 / C47870;
    const double C48030 = C47947 * C48025;
    const double C30905 = C30895 + C30896;
    const double C30904 = C30893 + C30894;
    const double C30903 = C30891 + C30892;
    const double C32350 = C31071 + C31072;
    const double C32327 = C31072 + C31071;
    const double C32349 = C31069 + C31070;
    const double C32328 = C31070 + C31069;
    const double C35018 = C31068 + C31067;
    const double C35215 = C31067 + C31068;
    const double C32347 = C32120 + C32119;
    const double C32338 = C32119 + C32120;
    const double C32348 = C32118 + C32117;
    const double C32337 = C32117 + C32118;
    const double C32922 = C32357 + C32358;
    const double C32921 = C32355 + C32356;
    const double C41722 = C32938 + C32937;
    const double C41723 = C32936 + C32935;
    const double C10584 = C10576 * C48892;
    const double C10583 = C10575 * C9128;
    const double C17162 = C17154 * C48892;
    const double C17161 = C17153 * C9128;
    const double C966 =
        (2 * C48140 + ae * C48141 + C48108 * C48160 + ae * C48107 * C48260 +
         C48107 * (ae * C48260 + C48107 * C48188)) /
        C47869;
    const double C136 = (4 * (2 * C48249 + C48108 * C48254 + C48494 * ae) +
                         C48108 * (3 * C48254 + C48108 * C48260 + C48498 * ae) +
                         (3 * C48494 + C48108 * C48498) * ae) /
                        C47864;
    const double C269 =
        (C48238 * (3 * C48254 + C48108 * C48260 + C48498 * ae)) / C47864;
    const double C401 =
        (C48107 * (3 * C48254 + C48108 * C48260 + C48498 * ae)) / C47864;
    const double C607 =
        (2 * C48249 + C48108 * C48254 + C48494 * ae + C48260 * C48287) / C47864;
    const double C709 = (C48107 * C48238 * C48260) / C47864;
    const double C960 =
        (2 * C48249 + C48108 * C48254 + C48494 * ae + C48260 * C48331) / C47864;
    const double C2743 = C2719 + C2720;
    const double C6699 = C6683 + C6684;
    const double C15429 = C15405 + C15406;
    const double C35418 = C35410 + C35411;
    const double C36834 = C36810 + C36811;
    const double C18452 =
        (5 * (3 * C48744 + C48107 * C48796 + C48743 * ae) +
         C48107 *
             (4 * C48796 +
              C48107 *
                  (3 * C48791 +
                   C48107 *
                       (2 * C48783 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48265) +
                                  C48107 * C48219 * ae) +
                        C48785 * ae) +
                   C48790 * ae) +
              C48794 * ae) +
         (4 * C48743 + C48107 * C48794) * ae) /
        C47864;
    const double C1297 = C306 * C49271;
    const double C4032 = C306 * C3880;
    const double C4026 = C306 * C49288;
    const double C8081 = C306 * C49271;
    const double C22659 = C306 * C49305;
    const double C22653 = C306 * C49288;
    const double C26562 = C306 * C26391;
    const double C5056 = C5047 + C5048;
    const double C30906 = C30897 + C30898;
    const double C1301 = C1103 * C1079;
    const double C1283 = C1103 * C49271;
    const double C4401 = C1103 * C3880;
    const double C8085 = C1103 * C49303;
    const double C8075 = C1103 * C49271;
    const double C11437 = C1103 * C48902;
    const double C23022 = C1103 * C49305;
    const double C23779 = C1103 * C48902;
    const double C26566 = C1103 * C48905;
    const double C26556 = C1103 * C26391;
    const double C1953 = C1498 * C49271;
    const double C4539 = C1498 * C3880;
    const double C8653 = C1498 * C49271;
    const double C23160 = C1498 * C49305;
    const double C27134 = C1498 * C26391;
    const double C6252 = C5216 + C5215;
    const double C6473 = C5215 + C5216;
    const double C35019 = C31066 + C31065;
    const double C35214 = C31065 + C31066;
    const double C2568 = C2566 + C2558;
    const double C15258 = C15256 + C15248;
    const double C1771 = C1308 * C49271;
    const double C8491 = C1308 * C49271;
    const double C11441 = C1308 * C48902;
    const double C23783 = C1308 * C48902;
    const double C26972 = C1308 * C26391;
    const double C1945 = C1494 * C49271;
    const double C8647 = C1494 * C49271;
    const double C27128 = C1494 * C26391;
    const double C48279 = C48108 * C48278;
    const double C48313 = C48238 * C48278;
    const double C1476 =
        (ae * (C48260 + C48278 * C48287) +
         C48107 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48287)) /
        C47869;
    const double C2915 =
        (2 * (ae * C48260 + C48107 * C48188) +
         ae * (C48260 + C48278 * std::pow(C48107, 2)) +
         C48107 *
             (C48188 + ae * C48107 * C48278 +
              C48107 *
                  (ae * C48278 +
                   C48107 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C1262 =
        (2 * C48238 * C48260 + C48238 * (C48260 + C48278 * C48287)) / C47864;
    const double C1472 = (C48107 * (C48260 + C48278 * C48287)) / C47864;
    const double C2911 =
        (2 * C48107 * C48260 + C48107 * (C48260 + C48278 * C48331)) / C47864;
    const double C11807 = C11426 + C11427;
    const double C11806 = C11422 + C11423;
    const double C13236 = C13230 + C13231;
    const double C47915 = C47912 - C47907;
    const double C7915 = C47912 + (C47898 * ae) / C47864;
    const double C47914 = C47911 + C49229;
    const double C1782 = C1779 + C1281;
    const double C24151 = C24149 + C23771;
    const double C24150 = C24148 + C23767;
    const double C30024 = C30023 + C30021;
    const double C48036 = C48031 - C48032;
    const double C48035 = C48030 + C49252;
    const double C32924 = C32338 * C48902;
    const double C44263 = C32338 * C48902;
    const double C32923 = C32337 * C23628;
    const double C44262 = C32337 * C47890;
    const double C32934 = C32922 * C23621;
    const double C41721 = C32922 * C48892;
    const double C44261 = C32922 * C49229;
    const double C32933 = C32921 * C23627;
    const double C41720 = C32921 * C9128;
    const double C44260 = C32921 * C47909;
    const double C41733 = C41722 * C9128;
    const double C41734 = C41723 * C48892;
    const double C10585 = C10583 + C10584;
    const double C17163 = C17161 + C17162;
    const double C2536 = C49287 * C966;
    const double C5354 = C49094 * C966;
    const double C15226 = C49287 * C966;
    const double C31204 = C49094 * C966;
    const double C36631 = C36601 * C966;
    const double C164 = C113 * C136;
    const double C288 = C113 * C269;
    const double C420 = C113 * C401;
    const double C5029 = C5003 * C401;
    const double C30879 = C30853 * C401;
    const double C1096 = C113 * C607;
    const double C4165 = C113 * C709;
    const double C5187 = C5003 * C709;
    const double C31037 = C30853 * C709;
    const double C2535 = C2509 * C960;
    const double C5353 = C5003 * C960;
    const double C15225 = C15199 * C960;
    const double C31203 = C30853 * C960;
    const double C36630 = C48050 * C960;
    const double C48280 = C48262 + C48279;
    const double C2717 =
        (C48238 * C48188 + ae * C48107 * C48313 +
         C48107 * (ae * C48313 +
                   C48107 * C48238 *
                       (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47869;
    const double C2716 = (C48238 * C48260 + C48313 * C48331) / C47864;
    const double C11813 = C11807 + C11428;
    const double C11812 = C11806 + C11424;
    const double C13237 = C13236 + C13220;
    const double C26565 = C1102 * C47915;
    const double C26559 = C309 * C47915;
    const double C26553 = C1100 * C47915;
    const double C26547 = C311 * C47915;
    const double C26975 = C1311 * C47915;
    const double C27137 = C1501 * C47915;
    const double C27131 = C1497 * C47915;
    const double C117 =
        (C47915 / C47870 + ((C47862 * C47925 + C26391) * ae) / C47864) /
            C47870 -
        ((C47862 * (C47925 / C47870 + (0 * ae) / C47864) + C49288) * be) /
            C47864;
    const double C3886 =
        C47915 / C47870 - ((C47862 * C47925 + C26391) * be) / C47864;
    const double C22513 =
        C47915 / C47870 + ((C47862 * C47925 + C26391) * ae) / C47864;
    const double C8084 = C1102 * C7915;
    const double C8078 = C309 * C7915;
    const double C8072 = C1100 * C7915;
    const double C8066 = C311 * C7915;
    const double C8494 = C1311 * C7915;
    const double C8656 = C1501 * C7915;
    const double C8650 = C1497 * C7915;
    const double C47916 = C47914 * be;
    const double C7914 = C47901 + (C47914 * ae) / C47864 + C47890;
    const double C1785 = C1782 + C1282;
    const double C36638 = C48036 * C396;
    const double C36632 = C48036 * C403;
    const double C36626 = C48036 * C405;
    const double C36620 = C48036 * C397;
    const double C36614 = C48036 * C407;
    const double C36608 = C48036 * C398;
    const double C36830 = C48036 * C698;
    const double C36824 = C48036 * C705;
    const double C36818 = C48036 * C699;
    const double C36812 = C48036 * C707;
    const double C37012 = C48036 * C949;
    const double C37006 = C48036 * C956;
    const double C37000 = C48036 * C950;
    const double C36994 = C48036 * C958;
    const double C38194 = C48036 * C1462;
    const double C38188 = C48036 * C1467;
    const double C38180 = C48036 * C703;
    const double C38174 = C48036 * C697;
    const double C38418 = C48036 * C2371;
    const double C38412 = C48036 * C2379;
    const double C38776 = C48036 * C1463;
    const double C38770 = C48036 * C1469;
    const double C38988 = C48036 * C2370;
    const double C38982 = C48036 * C2377;
    const double C47265 = C48036 * C1932;
    const double C47259 = C48036 * C1936;
    const double C47434 = C48036 * C2373;
    const double C47428 = C48036 * C2383;
    const double C17817 =
        (C48036 / C47870 + ((C47947 * C48050 + C36601) * ae) / C47864) /
            C47870 -
        ((C47947 * (C48050 / C47870 + (0 * ae) / C47864) + C49300) * be) /
            C47864;
    const double C20187 =
        C48036 / C47870 - ((C47947 * C48050 + C36601) * be) / C47864;
    const double C33797 =
        C48036 / C47870 + ((C47947 * C48050 + C36601) * ae) / C47864;
    const double C48039 = C48035 * be;
    const double C32939 = C32933 + C32934;
    const double C41732 = C41720 + C41721;
    const double C44264 = C44260 + C44261;
    const double C41739 = C41733 + C41734;
    const double C176 = C164 + C165;
    const double C304 = C288 + C289;
    const double C436 = C420 + C421;
    const double C5049 = C5029 + C5030;
    const double C30899 = C30879 + C30880;
    const double C1104 = C1096 + C1097;
    const double C4169 = C4165 + C4166;
    const double C5211 = C5187 + C5188;
    const double C31061 = C31037 + C31038;
    const double C2559 = C2535 + C2536;
    const double C5377 = C5353 + C5354;
    const double C15249 = C15225 + C15226;
    const double C31227 = C31203 + C31204;
    const double C36654 = C36630 + C36631;
    const double C48281 = C48280 + C48268;
    const double C11815 = C11813 + C11429;
    const double C11814 = C11812 + C11425;
    const double C13238 = C13237 + C13221;
    const double C4031 = C307 * C3886;
    const double C4023 = C309 * C3886;
    const double C4402 = C1102 * C3886;
    const double C4540 = C1499 * C3886;
    const double C22658 = C307 * C22513;
    const double C22650 = C309 * C22513;
    const double C23023 = C1102 * C22513;
    const double C23161 = C1499 * C22513;
    const double C47917 = C47916 / C47864;
    const double C8082 = C1100 * C7914;
    const double C8076 = C311 * C7914;
    const double C8070 = C1306 * C7914;
    const double C8064 = C1304 * C7914;
    const double C8496 = C1781 * C7914;
    const double C8658 = C1964 * C7914;
    const double C8652 = C1962 * C7914;
    const double C1786 = C1785 + C1283;
    const double C36658 = C36638 + C36639;
    const double C36655 = C36632 + C36633;
    const double C36652 = C36626 + C36627;
    const double C36649 = C36620 + C36621;
    const double C36646 = C36614 + C36615;
    const double C36643 = C36608 + C36609;
    const double C36844 = C36830 + C36831;
    const double C36841 = C36824 + C36825;
    const double C36838 = C36818 + C36819;
    const double C36835 = C36812 + C36813;
    const double C37026 = C37012 + C37013;
    const double C37023 = C37006 + C37007;
    const double C37020 = C37000 + C37001;
    const double C37017 = C36994 + C36995;
    const double C38212 = C38194 + C38195;
    const double C38209 = C38188 + C38189;
    const double C38204 = C38180 + C38181;
    const double C38201 = C38174 + C38175;
    const double C38426 = C38418 + C38419;
    const double C38423 = C38412 + C38413;
    const double C38784 = C38776 + C38777;
    const double C38781 = C38770 + C38771;
    const double C38996 = C38988 + C38989;
    const double C38993 = C38982 + C38983;
    const double C47275 = C47265 + C47266;
    const double C47272 = C47259 + C47260;
    const double C47442 = C47434 + C47435;
    const double C47439 = C47428 + C47429;
    const double C20216 = C20187 * C950;
    const double C20208 = C20187 * C958;
    const double C20202 = C20187 * C956;
    const double C20194 = C20187 * C949;
    const double C20378 = C20187 * C2371;
    const double C20370 = C20187 * C2379;
    const double C20532 = C20187 * C2901;
    const double C20524 = C20187 * C2906;
    const double C21502 = C20187 * C2377;
    const double C21494 = C20187 * C2370;
    const double C21882 = C20187 * C2373;
    const double C21874 = C20187 * C2383;
    const double C22036 = C20187 * C3354;
    const double C22028 = C20187 * C3358;
    const double C33826 = C33797 * C950;
    const double C33818 = C33797 * C958;
    const double C33812 = C33797 * C956;
    const double C33804 = C33797 * C949;
    const double C33988 = C33797 * C2371;
    const double C33980 = C33797 * C2379;
    const double C34142 = C33797 * C2901;
    const double C34134 = C33797 * C2906;
    const double C42480 = C33797 * C2377;
    const double C42472 = C33797 * C2370;
    const double C42860 = C33797 * C2373;
    const double C42852 = C33797 * C2383;
    const double C43014 = C33797 * C3354;
    const double C43006 = C33797 * C3358;
    const double C48041 = C48039 / C47864;
    const double C32940 = C32939 + C32923;
    const double C44265 = C44264 + C44262;
    const double C4034 = C304 * C49288;
    const double C22661 = C304 * C49288;
    const double C1303 = C1104 * C49271;
    const double C4399 = C1104 * C49288;
    const double C8087 = C1104 * C49271;
    const double C23020 = C1104 * C49288;
    const double C26568 = C1104 * C26391;
    const double C4537 = C4169 * C49288;
    const double C23158 = C4169 * C49288;
    const double C967 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 + ae * C48107 * C48281 +
         C48107 *
             (ae * C48281 +
              C48107 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47869;
    const double C139 = (5 * (3 * C48254 + C48108 * C48260 + C48498 * ae) +
                         C48108 * (4 * C48260 + C48108 * C48281 + C48504 * ae) +
                         (4 * C48498 + C48108 * C48504) * ae) /
                        C47864;
    const double C280 =
        (C48238 * (4 * C48260 + C48108 * C48281 + C48504 * ae)) / C47864;
    const double C412 =
        (C48107 * (4 * C48260 + C48108 * C48281 + C48504 * ae)) / C47864;
    const double C609 =
        (3 * C48254 + C48108 * C48260 + C48498 * ae + C48281 * C48287) / C47864;
    const double C711 = (C48107 * C48238 * C48281) / C47864;
    const double C962 =
        (3 * C48254 + C48108 * C48260 + C48498 * ae + C48281 * C48331) / C47864;
    const double C47918 = C47901 - C47917;
    const double C8490 = C8070 + C8071;
    const double C20235 = C20216 + C20217;
    const double C20231 = C20208 + C20209;
    const double C20228 = C20202 + C20203;
    const double C20224 = C20194 + C20195;
    const double C20389 = C20378 + C20379;
    const double C20385 = C20370 + C20371;
    const double C20543 = C20532 + C20533;
    const double C20539 = C20524 + C20525;
    const double C21512 = C21502 + C21503;
    const double C21508 = C21494 + C21495;
    const double C21893 = C21882 + C21883;
    const double C21889 = C21874 + C21875;
    const double C22047 = C22036 + C22037;
    const double C22043 = C22028 + C22029;
    const double C33845 = C33826 + C33827;
    const double C33841 = C33818 + C33819;
    const double C33838 = C33812 + C33813;
    const double C33834 = C33804 + C33805;
    const double C33999 = C33988 + C33989;
    const double C33995 = C33980 + C33981;
    const double C34153 = C34142 + C34143;
    const double C34149 = C34134 + C34135;
    const double C42490 = C42480 + C42481;
    const double C42486 = C42472 + C42473;
    const double C42871 = C42860 + C42861;
    const double C42867 = C42852 + C42853;
    const double C43025 = C43014 + C43015;
    const double C43021 = C43006 + C43007;
    const double C48043 = C48029 - C48041;
    const double C32941 = C32940 + C32924;
    const double C44266 = C44265 + C44263;
    const double C47919 = C47918 + C47890;
    const double C8497 = C8490 + C8072;
    const double C48044 = C48043 + C48014;
    const double C26563 = C1100 * C47919;
    const double C26557 = C311 * C47919;
    const double C26551 = C1306 * C47919;
    const double C26545 = C1304 * C47919;
    const double C26977 = C1781 * C47919;
    const double C27139 = C1964 * C47919;
    const double C27133 = C1962 * C47919;
    const double C114 =
        (((((0 - (C47862 * C47863) / C47864) * ae) / C47864 -
           (0 * be) / C47876 + (2 * C47865) / C47864) /
              C47870 -
          ((C47862 * C47899 + 0) * be) / C47864 + C47882 - C47892) /
             C47870 +
         ((C47862 * C47913 + 0) * ae) / C47864) /
            C47870 -
        ((C47862 * (C47913 / C47870 +
                    ((C47862 * C47919 + C48897) * ae) / C47864 + C47915) +
          C49325) *
         be) /
            C47864 +
        C47919 / C47870 + ((C47862 * C47915 + C48905) * ae) / C47864 +
        2 * (C47890 / C47870 - (0 * be) / C47864);
    const double C115 =
        (C47913 / C47870 + ((C47862 * C47919 + C48897) * ae) / C47864 +
         C47915) /
            C47870 -
        ((C47862 * (C47919 / C47870 +
                    ((C47862 * C47915 + C48905) * ae) / C47864 + 2 * C47925) +
          C49318) *
         be) /
            C47864 +
        2 * (C47915 / C47870 + ((C47862 * C47925 + C26391) * ae) / C47864);
    const double C116 =
        (C47919 / C47870 + ((C47862 * C47915 + C48905) * ae) / C47864 +
         2 * C47925) /
            C47870 -
        ((C47862 *
              (C47915 / C47870 + ((C47862 * C47925 + C26391) * ae) / C47864) +
          C49305) *
         be) /
            C47864 +
        3 * (C47925 / C47870 + (0 * ae) / C47864);
    const double C3884 =
        C47913 / C47870 - ((C47862 * C47919 + C48897) * be) / C47864 + C47915;
    const double C3885 = C47919 / C47870 -
                         ((C47862 * C47915 + C48905) * be) / C47864 +
                         2 * C47925;
    const double C22511 =
        C47913 / C47870 + ((C47862 * C47919 + C48897) * ae) / C47864 + C47915;
    const double C22512 = C47919 / C47870 +
                          ((C47862 * C47915 + C48905) * ae) / C47864 +
                          2 * C47925;
    const double C8498 = C8497 + C8073;
    const double C36640 = C48044 * C122;
    const double C36634 = C48044 * C133;
    const double C36624 = C48044 * C131;
    const double C36618 = C48044 * C121;
    const double C36612 = C48044 * C129;
    const double C36606 = C48044 * C120;
    const double C36832 = C48044 * C266;
    const double C36826 = C48044 * C275;
    const double C36820 = C48044 * C265;
    const double C36814 = C48044 * C273;
    const double C37014 = C48044 * C398;
    const double C37008 = C48044 * C407;
    const double C37002 = C48044 * C397;
    const double C36996 = C48044 * C405;
    const double C38196 = C48044 * C596;
    const double C38190 = C48044 * C603;
    const double C38178 = C48044 * C277;
    const double C38172 = C48044 * C267;
    const double C38420 = C48044 * C698;
    const double C38414 = C48044 * C705;
    const double C38778 = C48044 * C595;
    const double C38772 = C48044 * C601;
    const double C38990 = C48044 * C697;
    const double C38984 = C48044 * C703;
    const double C47267 = C48044 * C1253;
    const double C47261 = C48044 * C1259;
    const double C47436 = C48044 * C1463;
    const double C47430 = C48044 * C1469;
    const double C17814 =
        (((((0 - (C47947 * C47997) / C47864) * ae) / C47864 -
           (0 * be) / C47876 + (2 * C47998) / C47864) /
              C47870 -
          ((C47947 * C48033 + 0) * be) / C47864 + C48007 - C48020) /
             C47870 +
         ((C47947 * C48042 + 0) * ae) / C47864) /
            C47870 -
        ((C47947 * (C48042 / C47870 +
                    ((C47947 * C48044 + C49090) * ae) / C47864 + C48036) +
          C49327) *
         be) /
            C47864 +
        C48044 / C47870 + ((C47947 * C48036 + C49097) * ae) / C47864 +
        2 * (C48014 / C47870 - (0 * be) / C47864);
    const double C17815 =
        (C48042 / C47870 + ((C47947 * C48044 + C49090) * ae) / C47864 +
         C48036) /
            C47870 -
        ((C47947 * (C48044 / C47870 +
                    ((C47947 * C48036 + C49097) * ae) / C47864 + 2 * C48050) +
          C49324) *
         be) /
            C47864 +
        2 * (C48036 / C47870 + ((C47947 * C48050 + C36601) * ae) / C47864);
    const double C17816 =
        (C48044 / C47870 + ((C47947 * C48036 + C49097) * ae) / C47864 +
         2 * C48050) /
            C47870 -
        ((C47947 *
              (C48036 / C47870 + ((C47947 * C48050 + C36601) * ae) / C47864) +
          C49315) *
         be) /
            C47864 +
        3 * (C48050 / C47870 + (0 * ae) / C47864);
    const double C20185 =
        C48042 / C47870 - ((C47947 * C48044 + C49090) * be) / C47864 + C48036;
    const double C20186 = C48044 / C47870 -
                          ((C47947 * C48036 + C49097) * be) / C47864 +
                          2 * C48050;
    const double C33795 =
        C48042 / C47870 + ((C47947 * C48044 + C49090) * ae) / C47864 + C48036;
    const double C33796 = C48044 / C47870 +
                          ((C47947 * C48036 + C49097) * ae) / C47864 +
                          2 * C48050;
    const double C26971 = C26551 + C26552;
    const double C4027 = C311 * C3884;
    const double C4019 = C1304 * C3884;
    const double C4406 = C1306 * C3884;
    const double C4544 = C1964 * C3884;
    const double C4029 = C309 * C3885;
    const double C4021 = C311 * C3885;
    const double C4404 = C1100 * C3885;
    const double C4542 = C1501 * C3885;
    const double C22654 = C311 * C22511;
    const double C22646 = C1304 * C22511;
    const double C23027 = C1306 * C22511;
    const double C23165 = C1964 * C22511;
    const double C22656 = C309 * C22512;
    const double C22648 = C311 * C22512;
    const double C23025 = C1100 * C22512;
    const double C23163 = C1501 * C22512;
    const double C8499 = C8498 + C8074;
    const double C36659 = C36640 + C36641;
    const double C36656 = C36634 + C36635;
    const double C36651 = C36624 + C36625;
    const double C36648 = C36618 + C36619;
    const double C36645 = C36612 + C36613;
    const double C36642 = C36606 + C36607;
    const double C36845 = C36832 + C36833;
    const double C36842 = C36826 + C36827;
    const double C36839 = C36820 + C36821;
    const double C36836 = C36814 + C36815;
    const double C37027 = C37014 + C37015;
    const double C37024 = C37008 + C37009;
    const double C37021 = C37002 + C37003;
    const double C37018 = C36996 + C36997;
    const double C38213 = C38196 + C38197;
    const double C38210 = C38190 + C38191;
    const double C38203 = C38178 + C38179;
    const double C38200 = C38172 + C38173;
    const double C38427 = C38420 + C38421;
    const double C38424 = C38414 + C38415;
    const double C38785 = C38778 + C38779;
    const double C38782 = C38772 + C38773;
    const double C38997 = C38990 + C38991;
    const double C38994 = C38984 + C38985;
    const double C47276 = C47267 + C47268;
    const double C47273 = C47261 + C47262;
    const double C47443 = C47436 + C47437;
    const double C47440 = C47430 + C47431;
    const double C20220 = C20185 * C121;
    const double C20212 = C20185 * C131;
    const double C20198 = C20185 * C129;
    const double C20190 = C20185 * C120;
    const double C20382 = C20185 * C266;
    const double C20374 = C20185 * C275;
    const double C20536 = C20185 * C398;
    const double C20528 = C20185 * C407;
    const double C21498 = C20185 * C277;
    const double C21490 = C20185 * C267;
    const double C21886 = C20185 * C595;
    const double C21878 = C20185 * C601;
    const double C22040 = C20185 * C697;
    const double C22032 = C20185 * C703;
    const double C20218 = C20186 * C397;
    const double C20210 = C20186 * C405;
    const double C20200 = C20186 * C407;
    const double C20192 = C20186 * C398;
    const double C20380 = C20186 * C698;
    const double C20372 = C20186 * C705;
    const double C20534 = C20186 * C949;
    const double C20526 = C20186 * C956;
    const double C21500 = C20186 * C703;
    const double C21492 = C20186 * C697;
    const double C21884 = C20186 * C1463;
    const double C21876 = C20186 * C1469;
    const double C22038 = C20186 * C2370;
    const double C22030 = C20186 * C2377;
    const double C33830 = C33795 * C121;
    const double C33822 = C33795 * C131;
    const double C33808 = C33795 * C129;
    const double C33800 = C33795 * C120;
    const double C33992 = C33795 * C266;
    const double C33984 = C33795 * C275;
    const double C34146 = C33795 * C398;
    const double C34138 = C33795 * C407;
    const double C42476 = C33795 * C277;
    const double C42468 = C33795 * C267;
    const double C42864 = C33795 * C595;
    const double C42856 = C33795 * C601;
    const double C43018 = C33795 * C697;
    const double C43010 = C33795 * C703;
    const double C33828 = C33796 * C397;
    const double C33820 = C33796 * C405;
    const double C33810 = C33796 * C407;
    const double C33802 = C33796 * C398;
    const double C33990 = C33796 * C698;
    const double C33982 = C33796 * C705;
    const double C34144 = C33796 * C949;
    const double C34136 = C33796 * C956;
    const double C42478 = C33796 * C703;
    const double C42470 = C33796 * C697;
    const double C42862 = C33796 * C1463;
    const double C42854 = C33796 * C1469;
    const double C43016 = C33796 * C2370;
    const double C43008 = C33796 * C2377;
    const double C26978 = C26971 + C26553;
    const double C8500 = C8499 + C8075;
    const double C36661 = C36651 + C36652;
    const double C36660 = C36648 + C36649;
    const double C38199 = C36844 + C36845;
    const double C38184 = C36845 + C36844;
    const double C38198 = C36841 + C36842;
    const double C38185 = C36842 + C36841;
    const double C47255 = C38785 + C38784;
    const double C47256 = C38782 + C38781;
    const double C20237 = C20220 + C20221;
    const double C20233 = C20212 + C20213;
    const double C20226 = C20198 + C20199;
    const double C20222 = C20190 + C20191;
    const double C20391 = C20382 + C20383;
    const double C20387 = C20374 + C20375;
    const double C20545 = C20536 + C20537;
    const double C20541 = C20528 + C20529;
    const double C21510 = C21498 + C21499;
    const double C21506 = C21490 + C21491;
    const double C21895 = C21886 + C21887;
    const double C21891 = C21878 + C21879;
    const double C22049 = C22040 + C22041;
    const double C22045 = C22032 + C22033;
    const double C20236 = C20218 + C20219;
    const double C20232 = C20210 + C20211;
    const double C20227 = C20200 + C20201;
    const double C20223 = C20192 + C20193;
    const double C20390 = C20380 + C20381;
    const double C20386 = C20372 + C20373;
    const double C20544 = C20534 + C20535;
    const double C20540 = C20526 + C20527;
    const double C21511 = C21500 + C21501;
    const double C21507 = C21492 + C21493;
    const double C21894 = C21884 + C21885;
    const double C21890 = C21876 + C21877;
    const double C22048 = C22038 + C22039;
    const double C22044 = C22030 + C22031;
    const double C33847 = C33830 + C33831;
    const double C33843 = C33822 + C33823;
    const double C33836 = C33808 + C33809;
    const double C33832 = C33800 + C33801;
    const double C34001 = C33992 + C33993;
    const double C33997 = C33984 + C33985;
    const double C34155 = C34146 + C34147;
    const double C34151 = C34138 + C34139;
    const double C42488 = C42476 + C42477;
    const double C42484 = C42468 + C42469;
    const double C42873 = C42864 + C42865;
    const double C42869 = C42856 + C42857;
    const double C43027 = C43018 + C43019;
    const double C43023 = C43010 + C43011;
    const double C33846 = C33828 + C33829;
    const double C33842 = C33820 + C33821;
    const double C33837 = C33810 + C33811;
    const double C33833 = C33802 + C33803;
    const double C34000 = C33990 + C33991;
    const double C33996 = C33982 + C33983;
    const double C34154 = C34144 + C34145;
    const double C34150 = C34136 + C34137;
    const double C42489 = C42478 + C42479;
    const double C42485 = C42470 + C42471;
    const double C42872 = C42862 + C42863;
    const double C42868 = C42854 + C42855;
    const double C43026 = C43016 + C43017;
    const double C43022 = C43008 + C43009;
    const double C26979 = C26978 + C26554;
    const double C36663 = C36661 + C36653;
    const double C36662 = C36660 + C36650;
    const double C38215 = C36843 + C38199;
    const double C38206 = C38184 + C36843;
    const double C38214 = C36840 + C38198;
    const double C38207 = C38185 + C36840;
    const double C47269 = C47255 + C38783;
    const double C47270 = C47256 + C38780;
    const double C26980 = C26979 + C26555;
    const double C47277 = C47269 * C9128;
    const double C47278 = C47270 * C48892;
    const double C26981 = C26980 + C26556;
    const double C47279 = C47277 + C47278;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C119 + C49007 * C126) * C47919 +
                   (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
                   C169 * C48905 + C170 * C47925 + C171 * C26391) *
                      C49050 +
                  (C1304 * C47919 + C1305 * C48897 + C311 * C47915 +
                   C310 * C48905 + C309 * C47925 + C308 * C26391) *
                      C49057 +
                  (C1306 * C47919 + C1307 * C48897 + C1100 * C47915 +
                   C1101 * C48905 + C1102 * C47925 + C1103 * C26391) *
                      C26394) *
                     C48978 * C48961 * C110 -
                 ((C1104 * C26391 + C1105 * C47925 + C1103 * C48905 +
                   C1102 * C47915 + C1101 * C48897 + C1100 * C47919) *
                      C26394 +
                  (C306 * C26391 + C307 * C47925 + C308 * C48905 +
                   C309 * C47915 + C310 * C48897 + C311 * C47919) *
                      C49057 +
                  (C173 * C26391 + C172 * C47925 + C171 * C48905 +
                   C170 * C47915 + C169 * C48897 + C168 * C47919) *
                      C49050) *
                     C48978 * C48961 * C111 +
                 ((C170 * C47919 + C171 * C48897 + C172 * C47915 +
                   C173 * C48905 + C174 * C47925 + C175 * C26391) *
                      C49050 +
                  (C309 * C47919 + C308 * C48897 + C307 * C47915 +
                   C306 * C48905 + C305 * C47925 + C304 * C26391) *
                      C49057 +
                  (C1102 * C47919 + C1103 * C48897 + C1105 * C47915 +
                   C1104 * C48905 + (C113 * C599 + C49007 * C608) * C47925 +
                   (C113 * C609 + C49007 * C614) * C26391) *
                      C26394) *
                     C48978 * C48961 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            (C26551 + C26552 + C26553 + C26554 + C26555 + C26556) * C26394) *
               C48978 * C259 -
           ((C1308 * C26391 + C1309 * C47925 + C1310 * C48905 + C1311 * C47915 +
             C1780 * C48897 + C1781 * C47919) *
                C26394 +
            (C26556 + C26555 + C26554 + C26553 + C26552 + C26551) * C49057 +
            (C26550 + C26549 + C26548 + C26547 + C26546 + C26545) * C49050) *
               C48978 * C49279) *
              C261 +
          (((C26557 + C26558 + C26559 + C26560 + C26561 + C26562) * C49050 +
            (C26563 + C26564 + C26565 + C26566 + C26567 + C26568) * C49057 +
            (C1311 * C47919 + C1310 * C48897 + C1309 * C47915 + C1308 * C48905 +
             (C113 * C1254 + C49007 * C1261) * C47925 +
             (C113 * C1262 + C49007 * C1266) * C26391) *
                C26394) *
               C48978 * C49279 -
           ((C26568 + C26567 + C26566 + C26565 + C26564 + C26563) * C26394 +
            (C26562 + C26561 + C26560 + C26559 + C26558 + C26557) * C49057 +
            (C173 * C26391 + C172 * C47925 + C171 * C48905 + C170 * C47915 +
             C169 * C48897 + C168 * C47919) *
                C49050) *
               C48978 * C259) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            (C26551 + C26552 + C26553 + C26554 + C26555 + C26556) * C26394) *
               C393 -
           ((C1494 * C26391 + C1495 * C47925 + C1496 * C48905 + C1497 * C47915 +
             C1961 * C48897 + C1962 * C47919) *
                C26394 +
            (C1498 * C26391 + C1499 * C47925 + C1500 * C48905 + C1501 * C47915 +
             C1963 * C48897 + C1964 * C47919) *
                C49057 +
            (C440 * C26391 + C441 * C47925 + C442 * C48905 + C443 * C47915 +
             (C113 * C409 + C49007 * C417) * C48897 +
             (C113 * C399 + C49007 * C410) * C47919) *
                C49050) *
               C49281) *
              C48961 * C261 +
          (((C443 * C47919 + C442 * C48897 + C441 * C47915 + C440 * C48905 +
             C439 * C47925 + C438 * C26391) *
                C49050 +
            (C1501 * C47919 + C1500 * C48897 + C1499 * C47915 + C1498 * C48905 +
             C4170 * C47925 + C4169 * C26391) *
                C49057 +
            (C1497 * C47919 + C1496 * C48897 + C1495 * C47915 + C1494 * C48905 +
             (C113 * C1464 + C49007 * C1471) * C47925 +
             (C113 * C1472 + C49007 * C1476) * C26391) *
                C26394) *
               C49281 -
           ((C26568 + C26567 + C26566 + C26565 + C26564 + C26563) * C26394 +
            (C26562 + C26561 + C26560 + C26559 + C26558 + C26557) * C49057 +
            (C173 * C26391 + C172 * C47925 + C171 * C48905 + C170 * C47915 +
             C169 * C48897 + C168 * C47919) *
                C49050) *
               C393) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            (C26551 + C26552 + C26553 + C26554 + C26555 + C26556) * C26394) *
               C48978 * C525 -
           ((C1308 * C26391 + C1309 * C47925 + C1310 * C48905 + C1311 * C47915 +
             C1780 * C48897 + C1781 * C47919) *
                C26394 +
            (C26556 + C26555 + C26554 + C26553 + C26552 + C26551) * C49057 +
            (C26550 + C26549 + C26548 + C26547 + C26546 + C26545) * C49050) *
               C48978 * C49279) *
              C527 +
          (((C26557 + C26558 + C26559 + C26560 + C26561 + C26562) * C49050 +
            (C26563 + C26564 + C26565 + C26566 + C26567 + C26568) * C49057 +
            (C1311 * C47919 + C1310 * C48897 + C1309 * C47915 + C1308 * C48905 +
             (C113 * C1254 + C49007 * C1261) * C47925 +
             (C113 * C1262 + C49007 * C1266) * C26391) *
                C26394) *
               C48978 * C49279 -
           ((C26568 + C26567 + C26566 + C26565 + C26564 + C26563) * C26394 +
            (C26562 + C26561 + C26560 + C26559 + C26558 + C26557) * C49057 +
            (C173 * C26391 + C172 * C47925 + C171 * C48905 + C170 * C47915 +
             C169 * C48897 + C168 * C47919) *
                C49050) *
               C48978 * C525) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47919 +
            (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
            C169 * C48905 + C170 * C47925 + C171 * C26391) *
               C49050 +
           (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
           C26981 * C26394) *
              C48978 * C591 -
          ((C26972 + C26973 + C26974 + C26975 + C26976 + C26977) * C26394 +
           (C26556 + C26555 + C26554 + C26553 + C26552 + C26551) * C49057 +
           (C26550 + C26549 + C26548 + C26547 + C26546 + C26545) * C49050) *
              C48978 * C592 +
          (C26981 * C49050 +
           (C26977 + C26976 + C26975 + C26974 + C26973 + C26972) * C49057 +
           (C9240 * C47919 + C9241 * C48897 + C9242 * C47915 + C9243 * C48905 +
            (C113 * C1759 + C49007 * C1764) * C47925 +
            (C113 * C1765 + C49007 * C1768) * C26391) *
               C26394) *
              C48978 * C593) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            C26981 * C26394) *
               C393 -
           ((C27128 + C27129 + C27130 + C27131 + C27132 + C27133) * C26394 +
            (C27134 + C27135 + C27136 + C27137 + C27138 + C27139) * C49057 +
            (C440 * C26391 + C441 * C47925 + C442 * C48905 + C443 * C47915 +
             (C113 * C409 + C49007 * C417) * C48897 +
             (C113 * C399 + C49007 * C410) * C47919) *
                C49050) *
               C49281) *
              C525 +
          (((C27139 + C27138 + C27137 + C27136 + C27135 + C27134) * C49050 +
            (C27133 + C27132 + C27131 + C27130 + C27129 + C27128) * C49057 +
            (C9598 * C47919 + C9597 * C48897 + C11577 * C47915 +
             C11576 * C48905 + (C113 * C1934 + C49007 * C1939) * C47925 +
             (C113 * C1940 + C49007 * C1943) * C26391) *
                C26394) *
               C49281 -
           ((C26972 + C26973 + C26974 + C26975 + C26976 + C26977) * C26394 +
            (C26556 + C26555 + C26554 + C26553 + C26552 + C26551) * C49057 +
            (C26550 + C26549 + C26548 + C26547 + C26546 + C26545) * C49050) *
               C393) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            C26981 * C26394) *
               C799 -
           ((C27128 + C27129 + C27130 + C27131 + C27132 + C27133) * C26394 +
            (C27134 + C27135 + C27136 + C27137 + C27138 + C27139) * C49057 +
            (C440 * C26391 + C441 * C47925 + C442 * C48905 + C443 * C47915 +
             (C113 * C409 + C49007 * C417) * C48897 +
             (C113 * C399 + C49007 * C410) * C47919) *
                C49050) *
               C49281) *
              C48961 * C527 +
          (((C443 * C47919 + C442 * C48897 + C441 * C47915 + C440 * C48905 +
             C439 * C47925 + C438 * C26391) *
                C49050 +
            (C1501 * C47919 + C1500 * C48897 + C1499 * C47915 + C1498 * C48905 +
             C4170 * C47925 + C4169 * C26391) *
                C49057 +
            (C1497 * C47919 + C1496 * C48897 + C1495 * C47915 + C1494 * C48905 +
             (C113 * C1464 + C49007 * C1471) * C47925 +
             (C113 * C1472 + C49007 * C1476) * C26391) *
                C26394) *
               C49281 -
           ((C26568 + C26567 + C26566 + C26565 + C26564 + C26563) * C26394 +
            (C26562 + C26561 + C26560 + C26559 + C26558 + C26557) * C49057 +
            (C173 * C26391 + C172 * C47925 + C171 * C48905 + C170 * C47915 +
             C169 * C48897 + C168 * C47919) *
                C49050) *
               C799) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47919 +
             (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
             C169 * C48905 + C170 * C47925 + C171 * C26391) *
                C49050 +
            (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
            C26981 * C26394) *
               C799 -
           ((C27128 + C27129 + C27130 + C27131 + C27132 + C27133) * C26394 +
            (C27134 + C27135 + C27136 + C27137 + C27138 + C27139) * C49057 +
            (C440 * C26391 + C441 * C47925 + C442 * C48905 + C443 * C47915 +
             (C113 * C409 + C49007 * C417) * C48897 +
             (C113 * C399 + C49007 * C410) * C47919) *
                C49050) *
               C49281) *
              C259 +
          (((C27139 + C27138 + C27137 + C27136 + C27135 + C27134) * C49050 +
            (C27133 + C27132 + C27131 + C27130 + C27129 + C27128) * C49057 +
            (C9598 * C47919 + C9597 * C48897 + C11577 * C47915 +
             C11576 * C48905 + (C113 * C1934 + C49007 * C1939) * C47925 +
             (C113 * C1940 + C49007 * C1943) * C26391) *
                C26394) *
               C49281 -
           ((C26972 + C26973 + C26974 + C26975 + C26976 + C26977) * C26394 +
            (C26556 + C26555 + C26554 + C26553 + C26552 + C26551) * C49057 +
            (C26550 + C26549 + C26548 + C26547 + C26546 + C26545) * C49050) *
               C799) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47919 +
            (C113 * C127 + C49007 * C140) * C48897 + C168 * C47915 +
            C169 * C48905 + C170 * C47925 + C171 * C26391) *
               C49050 +
           (C26545 + C26546 + C26547 + C26548 + C26549 + C26550) * C49057 +
           C26981 * C26394) *
              C945 -
          ((C27128 + C27129 + C27130 + C27131 + C27132 + C27133) * C26394 +
           (C27134 + C27135 + C27136 + C27137 + C27138 + C27139) * C49057 +
           (C440 * C26391 + C441 * C47925 + C442 * C48905 + C443 * C47915 +
            (C113 * C409 + C49007 * C417) * C48897 +
            (C113 * C399 + C49007 * C410) * C47919) *
               C49050) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C47919 +
            (C113 * C954 + C49007 * C963) * C48897 +
            (C113 * C949 + C49007 * C955) * C47915 +
            (C113 * C956 + C49007 * C964) * C48905 +
            (C113 * C950 + C49007 * C957) * C47925 +
            (C113 * C958 + C49007 * C965) * C26391) *
               C49050 +
           ((C113 * C2370 + C49007 * C2376) * C47919 +
            (C113 * C2377 + C49007 * C2388) * C48897 +
            (C113 * C2371 + C49007 * C2378) * C47915 +
            (C113 * C2379 + C49007 * C2389) * C48905 +
            (C113 * C2372 + C49007 * C2380) * C47925 +
            (C113 * C2381 + C49007 * C2390) * C26391) *
               C49057 +
           ((C113 * C2373 + C49007 * C2382) * C47919 +
            (C113 * C2383 + C49007 * C2391) * C48897 +
            (C113 * C2374 + C49007 * C2384) * C47915 +
            (C113 * C2385 + C49007 * C2392) * C48905 +
            (C113 * C2375 + C49007 * C2386) * C47925 +
            (C113 * C2387 + C49007 * C2393) * C26391) *
               C26394) *
              C947) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C23627 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C23621 +
            (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
               C49050 +
           ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
            C6455 * C23628 + C6456 * C48902) *
               C49057 +
           (C13218 * C23627 + C13219 * C23621 + C12656 * C23628 +
            C12657 * C48902) *
               C26394) *
              C48978 * C48961 * C110 -
          (((C6481 + C6482) * C48902 + (C6483 + C6484) * C23628 +
            C12666 * C23621 + C12667 * C23627) *
               C26394 +
           (C6473 * C48902 + C6474 * C23628 + C6475 * C23621 + C6476 * C23627) *
               C49057 +
           ((C5044 + C5043) * C48902 + (C5042 + C5041) * C23628 +
            (C5040 + C5039) * C23621 + (C5038 + C5037) * C23627) *
               C49050) *
              C48978 * C48961 * C111 +
          ((C5053 * C23627 + C5054 * C23621 + C5055 * C23628 + C5056 * C48902) *
               C49050 +
           (C6251 * C23627 + C6252 * C23621 + (C5214 + C5213) * C23628 +
            (C5212 + C5211) * C48902) *
               C49057 +
           ((C6484 + C6483) * C23627 + (C6482 + C6481) * C23621 +
            (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                C23628 +
            (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                C48902) *
               C26394) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            (C13218 * C23627 + C13219 * C23621 + C12656 * C23628 +
             C12657 * C48902) *
                C26394) *
               C48978 * C259 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C23628 +
             (C13232 + C13233) * C23621 + (C13234 + C13235) * C23627) *
                C26394 +
            (C12666 * C48902 + C12667 * C23628 + (C7055 + C7056) * C23621 +
             (C7057 + C7058) * C23627) *
                C49057 +
            (C6475 * C48902 + C6476 * C23628 + (C6480 + C6479) * C23621 +
             (C6478 + C6477) * C23627) *
                C49050) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C23627 + C6456 * C23621 + C6251 * C23628 +
             C6252 * C48902) *
                C49050 +
            (C12656 * C23627 + C12657 * C23621 + (C6484 + C6483) * C23628 +
             (C6482 + C6481) * C48902) *
                C49057 +
            ((C12671 + C12670) * C23627 + (C12669 + C12668) * C23621 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C23628 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C26394) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C23628 +
             C12666 * C23621 + C12667 * C23627) *
                C26394 +
            (C6473 * C48902 + C6474 * C23628 + C6475 * C23621 +
             C6476 * C23627) *
                C49057 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C23628 +
             (C5040 + C5039) * C23621 + (C5038 + C5037) * C23627) *
                C49050) *
               C48978 * C259) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            (C13218 * C23627 + C13219 * C23621 + C12656 * C23628 +
             C12657 * C48902) *
                C26394) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C23628 +
             (C13441 + C13442) * C23621 + (C13443 + C13444) * C23627) *
                C26394 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C23628 +
             (C7261 + C7262) * C23621 + (C7263 + C7264) * C23627) *
                C49057 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C23628 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C23621 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C23627) *
                C49050) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C23627 + (C5386 + C5385) * C23621 +
             (C5384 + C5383) * C23628 + (C5382 + C5381) * C48902) *
                C49050 +
            ((C6706 + C6705) * C23627 + (C6704 + C6703) * C23621 +
             (C6702 + C6701) * C23628 + (C6700 + C6699) * C48902) *
                C49057 +
            ((C12877 + C12876) * C23627 + (C12875 + C12874) * C23621 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C23628 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C26394) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C23628 +
             C12666 * C23621 + C12667 * C23627) *
                C26394 +
            (C6473 * C48902 + C6474 * C23628 + C6475 * C23621 +
             C6476 * C23627) *
                C49057 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C23628 +
             (C5040 + C5039) * C23621 + (C5038 + C5037) * C23627) *
                C49050) *
               C393) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            (C13218 * C23627 + C13219 * C23621 + C12656 * C23628 +
             C12657 * C48902) *
                C26394) *
               C48978 * C525 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C23628 +
             (C13232 + C13233) * C23621 + (C13234 + C13235) * C23627) *
                C26394 +
            (C12666 * C48902 + C12667 * C23628 + (C7055 + C7056) * C23621 +
             (C7057 + C7058) * C23627) *
                C49057 +
            (C6475 * C48902 + C6476 * C23628 + (C6480 + C6479) * C23621 +
             (C6478 + C6477) * C23627) *
                C49050) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C23627 + C6456 * C23621 + C6251 * C23628 +
             C6252 * C48902) *
                C49050 +
            (C12656 * C23627 + C12657 * C23621 + (C6484 + C6483) * C23628 +
             (C6482 + C6481) * C48902) *
                C49057 +
            ((C12671 + C12670) * C23627 + (C12669 + C12668) * C23621 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C23628 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C26394) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C23628 +
             C12666 * C23621 + C12667 * C23627) *
                C26394 +
            (C6473 * C48902 + C6474 * C23628 + C6475 * C23621 +
             C6476 * C23627) *
                C49057 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C23628 +
             (C5040 + C5039) * C23621 + (C5038 + C5037) * C23627) *
                C49050) *
               C48978 * C525) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C23627 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C23621 +
            (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
               C49050 +
           ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
            C6455 * C23628 + C6456 * C48902) *
               C49057 +
           C30024 * C26394) *
              C48978 * C591 -
          (((C12668 + C12669) * C48902 + (C12670 + C12671) * C23628 +
            (C13232 + C13233) * C23621 + (C13234 + C13235) * C23627) *
               C26394 +
           (C12666 * C48902 + C12667 * C23628 + (C7055 + C7056) * C23621 +
            (C7057 + C7058) * C23627) *
               C49057 +
           (C6475 * C48902 + C6476 * C23628 + (C6480 + C6479) * C23621 +
            (C6478 + C6477) * C23627) *
               C49050) *
              C48978 * C592 +
          (C30024 * C49050 +
           (C14567 * C23627 + C14568 * C23621 + (C12671 + C12670) * C23628 +
            (C12669 + C12668) * C48902) *
               C49057 +
           ((C14583 + C14582) * C23627 + (C14581 + C14580) * C23621 +
            (C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                C23628 +
            (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                C48902) *
               C26394) *
              C48978 * C593) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            C30024 * C26394) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C23628 +
             (C13441 + C13442) * C23621 + (C13443 + C13444) * C23627) *
                C26394 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C23628 +
             (C7261 + C7262) * C23621 + (C7263 + C7264) * C23627) *
                C49057 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C23628 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C23621 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C23627) *
                C49050) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C23627 + (C7262 + C7261) * C23621 +
             (C6706 + C6705) * C23628 + (C6704 + C6703) * C48902) *
                C49050 +
            ((C13444 + C13443) * C23627 + (C13442 + C13441) * C23621 +
             (C12877 + C12876) * C23628 + (C12875 + C12874) * C48902) *
                C49057 +
            ((C14726 + C14725) * C23627 + (C14724 + C14723) * C23621 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C26394) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C23628 +
             (C13232 + C13233) * C23621 + (C13234 + C13235) * C23627) *
                C26394 +
            (C12666 * C48902 + C12667 * C23628 + (C7055 + C7056) * C23621 +
             (C7057 + C7058) * C23627) *
                C49057 +
            (C6475 * C48902 + C6476 * C23628 + (C6480 + C6479) * C23621 +
             (C6478 + C6477) * C23627) *
                C49050) *
               C393) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            C30024 * C26394) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C23628 +
             (C13441 + C13442) * C23621 + (C13443 + C13444) * C23627) *
                C26394 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C23628 +
             (C7261 + C7262) * C23621 + (C7263 + C7264) * C23627) *
                C49057 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C23628 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C23621 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C23627) *
                C49050) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C23627 + (C5386 + C5385) * C23621 +
             (C5384 + C5383) * C23628 + (C5382 + C5381) * C48902) *
                C49050 +
            ((C6706 + C6705) * C23627 + (C6704 + C6703) * C23621 +
             (C6702 + C6701) * C23628 + (C6700 + C6699) * C48902) *
                C49057 +
            ((C12877 + C12876) * C23627 + (C12875 + C12874) * C23621 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C23628 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C26394) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C23628 +
             C12666 * C23621 + C12667 * C23627) *
                C26394 +
            (C6473 * C48902 + C6474 * C23628 + C6475 * C23621 +
             C6476 * C23627) *
                C49057 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C23628 +
             (C5040 + C5039) * C23621 + (C5038 + C5037) * C23627) *
                C49050) *
               C799) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C23627 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C23621 +
             (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
                C49050 +
            ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
             C6455 * C23628 + C6456 * C48902) *
                C49057 +
            C30024 * C26394) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C23628 +
             (C13441 + C13442) * C23621 + (C13443 + C13444) * C23627) *
                C26394 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C23628 +
             (C7261 + C7262) * C23621 + (C7263 + C7264) * C23627) *
                C49057 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C23628 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C23621 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C23627) *
                C49050) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C23627 + (C7262 + C7261) * C23621 +
             (C6706 + C6705) * C23628 + (C6704 + C6703) * C48902) *
                C49050 +
            ((C13444 + C13443) * C23627 + (C13442 + C13441) * C23621 +
             (C12877 + C12876) * C23628 + (C12875 + C12874) * C48902) *
                C49057 +
            ((C14726 + C14725) * C23627 + (C14724 + C14723) * C23621 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C26394) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C23628 +
             (C13232 + C13233) * C23621 + (C13234 + C13235) * C23627) *
                C26394 +
            (C12666 * C48902 + C12667 * C23628 + (C7055 + C7056) * C23621 +
             (C7057 + C7058) * C23627) *
                C49057 +
            (C6475 * C48902 + C6476 * C23628 + (C6480 + C6479) * C23621 +
             (C6478 + C6477) * C23627) *
                C49050) *
               C799) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C23627 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C23621 +
            (C5037 + C5038) * C23628 + (C5039 + C5040) * C48902) *
               C49050 +
           ((C6477 + C6478) * C23627 + (C6479 + C6480) * C23621 +
            C6455 * C23628 + C6456 * C48902) *
               C49057 +
           C30024 * C26394) *
              C945 -
          (((C12874 + C12875) * C48902 + (C12876 + C12877) * C23628 +
            (C13441 + C13442) * C23621 + (C13443 + C13444) * C23627) *
               C26394 +
           ((C6703 + C6704) * C48902 + (C6705 + C6706) * C23628 +
            (C7261 + C7262) * C23621 + (C7263 + C7264) * C23627) *
               C49057 +
           ((C5385 + C5386) * C48902 + (C5387 + C5388) * C23628 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C23621 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C23627) *
               C49050) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C23627 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C23621 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C23628 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C48902) *
               C49050 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C23627 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C23621 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C23628 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C48902) *
               C49057 +
           ((C5002 * C2373 + C49252 * C2382 + C5003 * C10296 +
             C49094 * C10299) *
                C23627 +
            (C5002 * C2383 + C49252 * C2391 + C5003 * C10298 +
             C49094 * C10302) *
                C23621 +
            (C5002 * C2374 + C49252 * C2384 + C5003 * C10297 +
             C49094 * C10300) *
                C23628 +
            (C5002 * C2385 + C49252 * C2392 + C5003 * C10301 +
             C49094 * C10303) *
                C48902) *
               C26394) *
              C947) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C23627 +
            (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
            C169 * C48902) *
               C49326 +
           (C1304 * C23627 + C1305 * C23621 + C311 * C23628 + C310 * C48902) *
               C49322 +
           (C1306 * C23627 + C1307 * C23621 + C1100 * C23628 + C1101 * C48902) *
               C49312 +
           (C1781 * C23627 + C1780 * C23621 + C1311 * C23628 + C1310 * C48902) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C1308 * C48902 + C1309 * C23628 + C1310 * C23621 + C1311 * C23627) *
               C49294 +
           (C1103 * C48902 + C1102 * C23628 + C1101 * C23621 + C1100 * C23627) *
               C49312 +
           (C308 * C48902 + C309 * C23628 + C310 * C23621 + C311 * C23627) *
               C49322 +
           (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
               C49326) *
              C48978 * C48961 * C111 +
          ((C170 * C23627 + C171 * C23621 + C172 * C23628 + C173 * C48902) *
               C49326 +
           (C309 * C23627 + C308 * C23621 + C307 * C23628 + C306 * C48902) *
               C49322 +
           (C1102 * C23627 + C1103 * C23621 + C1105 * C23628 + C1104 * C48902) *
               C49312 +
           (C1309 * C23627 + C1308 * C23621 +
            (C113 * C1254 + C49007 * C1261) * C23628 +
            (C113 * C1262 + C49007 * C1266) * C48902) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C22511 +
            (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
            C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
            C173 * C49288) *
               C22509 +
           (C1304 * C22511 + C1305 * C49325 + C311 * C22512 + C310 * C49318 +
            C309 * C22513 + C308 * C49305 + C307 * C22514 + C306 * C49288) *
               C49054) *
              C48978 * C48961 * C110 -
          ((C304 * C49288 + C305 * C22514 + C306 * C49305 + C307 * C22513 +
            C308 * C49318 + C309 * C22512 + C310 * C49325 + C311 * C22511) *
               C49054 +
           (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
            C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C170 * C22511 + C171 * C49325 + C172 * C22512 + C173 * C49318 +
            C174 * C22513 + C175 * C49305 + C177 * C22514 + C176 * C49288) *
               C22509 +
           (C309 * C22511 + C308 * C49325 + C307 * C22512 + C306 * C49318 +
            C305 * C22513 + C304 * C49305 +
            (C113 * C268 + C49007 * C279) * C22514 +
            (C113 * C280 + C49007 * C286) * C49288) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C23627 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C23621 +
            (C2547 + C2548 + C2549) * C23628 +
            (C2550 + C2551 + C2552) * C48902) *
               C22509 +
           ((C10133 + C10134 + C10135) * C23627 +
            (C10136 + C10137 + C10138) * C23621 +
            (C2754 + C2753 + C2752) * C23628 +
            (C2751 + C2750 + C2749) * C48902) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C2743 + C2744 + C2745) * C48902 +
            (C2746 + C2747 + C2748) * C23628 +
            (C2749 + C2750 + C2751) * C23621 +
            (C2752 + C2753 + C2754) * C23627) *
               C49054 +
           ((C2558 + C2557 + C2556) * C48902 +
            (C2555 + C2554 + C2553) * C23628 +
            (C2552 + C2551 + C2550) * C23621 +
            (C2549 + C2548 + C2547) * C23627) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C2567 * C23627 + C2568 * C23621 + (C2564 + C2563 + C2562) * C23628 +
            (C2561 + C2560 + C2559) * C48902) *
               C22509 +
           ((C2748 + C2747 + C2746) * C23627 +
            (C2745 + C2744 + C2743) * C23621 +
            (C2507 * C264 + C49320 * C272 + C2508 * C700 + C49309 * C708 +
             C2509 * C2714 + C49287 * C2715) *
                C23628 +
            (C2507 * C271 + C49320 * C282 + C2508 * C709 + C49309 * C715 +
             C2509 * C2716 + C49287 * C2717) *
                C48902) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C48978 * C259 -
           ((C9243 * C48902 + C9242 * C23628 + C9241 * C23621 +
             C9240 * C23627) *
                C49294 +
            (C23771 + C23770 + C23769 + C23768) * C49312 +
            (C23767 + C23766 + C23765 + C23764) * C49322 +
            (C23763 + C23762 + C23761 + C23760) * C49326) *
               C48978 * C49279) *
              C261 +
          (((C23772 + C23773 + C23774 + C23775) * C49326 +
            (C23776 + C23777 + C23778 + C23779) * C49322 +
            (C23780 + C23781 + C23782 + C23783) * C49312 +
            (C9242 * C23627 + C9243 * C23621 +
             (C113 * C1759 + C49007 * C1764) * C23628 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C48978 * C259 -
           ((C1104 * C49288 + C1105 * C22514 + C1103 * C49305 + C1102 * C22513 +
             C1101 * C49318 + C1100 * C22512 + C1307 * C49325 +
             C1306 * C22511) *
                C49054 +
            (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 + C22647 +
             C22646) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C22654 + C22655 + C22656 + C22657 + C22658 + C22659 + C22660 +
             C22661) *
                C22509 +
            (C1100 * C22511 + C1101 * C49325 + C1102 * C22512 + C1103 * C49318 +
             C1105 * C22513 + C1104 * C49305 +
             (C113 * C599 + C49007 * C608) * C22514 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C23627 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C23621 +
             (C2547 + C2548 + C2549) * C23628 +
             (C2550 + C2551 + C2552) * C48902) *
                C22509 +
            ((C10133 + C10134 + C10135) * C23627 +
             (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
             C24997 * C48902) *
                C49054) *
               C48978 * C259 -
           (((C10150 + C10149 + C10148) * C48902 +
             (C10147 + C10146 + C10145) * C23628 +
             (C10144 + C10143 + C10142) * C23621 +
             (C10141 + C10140 + C10139) * C23627) *
                C49054 +
            (C24998 * C48902 + C24999 * C23628 +
             (C10138 + C10137 + C10136) * C23621 +
             (C10135 + C10134 + C10133) * C23627) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C24996 * C23627 + C24997 * C23621 +
             (C2748 + C2747 + C2746) * C23628 +
             (C2745 + C2744 + C2743) * C48902) *
                C22509 +
            ((C10145 + C10146 + C10147) * C23627 +
             (C10148 + C10149 + C10150) * C23621 +
             (C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
              C2509 * C2375 + C49287 * C2386) *
                 C23628 +
             (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
              C2509 * C2387 + C49287 * C2393) *
                 C48902) *
                C49054) *
               C48978 * C49279 -
           (((C2743 + C2744 + C2745) * C48902 +
             (C2746 + C2747 + C2748) * C23628 + C24998 * C23621 +
             C24999 * C23627) *
                C49054 +
            ((C2558 + C2557 + C2556) * C48902 +
             (C2555 + C2554 + C2553) * C23628 +
             (C2552 + C2551 + C2550) * C23621 +
             (C2549 + C2548 + C2547) * C23627) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C393 -
           ((C11576 * C48902 + C11577 * C23628 + C9597 * C23621 +
             C9598 * C23627) *
                C49294 +
            (C1496 * C48902 + C1497 * C23628 + C1961 * C23621 +
             C1962 * C23627) *
                C49312 +
            (C1500 * C48902 + C1501 * C23628 + C1963 * C23621 +
             C1964 * C23627) *
                C49322 +
            (C442 * C48902 + C443 * C23628 +
             (C113 * C409 + C49007 * C417) * C23621 +
             (C113 * C399 + C49007 * C410) * C23627) *
                C49326) *
               C49281) *
              C48961 * C261 +
          (((C443 * C23627 + C442 * C23621 + C441 * C23628 + C440 * C48902) *
                C49326 +
            (C1501 * C23627 + C1500 * C23621 + C1499 * C23628 +
             C1498 * C48902) *
                C49322 +
            (C1497 * C23627 + C1496 * C23621 + C1495 * C23628 +
             C1494 * C48902) *
                C49312 +
            (C11577 * C23627 + C11576 * C23621 +
             (C113 * C1934 + C49007 * C1939) * C23628 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C393 -
           ((C4169 * C49288 + C4170 * C22514 + C1498 * C49305 + C1499 * C22513 +
             C1500 * C49318 + C1501 * C22512 + C1963 * C49325 +
             C1964 * C22511) *
                C49054 +
            (C438 * C49288 + C439 * C22514 + C440 * C49305 + C441 * C22513 +
             C442 * C49318 + C443 * C22512 +
             (C113 * C409 + C49007 * C417) * C49325 +
             (C113 * C399 + C49007 * C410) * C22511) *
                C22509) *
               C49281) *
              C48961 * C261 +
          (((C443 * C22511 + C442 * C49325 + C441 * C22512 + C440 * C49318 +
             C439 * C22513 + C438 * C49305 + C437 * C22514 + C436 * C49288) *
                C22509 +
            (C1501 * C22511 + C1500 * C49325 + C1499 * C22512 + C1498 * C49318 +
             C4170 * C22513 + C4169 * C49305 +
             (C113 * C701 + C49007 * C710) * C22514 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C23627 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C23621 +
             (C2547 + C2548 + C2549) * C23628 +
             (C2550 + C2551 + C2552) * C48902) *
                C22509 +
            ((C10133 + C10134 + C10135) * C23627 +
             (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
             C24997 * C48902) *
                C49054) *
               C393 -
           (((C25206 + C25207 + C25208) * C48902 +
             (C25209 + C25210 + C25211) * C23628 +
             (C10766 + C10767 + C10768) * C23621 +
             (C10769 + C10770 + C10771) * C23627) *
                C49054 +
            ((C2947 + C2948 + C2949) * C48902 +
             (C2950 + C2951 + C2952) * C23628 +
             (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C23621 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C23627) *
                C22509) *
               C49281) *
              C48961 * C261 +
          ((((C2952 + C2951 + C2950) * C23627 +
             (C2949 + C2948 + C2947) * C23621 +
             (C2946 + C2945 + C2944) * C23628 +
             (C2943 + C2942 + C2941) * C48902) *
                C22509 +
            ((C25211 + C25210 + C25209) * C23627 +
             (C25208 + C25207 + C25206) * C23621 +
             (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
              C2509 * C3356 + C49287 * C3361) *
                 C23628 +
             (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
              C2509 * C3362 + C49287 * C3365) *
                 C48902) *
                C49054) *
               C49281 -
           (((C2743 + C2744 + C2745) * C48902 +
             (C2746 + C2747 + C2748) * C23628 + C24998 * C23621 +
             C24999 * C23627) *
                C49054 +
            ((C2558 + C2557 + C2556) * C48902 +
             (C2555 + C2554 + C2553) * C23628 +
             (C2552 + C2551 + C2550) * C23621 +
             (C2549 + C2548 + C2547) * C23627) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C48978 * C525 -
           ((C9243 * C48902 + C9242 * C23628 + C9241 * C23621 +
             C9240 * C23627) *
                C49294 +
            (C23771 + C23770 + C23769 + C23768) * C49312 +
            (C23767 + C23766 + C23765 + C23764) * C49322 +
            (C23763 + C23762 + C23761 + C23760) * C49326) *
               C48978 * C49279) *
              C527 +
          (((C23772 + C23773 + C23774 + C23775) * C49326 +
            (C23776 + C23777 + C23778 + C23779) * C49322 +
            (C23780 + C23781 + C23782 + C23783) * C49312 +
            (C9242 * C23627 + C9243 * C23621 +
             (C113 * C1759 + C49007 * C1764) * C23628 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C48978 * C525 -
           ((C1104 * C49288 + C1105 * C22514 + C1103 * C49305 + C1102 * C22513 +
             C1101 * C49318 + C1100 * C22512 + C1307 * C49325 +
             C1306 * C22511) *
                C49054 +
            (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 + C22647 +
             C22646) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C22654 + C22655 + C22656 + C22657 + C22658 + C22659 + C22660 +
             C22661) *
                C22509 +
            (C1100 * C22511 + C1101 * C49325 + C1102 * C22512 + C1103 * C49318 +
             C1105 * C22513 + C1104 * C49305 +
             (C113 * C599 + C49007 * C608) * C22514 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C23627 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C23621 +
             (C2547 + C2548 + C2549) * C23628 +
             (C2550 + C2551 + C2552) * C48902) *
                C22509 +
            ((C10133 + C10134 + C10135) * C23627 +
             (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
             C24997 * C48902) *
                C49054) *
               C48978 * C525 -
           (((C10150 + C10149 + C10148) * C48902 +
             (C10147 + C10146 + C10145) * C23628 +
             (C10144 + C10143 + C10142) * C23621 +
             (C10141 + C10140 + C10139) * C23627) *
                C49054 +
            (C24998 * C48902 + C24999 * C23628 +
             (C10138 + C10137 + C10136) * C23621 +
             (C10135 + C10134 + C10133) * C23627) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C24996 * C23627 + C24997 * C23621 +
             (C2748 + C2747 + C2746) * C23628 +
             (C2745 + C2744 + C2743) * C48902) *
                C22509 +
            ((C10145 + C10146 + C10147) * C23627 +
             (C10148 + C10149 + C10150) * C23621 +
             (C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
              C2509 * C2375 + C49287 * C2386) *
                 C23628 +
             (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
              C2509 * C2387 + C49287 * C2393) *
                 C48902) *
                C49054) *
               C48978 * C49279 -
           (((C2743 + C2744 + C2745) * C48902 +
             (C2746 + C2747 + C2748) * C23628 + C24998 * C23621 +
             C24999 * C23627) *
                C49054 +
            ((C2558 + C2557 + C2556) * C48902 +
             (C2555 + C2554 + C2553) * C23628 +
             (C2552 + C2551 + C2550) * C23621 +
             (C2549 + C2548 + C2547) * C23627) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C23627 +
                    (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                    C169 * C48902) *
                       C49326 +
                   (C23760 + C23761 + C23762 + C23763) * C49322 +
                   C24150 * C49312 + C24151 * C49294) *
                      C48978 * C591 -
                  ((C24144 + C24145 + C24146 + C24147) * C49294 +
                   (C23771 + C23770 + C23769 + C23768) * C49312 +
                   (C23767 + C23766 + C23765 + C23764) * C49322 +
                   (C23763 + C23762 + C23761 + C23760) * C49326) *
                      C48978 * C592 +
                  (C24150 * C49326 + C24151 * C49322 +
                   (C24147 + C24146 + C24145 + C24144) * C49312 +
                   (C9494 * C23627 + C9493 * C23621 +
                    (C113 * C9212 + C49007 * C9215) * C23628 +
                    (C113 * C9216 + C49007 * C9218) * C48902) *
                       C49294) *
                      C48978 * C593) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C22511 +
                    (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                    C169 * C49318 + C170 * C22513 + C171 * C49305 +
                    C172 * C22514 + C173 * C49288) *
                       C22509 +
                   (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                    C22652 + C22653) *
                       C49054) *
                      C48978 * C591 -
                  ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                    C23026 + C23027) *
                       C49054 +
                   (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                    C22647 + C22646) *
                       C22509) *
                      C48978 * C592 +
                  ((C23027 + C23026 + C23025 + C23024 + C23023 + C23022 +
                    C23021 + C23020) *
                       C22509 +
                   (C1781 * C22511 + C1780 * C49325 + C1311 * C22512 +
                    C1310 * C49318 + C1309 * C22513 + C1308 * C49305 +
                    (C113 * C1254 + C49007 * C1261) * C22514 +
                    (C113 * C1262 + C49007 * C1266) * C49288) *
                       C49054) *
                      C48978 * C593) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C2507 * C119 + C49320 * C126 + C2508 * C399 +
                     C49309 * C410 + C2509 * C948 + C49287 * C953) *
                        C23627 +
                    (C2507 * C127 + C49320 * C140 + C2508 * C409 +
                     C49309 * C417 + C2509 * C954 + C49287 * C963) *
                        C23621 +
                    (C2547 + C2548 + C2549) * C23628 +
                    (C2550 + C2551 + C2552) * C48902) *
                       C22509 +
                   ((C10133 + C10134 + C10135) * C23627 +
                    (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
                    C24997 * C48902) *
                       C49054) *
                      C48978 * C591 -
                  (((C10150 + C10149 + C10148) * C48902 +
                    (C10147 + C10146 + C10145) * C23628 +
                    (C10144 + C10143 + C10142) * C23621 +
                    (C10141 + C10140 + C10139) * C23627) *
                       C49054 +
                   (C24998 * C48902 + C24999 * C23628 +
                    (C10138 + C10137 + C10136) * C23621 +
                    (C10135 + C10134 + C10133) * C23627) *
                       C22509) *
                      C48978 * C592 +
                  ((C10575 * C23627 + C10576 * C23621 +
                    (C10145 + C10146 + C10147) * C23628 +
                    (C10148 + C10149 + C10150) * C48902) *
                       C22509 +
                   ((C10582 + C10581 + C10580) * C23627 +
                    (C10579 + C10578 + C10577) * C23621 +
                    (C2507 * C1252 + C49320 * C1258 + C2508 * C1933 +
                     C49309 * C1937 + C2509 * C10092 + C49287 * C10093) *
                        C23628 +
                    (C2507 * C1257 + C49320 * C1264 + C2508 * C1938 +
                     C49309 * C1942 + C2509 * C10094 + C49287 * C10095) *
                        C48902) *
                       C49054) *
                      C48978 * C593) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C23627 +
                     (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                     C169 * C48902) *
                        C49326 +
                    (C23760 + C23761 + C23762 + C23763) * C49322 +
                    C24150 * C49312 + C24151 * C49294) *
                       C393 -
                   ((C24282 + C24283 + C24284 + C24285) * C49294 +
                    (C24286 + C24287 + C24288 + C24289) * C49312 +
                    (C24290 + C24291 + C24292 + C24293) * C49322 +
                    (C442 * C48902 + C443 * C23628 +
                     (C113 * C409 + C49007 * C417) * C23621 +
                     (C113 * C399 + C49007 * C410) * C23627) *
                        C49326) *
                       C49281) *
                      C525 +
                  (((C24293 + C24292 + C24291 + C24290) * C49326 +
                    (C24289 + C24288 + C24287 + C24286) * C49322 +
                    (C24285 + C24284 + C24283 + C24282) * C49312 +
                    (C9596 * C23627 + C9595 * C23621 +
                     (C113 * C9330 + C49007 * C9333) * C23628 +
                     (C113 * C9334 + C49007 * C9336) * C48902) *
                        C49294) *
                       C49281 -
                   ((C24144 + C24145 + C24146 + C24147) * C49294 +
                    (C23771 + C23770 + C23769 + C23768) * C49312 +
                    (C23767 + C23766 + C23765 + C23764) * C49322 +
                    (C23763 + C23762 + C23761 + C23760) * C49326) *
                       C393) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C22511 +
                     (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                     C169 * C49318 + C170 * C22513 + C171 * C49305 +
                     C172 * C22514 + C173 * C49288) *
                        C22509 +
                    (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                     C22652 + C22653) *
                        C49054) *
                       C393 -
                   ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                     C23164 + C23165) *
                        C49054 +
                    (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                     C441 * C22513 + C442 * C49318 + C443 * C22512 +
                     (C113 * C409 + C49007 * C417) * C49325 +
                     (C113 * C399 + C49007 * C410) * C22511) *
                        C22509) *
                       C49281) *
                      C525 +
                  (((C23165 + C23164 + C23163 + C23162 + C23161 + C23160 +
                     C23159 + C23158) *
                        C22509 +
                    (C1962 * C22511 + C1961 * C49325 + C1497 * C22512 +
                     C1496 * C49318 + C1495 * C22513 + C1494 * C49305 +
                     (C113 * C1464 + C49007 * C1471) * C22514 +
                     (C113 * C1472 + C49007 * C1476) * C49288) *
                        C49054) *
                       C49281 -
                   ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                     C23026 + C23027) *
                        C49054 +
                    (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                     C22647 + C22646) *
                        C22509) *
                       C393) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2507 * C119 + C49320 * C126 + C2508 * C399 +
                      C49309 * C410 + C2509 * C948 + C49287 * C953) *
                         C23627 +
                     (C2507 * C127 + C49320 * C140 + C2508 * C409 +
                      C49309 * C417 + C2509 * C954 + C49287 * C963) *
                         C23621 +
                     (C2547 + C2548 + C2549) * C23628 +
                     (C2550 + C2551 + C2552) * C48902) *
                        C22509 +
                    ((C10133 + C10134 + C10135) * C23627 +
                     (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
                     C24997 * C48902) *
                        C49054) *
                       C393 -
                   (((C25206 + C25207 + C25208) * C48902 +
                     (C25209 + C25210 + C25211) * C23628 +
                     (C10766 + C10767 + C10768) * C23621 +
                     (C10769 + C10770 + C10771) * C23627) *
                        C49054 +
                    ((C2947 + C2948 + C2949) * C48902 +
                     (C2950 + C2951 + C2952) * C23628 +
                     (C2509 * C2908 + C49287 * C2914 + C2508 * C954 +
                      C49309 * C963 + C2507 * C409 + C49320 * C417) *
                         C23621 +
                     (C2509 * C2902 + C49287 * C2909 + C2508 * C948 +
                      C49309 * C953 + C2507 * C399 + C49320 * C410) *
                         C23627) *
                        C22509) *
                       C49281) *
                      C525 +
                  ((((C10771 + C10770 + C10769) * C23627 +
                     (C10768 + C10767 + C10766) * C23621 +
                     (C25211 + C25210 + C25209) * C23628 +
                     (C25208 + C25207 + C25206) * C48902) *
                        C22509 +
                    ((C10765 + C10764 + C10763) * C23627 +
                     (C10762 + C10761 + C10760) * C23621 +
                     (C2507 * C1462 + C49320 * C1468 + C2508 * C2374 +
                      C49309 * C2384 + C2509 * C10297 + C49287 * C10300) *
                         C23628 +
                     (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 +
                      C49309 * C2392 + C2509 * C10301 + C49287 * C10303) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C10150 + C10149 + C10148) * C48902 +
                     (C10147 + C10146 + C10145) * C23628 +
                     (C10144 + C10143 + C10142) * C23621 +
                     (C10141 + C10140 + C10139) * C23627) *
                        C49054 +
                    (C24998 * C48902 + C24999 * C23628 +
                     (C10138 + C10137 + C10136) * C23621 +
                     (C10135 + C10134 + C10133) * C23627) *
                        C22509) *
                       C393) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 + C24150 * C49312 +
            C24151 * C49294) *
               C799 -
           ((C24282 + C24283 + C24284 + C24285) * C49294 +
            (C24286 + C24287 + C24288 + C24289) * C49312 +
            (C24290 + C24291 + C24292 + C24293) * C49322 +
            (C442 * C48902 + C443 * C23628 +
             (C113 * C409 + C49007 * C417) * C23621 +
             (C113 * C399 + C49007 * C410) * C23627) *
                C49326) *
               C49281) *
              C48961 * C527 +
          (((C443 * C23627 + C442 * C23621 + C441 * C23628 + C440 * C48902) *
                C49326 +
            (C1501 * C23627 + C1500 * C23621 + C1499 * C23628 +
             C1498 * C48902) *
                C49322 +
            (C1497 * C23627 + C1496 * C23621 + C1495 * C23628 +
             C1494 * C48902) *
                C49312 +
            (C11577 * C23627 + C11576 * C23621 +
             (C113 * C1934 + C49007 * C1939) * C23628 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C799 -
           ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 + C23164 +
             C23165) *
                C49054 +
            (C438 * C49288 + C439 * C22514 + C440 * C49305 + C441 * C22513 +
             C442 * C49318 + C443 * C22512 +
             (C113 * C409 + C49007 * C417) * C49325 +
             (C113 * C399 + C49007 * C410) * C22511) *
                C22509) *
               C49281) *
              C48961 * C527 +
          (((C443 * C22511 + C442 * C49325 + C441 * C22512 + C440 * C49318 +
             C439 * C22513 + C438 * C49305 + C437 * C22514 + C436 * C49288) *
                C22509 +
            (C1501 * C22511 + C1500 * C49325 + C1499 * C22512 + C1498 * C49318 +
             C4170 * C22513 + C4169 * C49305 +
             (C113 * C701 + C49007 * C710) * C22514 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C23627 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C23621 +
             (C2547 + C2548 + C2549) * C23628 +
             (C2550 + C2551 + C2552) * C48902) *
                C22509 +
            ((C10133 + C10134 + C10135) * C23627 +
             (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
             C24997 * C48902) *
                C49054) *
               C799 -
           (((C25206 + C25207 + C25208) * C48902 +
             (C25209 + C25210 + C25211) * C23628 +
             (C10766 + C10767 + C10768) * C23621 +
             (C10769 + C10770 + C10771) * C23627) *
                C49054 +
            ((C2947 + C2948 + C2949) * C48902 +
             (C2950 + C2951 + C2952) * C23628 +
             (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C23621 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C23627) *
                C22509) *
               C49281) *
              C48961 * C527 +
          ((((C2952 + C2951 + C2950) * C23627 +
             (C2949 + C2948 + C2947) * C23621 +
             (C2946 + C2945 + C2944) * C23628 +
             (C2943 + C2942 + C2941) * C48902) *
                C22509 +
            ((C25211 + C25210 + C25209) * C23627 +
             (C25208 + C25207 + C25206) * C23621 +
             (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
              C2509 * C3356 + C49287 * C3361) *
                 C23628 +
             (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
              C2509 * C3362 + C49287 * C3365) *
                 C48902) *
                C49054) *
               C49281 -
           (((C2743 + C2744 + C2745) * C48902 +
             (C2746 + C2747 + C2748) * C23628 + C24998 * C23621 +
             C24999 * C23627) *
                C49054 +
            ((C2558 + C2557 + C2556) * C48902 +
             (C2555 + C2554 + C2553) * C23628 +
             (C2552 + C2551 + C2550) * C23621 +
             (C2549 + C2548 + C2547) * C23627) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C23627 +
                     (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                     C169 * C48902) *
                        C49326 +
                    (C23760 + C23761 + C23762 + C23763) * C49322 +
                    C24150 * C49312 + C24151 * C49294) *
                       C799 -
                   ((C24282 + C24283 + C24284 + C24285) * C49294 +
                    (C24286 + C24287 + C24288 + C24289) * C49312 +
                    (C24290 + C24291 + C24292 + C24293) * C49322 +
                    (C442 * C48902 + C443 * C23628 +
                     (C113 * C409 + C49007 * C417) * C23621 +
                     (C113 * C399 + C49007 * C410) * C23627) *
                        C49326) *
                       C49281) *
                      C259 +
                  (((C24293 + C24292 + C24291 + C24290) * C49326 +
                    (C24289 + C24288 + C24287 + C24286) * C49322 +
                    (C24285 + C24284 + C24283 + C24282) * C49312 +
                    (C9596 * C23627 + C9595 * C23621 +
                     (C113 * C9330 + C49007 * C9333) * C23628 +
                     (C113 * C9334 + C49007 * C9336) * C48902) *
                        C49294) *
                       C49281 -
                   ((C24144 + C24145 + C24146 + C24147) * C49294 +
                    (C23771 + C23770 + C23769 + C23768) * C49312 +
                    (C23767 + C23766 + C23765 + C23764) * C49322 +
                    (C23763 + C23762 + C23761 + C23760) * C49326) *
                       C799) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C22511 +
                     (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                     C169 * C49318 + C170 * C22513 + C171 * C49305 +
                     C172 * C22514 + C173 * C49288) *
                        C22509 +
                    (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                     C22652 + C22653) *
                        C49054) *
                       C799 -
                   ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                     C23164 + C23165) *
                        C49054 +
                    (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                     C441 * C22513 + C442 * C49318 + C443 * C22512 +
                     (C113 * C409 + C49007 * C417) * C49325 +
                     (C113 * C399 + C49007 * C410) * C22511) *
                        C22509) *
                       C49281) *
                      C259 +
                  (((C23165 + C23164 + C23163 + C23162 + C23161 + C23160 +
                     C23159 + C23158) *
                        C22509 +
                    (C1962 * C22511 + C1961 * C49325 + C1497 * C22512 +
                     C1496 * C49318 + C1495 * C22513 + C1494 * C49305 +
                     (C113 * C1464 + C49007 * C1471) * C22514 +
                     (C113 * C1472 + C49007 * C1476) * C49288) *
                        C49054) *
                       C49281 -
                   ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                     C23026 + C23027) *
                        C49054 +
                    (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                     C22647 + C22646) *
                        C22509) *
                       C799) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2507 * C119 + C49320 * C126 + C2508 * C399 +
                      C49309 * C410 + C2509 * C948 + C49287 * C953) *
                         C23627 +
                     (C2507 * C127 + C49320 * C140 + C2508 * C409 +
                      C49309 * C417 + C2509 * C954 + C49287 * C963) *
                         C23621 +
                     (C2547 + C2548 + C2549) * C23628 +
                     (C2550 + C2551 + C2552) * C48902) *
                        C22509 +
                    ((C10133 + C10134 + C10135) * C23627 +
                     (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
                     C24997 * C48902) *
                        C49054) *
                       C799 -
                   (((C25206 + C25207 + C25208) * C48902 +
                     (C25209 + C25210 + C25211) * C23628 +
                     (C10766 + C10767 + C10768) * C23621 +
                     (C10769 + C10770 + C10771) * C23627) *
                        C49054 +
                    ((C2947 + C2948 + C2949) * C48902 +
                     (C2950 + C2951 + C2952) * C23628 +
                     (C2509 * C2908 + C49287 * C2914 + C2508 * C954 +
                      C49309 * C963 + C2507 * C409 + C49320 * C417) *
                         C23621 +
                     (C2509 * C2902 + C49287 * C2909 + C2508 * C948 +
                      C49309 * C953 + C2507 * C399 + C49320 * C410) *
                         C23627) *
                        C22509) *
                       C49281) *
                      C259 +
                  ((((C10771 + C10770 + C10769) * C23627 +
                     (C10768 + C10767 + C10766) * C23621 +
                     (C25211 + C25210 + C25209) * C23628 +
                     (C25208 + C25207 + C25206) * C48902) *
                        C22509 +
                    ((C10765 + C10764 + C10763) * C23627 +
                     (C10762 + C10761 + C10760) * C23621 +
                     (C2507 * C1462 + C49320 * C1468 + C2508 * C2374 +
                      C49309 * C2384 + C2509 * C10297 + C49287 * C10300) *
                         C23628 +
                     (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 +
                      C49309 * C2392 + C2509 * C10301 + C49287 * C10303) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C10150 + C10149 + C10148) * C48902 +
                     (C10147 + C10146 + C10145) * C23628 +
                     (C10144 + C10143 + C10142) * C23621 +
                     (C10141 + C10140 + C10139) * C23627) *
                        C49054 +
                    (C24998 * C48902 + C24999 * C23628 +
                     (C10138 + C10137 + C10136) * C23621 +
                     (C10135 + C10134 + C10133) * C23627) *
                        C22509) *
                       C799) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[26] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C23627 +
                    (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                    C169 * C48902) *
                       C49326 +
                   (C23760 + C23761 + C23762 + C23763) * C49322 +
                   C24150 * C49312 + C24151 * C49294) *
                      C945 -
                  ((C24282 + C24283 + C24284 + C24285) * C49294 +
                   (C24286 + C24287 + C24288 + C24289) * C49312 +
                   (C24290 + C24291 + C24292 + C24293) * C49322 +
                   (C442 * C48902 + C443 * C23628 +
                    (C113 * C409 + C49007 * C417) * C23621 +
                    (C113 * C399 + C49007 * C410) * C23627) *
                       C49326) *
                      C946 +
                  (((C113 * C948 + C49007 * C953) * C23627 +
                    (C113 * C954 + C49007 * C963) * C23621 +
                    (C113 * C949 + C49007 * C955) * C23628 +
                    (C113 * C956 + C49007 * C964) * C48902) *
                       C49326 +
                   ((C113 * C2370 + C49007 * C2376) * C23627 +
                    (C113 * C2377 + C49007 * C2388) * C23621 +
                    (C113 * C2371 + C49007 * C2378) * C23628 +
                    (C113 * C2379 + C49007 * C2389) * C48902) *
                       C49322 +
                   ((C113 * C2373 + C49007 * C2382) * C23627 +
                    (C113 * C2383 + C49007 * C2391) * C23621 +
                    (C113 * C2374 + C49007 * C2384) * C23628 +
                    (C113 * C2385 + C49007 * C2392) * C48902) *
                       C49312 +
                   ((C113 * C9828 + C49007 * C9830) * C23627 +
                    (C113 * C9831 + C49007 * C9834) * C23621 +
                    (C113 * C10092 + C49007 * C10093) * C23628 +
                    (C113 * C10094 + C49007 * C10095) * C48902) *
                       C49294) *
                      C947) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C22511 +
                    (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                    C169 * C49318 + C170 * C22513 + C171 * C49305 +
                    C172 * C22514 + C173 * C49288) *
                       C22509 +
                   (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                    C22652 + C22653) *
                       C49054) *
                      C945 -
                  ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                    C23164 + C23165) *
                       C49054 +
                   (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                    C441 * C22513 + C442 * C49318 + C443 * C22512 +
                    (C113 * C409 + C49007 * C417) * C49325 +
                    (C113 * C399 + C49007 * C410) * C22511) *
                       C22509) *
                      C946 +
                  (((C113 * C948 + C49007 * C953) * C22511 +
                    (C113 * C954 + C49007 * C963) * C49325 +
                    (C113 * C949 + C49007 * C955) * C22512 +
                    (C113 * C956 + C49007 * C964) * C49318 +
                    (C113 * C950 + C49007 * C957) * C22513 +
                    (C113 * C958 + C49007 * C965) * C49305 +
                    (C113 * C951 + C49007 * C959) * C22514 +
                    (C113 * C960 + C49007 * C966) * C49288) *
                       C22509 +
                   ((C113 * C2370 + C49007 * C2376) * C22511 +
                    (C113 * C2377 + C49007 * C2388) * C49325 +
                    (C113 * C2371 + C49007 * C2378) * C22512 +
                    (C113 * C2379 + C49007 * C2389) * C49318 +
                    (C113 * C2372 + C49007 * C2380) * C22513 +
                    (C113 * C2381 + C49007 * C2390) * C49305 +
                    (C113 * C2714 + C49007 * C2715) * C22514 +
                    (C113 * C2716 + C49007 * C2717) * C49288) *
                       C49054) *
                      C947) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C2507 * C119 + C49320 * C126 + C2508 * C399 +
                     C49309 * C410 + C2509 * C948 + C49287 * C953) *
                        C23627 +
                    (C2507 * C127 + C49320 * C140 + C2508 * C409 +
                     C49309 * C417 + C2509 * C954 + C49287 * C963) *
                        C23621 +
                    (C2547 + C2548 + C2549) * C23628 +
                    (C2550 + C2551 + C2552) * C48902) *
                       C22509 +
                   ((C10133 + C10134 + C10135) * C23627 +
                    (C10136 + C10137 + C10138) * C23621 + C24996 * C23628 +
                    C24997 * C48902) *
                       C49054) *
                      C945 -
                  (((C25206 + C25207 + C25208) * C48902 +
                    (C25209 + C25210 + C25211) * C23628 +
                    (C10766 + C10767 + C10768) * C23621 +
                    (C10769 + C10770 + C10771) * C23627) *
                       C49054 +
                   ((C2947 + C2948 + C2949) * C48902 +
                    (C2950 + C2951 + C2952) * C23628 +
                    (C2509 * C2908 + C49287 * C2914 + C2508 * C954 +
                     C49309 * C963 + C2507 * C409 + C49320 * C417) *
                        C23621 +
                    (C2509 * C2902 + C49287 * C2909 + C2508 * C948 +
                     C49309 * C953 + C2507 * C399 + C49320 * C410) *
                        C23627) *
                       C22509) *
                      C946 +
                  (((C2507 * C948 + C49320 * C953 + C2508 * C2902 +
                     C49309 * C2909 + C2509 * C3768 + C49287 * C3771) *
                        C23627 +
                    (C2507 * C954 + C49320 * C963 + C2508 * C2908 +
                     C49309 * C2914 + C2509 * C3772 + C49287 * C3777) *
                        C23621 +
                    (C2507 * C949 + C49320 * C955 + C2508 * C2901 +
                     C49309 * C2907 + C2509 * C3769 + C49287 * C3773) *
                        C23628 +
                    (C2507 * C956 + C49320 * C964 + C2508 * C2906 +
                     C49309 * C2913 + C2509 * C3774 + C49287 * C3778) *
                        C48902) *
                       C22509 +
                   ((C2507 * C2370 + C49320 * C2376 + C2508 * C3354 +
                     C49309 * C3357 + C2509 * C11173 + C49287 * C11175) *
                        C23627 +
                    (C2507 * C2377 + C49320 * C2388 + C2508 * C3358 +
                     C49309 * C3363 + C2509 * C11176 + C49287 * C11179) *
                        C23621 +
                    (C2507 * C2371 + C49320 * C2378 + C2508 * C3355 +
                     C49309 * C3359 + C2509 * C17901 + C49287 * C17902) *
                        C23628 +
                    (C2507 * C2379 + C49320 * C2389 + C2508 * C3360 +
                     C49309 * C3364 + C2509 * C17903 + C49287 * C17904) *
                        C48902) *
                       C49054) *
                      C947) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47919 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48897 +
            (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
            C5053 * C47925 + C5054 * C26391) *
               C22509 +
           ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
            C6455 * C47915 + C6456 * C48905 + C6251 * C47925 + C6252 * C26391) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C5211 + C5212) * C26391 + (C5213 + C5214) * C47925 +
            C6473 * C48905 + C6474 * C47915 + C6475 * C48897 + C6476 * C47919) *
               C49054 +
           ((C5048 + C5047) * C26391 + (C5046 + C5045) * C47925 +
            (C5044 + C5043) * C48905 + (C5042 + C5041) * C47915 +
            (C5040 + C5039) * C48897 + (C5038 + C5037) * C47919) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C5053 * C47919 + C5054 * C48897 + C5055 * C47915 + C5056 * C48905 +
            (C5052 + C5051) * C47925 + (C5050 + C5049) * C26391) *
               C22509 +
           (C6251 * C47919 + C6252 * C48897 + (C5214 + C5213) * C47915 +
            (C5212 + C5211) * C48905 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C47925 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C26391) *
               C49054) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C48978 * C259 -
           (((C6481 + C6482) * C26391 + (C6483 + C6484) * C47925 +
             C12666 * C48905 + C12667 * C47915 + (C7055 + C7056) * C48897 +
             (C7057 + C7058) * C47919) *
                C49054 +
            (C6473 * C26391 + C6474 * C47925 + C6475 * C48905 + C6476 * C47915 +
             (C6480 + C6479) * C48897 + (C6478 + C6477) * C47919) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C47919 + C6456 * C48897 + C6251 * C47915 + C6252 * C48905 +
             (C5214 + C5213) * C47925 + (C5212 + C5211) * C26391) *
                C22509 +
            (C12656 * C47919 + C12657 * C48897 + (C6484 + C6483) * C47915 +
             (C6482 + C6481) * C48905 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C47925 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C26391) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C26391 + (C5213 + C5214) * C47925 +
             C6473 * C48905 + C6474 * C47915 + C6475 * C48897 +
             C6476 * C47919) *
                C49054 +
            ((C5048 + C5047) * C26391 + (C5046 + C5045) * C47925 +
             (C5044 + C5043) * C48905 + (C5042 + C5041) * C47915 +
             (C5040 + C5039) * C48897 + (C5038 + C5037) * C47919) *
                C22509) *
               C48978 * C259) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C26391 + (C6701 + C6702) * C47925 +
             (C6703 + C6704) * C48905 + (C6705 + C6706) * C47915 +
             (C7261 + C7262) * C48897 + (C7263 + C7264) * C47919) *
                C49054 +
            ((C5381 + C5382) * C26391 + (C5383 + C5384) * C47925 +
             (C5385 + C5386) * C48905 + (C5387 + C5388) * C47915 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48897 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47919) *
                C22509) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C47919 + (C5386 + C5385) * C48897 +
             (C5384 + C5383) * C47915 + (C5382 + C5381) * C48905 +
             (C5380 + C5379) * C47925 + (C5378 + C5377) * C26391) *
                C22509 +
            ((C6706 + C6705) * C47919 + (C6704 + C6703) * C48897 +
             (C6702 + C6701) * C47915 + (C6700 + C6699) * C48905 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C47925 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C26391) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C26391 + (C5213 + C5214) * C47925 +
             C6473 * C48905 + C6474 * C47915 + C6475 * C48897 +
             C6476 * C47919) *
                C49054 +
            ((C5048 + C5047) * C26391 + (C5046 + C5045) * C47925 +
             (C5044 + C5043) * C48905 + (C5042 + C5041) * C47915 +
             (C5040 + C5039) * C48897 + (C5038 + C5037) * C47919) *
                C22509) *
               C393) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C48978 * C525 -
           (((C6481 + C6482) * C26391 + (C6483 + C6484) * C47925 +
             C12666 * C48905 + C12667 * C47915 + (C7055 + C7056) * C48897 +
             (C7057 + C7058) * C47919) *
                C49054 +
            (C6473 * C26391 + C6474 * C47925 + C6475 * C48905 + C6476 * C47915 +
             (C6480 + C6479) * C48897 + (C6478 + C6477) * C47919) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C47919 + C6456 * C48897 + C6251 * C47915 + C6252 * C48905 +
             (C5214 + C5213) * C47925 + (C5212 + C5211) * C26391) *
                C22509 +
            (C12656 * C47919 + C12657 * C48897 + (C6484 + C6483) * C47915 +
             (C6482 + C6481) * C48905 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C47925 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C26391) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C26391 + (C5213 + C5214) * C47925 +
             C6473 * C48905 + C6474 * C47915 + C6475 * C48897 +
             C6476 * C47919) *
                C49054 +
            ((C5048 + C5047) * C26391 + (C5046 + C5045) * C47925 +
             (C5044 + C5043) * C48905 + (C5042 + C5041) * C47915 +
             (C5040 + C5039) * C48897 + (C5038 + C5037) * C47919) *
                C22509) *
               C48978 * C525) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47919 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48897 +
            (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
            C5053 * C47925 + C5054 * C26391) *
               C22509 +
           ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
            C6455 * C47915 + C6456 * C48905 + C6251 * C47925 + C6252 * C26391) *
               C49054) *
              C48978 * C591 -
          (((C6481 + C6482) * C26391 + (C6483 + C6484) * C47925 +
            C12666 * C48905 + C12667 * C47915 + (C7055 + C7056) * C48897 +
            (C7057 + C7058) * C47919) *
               C49054 +
           (C6473 * C26391 + C6474 * C47925 + C6475 * C48905 + C6476 * C47915 +
            (C6480 + C6479) * C48897 + (C6478 + C6477) * C47919) *
               C22509) *
              C48978 * C592 +
          ((C13218 * C47919 + C13219 * C48897 + C12656 * C47915 +
            C12657 * C48905 + (C6484 + C6483) * C47925 +
            (C6482 + C6481) * C26391) *
               C22509 +
           (C14567 * C47919 + C14568 * C48897 + (C12671 + C12670) * C47915 +
            (C12669 + C12668) * C48905 +
            (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                C47925 +
            (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                C26391) *
               C49054) *
              C48978 * C593) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C26391 + (C6701 + C6702) * C47925 +
             (C6703 + C6704) * C48905 + (C6705 + C6706) * C47915 +
             (C7261 + C7262) * C48897 + (C7263 + C7264) * C47919) *
                C49054 +
            ((C5381 + C5382) * C26391 + (C5383 + C5384) * C47925 +
             (C5385 + C5386) * C48905 + (C5387 + C5388) * C47915 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48897 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47919) *
                C22509) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C47919 + (C7262 + C7261) * C48897 +
             (C6706 + C6705) * C47915 + (C6704 + C6703) * C48905 +
             (C6702 + C6701) * C47925 + (C6700 + C6699) * C26391) *
                C22509 +
            ((C13444 + C13443) * C47919 + (C13442 + C13441) * C48897 +
             (C12877 + C12876) * C47915 + (C12875 + C12874) * C48905 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47925 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C26391) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C26391 + (C6483 + C6484) * C47925 +
             C12666 * C48905 + C12667 * C47915 + (C7055 + C7056) * C48897 +
             (C7057 + C7058) * C47919) *
                C49054 +
            (C6473 * C26391 + C6474 * C47925 + C6475 * C48905 + C6476 * C47915 +
             (C6480 + C6479) * C48897 + (C6478 + C6477) * C47919) *
                C22509) *
               C393) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C26391 + (C6701 + C6702) * C47925 +
             (C6703 + C6704) * C48905 + (C6705 + C6706) * C47915 +
             (C7261 + C7262) * C48897 + (C7263 + C7264) * C47919) *
                C49054 +
            ((C5381 + C5382) * C26391 + (C5383 + C5384) * C47925 +
             (C5385 + C5386) * C48905 + (C5387 + C5388) * C47915 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48897 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47919) *
                C22509) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C47919 + (C5386 + C5385) * C48897 +
             (C5384 + C5383) * C47915 + (C5382 + C5381) * C48905 +
             (C5380 + C5379) * C47925 + (C5378 + C5377) * C26391) *
                C22509 +
            ((C6706 + C6705) * C47919 + (C6704 + C6703) * C48897 +
             (C6702 + C6701) * C47915 + (C6700 + C6699) * C48905 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C47925 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C26391) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C26391 + (C5213 + C5214) * C47925 +
             C6473 * C48905 + C6474 * C47915 + C6475 * C48897 +
             C6476 * C47919) *
                C49054 +
            ((C5048 + C5047) * C26391 + (C5046 + C5045) * C47925 +
             (C5044 + C5043) * C48905 + (C5042 + C5041) * C47915 +
             (C5040 + C5039) * C48897 + (C5038 + C5037) * C47919) *
                C22509) *
               C799) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47919 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48897 +
             (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
             C5053 * C47925 + C5054 * C26391) *
                C22509 +
            ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
             C6455 * C47915 + C6456 * C48905 + C6251 * C47925 +
             C6252 * C26391) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C26391 + (C6701 + C6702) * C47925 +
             (C6703 + C6704) * C48905 + (C6705 + C6706) * C47915 +
             (C7261 + C7262) * C48897 + (C7263 + C7264) * C47919) *
                C49054 +
            ((C5381 + C5382) * C26391 + (C5383 + C5384) * C47925 +
             (C5385 + C5386) * C48905 + (C5387 + C5388) * C47915 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48897 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47919) *
                C22509) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C47919 + (C7262 + C7261) * C48897 +
             (C6706 + C6705) * C47915 + (C6704 + C6703) * C48905 +
             (C6702 + C6701) * C47925 + (C6700 + C6699) * C26391) *
                C22509 +
            ((C13444 + C13443) * C47919 + (C13442 + C13441) * C48897 +
             (C12877 + C12876) * C47915 + (C12875 + C12874) * C48905 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47925 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C26391) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C26391 + (C6483 + C6484) * C47925 +
             C12666 * C48905 + C12667 * C47915 + (C7055 + C7056) * C48897 +
             (C7057 + C7058) * C47919) *
                C49054 +
            (C6473 * C26391 + C6474 * C47925 + C6475 * C48905 + C6476 * C47915 +
             (C6480 + C6479) * C48897 + (C6478 + C6477) * C47919) *
                C22509) *
               C799) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47919 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48897 +
            (C5037 + C5038) * C47915 + (C5039 + C5040) * C48905 +
            C5053 * C47925 + C5054 * C26391) *
               C22509 +
           ((C6477 + C6478) * C47919 + (C6479 + C6480) * C48897 +
            C6455 * C47915 + C6456 * C48905 + C6251 * C47925 + C6252 * C26391) *
               C49054) *
              C945 -
          (((C6699 + C6700) * C26391 + (C6701 + C6702) * C47925 +
            (C6703 + C6704) * C48905 + (C6705 + C6706) * C47915 +
            (C7261 + C7262) * C48897 + (C7263 + C7264) * C47919) *
               C49054 +
           ((C5381 + C5382) * C26391 + (C5383 + C5384) * C47925 +
            (C5385 + C5386) * C48905 + (C5387 + C5388) * C47915 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C48897 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C47919) *
               C22509) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C47919 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C48897 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C47915 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C48905 +
            (C5002 * C950 + C49252 * C957 + C5003 * C2900 + C49094 * C2905) *
                C47925 +
            (C5002 * C958 + C49252 * C965 + C5003 * C2904 + C49094 * C2912) *
                C26391) *
               C22509 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C47919 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C48897 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C47915 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C48905 +
            (C5002 * C2372 + C49252 * C2380 + C5003 * C3356 + C49094 * C3361) *
                C47925 +
            (C5002 * C2381 + C49252 * C2390 + C5003 * C3362 + C49094 * C3365) *
                C26391) *
               C49054) *
              C947) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C22511 +
            (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
            C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
            C173 * C49288) *
               C22509 +
           (C1304 * C22511 + C1305 * C49325 + C311 * C22512 + C310 * C49318 +
            C309 * C22513 + C308 * C49305 + C307 * C22514 + C306 * C49288) *
               C49054) *
              C48978 * C48961 * C110 -
          ((C304 * C49288 + C305 * C22514 + C306 * C49305 + C307 * C22513 +
            C308 * C49318 + C309 * C22512 + C310 * C49325 + C311 * C22511) *
               C49054 +
           (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
            C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C170 * C22511 + C171 * C49325 + C172 * C22512 + C173 * C49318 +
            C174 * C22513 + C175 * C49305 + C177 * C22514 + C176 * C49288) *
               C22509 +
           (C309 * C22511 + C308 * C49325 + C307 * C22512 + C306 * C49318 +
            C305 * C22513 + C304 * C49305 +
            (C113 * C268 + C49007 * C279) * C22514 +
            (C113 * C280 + C49007 * C286) * C49288) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C23627 +
            (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
            C169 * C48902) *
               C49326 +
           (C1304 * C23627 + C1305 * C23621 + C311 * C23628 + C310 * C48902) *
               C49322 +
           (C1306 * C23627 + C1307 * C23621 + C1100 * C23628 + C1101 * C48902) *
               C49312 +
           (C1781 * C23627 + C1780 * C23621 + C1311 * C23628 + C1310 * C48902) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C1308 * C48902 + C1309 * C23628 + C1310 * C23621 + C1311 * C23627) *
               C49294 +
           (C1103 * C48902 + C1102 * C23628 + C1101 * C23621 + C1100 * C23627) *
               C49312 +
           (C308 * C48902 + C309 * C23628 + C310 * C23621 + C311 * C23627) *
               C49322 +
           (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
               C49326) *
              C48978 * C48961 * C111 +
          ((C170 * C23627 + C171 * C23621 + C172 * C23628 + C173 * C48902) *
               C49326 +
           (C309 * C23627 + C308 * C23621 + C307 * C23628 + C306 * C48902) *
               C49322 +
           (C1102 * C23627 + C1103 * C23621 + C1105 * C23628 + C1104 * C48902) *
               C49312 +
           (C1309 * C23627 + C1308 * C23621 +
            (C113 * C1254 + C49007 * C1261) * C23628 +
            (C113 * C1262 + C49007 * C1266) * C48902) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C48978 * C259 -
           ((C1104 * C49288 + C1105 * C22514 + C1103 * C49305 + C1102 * C22513 +
             C1101 * C49318 + C1100 * C22512 + C1307 * C49325 +
             C1306 * C22511) *
                C49054 +
            (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 + C22647 +
             C22646) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C22654 + C22655 + C22656 + C22657 + C22658 + C22659 + C22660 +
             C22661) *
                C22509 +
            (C1100 * C22511 + C1101 * C49325 + C1102 * C22512 + C1103 * C49318 +
             C1105 * C22513 + C1104 * C49305 +
             (C113 * C599 + C49007 * C608) * C22514 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C48978 * C259 -
           ((C9243 * C48902 + C9242 * C23628 + C9241 * C23621 +
             C9240 * C23627) *
                C49294 +
            (C23771 + C23770 + C23769 + C23768) * C49312 +
            (C23767 + C23766 + C23765 + C23764) * C49322 +
            (C23763 + C23762 + C23761 + C23760) * C49326) *
               C48978 * C49279) *
              C261 +
          (((C23772 + C23773 + C23774 + C23775) * C49326 +
            (C23776 + C23777 + C23778 + C23779) * C49322 +
            (C23780 + C23781 + C23782 + C23783) * C49312 +
            (C9242 * C23627 + C9243 * C23621 +
             (C113 * C1759 + C49007 * C1764) * C23628 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C393 -
           ((C4169 * C49288 + C4170 * C22514 + C1498 * C49305 + C1499 * C22513 +
             C1500 * C49318 + C1501 * C22512 + C1963 * C49325 +
             C1964 * C22511) *
                C49054 +
            (C438 * C49288 + C439 * C22514 + C440 * C49305 + C441 * C22513 +
             C442 * C49318 + C443 * C22512 +
             (C113 * C409 + C49007 * C417) * C49325 +
             (C113 * C399 + C49007 * C410) * C22511) *
                C22509) *
               C49281) *
              C48961 * C261 +
          (((C443 * C22511 + C442 * C49325 + C441 * C22512 + C440 * C49318 +
             C439 * C22513 + C438 * C49305 + C437 * C22514 + C436 * C49288) *
                C22509 +
            (C1501 * C22511 + C1500 * C49325 + C1499 * C22512 + C1498 * C49318 +
             C4170 * C22513 + C4169 * C49305 +
             (C113 * C701 + C49007 * C710) * C22514 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C393 -
           ((C11576 * C48902 + C11577 * C23628 + C9597 * C23621 +
             C9598 * C23627) *
                C49294 +
            (C1496 * C48902 + C1497 * C23628 + C1961 * C23621 +
             C1962 * C23627) *
                C49312 +
            (C1500 * C48902 + C1501 * C23628 + C1963 * C23621 +
             C1964 * C23627) *
                C49322 +
            (C442 * C48902 + C443 * C23628 +
             (C113 * C409 + C49007 * C417) * C23621 +
             (C113 * C399 + C49007 * C410) * C23627) *
                C49326) *
               C49281) *
              C48961 * C261 +
          (((C443 * C23627 + C442 * C23621 + C441 * C23628 + C440 * C48902) *
                C49326 +
            (C1501 * C23627 + C1500 * C23621 + C1499 * C23628 +
             C1498 * C48902) *
                C49322 +
            (C1497 * C23627 + C1496 * C23621 + C1495 * C23628 +
             C1494 * C48902) *
                C49312 +
            (C11577 * C23627 + C11576 * C23621 +
             (C113 * C1934 + C49007 * C1939) * C23628 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C48978 * C525 -
           ((C1104 * C49288 + C1105 * C22514 + C1103 * C49305 + C1102 * C22513 +
             C1101 * C49318 + C1100 * C22512 + C1307 * C49325 +
             C1306 * C22511) *
                C49054 +
            (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 + C22647 +
             C22646) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C22654 + C22655 + C22656 + C22657 + C22658 + C22659 + C22660 +
             C22661) *
                C22509 +
            (C1100 * C22511 + C1101 * C49325 + C1102 * C22512 + C1103 * C49318 +
             C1105 * C22513 + C1104 * C49305 +
             (C113 * C599 + C49007 * C608) * C22514 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 +
            (C23764 + C23765 + C23766 + C23767) * C49312 +
            (C23768 + C23769 + C23770 + C23771) * C49294) *
               C48978 * C525 -
           ((C9243 * C48902 + C9242 * C23628 + C9241 * C23621 +
             C9240 * C23627) *
                C49294 +
            (C23771 + C23770 + C23769 + C23768) * C49312 +
            (C23767 + C23766 + C23765 + C23764) * C49322 +
            (C23763 + C23762 + C23761 + C23760) * C49326) *
               C48978 * C49279) *
              C527 +
          (((C23772 + C23773 + C23774 + C23775) * C49326 +
            (C23776 + C23777 + C23778 + C23779) * C49322 +
            (C23780 + C23781 + C23782 + C23783) * C49312 +
            (C9242 * C23627 + C9243 * C23621 +
             (C113 * C1759 + C49007 * C1764) * C23628 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C22511 +
                    (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                    C169 * C49318 + C170 * C22513 + C171 * C49305 +
                    C172 * C22514 + C173 * C49288) *
                       C22509 +
                   (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                    C22652 + C22653) *
                       C49054) *
                      C48978 * C591 -
                  ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                    C23026 + C23027) *
                       C49054 +
                   (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                    C22647 + C22646) *
                       C22509) *
                      C48978 * C592 +
                  ((C23027 + C23026 + C23025 + C23024 + C23023 + C23022 +
                    C23021 + C23020) *
                       C22509 +
                   (C1781 * C22511 + C1780 * C49325 + C1311 * C22512 +
                    C1310 * C49318 + C1309 * C22513 + C1308 * C49305 +
                    (C113 * C1254 + C49007 * C1261) * C22514 +
                    (C113 * C1262 + C49007 * C1266) * C49288) *
                       C49054) *
                      C48978 * C593) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C23627 +
                    (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                    C169 * C48902) *
                       C49326 +
                   (C23760 + C23761 + C23762 + C23763) * C49322 +
                   C24150 * C49312 + C24151 * C49294) *
                      C48978 * C591 -
                  ((C24144 + C24145 + C24146 + C24147) * C49294 +
                   (C23771 + C23770 + C23769 + C23768) * C49312 +
                   (C23767 + C23766 + C23765 + C23764) * C49322 +
                   (C23763 + C23762 + C23761 + C23760) * C49326) *
                      C48978 * C592 +
                  (C24150 * C49326 + C24151 * C49322 +
                   (C24147 + C24146 + C24145 + C24144) * C49312 +
                   (C9494 * C23627 + C9493 * C23621 +
                    (C113 * C9212 + C49007 * C9215) * C23628 +
                    (C113 * C9216 + C49007 * C9218) * C48902) *
                       C49294) *
                      C48978 * C593) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C22511 +
                     (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                     C169 * C49318 + C170 * C22513 + C171 * C49305 +
                     C172 * C22514 + C173 * C49288) *
                        C22509 +
                    (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                     C22652 + C22653) *
                        C49054) *
                       C393 -
                   ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                     C23164 + C23165) *
                        C49054 +
                    (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                     C441 * C22513 + C442 * C49318 + C443 * C22512 +
                     (C113 * C409 + C49007 * C417) * C49325 +
                     (C113 * C399 + C49007 * C410) * C22511) *
                        C22509) *
                       C49281) *
                      C525 +
                  (((C23165 + C23164 + C23163 + C23162 + C23161 + C23160 +
                     C23159 + C23158) *
                        C22509 +
                    (C1962 * C22511 + C1961 * C49325 + C1497 * C22512 +
                     C1496 * C49318 + C1495 * C22513 + C1494 * C49305 +
                     (C113 * C1464 + C49007 * C1471) * C22514 +
                     (C113 * C1472 + C49007 * C1476) * C49288) *
                        C49054) *
                       C49281 -
                   ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                     C23026 + C23027) *
                        C49054 +
                    (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                     C22647 + C22646) *
                        C22509) *
                       C393) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C23627 +
                     (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                     C169 * C48902) *
                        C49326 +
                    (C23760 + C23761 + C23762 + C23763) * C49322 +
                    C24150 * C49312 + C24151 * C49294) *
                       C393 -
                   ((C24282 + C24283 + C24284 + C24285) * C49294 +
                    (C24286 + C24287 + C24288 + C24289) * C49312 +
                    (C24290 + C24291 + C24292 + C24293) * C49322 +
                    (C442 * C48902 + C443 * C23628 +
                     (C113 * C409 + C49007 * C417) * C23621 +
                     (C113 * C399 + C49007 * C410) * C23627) *
                        C49326) *
                       C49281) *
                      C525 +
                  (((C24293 + C24292 + C24291 + C24290) * C49326 +
                    (C24289 + C24288 + C24287 + C24286) * C49322 +
                    (C24285 + C24284 + C24283 + C24282) * C49312 +
                    (C9596 * C23627 + C9595 * C23621 +
                     (C113 * C9330 + C49007 * C9333) * C23628 +
                     (C113 * C9334 + C49007 * C9336) * C48902) *
                        C49294) *
                       C49281 -
                   ((C24144 + C24145 + C24146 + C24147) * C49294 +
                    (C23771 + C23770 + C23769 + C23768) * C49312 +
                    (C23767 + C23766 + C23765 + C23764) * C49322 +
                    (C23763 + C23762 + C23761 + C23760) * C49326) *
                       C393) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C22511 +
             (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
             C169 * C49318 + C170 * C22513 + C171 * C49305 + C172 * C22514 +
             C173 * C49288) *
                C22509 +
            (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 + C22652 +
             C22653) *
                C49054) *
               C799 -
           ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 + C23164 +
             C23165) *
                C49054 +
            (C438 * C49288 + C439 * C22514 + C440 * C49305 + C441 * C22513 +
             C442 * C49318 + C443 * C22512 +
             (C113 * C409 + C49007 * C417) * C49325 +
             (C113 * C399 + C49007 * C410) * C22511) *
                C22509) *
               C49281) *
              C48961 * C527 +
          (((C443 * C22511 + C442 * C49325 + C441 * C22512 + C440 * C49318 +
             C439 * C22513 + C438 * C49305 + C437 * C22514 + C436 * C49288) *
                C22509 +
            (C1501 * C22511 + C1500 * C49325 + C1499 * C22512 + C1498 * C49318 +
             C4170 * C22513 + C4169 * C49305 +
             (C113 * C701 + C49007 * C710) * C22514 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C22661 + C22660 + C22659 + C22658 + C22657 + C22656 + C22655 +
             C22654) *
                C49054 +
            (C175 * C49288 + C174 * C22514 + C173 * C49305 + C172 * C22513 +
             C171 * C49318 + C170 * C22512 + C169 * C49325 + C168 * C22511) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C23627 +
             (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
             C169 * C48902) *
                C49326 +
            (C23760 + C23761 + C23762 + C23763) * C49322 + C24150 * C49312 +
            C24151 * C49294) *
               C799 -
           ((C24282 + C24283 + C24284 + C24285) * C49294 +
            (C24286 + C24287 + C24288 + C24289) * C49312 +
            (C24290 + C24291 + C24292 + C24293) * C49322 +
            (C442 * C48902 + C443 * C23628 +
             (C113 * C409 + C49007 * C417) * C23621 +
             (C113 * C399 + C49007 * C410) * C23627) *
                C49326) *
               C49281) *
              C48961 * C527 +
          (((C443 * C23627 + C442 * C23621 + C441 * C23628 + C440 * C48902) *
                C49326 +
            (C1501 * C23627 + C1500 * C23621 + C1499 * C23628 +
             C1498 * C48902) *
                C49322 +
            (C1497 * C23627 + C1496 * C23621 + C1495 * C23628 +
             C1494 * C48902) *
                C49312 +
            (C11577 * C23627 + C11576 * C23621 +
             (C113 * C1934 + C49007 * C1939) * C23628 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C23783 + C23782 + C23781 + C23780) * C49294 +
            (C23779 + C23778 + C23777 + C23776) * C49312 +
            (C23775 + C23774 + C23773 + C23772) * C49322 +
            (C171 * C48902 + C170 * C23628 + C169 * C23621 + C168 * C23627) *
                C49326) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C22511 +
                     (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                     C169 * C49318 + C170 * C22513 + C171 * C49305 +
                     C172 * C22514 + C173 * C49288) *
                        C22509 +
                    (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                     C22652 + C22653) *
                        C49054) *
                       C799 -
                   ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                     C23164 + C23165) *
                        C49054 +
                    (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                     C441 * C22513 + C442 * C49318 + C443 * C22512 +
                     (C113 * C409 + C49007 * C417) * C49325 +
                     (C113 * C399 + C49007 * C410) * C22511) *
                        C22509) *
                       C49281) *
                      C259 +
                  (((C23165 + C23164 + C23163 + C23162 + C23161 + C23160 +
                     C23159 + C23158) *
                        C22509 +
                    (C1962 * C22511 + C1961 * C49325 + C1497 * C22512 +
                     C1496 * C49318 + C1495 * C22513 + C1494 * C49305 +
                     (C113 * C1464 + C49007 * C1471) * C22514 +
                     (C113 * C1472 + C49007 * C1476) * C49288) *
                        C49054) *
                       C49281 -
                   ((C23020 + C23021 + C23022 + C23023 + C23024 + C23025 +
                     C23026 + C23027) *
                        C49054 +
                    (C22653 + C22652 + C22651 + C22650 + C22649 + C22648 +
                     C22647 + C22646) *
                        C22509) *
                       C799) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C49007 * C126) * C23627 +
                     (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                     C169 * C48902) *
                        C49326 +
                    (C23760 + C23761 + C23762 + C23763) * C49322 +
                    C24150 * C49312 + C24151 * C49294) *
                       C799 -
                   ((C24282 + C24283 + C24284 + C24285) * C49294 +
                    (C24286 + C24287 + C24288 + C24289) * C49312 +
                    (C24290 + C24291 + C24292 + C24293) * C49322 +
                    (C442 * C48902 + C443 * C23628 +
                     (C113 * C409 + C49007 * C417) * C23621 +
                     (C113 * C399 + C49007 * C410) * C23627) *
                        C49326) *
                       C49281) *
                      C259 +
                  (((C24293 + C24292 + C24291 + C24290) * C49326 +
                    (C24289 + C24288 + C24287 + C24286) * C49322 +
                    (C24285 + C24284 + C24283 + C24282) * C49312 +
                    (C9596 * C23627 + C9595 * C23621 +
                     (C113 * C9330 + C49007 * C9333) * C23628 +
                     (C113 * C9334 + C49007 * C9336) * C48902) *
                        C49294) *
                       C49281 -
                   ((C24144 + C24145 + C24146 + C24147) * C49294 +
                    (C23771 + C23770 + C23769 + C23768) * C49312 +
                    (C23767 + C23766 + C23765 + C23764) * C49322 +
                    (C23763 + C23762 + C23761 + C23760) * C49326) *
                       C799) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C22511 +
                    (C113 * C127 + C49007 * C140) * C49325 + C168 * C22512 +
                    C169 * C49318 + C170 * C22513 + C171 * C49305 +
                    C172 * C22514 + C173 * C49288) *
                       C22509 +
                   (C22646 + C22647 + C22648 + C22649 + C22650 + C22651 +
                    C22652 + C22653) *
                       C49054) *
                      C945 -
                  ((C23158 + C23159 + C23160 + C23161 + C23162 + C23163 +
                    C23164 + C23165) *
                       C49054 +
                   (C438 * C49288 + C439 * C22514 + C440 * C49305 +
                    C441 * C22513 + C442 * C49318 + C443 * C22512 +
                    (C113 * C409 + C49007 * C417) * C49325 +
                    (C113 * C399 + C49007 * C410) * C22511) *
                       C22509) *
                      C946 +
                  (((C113 * C948 + C49007 * C953) * C22511 +
                    (C113 * C954 + C49007 * C963) * C49325 +
                    (C113 * C949 + C49007 * C955) * C22512 +
                    (C113 * C956 + C49007 * C964) * C49318 +
                    (C113 * C950 + C49007 * C957) * C22513 +
                    (C113 * C958 + C49007 * C965) * C49305 +
                    (C113 * C951 + C49007 * C959) * C22514 +
                    (C113 * C960 + C49007 * C966) * C49288) *
                       C22509 +
                   ((C113 * C2370 + C49007 * C2376) * C22511 +
                    (C113 * C2377 + C49007 * C2388) * C49325 +
                    (C113 * C2371 + C49007 * C2378) * C22512 +
                    (C113 * C2379 + C49007 * C2389) * C49318 +
                    (C113 * C2372 + C49007 * C2380) * C22513 +
                    (C113 * C2381 + C49007 * C2390) * C49305 +
                    (C113 * C2714 + C49007 * C2715) * C22514 +
                    (C113 * C2716 + C49007 * C2717) * C49288) *
                       C49054) *
                      C947) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C49007 * C126) * C23627 +
                    (C113 * C127 + C49007 * C140) * C23621 + C168 * C23628 +
                    C169 * C48902) *
                       C49326 +
                   (C23760 + C23761 + C23762 + C23763) * C49322 +
                   C24150 * C49312 + C24151 * C49294) *
                      C945 -
                  ((C24282 + C24283 + C24284 + C24285) * C49294 +
                   (C24286 + C24287 + C24288 + C24289) * C49312 +
                   (C24290 + C24291 + C24292 + C24293) * C49322 +
                   (C442 * C48902 + C443 * C23628 +
                    (C113 * C409 + C49007 * C417) * C23621 +
                    (C113 * C399 + C49007 * C410) * C23627) *
                       C49326) *
                      C946 +
                  (((C113 * C948 + C49007 * C953) * C23627 +
                    (C113 * C954 + C49007 * C963) * C23621 +
                    (C113 * C949 + C49007 * C955) * C23628 +
                    (C113 * C956 + C49007 * C964) * C48902) *
                       C49326 +
                   ((C113 * C2370 + C49007 * C2376) * C23627 +
                    (C113 * C2377 + C49007 * C2388) * C23621 +
                    (C113 * C2371 + C49007 * C2378) * C23628 +
                    (C113 * C2379 + C49007 * C2389) * C48902) *
                       C49322 +
                   ((C113 * C2373 + C49007 * C2382) * C23627 +
                    (C113 * C2383 + C49007 * C2391) * C23621 +
                    (C113 * C2374 + C49007 * C2384) * C23628 +
                    (C113 * C2385 + C49007 * C2392) * C48902) *
                       C49312 +
                   ((C113 * C9828 + C49007 * C9830) * C23627 +
                    (C113 * C9831 + C49007 * C9834) * C23621 +
                    (C113 * C10092 + C49007 * C10093) * C23628 +
                    (C113 * C10094 + C49007 * C10095) * C48902) *
                       C49294) *
                      C947) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47909 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49229 +
            (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
               C49050 +
           ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
            C32327 * C47890 + C32328 * C48902) *
               C49057 +
           (C32921 * C47909 + C32922 * C49229 + C32337 * C47890 +
            C32338 * C48902) *
               C26394) *
              C48978 * C48961 * C110 -
          (((C32121 + C32122) * C48902 + (C32123 + C32124) * C47890 +
            C32347 * C49229 + C32348 * C47909) *
               C26394 +
           (C35214 * C48902 + C35215 * C47890 + C32349 * C49229 +
            C32350 * C47909) *
               C49057 +
           ((C30894 + C30893) * C48902 + (C30892 + C30891) * C47890 +
            (C30890 + C30889) * C49229 + (C30888 + C30887) * C47909) *
               C49050) *
              C48978 * C48961 * C111 +
          ((C30903 * C47909 + C30904 * C49229 + C30905 * C47890 +
            C30906 * C48902) *
               C49050 +
           (C35018 * C47909 + C35019 * C49229 + (C31064 + C31063) * C47890 +
            (C31062 + C31061) * C48902) *
               C49057 +
           ((C32124 + C32123) * C47909 + (C32122 + C32121) * C49229 +
            (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                C47890 +
            (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                C48902) *
               C26394) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            (C32921 * C47909 + C32922 * C49229 + C32337 * C47890 +
             C32338 * C48902) *
                C26394) *
               C48978 * C259 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C47890 +
             (C32935 + C32936) * C49229 + (C32937 + C32938) * C47909) *
                C26394 +
            (C32347 * C48902 + C32348 * C47890 + (C32358 + C32357) * C49229 +
             (C32356 + C32355) * C47909) *
                C49057 +
            (C32349 * C48902 + C32350 * C47890 + (C32354 + C32353) * C49229 +
             (C32352 + C32351) * C47909) *
                C49050) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C47909 + C32328 * C49229 + C35018 * C47890 +
             C35019 * C48902) *
                C49050 +
            (C32337 * C47909 + C32338 * C49229 + (C32124 + C32123) * C47890 +
             (C32122 + C32121) * C48902) *
                C49057 +
            ((C32362 + C32361) * C47909 + (C32360 + C32359) * C49229 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C47890 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C26394) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C47890 +
             C32347 * C49229 + C32348 * C47909) *
                C26394 +
            (C35214 * C48902 + C35215 * C47890 + C32349 * C49229 +
             C32350 * C47909) *
                C49057 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C47890 +
             (C30890 + C30889) * C49229 + (C30888 + C30887) * C47909) *
                C49050) *
               C48978 * C259) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            (C32921 * C47909 + C32922 * C49229 + C32337 * C47890 +
             C32338 * C48902) *
                C26394) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C47890 +
             (C33152 + C33153) * C49229 + (C33154 + C33155) * C47909) *
                C26394 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C47890 +
             (C33156 + C33157) * C49229 + (C33158 + C33159) * C47909) *
                C49057 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C47890 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49229 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47909) *
                C49050) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C47909 + (C31236 + C31235) * C49229 +
             (C31234 + C31233) * C47890 + (C31232 + C31231) * C48902) *
                C49050 +
            ((C32580 + C32579) * C47909 + (C32578 + C32577) * C49229 +
             (C35421 + C35420) * C47890 + (C35419 + C35418) * C48902) *
                C49057 +
            ((C32576 + C32575) * C47909 + (C32574 + C32573) * C49229 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C47890 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C26394) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C47890 +
             C32347 * C49229 + C32348 * C47909) *
                C26394 +
            (C35214 * C48902 + C35215 * C47890 + C32349 * C49229 +
             C32350 * C47909) *
                C49057 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C47890 +
             (C30890 + C30889) * C49229 + (C30888 + C30887) * C47909) *
                C49050) *
               C393) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            (C32921 * C47909 + C32922 * C49229 + C32337 * C47890 +
             C32338 * C48902) *
                C26394) *
               C48978 * C525 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C47890 +
             (C32935 + C32936) * C49229 + (C32937 + C32938) * C47909) *
                C26394 +
            (C32347 * C48902 + C32348 * C47890 + (C32358 + C32357) * C49229 +
             (C32356 + C32355) * C47909) *
                C49057 +
            (C32349 * C48902 + C32350 * C47890 + (C32354 + C32353) * C49229 +
             (C32352 + C32351) * C47909) *
                C49050) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C47909 + C32328 * C49229 + C35018 * C47890 +
             C35019 * C48902) *
                C49050 +
            (C32337 * C47909 + C32338 * C49229 + (C32124 + C32123) * C47890 +
             (C32122 + C32121) * C48902) *
                C49057 +
            ((C32362 + C32361) * C47909 + (C32360 + C32359) * C49229 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C47890 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C26394) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C47890 +
             C32347 * C49229 + C32348 * C47909) *
                C26394 +
            (C35214 * C48902 + C35215 * C47890 + C32349 * C49229 +
             C32350 * C47909) *
                C49057 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C47890 +
             (C30890 + C30889) * C49229 + (C30888 + C30887) * C47909) *
                C49050) *
               C48978 * C525) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47909 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49229 +
            (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
               C49050 +
           ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
            C32327 * C47890 + C32328 * C48902) *
               C49057 +
           C44266 * C26394) *
              C48978 * C591 -
          (((C32359 + C32360) * C48902 + (C32361 + C32362) * C47890 +
            (C32935 + C32936) * C49229 + (C32937 + C32938) * C47909) *
               C26394 +
           (C32347 * C48902 + C32348 * C47890 + (C32358 + C32357) * C49229 +
            (C32356 + C32355) * C47909) *
               C49057 +
           (C32349 * C48902 + C32350 * C47890 + (C32354 + C32353) * C49229 +
            (C32352 + C32351) * C47909) *
               C49050) *
              C48978 * C592 +
          (C44266 * C49050 +
           (C41722 * C47909 + C41723 * C49229 + (C32362 + C32361) * C47890 +
            (C32360 + C32359) * C48902) *
               C49057 +
           ((C41738 + C41737) * C47909 + (C41736 + C41735) * C49229 +
            (C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
             C49094 * C9333) *
                C47890 +
            (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
             C49094 * C9336) *
                C48902) *
               C26394) *
              C48978 * C593) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            C44266 * C26394) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C47890 +
             (C33152 + C33153) * C49229 + (C33154 + C33155) * C47909) *
                C26394 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C47890 +
             (C33156 + C33157) * C49229 + (C33158 + C33159) * C47909) *
                C49057 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C47890 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49229 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47909) *
                C49050) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C47909 + (C33157 + C33156) * C49229 +
             (C32580 + C32579) * C47890 + (C32578 + C32577) * C48902) *
                C49050 +
            ((C33155 + C33154) * C47909 + (C33153 + C33152) * C49229 +
             (C32576 + C32575) * C47890 + (C32574 + C32573) * C48902) *
                C49057 +
            ((C41881 + C41880) * C47909 + (C41879 + C41878) * C49229 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C26394) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C47890 +
             (C32935 + C32936) * C49229 + (C32937 + C32938) * C47909) *
                C26394 +
            (C32347 * C48902 + C32348 * C47890 + (C32358 + C32357) * C49229 +
             (C32356 + C32355) * C47909) *
                C49057 +
            (C32349 * C48902 + C32350 * C47890 + (C32354 + C32353) * C49229 +
             (C32352 + C32351) * C47909) *
                C49050) *
               C393) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            C44266 * C26394) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C47890 +
             (C33152 + C33153) * C49229 + (C33154 + C33155) * C47909) *
                C26394 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C47890 +
             (C33156 + C33157) * C49229 + (C33158 + C33159) * C47909) *
                C49057 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C47890 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49229 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47909) *
                C49050) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C47909 + (C31236 + C31235) * C49229 +
             (C31234 + C31233) * C47890 + (C31232 + C31231) * C48902) *
                C49050 +
            ((C32580 + C32579) * C47909 + (C32578 + C32577) * C49229 +
             (C35421 + C35420) * C47890 + (C35419 + C35418) * C48902) *
                C49057 +
            ((C32576 + C32575) * C47909 + (C32574 + C32573) * C49229 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C47890 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C26394) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C47890 +
             C32347 * C49229 + C32348 * C47909) *
                C26394 +
            (C35214 * C48902 + C35215 * C47890 + C32349 * C49229 +
             C32350 * C47909) *
                C49057 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C47890 +
             (C30890 + C30889) * C49229 + (C30888 + C30887) * C47909) *
                C49050) *
               C799) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47909 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49229 +
             (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
                C49050 +
            ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
             C32327 * C47890 + C32328 * C48902) *
                C49057 +
            C44266 * C26394) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C47890 +
             (C33152 + C33153) * C49229 + (C33154 + C33155) * C47909) *
                C26394 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C47890 +
             (C33156 + C33157) * C49229 + (C33158 + C33159) * C47909) *
                C49057 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C47890 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49229 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47909) *
                C49050) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C47909 + (C33157 + C33156) * C49229 +
             (C32580 + C32579) * C47890 + (C32578 + C32577) * C48902) *
                C49050 +
            ((C33155 + C33154) * C47909 + (C33153 + C33152) * C49229 +
             (C32576 + C32575) * C47890 + (C32574 + C32573) * C48902) *
                C49057 +
            ((C41881 + C41880) * C47909 + (C41879 + C41878) * C49229 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C26394) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C47890 +
             (C32935 + C32936) * C49229 + (C32937 + C32938) * C47909) *
                C26394 +
            (C32347 * C48902 + C32348 * C47890 + (C32358 + C32357) * C49229 +
             (C32356 + C32355) * C47909) *
                C49057 +
            (C32349 * C48902 + C32350 * C47890 + (C32354 + C32353) * C49229 +
             (C32352 + C32351) * C47909) *
                C49050) *
               C799) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47909 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49229 +
            (C30887 + C30888) * C47890 + (C30889 + C30890) * C48902) *
               C49050 +
           ((C32351 + C32352) * C47909 + (C32353 + C32354) * C49229 +
            C32327 * C47890 + C32328 * C48902) *
               C49057 +
           C44266 * C26394) *
              C945 -
          (((C32573 + C32574) * C48902 + (C32575 + C32576) * C47890 +
            (C33152 + C33153) * C49229 + (C33154 + C33155) * C47909) *
               C26394 +
           ((C32577 + C32578) * C48902 + (C32579 + C32580) * C47890 +
            (C33156 + C33157) * C49229 + (C33158 + C33159) * C47909) *
               C49057 +
           ((C31235 + C31236) * C48902 + (C31237 + C31238) * C47890 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49229 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C47909) *
               C49050) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C47909 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C49229 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C47890 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C48902) *
               C49050 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C47909 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C49229 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C47890 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C48902) *
               C49057 +
           ((C30852 * C2373 + C30850 * C2382 + C30853 * C10296 +
             C49094 * C10299) *
                C47909 +
            (C30852 * C2383 + C30850 * C2391 + C30853 * C10298 +
             C49094 * C10302) *
                C49229 +
            (C30852 * C2374 + C30850 * C2384 + C30853 * C10297 +
             C49094 * C10300) *
                C47890 +
            (C30852 * C2385 + C30850 * C2392 + C30853 * C10301 +
             C49094 * C10303) *
                C48902) *
               C26394) *
              C947) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C9128 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48892) *
                       C49050 +
                   ((C38200 + C38201 + C38202) * C9128 +
                    (C38203 + C38204 + C38205) * C48892) *
                       C49057 +
                   ((C38785 + C38784 + C38783) * C9128 +
                    (C38782 + C38781 + C38780) * C48892) *
                       C26394) *
                      C48978 * C48961 * C110 -
                  (((C38208 + C38209 + C38210) * C48892 +
                    (C38211 + C38212 + C38213) * C9128) *
                       C26394 +
                   (C38214 * C48892 + C38215 * C9128) * C49057 +
                   ((C36647 + C36646 + C36645) * C48892 +
                    (C36644 + C36643 + C36642) * C9128) *
                       C49050) *
                      C48978 * C48961 * C111 +
                  ((C36662 * C9128 + C36663 * C48892) * C49050 +
                   ((C36839 + C36838 + C36837) * C9128 +
                    (C36836 + C36835 + C36834) * C48892) *
                       C49057 +
                   ((C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                     C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                        C9128 +
                    (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                     C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                        C48892) *
                       C26394) *
                      C48978 * C48961 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    ((C38785 + C38784 + C38783) * C9128 +
                     (C38782 + C38781 + C38780) * C48892) *
                        C26394) *
                       C48978 * C259 -
                   (((C48050 * C9831 + C36601 * C9834 + C48036 * C1936 +
                      C49097 * C1941 + C48044 * C1259 + C49090 * C1265) *
                         C48892 +
                     (C48050 * C9828 + C36601 * C9830 + C48036 * C1932 +
                      C49097 * C1935 + C48044 * C1253 + C49090 * C1260) *
                         C9128) *
                        C26394 +
                    ((C38780 + C38781 + C38782) * C48892 +
                     (C38783 + C38784 + C38785) * C9128) *
                        C49057 +
                    ((C38205 + C38204 + C38203) * C48892 +
                     (C38202 + C38201 + C38200) * C9128) *
                        C49050) *
                       C48978 * C49279) *
                      C261 +
                  (((C38206 * C9128 + C38207 * C48892) * C49050 +
                    ((C38213 + C38212 + C38211) * C9128 +
                     (C38210 + C38209 + C38208) * C48892) *
                        C49057 +
                    ((C48044 * C1252 + C49090 * C1258 + C48036 * C1933 +
                      C49097 * C1937 + C48050 * C10092 + C36601 * C10093) *
                         C9128 +
                     (C48044 * C1257 + C49090 * C1264 + C48036 * C1938 +
                      C49097 * C1942 + C48050 * C10094 + C36601 * C10095) *
                         C48892) *
                        C26394) *
                       C48978 * C49279 -
                   (((C38208 + C38209 + C38210) * C48892 +
                     (C38211 + C38212 + C38213) * C9128) *
                        C26394 +
                    (C38214 * C48892 + C38215 * C9128) * C49057 +
                    ((C36647 + C36646 + C36645) * C48892 +
                     (C36644 + C36643 + C36642) * C9128) *
                        C49050) *
                       C48978 * C259) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    ((C38785 + C38784 + C38783) * C9128 +
                     (C38782 + C38781 + C38780) * C48892) *
                        C26394) *
                       C393 -
                   (((C48050 * C10298 + C36601 * C10302 + C48036 * C2383 +
                      C49097 * C2391 + C48044 * C1469 + C49090 * C1475) *
                         C48892 +
                     (C48050 * C10296 + C36601 * C10299 + C48036 * C2373 +
                      C49097 * C2382 + C48044 * C1463 + C49090 * C1470) *
                         C9128) *
                        C26394 +
                    ((C38992 + C38993 + C38994) * C48892 +
                     (C38995 + C38996 + C38997) * C9128) *
                        C49057 +
                    ((C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48892 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C9128) *
                        C49050) *
                       C49281) *
                      C48961 * C261 +
                  ((((C37027 + C37026 + C37025) * C9128 +
                     (C37024 + C37023 + C37022) * C48892) *
                        C49050 +
                    ((C38427 + C38426 + C38425) * C9128 +
                     (C38424 + C38423 + C38422) * C48892) *
                        C49057 +
                    ((C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                      C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                         C9128 +
                     (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                      C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                         C48892) *
                        C26394) *
                       C49281 -
                   (((C38208 + C38209 + C38210) * C48892 +
                     (C38211 + C38212 + C38213) * C9128) *
                        C26394 +
                    (C38214 * C48892 + C38215 * C9128) * C49057 +
                    ((C36647 + C36646 + C36645) * C48892 +
                     (C36644 + C36643 + C36642) * C9128) *
                        C49050) *
                       C393) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    ((C38785 + C38784 + C38783) * C9128 +
                     (C38782 + C38781 + C38780) * C48892) *
                        C26394) *
                       C48978 * C525 -
                   (((C48050 * C9831 + C36601 * C9834 + C48036 * C1936 +
                      C49097 * C1941 + C48044 * C1259 + C49090 * C1265) *
                         C48892 +
                     (C48050 * C9828 + C36601 * C9830 + C48036 * C1932 +
                      C49097 * C1935 + C48044 * C1253 + C49090 * C1260) *
                         C9128) *
                        C26394 +
                    ((C38780 + C38781 + C38782) * C48892 +
                     (C38783 + C38784 + C38785) * C9128) *
                        C49057 +
                    ((C38205 + C38204 + C38203) * C48892 +
                     (C38202 + C38201 + C38200) * C9128) *
                        C49050) *
                       C48978 * C49279) *
                      C527 +
                  (((C38206 * C9128 + C38207 * C48892) * C49050 +
                    ((C38213 + C38212 + C38211) * C9128 +
                     (C38210 + C38209 + C38208) * C48892) *
                        C49057 +
                    ((C48044 * C1252 + C49090 * C1258 + C48036 * C1933 +
                      C49097 * C1937 + C48050 * C10092 + C36601 * C10093) *
                         C9128 +
                     (C48044 * C1257 + C49090 * C1264 + C48036 * C1938 +
                      C49097 * C1942 + C48050 * C10094 + C36601 * C10095) *
                         C48892) *
                        C26394) *
                       C48978 * C49279 -
                   (((C38208 + C38209 + C38210) * C48892 +
                     (C38211 + C38212 + C38213) * C9128) *
                        C26394 +
                    (C38214 * C48892 + C38215 * C9128) * C49057 +
                    ((C36647 + C36646 + C36645) * C48892 +
                     (C36644 + C36643 + C36642) * C9128) *
                        C49050) *
                       C48978 * C525) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C9128 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48892) *
                       C49050 +
                   ((C38200 + C38201 + C38202) * C9128 +
                    (C38203 + C38204 + C38205) * C48892) *
                       C49057 +
                   C47279 * C26394) *
                      C48978 * C591 -
                  (((C47271 + C47272 + C47273) * C48892 +
                    (C47274 + C47275 + C47276) * C9128) *
                       C26394 +
                   ((C38780 + C38781 + C38782) * C48892 +
                    (C38783 + C38784 + C38785) * C9128) *
                       C49057 +
                   ((C38205 + C38204 + C38203) * C48892 +
                    (C38202 + C38201 + C38200) * C9128) *
                       C49050) *
                      C48978 * C592 +
                  (C47279 * C49050 +
                   ((C47276 + C47275 + C47274) * C9128 +
                    (C47273 + C47272 + C47271) * C48892) *
                       C49057 +
                   ((C48044 * C1757 + C49090 * C1760 + C48036 * C9329 +
                     C49097 * C9332 + C48050 * C9829 + C36601 * C9832) *
                        C9128 +
                    (C48044 * C1761 + C49090 * C1766 + C48036 * C9331 +
                     C49097 * C9335 + C48050 * C9833 + C36601 * C9835) *
                        C48892) *
                       C26394) *
                      C48978 * C593) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    C47279 * C26394) *
                       C393 -
                   (((C47438 + C47439 + C47440) * C48892 +
                     (C47441 + C47442 + C47443) * C9128) *
                        C26394 +
                    ((C38992 + C38993 + C38994) * C48892 +
                     (C38995 + C38996 + C38997) * C9128) *
                        C49057 +
                    ((C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48892 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C9128) *
                        C49050) *
                       C49281) *
                      C525 +
                  ((((C38997 + C38996 + C38995) * C9128 +
                     (C38994 + C38993 + C38992) * C48892) *
                        C49050 +
                    ((C47443 + C47442 + C47441) * C9128 +
                     (C47440 + C47439 + C47438) * C48892) *
                        C49057 +
                    ((C48044 * C1932 + C49090 * C1935 + C48036 * C9828 +
                      C49097 * C9830 + C48050 * C10731 + C36601 * C10732) *
                         C9128 +
                     (C48044 * C1936 + C49090 * C1941 + C48036 * C9831 +
                      C49097 * C9834 + C48050 * C10733 + C36601 * C10734) *
                         C48892) *
                        C26394) *
                       C49281 -
                   (((C47271 + C47272 + C47273) * C48892 +
                     (C47274 + C47275 + C47276) * C9128) *
                        C26394 +
                    ((C38780 + C38781 + C38782) * C48892 +
                     (C38783 + C38784 + C38785) * C9128) *
                        C49057 +
                    ((C38205 + C38204 + C38203) * C48892 +
                     (C38202 + C38201 + C38200) * C9128) *
                        C49050) *
                       C393) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    C47279 * C26394) *
                       C799 -
                   (((C47438 + C47439 + C47440) * C48892 +
                     (C47441 + C47442 + C47443) * C9128) *
                        C26394 +
                    ((C38992 + C38993 + C38994) * C48892 +
                     (C38995 + C38996 + C38997) * C9128) *
                        C49057 +
                    ((C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48892 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C9128) *
                        C49050) *
                       C49281) *
                      C48961 * C527 +
                  ((((C37027 + C37026 + C37025) * C9128 +
                     (C37024 + C37023 + C37022) * C48892) *
                        C49050 +
                    ((C38427 + C38426 + C38425) * C9128 +
                     (C38424 + C38423 + C38422) * C48892) *
                        C49057 +
                    ((C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                      C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                         C9128 +
                     (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                      C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                         C48892) *
                        C26394) *
                       C49281 -
                   (((C38208 + C38209 + C38210) * C48892 +
                     (C38211 + C38212 + C38213) * C9128) *
                        C26394 +
                    (C38214 * C48892 + C38215 * C9128) * C49057 +
                    ((C36647 + C36646 + C36645) * C48892 +
                     (C36644 + C36643 + C36642) * C9128) *
                        C49050) *
                       C799) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C9128 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48892) *
                        C49050 +
                    ((C38200 + C38201 + C38202) * C9128 +
                     (C38203 + C38204 + C38205) * C48892) *
                        C49057 +
                    C47279 * C26394) *
                       C799 -
                   (((C47438 + C47439 + C47440) * C48892 +
                     (C47441 + C47442 + C47443) * C9128) *
                        C26394 +
                    ((C38992 + C38993 + C38994) * C48892 +
                     (C38995 + C38996 + C38997) * C9128) *
                        C49057 +
                    ((C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48892 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C9128) *
                        C49050) *
                       C49281) *
                      C259 +
                  ((((C38997 + C38996 + C38995) * C9128 +
                     (C38994 + C38993 + C38992) * C48892) *
                        C49050 +
                    ((C47443 + C47442 + C47441) * C9128 +
                     (C47440 + C47439 + C47438) * C48892) *
                        C49057 +
                    ((C48044 * C1932 + C49090 * C1935 + C48036 * C9828 +
                      C49097 * C9830 + C48050 * C10731 + C36601 * C10732) *
                         C9128 +
                     (C48044 * C1936 + C49090 * C1941 + C48036 * C9831 +
                      C49097 * C9834 + C48050 * C10733 + C36601 * C10734) *
                         C48892) *
                        C26394) *
                       C49281 -
                   (((C47271 + C47272 + C47273) * C48892 +
                     (C47274 + C47275 + C47276) * C9128) *
                        C26394 +
                    ((C38780 + C38781 + C38782) * C48892 +
                     (C38783 + C38784 + C38785) * C9128) *
                        C49057 +
                    ((C38205 + C38204 + C38203) * C48892 +
                     (C38202 + C38201 + C38200) * C9128) *
                        C49050) *
                       C799) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C9128 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48892) *
                       C49050 +
                   ((C38200 + C38201 + C38202) * C9128 +
                    (C38203 + C38204 + C38205) * C48892) *
                       C49057 +
                   C47279 * C26394) *
                      C945 -
                  (((C47438 + C47439 + C47440) * C48892 +
                    (C47441 + C47442 + C47443) * C9128) *
                       C26394 +
                   ((C38992 + C38993 + C38994) * C48892 +
                    (C38995 + C38996 + C38997) * C9128) *
                       C49057 +
                   ((C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                     C49097 * C963 + C48044 * C409 + C49090 * C417) *
                        C48892 +
                    (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                     C49097 * C953 + C48044 * C399 + C49090 * C410) *
                        C9128) *
                       C49050) *
                      C946 +
                  (((C48044 * C948 + C49090 * C953 + C48036 * C2902 +
                     C49097 * C2909 + C48050 * C3768 + C36601 * C3771) *
                        C9128 +
                    (C48044 * C954 + C49090 * C963 + C48036 * C2908 +
                     C49097 * C2914 + C48050 * C3772 + C36601 * C3777) *
                        C48892) *
                       C49050 +
                   ((C48044 * C2370 + C49090 * C2376 + C48036 * C3354 +
                     C49097 * C3357 + C48050 * C11173 + C36601 * C11175) *
                        C9128 +
                    (C48044 * C2377 + C49090 * C2388 + C48036 * C3358 +
                     C49097 * C3363 + C48050 * C11176 + C36601 * C11179) *
                        C48892) *
                       C49057 +
                   ((C48044 * C2373 + C49090 * C2382 + C48036 * C10296 +
                     C49097 * C10299 + C48050 * C11174 + C36601 * C11177) *
                        C9128 +
                    (C48044 * C2383 + C49090 * C2391 + C48036 * C10298 +
                     C49097 * C10302 + C48050 * C11178 + C36601 * C11180) *
                        C48892) *
                       C26394) *
                      C947) *
                 C48961 * C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           (C32921 * C9128 + C32922 * C48892) * C49312 +
           ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
              C48978 * C48961 * C110 -
          (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
           (C32347 * C48892 + C32348 * C9128) * C49312 +
           (C32349 * C48892 + C32350 * C9128) * C49322 +
           ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
              C48978 * C48961 * C111 +
          ((C30903 * C9128 + C30904 * C48892) * C49326 +
           (C35018 * C9128 + C35019 * C48892) * C49322 +
           ((C32124 + C32123) * C9128 + (C32122 + C32121) * C48892) * C49312 +
           ((C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
             C49094 * C1939) *
                C9128 +
            (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
             C49094 * C1943) *
                C48892) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
            C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
            C32350 * C7914) *
               C49054 +
           ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
            (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
            (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C30903 * C7914 + C30904 * C49316 + C30905 * C7915 +
            C30906 * C49303 + (C30902 + C30901) * C7916 +
            (C30900 + C30899) * C49271) *
               C22509 +
           (C35018 * C7914 + C35019 * C49316 + (C31064 + C31063) * C7915 +
            (C31062 + C31061) * C49303 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C7916 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49271) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C9128 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C48892) *
               C22509 +
           ((C33795 * C267 + C49327 * C278 + C33796 * C697 + C49324 * C702 +
             C33797 * C2370 + C49315 * C2376 + C33798 * C3354 +
             C49300 * C3357) *
                C9128 +
            (C33795 * C277 + C49327 * C285 + C33796 * C703 + C49324 * C712 +
             C33797 * C2377 + C49315 * C2388 + C33798 * C3358 +
             C49300 * C3363) *
                C48892) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C33994 + C33995 + C33996 + C33997) * C48892 +
            (C33998 + C33999 + C34000 + C34001) * C9128) *
               C49054 +
           ((C33839 + C33838 + C33837 + C33836) * C48892 +
            (C33835 + C33834 + C33833 + C33832) * C9128) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C33847 + C33846 + C33845 + C33844) * C9128 +
            (C33843 + C33842 + C33841 + C33840) * C48892) *
               C22509 +
           ((C33795 * C265 + C49327 * C274 + C33796 * C699 + C49324 * C706 +
             C33797 * C2372 + C49315 * C2380 + C33798 * C3356 +
             C49300 * C3361) *
                C9128 +
            (C33795 * C273 + C49327 * C283 + C33796 * C707 + C49324 * C714 +
             C33797 * C2381 + C49315 * C2390 + C33798 * C3362 +
             C49300 * C3365) *
                C48892) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C48978 * C259 -
           (((C30853 * C9331 + C49094 * C9335 + C30852 * C1761 +
              C30850 * C1766) *
                 C48892 +
             (C30853 * C9329 + C49094 * C9332 + C30852 * C1757 +
              C30850 * C1760) *
                 C9128) *
                C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C9128 + C32328 * C48892) * C49326 +
            (C32337 * C9128 + C32338 * C48892) * C49322 +
            ((C32362 + C32361) * C9128 + (C32360 + C32359) * C48892) * C49312 +
            ((C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
              C49094 * C9333) *
                 C9128 +
             (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
              C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C48978 * C259 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C7914 + C32328 * C49316 + C35018 * C7915 +
             C35019 * C49303 + (C31064 + C31063) * C7916 +
             (C31062 + C31061) * C49271) *
                C22509 +
            (C32337 * C7914 + C32338 * C49316 + (C32124 + C32123) * C7915 +
             (C32122 + C32121) * C49303 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C7916 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C48978 * C259 -
           (((C33798 * C10298 + C49300 * C10302 + C33797 * C2383 +
              C49315 * C2391 + C33796 * C1469 + C49324 * C1475 + C33795 * C601 +
              C49327 * C610) *
                 C48892 +
             (C33798 * C10296 + C49300 * C10299 + C33797 * C2373 +
              C49315 * C2382 + C33796 * C1463 + C49324 * C1470 + C33795 * C595 +
              C49327 * C600) *
                 C9128) *
                C49054 +
            ((C42491 + C42490 + C42489 + C42488) * C48892 +
             (C42487 + C42486 + C42485 + C42484) * C9128) *
                C22509) *
               C48978 * C49279) *
              C261 +
          ((((C34001 + C34000 + C33999 + C33998) * C9128 +
             (C33997 + C33996 + C33995 + C33994) * C48892) *
                C22509 +
            ((C33795 * C596 + C49327 * C602 + C33796 * C1462 + C49324 * C1468 +
              C33797 * C2374 + C49315 * C2384 + C33798 * C10297 +
              C49300 * C10300) *
                 C9128 +
             (C33795 * C603 + C49327 * C611 + C33796 * C1467 + C49324 * C1474 +
              C33797 * C2385 + C49315 * C2392 + C33798 * C10301 +
              C49300 * C10303) *
                 C48892) *
                C49054) *
               C48978 * C49279 -
           (((C33994 + C33995 + C33996 + C33997) * C48892 +
             (C33998 + C33999 + C34000 + C34001) * C9128) *
                C49054 +
            ((C33839 + C33838 + C33837 + C33836) * C48892 +
             (C33835 + C33834 + C33833 + C33832) * C9128) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C393 -
           (((C30853 * C9831 + C49094 * C9834 + C30852 * C1936 +
              C30850 * C1941) *
                 C48892 +
             (C30853 * C9828 + C49094 * C9830 + C30852 * C1932 +
              C30850 * C1935) *
                 C9128) *
                C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C9128 + (C31236 + C31235) * C48892) * C49326 +
            ((C32580 + C32579) * C9128 + (C32578 + C32577) * C48892) * C49322 +
            ((C32576 + C32575) * C9128 + (C32574 + C32573) * C48892) * C49312 +
            ((C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C7914 + (C31236 + C31235) * C49316 +
             (C31234 + C31233) * C7915 + (C31232 + C31231) * C49303 +
             (C31230 + C31229) * C7916 + (C31228 + C31227) * C49271) *
                C22509 +
            ((C32580 + C32579) * C7914 + (C32578 + C32577) * C49316 +
             (C35421 + C35420) * C7915 + (C35419 + C35418) * C49303 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C7916 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C393 -
           (((C33798 * C11176 + C49300 * C11179 + C33797 * C3358 +
              C49315 * C3363 + C33796 * C2377 + C49324 * C2388 + C33795 * C703 +
              C49327 * C712) *
                 C48892 +
             (C33798 * C11173 + C49300 * C11175 + C33797 * C3354 +
              C49315 * C3357 + C33796 * C2370 + C49324 * C2376 + C33795 * C697 +
              C49327 * C702) *
                 C9128) *
                C49054 +
            ((C33798 * C3772 + C49300 * C3777 + C33797 * C2908 +
              C49315 * C2914 + C33796 * C954 + C49324 * C963 + C33795 * C409 +
              C49327 * C417) *
                 C48892 +
             (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 +
              C49315 * C2909 + C33796 * C948 + C49324 * C953 + C33795 * C399 +
              C49327 * C410) *
                 C9128) *
                C22509) *
               C49281) *
              C48961 * C261 +
          ((((C34155 + C34154 + C34153 + C34152) * C9128 +
             (C34151 + C34150 + C34149 + C34148) * C48892) *
                C22509 +
            ((C33795 * C698 + C49327 * C704 + C33796 * C2371 + C49324 * C2378 +
              C33797 * C3355 + C49315 * C3359 + C33798 * C17901 +
              C49300 * C17902) *
                 C9128 +
             (C33795 * C705 + C49327 * C713 + C33796 * C2379 + C49324 * C2389 +
              C33797 * C3360 + C49315 * C3364 + C33798 * C17903 +
              C49300 * C17904) *
                 C48892) *
                C49054) *
               C49281 -
           (((C33994 + C33995 + C33996 + C33997) * C48892 +
             (C33998 + C33999 + C34000 + C34001) * C9128) *
                C49054 +
            ((C33839 + C33838 + C33837 + C33836) * C48892 +
             (C33835 + C33834 + C33833 + C33832) * C9128) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C48978 * C525 -
           (((C30853 * C9331 + C49094 * C9335 + C30852 * C1761 +
              C30850 * C1766) *
                 C48892 +
             (C30853 * C9329 + C49094 * C9332 + C30852 * C1757 +
              C30850 * C1760) *
                 C9128) *
                C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C9128 + C32328 * C48892) * C49326 +
            (C32337 * C9128 + C32338 * C48892) * C49322 +
            ((C32362 + C32361) * C9128 + (C32360 + C32359) * C48892) * C49312 +
            ((C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
              C49094 * C9333) *
                 C9128 +
             (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
              C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C48978 * C525 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C7914 + C32328 * C49316 + C35018 * C7915 +
             C35019 * C49303 + (C31064 + C31063) * C7916 +
             (C31062 + C31061) * C49271) *
                C22509 +
            (C32337 * C7914 + C32338 * C49316 + (C32124 + C32123) * C7915 +
             (C32122 + C32121) * C49303 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C7916 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C48978 * C525 -
           (((C33798 * C10298 + C49300 * C10302 + C33797 * C2383 +
              C49315 * C2391 + C33796 * C1469 + C49324 * C1475 + C33795 * C601 +
              C49327 * C610) *
                 C48892 +
             (C33798 * C10296 + C49300 * C10299 + C33797 * C2373 +
              C49315 * C2382 + C33796 * C1463 + C49324 * C1470 + C33795 * C595 +
              C49327 * C600) *
                 C9128) *
                C49054 +
            ((C42491 + C42490 + C42489 + C42488) * C48892 +
             (C42487 + C42486 + C42485 + C42484) * C9128) *
                C22509) *
               C48978 * C49279) *
              C527 +
          ((((C34001 + C34000 + C33999 + C33998) * C9128 +
             (C33997 + C33996 + C33995 + C33994) * C48892) *
                C22509 +
            ((C33795 * C596 + C49327 * C602 + C33796 * C1462 + C49324 * C1468 +
              C33797 * C2374 + C49315 * C2384 + C33798 * C10297 +
              C49300 * C10300) *
                 C9128 +
             (C33795 * C603 + C49327 * C611 + C33796 * C1467 + C49324 * C1474 +
              C33797 * C2385 + C49315 * C2392 + C33798 * C10301 +
              C49300 * C10303) *
                 C48892) *
                C49054) *
               C48978 * C49279 -
           (((C33994 + C33995 + C33996 + C33997) * C48892 +
             (C33998 + C33999 + C34000 + C34001) * C9128) *
                C49054 +
            ((C33839 + C33838 + C33837 + C33836) * C48892 +
             (C33835 + C33834 + C33833 + C33832) * C9128) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           C41732 * C49312 + C41739 * C49294) *
              C48978 * C591 -
          (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
           ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
           ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
           ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
              C48978 * C592 +
          (C41732 * C49326 + C41739 * C49322 +
           ((C41738 + C41737) * C9128 + (C41736 + C41735) * C48892) * C49312 +
           ((C30852 * C9211 + C30850 * C9214 + C30853 * C9578 +
             C49094 * C9579) *
                C9128 +
            (C30852 * C9213 + C30850 * C9217 + C30853 * C9580 +
             C49094 * C9581) *
                C48892) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C48978 * C591 -
          (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
            C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
            (C32356 + C32355) * C7914) *
               C49054 +
           (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
            C32350 * C7915 + (C32354 + C32353) * C49316 +
            (C32352 + C32351) * C7914) *
               C22509) *
              C48978 * C592 +
          ((C32921 * C7914 + C32922 * C49316 + C32337 * C7915 +
            C32338 * C49303 + (C32124 + C32123) * C7916 +
            (C32122 + C32121) * C49271) *
               C22509 +
           ((C32938 + C32937) * C7914 + (C32936 + C32935) * C49316 +
            (C32362 + C32361) * C7915 + (C32360 + C32359) * C49303 +
            (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
             C49094 * C1939) *
                C7916 +
            (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
             C49094 * C1943) *
                C49271) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C9128 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C48892) *
               C22509 +
           ((C42484 + C42485 + C42486 + C42487) * C9128 +
            (C42488 + C42489 + C42490 + C42491) * C48892) *
               C49054) *
              C48978 * C591 -
          (((C42866 + C42867 + C42868 + C42869) * C48892 +
            (C42870 + C42871 + C42872 + C42873) * C9128) *
               C49054 +
           ((C42491 + C42490 + C42489 + C42488) * C48892 +
            (C42487 + C42486 + C42485 + C42484) * C9128) *
               C22509) *
              C48978 * C592 +
          (((C42873 + C42872 + C42871 + C42870) * C9128 +
            (C42869 + C42868 + C42867 + C42866) * C48892) *
               C22509 +
           ((C33795 * C1253 + C49327 * C1260 + C33796 * C1932 + C49324 * C1935 +
             C33797 * C9828 + C49315 * C9830 + C33798 * C10731 +
             C49300 * C10732) *
                C9128 +
            (C33795 * C1259 + C49327 * C1265 + C33796 * C1936 + C49324 * C1941 +
             C33797 * C9831 + C49315 * C9834 + C33798 * C10733 +
             C49300 * C10734) *
                C48892) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C393 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C9128 + (C33157 + C33156) * C48892) * C49326 +
            ((C33155 + C33154) * C9128 + (C33153 + C33152) * C48892) * C49322 +
            ((C41881 + C41880) * C9128 + (C41879 + C41878) * C48892) * C49312 +
            ((C30852 * C9329 + C30850 * C9332 + C30853 * C9829 +
              C49094 * C9832) *
                 C9128 +
             (C30852 * C9331 + C30850 * C9335 + C30853 * C9833 +
              C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C7914 + (C33157 + C33156) * C49316 +
             (C32580 + C32579) * C7915 + (C32578 + C32577) * C49303 +
             (C35421 + C35420) * C7916 + (C35419 + C35418) * C49271) *
                C22509 +
            ((C33155 + C33154) * C7914 + (C33153 + C33152) * C49316 +
             (C32576 + C32575) * C7915 + (C32574 + C32573) * C49303 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C7916 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C393 -
           (((C43020 + C43021 + C43022 + C43023) * C48892 +
             (C43024 + C43025 + C43026 + C43027) * C9128) *
                C49054 +
            ((C33798 * C3772 + C49300 * C3777 + C33797 * C2908 +
              C49315 * C2914 + C33796 * C954 + C49324 * C963 + C33795 * C409 +
              C49327 * C417) *
                 C48892 +
             (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 +
              C49315 * C2909 + C33796 * C948 + C49324 * C953 + C33795 * C399 +
              C49327 * C410) *
                 C9128) *
                C22509) *
               C49281) *
              C525 +
          ((((C43027 + C43026 + C43025 + C43024) * C9128 +
             (C43023 + C43022 + C43021 + C43020) * C48892) *
                C22509 +
            ((C33795 * C1463 + C49327 * C1470 + C33796 * C2373 +
              C49324 * C2382 + C33797 * C10296 + C49315 * C10299 +
              C33798 * C11174 + C49300 * C11177) *
                 C9128 +
             (C33795 * C1469 + C49327 * C1475 + C33796 * C2383 +
              C49324 * C2391 + C33797 * C10298 + C49315 * C10302 +
              C33798 * C11178 + C49300 * C11180) *
                 C48892) *
                C49054) *
               C49281 -
           (((C42866 + C42867 + C42868 + C42869) * C48892 +
             (C42870 + C42871 + C42872 + C42873) * C9128) *
                C49054 +
            ((C42491 + C42490 + C42489 + C42488) * C48892 +
             (C42487 + C42486 + C42485 + C42484) * C9128) *
                C22509) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C799 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C9128 + (C31236 + C31235) * C48892) * C49326 +
            ((C32580 + C32579) * C9128 + (C32578 + C32577) * C48892) * C49322 +
            ((C32576 + C32575) * C9128 + (C32574 + C32573) * C48892) * C49312 +
            ((C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C7914 + (C31236 + C31235) * C49316 +
             (C31234 + C31233) * C7915 + (C31232 + C31231) * C49303 +
             (C31230 + C31229) * C7916 + (C31228 + C31227) * C49271) *
                C22509 +
            ((C32580 + C32579) * C7914 + (C32578 + C32577) * C49316 +
             (C35421 + C35420) * C7915 + (C35419 + C35418) * C49303 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C7916 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C799 -
           (((C43020 + C43021 + C43022 + C43023) * C48892 +
             (C43024 + C43025 + C43026 + C43027) * C9128) *
                C49054 +
            ((C33798 * C3772 + C49300 * C3777 + C33797 * C2908 +
              C49315 * C2914 + C33796 * C954 + C49324 * C963 + C33795 * C409 +
              C49327 * C417) *
                 C48892 +
             (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 +
              C49315 * C2909 + C33796 * C948 + C49324 * C953 + C33795 * C399 +
              C49327 * C410) *
                 C9128) *
                C22509) *
               C49281) *
              C48961 * C527 +
          ((((C34155 + C34154 + C34153 + C34152) * C9128 +
             (C34151 + C34150 + C34149 + C34148) * C48892) *
                C22509 +
            ((C33795 * C698 + C49327 * C704 + C33796 * C2371 + C49324 * C2378 +
              C33797 * C3355 + C49315 * C3359 + C33798 * C17901 +
              C49300 * C17902) *
                 C9128 +
             (C33795 * C705 + C49327 * C713 + C33796 * C2379 + C49324 * C2389 +
              C33797 * C3360 + C49315 * C3364 + C33798 * C17903 +
              C49300 * C17904) *
                 C48892) *
                C49054) *
               C49281 -
           (((C33994 + C33995 + C33996 + C33997) * C48892 +
             (C33998 + C33999 + C34000 + C34001) * C9128) *
                C49054 +
            ((C33839 + C33838 + C33837 + C33836) * C48892 +
             (C33835 + C33834 + C33833 + C33832) * C9128) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C799 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C9128 + (C33157 + C33156) * C48892) * C49326 +
            ((C33155 + C33154) * C9128 + (C33153 + C33152) * C48892) * C49322 +
            ((C41881 + C41880) * C9128 + (C41879 + C41878) * C48892) * C49312 +
            ((C30852 * C9329 + C30850 * C9332 + C30853 * C9829 +
              C49094 * C9832) *
                 C9128 +
             (C30852 * C9331 + C30850 * C9335 + C30853 * C9833 +
              C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C7914 + (C33157 + C33156) * C49316 +
             (C32580 + C32579) * C7915 + (C32578 + C32577) * C49303 +
             (C35421 + C35420) * C7916 + (C35419 + C35418) * C49271) *
                C22509 +
            ((C33155 + C33154) * C7914 + (C33153 + C33152) * C49316 +
             (C32576 + C32575) * C7915 + (C32574 + C32573) * C49303 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C7916 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
              C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                 C9128 +
             (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
              C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                 C48892) *
                C22509 +
            ((C42484 + C42485 + C42486 + C42487) * C9128 +
             (C42488 + C42489 + C42490 + C42491) * C48892) *
                C49054) *
               C799 -
           (((C43020 + C43021 + C43022 + C43023) * C48892 +
             (C43024 + C43025 + C43026 + C43027) * C9128) *
                C49054 +
            ((C33798 * C3772 + C49300 * C3777 + C33797 * C2908 +
              C49315 * C2914 + C33796 * C954 + C49324 * C963 + C33795 * C409 +
              C49327 * C417) *
                 C48892 +
             (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 +
              C49315 * C2909 + C33796 * C948 + C49324 * C953 + C33795 * C399 +
              C49327 * C410) *
                 C9128) *
                C22509) *
               C49281) *
              C259 +
          ((((C43027 + C43026 + C43025 + C43024) * C9128 +
             (C43023 + C43022 + C43021 + C43020) * C48892) *
                C22509 +
            ((C33795 * C1463 + C49327 * C1470 + C33796 * C2373 +
              C49324 * C2382 + C33797 * C10296 + C49315 * C10299 +
              C33798 * C11174 + C49300 * C11177) *
                 C9128 +
             (C33795 * C1469 + C49327 * C1475 + C33796 * C2383 +
              C49324 * C2391 + C33797 * C10298 + C49315 * C10302 +
              C33798 * C11178 + C49300 * C11180) *
                 C48892) *
                C49054) *
               C49281 -
           (((C42866 + C42867 + C42868 + C42869) * C48892 +
             (C42870 + C42871 + C42872 + C42873) * C9128) *
                C49054 +
            ((C42491 + C42490 + C42489 + C42488) * C48892 +
             (C42487 + C42486 + C42485 + C42484) * C9128) *
                C22509) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           C41732 * C49312 + C41739 * C49294) *
              C945 -
          (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
           ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
           ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
           ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C48892 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C9128) *
               C49326) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C9128 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C48892) *
               C49326 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C9128 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C48892) *
               C49322 +
           ((C30852 * C2373 + C30850 * C2382 + C30853 * C10296 +
             C49094 * C10299) *
                C9128 +
            (C30852 * C2383 + C30850 * C2391 + C30853 * C10298 +
             C49094 * C10302) *
                C48892) *
               C49312 +
           ((C30852 * C9828 + C30850 * C9830 + C30853 * C10731 +
             C49094 * C10732) *
                C9128 +
            (C30852 * C9831 + C30850 * C9834 + C30853 * C10733 +
             C49094 * C10734) *
                C48892) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C945 -
          (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
            (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
            (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
               C49054 +
           ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
            (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49316 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C7914) *
               C22509) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C7914 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C49316 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C7915 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C49303 +
            (C30852 * C950 + C30850 * C957 + C30853 * C2900 + C49094 * C2905) *
                C7916 +
            (C30852 * C958 + C30850 * C965 + C30853 * C2904 + C49094 * C2912) *
                C49271) *
               C22509 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C7914 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C49316 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C7915 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C49303 +
            (C30852 * C2372 + C30850 * C2380 + C30853 * C3356 +
             C49094 * C3361) *
                C7916 +
            (C30852 * C2381 + C30850 * C2390 + C30853 * C3362 +
             C49094 * C3365) *
                C49271) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C9128 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C48892) *
               C22509 +
           ((C42484 + C42485 + C42486 + C42487) * C9128 +
            (C42488 + C42489 + C42490 + C42491) * C48892) *
               C49054) *
              C945 -
          (((C43020 + C43021 + C43022 + C43023) * C48892 +
            (C43024 + C43025 + C43026 + C43027) * C9128) *
               C49054 +
           ((C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
             C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
                C48892 +
            (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
             C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
                C9128) *
               C22509) *
              C946 +
          (((C33795 * C948 + C49327 * C953 + C33796 * C2902 + C49324 * C2909 +
             C33797 * C3768 + C49315 * C3771 + C33798 * C17987 +
             C49300 * C17990) *
                C9128 +
            (C33795 * C954 + C49327 * C963 + C33796 * C2908 + C49324 * C2914 +
             C33797 * C3772 + C49315 * C3777 + C33798 * C17989 +
             C49300 * C17993) *
                C48892) *
               C22509 +
           ((C33795 * C2370 + C49327 * C2376 + C33796 * C3354 + C49324 * C3357 +
             C33797 * C11173 + C49315 * C11175 + C33798 * C18221 +
             C49300 * C18222) *
                C9128 +
            (C33795 * C2377 + C49327 * C2388 + C33796 * C3358 + C49324 * C3363 +
             C33797 * C11176 + C49315 * C11179 + C33798 * C18223 +
             C49300 * C18224) *
                C48892) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47909 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C49229 +
                    (C36642 + C36643 + C36644) * C47890 +
                    (C36645 + C36646 + C36647) * C48902) *
                       C22509 +
                   ((C38200 + C38201 + C38202) * C47909 +
                    (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                    C38207 * C48902) *
                       C49054) *
                      C48978 * C48961 * C110 -
                  (((C36834 + C36835 + C36836) * C48902 +
                    (C36837 + C36838 + C36839) * C47890 + C38214 * C49229 +
                    C38215 * C47909) *
                       C49054 +
                   ((C36653 + C36652 + C36651) * C48902 +
                    (C36650 + C36649 + C36648) * C47890 +
                    (C36647 + C36646 + C36645) * C49229 +
                    (C36644 + C36643 + C36642) * C47909) *
                       C22509) *
                      C48978 * C48961 * C111 +
                  ((C36662 * C47909 + C36663 * C49229 +
                    (C36659 + C36658 + C36657) * C47890 +
                    (C36656 + C36655 + C36654) * C48902) *
                       C22509 +
                   ((C36839 + C36838 + C36837) * C47909 +
                    (C36836 + C36835 + C36834) * C49229 +
                    (C48044 * C264 + C49090 * C272 + C48036 * C700 +
                     C49097 * C708 + C48050 * C2714 + C36601 * C2715) *
                        C47890 +
                    (C48044 * C271 + C49090 * C282 + C48036 * C709 +
                     C49097 * C715 + C48050 * C2716 + C36601 * C2717) *
                        C48902) *
                       C49054) *
                      C48978 * C48961 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C48978 * C259 -
                   (((C38208 + C38209 + C38210) * C48902 +
                     (C38211 + C38212 + C38213) * C47890 +
                     (C38780 + C38781 + C38782) * C49229 +
                     (C38783 + C38784 + C38785) * C47909) *
                        C49054 +
                    (C38214 * C48902 + C38215 * C47890 +
                     (C38205 + C38204 + C38203) * C49229 +
                     (C38202 + C38201 + C38200) * C47909) *
                        C22509) *
                       C48978 * C49279) *
                      C261 +
                  (((C38206 * C47909 + C38207 * C49229 +
                     (C36839 + C36838 + C36837) * C47890 +
                     (C36836 + C36835 + C36834) * C48902) *
                        C22509 +
                    ((C38213 + C38212 + C38211) * C47909 +
                     (C38210 + C38209 + C38208) * C49229 +
                     (C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                      C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                         C47890 +
                     (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                      C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                         C48902) *
                        C49054) *
                       C48978 * C49279 -
                   (((C36834 + C36835 + C36836) * C48902 +
                     (C36837 + C36838 + C36839) * C47890 + C38214 * C49229 +
                     C38215 * C47909) *
                        C49054 +
                    ((C36653 + C36652 + C36651) * C48902 +
                     (C36650 + C36649 + C36648) * C47890 +
                     (C36647 + C36646 + C36645) * C49229 +
                     (C36644 + C36643 + C36642) * C47909) *
                        C22509) *
                       C48978 * C259) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C393 -
                   (((C38422 + C38423 + C38424) * C48902 +
                     (C38425 + C38426 + C38427) * C47890 +
                     (C38992 + C38993 + C38994) * C49229 +
                     (C38995 + C38996 + C38997) * C47909) *
                        C49054 +
                    ((C37022 + C37023 + C37024) * C48902 +
                     (C37025 + C37026 + C37027) * C47890 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C49229 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47909) *
                        C22509) *
                       C49281) *
                      C48961 * C261 +
                  ((((C37027 + C37026 + C37025) * C47909 +
                     (C37024 + C37023 + C37022) * C49229 +
                     (C37021 + C37020 + C37019) * C47890 +
                     (C37018 + C37017 + C37016) * C48902) *
                        C22509 +
                    ((C38427 + C38426 + C38425) * C47909 +
                     (C38424 + C38423 + C38422) * C49229 +
                     (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                      C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                         C47890 +
                     (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                      C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C36834 + C36835 + C36836) * C48902 +
                     (C36837 + C36838 + C36839) * C47890 + C38214 * C49229 +
                     C38215 * C47909) *
                        C49054 +
                    ((C36653 + C36652 + C36651) * C48902 +
                     (C36650 + C36649 + C36648) * C47890 +
                     (C36647 + C36646 + C36645) * C49229 +
                     (C36644 + C36643 + C36642) * C47909) *
                        C22509) *
                       C393) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C48978 * C525 -
                   (((C38208 + C38209 + C38210) * C48902 +
                     (C38211 + C38212 + C38213) * C47890 +
                     (C38780 + C38781 + C38782) * C49229 +
                     (C38783 + C38784 + C38785) * C47909) *
                        C49054 +
                    (C38214 * C48902 + C38215 * C47890 +
                     (C38205 + C38204 + C38203) * C49229 +
                     (C38202 + C38201 + C38200) * C47909) *
                        C22509) *
                       C48978 * C49279) *
                      C527 +
                  (((C38206 * C47909 + C38207 * C49229 +
                     (C36839 + C36838 + C36837) * C47890 +
                     (C36836 + C36835 + C36834) * C48902) *
                        C22509 +
                    ((C38213 + C38212 + C38211) * C47909 +
                     (C38210 + C38209 + C38208) * C49229 +
                     (C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                      C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                         C47890 +
                     (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                      C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                         C48902) *
                        C49054) *
                       C48978 * C49279 -
                   (((C36834 + C36835 + C36836) * C48902 +
                     (C36837 + C36838 + C36839) * C47890 + C38214 * C49229 +
                     C38215 * C47909) *
                        C49054 +
                    ((C36653 + C36652 + C36651) * C48902 +
                     (C36650 + C36649 + C36648) * C47890 +
                     (C36647 + C36646 + C36645) * C49229 +
                     (C36644 + C36643 + C36642) * C47909) *
                        C22509) *
                       C48978 * C525) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47909 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C49229 +
                    (C36642 + C36643 + C36644) * C47890 +
                    (C36645 + C36646 + C36647) * C48902) *
                       C22509 +
                   ((C38200 + C38201 + C38202) * C47909 +
                    (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                    C38207 * C48902) *
                       C49054) *
                      C48978 * C591 -
                  (((C38208 + C38209 + C38210) * C48902 +
                    (C38211 + C38212 + C38213) * C47890 +
                    (C38780 + C38781 + C38782) * C49229 +
                    (C38783 + C38784 + C38785) * C47909) *
                       C49054 +
                   (C38214 * C48902 + C38215 * C47890 +
                    (C38205 + C38204 + C38203) * C49229 +
                    (C38202 + C38201 + C38200) * C47909) *
                       C22509) *
                      C48978 * C592 +
                  (((C38785 + C38784 + C38783) * C47909 +
                    (C38782 + C38781 + C38780) * C49229 +
                    (C38213 + C38212 + C38211) * C47890 +
                    (C38210 + C38209 + C38208) * C48902) *
                       C22509 +
                   ((C48044 * C1253 + C49090 * C1260 + C48036 * C1932 +
                     C49097 * C1935 + C48050 * C9828 + C36601 * C9830) *
                        C47909 +
                    (C48044 * C1259 + C49090 * C1265 + C48036 * C1936 +
                     C49097 * C1941 + C48050 * C9831 + C36601 * C9834) *
                        C49229 +
                    (C48044 * C1252 + C49090 * C1258 + C48036 * C1933 +
                     C49097 * C1937 + C48050 * C10092 + C36601 * C10093) *
                        C47890 +
                    (C48044 * C1257 + C49090 * C1264 + C48036 * C1938 +
                     C49097 * C1942 + C48050 * C10094 + C36601 * C10095) *
                        C48902) *
                       C49054) *
                      C48978 * C593) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C393 -
                   (((C38422 + C38423 + C38424) * C48902 +
                     (C38425 + C38426 + C38427) * C47890 +
                     (C38992 + C38993 + C38994) * C49229 +
                     (C38995 + C38996 + C38997) * C47909) *
                        C49054 +
                    ((C37022 + C37023 + C37024) * C48902 +
                     (C37025 + C37026 + C37027) * C47890 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C49229 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47909) *
                        C22509) *
                       C49281) *
                      C525 +
                  ((((C38997 + C38996 + C38995) * C47909 +
                     (C38994 + C38993 + C38992) * C49229 +
                     (C38427 + C38426 + C38425) * C47890 +
                     (C38424 + C38423 + C38422) * C48902) *
                        C22509 +
                    ((C48044 * C1463 + C49090 * C1470 + C48036 * C2373 +
                      C49097 * C2382 + C48050 * C10296 + C36601 * C10299) *
                         C47909 +
                     (C48044 * C1469 + C49090 * C1475 + C48036 * C2383 +
                      C49097 * C2391 + C48050 * C10298 + C36601 * C10302) *
                         C49229 +
                     (C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                      C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                         C47890 +
                     (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                      C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C38208 + C38209 + C38210) * C48902 +
                     (C38211 + C38212 + C38213) * C47890 +
                     (C38780 + C38781 + C38782) * C49229 +
                     (C38783 + C38784 + C38785) * C47909) *
                        C49054 +
                    (C38214 * C48902 + C38215 * C47890 +
                     (C38205 + C38204 + C38203) * C49229 +
                     (C38202 + C38201 + C38200) * C47909) *
                        C22509) *
                       C393) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C799 -
                   (((C38422 + C38423 + C38424) * C48902 +
                     (C38425 + C38426 + C38427) * C47890 +
                     (C38992 + C38993 + C38994) * C49229 +
                     (C38995 + C38996 + C38997) * C47909) *
                        C49054 +
                    ((C37022 + C37023 + C37024) * C48902 +
                     (C37025 + C37026 + C37027) * C47890 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C49229 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47909) *
                        C22509) *
                       C49281) *
                      C48961 * C527 +
                  ((((C37027 + C37026 + C37025) * C47909 +
                     (C37024 + C37023 + C37022) * C49229 +
                     (C37021 + C37020 + C37019) * C47890 +
                     (C37018 + C37017 + C37016) * C48902) *
                        C22509 +
                    ((C38427 + C38426 + C38425) * C47909 +
                     (C38424 + C38423 + C38422) * C49229 +
                     (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                      C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                         C47890 +
                     (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                      C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C36834 + C36835 + C36836) * C48902 +
                     (C36837 + C36838 + C36839) * C47890 + C38214 * C49229 +
                     C38215 * C47909) *
                        C49054 +
                    ((C36653 + C36652 + C36651) * C48902 +
                     (C36650 + C36649 + C36648) * C47890 +
                     (C36647 + C36646 + C36645) * C49229 +
                     (C36644 + C36643 + C36642) * C47909) *
                        C22509) *
                       C799) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47909 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C49229 +
                     (C36642 + C36643 + C36644) * C47890 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C22509 +
                    ((C38200 + C38201 + C38202) * C47909 +
                     (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                     C38207 * C48902) *
                        C49054) *
                       C799 -
                   (((C38422 + C38423 + C38424) * C48902 +
                     (C38425 + C38426 + C38427) * C47890 +
                     (C38992 + C38993 + C38994) * C49229 +
                     (C38995 + C38996 + C38997) * C47909) *
                        C49054 +
                    ((C37022 + C37023 + C37024) * C48902 +
                     (C37025 + C37026 + C37027) * C47890 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C49229 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47909) *
                        C22509) *
                       C49281) *
                      C259 +
                  ((((C38997 + C38996 + C38995) * C47909 +
                     (C38994 + C38993 + C38992) * C49229 +
                     (C38427 + C38426 + C38425) * C47890 +
                     (C38424 + C38423 + C38422) * C48902) *
                        C22509 +
                    ((C48044 * C1463 + C49090 * C1470 + C48036 * C2373 +
                      C49097 * C2382 + C48050 * C10296 + C36601 * C10299) *
                         C47909 +
                     (C48044 * C1469 + C49090 * C1475 + C48036 * C2383 +
                      C49097 * C2391 + C48050 * C10298 + C36601 * C10302) *
                         C49229 +
                     (C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                      C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                         C47890 +
                     (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                      C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                         C48902) *
                        C49054) *
                       C49281 -
                   (((C38208 + C38209 + C38210) * C48902 +
                     (C38211 + C38212 + C38213) * C47890 +
                     (C38780 + C38781 + C38782) * C49229 +
                     (C38783 + C38784 + C38785) * C47909) *
                        C49054 +
                    (C38214 * C48902 + C38215 * C47890 +
                     (C38205 + C38204 + C38203) * C49229 +
                     (C38202 + C38201 + C38200) * C47909) *
                        C22509) *
                       C799) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47909 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C49229 +
                    (C36642 + C36643 + C36644) * C47890 +
                    (C36645 + C36646 + C36647) * C48902) *
                       C22509 +
                   ((C38200 + C38201 + C38202) * C47909 +
                    (C38203 + C38204 + C38205) * C49229 + C38206 * C47890 +
                    C38207 * C48902) *
                       C49054) *
                      C945 -
                  (((C38422 + C38423 + C38424) * C48902 +
                    (C38425 + C38426 + C38427) * C47890 +
                    (C38992 + C38993 + C38994) * C49229 +
                    (C38995 + C38996 + C38997) * C47909) *
                       C49054 +
                   ((C37022 + C37023 + C37024) * C48902 +
                    (C37025 + C37026 + C37027) * C47890 +
                    (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                     C49097 * C963 + C48044 * C409 + C49090 * C417) *
                        C49229 +
                    (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                     C49097 * C953 + C48044 * C399 + C49090 * C410) *
                        C47909) *
                       C22509) *
                      C946 +
                  (((C48044 * C948 + C49090 * C953 + C48036 * C2902 +
                     C49097 * C2909 + C48050 * C3768 + C36601 * C3771) *
                        C47909 +
                    (C48044 * C954 + C49090 * C963 + C48036 * C2908 +
                     C49097 * C2914 + C48050 * C3772 + C36601 * C3777) *
                        C49229 +
                    (C48044 * C949 + C49090 * C955 + C48036 * C2901 +
                     C49097 * C2907 + C48050 * C3769 + C36601 * C3773) *
                        C47890 +
                    (C48044 * C956 + C49090 * C964 + C48036 * C2906 +
                     C49097 * C2913 + C48050 * C3774 + C36601 * C3778) *
                        C48902) *
                       C22509 +
                   ((C48044 * C2370 + C49090 * C2376 + C48036 * C3354 +
                     C49097 * C3357 + C48050 * C11173 + C36601 * C11175) *
                        C47909 +
                    (C48044 * C2377 + C49090 * C2388 + C48036 * C3358 +
                     C49097 * C3363 + C48050 * C11176 + C36601 * C11179) *
                        C49229 +
                    (C48044 * C2371 + C49090 * C2378 + C48036 * C3355 +
                     C49097 * C3359 + C48050 * C17901 + C36601 * C17902) *
                        C47890 +
                    (C48044 * C2379 + C49090 * C2389 + C48036 * C3360 +
                     C49097 * C3364 + C48050 * C17903 + C36601 * C17904) *
                        C48902) *
                       C49054) *
                      C947) *
                 C48961 * C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
            C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
            C32350 * C7914) *
               C49054 +
           ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
            (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
            (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
               C22509) *
              C48978 * C48961 * C111 +
          ((C30903 * C7914 + C30904 * C49316 + C30905 * C7915 +
            C30906 * C49303 + (C30902 + C30901) * C7916 +
            (C30900 + C30899) * C49271) *
               C22509 +
           (C35018 * C7914 + C35019 * C49316 + (C31064 + C31063) * C7915 +
            (C31062 + C31061) * C49303 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C7916 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49271) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           (C32921 * C9128 + C32922 * C48892) * C49312 +
           ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
              C48978 * C48961 * C110 -
          (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
           (C32347 * C48892 + C32348 * C9128) * C49312 +
           (C32349 * C48892 + C32350 * C9128) * C49322 +
           ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
              C48978 * C48961 * C111 +
          ((C30903 * C9128 + C30904 * C48892) * C49326 +
           (C35018 * C9128 + C35019 * C48892) * C49322 +
           ((C32124 + C32123) * C9128 + (C32122 + C32121) * C48892) * C49312 +
           ((C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
             C49094 * C1939) *
                C9128 +
            (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
             C49094 * C1943) *
                C48892) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C48978 * C259 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C7914 + C32328 * C49316 + C35018 * C7915 +
             C35019 * C49303 + (C31064 + C31063) * C7916 +
             (C31062 + C31061) * C49271) *
                C22509 +
            (C32337 * C7914 + C32338 * C49316 + (C32124 + C32123) * C7915 +
             (C32122 + C32121) * C49303 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C7916 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C48978 * C259 -
           (((C30853 * C9331 + C49094 * C9335 + C30852 * C1761 +
              C30850 * C1766) *
                 C48892 +
             (C30853 * C9329 + C49094 * C9332 + C30852 * C1757 +
              C30850 * C1760) *
                 C9128) *
                C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C9128 + C32328 * C48892) * C49326 +
            (C32337 * C9128 + C32338 * C48892) * C49322 +
            ((C32362 + C32361) * C9128 + (C32360 + C32359) * C48892) * C49312 +
            ((C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
              C49094 * C9333) *
                 C9128 +
             (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
              C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C7914 + (C31236 + C31235) * C49316 +
             (C31234 + C31233) * C7915 + (C31232 + C31231) * C49303 +
             (C31230 + C31229) * C7916 + (C31228 + C31227) * C49271) *
                C22509 +
            ((C32580 + C32579) * C7914 + (C32578 + C32577) * C49316 +
             (C35421 + C35420) * C7915 + (C35419 + C35418) * C49303 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C7916 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C393 -
           (((C30853 * C9831 + C49094 * C9834 + C30852 * C1936 +
              C30850 * C1941) *
                 C48892 +
             (C30853 * C9828 + C49094 * C9830 + C30852 * C1932 +
              C30850 * C1935) *
                 C9128) *
                C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C9128 + (C31236 + C31235) * C48892) * C49326 +
            ((C32580 + C32579) * C9128 + (C32578 + C32577) * C48892) * C49322 +
            ((C32576 + C32575) * C9128 + (C32574 + C32573) * C48892) * C49312 +
            ((C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C48978 * C525 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C7914 + C32328 * C49316 + C35018 * C7915 +
             C35019 * C49303 + (C31064 + C31063) * C7916 +
             (C31062 + C31061) * C49271) *
                C22509 +
            (C32337 * C7914 + C32338 * C49316 + (C32124 + C32123) * C7915 +
             (C32122 + C32121) * C49303 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C7916 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            (C32921 * C9128 + C32922 * C48892) * C49312 +
            ((C32938 + C32937) * C9128 + (C32936 + C32935) * C48892) * C49294) *
               C48978 * C525 -
           (((C30853 * C9331 + C49094 * C9335 + C30852 * C1761 +
              C30850 * C1766) *
                 C48892 +
             (C30853 * C9329 + C49094 * C9332 + C30852 * C1757 +
              C30850 * C1760) *
                 C9128) *
                C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C9128 + C32328 * C48892) * C49326 +
            (C32337 * C9128 + C32338 * C48892) * C49322 +
            ((C32362 + C32361) * C9128 + (C32360 + C32359) * C48892) * C49312 +
            ((C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
              C49094 * C9333) *
                 C9128 +
             (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
              C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C48978 * C591 -
          (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
            C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
            (C32356 + C32355) * C7914) *
               C49054 +
           (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
            C32350 * C7915 + (C32354 + C32353) * C49316 +
            (C32352 + C32351) * C7914) *
               C22509) *
              C48978 * C592 +
          ((C32921 * C7914 + C32922 * C49316 + C32337 * C7915 +
            C32338 * C49303 + (C32124 + C32123) * C7916 +
            (C32122 + C32121) * C49271) *
               C22509 +
           ((C32938 + C32937) * C7914 + (C32936 + C32935) * C49316 +
            (C32362 + C32361) * C7915 + (C32360 + C32359) * C49303 +
            (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
             C49094 * C1939) *
                C7916 +
            (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
             C49094 * C1943) *
                C49271) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           C41732 * C49312 + C41739 * C49294) *
              C48978 * C591 -
          (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
           ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
           ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
           ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
              C48978 * C592 +
          (C41732 * C49326 + C41739 * C49322 +
           ((C41738 + C41737) * C9128 + (C41736 + C41735) * C48892) * C49312 +
           ((C30852 * C9211 + C30850 * C9214 + C30853 * C9578 +
             C49094 * C9579) *
                C9128 +
            (C30852 * C9213 + C30850 * C9217 + C30853 * C9580 +
             C49094 * C9581) *
                C48892) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C7914 + (C33157 + C33156) * C49316 +
             (C32580 + C32579) * C7915 + (C32578 + C32577) * C49303 +
             (C35421 + C35420) * C7916 + (C35419 + C35418) * C49271) *
                C22509 +
            ((C33155 + C33154) * C7914 + (C33153 + C33152) * C49316 +
             (C32576 + C32575) * C7915 + (C32574 + C32573) * C49303 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C7916 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C393 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C9128 + (C33157 + C33156) * C48892) * C49326 +
            ((C33155 + C33154) * C9128 + (C33153 + C33152) * C48892) * C49322 +
            ((C41881 + C41880) * C9128 + (C41879 + C41878) * C48892) * C49312 +
            ((C30852 * C9329 + C30850 * C9332 + C30853 * C9829 +
              C49094 * C9832) *
                 C9128 +
             (C30852 * C9331 + C30850 * C9335 + C30853 * C9833 +
              C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C7914 + (C31236 + C31235) * C49316 +
             (C31234 + C31233) * C7915 + (C31232 + C31231) * C49303 +
             (C31230 + C31229) * C7916 + (C31228 + C31227) * C49271) *
                C22509 +
            ((C32580 + C32579) * C7914 + (C32578 + C32577) * C49316 +
             (C35421 + C35420) * C7915 + (C35419 + C35418) * C49303 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C7916 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C49271 + (C31063 + C31064) * C7916 +
             C35214 * C49303 + C35215 * C7915 + C32349 * C49316 +
             C32350 * C7914) *
                C49054 +
            ((C30898 + C30897) * C49271 + (C30896 + C30895) * C7916 +
             (C30894 + C30893) * C49303 + (C30892 + C30891) * C7915 +
             (C30890 + C30889) * C49316 + (C30888 + C30887) * C7914) *
                C22509) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C799 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C9128 + (C31236 + C31235) * C48892) * C49326 +
            ((C32580 + C32579) * C9128 + (C32578 + C32577) * C48892) * C49322 +
            ((C32576 + C32575) * C9128 + (C32574 + C32573) * C48892) * C49312 +
            ((C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C32359 + C32360) * C48892 + (C32361 + C32362) * C9128) * C49294 +
            (C32347 * C48892 + C32348 * C9128) * C49312 +
            (C32349 * C48892 + C32350 * C9128) * C49322 +
            ((C30890 + C30889) * C48892 + (C30888 + C30887) * C9128) * C49326) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C7914 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C49316 +
             (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
             C30903 * C7916 + C30904 * C49271) *
                C22509 +
            ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
             C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
             C35019 * C49271) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
             (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
             (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
                C49054 +
            ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
             (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C49316 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C7914) *
                C22509) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C7914 + (C33157 + C33156) * C49316 +
             (C32580 + C32579) * C7915 + (C32578 + C32577) * C49303 +
             (C35421 + C35420) * C7916 + (C35419 + C35418) * C49271) *
                C22509 +
            ((C33155 + C33154) * C7914 + (C33153 + C33152) * C49316 +
             (C32576 + C32575) * C7915 + (C32574 + C32573) * C49303 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C7916 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C49271 + (C32123 + C32124) * C7916 +
             C32347 * C49303 + C32348 * C7915 + (C32358 + C32357) * C49316 +
             (C32356 + C32355) * C7914) *
                C49054 +
            (C35214 * C49271 + C35215 * C7916 + C32349 * C49303 +
             C32350 * C7915 + (C32354 + C32353) * C49316 +
             (C32352 + C32351) * C7914) *
                C22509) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C9128 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48892) *
                C49326 +
            ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
            C41732 * C49312 + C41739 * C49294) *
               C799 -
           (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
            ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
            ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
            ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48892 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C9128) *
                C49326) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C9128 + (C33157 + C33156) * C48892) * C49326 +
            ((C33155 + C33154) * C9128 + (C33153 + C33152) * C48892) * C49322 +
            ((C41881 + C41880) * C9128 + (C41879 + C41878) * C48892) * C49312 +
            ((C30852 * C9329 + C30850 * C9332 + C30853 * C9829 +
              C49094 * C9832) *
                 C9128 +
             (C30852 * C9331 + C30850 * C9335 + C30853 * C9833 +
              C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C41735 + C41736) * C48892 + (C41737 + C41738) * C9128) * C49294 +
            ((C32935 + C32936) * C48892 + (C32937 + C32938) * C9128) * C49312 +
            ((C32358 + C32357) * C48892 + (C32356 + C32355) * C9128) * C49322 +
            ((C32354 + C32353) * C48892 + (C32352 + C32351) * C9128) * C49326) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C7914 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49316 +
            (C30887 + C30888) * C7915 + (C30889 + C30890) * C49303 +
            C30903 * C7916 + C30904 * C49271) *
               C22509 +
           ((C32351 + C32352) * C7914 + (C32353 + C32354) * C49316 +
            C32327 * C7915 + C32328 * C49303 + C35018 * C7916 +
            C35019 * C49271) *
               C49054) *
              C945 -
          (((C35418 + C35419) * C49271 + (C35420 + C35421) * C7916 +
            (C32577 + C32578) * C49303 + (C32579 + C32580) * C7915 +
            (C33156 + C33157) * C49316 + (C33158 + C33159) * C7914) *
               C49054 +
           ((C31231 + C31232) * C49271 + (C31233 + C31234) * C7916 +
            (C31235 + C31236) * C49303 + (C31237 + C31238) * C7915 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49316 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C7914) *
               C22509) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C7914 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C49316 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C7915 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C49303 +
            (C30852 * C950 + C30850 * C957 + C30853 * C2900 + C49094 * C2905) *
                C7916 +
            (C30852 * C958 + C30850 * C965 + C30853 * C2904 + C49094 * C2912) *
                C49271) *
               C22509 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C7914 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C49316 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C7915 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C49303 +
            (C30852 * C2372 + C30850 * C2380 + C30853 * C3356 +
             C49094 * C3361) *
                C7916 +
            (C30852 * C2381 + C30850 * C2390 + C30853 * C3362 +
             C49094 * C3365) *
                C49271) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C9128 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48892) *
               C49326 +
           ((C32351 + C32352) * C9128 + (C32353 + C32354) * C48892) * C49322 +
           C41732 * C49312 + C41739 * C49294) *
              C945 -
          (((C41878 + C41879) * C48892 + (C41880 + C41881) * C9128) * C49294 +
           ((C33152 + C33153) * C48892 + (C33154 + C33155) * C9128) * C49312 +
           ((C33156 + C33157) * C48892 + (C33158 + C33159) * C9128) * C49322 +
           ((C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C48892 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C9128) *
               C49326) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C9128 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C48892) *
               C49326 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C9128 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C48892) *
               C49322 +
           ((C30852 * C2373 + C30850 * C2382 + C30853 * C10296 +
             C49094 * C10299) *
                C9128 +
            (C30852 * C2383 + C30850 * C2391 + C30853 * C10298 +
             C49094 * C10302) *
                C48892) *
               C49312 +
           ((C30852 * C9828 + C30850 * C9830 + C30853 * C10731 +
             C49094 * C10732) *
                C9128 +
            (C30852 * C9831 + C30850 * C9834 + C30853 * C10733 +
             C49094 * C10734) *
                C48892) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C1304 * C47909 + C1305 * C49229 + C311 * C47890 + C310 * C48902) *
               C11282 +
           (C1306 * C47909 + C1307 * C49229 + C1100 * C47890 + C1101 * C48902) *
               C11283 +
           (C1781 * C47909 + C1780 * C49229 + C1311 * C47890 + C1310 * C48902) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C1308 * C48902 + C1309 * C47890 + C1310 * C49229 + C1311 * C47909) *
               C49294 +
           (C1103 * C48902 + C1102 * C47890 + C1101 * C49229 + C1100 * C47909) *
               C11283 +
           (C308 * C48902 + C309 * C47890 + C310 * C49229 + C311 * C47909) *
               C11282 +
           (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
               C11281) *
              C48978 * C48961 * C111 +
          ((C170 * C47909 + C171 * C49229 + C172 * C47890 + C173 * C48902) *
               C11281 +
           (C309 * C47909 + C308 * C49229 + C307 * C47890 + C306 * C48902) *
               C11282 +
           (C1102 * C47909 + C1103 * C49229 + C1105 * C47890 + C1104 * C48902) *
               C11283 +
           (C1309 * C47909 + C1308 * C49229 +
            (C113 * C1254 + C49007 * C1261) * C47890 +
            (C113 * C1262 + C49007 * C1266) * C48902) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C1304 * C3884 + C1305 * C3878 + C311 * C3885 + C310 * C3879 +
            C309 * C3886 + C308 * C3880 + C307 * C3887 + C306 * C49288) *
               C49054) *
              C48978 * C48961 * C110 -
          ((C304 * C49288 + C305 * C3887 + C306 * C3880 + C307 * C3886 +
            C308 * C3879 + C309 * C3885 + C310 * C3878 + C311 * C3884) *
               C49054 +
           (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
            C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C170 * C3884 + C171 * C3878 + C172 * C3885 + C173 * C3879 +
            C174 * C3886 + C175 * C3880 + C177 * C3887 + C176 * C49288) *
               C49251 +
           (C309 * C3884 + C308 * C3878 + C307 * C3885 + C306 * C3879 +
            C305 * C3886 + C304 * C3880 +
            (C113 * C268 + C49007 * C279) * C3887 +
            (C113 * C280 + C49007 * C286) * C49288) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C47909 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49229 +
            (C15237 + C15238 + C15239) * C47890 +
            (C15240 + C15241 + C15242) * C48902) *
               C49251 +
           ((C16719 + C16720 + C16721) * C47909 +
            (C16722 + C16723 + C16724) * C49229 +
            (C15440 + C15439 + C15438) * C47890 +
            (C15437 + C15436 + C15435) * C48902) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C15429 + C15430 + C15431) * C48902 +
            (C15432 + C15433 + C15434) * C47890 +
            (C15435 + C15436 + C15437) * C49229 +
            (C15438 + C15439 + C15440) * C47909) *
               C49054 +
           ((C15248 + C15247 + C15246) * C48902 +
            (C15245 + C15244 + C15243) * C47890 +
            (C15242 + C15241 + C15240) * C49229 +
            (C15239 + C15238 + C15237) * C47909) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C15257 * C47909 + C15258 * C49229 +
            (C15254 + C15253 + C15252) * C47890 +
            (C15251 + C15250 + C15249) * C48902) *
               C49251 +
           ((C15434 + C15433 + C15432) * C47909 +
            (C15431 + C15430 + C15429) * C49229 +
            (C15197 * C264 + C15194 * C272 + C15198 * C700 + C15195 * C708 +
             C15199 * C2714 + C49287 * C2715) *
                C47890 +
            (C15197 * C271 + C15194 * C282 + C15198 * C709 + C15195 * C715 +
             C15199 * C2716 + C49287 * C2717) *
                C48902) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C48978 * C259 -
           ((C9243 * C48902 + C9242 * C47890 + C9241 * C49229 +
             C9240 * C47909) *
                C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C48978 * C49279) *
              C261 +
          (((C11430 + C11431 + C11432 + C11433) * C11281 +
            (C11434 + C11435 + C11436 + C11437) * C11282 +
            (C11438 + C11439 + C11440 + C11441) * C11283 +
            (C9242 * C47909 + C9243 * C49229 +
             (C113 * C1759 + C49007 * C1764) * C47890 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C48978 * C259 -
           ((C1104 * C49288 + C1105 * C3887 + C1103 * C3880 + C1102 * C3886 +
             C1101 * C3879 + C1100 * C3885 + C1307 * C3878 + C1306 * C3884) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C4027 + C4028 + C4029 + C4030 + C4031 + C4032 + C4033 + C4034) *
                C49251 +
            (C1100 * C3884 + C1101 * C3878 + C1102 * C3885 + C1103 * C3879 +
             C1105 * C3886 + C1104 * C3880 +
             (C113 * C599 + C49007 * C608) * C3887 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C48978 * C259 -
           (((C16736 + C16735 + C16734) * C48902 +
             (C16733 + C16732 + C16731) * C47890 +
             (C16730 + C16729 + C16728) * C49229 +
             (C16727 + C16726 + C16725) * C47909) *
                C49054 +
            (C18802 * C48902 + C18803 * C47890 +
             (C16724 + C16723 + C16722) * C49229 +
             (C16721 + C16720 + C16719) * C47909) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C18800 * C47909 + C18801 * C49229 +
             (C15434 + C15433 + C15432) * C47890 +
             (C15431 + C15430 + C15429) * C48902) *
                C49251 +
            ((C16731 + C16732 + C16733) * C47909 +
             (C16734 + C16735 + C16736) * C49229 +
             (C15197 * C597 + C15194 * C604 + C15198 * C1461 + C15195 * C1466 +
              C15199 * C2375 + C49287 * C2386) *
                 C47890 +
             (C15197 * C605 + C15194 * C612 + C15198 * C1465 + C15195 * C1473 +
              C15199 * C2387 + C49287 * C2393) *
                 C48902) *
                C49054) *
               C48978 * C49279 -
           (((C15429 + C15430 + C15431) * C48902 +
             (C15432 + C15433 + C15434) * C47890 + C18802 * C49229 +
             C18803 * C47909) *
                C49054 +
            ((C15248 + C15247 + C15246) * C48902 +
             (C15245 + C15244 + C15243) * C47890 +
             (C15242 + C15241 + C15240) * C49229 +
             (C15239 + C15238 + C15237) * C47909) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C393 -
           ((C11576 * C48902 + C11577 * C47890 + C9597 * C49229 +
             C9598 * C47909) *
                C49294 +
            (C1496 * C48902 + C1497 * C47890 + C1961 * C49229 +
             C1962 * C47909) *
                C11283 +
            (C1500 * C48902 + C1501 * C47890 + C1963 * C49229 +
             C1964 * C47909) *
                C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C48961 * C261 +
          (((C443 * C47909 + C442 * C49229 + C441 * C47890 + C440 * C48902) *
                C11281 +
            (C1501 * C47909 + C1500 * C49229 + C1499 * C47890 +
             C1498 * C48902) *
                C11282 +
            (C1497 * C47909 + C1496 * C49229 + C1495 * C47890 +
             C1494 * C48902) *
                C11283 +
            (C11577 * C47909 + C11576 * C49229 +
             (C113 * C1934 + C49007 * C1939) * C47890 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C393 -
           ((C4169 * C49288 + C4170 * C3887 + C1498 * C3880 + C1499 * C3886 +
             C1500 * C3879 + C1501 * C3885 + C1963 * C3878 + C1964 * C3884) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C48961 * C261 +
          (((C443 * C3884 + C442 * C3878 + C441 * C3885 + C440 * C3879 +
             C439 * C3886 + C438 * C3880 + C437 * C3887 + C436 * C49288) *
                C49251 +
            (C1501 * C3884 + C1500 * C3878 + C1499 * C3885 + C1498 * C3879 +
             C4170 * C3886 + C4169 * C3880 +
             (C113 * C701 + C49007 * C710) * C3887 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C393 -
           (((C19010 + C19011 + C19012) * C48902 +
             (C19013 + C19014 + C19015) * C47890 +
             (C17340 + C17341 + C17342) * C49229 +
             (C17343 + C17344 + C17345) * C47909) *
                C49054 +
            ((C15617 + C15618 + C15619) * C48902 +
             (C15620 + C15621 + C15622) * C47890 +
             (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C49229 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C47909) *
                C49251) *
               C49281) *
              C48961 * C261 +
          ((((C15622 + C15621 + C15620) * C47909 +
             (C15619 + C15618 + C15617) * C49229 +
             (C15616 + C15615 + C15614) * C47890 +
             (C15613 + C15612 + C15611) * C48902) *
                C49251 +
            ((C19015 + C19014 + C19013) * C47909 +
             (C19012 + C19011 + C19010) * C49229 +
             (C15197 * C699 + C15194 * C706 + C15198 * C2372 + C15195 * C2380 +
              C15199 * C3356 + C49287 * C3361) *
                 C47890 +
             (C15197 * C707 + C15194 * C714 + C15198 * C2381 + C15195 * C2390 +
              C15199 * C3362 + C49287 * C3365) *
                 C48902) *
                C49054) *
               C49281 -
           (((C15429 + C15430 + C15431) * C48902 +
             (C15432 + C15433 + C15434) * C47890 + C18802 * C49229 +
             C18803 * C47909) *
                C49054 +
            ((C15248 + C15247 + C15246) * C48902 +
             (C15245 + C15244 + C15243) * C47890 +
             (C15242 + C15241 + C15240) * C49229 +
             (C15239 + C15238 + C15237) * C47909) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C48978 * C525 -
           ((C9243 * C48902 + C9242 * C47890 + C9241 * C49229 +
             C9240 * C47909) *
                C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C48978 * C49279) *
              C527 +
          (((C11430 + C11431 + C11432 + C11433) * C11281 +
            (C11434 + C11435 + C11436 + C11437) * C11282 +
            (C11438 + C11439 + C11440 + C11441) * C11283 +
            (C9242 * C47909 + C9243 * C49229 +
             (C113 * C1759 + C49007 * C1764) * C47890 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C48978 * C525 -
           ((C1104 * C49288 + C1105 * C3887 + C1103 * C3880 + C1102 * C3886 +
             C1101 * C3879 + C1100 * C3885 + C1307 * C3878 + C1306 * C3884) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C4027 + C4028 + C4029 + C4030 + C4031 + C4032 + C4033 + C4034) *
                C49251 +
            (C1100 * C3884 + C1101 * C3878 + C1102 * C3885 + C1103 * C3879 +
             C1105 * C3886 + C1104 * C3880 +
             (C113 * C599 + C49007 * C608) * C3887 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C48978 * C525 -
           (((C16736 + C16735 + C16734) * C48902 +
             (C16733 + C16732 + C16731) * C47890 +
             (C16730 + C16729 + C16728) * C49229 +
             (C16727 + C16726 + C16725) * C47909) *
                C49054 +
            (C18802 * C48902 + C18803 * C47890 +
             (C16724 + C16723 + C16722) * C49229 +
             (C16721 + C16720 + C16719) * C47909) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C18800 * C47909 + C18801 * C49229 +
             (C15434 + C15433 + C15432) * C47890 +
             (C15431 + C15430 + C15429) * C48902) *
                C49251 +
            ((C16731 + C16732 + C16733) * C47909 +
             (C16734 + C16735 + C16736) * C49229 +
             (C15197 * C597 + C15194 * C604 + C15198 * C1461 + C15195 * C1466 +
              C15199 * C2375 + C49287 * C2386) *
                 C47890 +
             (C15197 * C605 + C15194 * C612 + C15198 * C1465 + C15195 * C1473 +
              C15199 * C2387 + C49287 * C2393) *
                 C48902) *
                C49054) *
               C48978 * C49279 -
           (((C15429 + C15430 + C15431) * C48902 +
             (C15432 + C15433 + C15434) * C47890 + C18802 * C49229 +
             C18803 * C47909) *
                C49054 +
            ((C15248 + C15247 + C15246) * C48902 +
             (C15245 + C15244 + C15243) * C47890 +
             (C15242 + C15241 + C15240) * C49229 +
             (C15239 + C15238 + C15237) * C47909) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
           C11815 * C49294) *
              C48978 * C591 -
          ((C11808 + C11809 + C11810 + C11811) * C49294 +
           (C11429 + C11428 + C11427 + C11426) * C11283 +
           (C11425 + C11424 + C11423 + C11422) * C11282 +
           (C11421 + C11420 + C11419 + C11418) * C11281) *
              C48978 * C592 +
          (C11814 * C11281 + C11815 * C11282 +
           (C11811 + C11810 + C11809 + C11808) * C11283 +
           (C9494 * C47909 + C9493 * C49229 +
            (C113 * C9212 + C49007 * C9215) * C47890 +
            (C113 * C9216 + C49007 * C9218) * C48902) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
               C49054) *
              C48978 * C591 -
          ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
               C49054 +
           (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
               C49251) *
              C48978 * C592 +
          ((C4406 + C4405 + C4404 + C4403 + C4402 + C4401 + C4400 + C4399) *
               C49251 +
           (C1781 * C3884 + C1780 * C3878 + C1311 * C3885 + C1310 * C3879 +
            C1309 * C3886 + C1308 * C3880 +
            (C113 * C1254 + C49007 * C1261) * C3887 +
            (C113 * C1262 + C49007 * C1266) * C49288) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C47909 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49229 +
            (C15237 + C15238 + C15239) * C47890 +
            (C15240 + C15241 + C15242) * C48902) *
               C49251 +
           ((C16719 + C16720 + C16721) * C47909 +
            (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
            C18801 * C48902) *
               C49054) *
              C48978 * C591 -
          (((C16736 + C16735 + C16734) * C48902 +
            (C16733 + C16732 + C16731) * C47890 +
            (C16730 + C16729 + C16728) * C49229 +
            (C16727 + C16726 + C16725) * C47909) *
               C49054 +
           (C18802 * C48902 + C18803 * C47890 +
            (C16724 + C16723 + C16722) * C49229 +
            (C16721 + C16720 + C16719) * C47909) *
               C49251) *
              C48978 * C592 +
          ((C17153 * C47909 + C17154 * C49229 +
            (C16731 + C16732 + C16733) * C47890 +
            (C16734 + C16735 + C16736) * C48902) *
               C49251 +
           ((C17160 + C17159 + C17158) * C47909 +
            (C17157 + C17156 + C17155) * C49229 +
            (C15197 * C1252 + C15194 * C1258 + C15198 * C1933 + C15195 * C1937 +
             C15199 * C10092 + C49287 * C10093) *
                C47890 +
            (C15197 * C1257 + C15194 * C1264 + C15198 * C1938 + C15195 * C1942 +
             C15199 * C10094 + C49287 * C10095) *
                C48902) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C393 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C525 +
          (((C11957 + C11956 + C11955 + C11954) * C11281 +
            (C11953 + C11952 + C11951 + C11950) * C11282 +
            (C11949 + C11948 + C11947 + C11946) * C11283 +
            (C9596 * C47909 + C9595 * C49229 +
             (C113 * C9330 + C49007 * C9333) * C47890 +
             (C113 * C9334 + C49007 * C9336) * C48902) *
                C49294) *
               C49281 -
           ((C11808 + C11809 + C11810 + C11811) * C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C393 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C525 +
          (((C4544 + C4543 + C4542 + C4541 + C4540 + C4539 + C4538 + C4537) *
                C49251 +
            (C1962 * C3884 + C1961 * C3878 + C1497 * C3885 + C1496 * C3879 +
             C1495 * C3886 + C1494 * C3880 +
             (C113 * C1464 + C49007 * C1471) * C3887 +
             (C113 * C1472 + C49007 * C1476) * C49288) *
                C49054) *
               C49281 -
           ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C393 -
           (((C19010 + C19011 + C19012) * C48902 +
             (C19013 + C19014 + C19015) * C47890 +
             (C17340 + C17341 + C17342) * C49229 +
             (C17343 + C17344 + C17345) * C47909) *
                C49054 +
            ((C15617 + C15618 + C15619) * C48902 +
             (C15620 + C15621 + C15622) * C47890 +
             (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C49229 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C47909) *
                C49251) *
               C49281) *
              C525 +
          ((((C17345 + C17344 + C17343) * C47909 +
             (C17342 + C17341 + C17340) * C49229 +
             (C19015 + C19014 + C19013) * C47890 +
             (C19012 + C19011 + C19010) * C48902) *
                C49251 +
            ((C17339 + C17338 + C17337) * C47909 +
             (C17336 + C17335 + C17334) * C49229 +
             (C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
              C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                 C47890 +
             (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
              C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                 C48902) *
                C49054) *
               C49281 -
           (((C16736 + C16735 + C16734) * C48902 +
             (C16733 + C16732 + C16731) * C47890 +
             (C16730 + C16729 + C16728) * C49229 +
             (C16727 + C16726 + C16725) * C47909) *
                C49054 +
            (C18802 * C48902 + C18803 * C47890 +
             (C16724 + C16723 + C16722) * C49229 +
             (C16721 + C16720 + C16719) * C47909) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C799 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C48961 * C527 +
          (((C443 * C47909 + C442 * C49229 + C441 * C47890 + C440 * C48902) *
                C11281 +
            (C1501 * C47909 + C1500 * C49229 + C1499 * C47890 +
             C1498 * C48902) *
                C11282 +
            (C1497 * C47909 + C1496 * C49229 + C1495 * C47890 +
             C1494 * C48902) *
                C11283 +
            (C11577 * C47909 + C11576 * C49229 +
             (C113 * C1934 + C49007 * C1939) * C47890 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C799 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C48961 * C527 +
          (((C443 * C3884 + C442 * C3878 + C441 * C3885 + C440 * C3879 +
             C439 * C3886 + C438 * C3880 + C437 * C3887 + C436 * C49288) *
                C49251 +
            (C1501 * C3884 + C1500 * C3878 + C1499 * C3885 + C1498 * C3879 +
             C4170 * C3886 + C4169 * C3880 +
             (C113 * C701 + C49007 * C710) * C3887 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C799 -
           (((C19010 + C19011 + C19012) * C48902 +
             (C19013 + C19014 + C19015) * C47890 +
             (C17340 + C17341 + C17342) * C49229 +
             (C17343 + C17344 + C17345) * C47909) *
                C49054 +
            ((C15617 + C15618 + C15619) * C48902 +
             (C15620 + C15621 + C15622) * C47890 +
             (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C49229 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C47909) *
                C49251) *
               C49281) *
              C48961 * C527 +
          ((((C15622 + C15621 + C15620) * C47909 +
             (C15619 + C15618 + C15617) * C49229 +
             (C15616 + C15615 + C15614) * C47890 +
             (C15613 + C15612 + C15611) * C48902) *
                C49251 +
            ((C19015 + C19014 + C19013) * C47909 +
             (C19012 + C19011 + C19010) * C49229 +
             (C15197 * C699 + C15194 * C706 + C15198 * C2372 + C15195 * C2380 +
              C15199 * C3356 + C49287 * C3361) *
                 C47890 +
             (C15197 * C707 + C15194 * C714 + C15198 * C2381 + C15195 * C2390 +
              C15199 * C3362 + C49287 * C3365) *
                 C48902) *
                C49054) *
               C49281 -
           (((C15429 + C15430 + C15431) * C48902 +
             (C15432 + C15433 + C15434) * C47890 + C18802 * C49229 +
             C18803 * C47909) *
                C49054 +
            ((C15248 + C15247 + C15246) * C48902 +
             (C15245 + C15244 + C15243) * C47890 +
             (C15242 + C15241 + C15240) * C49229 +
             (C15239 + C15238 + C15237) * C47909) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C799 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C259 +
          (((C11957 + C11956 + C11955 + C11954) * C11281 +
            (C11953 + C11952 + C11951 + C11950) * C11282 +
            (C11949 + C11948 + C11947 + C11946) * C11283 +
            (C9596 * C47909 + C9595 * C49229 +
             (C113 * C9330 + C49007 * C9333) * C47890 +
             (C113 * C9334 + C49007 * C9336) * C48902) *
                C49294) *
               C49281 -
           ((C11808 + C11809 + C11810 + C11811) * C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C799 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C259 +
          (((C4544 + C4543 + C4542 + C4541 + C4540 + C4539 + C4538 + C4537) *
                C49251 +
            (C1962 * C3884 + C1961 * C3878 + C1497 * C3885 + C1496 * C3879 +
             C1495 * C3886 + C1494 * C3880 +
             (C113 * C1464 + C49007 * C1471) * C3887 +
             (C113 * C1472 + C49007 * C1476) * C49288) *
                C49054) *
               C49281 -
           ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C47909 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C49229 +
             (C15237 + C15238 + C15239) * C47890 +
             (C15240 + C15241 + C15242) * C48902) *
                C49251 +
            ((C16719 + C16720 + C16721) * C47909 +
             (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
             C18801 * C48902) *
                C49054) *
               C799 -
           (((C19010 + C19011 + C19012) * C48902 +
             (C19013 + C19014 + C19015) * C47890 +
             (C17340 + C17341 + C17342) * C49229 +
             (C17343 + C17344 + C17345) * C47909) *
                C49054 +
            ((C15617 + C15618 + C15619) * C48902 +
             (C15620 + C15621 + C15622) * C47890 +
             (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C49229 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C47909) *
                C49251) *
               C49281) *
              C259 +
          ((((C17345 + C17344 + C17343) * C47909 +
             (C17342 + C17341 + C17340) * C49229 +
             (C19015 + C19014 + C19013) * C47890 +
             (C19012 + C19011 + C19010) * C48902) *
                C49251 +
            ((C17339 + C17338 + C17337) * C47909 +
             (C17336 + C17335 + C17334) * C49229 +
             (C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
              C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                 C47890 +
             (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
              C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                 C48902) *
                C49054) *
               C49281 -
           (((C16736 + C16735 + C16734) * C48902 +
             (C16733 + C16732 + C16731) * C47890 +
             (C16730 + C16729 + C16728) * C49229 +
             (C16727 + C16726 + C16725) * C47909) *
                C49054 +
            (C18802 * C48902 + C18803 * C47890 +
             (C16724 + C16723 + C16722) * C49229 +
             (C16721 + C16720 + C16719) * C47909) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
           C11815 * C49294) *
              C945 -
          ((C11946 + C11947 + C11948 + C11949) * C49294 +
           (C11950 + C11951 + C11952 + C11953) * C11283 +
           (C11954 + C11955 + C11956 + C11957) * C11282 +
           (C442 * C48902 + C443 * C47890 +
            (C113 * C409 + C49007 * C417) * C49229 +
            (C113 * C399 + C49007 * C410) * C47909) *
               C11281) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C47909 +
            (C113 * C954 + C49007 * C963) * C49229 +
            (C113 * C949 + C49007 * C955) * C47890 +
            (C113 * C956 + C49007 * C964) * C48902) *
               C11281 +
           ((C113 * C2370 + C49007 * C2376) * C47909 +
            (C113 * C2377 + C49007 * C2388) * C49229 +
            (C113 * C2371 + C49007 * C2378) * C47890 +
            (C113 * C2379 + C49007 * C2389) * C48902) *
               C11282 +
           ((C113 * C2373 + C49007 * C2382) * C47909 +
            (C113 * C2383 + C49007 * C2391) * C49229 +
            (C113 * C2374 + C49007 * C2384) * C47890 +
            (C113 * C2385 + C49007 * C2392) * C48902) *
               C11283 +
           ((C113 * C9828 + C49007 * C9830) * C47909 +
            (C113 * C9831 + C49007 * C9834) * C49229 +
            (C113 * C10092 + C49007 * C10093) * C47890 +
            (C113 * C10094 + C49007 * C10095) * C48902) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
               C49054) *
              C945 -
          ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
               C49054 +
           (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
            C442 * C3879 + C443 * C3885 +
            (C113 * C409 + C49007 * C417) * C3878 +
            (C113 * C399 + C49007 * C410) * C3884) *
               C49251) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C3884 +
            (C113 * C954 + C49007 * C963) * C3878 +
            (C113 * C949 + C49007 * C955) * C3885 +
            (C113 * C956 + C49007 * C964) * C3879 +
            (C113 * C950 + C49007 * C957) * C3886 +
            (C113 * C958 + C49007 * C965) * C3880 +
            (C113 * C951 + C49007 * C959) * C3887 +
            (C113 * C960 + C49007 * C966) * C49288) *
               C49251 +
           ((C113 * C2370 + C49007 * C2376) * C3884 +
            (C113 * C2377 + C49007 * C2388) * C3878 +
            (C113 * C2371 + C49007 * C2378) * C3885 +
            (C113 * C2379 + C49007 * C2389) * C3879 +
            (C113 * C2372 + C49007 * C2380) * C3886 +
            (C113 * C2381 + C49007 * C2390) * C3880 +
            (C113 * C2714 + C49007 * C2715) * C3887 +
            (C113 * C2716 + C49007 * C2717) * C49288) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C47909 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49229 +
            (C15237 + C15238 + C15239) * C47890 +
            (C15240 + C15241 + C15242) * C48902) *
               C49251 +
           ((C16719 + C16720 + C16721) * C47909 +
            (C16722 + C16723 + C16724) * C49229 + C18800 * C47890 +
            C18801 * C48902) *
               C49054) *
              C945 -
          (((C19010 + C19011 + C19012) * C48902 +
            (C19013 + C19014 + C19015) * C47890 +
            (C17340 + C17341 + C17342) * C49229 +
            (C17343 + C17344 + C17345) * C47909) *
               C49054 +
           ((C15617 + C15618 + C15619) * C48902 +
            (C15620 + C15621 + C15622) * C47890 +
            (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C49229 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C47909) *
               C49251) *
              C946 +
          (((C15197 * C948 + C15194 * C953 + C15198 * C2902 + C15195 * C2909 +
             C15199 * C3768 + C49287 * C3771) *
                C47909 +
            (C15197 * C954 + C15194 * C963 + C15198 * C2908 + C15195 * C2914 +
             C15199 * C3772 + C49287 * C3777) *
                C49229 +
            (C15197 * C949 + C15194 * C955 + C15198 * C2901 + C15195 * C2907 +
             C15199 * C3769 + C49287 * C3773) *
                C47890 +
            (C15197 * C956 + C15194 * C964 + C15198 * C2906 + C15195 * C2913 +
             C15199 * C3774 + C49287 * C3778) *
                C48902) *
               C49251 +
           ((C15197 * C2370 + C15194 * C2376 + C15198 * C3354 + C15195 * C3357 +
             C15199 * C11173 + C49287 * C11175) *
                C47909 +
            (C15197 * C2377 + C15194 * C2388 + C15198 * C3358 + C15195 * C3363 +
             C15199 * C11176 + C49287 * C11179) *
                C49229 +
            (C15197 * C2371 + C15194 * C2378 + C15198 * C3355 + C15195 * C3359 +
             C15199 * C17901 + C49287 * C17902) *
                C47890 +
            (C15197 * C2379 + C15194 * C2389 + C15198 * C3360 + C15195 * C3364 +
             C15199 * C17903 + C49287 * C17904) *
                C48902) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           (C13218 * C9128 + C13219 * C48892) * C11283 +
           ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
              C48978 * C48961 * C110 -
          (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
           (C12666 * C48892 + C12667 * C9128) * C11283 +
           (C6475 * C48892 + C6476 * C9128) * C11282 +
           ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
              C48978 * C48961 * C111 +
          ((C5053 * C9128 + C5054 * C48892) * C11281 +
           (C6251 * C9128 + C6252 * C48892) * C11282 +
           ((C6484 + C6483) * C9128 + (C6482 + C6481) * C48892) * C11283 +
           ((C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                C9128 +
            (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                C48892) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C5002 * C267 + C49252 * C278 + C5003 * C697 + C49094 * C702) *
                C1084 +
            (C5002 * C277 + C49252 * C285 + C5003 * C703 + C49094 * C712) *
                C1078 +
            (C5222 + C5221) * C1085 + (C5220 + C5219) * C1079 + C6251 * C1086 +
            C6252 * C49271) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
            (C5215 + C5216) * C1079 + (C5217 + C5218) * C1085 +
            (C5219 + C5220) * C1078 + (C5221 + C5222) * C1084) *
               C49054 +
           ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
            (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
            (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C5053 * C1084 + C5054 * C1078 + C5055 * C1085 + C5056 * C1079 +
            (C5052 + C5051) * C1086 + (C5050 + C5049) * C49271) *
               C49251 +
           (C6251 * C1084 + C6252 * C1078 + (C5214 + C5213) * C1085 +
            (C5212 + C5211) * C1079 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C1086 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49271) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C9128 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C48892) *
               C49251 +
           ((C20185 * C267 + C20181 * C278 + C20186 * C697 + C20182 * C702 +
             C20187 * C2370 + C20183 * C2376 + C20188 * C3354 +
             C49300 * C3357) *
                C9128 +
            (C20185 * C277 + C20181 * C285 + C20186 * C703 + C20182 * C712 +
             C20187 * C2377 + C20183 * C2388 + C20188 * C3358 +
             C49300 * C3363) *
                C48892) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C20384 + C20385 + C20386 + C20387) * C48892 +
            (C20388 + C20389 + C20390 + C20391) * C9128) *
               C49054 +
           ((C20229 + C20228 + C20227 + C20226) * C48892 +
            (C20225 + C20224 + C20223 + C20222) * C9128) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C20237 + C20236 + C20235 + C20234) * C9128 +
            (C20233 + C20232 + C20231 + C20230) * C48892) *
               C49251 +
           ((C20185 * C265 + C20181 * C274 + C20186 * C699 + C20182 * C706 +
             C20187 * C2372 + C20183 * C2380 + C20188 * C3356 +
             C49300 * C3361) *
                C9128 +
            (C20185 * C273 + C20181 * C283 + C20186 * C707 + C20182 * C714 +
             C20187 * C2381 + C20183 * C2390 + C20188 * C3362 +
             C49300 * C3365) *
                C48892) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C48978 * C259 -
           (((C5003 * C9331 + C49094 * C9335 + C5002 * C1761 + C49252 * C1766) *
                 C48892 +
             (C5003 * C9329 + C49094 * C9332 + C5002 * C1757 + C49252 * C1760) *
                 C9128) *
                C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C9128 + C6456 * C48892) * C11281 +
            (C12656 * C9128 + C12657 * C48892) * C11282 +
            ((C12671 + C12670) * C9128 + (C12669 + C12668) * C48892) * C11283 +
            ((C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                 C9128 +
             (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C48978 * C259 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C5003 * C1469 + C49094 * C1475 + C5002 * C601 + C49252 * C610) *
                 C1078 +
             (C5003 * C1463 + C49094 * C1470 + C5002 * C595 + C49252 * C600) *
                 C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C1084 + C6456 * C1078 + C6251 * C1085 + C6252 * C1079 +
             (C5214 + C5213) * C1086 + (C5212 + C5211) * C49271) *
                C49251 +
            ((C6488 + C6487) * C1084 + (C6486 + C6485) * C1078 +
             (C6484 + C6483) * C1085 + (C6482 + C6481) * C1079 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C1086 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C48978 * C259 -
           (((C20188 * C10298 + C49300 * C10302 + C20187 * C2383 +
              C20183 * C2391 + C20186 * C1469 + C20182 * C1475 + C20185 * C601 +
              C20181 * C610) *
                 C48892 +
             (C20188 * C10296 + C49300 * C10299 + C20187 * C2373 +
              C20183 * C2382 + C20186 * C1463 + C20182 * C1470 + C20185 * C595 +
              C20181 * C600) *
                 C9128) *
                C49054 +
            ((C21513 + C21512 + C21511 + C21510) * C48892 +
             (C21509 + C21508 + C21507 + C21506) * C9128) *
                C49251) *
               C48978 * C49279) *
              C261 +
          ((((C20391 + C20390 + C20389 + C20388) * C9128 +
             (C20387 + C20386 + C20385 + C20384) * C48892) *
                C49251 +
            ((C20185 * C596 + C20181 * C602 + C20186 * C1462 + C20182 * C1468 +
              C20187 * C2374 + C20183 * C2384 + C20188 * C10297 +
              C49300 * C10300) *
                 C9128 +
             (C20185 * C603 + C20181 * C611 + C20186 * C1467 + C20182 * C1474 +
              C20187 * C2385 + C20183 * C2392 + C20188 * C10301 +
              C49300 * C10303) *
                 C48892) *
                C49054) *
               C48978 * C49279 -
           (((C20384 + C20385 + C20386 + C20387) * C48892 +
             (C20388 + C20389 + C20390 + C20391) * C9128) *
                C49054 +
            ((C20229 + C20228 + C20227 + C20226) * C48892 +
             (C20225 + C20224 + C20223 + C20222) * C9128) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C393 -
           (((C5003 * C9831 + C49094 * C9834 + C5002 * C1936 + C49252 * C1941) *
                 C48892 +
             (C5003 * C9828 + C49094 * C9830 + C5002 * C1932 + C49252 * C1935) *
                 C9128) *
                C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C9128 + (C5386 + C5385) * C48892) * C11281 +
            ((C6706 + C6705) * C9128 + (C6704 + C6703) * C48892) * C11282 +
            ((C12877 + C12876) * C9128 + (C12875 + C12874) * C48892) * C11283 +
            ((C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C5003 * C2377 + C49094 * C2388 + C5002 * C703 + C49252 * C712) *
                 C1078 +
             (C5003 * C2370 + C49094 * C2376 + C5002 * C697 + C49252 * C702) *
                 C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C1084 + (C5386 + C5385) * C1078 +
             (C5384 + C5383) * C1085 + (C5382 + C5381) * C1079 +
             (C5380 + C5379) * C1086 + (C5378 + C5377) * C49271) *
                C49251 +
            ((C6706 + C6705) * C1084 + (C6704 + C6703) * C1078 +
             (C6702 + C6701) * C1085 + (C6700 + C6699) * C1079 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C1086 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C393 -
           (((C20188 * C11176 + C49300 * C11179 + C20187 * C3358 +
              C20183 * C3363 + C20186 * C2377 + C20182 * C2388 + C20185 * C703 +
              C20181 * C712) *
                 C48892 +
             (C20188 * C11173 + C49300 * C11175 + C20187 * C3354 +
              C20183 * C3357 + C20186 * C2370 + C20182 * C2376 + C20185 * C697 +
              C20181 * C702) *
                 C9128) *
                C49054 +
            ((C20188 * C3772 + C49300 * C3777 + C20187 * C2908 +
              C20183 * C2914 + C20186 * C954 + C20182 * C963 + C20185 * C409 +
              C20181 * C417) *
                 C48892 +
             (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 +
              C20183 * C2909 + C20186 * C948 + C20182 * C953 + C20185 * C399 +
              C20181 * C410) *
                 C9128) *
                C49251) *
               C49281) *
              C48961 * C261 +
          ((((C20545 + C20544 + C20543 + C20542) * C9128 +
             (C20541 + C20540 + C20539 + C20538) * C48892) *
                C49251 +
            ((C20185 * C698 + C20181 * C704 + C20186 * C2371 + C20182 * C2378 +
              C20187 * C3355 + C20183 * C3359 + C20188 * C17901 +
              C49300 * C17902) *
                 C9128 +
             (C20185 * C705 + C20181 * C713 + C20186 * C2379 + C20182 * C2389 +
              C20187 * C3360 + C20183 * C3364 + C20188 * C17903 +
              C49300 * C17904) *
                 C48892) *
                C49054) *
               C49281 -
           (((C20384 + C20385 + C20386 + C20387) * C48892 +
             (C20388 + C20389 + C20390 + C20391) * C9128) *
                C49054 +
            ((C20229 + C20228 + C20227 + C20226) * C48892 +
             (C20225 + C20224 + C20223 + C20222) * C9128) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C48978 * C525 -
           (((C5003 * C9331 + C49094 * C9335 + C5002 * C1761 + C49252 * C1766) *
                 C48892 +
             (C5003 * C9329 + C49094 * C9332 + C5002 * C1757 + C49252 * C1760) *
                 C9128) *
                C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C9128 + C6456 * C48892) * C11281 +
            (C12656 * C9128 + C12657 * C48892) * C11282 +
            ((C12671 + C12670) * C9128 + (C12669 + C12668) * C48892) * C11283 +
            ((C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                 C9128 +
             (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C48978 * C525 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C5003 * C1469 + C49094 * C1475 + C5002 * C601 + C49252 * C610) *
                 C1078 +
             (C5003 * C1463 + C49094 * C1470 + C5002 * C595 + C49252 * C600) *
                 C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C1084 + C6456 * C1078 + C6251 * C1085 + C6252 * C1079 +
             (C5214 + C5213) * C1086 + (C5212 + C5211) * C49271) *
                C49251 +
            ((C6488 + C6487) * C1084 + (C6486 + C6485) * C1078 +
             (C6484 + C6483) * C1085 + (C6482 + C6481) * C1079 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C1086 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C48978 * C525 -
           (((C20188 * C10298 + C49300 * C10302 + C20187 * C2383 +
              C20183 * C2391 + C20186 * C1469 + C20182 * C1475 + C20185 * C601 +
              C20181 * C610) *
                 C48892 +
             (C20188 * C10296 + C49300 * C10299 + C20187 * C2373 +
              C20183 * C2382 + C20186 * C1463 + C20182 * C1470 + C20185 * C595 +
              C20181 * C600) *
                 C9128) *
                C49054 +
            ((C21513 + C21512 + C21511 + C21510) * C48892 +
             (C21509 + C21508 + C21507 + C21506) * C9128) *
                C49251) *
               C48978 * C49279) *
              C527 +
          ((((C20391 + C20390 + C20389 + C20388) * C9128 +
             (C20387 + C20386 + C20385 + C20384) * C48892) *
                C49251 +
            ((C20185 * C596 + C20181 * C602 + C20186 * C1462 + C20182 * C1468 +
              C20187 * C2374 + C20183 * C2384 + C20188 * C10297 +
              C49300 * C10300) *
                 C9128 +
             (C20185 * C603 + C20181 * C611 + C20186 * C1467 + C20182 * C1474 +
              C20187 * C2385 + C20183 * C2392 + C20188 * C10301 +
              C49300 * C10303) *
                 C48892) *
                C49054) *
               C48978 * C49279 -
           (((C20384 + C20385 + C20386 + C20387) * C48892 +
             (C20388 + C20389 + C20390 + C20391) * C9128) *
                C49054 +
            ((C20229 + C20228 + C20227 + C20226) * C48892 +
             (C20225 + C20224 + C20223 + C20222) * C9128) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           C14577 * C11283 + C14584 * C49294) *
              C48978 * C591 -
          (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
           ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
           ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
           ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
              C48978 * C592 +
          (C14577 * C11281 + C14584 * C11282 +
           ((C14583 + C14582) * C9128 + (C14581 + C14580) * C48892) * C11283 +
           ((C5002 * C9211 + C49252 * C9214 + C5003 * C9578 + C49094 * C9579) *
                C9128 +
            (C5002 * C9213 + C49252 * C9217 + C5003 * C9580 + C49094 * C9581) *
                C48892) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
            C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
               C49054) *
              C48978 * C591 -
          (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
            (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
            (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
               C49054 +
           (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
            (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
               C49251) *
              C48978 * C592 +
          (((C7058 + C7057) * C1084 + (C7056 + C7055) * C1078 +
            (C6488 + C6487) * C1085 + (C6486 + C6485) * C1079 +
            (C6484 + C6483) * C1086 + (C6482 + C6481) * C49271) *
               C49251 +
           ((C5002 * C1253 + C49252 * C1260 + C5003 * C1932 + C49094 * C1935) *
                C1084 +
            (C5002 * C1259 + C49252 * C1265 + C5003 * C1936 + C49094 * C1941) *
                C1078 +
            (C5002 * C1252 + C49252 * C1258 + C5003 * C1933 + C49094 * C1937) *
                C1085 +
            (C5002 * C1257 + C49252 * C1264 + C5003 * C1938 + C49094 * C1942) *
                C1079 +
            (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                C1086 +
            (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                C49271) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C9128 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C48892) *
               C49251 +
           ((C21506 + C21507 + C21508 + C21509) * C9128 +
            (C21510 + C21511 + C21512 + C21513) * C48892) *
               C49054) *
              C48978 * C591 -
          (((C21888 + C21889 + C21890 + C21891) * C48892 +
            (C21892 + C21893 + C21894 + C21895) * C9128) *
               C49054 +
           ((C21513 + C21512 + C21511 + C21510) * C48892 +
            (C21509 + C21508 + C21507 + C21506) * C9128) *
               C49251) *
              C48978 * C592 +
          (((C21895 + C21894 + C21893 + C21892) * C9128 +
            (C21891 + C21890 + C21889 + C21888) * C48892) *
               C49251 +
           ((C20185 * C1253 + C20181 * C1260 + C20186 * C1932 + C20182 * C1935 +
             C20187 * C9828 + C20183 * C9830 + C20188 * C10731 +
             C49300 * C10732) *
                C9128 +
            (C20185 * C1259 + C20181 * C1265 + C20186 * C1936 + C20182 * C1941 +
             C20187 * C9831 + C20183 * C9834 + C20188 * C10733 +
             C49300 * C10734) *
                C48892) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C393 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C9128 + (C7262 + C7261) * C48892) * C11281 +
            ((C13444 + C13443) * C9128 + (C13442 + C13441) * C48892) * C11282 +
            ((C14726 + C14725) * C9128 + (C14724 + C14723) * C48892) * C11283 +
            ((C5002 * C9329 + C49252 * C9332 + C5003 * C9829 + C49094 * C9832) *
                 C9128 +
             (C5002 * C9331 + C49252 * C9335 + C5003 * C9833 + C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C1084 + (C7262 + C7261) * C1078 +
             (C6706 + C6705) * C1085 + (C6704 + C6703) * C1079 +
             (C6702 + C6701) * C1086 + (C6700 + C6699) * C49271) *
                C49251 +
            ((C5002 * C1463 + C49252 * C1470 + C5003 * C2373 + C49094 * C2382) *
                 C1084 +
             (C5002 * C1469 + C49252 * C1475 + C5003 * C2383 + C49094 * C2391) *
                 C1078 +
             (C5002 * C1462 + C49252 * C1468 + C5003 * C2374 + C49094 * C2384) *
                 C1085 +
             (C5002 * C1467 + C49252 * C1474 + C5003 * C2385 + C49094 * C2392) *
                 C1079 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C1086 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C393 -
           (((C22042 + C22043 + C22044 + C22045) * C48892 +
             (C22046 + C22047 + C22048 + C22049) * C9128) *
                C49054 +
            ((C20188 * C3772 + C49300 * C3777 + C20187 * C2908 +
              C20183 * C2914 + C20186 * C954 + C20182 * C963 + C20185 * C409 +
              C20181 * C417) *
                 C48892 +
             (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 +
              C20183 * C2909 + C20186 * C948 + C20182 * C953 + C20185 * C399 +
              C20181 * C410) *
                 C9128) *
                C49251) *
               C49281) *
              C525 +
          ((((C22049 + C22048 + C22047 + C22046) * C9128 +
             (C22045 + C22044 + C22043 + C22042) * C48892) *
                C49251 +
            ((C20185 * C1463 + C20181 * C1470 + C20186 * C2373 +
              C20182 * C2382 + C20187 * C10296 + C20183 * C10299 +
              C20188 * C11174 + C49300 * C11177) *
                 C9128 +
             (C20185 * C1469 + C20181 * C1475 + C20186 * C2383 +
              C20182 * C2391 + C20187 * C10298 + C20183 * C10302 +
              C20188 * C11178 + C49300 * C11180) *
                 C48892) *
                C49054) *
               C49281 -
           (((C21888 + C21889 + C21890 + C21891) * C48892 +
             (C21892 + C21893 + C21894 + C21895) * C9128) *
                C49054 +
            ((C21513 + C21512 + C21511 + C21510) * C48892 +
             (C21509 + C21508 + C21507 + C21506) * C9128) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C799 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C9128 + (C5386 + C5385) * C48892) * C11281 +
            ((C6706 + C6705) * C9128 + (C6704 + C6703) * C48892) * C11282 +
            ((C12877 + C12876) * C9128 + (C12875 + C12874) * C48892) * C11283 +
            ((C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C1084 + (C5386 + C5385) * C1078 +
             (C5384 + C5383) * C1085 + (C5382 + C5381) * C1079 +
             (C5380 + C5379) * C1086 + (C5378 + C5377) * C49271) *
                C49251 +
            ((C6706 + C6705) * C1084 + (C6704 + C6703) * C1078 +
             (C6702 + C6701) * C1085 + (C6700 + C6699) * C1079 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C1086 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C799 -
           (((C22042 + C22043 + C22044 + C22045) * C48892 +
             (C22046 + C22047 + C22048 + C22049) * C9128) *
                C49054 +
            ((C20188 * C3772 + C49300 * C3777 + C20187 * C2908 +
              C20183 * C2914 + C20186 * C954 + C20182 * C963 + C20185 * C409 +
              C20181 * C417) *
                 C48892 +
             (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 +
              C20183 * C2909 + C20186 * C948 + C20182 * C953 + C20185 * C399 +
              C20181 * C410) *
                 C9128) *
                C49251) *
               C49281) *
              C48961 * C527 +
          ((((C20545 + C20544 + C20543 + C20542) * C9128 +
             (C20541 + C20540 + C20539 + C20538) * C48892) *
                C49251 +
            ((C20185 * C698 + C20181 * C704 + C20186 * C2371 + C20182 * C2378 +
              C20187 * C3355 + C20183 * C3359 + C20188 * C17901 +
              C49300 * C17902) *
                 C9128 +
             (C20185 * C705 + C20181 * C713 + C20186 * C2379 + C20182 * C2389 +
              C20187 * C3360 + C20183 * C3364 + C20188 * C17903 +
              C49300 * C17904) *
                 C48892) *
                C49054) *
               C49281 -
           (((C20384 + C20385 + C20386 + C20387) * C48892 +
             (C20388 + C20389 + C20390 + C20391) * C9128) *
                C49054 +
            ((C20229 + C20228 + C20227 + C20226) * C48892 +
             (C20225 + C20224 + C20223 + C20222) * C9128) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C799 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C9128 + (C7262 + C7261) * C48892) * C11281 +
            ((C13444 + C13443) * C9128 + (C13442 + C13441) * C48892) * C11282 +
            ((C14726 + C14725) * C9128 + (C14724 + C14723) * C48892) * C11283 +
            ((C5002 * C9329 + C49252 * C9332 + C5003 * C9829 + C49094 * C9832) *
                 C9128 +
             (C5002 * C9331 + C49252 * C9335 + C5003 * C9833 + C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C1084 + (C7262 + C7261) * C1078 +
             (C6706 + C6705) * C1085 + (C6704 + C6703) * C1079 +
             (C6702 + C6701) * C1086 + (C6700 + C6699) * C49271) *
                C49251 +
            ((C5002 * C1463 + C49252 * C1470 + C5003 * C2373 + C49094 * C2382) *
                 C1084 +
             (C5002 * C1469 + C49252 * C1475 + C5003 * C2383 + C49094 * C2391) *
                 C1078 +
             (C5002 * C1462 + C49252 * C1468 + C5003 * C2374 + C49094 * C2384) *
                 C1085 +
             (C5002 * C1467 + C49252 * C1474 + C5003 * C2385 + C49094 * C2392) *
                 C1079 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C1086 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
              C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                 C9128 +
             (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
              C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                 C48892) *
                C49251 +
            ((C21506 + C21507 + C21508 + C21509) * C9128 +
             (C21510 + C21511 + C21512 + C21513) * C48892) *
                C49054) *
               C799 -
           (((C22042 + C22043 + C22044 + C22045) * C48892 +
             (C22046 + C22047 + C22048 + C22049) * C9128) *
                C49054 +
            ((C20188 * C3772 + C49300 * C3777 + C20187 * C2908 +
              C20183 * C2914 + C20186 * C954 + C20182 * C963 + C20185 * C409 +
              C20181 * C417) *
                 C48892 +
             (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 +
              C20183 * C2909 + C20186 * C948 + C20182 * C953 + C20185 * C399 +
              C20181 * C410) *
                 C9128) *
                C49251) *
               C49281) *
              C259 +
          ((((C22049 + C22048 + C22047 + C22046) * C9128 +
             (C22045 + C22044 + C22043 + C22042) * C48892) *
                C49251 +
            ((C20185 * C1463 + C20181 * C1470 + C20186 * C2373 +
              C20182 * C2382 + C20187 * C10296 + C20183 * C10299 +
              C20188 * C11174 + C49300 * C11177) *
                 C9128 +
             (C20185 * C1469 + C20181 * C1475 + C20186 * C2383 +
              C20182 * C2391 + C20187 * C10298 + C20183 * C10302 +
              C20188 * C11178 + C49300 * C11180) *
                 C48892) *
                C49054) *
               C49281 -
           (((C21888 + C21889 + C21890 + C21891) * C48892 +
             (C21892 + C21893 + C21894 + C21895) * C9128) *
                C49054 +
            ((C21513 + C21512 + C21511 + C21510) * C48892 +
             (C21509 + C21508 + C21507 + C21506) * C9128) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           C14577 * C11283 + C14584 * C49294) *
              C945 -
          (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
           ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
           ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
           ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C48892 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C9128) *
               C11281) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C9128 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C48892) *
               C11281 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C9128 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C48892) *
               C11282 +
           ((C5002 * C2373 + C49252 * C2382 + C5003 * C10296 +
             C49094 * C10299) *
                C9128 +
            (C5002 * C2383 + C49252 * C2391 + C5003 * C10298 +
             C49094 * C10302) *
                C48892) *
               C11283 +
           ((C5002 * C9828 + C49252 * C9830 + C5003 * C10731 +
             C49094 * C10732) *
                C9128 +
            (C5002 * C9831 + C49252 * C9834 + C5003 * C10733 +
             C49094 * C10734) *
                C48892) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
            C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
               C49054) *
              C945 -
          (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
            (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
            (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
               C49054 +
           ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
            (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C1078 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C1084) *
               C49251) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C1084 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C1078 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C1085 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C1079 +
            (C5002 * C950 + C49252 * C957 + C5003 * C2900 + C49094 * C2905) *
                C1086 +
            (C5002 * C958 + C49252 * C965 + C5003 * C2904 + C49094 * C2912) *
                C49271) *
               C49251 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C1084 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C1078 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C1085 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C1079 +
            (C5002 * C2372 + C49252 * C2380 + C5003 * C3356 + C49094 * C3361) *
                C1086 +
            (C5002 * C2381 + C49252 * C2390 + C5003 * C3362 + C49094 * C3365) *
                C49271) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C9128 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C48892) *
               C49251 +
           ((C21506 + C21507 + C21508 + C21509) * C9128 +
            (C21510 + C21511 + C21512 + C21513) * C48892) *
               C49054) *
              C945 -
          (((C22042 + C22043 + C22044 + C22045) * C48892 +
            (C22046 + C22047 + C22048 + C22049) * C9128) *
               C49054 +
           ((C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
             C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
                C48892 +
            (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
             C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
                C9128) *
               C49251) *
              C946 +
          (((C20185 * C948 + C20181 * C953 + C20186 * C2902 + C20182 * C2909 +
             C20187 * C3768 + C20183 * C3771 + C20188 * C17987 +
             C49300 * C17990) *
                C9128 +
            (C20185 * C954 + C20181 * C963 + C20186 * C2908 + C20182 * C2914 +
             C20187 * C3772 + C20183 * C3777 + C20188 * C17989 +
             C49300 * C17993) *
                C48892) *
               C49251 +
           ((C20185 * C2370 + C20181 * C2376 + C20186 * C3354 + C20182 * C3357 +
             C20187 * C11173 + C20183 * C11175 + C20188 * C18221 +
             C49300 * C18222) *
                C9128 +
            (C20185 * C2377 + C20181 * C2388 + C20186 * C3358 + C20182 * C3363 +
             C20187 * C11176 + C20183 * C11179 + C20188 * C18223 +
             C49300 * C18224) *
                C48892) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C49007 * C126) * C114 +
               (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48996 * C48978 * C48961 * C110 -
              (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
               C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
               C169 * C102 + C168 * C114) *
                  C48996 * C48978 * C48961 * C111 +
              (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
               C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
               (C113 * C125 + C49007 * C138) * C118 +
               (C113 * C139 + C49007 * C146) * C106) *
                  C48996 * C48978 * C48961 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C1084 +
                (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                C169 * C1079 + C170 * C1086 + C171 * C49271) *
                   C49319 +
               ((C113 * C267 + C49007 * C278) * C1084 +
                (C113 * C277 + C49007 * C285) * C1078 + C311 * C1085 +
                C310 * C1079 + C309 * C1086 + C308 * C49271) *
                   C49307 +
               ((C113 * C595 + C49007 * C600) * C1084 +
                (C113 * C601 + C49007 * C610) * C1078 + C1100 * C1085 +
                C1101 * C1079 + C1102 * C1086 + C1103 * C49271) *
                   C49284) *
                  C48978 * C48961 * C110 -
              ((C1104 * C49271 + C1105 * C1086 + C1103 * C1079 + C1102 * C1085 +
                C1101 * C1078 + C1100 * C1084) *
                   C49284 +
               (C306 * C49271 + C307 * C1086 + C308 * C1079 + C309 * C1085 +
                C310 * C1078 + C311 * C1084) *
                   C49307 +
               (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
                C169 * C1078 + C168 * C1084) *
                   C49319) *
                  C48978 * C48961 * C111 +
              ((C170 * C1084 + C171 * C1078 + C172 * C1085 + C173 * C1079 +
                C174 * C1086 + C175 * C49271) *
                   C49319 +
               (C309 * C1084 + C308 * C1078 + C307 * C1085 + C306 * C1079 +
                C305 * C1086 + C304 * C49271) *
                   C49307 +
               (C1102 * C1084 + C1103 * C1078 + C1105 * C1085 + C1104 * C1079 +
                (C113 * C599 + C49007 * C608) * C1086 +
                (C113 * C609 + C49007 * C614) * C49271) *
                   C49284) *
                  C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C48978 * C48961 * C110 -
          ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
           (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
           (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
              C48996 * C48978 * C48961 * C111 +
          (C2567 * C1084 + C2568 * C1078 + (C2564 + C2563 + C2562) * C1085 +
           (C2561 + C2560 + C2559) * C1079 +
           (C2507 * C123 + C49320 * C134 + C2508 * C395 + C49309 * C402 +
            C2509 * C952 + C49287 * C961) *
               C1086 +
           (C2507 * C135 + C49320 * C144 + C2508 * C401 + C49309 * C413 +
            C2509 * C962 + C49287 * C967) *
               C49271) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C1304 * C7914 + C1305 * C49316 + C311 * C7915 + C310 * C49303 +
            C309 * C7916 + C308 * C49271) *
               C7912 +
           (C1306 * C7914 + C1307 * C49316 + C1100 * C7915 + C1101 * C49303 +
            C1102 * C7916 + C1103 * C49271) *
               C49284) *
              C48978 * C48961 * C110 -
          ((C1104 * C49271 + C1105 * C7916 + C1103 * C49303 + C1102 * C7915 +
            C1101 * C49316 + C1100 * C7914) *
               C49284 +
           (C306 * C49271 + C307 * C7916 + C308 * C49303 + C309 * C7915 +
            C310 * C49316 + C311 * C7914) *
               C7912 +
           (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
            C169 * C49316 + C168 * C7914) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C170 * C7914 + C171 * C49316 + C172 * C7915 + C173 * C49303 +
            C174 * C7916 + C175 * C49271) *
               C7911 +
           (C309 * C7914 + C308 * C49316 + C307 * C7915 + C306 * C49303 +
            C305 * C7916 + C304 * C49271) *
               C7912 +
           (C1102 * C7914 + C1103 * C49316 + C1105 * C7915 + C1104 * C49303 +
            (C113 * C599 + C49007 * C608) * C7916 +
            (C113 * C609 + C49007 * C614) * C49271) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C1304 * C9128 + C1305 * C48892) * C9124 +
           (C1306 * C9128 + C1307 * C48892) * C9125 +
           (C1781 * C9128 + C1780 * C48892) * C9126 +
           ((C113 * C1757 + C49007 * C1760) * C9128 +
            (C113 * C1761 + C49007 * C1766) * C48892) *
               C9127) *
              C48978 * C48961 * C110 -
          (((C113 * C1763 + C49007 * C1767) * C48892 +
            (C113 * C1758 + C49007 * C1762) * C9128) *
               C9127 +
           (C1310 * C48892 + C1311 * C9128) * C9126 +
           (C1101 * C48892 + C1100 * C9128) * C9125 +
           (C310 * C48892 + C311 * C9128) * C9124 +
           (C169 * C48892 + C168 * C9128) * C9123) *
              C48978 * C48961 * C111 +
          ((C170 * C9128 + C171 * C48892) * C9123 +
           (C309 * C9128 + C308 * C48892) * C9124 +
           (C1102 * C9128 + C1103 * C48892) * C9125 +
           (C1309 * C9128 + C1308 * C48892) * C9126 +
           ((C113 * C1759 + C49007 * C1764) * C9128 +
            (C113 * C1765 + C49007 * C1768) * C48892) *
               C9127) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C2507 * C267 + C49320 * C278 + C2508 * C697 + C49309 * C702 +
             C2509 * C2370 + C49287 * C2376) *
                C9128 +
            (C2507 * C277 + C49320 * C285 + C2508 * C703 + C49309 * C712 +
             C2509 * C2377 + C49287 * C2388) *
                C48892) *
               C7912 +
           ((C2507 * C595 + C49320 * C600 + C2508 * C1463 + C49309 * C1470 +
             C2509 * C2373 + C49287 * C2382) *
                C9128 +
            (C2507 * C601 + C49320 * C610 + C2508 * C1469 + C49309 * C1475 +
             C2509 * C2383 + C49287 * C2391) *
                C48892) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C2509 * C2385 + C49287 * C2392 + C2508 * C1467 + C49309 * C1474 +
             C2507 * C603 + C49320 * C611) *
                C48892 +
            (C2509 * C2374 + C49287 * C2384 + C2508 * C1462 + C49309 * C1468 +
             C2507 * C596 + C49320 * C602) *
                C9128) *
               C49284 +
           ((C2749 + C2750 + C2751) * C48892 +
            (C2752 + C2753 + C2754) * C9128) *
               C7912 +
           ((C2552 + C2551 + C2550) * C48892 +
            (C2549 + C2548 + C2547) * C9128) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C2567 * C9128 + C2568 * C48892) * C7911 +
           ((C2748 + C2747 + C2746) * C9128 +
            (C2745 + C2744 + C2743) * C48892) *
               C7912 +
           ((C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
             C2509 * C2375 + C49287 * C2386) *
                C9128 +
            (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
             C2509 * C2387 + C49287 * C2393) *
                C48892) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                                C15195 * C410 + C15199 * C948 + C49287 * C953) *
                                   C7914 +
                               (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                                C15195 * C417 + C15199 * C954 + C49287 * C963) *
                                   C49316 +
                               (C15237 + C15238 + C15239) * C7915 +
                               (C15240 + C15241 + C15242) * C49303 +
                               C15257 * C7916 + C15258 * C49271) *
                                  C48996 * C48978 * C48961 * C110 -
                              ((C15249 + C15250 + C15251) * C49271 +
                               (C15252 + C15253 + C15254) * C7916 +
                               (C15248 + C15247 + C15246) * C49303 +
                               (C15245 + C15244 + C15243) * C7915 +
                               (C15242 + C15241 + C15240) * C49316 +
                               (C15239 + C15238 + C15237) * C7914) *
                                  C48996 * C48978 * C48961 * C111 +
                              (C15257 * C7914 + C15258 * C49316 +
                               (C15254 + C15253 + C15252) * C7915 +
                               (C15251 + C15250 + C15249) * C49303 +
                               (C15197 * C123 + C15194 * C134 + C15198 * C395 +
                                C15195 * C402 + C15199 * C952 + C49287 * C961) *
                                   C7916 +
                               (C15197 * C135 + C15194 * C144 + C15198 * C401 +
                                C15195 * C413 + C15199 * C962 + C49287 * C967) *
                                   C49271) *
                                  C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C9128 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C48892) *
               C49319 +
           ((C15197 * C267 + C15194 * C278 + C15198 * C697 + C15195 * C702 +
             C15199 * C2370 + C49287 * C2376) *
                C9128 +
            (C15197 * C277 + C15194 * C285 + C15198 * C703 + C15195 * C712 +
             C15199 * C2377 + C49287 * C2388) *
                C48892) *
               C49307 +
           ((C15197 * C595 + C15194 * C600 + C15198 * C1463 + C15195 * C1470 +
             C15199 * C2373 + C49287 * C2382) *
                C9128 +
            (C15197 * C601 + C15194 * C610 + C15198 * C1469 + C15195 * C1475 +
             C15199 * C2383 + C49287 * C2391) *
                C48892) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C15199 * C2385 + C49287 * C2392 + C15198 * C1467 + C15195 * C1474 +
             C15197 * C603 + C15194 * C611) *
                C48892 +
            (C15199 * C2374 + C49287 * C2384 + C15198 * C1462 + C15195 * C1468 +
             C15197 * C596 + C15194 * C602) *
                C9128) *
               C49284 +
           ((C15435 + C15436 + C15437) * C48892 +
            (C15438 + C15439 + C15440) * C9128) *
               C49307 +
           ((C15242 + C15241 + C15240) * C48892 +
            (C15239 + C15238 + C15237) * C9128) *
               C49319) *
              C48978 * C48961 * C111 +
          ((C15257 * C9128 + C15258 * C48892) * C49319 +
           ((C15434 + C15433 + C15432) * C9128 +
            (C15431 + C15430 + C15429) * C48892) *
               C49307 +
           ((C15197 * C597 + C15194 * C604 + C15198 * C1461 + C15195 * C1466 +
             C15199 * C2375 + C49287 * C2386) *
                C9128 +
            (C15197 * C605 + C15194 * C612 + C15198 * C1465 + C15195 * C1473 +
             C15199 * C2387 + C49287 * C2393) *
                C48892) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
            C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
            C17818 * C3768 + C17813 * C3771) *
               C9128 +
           (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
            C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
            C17818 * C3772 + C17813 * C3777) *
               C48892) *
              C48996 * C48978 * C48961 * C110 -
          ((C17818 * C3774 + C17813 * C3778 + C17817 * C2906 + C17812 * C2913 +
            C17816 * C956 + C17811 * C964 + C17815 * C407 + C17810 * C416 +
            C17814 * C129 + C17809 * C141) *
               C48892 +
           (C17818 * C3769 + C17813 * C3773 + C17817 * C2901 + C17812 * C2907 +
            C17816 * C949 + C17811 * C955 + C17815 * C398 + C17810 * C408 +
            C17814 * C120 + C17809 * C128) *
               C9128) *
              C48996 * C48978 * C48961 * C111 +
          ((C17814 * C121 + C17809 * C130 + C17815 * C397 + C17810 * C406 +
            C17816 * C950 + C17811 * C957 + C17817 * C2900 + C17812 * C2905 +
            C17818 * C3770 + C17813 * C3775) *
               C9128 +
           (C17814 * C131 + C17809 * C142 + C17815 * C405 + C17810 * C415 +
            C17816 * C958 + C17811 * C965 + C17817 * C2904 + C17812 * C2912 +
            C17818 * C3776 + C17813 * C3779) *
               C48892) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C48978 * C259 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C49007 * C285) * C102 +
                (C113 * C267 + C49007 * C278) * C114) *
                   C48996 * C48978 * C49279) *
                  C261 +
              ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                (C113 * C268 + C49007 * C279) * C118 +
                (C113 * C280 + C49007 * C286) * C106) *
                   C48996 * C48978 * C49279 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48996 * C48978 * C259) *
                  C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                   C48978 * C259 -
               ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                 C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                 (C113 * C1253 + C49007 * C1260) * C1084) *
                    C49284 +
                (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                   C48978 * C49279) *
                  C261 +
              (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 + C1308 * C1079 +
                 (C113 * C1254 + C49007 * C1261) * C1086 +
                 (C113 * C1262 + C49007 * C1266) * C49271) *
                    C49284) *
                   C48978 * C49279 -
               ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
                 C169 * C1078 + C168 * C1084) *
                    C49319) *
                   C48978 * C259) *
                  C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C48978 * C259 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C2754 + C2753 + C2752) * C1084 + (C2751 + C2750 + C2749) * C1078 +
            (C2748 + C2747 + C2746) * C1085 + (C2745 + C2744 + C2743) * C1079 +
            (C2507 * C264 + C49320 * C272 + C2508 * C700 + C49309 * C708 +
             C2509 * C2714 + C49287 * C2715) *
                C1086 +
            (C2507 * C271 + C49320 * C282 + C2508 * C709 + C49309 * C715 +
             C2509 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C48978 * C259 -
           ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 + C1311 * C7915 +
             C1780 * C49316 + C1781 * C7914) *
                C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C48978 * C49279) *
              C261 +
          (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
            (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
            (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 + C1308 * C49303 +
             (C113 * C1254 + C49007 * C1261) * C7916 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C48978 * C259 -
           (((C113 * C9213 + C49007 * C9217) * C48892 +
             (C113 * C9211 + C49007 * C9214) * C9128) *
                C9127 +
            (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
            (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
               C48978 * C49279) *
              C261 +
          (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
            (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
            ((C113 * C9212 + C49007 * C9215) * C9128 +
             (C113 * C9216 + C49007 * C9218) * C48892) *
                C9127) *
               C48978 * C49279 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C48978 * C259 -
           (((C2509 * C9831 + C49287 * C9834 + C2508 * C1936 + C49309 * C1941 +
              C2507 * C1259 + C49320 * C1265) *
                 C48892 +
             (C2509 * C9828 + C49287 * C9830 + C2508 * C1932 + C49309 * C1935 +
              C2507 * C1253 + C49320 * C1260) *
                 C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C48978 * C49279) *
              C261 +
          ((((C2754 + C2753 + C2752) * C9128 +
             (C2751 + C2750 + C2749) * C48892) *
                C7911 +
            ((C10145 + C10146 + C10147) * C9128 +
             (C10148 + C10149 + C10150) * C48892) *
                C7912 +
            ((C2507 * C1252 + C49320 * C1258 + C2508 * C1933 + C49309 * C1937 +
              C2509 * C10092 + C49287 * C10093) *
                 C9128 +
             (C2507 * C1257 + C49320 * C1264 + C2508 * C1938 + C49309 * C1942 +
              C2509 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C48978 * C259 -
           ((C15429 + C15430 + C15431) * C49271 +
            (C15432 + C15433 + C15434) * C7916 +
            (C15435 + C15436 + C15437) * C49303 +
            (C15438 + C15439 + C15440) * C7915 +
            (C15199 * C2377 + C49287 * C2388 + C15198 * C703 + C15195 * C712 +
             C15197 * C277 + C15194 * C285) *
                C49316 +
            (C15199 * C2370 + C49287 * C2376 + C15198 * C697 + C15195 * C702 +
             C15197 * C267 + C15194 * C278) *
                C7914) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C15440 + C15439 + C15438) * C7914 +
            (C15437 + C15436 + C15435) * C49316 +
            (C15434 + C15433 + C15432) * C7915 +
            (C15431 + C15430 + C15429) * C49303 +
            (C15197 * C264 + C15194 * C272 + C15198 * C700 + C15195 * C708 +
             C15199 * C2714 + C49287 * C2715) *
                C7916 +
            (C15197 * C271 + C15194 * C282 + C15198 * C709 + C15195 * C715 +
             C15199 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C15249 + C15250 + C15251) * C49271 +
            (C15252 + C15253 + C15254) * C7916 +
            (C15248 + C15247 + C15246) * C49303 +
            (C15245 + C15244 + C15243) * C7915 +
            (C15242 + C15241 + C15240) * C49316 +
            (C15239 + C15238 + C15237) * C7914) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            ((C16725 + C16726 + C16727) * C9128 +
             (C16728 + C16729 + C16730) * C48892) *
                C49284) *
               C48978 * C259 -
           (((C15199 * C9831 + C49287 * C9834 + C15198 * C1936 +
              C15195 * C1941 + C15197 * C1259 + C15194 * C1265) *
                 C48892 +
             (C15199 * C9828 + C49287 * C9830 + C15198 * C1932 +
              C15195 * C1935 + C15197 * C1253 + C15194 * C1260) *
                 C9128) *
                C49284 +
            ((C16730 + C16729 + C16728) * C48892 +
             (C16727 + C16726 + C16725) * C9128) *
                C49307 +
            ((C16724 + C16723 + C16722) * C48892 +
             (C16721 + C16720 + C16719) * C9128) *
                C49319) *
               C48978 * C49279) *
              C261 +
          ((((C15440 + C15439 + C15438) * C9128 +
             (C15437 + C15436 + C15435) * C48892) *
                C49319 +
            ((C16731 + C16732 + C16733) * C9128 +
             (C16734 + C16735 + C16736) * C48892) *
                C49307 +
            ((C15197 * C1252 + C15194 * C1258 + C15198 * C1933 +
              C15195 * C1937 + C15199 * C10092 + C49287 * C10093) *
                 C9128 +
             (C15197 * C1257 + C15194 * C1264 + C15198 * C1938 +
              C15195 * C1942 + C15199 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C16736 + C16735 + C16734) * C48892 +
             (C16733 + C16732 + C16731) * C9128) *
                C49284 +
            ((C15435 + C15436 + C15437) * C48892 +
             (C15438 + C15439 + C15440) * C9128) *
                C49307 +
            ((C15242 + C15241 + C15240) * C48892 +
             (C15239 + C15238 + C15237) * C9128) *
                C49319) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C48978 * C259 -
           ((C17818 * C11176 + C17813 * C11179 + C17817 * C3358 +
             C17812 * C3363 + C17816 * C2377 + C17811 * C2388 + C17815 * C703 +
             C17810 * C712 + C17814 * C277 + C17809 * C285) *
                C48892 +
            (C17818 * C11173 + C17813 * C11175 + C17817 * C3354 +
             C17812 * C3357 + C17816 * C2370 + C17811 * C2376 + C17815 * C697 +
             C17810 * C702 + C17814 * C267 + C17809 * C278) *
                C9128) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C17814 * C266 + C17809 * C276 + C17815 * C698 + C17810 * C704 +
             C17816 * C2371 + C17811 * C2378 + C17817 * C3355 + C17812 * C3359 +
             C17818 * C17901 + C17813 * C17902) *
                C9128 +
            (C17814 * C275 + C17809 * C284 + C17815 * C705 + C17810 * C713 +
             C17816 * C2379 + C17811 * C2389 + C17817 * C3360 + C17812 * C3364 +
             C17818 * C17903 + C17813 * C17904) *
                C48892) *
               C48996 * C48978 * C49279 -
           ((C17818 * C3774 + C17813 * C3778 + C17817 * C2906 + C17812 * C2913 +
             C17816 * C956 + C17811 * C964 + C17815 * C407 + C17810 * C416 +
             C17814 * C129 + C17809 * C141) *
                C48892 +
            (C17818 * C3769 + C17813 * C3773 + C17817 * C2901 + C17812 * C2907 +
             C17816 * C949 + C17811 * C955 + C17815 * C398 + C17810 * C408 +
             C17814 * C120 + C17809 * C128) *
                C9128) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C393 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C49007 * C417) * C102 +
                (C113 * C399 + C49007 * C410) * C114) *
                   C48996 * C49281) *
                  C48961 * C261 +
              ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                (C113 * C400 + C49007 * C411) * C118 +
                (C113 * C412 + C49007 * C418) * C106) *
                   C48996 * C49281 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48996 * C393) *
                  C48961 * C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                   C393 -
               ((C1494 * C49271 + C1495 * C1086 + C1496 * C1079 +
                 C1497 * C1085 + (C113 * C1469 + C49007 * C1475) * C1078 +
                 (C113 * C1463 + C49007 * C1470) * C1084) *
                    C49284 +
                (C1498 * C49271 + C1499 * C1086 + C1500 * C1079 +
                 C1501 * C1085 + (C113 * C703 + C49007 * C712) * C1078 +
                 (C113 * C697 + C49007 * C702) * C1084) *
                    C49307 +
                (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
                 (C113 * C409 + C49007 * C417) * C1078 +
                 (C113 * C399 + C49007 * C410) * C1084) *
                    C49319) *
                   C49281) *
                  C48961 * C261 +
              (((C443 * C1084 + C442 * C1078 + C441 * C1085 + C440 * C1079 +
                 C439 * C1086 + C438 * C49271) *
                    C49319 +
                (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 + C1498 * C1079 +
                 (C113 * C700 + C49007 * C708) * C1086 +
                 (C113 * C709 + C49007 * C715) * C49271) *
                    C49307 +
                (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 + C1494 * C1079 +
                 (C113 * C1464 + C49007 * C1471) * C1086 +
                 (C113 * C1472 + C49007 * C1476) * C49271) *
                    C49284) *
                   C49281 -
               ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
                 C169 * C1078 + C168 * C1084) *
                    C49319) *
                   C393) *
                  C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C393 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C2952 + C2951 + C2950) * C1084 + (C2949 + C2948 + C2947) * C1078 +
            (C2946 + C2945 + C2944) * C1085 + (C2943 + C2942 + C2941) * C1079 +
            (C2507 * C396 + C49320 * C404 + C2508 * C951 + C49309 * C959 +
             C2509 * C2903 + C49287 * C2910) *
                C1086 +
            (C2507 * C403 + C49320 * C414 + C2508 * C960 + C49309 * C966 +
             C2509 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C393 -
           ((C1494 * C49271 + C1495 * C7916 + C1496 * C49303 + C1497 * C7915 +
             C1961 * C49316 + C1962 * C7914) *
                C49284 +
            (C1498 * C49271 + C1499 * C7916 + C1500 * C49303 + C1501 * C7915 +
             C1963 * C49316 + C1964 * C7914) *
                C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C48961 * C261 +
          (((C443 * C7914 + C442 * C49316 + C441 * C7915 + C440 * C49303 +
             C439 * C7916 + C438 * C49271) *
                C7911 +
            (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 + C1498 * C49303 +
             C4170 * C7916 + C4169 * C49271) *
                C7912 +
            (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 + C1494 * C49303 +
             (C113 * C1464 + C49007 * C1471) * C7916 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C393 -
           (((C113 * C9331 + C49007 * C9335) * C48892 +
             (C113 * C9329 + C49007 * C9332) * C9128) *
                C9127 +
            ((C113 * C1936 + C49007 * C1941) * C48892 +
             (C113 * C1932 + C49007 * C1935) * C9128) *
                C9126 +
            (C1961 * C48892 + C1962 * C9128) * C9125 +
            (C1963 * C48892 + C1964 * C9128) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C48961 * C261 +
          (((C443 * C9128 + C442 * C48892) * C9123 +
            (C1501 * C9128 + C1500 * C48892) * C9124 +
            (C1497 * C9128 + C1496 * C48892) * C9125 +
            ((C113 * C1933 + C49007 * C1937) * C9128 +
             (C113 * C1938 + C49007 * C1942) * C48892) *
                C9126 +
            ((C113 * C9330 + C49007 * C9333) * C9128 +
             (C113 * C9334 + C49007 * C9336) * C48892) *
                C9127) *
               C49281 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C393 -
           (((C2509 * C10298 + C49287 * C10302 + C2508 * C2383 +
              C49309 * C2391 + C2507 * C1469 + C49320 * C1475) *
                 C48892 +
             (C2509 * C10296 + C49287 * C10299 + C2508 * C2373 +
              C49309 * C2382 + C2507 * C1463 + C49320 * C1470) *
                 C9128) *
                C49284 +
            ((C2509 * C3358 + C49287 * C3363 + C2508 * C2377 + C49309 * C2388 +
              C2507 * C703 + C49320 * C712) *
                 C48892 +
             (C2509 * C3354 + C49287 * C3357 + C2508 * C2370 + C49309 * C2376 +
              C2507 * C697 + C49320 * C702) *
                 C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C48961 * C261 +
          ((((C2952 + C2951 + C2950) * C9128 +
             (C2949 + C2948 + C2947) * C48892) *
                C7911 +
            ((C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
              C2509 * C3355 + C49287 * C3359) *
                 C9128 +
             (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
              C2509 * C3360 + C49287 * C3364) *
                 C48892) *
                C7912 +
            ((C2507 * C1462 + C49320 * C1468 + C2508 * C2374 + C49309 * C2384 +
              C2509 * C10297 + C49287 * C10300) *
                 C9128 +
             (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 + C49309 * C2392 +
              C2509 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C393 -
           ((C15611 + C15612 + C15613) * C49271 +
            (C15614 + C15615 + C15616) * C7916 +
            (C15617 + C15618 + C15619) * C49303 +
            (C15620 + C15621 + C15622) * C7915 +
            (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C49316 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C7914) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C15622 + C15621 + C15620) * C7914 +
            (C15619 + C15618 + C15617) * C49316 +
            (C15616 + C15615 + C15614) * C7915 +
            (C15613 + C15612 + C15611) * C49303 +
            (C15197 * C396 + C15194 * C404 + C15198 * C951 + C15195 * C959 +
             C15199 * C2903 + C49287 * C2910) *
                C7916 +
            (C15197 * C403 + C15194 * C414 + C15198 * C960 + C15195 * C966 +
             C15199 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C15249 + C15250 + C15251) * C49271 +
            (C15252 + C15253 + C15254) * C7916 +
            (C15248 + C15247 + C15246) * C49303 +
            (C15245 + C15244 + C15243) * C7915 +
            (C15242 + C15241 + C15240) * C49316 +
            (C15239 + C15238 + C15237) * C7914) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            ((C16725 + C16726 + C16727) * C9128 +
             (C16728 + C16729 + C16730) * C48892) *
                C49284) *
               C393 -
           (((C15199 * C10298 + C49287 * C10302 + C15198 * C2383 +
              C15195 * C2391 + C15197 * C1469 + C15194 * C1475) *
                 C48892 +
             (C15199 * C10296 + C49287 * C10299 + C15198 * C2373 +
              C15195 * C2382 + C15197 * C1463 + C15194 * C1470) *
                 C9128) *
                C49284 +
            ((C15199 * C3358 + C49287 * C3363 + C15198 * C2377 +
              C15195 * C2388 + C15197 * C703 + C15194 * C712) *
                 C48892 +
             (C15199 * C3354 + C49287 * C3357 + C15198 * C2370 +
              C15195 * C2376 + C15197 * C697 + C15194 * C702) *
                 C9128) *
                C49307 +
            ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C48892 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C9128) *
                C49319) *
               C49281) *
              C48961 * C261 +
          ((((C15622 + C15621 + C15620) * C9128 +
             (C15619 + C15618 + C15617) * C48892) *
                C49319 +
            ((C15197 * C698 + C15194 * C704 + C15198 * C2371 + C15195 * C2378 +
              C15199 * C3355 + C49287 * C3359) *
                 C9128 +
             (C15197 * C705 + C15194 * C713 + C15198 * C2379 + C15195 * C2389 +
              C15199 * C3360 + C49287 * C3364) *
                 C48892) *
                C49307 +
            ((C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
              C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                 C9128 +
             (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
              C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C16736 + C16735 + C16734) * C48892 +
             (C16733 + C16732 + C16731) * C9128) *
                C49284 +
            ((C15435 + C15436 + C15437) * C48892 +
             (C15438 + C15439 + C15440) * C9128) *
                C49307 +
            ((C15242 + C15241 + C15240) * C48892 +
             (C15239 + C15238 + C15237) * C9128) *
                C49319) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C393 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3772 +
             C17812 * C3777 + C17816 * C2908 + C17811 * C2914 + C17815 * C954 +
             C17810 * C963 + C17814 * C409 + C17809 * C417) *
                C48892 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3768 +
             C17812 * C3771 + C17816 * C2902 + C17811 * C2909 + C17815 * C948 +
             C17810 * C953 + C17814 * C399 + C17809 * C410) *
                C9128) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C17814 * C398 + C17809 * C408 + C17815 * C949 + C17810 * C955 +
             C17816 * C2901 + C17811 * C2907 + C17817 * C3769 + C17812 * C3773 +
             C17818 * C17988 + C17813 * C17991) *
                C9128 +
            (C17814 * C407 + C17809 * C416 + C17815 * C956 + C17810 * C964 +
             C17816 * C2906 + C17811 * C2913 + C17817 * C3774 + C17812 * C3778 +
             C17818 * C17992 + C17813 * C17994) *
                C48892) *
               C48996 * C49281 -
           ((C17818 * C3774 + C17813 * C3778 + C17817 * C2906 + C17812 * C2913 +
             C17816 * C956 + C17811 * C964 + C17815 * C407 + C17810 * C416 +
             C17814 * C129 + C17809 * C141) *
                C48892 +
            (C17818 * C3769 + C17813 * C3773 + C17817 * C2901 + C17812 * C2907 +
             C17816 * C949 + C17811 * C955 + C17815 * C398 + C17810 * C408 +
             C17814 * C120 + C17809 * C128) *
                C9128) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C48978 * C525 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C49007 * C285) * C102 +
                (C113 * C267 + C49007 * C278) * C114) *
                   C48996 * C48978 * C49279) *
                  C527 +
              ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                (C113 * C268 + C49007 * C279) * C118 +
                (C113 * C280 + C49007 * C286) * C106) *
                   C48996 * C48978 * C49279 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48996 * C48978 * C525) *
                  C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                   C48978 * C525 -
               ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                 C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                 (C113 * C1253 + C49007 * C1260) * C1084) *
                    C49284 +
                (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                   C48978 * C49279) *
                  C527 +
              (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 + C1308 * C1079 +
                 (C113 * C1254 + C49007 * C1261) * C1086 +
                 (C113 * C1262 + C49007 * C1266) * C49271) *
                    C49284) *
                   C48978 * C49279 -
               ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
                 C169 * C1078 + C168 * C1084) *
                    C49319) *
                   C48978 * C525) *
                  C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C48978 * C525 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C2754 + C2753 + C2752) * C1084 + (C2751 + C2750 + C2749) * C1078 +
            (C2748 + C2747 + C2746) * C1085 + (C2745 + C2744 + C2743) * C1079 +
            (C2507 * C264 + C49320 * C272 + C2508 * C700 + C49309 * C708 +
             C2509 * C2714 + C49287 * C2715) *
                C1086 +
            (C2507 * C271 + C49320 * C282 + C2508 * C709 + C49309 * C715 +
             C2509 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C48978 * C525 -
           ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 + C1311 * C7915 +
             C1780 * C49316 + C1781 * C7914) *
                C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C48978 * C49279) *
              C527 +
          (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
            (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
            (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 + C1308 * C49303 +
             (C113 * C1254 + C49007 * C1261) * C7916 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C48978 * C525 -
           (((C113 * C9213 + C49007 * C9217) * C48892 +
             (C113 * C9211 + C49007 * C9214) * C9128) *
                C9127 +
            (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
            (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
               C48978 * C49279) *
              C527 +
          (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
            (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
            ((C113 * C9212 + C49007 * C9215) * C9128 +
             (C113 * C9216 + C49007 * C9218) * C48892) *
                C9127) *
               C48978 * C49279 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C48978 * C525 -
           (((C2509 * C9831 + C49287 * C9834 + C2508 * C1936 + C49309 * C1941 +
              C2507 * C1259 + C49320 * C1265) *
                 C48892 +
             (C2509 * C9828 + C49287 * C9830 + C2508 * C1932 + C49309 * C1935 +
              C2507 * C1253 + C49320 * C1260) *
                 C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C48978 * C49279) *
              C527 +
          ((((C2754 + C2753 + C2752) * C9128 +
             (C2751 + C2750 + C2749) * C48892) *
                C7911 +
            ((C10145 + C10146 + C10147) * C9128 +
             (C10148 + C10149 + C10150) * C48892) *
                C7912 +
            ((C2507 * C1252 + C49320 * C1258 + C2508 * C1933 + C49309 * C1937 +
              C2509 * C10092 + C49287 * C10093) *
                 C9128 +
             (C2507 * C1257 + C49320 * C1264 + C2508 * C1938 + C49309 * C1942 +
              C2509 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C48978 * C525 -
           ((C15429 + C15430 + C15431) * C49271 +
            (C15432 + C15433 + C15434) * C7916 +
            (C15435 + C15436 + C15437) * C49303 +
            (C15438 + C15439 + C15440) * C7915 +
            (C15199 * C2377 + C49287 * C2388 + C15198 * C703 + C15195 * C712 +
             C15197 * C277 + C15194 * C285) *
                C49316 +
            (C15199 * C2370 + C49287 * C2376 + C15198 * C697 + C15195 * C702 +
             C15197 * C267 + C15194 * C278) *
                C7914) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C15440 + C15439 + C15438) * C7914 +
            (C15437 + C15436 + C15435) * C49316 +
            (C15434 + C15433 + C15432) * C7915 +
            (C15431 + C15430 + C15429) * C49303 +
            (C15197 * C264 + C15194 * C272 + C15198 * C700 + C15195 * C708 +
             C15199 * C2714 + C49287 * C2715) *
                C7916 +
            (C15197 * C271 + C15194 * C282 + C15198 * C709 + C15195 * C715 +
             C15199 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C15249 + C15250 + C15251) * C49271 +
            (C15252 + C15253 + C15254) * C7916 +
            (C15248 + C15247 + C15246) * C49303 +
            (C15245 + C15244 + C15243) * C7915 +
            (C15242 + C15241 + C15240) * C49316 +
            (C15239 + C15238 + C15237) * C7914) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            ((C16725 + C16726 + C16727) * C9128 +
             (C16728 + C16729 + C16730) * C48892) *
                C49284) *
               C48978 * C525 -
           (((C15199 * C9831 + C49287 * C9834 + C15198 * C1936 +
              C15195 * C1941 + C15197 * C1259 + C15194 * C1265) *
                 C48892 +
             (C15199 * C9828 + C49287 * C9830 + C15198 * C1932 +
              C15195 * C1935 + C15197 * C1253 + C15194 * C1260) *
                 C9128) *
                C49284 +
            ((C16730 + C16729 + C16728) * C48892 +
             (C16727 + C16726 + C16725) * C9128) *
                C49307 +
            ((C16724 + C16723 + C16722) * C48892 +
             (C16721 + C16720 + C16719) * C9128) *
                C49319) *
               C48978 * C49279) *
              C527 +
          ((((C15440 + C15439 + C15438) * C9128 +
             (C15437 + C15436 + C15435) * C48892) *
                C49319 +
            ((C16731 + C16732 + C16733) * C9128 +
             (C16734 + C16735 + C16736) * C48892) *
                C49307 +
            ((C15197 * C1252 + C15194 * C1258 + C15198 * C1933 +
              C15195 * C1937 + C15199 * C10092 + C49287 * C10093) *
                 C9128 +
             (C15197 * C1257 + C15194 * C1264 + C15198 * C1938 +
              C15195 * C1942 + C15199 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C16736 + C16735 + C16734) * C48892 +
             (C16733 + C16732 + C16731) * C9128) *
                C49284 +
            ((C15435 + C15436 + C15437) * C48892 +
             (C15438 + C15439 + C15440) * C9128) *
                C49307 +
            ((C15242 + C15241 + C15240) * C48892 +
             (C15239 + C15238 + C15237) * C9128) *
                C49319) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C48978 * C525 -
           ((C17818 * C11176 + C17813 * C11179 + C17817 * C3358 +
             C17812 * C3363 + C17816 * C2377 + C17811 * C2388 + C17815 * C703 +
             C17810 * C712 + C17814 * C277 + C17809 * C285) *
                C48892 +
            (C17818 * C11173 + C17813 * C11175 + C17817 * C3354 +
             C17812 * C3357 + C17816 * C2370 + C17811 * C2376 + C17815 * C697 +
             C17810 * C702 + C17814 * C267 + C17809 * C278) *
                C9128) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C17814 * C266 + C17809 * C276 + C17815 * C698 + C17810 * C704 +
             C17816 * C2371 + C17811 * C2378 + C17817 * C3355 + C17812 * C3359 +
             C17818 * C17901 + C17813 * C17902) *
                C9128 +
            (C17814 * C275 + C17809 * C284 + C17815 * C705 + C17810 * C713 +
             C17816 * C2379 + C17811 * C2389 + C17817 * C3360 + C17812 * C3364 +
             C17818 * C17903 + C17813 * C17904) *
                C48892) *
               C48996 * C48978 * C49279 -
           ((C17818 * C3774 + C17813 * C3778 + C17817 * C2906 + C17812 * C2913 +
             C17816 * C956 + C17811 * C964 + C17815 * C407 + C17810 * C416 +
             C17814 * C129 + C17809 * C141) *
                C48892 +
            (C17818 * C3769 + C17813 * C3773 + C17817 * C2901 + C17812 * C2907 +
             C17816 * C949 + C17811 * C955 + C17815 * C398 + C17810 * C408 +
             C17814 * C120 + C17809 * C128) *
                C9128) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C49007 * C126) * C114 +
               (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48996 * C48978 * C591 -
              (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
               C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
               (C113 * C277 + C49007 * C285) * C102 +
               (C113 * C267 + C49007 * C278) * C114) *
                  C48996 * C48978 * C592 +
              ((C113 * C595 + C49007 * C600) * C114 +
               (C113 * C601 + C49007 * C610) * C102 +
               (C113 * C596 + C49007 * C602) * C115 +
               (C113 * C603 + C49007 * C611) * C103 +
               (C113 * C597 + C49007 * C604) * C116 +
               (C113 * C605 + C49007 * C612) * C104 +
               (C113 * C598 + C49007 * C606) * C117 +
               (C113 * C607 + C49007 * C613) * C105 +
               (C113 * C599 + C49007 * C608) * C118 +
               (C113 * C609 + C49007 * C614) * C106) *
                  C48996 * C48978 * C593) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C1084 +
                (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                C169 * C1079 + C170 * C1086 + C171 * C49271) *
                   C49319 +
               (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
               C1786 * C49284) *
                  C48978 * C591 -
              ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
               (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
               (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                  C48978 * C592 +
              (C1786 * C49319 +
               (C1784 + C1783 + C1774 + C1773 + C1772 + C1771) * C49307 +
               ((C113 * C1757 + C49007 * C1760) * C1084 +
                (C113 * C1761 + C49007 * C1766) * C1078 +
                (C113 * C1758 + C49007 * C1762) * C1085 +
                (C113 * C1763 + C49007 * C1767) * C1079 +
                (C113 * C1759 + C49007 * C1764) * C1086 +
                (C113 * C1765 + C49007 * C1768) * C49271) *
                   C49284) *
                  C48978 * C593) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C48978 * C591 -
          ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
           (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
           (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
            C2507 * C277 + C49320 * C285) *
               C1078 +
           (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
            C2507 * C267 + C49320 * C278) *
               C1084) *
              C48996 * C48978 * C592 +
          ((C2507 * C595 + C49320 * C600 + C2508 * C1463 + C49309 * C1470 +
            C2509 * C2373 + C49287 * C2382) *
               C1084 +
           (C2507 * C601 + C49320 * C610 + C2508 * C1469 + C49309 * C1475 +
            C2509 * C2383 + C49287 * C2391) *
               C1078 +
           (C2507 * C596 + C49320 * C602 + C2508 * C1462 + C49309 * C1468 +
            C2509 * C2374 + C49287 * C2384) *
               C1085 +
           (C2507 * C603 + C49320 * C611 + C2508 * C1467 + C49309 * C1474 +
            C2509 * C2385 + C49287 * C2392) *
               C1079 +
           (C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
            C2509 * C2375 + C49287 * C2386) *
               C1086 +
           (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
            C2509 * C2387 + C49287 * C2393) *
               C49271) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
           C8500 * C49284) *
              C48978 * C591 -
          ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
           (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
           (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
              C48978 * C592 +
          (C8500 * C7911 +
           (C8496 + C8495 + C8494 + C8493 + C8492 + C8491) * C7912 +
           ((C113 * C1757 + C49007 * C1760) * C7914 +
            (C113 * C1761 + C49007 * C1766) * C49316 +
            (C113 * C1758 + C49007 * C1762) * C7915 +
            (C113 * C1763 + C49007 * C1767) * C49303 +
            (C113 * C1759 + C49007 * C1764) * C7916 +
            (C113 * C1765 + C49007 * C1768) * C49271) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
           C9488 * C9127) *
              C48978 * C591 -
          ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
           (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
           (C9221 + C9220) * C9123) *
              C48978 * C592 +
          (C9486 * C9123 + C9487 * C9124 + C9488 * C9125 +
           (C9496 + C9495) * C9126 +
           ((C113 * C9481 + C49007 * C9482) * C9128 +
            (C113 * C9483 + C49007 * C9484) * C48892) *
               C9127) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C10133 + C10134 + C10135) * C9128 +
            (C10136 + C10137 + C10138) * C48892) *
               C7912 +
           C10585 * C49284) *
              C48978 * C591 -
          (((C10577 + C10578 + C10579) * C48892 +
            (C10580 + C10581 + C10582) * C9128) *
               C49284 +
           ((C10144 + C10143 + C10142) * C48892 +
            (C10141 + C10140 + C10139) * C9128) *
               C7912 +
           ((C10138 + C10137 + C10136) * C48892 +
            (C10135 + C10134 + C10133) * C9128) *
               C7911) *
              C48978 * C592 +
          (C10585 * C7911 +
           ((C10582 + C10581 + C10580) * C9128 +
            (C10579 + C10578 + C10577) * C48892) *
               C7912 +
           ((C2507 * C1757 + C49320 * C1760 + C2508 * C9329 + C49309 * C9332 +
             C2509 * C9829 + C49287 * C9832) *
                C9128 +
            (C2507 * C1761 + C49320 * C1766 + C2508 * C9331 + C49309 * C9335 +
             C2509 * C9833 + C49287 * C9835) *
                C48892) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
            C15199 * C948 + C49287 * C953) *
               C7914 +
           (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
            C15199 * C954 + C49287 * C963) *
               C49316 +
           (C15237 + C15238 + C15239) * C7915 +
           (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
           C15258 * C49271) *
              C48996 * C48978 * C591 -
          ((C15429 + C15430 + C15431) * C49271 +
           (C15432 + C15433 + C15434) * C7916 +
           (C15435 + C15436 + C15437) * C49303 +
           (C15438 + C15439 + C15440) * C7915 +
           (C15199 * C2377 + C49287 * C2388 + C15198 * C703 + C15195 * C712 +
            C15197 * C277 + C15194 * C285) *
               C49316 +
           (C15199 * C2370 + C49287 * C2376 + C15198 * C697 + C15195 * C702 +
            C15197 * C267 + C15194 * C278) *
               C7914) *
              C48996 * C48978 * C592 +
          ((C15197 * C595 + C15194 * C600 + C15198 * C1463 + C15195 * C1470 +
            C15199 * C2373 + C49287 * C2382) *
               C7914 +
           (C15197 * C601 + C15194 * C610 + C15198 * C1469 + C15195 * C1475 +
            C15199 * C2383 + C49287 * C2391) *
               C49316 +
           (C15197 * C596 + C15194 * C602 + C15198 * C1462 + C15195 * C1468 +
            C15199 * C2374 + C49287 * C2384) *
               C7915 +
           (C15197 * C603 + C15194 * C611 + C15198 * C1467 + C15195 * C1474 +
            C15199 * C2385 + C49287 * C2392) *
               C49303 +
           (C15197 * C597 + C15194 * C604 + C15198 * C1461 + C15195 * C1466 +
            C15199 * C2375 + C49287 * C2386) *
               C7916 +
           (C15197 * C605 + C15194 * C612 + C15198 * C1465 + C15195 * C1473 +
            C15199 * C2387 + C49287 * C2393) *
               C49271) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C9128 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C48892) *
               C49319 +
           ((C16719 + C16720 + C16721) * C9128 +
            (C16722 + C16723 + C16724) * C48892) *
               C49307 +
           C17163 * C49284) *
              C48978 * C591 -
          (((C17155 + C17156 + C17157) * C48892 +
            (C17158 + C17159 + C17160) * C9128) *
               C49284 +
           ((C16730 + C16729 + C16728) * C48892 +
            (C16727 + C16726 + C16725) * C9128) *
               C49307 +
           ((C16724 + C16723 + C16722) * C48892 +
            (C16721 + C16720 + C16719) * C9128) *
               C49319) *
              C48978 * C592 +
          (C17163 * C49319 +
           ((C17160 + C17159 + C17158) * C9128 +
            (C17157 + C17156 + C17155) * C48892) *
               C49307 +
           ((C15197 * C1757 + C15194 * C1760 + C15198 * C9329 + C15195 * C9332 +
             C15199 * C9829 + C49287 * C9832) *
                C9128 +
            (C15197 * C1761 + C15194 * C1766 + C15198 * C9331 + C15195 * C9335 +
             C15199 * C9833 + C49287 * C9835) *
                C48892) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
            C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
            C17818 * C3768 + C17813 * C3771) *
               C9128 +
           (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
            C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
            C17818 * C3772 + C17813 * C3777) *
               C48892) *
              C48996 * C48978 * C591 -
          ((C17818 * C11176 + C17813 * C11179 + C17817 * C3358 +
            C17812 * C3363 + C17816 * C2377 + C17811 * C2388 + C17815 * C703 +
            C17810 * C712 + C17814 * C277 + C17809 * C285) *
               C48892 +
           (C17818 * C11173 + C17813 * C11175 + C17817 * C3354 +
            C17812 * C3357 + C17816 * C2370 + C17811 * C2376 + C17815 * C697 +
            C17810 * C702 + C17814 * C267 + C17809 * C278) *
               C9128) *
              C48996 * C48978 * C592 +
          ((C17814 * C595 + C17809 * C600 + C17815 * C1463 + C17810 * C1470 +
            C17816 * C2373 + C17811 * C2382 + C17817 * C10296 +
            C17812 * C10299 + C17818 * C11174 + C17813 * C11177) *
               C9128 +
           (C17814 * C601 + C17809 * C610 + C17815 * C1469 + C17810 * C1475 +
            C17816 * C2383 + C17811 * C2391 + C17817 * C10298 +
            C17812 * C10302 + C17818 * C11178 + C17813 * C11180) *
               C48892) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C393 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C49007 * C417) * C102 +
                (C113 * C399 + C49007 * C410) * C114) *
                   C48996 * C49281) *
                  C525 +
              (((C113 * C697 + C49007 * C702) * C114 +
                (C113 * C703 + C49007 * C712) * C102 +
                (C113 * C698 + C49007 * C704) * C115 +
                (C113 * C705 + C49007 * C713) * C103 +
                (C113 * C699 + C49007 * C706) * C116 +
                (C113 * C707 + C49007 * C714) * C104 +
                (C113 * C700 + C49007 * C708) * C117 +
                (C113 * C709 + C49007 * C715) * C105 +
                (C113 * C701 + C49007 * C710) * C118 +
                (C113 * C711 + C49007 * C716) * C106) *
                   C48996 * C49281 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C49007 * C285) * C102 +
                (C113 * C267 + C49007 * C278) * C114) *
                   C48996 * C393) *
                  C49279) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                C1786 * C49284) *
                   C393 -
               ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
                 (C113 * C409 + C49007 * C417) * C1078 +
                 (C113 * C399 + C49007 * C410) * C1084) *
                    C49319) *
                   C49281) *
                  C525 +
              (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                ((C113 * C1932 + C49007 * C1935) * C1084 +
                 (C113 * C1936 + C49007 * C1941) * C1078 +
                 (C113 * C1933 + C49007 * C1937) * C1085 +
                 (C113 * C1938 + C49007 * C1942) * C1079 +
                 (C113 * C1934 + C49007 * C1939) * C1086 +
                 (C113 * C1940 + C49007 * C1943) * C49271) *
                    C49284) *
                   C49281 -
               ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                   C393) *
                  C49279) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C393 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C525 +
          (((C2507 * C697 + C49320 * C702 + C2508 * C2370 + C49309 * C2376 +
             C2509 * C3354 + C49287 * C3357) *
                C1084 +
            (C2507 * C703 + C49320 * C712 + C2508 * C2377 + C49309 * C2388 +
             C2509 * C3358 + C49287 * C3363) *
                C1078 +
            (C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
             C2509 * C3355 + C49287 * C3359) *
                C1085 +
            (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
             C2509 * C3360 + C49287 * C3364) *
                C1079 +
            (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
             C2509 * C3356 + C49287 * C3361) *
                C1086 +
            (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
             C2509 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C393 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C525 +
          (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
            (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
            ((C113 * C1932 + C49007 * C1935) * C7914 +
             (C113 * C1936 + C49007 * C1941) * C49316 +
             (C113 * C1933 + C49007 * C1937) * C7915 +
             (C113 * C1938 + C49007 * C1942) * C49303 +
             (C113 * C1934 + C49007 * C1939) * C7916 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C393 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C525 +
          (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
            (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
            ((C113 * C9578 + C49007 * C9579) * C9128 +
             (C113 * C9580 + C49007 * C9581) * C48892) *
                C9127) *
               C49281 -
           ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
            (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
            (C9221 + C9220) * C9123) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C393 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C525 +
          ((((C10771 + C10770 + C10769) * C9128 +
             (C10768 + C10767 + C10766) * C48892) *
                C7911 +
            ((C10765 + C10764 + C10763) * C9128 +
             (C10762 + C10761 + C10760) * C48892) *
                C7912 +
            ((C2507 * C1932 + C49320 * C1935 + C2508 * C9828 + C49309 * C9830 +
              C2509 * C10731 + C49287 * C10732) *
                 C9128 +
             (C2507 * C1936 + C49320 * C1941 + C2508 * C9831 + C49309 * C9834 +
              C2509 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10577 + C10578 + C10579) * C48892 +
             (C10580 + C10581 + C10582) * C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C393 -
           ((C15611 + C15612 + C15613) * C49271 +
            (C15614 + C15615 + C15616) * C7916 +
            (C15617 + C15618 + C15619) * C49303 +
            (C15620 + C15621 + C15622) * C7915 +
            (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C49316 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C7914) *
               C48996 * C49281) *
              C525 +
          (((C15197 * C697 + C15194 * C702 + C15198 * C2370 + C15195 * C2376 +
             C15199 * C3354 + C49287 * C3357) *
                C7914 +
            (C15197 * C703 + C15194 * C712 + C15198 * C2377 + C15195 * C2388 +
             C15199 * C3358 + C49287 * C3363) *
                C49316 +
            (C15197 * C698 + C15194 * C704 + C15198 * C2371 + C15195 * C2378 +
             C15199 * C3355 + C49287 * C3359) *
                C7915 +
            (C15197 * C705 + C15194 * C713 + C15198 * C2379 + C15195 * C2389 +
             C15199 * C3360 + C49287 * C3364) *
                C49303 +
            (C15197 * C699 + C15194 * C706 + C15198 * C2372 + C15195 * C2380 +
             C15199 * C3356 + C49287 * C3361) *
                C7916 +
            (C15197 * C707 + C15194 * C714 + C15198 * C2381 + C15195 * C2390 +
             C15199 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C15429 + C15430 + C15431) * C49271 +
            (C15432 + C15433 + C15434) * C7916 +
            (C15435 + C15436 + C15437) * C49303 +
            (C15438 + C15439 + C15440) * C7915 +
            (C15199 * C2377 + C49287 * C2388 + C15198 * C703 + C15195 * C712 +
             C15197 * C277 + C15194 * C285) *
                C49316 +
            (C15199 * C2370 + C49287 * C2376 + C15198 * C697 + C15195 * C702 +
             C15197 * C267 + C15194 * C278) *
                C7914) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            C17163 * C49284) *
               C393 -
           (((C17334 + C17335 + C17336) * C48892 +
             (C17337 + C17338 + C17339) * C9128) *
                C49284 +
            ((C17340 + C17341 + C17342) * C48892 +
             (C17343 + C17344 + C17345) * C9128) *
                C49307 +
            ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C48892 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C9128) *
                C49319) *
               C49281) *
              C525 +
          ((((C17345 + C17344 + C17343) * C9128 +
             (C17342 + C17341 + C17340) * C48892) *
                C49319 +
            ((C17339 + C17338 + C17337) * C9128 +
             (C17336 + C17335 + C17334) * C48892) *
                C49307 +
            ((C15197 * C1932 + C15194 * C1935 + C15198 * C9828 +
              C15195 * C9830 + C15199 * C10731 + C49287 * C10732) *
                 C9128 +
             (C15197 * C1936 + C15194 * C1941 + C15198 * C9831 +
              C15195 * C9834 + C15199 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C17155 + C17156 + C17157) * C48892 +
             (C17158 + C17159 + C17160) * C9128) *
                C49284 +
            ((C16730 + C16729 + C16728) * C48892 +
             (C16727 + C16726 + C16725) * C9128) *
                C49307 +
            ((C16724 + C16723 + C16722) * C48892 +
             (C16721 + C16720 + C16719) * C9128) *
                C49319) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C393 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3772 +
             C17812 * C3777 + C17816 * C2908 + C17811 * C2914 + C17815 * C954 +
             C17810 * C963 + C17814 * C409 + C17809 * C417) *
                C48892 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3768 +
             C17812 * C3771 + C17816 * C2902 + C17811 * C2909 + C17815 * C948 +
             C17810 * C953 + C17814 * C399 + C17809 * C410) *
                C9128) *
               C48996 * C49281) *
              C525 +
          (((C17814 * C697 + C17809 * C702 + C17815 * C2370 + C17810 * C2376 +
             C17816 * C3354 + C17811 * C3357 + C17817 * C11173 +
             C17812 * C11175 + C17818 * C18221 + C17813 * C18222) *
                C9128 +
            (C17814 * C703 + C17809 * C712 + C17815 * C2377 + C17810 * C2388 +
             C17816 * C3358 + C17811 * C3363 + C17817 * C11176 +
             C17812 * C11179 + C17818 * C18223 + C17813 * C18224) *
                C48892) *
               C48996 * C49281 -
           ((C17818 * C11176 + C17813 * C11179 + C17817 * C3358 +
             C17812 * C3363 + C17816 * C2377 + C17811 * C2388 + C17815 * C703 +
             C17810 * C712 + C17814 * C277 + C17809 * C285) *
                C48892 +
            (C17818 * C11173 + C17813 * C11175 + C17817 * C3354 +
             C17812 * C3357 + C17816 * C2370 + C17811 * C2376 + C17815 * C697 +
             C17810 * C702 + C17814 * C267 + C17809 * C278) *
                C9128) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C799 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C49007 * C417) * C102 +
                (C113 * C399 + C49007 * C410) * C114) *
                   C48996 * C49281) *
                  C48961 * C527 +
              ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                (C113 * C400 + C49007 * C411) * C118 +
                (C113 * C412 + C49007 * C418) * C106) *
                   C48996 * C49281 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C48996 * C799) *
                  C48961 * C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                C1786 * C49284) *
                   C799 -
               ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
                 (C113 * C409 + C49007 * C417) * C1078 +
                 (C113 * C399 + C49007 * C410) * C1084) *
                    C49319) *
                   C49281) *
                  C48961 * C527 +
              (((C443 * C1084 + C442 * C1078 + C441 * C1085 + C440 * C1079 +
                 C439 * C1086 + C438 * C49271) *
                    C49319 +
                (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 + C1498 * C1079 +
                 (C113 * C700 + C49007 * C708) * C1086 +
                 (C113 * C709 + C49007 * C715) * C49271) *
                    C49307 +
                (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 + C1494 * C1079 +
                 (C113 * C1464 + C49007 * C1471) * C1086 +
                 (C113 * C1472 + C49007 * C1476) * C49271) *
                    C49284) *
                   C49281 -
               ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
                 C169 * C1078 + C168 * C1084) *
                    C49319) *
                   C799) *
                  C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C799 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C2952 + C2951 + C2950) * C1084 + (C2949 + C2948 + C2947) * C1078 +
            (C2946 + C2945 + C2944) * C1085 + (C2943 + C2942 + C2941) * C1079 +
            (C2507 * C396 + C49320 * C404 + C2508 * C951 + C49309 * C959 +
             C2509 * C2903 + C49287 * C2910) *
                C1086 +
            (C2507 * C403 + C49320 * C414 + C2508 * C960 + C49309 * C966 +
             C2509 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C799 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C48961 * C527 +
          (((C443 * C7914 + C442 * C49316 + C441 * C7915 + C440 * C49303 +
             C439 * C7916 + C438 * C49271) *
                C7911 +
            (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 + C1498 * C49303 +
             C4170 * C7916 + C4169 * C49271) *
                C7912 +
            (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 + C1494 * C49303 +
             (C113 * C1464 + C49007 * C1471) * C7916 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C799 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C48961 * C527 +
          (((C443 * C9128 + C442 * C48892) * C9123 +
            (C1501 * C9128 + C1500 * C48892) * C9124 +
            (C1497 * C9128 + C1496 * C48892) * C9125 +
            ((C113 * C1933 + C49007 * C1937) * C9128 +
             (C113 * C1938 + C49007 * C1942) * C48892) *
                C9126 +
            ((C113 * C9330 + C49007 * C9333) * C9128 +
             (C113 * C9334 + C49007 * C9336) * C48892) *
                C9127) *
               C49281 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C799 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C48961 * C527 +
          ((((C2952 + C2951 + C2950) * C9128 +
             (C2949 + C2948 + C2947) * C48892) *
                C7911 +
            ((C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
              C2509 * C3355 + C49287 * C3359) *
                 C9128 +
             (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
              C2509 * C3360 + C49287 * C3364) *
                 C48892) *
                C7912 +
            ((C2507 * C1462 + C49320 * C1468 + C2508 * C2374 + C49309 * C2384 +
              C2509 * C10297 + C49287 * C10300) *
                 C9128 +
             (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 + C49309 * C2392 +
              C2509 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C799 -
           ((C15611 + C15612 + C15613) * C49271 +
            (C15614 + C15615 + C15616) * C7916 +
            (C15617 + C15618 + C15619) * C49303 +
            (C15620 + C15621 + C15622) * C7915 +
            (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C49316 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C7914) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C15622 + C15621 + C15620) * C7914 +
            (C15619 + C15618 + C15617) * C49316 +
            (C15616 + C15615 + C15614) * C7915 +
            (C15613 + C15612 + C15611) * C49303 +
            (C15197 * C396 + C15194 * C404 + C15198 * C951 + C15195 * C959 +
             C15199 * C2903 + C49287 * C2910) *
                C7916 +
            (C15197 * C403 + C15194 * C414 + C15198 * C960 + C15195 * C966 +
             C15199 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C15249 + C15250 + C15251) * C49271 +
            (C15252 + C15253 + C15254) * C7916 +
            (C15248 + C15247 + C15246) * C49303 +
            (C15245 + C15244 + C15243) * C7915 +
            (C15242 + C15241 + C15240) * C49316 +
            (C15239 + C15238 + C15237) * C7914) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            C17163 * C49284) *
               C799 -
           (((C17334 + C17335 + C17336) * C48892 +
             (C17337 + C17338 + C17339) * C9128) *
                C49284 +
            ((C17340 + C17341 + C17342) * C48892 +
             (C17343 + C17344 + C17345) * C9128) *
                C49307 +
            ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C48892 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C9128) *
                C49319) *
               C49281) *
              C48961 * C527 +
          ((((C15622 + C15621 + C15620) * C9128 +
             (C15619 + C15618 + C15617) * C48892) *
                C49319 +
            ((C15197 * C698 + C15194 * C704 + C15198 * C2371 + C15195 * C2378 +
              C15199 * C3355 + C49287 * C3359) *
                 C9128 +
             (C15197 * C705 + C15194 * C713 + C15198 * C2379 + C15195 * C2389 +
              C15199 * C3360 + C49287 * C3364) *
                 C48892) *
                C49307 +
            ((C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
              C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                 C9128 +
             (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
              C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C16736 + C16735 + C16734) * C48892 +
             (C16733 + C16732 + C16731) * C9128) *
                C49284 +
            ((C15435 + C15436 + C15437) * C48892 +
             (C15438 + C15439 + C15440) * C9128) *
                C49307 +
            ((C15242 + C15241 + C15240) * C48892 +
             (C15239 + C15238 + C15237) * C9128) *
                C49319) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C799 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3772 +
             C17812 * C3777 + C17816 * C2908 + C17811 * C2914 + C17815 * C954 +
             C17810 * C963 + C17814 * C409 + C17809 * C417) *
                C48892 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3768 +
             C17812 * C3771 + C17816 * C2902 + C17811 * C2909 + C17815 * C948 +
             C17810 * C953 + C17814 * C399 + C17809 * C410) *
                C9128) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C17814 * C398 + C17809 * C408 + C17815 * C949 + C17810 * C955 +
             C17816 * C2901 + C17811 * C2907 + C17817 * C3769 + C17812 * C3773 +
             C17818 * C17988 + C17813 * C17991) *
                C9128 +
            (C17814 * C407 + C17809 * C416 + C17815 * C956 + C17810 * C964 +
             C17816 * C2906 + C17811 * C2913 + C17817 * C3774 + C17812 * C3778 +
             C17818 * C17992 + C17813 * C17994) *
                C48892) *
               C48996 * C49281 -
           ((C17818 * C3774 + C17813 * C3778 + C17817 * C2906 + C17812 * C2913 +
             C17816 * C956 + C17811 * C964 + C17815 * C407 + C17810 * C416 +
             C17814 * C129 + C17809 * C141) *
                C48892 +
            (C17818 * C3769 + C17813 * C3773 + C17817 * C2901 + C17812 * C2907 +
             C17816 * C949 + C17811 * C955 + C17815 * C398 + C17810 * C408 +
             C17814 * C120 + C17809 * C128) *
                C9128) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C114 +
                (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C48996 * C799 -
               (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                (C113 * C409 + C49007 * C417) * C102 +
                (C113 * C399 + C49007 * C410) * C114) *
                   C48996 * C49281) *
                  C259 +
              (((C113 * C697 + C49007 * C702) * C114 +
                (C113 * C703 + C49007 * C712) * C102 +
                (C113 * C698 + C49007 * C704) * C115 +
                (C113 * C705 + C49007 * C713) * C103 +
                (C113 * C699 + C49007 * C706) * C116 +
                (C113 * C707 + C49007 * C714) * C104 +
                (C113 * C700 + C49007 * C708) * C117 +
                (C113 * C709 + C49007 * C715) * C105 +
                (C113 * C701 + C49007 * C710) * C118 +
                (C113 * C711 + C49007 * C716) * C106) *
                   C48996 * C49281 -
               (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                (C113 * C277 + C49007 * C285) * C102 +
                (C113 * C267 + C49007 * C278) * C114) *
                   C48996 * C799) *
                  C49279) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C49007 * C126) * C1084 +
                 (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                 C169 * C1079 + C170 * C1086 + C171 * C49271) *
                    C49319 +
                (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                C1786 * C49284) *
                   C799 -
               ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
                 (C113 * C409 + C49007 * C417) * C1078 +
                 (C113 * C399 + C49007 * C410) * C1084) *
                    C49319) *
                   C49281) *
                  C259 +
              (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                ((C113 * C1932 + C49007 * C1935) * C1084 +
                 (C113 * C1936 + C49007 * C1941) * C1078 +
                 (C113 * C1933 + C49007 * C1937) * C1085 +
                 (C113 * C1938 + C49007 * C1942) * C1079 +
                 (C113 * C1934 + C49007 * C1939) * C1086 +
                 (C113 * C1940 + C49007 * C1943) * C49271) *
                    C49284) *
                   C49281 -
               ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                   C799) *
                  C49279) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C799 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C259 +
          (((C2507 * C697 + C49320 * C702 + C2508 * C2370 + C49309 * C2376 +
             C2509 * C3354 + C49287 * C3357) *
                C1084 +
            (C2507 * C703 + C49320 * C712 + C2508 * C2377 + C49309 * C2388 +
             C2509 * C3358 + C49287 * C3363) *
                C1078 +
            (C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
             C2509 * C3355 + C49287 * C3359) *
                C1085 +
            (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
             C2509 * C3360 + C49287 * C3364) *
                C1079 +
            (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
             C2509 * C3356 + C49287 * C3361) *
                C1086 +
            (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
             C2509 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C799 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C259 +
          (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
            (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
            ((C113 * C1932 + C49007 * C1935) * C7914 +
             (C113 * C1936 + C49007 * C1941) * C49316 +
             (C113 * C1933 + C49007 * C1937) * C7915 +
             (C113 * C1938 + C49007 * C1942) * C49303 +
             (C113 * C1934 + C49007 * C1939) * C7916 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C799 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C259 +
          (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
            (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
            ((C113 * C9578 + C49007 * C9579) * C9128 +
             (C113 * C9580 + C49007 * C9581) * C48892) *
                C9127) *
               C49281 -
           ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
            (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
            (C9221 + C9220) * C9123) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C799 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C259 +
          ((((C10771 + C10770 + C10769) * C9128 +
             (C10768 + C10767 + C10766) * C48892) *
                C7911 +
            ((C10765 + C10764 + C10763) * C9128 +
             (C10762 + C10761 + C10760) * C48892) *
                C7912 +
            ((C2507 * C1932 + C49320 * C1935 + C2508 * C9828 + C49309 * C9830 +
              C2509 * C10731 + C49287 * C10732) *
                 C9128 +
             (C2507 * C1936 + C49320 * C1941 + C2508 * C9831 + C49309 * C9834 +
              C2509 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10577 + C10578 + C10579) * C48892 +
             (C10580 + C10581 + C10582) * C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C7914 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C49316 +
            (C15237 + C15238 + C15239) * C7915 +
            (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
            C15258 * C49271) *
               C48996 * C799 -
           ((C15611 + C15612 + C15613) * C49271 +
            (C15614 + C15615 + C15616) * C7916 +
            (C15617 + C15618 + C15619) * C49303 +
            (C15620 + C15621 + C15622) * C7915 +
            (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C49316 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C7914) *
               C48996 * C49281) *
              C259 +
          (((C15197 * C697 + C15194 * C702 + C15198 * C2370 + C15195 * C2376 +
             C15199 * C3354 + C49287 * C3357) *
                C7914 +
            (C15197 * C703 + C15194 * C712 + C15198 * C2377 + C15195 * C2388 +
             C15199 * C3358 + C49287 * C3363) *
                C49316 +
            (C15197 * C698 + C15194 * C704 + C15198 * C2371 + C15195 * C2378 +
             C15199 * C3355 + C49287 * C3359) *
                C7915 +
            (C15197 * C705 + C15194 * C713 + C15198 * C2379 + C15195 * C2389 +
             C15199 * C3360 + C49287 * C3364) *
                C49303 +
            (C15197 * C699 + C15194 * C706 + C15198 * C2372 + C15195 * C2380 +
             C15199 * C3356 + C49287 * C3361) *
                C7916 +
            (C15197 * C707 + C15194 * C714 + C15198 * C2381 + C15195 * C2390 +
             C15199 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C15429 + C15430 + C15431) * C49271 +
            (C15432 + C15433 + C15434) * C7916 +
            (C15435 + C15436 + C15437) * C49303 +
            (C15438 + C15439 + C15440) * C7915 +
            (C15199 * C2377 + C49287 * C2388 + C15198 * C703 + C15195 * C712 +
             C15197 * C277 + C15194 * C285) *
                C49316 +
            (C15199 * C2370 + C49287 * C2376 + C15198 * C697 + C15195 * C702 +
             C15197 * C267 + C15194 * C278) *
                C7914) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
              C15199 * C948 + C49287 * C953) *
                 C9128 +
             (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
              C15199 * C954 + C49287 * C963) *
                 C48892) *
                C49319 +
            ((C16719 + C16720 + C16721) * C9128 +
             (C16722 + C16723 + C16724) * C48892) *
                C49307 +
            C17163 * C49284) *
               C799 -
           (((C17334 + C17335 + C17336) * C48892 +
             (C17337 + C17338 + C17339) * C9128) *
                C49284 +
            ((C17340 + C17341 + C17342) * C48892 +
             (C17343 + C17344 + C17345) * C9128) *
                C49307 +
            ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
              C15197 * C409 + C15194 * C417) *
                 C48892 +
             (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
              C15197 * C399 + C15194 * C410) *
                 C9128) *
                C49319) *
               C49281) *
              C259 +
          ((((C17345 + C17344 + C17343) * C9128 +
             (C17342 + C17341 + C17340) * C48892) *
                C49319 +
            ((C17339 + C17338 + C17337) * C9128 +
             (C17336 + C17335 + C17334) * C48892) *
                C49307 +
            ((C15197 * C1932 + C15194 * C1935 + C15198 * C9828 +
              C15195 * C9830 + C15199 * C10731 + C49287 * C10732) *
                 C9128 +
             (C15197 * C1936 + C15194 * C1941 + C15198 * C9831 +
              C15195 * C9834 + C15199 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C17155 + C17156 + C17157) * C48892 +
             (C17158 + C17159 + C17160) * C9128) *
                C49284 +
            ((C16730 + C16729 + C16728) * C48892 +
             (C16727 + C16726 + C16725) * C9128) *
                C49307 +
            ((C16724 + C16723 + C16722) * C48892 +
             (C16721 + C16720 + C16719) * C9128) *
                C49319) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
             C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
             C17818 * C3768 + C17813 * C3771) *
                C9128 +
            (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
             C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
             C17818 * C3772 + C17813 * C3777) *
                C48892) *
               C48996 * C799 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3772 +
             C17812 * C3777 + C17816 * C2908 + C17811 * C2914 + C17815 * C954 +
             C17810 * C963 + C17814 * C409 + C17809 * C417) *
                C48892 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3768 +
             C17812 * C3771 + C17816 * C2902 + C17811 * C2909 + C17815 * C948 +
             C17810 * C953 + C17814 * C399 + C17809 * C410) *
                C9128) *
               C48996 * C49281) *
              C259 +
          (((C17814 * C697 + C17809 * C702 + C17815 * C2370 + C17810 * C2376 +
             C17816 * C3354 + C17811 * C3357 + C17817 * C11173 +
             C17812 * C11175 + C17818 * C18221 + C17813 * C18222) *
                C9128 +
            (C17814 * C703 + C17809 * C712 + C17815 * C2377 + C17810 * C2388 +
             C17816 * C3358 + C17811 * C3363 + C17817 * C11176 +
             C17812 * C11179 + C17818 * C18223 + C17813 * C18224) *
                C48892) *
               C48996 * C49281 -
           ((C17818 * C11176 + C17813 * C11179 + C17817 * C3358 +
             C17812 * C3363 + C17816 * C2377 + C17811 * C2388 + C17815 * C703 +
             C17810 * C712 + C17814 * C277 + C17809 * C285) *
                C48892 +
            (C17818 * C11173 + C17813 * C11175 + C17817 * C3354 +
             C17812 * C3357 + C17816 * C2370 + C17811 * C2376 + C17815 * C697 +
             C17810 * C702 + C17814 * C267 + C17809 * C278) *
                C9128) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C49007 * C126) * C114 +
               (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48996 * C945 -
              (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
               C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
               (C113 * C409 + C49007 * C417) * C102 +
               (C113 * C399 + C49007 * C410) * C114) *
                  C48996 * C946 +
              ((C113 * C948 + C49007 * C953) * C114 +
               (C113 * C954 + C49007 * C963) * C102 +
               (C113 * C949 + C49007 * C955) * C115 +
               (C113 * C956 + C49007 * C964) * C103 +
               (C113 * C950 + C49007 * C957) * C116 +
               (C113 * C958 + C49007 * C965) * C104 +
               (C113 * C951 + C49007 * C959) * C117 +
               (C113 * C960 + C49007 * C966) * C105 +
               (C113 * C952 + C49007 * C961) * C118 +
               (C113 * C962 + C49007 * C967) * C106) *
                  C48996 * C947) *
             C48961 * C48927 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C49007 * C126) * C1084 +
                (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                C169 * C1079 + C170 * C1086 + C171 * C49271) *
                   C49319 +
               (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
               C1786 * C49284) *
                  C945 -
              ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
               (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
               (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
                (C113 * C409 + C49007 * C417) * C1078 +
                (C113 * C399 + C49007 * C410) * C1084) *
                   C49319) *
                  C946 +
              (((C113 * C948 + C49007 * C953) * C1084 +
                (C113 * C954 + C49007 * C963) * C1078 +
                (C113 * C949 + C49007 * C955) * C1085 +
                (C113 * C956 + C49007 * C964) * C1079 +
                (C113 * C950 + C49007 * C957) * C1086 +
                (C113 * C958 + C49007 * C965) * C49271) *
                   C49319 +
               ((C113 * C2370 + C49007 * C2376) * C1084 +
                (C113 * C2377 + C49007 * C2388) * C1078 +
                (C113 * C2371 + C49007 * C2378) * C1085 +
                (C113 * C2379 + C49007 * C2389) * C1079 +
                (C113 * C2372 + C49007 * C2380) * C1086 +
                (C113 * C2381 + C49007 * C2390) * C49271) *
                   C49307 +
               ((C113 * C2373 + C49007 * C2382) * C1084 +
                (C113 * C2383 + C49007 * C2391) * C1078 +
                (C113 * C2374 + C49007 * C2384) * C1085 +
                (C113 * C2385 + C49007 * C2392) * C1079 +
                (C113 * C2375 + C49007 * C2386) * C1086 +
                (C113 * C2387 + C49007 * C2393) * C49271) *
                   C49284) *
                  C947) *
             C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C945 -
          ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
           (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
           (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
            C2507 * C409 + C49320 * C417) *
               C1078 +
           (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
            C2507 * C399 + C49320 * C410) *
               C1084) *
              C48996 * C946 +
          ((C2507 * C948 + C49320 * C953 + C2508 * C2902 + C49309 * C2909 +
            C2509 * C3768 + C49287 * C3771) *
               C1084 +
           (C2507 * C954 + C49320 * C963 + C2508 * C2908 + C49309 * C2914 +
            C2509 * C3772 + C49287 * C3777) *
               C1078 +
           (C2507 * C949 + C49320 * C955 + C2508 * C2901 + C49309 * C2907 +
            C2509 * C3769 + C49287 * C3773) *
               C1085 +
           (C2507 * C956 + C49320 * C964 + C2508 * C2906 + C49309 * C2913 +
            C2509 * C3774 + C49287 * C3778) *
               C1079 +
           (C2507 * C950 + C49320 * C957 + C2508 * C2900 + C49309 * C2905 +
            C2509 * C3770 + C49287 * C3775) *
               C1086 +
           (C2507 * C958 + C49320 * C965 + C2508 * C2904 + C49309 * C2912 +
            C2509 * C3776 + C49287 * C3779) *
               C49271) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
           C8500 * C49284) *
              C945 -
          ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
           (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
           (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
            (C113 * C409 + C49007 * C417) * C49316 +
            (C113 * C399 + C49007 * C410) * C7914) *
               C7911) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C7914 +
            (C113 * C954 + C49007 * C963) * C49316 +
            (C113 * C949 + C49007 * C955) * C7915 +
            (C113 * C956 + C49007 * C964) * C49303 +
            (C113 * C950 + C49007 * C957) * C7916 +
            (C113 * C958 + C49007 * C965) * C49271) *
               C7911 +
           ((C113 * C2370 + C49007 * C2376) * C7914 +
            (C113 * C2377 + C49007 * C2388) * C49316 +
            (C113 * C2371 + C49007 * C2378) * C7915 +
            (C113 * C2379 + C49007 * C2389) * C49303 +
            (C113 * C2372 + C49007 * C2380) * C7916 +
            (C113 * C2381 + C49007 * C2390) * C49271) *
               C7912 +
           ((C113 * C2373 + C49007 * C2382) * C7914 +
            (C113 * C2383 + C49007 * C2391) * C49316 +
            (C113 * C2374 + C49007 * C2384) * C7915 +
            (C113 * C2385 + C49007 * C2392) * C49303 +
            (C113 * C2375 + C49007 * C2386) * C7916 +
            (C113 * C2387 + C49007 * C2393) * C49271) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
           C9488 * C9127) *
              C945 -
          ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
           (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
           ((C113 * C409 + C49007 * C417) * C48892 +
            (C113 * C399 + C49007 * C410) * C9128) *
               C9123) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C9128 +
            (C113 * C954 + C49007 * C963) * C48892) *
               C9123 +
           ((C113 * C2370 + C49007 * C2376) * C9128 +
            (C113 * C2377 + C49007 * C2388) * C48892) *
               C9124 +
           ((C113 * C2373 + C49007 * C2382) * C9128 +
            (C113 * C2383 + C49007 * C2391) * C48892) *
               C9125 +
           ((C113 * C9828 + C49007 * C9830) * C9128 +
            (C113 * C9831 + C49007 * C9834) * C48892) *
               C9126 +
           ((C113 * C9829 + C49007 * C9832) * C9128 +
            (C113 * C9833 + C49007 * C9835) * C48892) *
               C9127) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C10133 + C10134 + C10135) * C9128 +
            (C10136 + C10137 + C10138) * C48892) *
               C7912 +
           C10585 * C49284) *
              C945 -
          (((C10760 + C10761 + C10762) * C48892 +
            (C10763 + C10764 + C10765) * C9128) *
               C49284 +
           ((C10766 + C10767 + C10768) * C48892 +
            (C10769 + C10770 + C10771) * C9128) *
               C7912 +
           ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C48892 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C9128) *
               C7911) *
              C946 +
          (((C2507 * C948 + C49320 * C953 + C2508 * C2902 + C49309 * C2909 +
             C2509 * C3768 + C49287 * C3771) *
                C9128 +
            (C2507 * C954 + C49320 * C963 + C2508 * C2908 + C49309 * C2914 +
             C2509 * C3772 + C49287 * C3777) *
                C48892) *
               C7911 +
           ((C2507 * C2370 + C49320 * C2376 + C2508 * C3354 + C49309 * C3357 +
             C2509 * C11173 + C49287 * C11175) *
                C9128 +
            (C2507 * C2377 + C49320 * C2388 + C2508 * C3358 + C49309 * C3363 +
             C2509 * C11176 + C49287 * C11179) *
                C48892) *
               C7912 +
           ((C2507 * C2373 + C49320 * C2382 + C2508 * C10296 + C49309 * C10299 +
             C2509 * C11174 + C49287 * C11177) *
                C9128 +
            (C2507 * C2383 + C49320 * C2391 + C2508 * C10298 + C49309 * C10302 +
             C2509 * C11178 + C49287 * C11180) *
                C48892) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
            C15199 * C948 + C49287 * C953) *
               C7914 +
           (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
            C15199 * C954 + C49287 * C963) *
               C49316 +
           (C15237 + C15238 + C15239) * C7915 +
           (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
           C15258 * C49271) *
              C48996 * C945 -
          ((C15611 + C15612 + C15613) * C49271 +
           (C15614 + C15615 + C15616) * C7916 +
           (C15617 + C15618 + C15619) * C49303 +
           (C15620 + C15621 + C15622) * C7915 +
           (C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
            C15197 * C409 + C15194 * C417) *
               C49316 +
           (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
            C15197 * C399 + C15194 * C410) *
               C7914) *
              C48996 * C946 +
          ((C15197 * C948 + C15194 * C953 + C15198 * C2902 + C15195 * C2909 +
            C15199 * C3768 + C49287 * C3771) *
               C7914 +
           (C15197 * C954 + C15194 * C963 + C15198 * C2908 + C15195 * C2914 +
            C15199 * C3772 + C49287 * C3777) *
               C49316 +
           (C15197 * C949 + C15194 * C955 + C15198 * C2901 + C15195 * C2907 +
            C15199 * C3769 + C49287 * C3773) *
               C7915 +
           (C15197 * C956 + C15194 * C964 + C15198 * C2906 + C15195 * C2913 +
            C15199 * C3774 + C49287 * C3778) *
               C49303 +
           (C15197 * C950 + C15194 * C957 + C15198 * C2900 + C15195 * C2905 +
            C15199 * C3770 + C49287 * C3775) *
               C7916 +
           (C15197 * C958 + C15194 * C965 + C15198 * C2904 + C15195 * C2912 +
            C15199 * C3776 + C49287 * C3779) *
               C49271) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C119 + C15194 * C126 + C15198 * C399 + C15195 * C410 +
             C15199 * C948 + C49287 * C953) *
                C9128 +
            (C15197 * C127 + C15194 * C140 + C15198 * C409 + C15195 * C417 +
             C15199 * C954 + C49287 * C963) *
                C48892) *
               C49319 +
           ((C16719 + C16720 + C16721) * C9128 +
            (C16722 + C16723 + C16724) * C48892) *
               C49307 +
           C17163 * C49284) *
              C945 -
          (((C17334 + C17335 + C17336) * C48892 +
            (C17337 + C17338 + C17339) * C9128) *
               C49284 +
           ((C17340 + C17341 + C17342) * C48892 +
            (C17343 + C17344 + C17345) * C9128) *
               C49307 +
           ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 + C15195 * C963 +
             C15197 * C409 + C15194 * C417) *
                C48892 +
            (C15199 * C2902 + C49287 * C2909 + C15198 * C948 + C15195 * C953 +
             C15197 * C399 + C15194 * C410) *
                C9128) *
               C49319) *
              C946 +
          (((C15197 * C948 + C15194 * C953 + C15198 * C2902 + C15195 * C2909 +
             C15199 * C3768 + C49287 * C3771) *
                C9128 +
            (C15197 * C954 + C15194 * C963 + C15198 * C2908 + C15195 * C2914 +
             C15199 * C3772 + C49287 * C3777) *
                C48892) *
               C49319 +
           ((C15197 * C2370 + C15194 * C2376 + C15198 * C3354 + C15195 * C3357 +
             C15199 * C11173 + C49287 * C11175) *
                C9128 +
            (C15197 * C2377 + C15194 * C2388 + C15198 * C3358 + C15195 * C3363 +
             C15199 * C11176 + C49287 * C11179) *
                C48892) *
               C49307 +
           ((C15197 * C2373 + C15194 * C2382 + C15198 * C10296 +
             C15195 * C10299 + C15199 * C11174 + C49287 * C11177) *
                C9128 +
            (C15197 * C2383 + C15194 * C2391 + C15198 * C10298 +
             C15195 * C10302 + C15199 * C11178 + C49287 * C11180) *
                C48892) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C119 + C17809 * C126 + C17815 * C399 + C17810 * C410 +
            C17816 * C948 + C17811 * C953 + C17817 * C2902 + C17812 * C2909 +
            C17818 * C3768 + C17813 * C3771) *
               C9128 +
           (C17814 * C127 + C17809 * C140 + C17815 * C409 + C17810 * C417 +
            C17816 * C954 + C17811 * C963 + C17817 * C2908 + C17812 * C2914 +
            C17818 * C3772 + C17813 * C3777) *
               C48892) *
              C48996 * C945 -
          ((C17818 * C17989 + C17813 * C17993 + C17817 * C3772 +
            C17812 * C3777 + C17816 * C2908 + C17811 * C2914 + C17815 * C954 +
            C17810 * C963 + C17814 * C409 + C17809 * C417) *
               C48892 +
           (C17818 * C17987 + C17813 * C17990 + C17817 * C3768 +
            C17812 * C3771 + C17816 * C2902 + C17811 * C2909 + C17815 * C948 +
            C17810 * C953 + C17814 * C399 + C17809 * C410) *
               C9128) *
              C48996 * C946 +
          ((C17814 * C948 + C17809 * C953 + C17815 * C2902 + C17810 * C2909 +
            C17816 * C3768 + C17811 * C3771 + C17817 * C17987 +
            C17812 * C17990 + C17818 * C18451 + C17813 * C18452) *
               C9128 +
           (C17814 * C954 + C17809 * C963 + C17815 * C2908 + C17810 * C2914 +
            C17816 * C3772 + C17811 * C3777 + C17817 * C17989 +
            C17812 * C17993 + C17818 * C18453 + C17813 * C18454) *
               C48892) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
            (C6488 + C6487) * C47890 + (C6486 + C6485) * C48902) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
            (C6485 + C6486) * C49229 + (C6487 + C6488) * C47909) *
               C49284 +
           (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 + C6476 * C47909) *
               C7912 +
           ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
            (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C5053 * C47909 + C5054 * C49229 + C5055 * C47890 + C5056 * C48902) *
               C7911 +
           (C6251 * C47909 + C6252 * C49229 + (C5214 + C5213) * C47890 +
            (C5212 + C5211) * C48902) *
               C7912 +
           ((C6484 + C6483) * C47909 + (C6482 + C6481) * C49229 +
            (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                C47890 +
            (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                C48902) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C48978 * C48961 * C110 -
          ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
           (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
           (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
           (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
              C48996 * C48978 * C48961 * C111 +
          (C5053 * C3884 + C5054 * C3878 + C5055 * C3885 + C5056 * C3879 +
           (C5052 + C5051) * C3886 + (C5050 + C5049) * C3880 +
           (C5002 * C124 + C49252 * C137 + C5003 * C400 + C49094 * C411) *
               C3887 +
           (C5002 * C136 + C49252 * C145 + C5003 * C412 + C49094 * C418) *
               C49288) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
            C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
               C47909 +
           (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
            C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
               C49229 +
           (C20222 + C20223 + C20224 + C20225) * C47890 +
           (C20226 + C20227 + C20228 + C20229) * C48902) *
              C48996 * C48978 * C48961 * C110 -
          ((C20230 + C20231 + C20232 + C20233) * C48902 +
           (C20234 + C20235 + C20236 + C20237) * C47890 +
           (C20229 + C20228 + C20227 + C20226) * C49229 +
           (C20225 + C20224 + C20223 + C20222) * C47909) *
              C48996 * C48978 * C48961 * C111 +
          ((C20237 + C20236 + C20235 + C20234) * C47909 +
           (C20233 + C20232 + C20231 + C20230) * C49229 +
           (C20185 * C122 + C20181 * C132 + C20186 * C396 + C20182 * C404 +
            C20187 * C951 + C20183 * C959 + C20188 * C2903 + C49300 * C2910) *
               C47890 +
           (C20185 * C133 + C20181 * C143 + C20186 * C403 + C20182 * C414 +
            C20187 * C960 + C20183 * C966 + C20188 * C2911 + C49300 * C2915) *
               C48902) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C48978 * C259 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C5003 * C1936 + C49094 * C1941 + C5002 * C1259 + C49252 * C1265) *
                 C49229 +
             (C5003 * C1932 + C49094 * C1935 + C5002 * C1253 + C49252 * C1260) *
                 C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C47909 + C6456 * C49229 + C6251 * C47890 +
             C6252 * C48902) *
                C7911 +
            (C12656 * C47909 + C12657 * C49229 + (C6484 + C6483) * C47890 +
             (C6482 + C6481) * C48902) *
                C7912 +
            ((C12671 + C12670) * C47909 + (C12669 + C12668) * C49229 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C47890 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C48978 * C259 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C5222 + C5221) * C3884 + (C5220 + C5219) * C3878 +
            (C5218 + C5217) * C3885 + (C5216 + C5215) * C3879 +
            (C5214 + C5213) * C3886 + (C5212 + C5211) * C3880 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C3887 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C48978 * C259 -
           ((C20384 + C20385 + C20386 + C20387) * C48902 +
            (C20388 + C20389 + C20390 + C20391) * C47890 +
            (C20188 * C3358 + C49300 * C3363 + C20187 * C2377 + C20183 * C2388 +
             C20186 * C703 + C20182 * C712 + C20185 * C277 + C20181 * C285) *
                C49229 +
            (C20188 * C3354 + C49300 * C3357 + C20187 * C2370 + C20183 * C2376 +
             C20186 * C697 + C20182 * C702 + C20185 * C267 + C20181 * C278) *
                C47909) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C20391 + C20390 + C20389 + C20388) * C47909 +
            (C20387 + C20386 + C20385 + C20384) * C49229 +
            (C20185 * C265 + C20181 * C274 + C20186 * C699 + C20182 * C706 +
             C20187 * C2372 + C20183 * C2380 + C20188 * C3356 +
             C49300 * C3361) *
                C47890 +
            (C20185 * C273 + C20181 * C283 + C20186 * C707 + C20182 * C714 +
             C20187 * C2381 + C20183 * C2390 + C20188 * C3362 +
             C49300 * C3365) *
                C48902) *
               C48996 * C48978 * C49279 -
           ((C20230 + C20231 + C20232 + C20233) * C48902 +
            (C20234 + C20235 + C20236 + C20237) * C47890 +
            (C20229 + C20228 + C20227 + C20226) * C49229 +
            (C20225 + C20224 + C20223 + C20222) * C47909) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C5003 * C2383 + C49094 * C2391 + C5002 * C1469 + C49252 * C1475) *
                 C49229 +
             (C5003 * C2373 + C49094 * C2382 + C5002 * C1463 + C49252 * C1470) *
                 C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C47909 + (C5386 + C5385) * C49229 +
             (C5384 + C5383) * C47890 + (C5382 + C5381) * C48902) *
                C7911 +
            ((C6706 + C6705) * C47909 + (C6704 + C6703) * C49229 +
             (C6702 + C6701) * C47890 + (C6700 + C6699) * C48902) *
                C7912 +
            ((C12877 + C12876) * C47909 + (C12875 + C12874) * C49229 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47890 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C393 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C5388 + C5387) * C3884 + (C5386 + C5385) * C3878 +
            (C5384 + C5383) * C3885 + (C5382 + C5381) * C3879 +
            (C5380 + C5379) * C3886 + (C5378 + C5377) * C3880 +
            (C5002 * C395 + C49252 * C402 + C5003 * C952 + C49094 * C961) *
                C3887 +
            (C5002 * C401 + C49252 * C413 + C5003 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C393 -
           ((C20538 + C20539 + C20540 + C20541) * C48902 +
            (C20542 + C20543 + C20544 + C20545) * C47890 +
            (C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
             C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
                C49229 +
            (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
             C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
                C47909) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C20545 + C20544 + C20543 + C20542) * C47909 +
            (C20541 + C20540 + C20539 + C20538) * C49229 +
            (C20185 * C397 + C20181 * C406 + C20186 * C950 + C20182 * C957 +
             C20187 * C2900 + C20183 * C2905 + C20188 * C3770 +
             C49300 * C3775) *
                C47890 +
            (C20185 * C405 + C20181 * C415 + C20186 * C958 + C20182 * C965 +
             C20187 * C2904 + C20183 * C2912 + C20188 * C3776 +
             C49300 * C3779) *
                C48902) *
               C48996 * C49281 -
           ((C20230 + C20231 + C20232 + C20233) * C48902 +
            (C20234 + C20235 + C20236 + C20237) * C47890 +
            (C20229 + C20228 + C20227 + C20226) * C49229 +
            (C20225 + C20224 + C20223 + C20222) * C47909) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C48978 * C525 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C5003 * C1936 + C49094 * C1941 + C5002 * C1259 + C49252 * C1265) *
                 C49229 +
             (C5003 * C1932 + C49094 * C1935 + C5002 * C1253 + C49252 * C1260) *
                 C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C47909 + C6456 * C49229 + C6251 * C47890 +
             C6252 * C48902) *
                C7911 +
            (C12656 * C47909 + C12657 * C49229 + (C6484 + C6483) * C47890 +
             (C6482 + C6481) * C48902) *
                C7912 +
            ((C12671 + C12670) * C47909 + (C12669 + C12668) * C49229 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C47890 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C48978 * C525 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C5222 + C5221) * C3884 + (C5220 + C5219) * C3878 +
            (C5218 + C5217) * C3885 + (C5216 + C5215) * C3879 +
            (C5214 + C5213) * C3886 + (C5212 + C5211) * C3880 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C3887 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C48978 * C525 -
           ((C20384 + C20385 + C20386 + C20387) * C48902 +
            (C20388 + C20389 + C20390 + C20391) * C47890 +
            (C20188 * C3358 + C49300 * C3363 + C20187 * C2377 + C20183 * C2388 +
             C20186 * C703 + C20182 * C712 + C20185 * C277 + C20181 * C285) *
                C49229 +
            (C20188 * C3354 + C49300 * C3357 + C20187 * C2370 + C20183 * C2376 +
             C20186 * C697 + C20182 * C702 + C20185 * C267 + C20181 * C278) *
                C47909) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C20391 + C20390 + C20389 + C20388) * C47909 +
            (C20387 + C20386 + C20385 + C20384) * C49229 +
            (C20185 * C265 + C20181 * C274 + C20186 * C699 + C20182 * C706 +
             C20187 * C2372 + C20183 * C2380 + C20188 * C3356 +
             C49300 * C3361) *
                C47890 +
            (C20185 * C273 + C20181 * C283 + C20186 * C707 + C20182 * C714 +
             C20187 * C2381 + C20183 * C2390 + C20188 * C3362 +
             C49300 * C3365) *
                C48902) *
               C48996 * C48978 * C49279 -
           ((C20230 + C20231 + C20232 + C20233) * C48902 +
            (C20234 + C20235 + C20236 + C20237) * C47890 +
            (C20229 + C20228 + C20227 + C20226) * C49229 +
            (C20225 + C20224 + C20223 + C20222) * C47909) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           C13238 * C49284) *
              C48978 * C591 -
          (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
            (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
               C49284 +
           (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
            (C7057 + C7058) * C47909) *
               C7912 +
           (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
            (C6478 + C6477) * C47909) *
               C7911) *
              C48978 * C592 +
          (C13238 * C7911 +
           ((C13235 + C13234) * C47909 + (C13233 + C13232) * C49229 +
            (C12671 + C12670) * C47890 + (C12669 + C12668) * C48902) *
               C7912 +
           ((C5002 * C1757 + C49252 * C1760 + C5003 * C9329 + C49094 * C9332) *
                C47909 +
            (C5002 * C1761 + C49252 * C1766 + C5003 * C9331 + C49094 * C9335) *
                C49229 +
            (C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                C47890 +
            (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                C48902) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C48978 * C591 -
          ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
           (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
           (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
           (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
               C3878 +
           (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
               C3884) *
              C48996 * C48978 * C592 +
          ((C5002 * C595 + C49252 * C600 + C5003 * C1463 + C49094 * C1470) *
               C3884 +
           (C5002 * C601 + C49252 * C610 + C5003 * C1469 + C49094 * C1475) *
               C3878 +
           (C5002 * C596 + C49252 * C602 + C5003 * C1462 + C49094 * C1468) *
               C3885 +
           (C5002 * C603 + C49252 * C611 + C5003 * C1467 + C49094 * C1474) *
               C3879 +
           (C5002 * C597 + C49252 * C604 + C5003 * C1461 + C49094 * C1466) *
               C3886 +
           (C5002 * C605 + C49252 * C612 + C5003 * C1465 + C49094 * C1473) *
               C3880 +
           (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
               C3887 +
           (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
               C49288) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
            C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
               C47909 +
           (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
            C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
               C49229 +
           (C20222 + C20223 + C20224 + C20225) * C47890 +
           (C20226 + C20227 + C20228 + C20229) * C48902) *
              C48996 * C48978 * C591 -
          ((C20384 + C20385 + C20386 + C20387) * C48902 +
           (C20388 + C20389 + C20390 + C20391) * C47890 +
           (C20188 * C3358 + C49300 * C3363 + C20187 * C2377 + C20183 * C2388 +
            C20186 * C703 + C20182 * C712 + C20185 * C277 + C20181 * C285) *
               C49229 +
           (C20188 * C3354 + C49300 * C3357 + C20187 * C2370 + C20183 * C2376 +
            C20186 * C697 + C20182 * C702 + C20185 * C267 + C20181 * C278) *
               C47909) *
              C48996 * C48978 * C592 +
          ((C20185 * C595 + C20181 * C600 + C20186 * C1463 + C20182 * C1470 +
            C20187 * C2373 + C20183 * C2382 + C20188 * C10296 +
            C49300 * C10299) *
               C47909 +
           (C20185 * C601 + C20181 * C610 + C20186 * C1469 + C20182 * C1475 +
            C20187 * C2383 + C20183 * C2391 + C20188 * C10298 +
            C49300 * C10302) *
               C49229 +
           (C20185 * C596 + C20181 * C602 + C20186 * C1462 + C20182 * C1468 +
            C20187 * C2374 + C20183 * C2384 + C20188 * C10297 +
            C49300 * C10300) *
               C47890 +
           (C20185 * C603 + C20181 * C611 + C20186 * C1467 + C20182 * C1474 +
            C20187 * C2385 + C20183 * C2392 + C20188 * C10301 +
            C49300 * C10303) *
               C48902) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C47909 + (C7262 + C7261) * C49229 +
             (C6706 + C6705) * C47890 + (C6704 + C6703) * C48902) *
                C7911 +
            ((C13444 + C13443) * C47909 + (C13442 + C13441) * C49229 +
             (C12877 + C12876) * C47890 + (C12875 + C12874) * C48902) *
                C7912 +
            ((C5002 * C1932 + C49252 * C1935 + C5003 * C9828 + C49094 * C9830) *
                 C47909 +
             (C5002 * C1936 + C49252 * C1941 + C5003 * C9831 + C49094 * C9834) *
                 C49229 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C393 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C525 +
          (((C5002 * C697 + C49252 * C702 + C5003 * C2370 + C49094 * C2376) *
                C3884 +
            (C5002 * C703 + C49252 * C712 + C5003 * C2377 + C49094 * C2388) *
                C3878 +
            (C5002 * C698 + C49252 * C704 + C5003 * C2371 + C49094 * C2378) *
                C3885 +
            (C5002 * C705 + C49252 * C713 + C5003 * C2379 + C49094 * C2389) *
                C3879 +
            (C5002 * C699 + C49252 * C706 + C5003 * C2372 + C49094 * C2380) *
                C3886 +
            (C5002 * C707 + C49252 * C714 + C5003 * C2381 + C49094 * C2390) *
                C3880 +
            (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                C3887 +
            (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C393 -
           ((C20538 + C20539 + C20540 + C20541) * C48902 +
            (C20542 + C20543 + C20544 + C20545) * C47890 +
            (C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
             C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
                C49229 +
            (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
             C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
                C47909) *
               C48996 * C49281) *
              C525 +
          (((C20185 * C697 + C20181 * C702 + C20186 * C2370 + C20182 * C2376 +
             C20187 * C3354 + C20183 * C3357 + C20188 * C11173 +
             C49300 * C11175) *
                C47909 +
            (C20185 * C703 + C20181 * C712 + C20186 * C2377 + C20182 * C2388 +
             C20187 * C3358 + C20183 * C3363 + C20188 * C11176 +
             C49300 * C11179) *
                C49229 +
            (C20185 * C698 + C20181 * C704 + C20186 * C2371 + C20182 * C2378 +
             C20187 * C3355 + C20183 * C3359 + C20188 * C17901 +
             C49300 * C17902) *
                C47890 +
            (C20185 * C705 + C20181 * C713 + C20186 * C2379 + C20182 * C2389 +
             C20187 * C3360 + C20183 * C3364 + C20188 * C17903 +
             C49300 * C17904) *
                C48902) *
               C48996 * C49281 -
           ((C20384 + C20385 + C20386 + C20387) * C48902 +
            (C20388 + C20389 + C20390 + C20391) * C47890 +
            (C20188 * C3358 + C49300 * C3363 + C20187 * C2377 + C20183 * C2388 +
             C20186 * C703 + C20182 * C712 + C20185 * C277 + C20181 * C285) *
                C49229 +
            (C20188 * C3354 + C49300 * C3357 + C20187 * C2370 + C20183 * C2376 +
             C20186 * C697 + C20182 * C702 + C20185 * C267 + C20181 * C278) *
                C47909) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C47909 + (C5386 + C5385) * C49229 +
             (C5384 + C5383) * C47890 + (C5382 + C5381) * C48902) *
                C7911 +
            ((C6706 + C6705) * C47909 + (C6704 + C6703) * C49229 +
             (C6702 + C6701) * C47890 + (C6700 + C6699) * C48902) *
                C7912 +
            ((C12877 + C12876) * C47909 + (C12875 + C12874) * C49229 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47890 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C799 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C5388 + C5387) * C3884 + (C5386 + C5385) * C3878 +
            (C5384 + C5383) * C3885 + (C5382 + C5381) * C3879 +
            (C5380 + C5379) * C3886 + (C5378 + C5377) * C3880 +
            (C5002 * C395 + C49252 * C402 + C5003 * C952 + C49094 * C961) *
                C3887 +
            (C5002 * C401 + C49252 * C413 + C5003 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C799 -
           ((C20538 + C20539 + C20540 + C20541) * C48902 +
            (C20542 + C20543 + C20544 + C20545) * C47890 +
            (C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
             C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
                C49229 +
            (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
             C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
                C47909) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C20545 + C20544 + C20543 + C20542) * C47909 +
            (C20541 + C20540 + C20539 + C20538) * C49229 +
            (C20185 * C397 + C20181 * C406 + C20186 * C950 + C20182 * C957 +
             C20187 * C2900 + C20183 * C2905 + C20188 * C3770 +
             C49300 * C3775) *
                C47890 +
            (C20185 * C405 + C20181 * C415 + C20186 * C958 + C20182 * C965 +
             C20187 * C2904 + C20183 * C2912 + C20188 * C3776 +
             C49300 * C3779) *
                C48902) *
               C48996 * C49281 -
           ((C20230 + C20231 + C20232 + C20233) * C48902 +
            (C20234 + C20235 + C20236 + C20237) * C47890 +
            (C20229 + C20228 + C20227 + C20226) * C49229 +
            (C20225 + C20224 + C20223 + C20222) * C47909) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C47909 + (C7262 + C7261) * C49229 +
             (C6706 + C6705) * C47890 + (C6704 + C6703) * C48902) *
                C7911 +
            ((C13444 + C13443) * C47909 + (C13442 + C13441) * C49229 +
             (C12877 + C12876) * C47890 + (C12875 + C12874) * C48902) *
                C7912 +
            ((C5002 * C1932 + C49252 * C1935 + C5003 * C9828 + C49094 * C9830) *
                 C47909 +
             (C5002 * C1936 + C49252 * C1941 + C5003 * C9831 + C49094 * C9834) *
                 C49229 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C799 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C259 +
          (((C5002 * C697 + C49252 * C702 + C5003 * C2370 + C49094 * C2376) *
                C3884 +
            (C5002 * C703 + C49252 * C712 + C5003 * C2377 + C49094 * C2388) *
                C3878 +
            (C5002 * C698 + C49252 * C704 + C5003 * C2371 + C49094 * C2378) *
                C3885 +
            (C5002 * C705 + C49252 * C713 + C5003 * C2379 + C49094 * C2389) *
                C3879 +
            (C5002 * C699 + C49252 * C706 + C5003 * C2372 + C49094 * C2380) *
                C3886 +
            (C5002 * C707 + C49252 * C714 + C5003 * C2381 + C49094 * C2390) *
                C3880 +
            (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                C3887 +
            (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
             C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
                C47909 +
            (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
             C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
                C49229 +
            (C20222 + C20223 + C20224 + C20225) * C47890 +
            (C20226 + C20227 + C20228 + C20229) * C48902) *
               C48996 * C799 -
           ((C20538 + C20539 + C20540 + C20541) * C48902 +
            (C20542 + C20543 + C20544 + C20545) * C47890 +
            (C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
             C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
                C49229 +
            (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
             C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
                C47909) *
               C48996 * C49281) *
              C259 +
          (((C20185 * C697 + C20181 * C702 + C20186 * C2370 + C20182 * C2376 +
             C20187 * C3354 + C20183 * C3357 + C20188 * C11173 +
             C49300 * C11175) *
                C47909 +
            (C20185 * C703 + C20181 * C712 + C20186 * C2377 + C20182 * C2388 +
             C20187 * C3358 + C20183 * C3363 + C20188 * C11176 +
             C49300 * C11179) *
                C49229 +
            (C20185 * C698 + C20181 * C704 + C20186 * C2371 + C20182 * C2378 +
             C20187 * C3355 + C20183 * C3359 + C20188 * C17901 +
             C49300 * C17902) *
                C47890 +
            (C20185 * C705 + C20181 * C713 + C20186 * C2379 + C20182 * C2389 +
             C20187 * C3360 + C20183 * C3364 + C20188 * C17903 +
             C49300 * C17904) *
                C48902) *
               C48996 * C49281 -
           ((C20384 + C20385 + C20386 + C20387) * C48902 +
            (C20388 + C20389 + C20390 + C20391) * C47890 +
            (C20188 * C3358 + C49300 * C3363 + C20187 * C2377 + C20183 * C2388 +
             C20186 * C703 + C20182 * C712 + C20185 * C277 + C20181 * C285) *
                C49229 +
            (C20188 * C3354 + C49300 * C3357 + C20187 * C2370 + C20183 * C2376 +
             C20186 * C697 + C20182 * C702 + C20185 * C267 + C20181 * C278) *
                C47909) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           C13238 * C49284) *
              C945 -
          (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
            (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
               C49284 +
           ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
            (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
               C7912 +
           ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C49229 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C47909) *
               C7911) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C47909 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C49229 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C47890 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C48902) *
               C7911 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C47909 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C49229 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C47890 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C48902) *
               C7912 +
           ((C5002 * C2373 + C49252 * C2382 + C5003 * C10296 +
             C49094 * C10299) *
                C47909 +
            (C5002 * C2383 + C49252 * C2391 + C5003 * C10298 +
             C49094 * C10302) *
                C49229 +
            (C5002 * C2374 + C49252 * C2384 + C5003 * C10297 +
             C49094 * C10300) *
                C47890 +
            (C5002 * C2385 + C49252 * C2392 + C5003 * C10301 +
             C49094 * C10303) *
                C48902) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C945 -
          ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
           (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
           (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
           (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
               C3878 +
           (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
               C3884) *
              C48996 * C946 +
          ((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
               C3884 +
           (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
               C3878 +
           (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
               C3885 +
           (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
               C3879 +
           (C5002 * C950 + C49252 * C957 + C5003 * C2900 + C49094 * C2905) *
               C3886 +
           (C5002 * C958 + C49252 * C965 + C5003 * C2904 + C49094 * C2912) *
               C3880 +
           (C5002 * C951 + C49252 * C959 + C5003 * C2903 + C49094 * C2910) *
               C3887 +
           (C5002 * C960 + C49252 * C966 + C5003 * C2911 + C49094 * C2915) *
               C49288) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C119 + C20181 * C126 + C20186 * C399 + C20182 * C410 +
            C20187 * C948 + C20183 * C953 + C20188 * C2902 + C49300 * C2909) *
               C47909 +
           (C20185 * C127 + C20181 * C140 + C20186 * C409 + C20182 * C417 +
            C20187 * C954 + C20183 * C963 + C20188 * C2908 + C49300 * C2914) *
               C49229 +
           (C20222 + C20223 + C20224 + C20225) * C47890 +
           (C20226 + C20227 + C20228 + C20229) * C48902) *
              C48996 * C945 -
          ((C20538 + C20539 + C20540 + C20541) * C48902 +
           (C20542 + C20543 + C20544 + C20545) * C47890 +
           (C20188 * C3772 + C49300 * C3777 + C20187 * C2908 + C20183 * C2914 +
            C20186 * C954 + C20182 * C963 + C20185 * C409 + C20181 * C417) *
               C49229 +
           (C20188 * C3768 + C49300 * C3771 + C20187 * C2902 + C20183 * C2909 +
            C20186 * C948 + C20182 * C953 + C20185 * C399 + C20181 * C410) *
               C47909) *
              C48996 * C946 +
          ((C20185 * C948 + C20181 * C953 + C20186 * C2902 + C20182 * C2909 +
            C20187 * C3768 + C20183 * C3771 + C20188 * C17987 +
            C49300 * C17990) *
               C47909 +
           (C20185 * C954 + C20181 * C963 + C20186 * C2908 + C20182 * C2914 +
            C20187 * C3772 + C20183 * C3777 + C20188 * C17989 +
            C49300 * C17993) *
               C49229 +
           (C20185 * C949 + C20181 * C955 + C20186 * C2901 + C20182 * C2907 +
            C20187 * C3769 + C20183 * C3773 + C20188 * C17988 +
            C49300 * C17991) *
               C47890 +
           (C20185 * C956 + C20181 * C964 + C20186 * C2906 + C20182 * C2913 +
            C20187 * C3774 + C20183 * C3778 + C20188 * C17992 +
            C49300 * C17994) *
               C48902) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    ((C113 * C267 + C49007 * C278) * C1084 +
                     (C113 * C277 + C49007 * C285) * C1078 + C311 * C1085 +
                     C310 * C1079 + C309 * C1086 + C308 * C49271) *
                        C49307 +
                    ((C113 * C595 + C49007 * C600) * C1084 +
                     (C113 * C601 + C49007 * C610) * C1078 + C1100 * C1085 +
                     C1101 * C1079 + C1102 * C1086 + C1103 * C49271) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   ((C1104 * C49271 + C1105 * C1086 + C1103 * C1079 +
                     C1102 * C1085 + C1101 * C1078 + C1100 * C1084) *
                        C49284 +
                    (C306 * C49271 + C307 * C1086 + C308 * C1079 +
                     C309 * C1085 + C310 * C1078 + C311 * C1084) *
                        C49307 +
                    (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                     C170 * C1085 + C169 * C1078 + C168 * C1084) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   ((C170 * C1084 + C171 * C1078 + C172 * C1085 + C173 * C1079 +
                     C174 * C1086 + C175 * C49271) *
                        C49319 +
                    (C309 * C1084 + C308 * C1078 + C307 * C1085 + C306 * C1079 +
                     C305 * C1086 + C304 * C49271) *
                        C49307 +
                    (C1102 * C1084 + C1103 * C1078 + C1105 * C1085 +
                     C1104 * C1079 + (C113 * C599 + C49007 * C608) * C1086 +
                     (C113 * C609 + C49007 * C614) * C49271) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C48978 * C48961 * C110 -
                   (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                    C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                    C169 * C102 + C168 * C114) *
                       C48996 * C48978 * C48961 * C111 +
                   (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
                    C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
                    (C113 * C125 + C49007 * C138) * C118 +
                    (C113 * C139 + C49007 * C146) * C106) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C1304 * C7914 + C1305 * C49316 + C311 * C7915 +
                     C310 * C49303 + C309 * C7916 + C308 * C49271) *
                        C7912 +
                    (C1306 * C7914 + C1307 * C49316 + C1100 * C7915 +
                     C1101 * C49303 + C1102 * C7916 + C1103 * C49271) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   ((C1104 * C49271 + C1105 * C7916 + C1103 * C49303 +
                     C1102 * C7915 + C1101 * C49316 + C1100 * C7914) *
                        C49284 +
                    (C306 * C49271 + C307 * C7916 + C308 * C49303 +
                     C309 * C7915 + C310 * C49316 + C311 * C7914) *
                        C7912 +
                    (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                     C170 * C7915 + C169 * C49316 + C168 * C7914) *
                        C7911) *
                       C48978 * C48961 * C111 +
                   ((C170 * C7914 + C171 * C49316 + C172 * C7915 +
                     C173 * C49303 + C174 * C7916 + C175 * C49271) *
                        C7911 +
                    (C309 * C7914 + C308 * C49316 + C307 * C7915 +
                     C306 * C49303 + C305 * C7916 + C304 * C49271) *
                        C7912 +
                    (C1102 * C7914 + C1103 * C49316 + C1105 * C7915 +
                     C1104 * C49303 + (C113 * C599 + C49007 * C608) * C7916 +
                     (C113 * C609 + C49007 * C614) * C49271) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C1304 * C9128 + C1305 * C48892) * C9124 +
                    (C1306 * C9128 + C1307 * C48892) * C9125 +
                    (C1781 * C9128 + C1780 * C48892) * C9126 +
                    ((C113 * C1757 + C49007 * C1760) * C9128 +
                     (C113 * C1761 + C49007 * C1766) * C48892) *
                        C9127) *
                       C48978 * C48961 * C110 -
                   (((C113 * C1763 + C49007 * C1767) * C48892 +
                     (C113 * C1758 + C49007 * C1762) * C9128) *
                        C9127 +
                    (C1310 * C48892 + C1311 * C9128) * C9126 +
                    (C1101 * C48892 + C1100 * C9128) * C9125 +
                    (C310 * C48892 + C311 * C9128) * C9124 +
                    (C169 * C48892 + C168 * C9128) * C9123) *
                       C48978 * C48961 * C111 +
                   ((C170 * C9128 + C171 * C48892) * C9123 +
                    (C309 * C9128 + C308 * C48892) * C9124 +
                    (C1102 * C9128 + C1103 * C48892) * C9125 +
                    (C1309 * C9128 + C1308 * C48892) * C9126 +
                    ((C113 * C1759 + C49007 * C1764) * C9128 +
                     (C113 * C1765 + C49007 * C1768) * C48892) *
                        C9127) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                     C15195 * C410 + C15199 * C948 + C49287 * C953) *
                        C7914 +
                    (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                     C15195 * C417 + C15199 * C954 + C49287 * C963) *
                        C49316 +
                    (C15237 + C15238 + C15239) * C7915 +
                    (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                    C15258 * C49271) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C15249 + C15250 + C15251) * C49271 +
                    (C15252 + C15253 + C15254) * C7916 +
                    (C15248 + C15247 + C15246) * C49303 +
                    (C15245 + C15244 + C15243) * C7915 +
                    (C15242 + C15241 + C15240) * C49316 +
                    (C15239 + C15238 + C15237) * C7914) *
                       C48996 * C48978 * C48961 * C111 +
                   (C15257 * C7914 + C15258 * C49316 +
                    (C15254 + C15253 + C15252) * C7915 +
                    (C15251 + C15250 + C15249) * C49303 +
                    (C15197 * C123 + C15194 * C134 + C15198 * C395 +
                     C15195 * C402 + C15199 * C952 + C49287 * C961) *
                        C7916 +
                    (C15197 * C135 + C15194 * C144 + C15198 * C401 +
                     C15195 * C413 + C15199 * C962 + C49287 * C967) *
                        C49271) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C9128 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C48892) *
                        C49319 +
                    ((C15197 * C267 + C15194 * C278 + C15198 * C697 +
                      C15195 * C702 + C15199 * C2370 + C49287 * C2376) *
                         C9128 +
                     (C15197 * C277 + C15194 * C285 + C15198 * C703 +
                      C15195 * C712 + C15199 * C2377 + C49287 * C2388) *
                         C48892) *
                        C49307 +
                    ((C15197 * C595 + C15194 * C600 + C15198 * C1463 +
                      C15195 * C1470 + C15199 * C2373 + C49287 * C2382) *
                         C9128 +
                     (C15197 * C601 + C15194 * C610 + C15198 * C1469 +
                      C15195 * C1475 + C15199 * C2383 + C49287 * C2391) *
                         C48892) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C15199 * C2385 + C49287 * C2392 + C15198 * C1467 +
                      C15195 * C1474 + C15197 * C603 + C15194 * C611) *
                         C48892 +
                     (C15199 * C2374 + C49287 * C2384 + C15198 * C1462 +
                      C15195 * C1468 + C15197 * C596 + C15194 * C602) *
                         C9128) *
                        C49284 +
                    ((C15435 + C15436 + C15437) * C48892 +
                     (C15438 + C15439 + C15440) * C9128) *
                        C49307 +
                    ((C15242 + C15241 + C15240) * C48892 +
                     (C15239 + C15238 + C15237) * C9128) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   ((C15257 * C9128 + C15258 * C48892) * C49319 +
                    ((C15434 + C15433 + C15432) * C9128 +
                     (C15431 + C15430 + C15429) * C48892) *
                        C49307 +
                    ((C15197 * C597 + C15194 * C604 + C15198 * C1461 +
                      C15195 * C1466 + C15199 * C2375 + C49287 * C2386) *
                         C9128 +
                     (C15197 * C605 + C15194 * C612 + C15198 * C1465 +
                      C15195 * C1473 + C15199 * C2387 + C49287 * C2393) *
                         C48892) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[127] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C48978 * C259 -
                    ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                      C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                      (C113 * C1253 + C49007 * C1260) * C1084) *
                         C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C48978 * C49279) *
                       C261 +
                   (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                     (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                     (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 +
                      C1308 * C1079 + (C113 * C1254 + C49007 * C1261) * C1086 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C48978 * C259 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C48978 * C49279) *
                       C261 +
                   ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                     C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                     (C113 * C268 + C49007 * C279) * C118 +
                     (C113 * C280 + C49007 * C286) * C106) *
                        C48996 * C48978 * C49279 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C48978 * C259 -
                    ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 +
                      C1311 * C7915 + C1780 * C49316 + C1781 * C7914) *
                         C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C48978 * C49279) *
                       C261 +
                   (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
                     (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
                     (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 +
                      C1308 * C49303 + (C113 * C1254 + C49007 * C1261) * C7916 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C48978 * C259 -
                    (((C113 * C9213 + C49007 * C9217) * C48892 +
                      (C113 * C9211 + C49007 * C9214) * C9128) *
                         C9127 +
                     (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
                     (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
                        C48978 * C49279) *
                       C261 +
                   (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
                     (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
                     ((C113 * C9212 + C49007 * C9215) * C9128 +
                      (C113 * C9216 + C49007 * C9218) * C48892) *
                         C9127) *
                        C48978 * C49279 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C48978 * C259 -
                    ((C15429 + C15430 + C15431) * C49271 +
                     (C15432 + C15433 + C15434) * C7916 +
                     (C15435 + C15436 + C15437) * C49303 +
                     (C15438 + C15439 + C15440) * C7915 +
                     (C15199 * C2377 + C49287 * C2388 + C15198 * C703 +
                      C15195 * C712 + C15197 * C277 + C15194 * C285) *
                         C49316 +
                     (C15199 * C2370 + C49287 * C2376 + C15198 * C697 +
                      C15195 * C702 + C15197 * C267 + C15194 * C278) *
                         C7914) *
                        C48996 * C48978 * C49279) *
                       C261 +
                   (((C15440 + C15439 + C15438) * C7914 +
                     (C15437 + C15436 + C15435) * C49316 +
                     (C15434 + C15433 + C15432) * C7915 +
                     (C15431 + C15430 + C15429) * C49303 +
                     (C15197 * C264 + C15194 * C272 + C15198 * C700 +
                      C15195 * C708 + C15199 * C2714 + C49287 * C2715) *
                         C7916 +
                     (C15197 * C271 + C15194 * C282 + C15198 * C709 +
                      C15195 * C715 + C15199 * C2716 + C49287 * C2717) *
                         C49271) *
                        C48996 * C48978 * C49279 -
                    ((C15249 + C15250 + C15251) * C49271 +
                     (C15252 + C15253 + C15254) * C7916 +
                     (C15248 + C15247 + C15246) * C49303 +
                     (C15245 + C15244 + C15243) * C7915 +
                     (C15242 + C15241 + C15240) * C49316 +
                     (C15239 + C15238 + C15237) * C7914) *
                        C48996 * C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     ((C16725 + C16726 + C16727) * C9128 +
                      (C16728 + C16729 + C16730) * C48892) *
                         C49284) *
                        C48978 * C259 -
                    (((C15199 * C9831 + C49287 * C9834 + C15198 * C1936 +
                       C15195 * C1941 + C15197 * C1259 + C15194 * C1265) *
                          C48892 +
                      (C15199 * C9828 + C49287 * C9830 + C15198 * C1932 +
                       C15195 * C1935 + C15197 * C1253 + C15194 * C1260) *
                          C9128) *
                         C49284 +
                     ((C16730 + C16729 + C16728) * C48892 +
                      (C16727 + C16726 + C16725) * C9128) *
                         C49307 +
                     ((C16724 + C16723 + C16722) * C48892 +
                      (C16721 + C16720 + C16719) * C9128) *
                         C49319) *
                        C48978 * C49279) *
                       C261 +
                   ((((C15440 + C15439 + C15438) * C9128 +
                      (C15437 + C15436 + C15435) * C48892) *
                         C49319 +
                     ((C16731 + C16732 + C16733) * C9128 +
                      (C16734 + C16735 + C16736) * C48892) *
                         C49307 +
                     ((C15197 * C1252 + C15194 * C1258 + C15198 * C1933 +
                       C15195 * C1937 + C15199 * C10092 + C49287 * C10093) *
                          C9128 +
                      (C15197 * C1257 + C15194 * C1264 + C15198 * C1938 +
                       C15195 * C1942 + C15199 * C10094 + C49287 * C10095) *
                          C48892) *
                         C49284) *
                        C48978 * C49279 -
                    (((C16736 + C16735 + C16734) * C48892 +
                      (C16733 + C16732 + C16731) * C9128) *
                         C49284 +
                     ((C15435 + C15436 + C15437) * C48892 +
                      (C15438 + C15439 + C15440) * C9128) *
                         C49307 +
                     ((C15242 + C15241 + C15240) * C48892 +
                      (C15239 + C15238 + C15237) * C9128) *
                         C49319) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C393 -
                    ((C1494 * C49271 + C1495 * C1086 + C1496 * C1079 +
                      C1497 * C1085 + (C113 * C1469 + C49007 * C1475) * C1078 +
                      (C113 * C1463 + C49007 * C1470) * C1084) *
                         C49284 +
                     (C1498 * C49271 + C1499 * C1086 + C1500 * C1079 +
                      C1501 * C1085 + (C113 * C703 + C49007 * C712) * C1078 +
                      (C113 * C697 + C49007 * C702) * C1084) *
                         C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C1084 + C442 * C1078 + C441 * C1085 +
                      C440 * C1079 + C439 * C1086 + C438 * C49271) *
                         C49319 +
                     (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 +
                      C1498 * C1079 + (C113 * C700 + C49007 * C708) * C1086 +
                      (C113 * C709 + C49007 * C715) * C49271) *
                         C49307 +
                     (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 +
                      C1494 * C1079 + (C113 * C1464 + C49007 * C1471) * C1086 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C393 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C48961 * C261 +
                   ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                     C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                     (C113 * C400 + C49007 * C411) * C118 +
                     (C113 * C412 + C49007 * C418) * C106) *
                        C48996 * C49281 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C393 -
                    ((C1494 * C49271 + C1495 * C7916 + C1496 * C49303 +
                      C1497 * C7915 + C1961 * C49316 + C1962 * C7914) *
                         C49284 +
                     (C1498 * C49271 + C1499 * C7916 + C1500 * C49303 +
                      C1501 * C7915 + C1963 * C49316 + C1964 * C7914) *
                         C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C7914 + C442 * C49316 + C441 * C7915 +
                      C440 * C49303 + C439 * C7916 + C438 * C49271) *
                         C7911 +
                     (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 +
                      C1498 * C49303 + C4170 * C7916 + C4169 * C49271) *
                         C7912 +
                     (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 +
                      C1494 * C49303 + (C113 * C1464 + C49007 * C1471) * C7916 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C393 -
                    (((C113 * C9331 + C49007 * C9335) * C48892 +
                      (C113 * C9329 + C49007 * C9332) * C9128) *
                         C9127 +
                     ((C113 * C1936 + C49007 * C1941) * C48892 +
                      (C113 * C1932 + C49007 * C1935) * C9128) *
                         C9126 +
                     (C1961 * C48892 + C1962 * C9128) * C9125 +
                     (C1963 * C48892 + C1964 * C9128) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C9128 + C442 * C48892) * C9123 +
                     (C1501 * C9128 + C1500 * C48892) * C9124 +
                     (C1497 * C9128 + C1496 * C48892) * C9125 +
                     ((C113 * C1933 + C49007 * C1937) * C9128 +
                      (C113 * C1938 + C49007 * C1942) * C48892) *
                         C9126 +
                     ((C113 * C9330 + C49007 * C9333) * C9128 +
                      (C113 * C9334 + C49007 * C9336) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C393 -
                    ((C15611 + C15612 + C15613) * C49271 +
                     (C15614 + C15615 + C15616) * C7916 +
                     (C15617 + C15618 + C15619) * C49303 +
                     (C15620 + C15621 + C15622) * C7915 +
                     (C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                      C15195 * C963 + C15197 * C409 + C15194 * C417) *
                         C49316 +
                     (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                      C15195 * C953 + C15197 * C399 + C15194 * C410) *
                         C7914) *
                        C48996 * C49281) *
                       C48961 * C261 +
                   (((C15622 + C15621 + C15620) * C7914 +
                     (C15619 + C15618 + C15617) * C49316 +
                     (C15616 + C15615 + C15614) * C7915 +
                     (C15613 + C15612 + C15611) * C49303 +
                     (C15197 * C396 + C15194 * C404 + C15198 * C951 +
                      C15195 * C959 + C15199 * C2903 + C49287 * C2910) *
                         C7916 +
                     (C15197 * C403 + C15194 * C414 + C15198 * C960 +
                      C15195 * C966 + C15199 * C2911 + C49287 * C2915) *
                         C49271) *
                        C48996 * C49281 -
                    ((C15249 + C15250 + C15251) * C49271 +
                     (C15252 + C15253 + C15254) * C7916 +
                     (C15248 + C15247 + C15246) * C49303 +
                     (C15245 + C15244 + C15243) * C7915 +
                     (C15242 + C15241 + C15240) * C49316 +
                     (C15239 + C15238 + C15237) * C7914) *
                        C48996 * C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     ((C16725 + C16726 + C16727) * C9128 +
                      (C16728 + C16729 + C16730) * C48892) *
                         C49284) *
                        C393 -
                    (((C15199 * C10298 + C49287 * C10302 + C15198 * C2383 +
                       C15195 * C2391 + C15197 * C1469 + C15194 * C1475) *
                          C48892 +
                      (C15199 * C10296 + C49287 * C10299 + C15198 * C2373 +
                       C15195 * C2382 + C15197 * C1463 + C15194 * C1470) *
                          C9128) *
                         C49284 +
                     ((C15199 * C3358 + C49287 * C3363 + C15198 * C2377 +
                       C15195 * C2388 + C15197 * C703 + C15194 * C712) *
                          C48892 +
                      (C15199 * C3354 + C49287 * C3357 + C15198 * C2370 +
                       C15195 * C2376 + C15197 * C697 + C15194 * C702) *
                          C9128) *
                         C49307 +
                     ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                       C15195 * C963 + C15197 * C409 + C15194 * C417) *
                          C48892 +
                      (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                       C15195 * C953 + C15197 * C399 + C15194 * C410) *
                          C9128) *
                         C49319) *
                        C49281) *
                       C48961 * C261 +
                   ((((C15622 + C15621 + C15620) * C9128 +
                      (C15619 + C15618 + C15617) * C48892) *
                         C49319 +
                     ((C15197 * C698 + C15194 * C704 + C15198 * C2371 +
                       C15195 * C2378 + C15199 * C3355 + C49287 * C3359) *
                          C9128 +
                      (C15197 * C705 + C15194 * C713 + C15198 * C2379 +
                       C15195 * C2389 + C15199 * C3360 + C49287 * C3364) *
                          C48892) *
                         C49307 +
                     ((C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
                       C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                          C9128 +
                      (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
                       C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                          C48892) *
                         C49284) *
                        C49281 -
                    (((C16736 + C16735 + C16734) * C48892 +
                      (C16733 + C16732 + C16731) * C9128) *
                         C49284 +
                     ((C15435 + C15436 + C15437) * C48892 +
                      (C15438 + C15439 + C15440) * C9128) *
                         C49307 +
                     ((C15242 + C15241 + C15240) * C48892 +
                      (C15239 + C15238 + C15237) * C9128) *
                         C49319) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C48978 * C525 -
                    ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                      C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                      (C113 * C1253 + C49007 * C1260) * C1084) *
                         C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C48978 * C49279) *
                       C527 +
                   (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                     (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                     (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 +
                      C1308 * C1079 + (C113 * C1254 + C49007 * C1261) * C1086 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C48978 * C525 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C48978 * C49279) *
                       C527 +
                   ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                     C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                     (C113 * C268 + C49007 * C279) * C118 +
                     (C113 * C280 + C49007 * C286) * C106) *
                        C48996 * C48978 * C49279 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C48978 * C525 -
                    ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 +
                      C1311 * C7915 + C1780 * C49316 + C1781 * C7914) *
                         C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C48978 * C49279) *
                       C527 +
                   (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
                     (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
                     (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 +
                      C1308 * C49303 + (C113 * C1254 + C49007 * C1261) * C7916 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C48978 * C525 -
                    (((C113 * C9213 + C49007 * C9217) * C48892 +
                      (C113 * C9211 + C49007 * C9214) * C9128) *
                         C9127 +
                     (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
                     (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
                        C48978 * C49279) *
                       C527 +
                   (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
                     (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
                     ((C113 * C9212 + C49007 * C9215) * C9128 +
                      (C113 * C9216 + C49007 * C9218) * C48892) *
                         C9127) *
                        C48978 * C49279 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C48978 * C525 -
                    ((C15429 + C15430 + C15431) * C49271 +
                     (C15432 + C15433 + C15434) * C7916 +
                     (C15435 + C15436 + C15437) * C49303 +
                     (C15438 + C15439 + C15440) * C7915 +
                     (C15199 * C2377 + C49287 * C2388 + C15198 * C703 +
                      C15195 * C712 + C15197 * C277 + C15194 * C285) *
                         C49316 +
                     (C15199 * C2370 + C49287 * C2376 + C15198 * C697 +
                      C15195 * C702 + C15197 * C267 + C15194 * C278) *
                         C7914) *
                        C48996 * C48978 * C49279) *
                       C527 +
                   (((C15440 + C15439 + C15438) * C7914 +
                     (C15437 + C15436 + C15435) * C49316 +
                     (C15434 + C15433 + C15432) * C7915 +
                     (C15431 + C15430 + C15429) * C49303 +
                     (C15197 * C264 + C15194 * C272 + C15198 * C700 +
                      C15195 * C708 + C15199 * C2714 + C49287 * C2715) *
                         C7916 +
                     (C15197 * C271 + C15194 * C282 + C15198 * C709 +
                      C15195 * C715 + C15199 * C2716 + C49287 * C2717) *
                         C49271) *
                        C48996 * C48978 * C49279 -
                    ((C15249 + C15250 + C15251) * C49271 +
                     (C15252 + C15253 + C15254) * C7916 +
                     (C15248 + C15247 + C15246) * C49303 +
                     (C15245 + C15244 + C15243) * C7915 +
                     (C15242 + C15241 + C15240) * C49316 +
                     (C15239 + C15238 + C15237) * C7914) *
                        C48996 * C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     ((C16725 + C16726 + C16727) * C9128 +
                      (C16728 + C16729 + C16730) * C48892) *
                         C49284) *
                        C48978 * C525 -
                    (((C15199 * C9831 + C49287 * C9834 + C15198 * C1936 +
                       C15195 * C1941 + C15197 * C1259 + C15194 * C1265) *
                          C48892 +
                      (C15199 * C9828 + C49287 * C9830 + C15198 * C1932 +
                       C15195 * C1935 + C15197 * C1253 + C15194 * C1260) *
                          C9128) *
                         C49284 +
                     ((C16730 + C16729 + C16728) * C48892 +
                      (C16727 + C16726 + C16725) * C9128) *
                         C49307 +
                     ((C16724 + C16723 + C16722) * C48892 +
                      (C16721 + C16720 + C16719) * C9128) *
                         C49319) *
                        C48978 * C49279) *
                       C527 +
                   ((((C15440 + C15439 + C15438) * C9128 +
                      (C15437 + C15436 + C15435) * C48892) *
                         C49319 +
                     ((C16731 + C16732 + C16733) * C9128 +
                      (C16734 + C16735 + C16736) * C48892) *
                         C49307 +
                     ((C15197 * C1252 + C15194 * C1258 + C15198 * C1933 +
                       C15195 * C1937 + C15199 * C10092 + C49287 * C10093) *
                          C9128 +
                      (C15197 * C1257 + C15194 * C1264 + C15198 * C1938 +
                       C15195 * C1942 + C15199 * C10094 + C49287 * C10095) *
                          C48892) *
                         C49284) *
                        C48978 * C49279 -
                    (((C16736 + C16735 + C16734) * C48892 +
                      (C16733 + C16732 + C16731) * C9128) *
                         C49284 +
                     ((C15435 + C15436 + C15437) * C48892 +
                      (C15438 + C15439 + C15440) * C9128) *
                         C49307 +
                     ((C15242 + C15241 + C15240) * C48892 +
                      (C15239 + C15238 + C15237) * C9128) *
                         C49319) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                    C1786 * C49284) *
                       C48978 * C591 -
                   ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                    (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                    (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                       C48978 * C592 +
                   (C1786 * C49319 +
                    (C1784 + C1783 + C1774 + C1773 + C1772 + C1771) * C49307 +
                    ((C113 * C1757 + C49007 * C1760) * C1084 +
                     (C113 * C1761 + C49007 * C1766) * C1078 +
                     (C113 * C1758 + C49007 * C1762) * C1085 +
                     (C113 * C1763 + C49007 * C1767) * C1079 +
                     (C113 * C1759 + C49007 * C1764) * C1086 +
                     (C113 * C1765 + C49007 * C1768) * C49271) *
                        C49284) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C48978 * C591 -
                   (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                    C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                    (C113 * C277 + C49007 * C285) * C102 +
                    (C113 * C267 + C49007 * C278) * C114) *
                       C48996 * C48978 * C592 +
                   ((C113 * C595 + C49007 * C600) * C114 +
                    (C113 * C601 + C49007 * C610) * C102 +
                    (C113 * C596 + C49007 * C602) * C115 +
                    (C113 * C603 + C49007 * C611) * C103 +
                    (C113 * C597 + C49007 * C604) * C116 +
                    (C113 * C605 + C49007 * C612) * C104 +
                    (C113 * C598 + C49007 * C606) * C117 +
                    (C113 * C607 + C49007 * C613) * C105 +
                    (C113 * C599 + C49007 * C608) * C118 +
                    (C113 * C609 + C49007 * C614) * C106) *
                       C48996 * C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                    C8500 * C49284) *
                       C48978 * C591 -
                   ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                    (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                    (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                       C48978 * C592 +
                   (C8500 * C7911 +
                    (C8496 + C8495 + C8494 + C8493 + C8492 + C8491) * C7912 +
                    ((C113 * C1757 + C49007 * C1760) * C7914 +
                     (C113 * C1761 + C49007 * C1766) * C49316 +
                     (C113 * C1758 + C49007 * C1762) * C7915 +
                     (C113 * C1763 + C49007 * C1767) * C49303 +
                     (C113 * C1759 + C49007 * C1764) * C7916 +
                     (C113 * C1765 + C49007 * C1768) * C49271) *
                        C49284) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                    C9488 * C9127) *
                       C48978 * C591 -
                   ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                    (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                    (C9221 + C9220) * C9123) *
                       C48978 * C592 +
                   (C9486 * C9123 + C9487 * C9124 + C9488 * C9125 +
                    (C9496 + C9495) * C9126 +
                    ((C113 * C9481 + C49007 * C9482) * C9128 +
                     (C113 * C9483 + C49007 * C9484) * C48892) *
                        C9127) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                     C15195 * C410 + C15199 * C948 + C49287 * C953) *
                        C7914 +
                    (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                     C15195 * C417 + C15199 * C954 + C49287 * C963) *
                        C49316 +
                    (C15237 + C15238 + C15239) * C7915 +
                    (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                    C15258 * C49271) *
                       C48996 * C48978 * C591 -
                   ((C15429 + C15430 + C15431) * C49271 +
                    (C15432 + C15433 + C15434) * C7916 +
                    (C15435 + C15436 + C15437) * C49303 +
                    (C15438 + C15439 + C15440) * C7915 +
                    (C15199 * C2377 + C49287 * C2388 + C15198 * C703 +
                     C15195 * C712 + C15197 * C277 + C15194 * C285) *
                        C49316 +
                    (C15199 * C2370 + C49287 * C2376 + C15198 * C697 +
                     C15195 * C702 + C15197 * C267 + C15194 * C278) *
                        C7914) *
                       C48996 * C48978 * C592 +
                   ((C15197 * C595 + C15194 * C600 + C15198 * C1463 +
                     C15195 * C1470 + C15199 * C2373 + C49287 * C2382) *
                        C7914 +
                    (C15197 * C601 + C15194 * C610 + C15198 * C1469 +
                     C15195 * C1475 + C15199 * C2383 + C49287 * C2391) *
                        C49316 +
                    (C15197 * C596 + C15194 * C602 + C15198 * C1462 +
                     C15195 * C1468 + C15199 * C2374 + C49287 * C2384) *
                        C7915 +
                    (C15197 * C603 + C15194 * C611 + C15198 * C1467 +
                     C15195 * C1474 + C15199 * C2385 + C49287 * C2392) *
                        C49303 +
                    (C15197 * C597 + C15194 * C604 + C15198 * C1461 +
                     C15195 * C1466 + C15199 * C2375 + C49287 * C2386) *
                        C7916 +
                    (C15197 * C605 + C15194 * C612 + C15198 * C1465 +
                     C15195 * C1473 + C15199 * C2387 + C49287 * C2393) *
                        C49271) *
                       C48996 * C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C9128 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C48892) *
                        C49319 +
                    ((C16719 + C16720 + C16721) * C9128 +
                     (C16722 + C16723 + C16724) * C48892) *
                        C49307 +
                    C17163 * C49284) *
                       C48978 * C591 -
                   (((C17155 + C17156 + C17157) * C48892 +
                     (C17158 + C17159 + C17160) * C9128) *
                        C49284 +
                    ((C16730 + C16729 + C16728) * C48892 +
                     (C16727 + C16726 + C16725) * C9128) *
                        C49307 +
                    ((C16724 + C16723 + C16722) * C48892 +
                     (C16721 + C16720 + C16719) * C9128) *
                        C49319) *
                       C48978 * C592 +
                   (C17163 * C49319 +
                    ((C17160 + C17159 + C17158) * C9128 +
                     (C17157 + C17156 + C17155) * C48892) *
                        C49307 +
                    ((C15197 * C1757 + C15194 * C1760 + C15198 * C9329 +
                      C15195 * C9332 + C15199 * C9829 + C49287 * C9832) *
                         C9128 +
                     (C15197 * C1761 + C15194 * C1766 + C15198 * C9331 +
                      C15195 * C9335 + C15199 * C9833 + C49287 * C9835) *
                         C48892) *
                        C49284) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C393 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C525 +
                   (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                     (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                     ((C113 * C1932 + C49007 * C1935) * C1084 +
                      (C113 * C1936 + C49007 * C1941) * C1078 +
                      (C113 * C1933 + C49007 * C1937) * C1085 +
                      (C113 * C1938 + C49007 * C1942) * C1079 +
                      (C113 * C1934 + C49007 * C1939) * C1086 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C393 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C525 +
                   (((C113 * C697 + C49007 * C702) * C114 +
                     (C113 * C703 + C49007 * C712) * C102 +
                     (C113 * C698 + C49007 * C704) * C115 +
                     (C113 * C705 + C49007 * C713) * C103 +
                     (C113 * C699 + C49007 * C706) * C116 +
                     (C113 * C707 + C49007 * C714) * C104 +
                     (C113 * C700 + C49007 * C708) * C117 +
                     (C113 * C709 + C49007 * C715) * C105 +
                     (C113 * C701 + C49007 * C710) * C118 +
                     (C113 * C711 + C49007 * C716) * C106) *
                        C48996 * C49281 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C393 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C525 +
                   (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
                     (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
                     ((C113 * C1932 + C49007 * C1935) * C7914 +
                      (C113 * C1936 + C49007 * C1941) * C49316 +
                      (C113 * C1933 + C49007 * C1937) * C7915 +
                      (C113 * C1938 + C49007 * C1942) * C49303 +
                      (C113 * C1934 + C49007 * C1939) * C7916 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C393 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C525 +
                   (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
                     (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
                     ((C113 * C9578 + C49007 * C9579) * C9128 +
                      (C113 * C9580 + C49007 * C9581) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                     (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                     (C9221 + C9220) * C9123) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C393 -
                    ((C15611 + C15612 + C15613) * C49271 +
                     (C15614 + C15615 + C15616) * C7916 +
                     (C15617 + C15618 + C15619) * C49303 +
                     (C15620 + C15621 + C15622) * C7915 +
                     (C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                      C15195 * C963 + C15197 * C409 + C15194 * C417) *
                         C49316 +
                     (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                      C15195 * C953 + C15197 * C399 + C15194 * C410) *
                         C7914) *
                        C48996 * C49281) *
                       C525 +
                   (((C15197 * C697 + C15194 * C702 + C15198 * C2370 +
                      C15195 * C2376 + C15199 * C3354 + C49287 * C3357) *
                         C7914 +
                     (C15197 * C703 + C15194 * C712 + C15198 * C2377 +
                      C15195 * C2388 + C15199 * C3358 + C49287 * C3363) *
                         C49316 +
                     (C15197 * C698 + C15194 * C704 + C15198 * C2371 +
                      C15195 * C2378 + C15199 * C3355 + C49287 * C3359) *
                         C7915 +
                     (C15197 * C705 + C15194 * C713 + C15198 * C2379 +
                      C15195 * C2389 + C15199 * C3360 + C49287 * C3364) *
                         C49303 +
                     (C15197 * C699 + C15194 * C706 + C15198 * C2372 +
                      C15195 * C2380 + C15199 * C3356 + C49287 * C3361) *
                         C7916 +
                     (C15197 * C707 + C15194 * C714 + C15198 * C2381 +
                      C15195 * C2390 + C15199 * C3362 + C49287 * C3365) *
                         C49271) *
                        C48996 * C49281 -
                    ((C15429 + C15430 + C15431) * C49271 +
                     (C15432 + C15433 + C15434) * C7916 +
                     (C15435 + C15436 + C15437) * C49303 +
                     (C15438 + C15439 + C15440) * C7915 +
                     (C15199 * C2377 + C49287 * C2388 + C15198 * C703 +
                      C15195 * C712 + C15197 * C277 + C15194 * C285) *
                         C49316 +
                     (C15199 * C2370 + C49287 * C2376 + C15198 * C697 +
                      C15195 * C702 + C15197 * C267 + C15194 * C278) *
                         C7914) *
                        C48996 * C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     C17163 * C49284) *
                        C393 -
                    (((C17334 + C17335 + C17336) * C48892 +
                      (C17337 + C17338 + C17339) * C9128) *
                         C49284 +
                     ((C17340 + C17341 + C17342) * C48892 +
                      (C17343 + C17344 + C17345) * C9128) *
                         C49307 +
                     ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                       C15195 * C963 + C15197 * C409 + C15194 * C417) *
                          C48892 +
                      (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                       C15195 * C953 + C15197 * C399 + C15194 * C410) *
                          C9128) *
                         C49319) *
                        C49281) *
                       C525 +
                   ((((C17345 + C17344 + C17343) * C9128 +
                      (C17342 + C17341 + C17340) * C48892) *
                         C49319 +
                     ((C17339 + C17338 + C17337) * C9128 +
                      (C17336 + C17335 + C17334) * C48892) *
                         C49307 +
                     ((C15197 * C1932 + C15194 * C1935 + C15198 * C9828 +
                       C15195 * C9830 + C15199 * C10731 + C49287 * C10732) *
                          C9128 +
                      (C15197 * C1936 + C15194 * C1941 + C15198 * C9831 +
                       C15195 * C9834 + C15199 * C10733 + C49287 * C10734) *
                          C48892) *
                         C49284) *
                        C49281 -
                    (((C17155 + C17156 + C17157) * C48892 +
                      (C17158 + C17159 + C17160) * C9128) *
                         C49284 +
                     ((C16730 + C16729 + C16728) * C48892 +
                      (C16727 + C16726 + C16725) * C9128) *
                         C49307 +
                     ((C16724 + C16723 + C16722) * C48892 +
                      (C16721 + C16720 + C16719) * C9128) *
                         C49319) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[132] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C799 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C1084 + C442 * C1078 + C441 * C1085 +
                      C440 * C1079 + C439 * C1086 + C438 * C49271) *
                         C49319 +
                     (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 +
                      C1498 * C1079 + (C113 * C700 + C49007 * C708) * C1086 +
                      (C113 * C709 + C49007 * C715) * C49271) *
                         C49307 +
                     (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 +
                      C1494 * C1079 + (C113 * C1464 + C49007 * C1471) * C1086 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C799 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C48961 * C527 +
                   ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                     C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                     (C113 * C400 + C49007 * C411) * C118 +
                     (C113 * C412 + C49007 * C418) * C106) *
                        C48996 * C49281 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C799 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C7914 + C442 * C49316 + C441 * C7915 +
                      C440 * C49303 + C439 * C7916 + C438 * C49271) *
                         C7911 +
                     (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 +
                      C1498 * C49303 + C4170 * C7916 + C4169 * C49271) *
                         C7912 +
                     (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 +
                      C1494 * C49303 + (C113 * C1464 + C49007 * C1471) * C7916 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C799 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C9128 + C442 * C48892) * C9123 +
                     (C1501 * C9128 + C1500 * C48892) * C9124 +
                     (C1497 * C9128 + C1496 * C48892) * C9125 +
                     ((C113 * C1933 + C49007 * C1937) * C9128 +
                      (C113 * C1938 + C49007 * C1942) * C48892) *
                         C9126 +
                     ((C113 * C9330 + C49007 * C9333) * C9128 +
                      (C113 * C9334 + C49007 * C9336) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C799 -
                    ((C15611 + C15612 + C15613) * C49271 +
                     (C15614 + C15615 + C15616) * C7916 +
                     (C15617 + C15618 + C15619) * C49303 +
                     (C15620 + C15621 + C15622) * C7915 +
                     (C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                      C15195 * C963 + C15197 * C409 + C15194 * C417) *
                         C49316 +
                     (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                      C15195 * C953 + C15197 * C399 + C15194 * C410) *
                         C7914) *
                        C48996 * C49281) *
                       C48961 * C527 +
                   (((C15622 + C15621 + C15620) * C7914 +
                     (C15619 + C15618 + C15617) * C49316 +
                     (C15616 + C15615 + C15614) * C7915 +
                     (C15613 + C15612 + C15611) * C49303 +
                     (C15197 * C396 + C15194 * C404 + C15198 * C951 +
                      C15195 * C959 + C15199 * C2903 + C49287 * C2910) *
                         C7916 +
                     (C15197 * C403 + C15194 * C414 + C15198 * C960 +
                      C15195 * C966 + C15199 * C2911 + C49287 * C2915) *
                         C49271) *
                        C48996 * C49281 -
                    ((C15249 + C15250 + C15251) * C49271 +
                     (C15252 + C15253 + C15254) * C7916 +
                     (C15248 + C15247 + C15246) * C49303 +
                     (C15245 + C15244 + C15243) * C7915 +
                     (C15242 + C15241 + C15240) * C49316 +
                     (C15239 + C15238 + C15237) * C7914) *
                        C48996 * C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     C17163 * C49284) *
                        C799 -
                    (((C17334 + C17335 + C17336) * C48892 +
                      (C17337 + C17338 + C17339) * C9128) *
                         C49284 +
                     ((C17340 + C17341 + C17342) * C48892 +
                      (C17343 + C17344 + C17345) * C9128) *
                         C49307 +
                     ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                       C15195 * C963 + C15197 * C409 + C15194 * C417) *
                          C48892 +
                      (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                       C15195 * C953 + C15197 * C399 + C15194 * C410) *
                          C9128) *
                         C49319) *
                        C49281) *
                       C48961 * C527 +
                   ((((C15622 + C15621 + C15620) * C9128 +
                      (C15619 + C15618 + C15617) * C48892) *
                         C49319 +
                     ((C15197 * C698 + C15194 * C704 + C15198 * C2371 +
                       C15195 * C2378 + C15199 * C3355 + C49287 * C3359) *
                          C9128 +
                      (C15197 * C705 + C15194 * C713 + C15198 * C2379 +
                       C15195 * C2389 + C15199 * C3360 + C49287 * C3364) *
                          C48892) *
                         C49307 +
                     ((C15197 * C1462 + C15194 * C1468 + C15198 * C2374 +
                       C15195 * C2384 + C15199 * C10297 + C49287 * C10300) *
                          C9128 +
                      (C15197 * C1467 + C15194 * C1474 + C15198 * C2385 +
                       C15195 * C2392 + C15199 * C10301 + C49287 * C10303) *
                          C48892) *
                         C49284) *
                        C49281 -
                    (((C16736 + C16735 + C16734) * C48892 +
                      (C16733 + C16732 + C16731) * C9128) *
                         C49284 +
                     ((C15435 + C15436 + C15437) * C48892 +
                      (C15438 + C15439 + C15440) * C9128) *
                         C49307 +
                     ((C15242 + C15241 + C15240) * C48892 +
                      (C15239 + C15238 + C15237) * C9128) *
                         C49319) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C799 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C259 +
                   (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                     (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                     ((C113 * C1932 + C49007 * C1935) * C1084 +
                      (C113 * C1936 + C49007 * C1941) * C1078 +
                      (C113 * C1933 + C49007 * C1937) * C1085 +
                      (C113 * C1938 + C49007 * C1942) * C1079 +
                      (C113 * C1934 + C49007 * C1939) * C1086 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C799 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C259 +
                   (((C113 * C697 + C49007 * C702) * C114 +
                     (C113 * C703 + C49007 * C712) * C102 +
                     (C113 * C698 + C49007 * C704) * C115 +
                     (C113 * C705 + C49007 * C713) * C103 +
                     (C113 * C699 + C49007 * C706) * C116 +
                     (C113 * C707 + C49007 * C714) * C104 +
                     (C113 * C700 + C49007 * C708) * C117 +
                     (C113 * C709 + C49007 * C715) * C105 +
                     (C113 * C701 + C49007 * C710) * C118 +
                     (C113 * C711 + C49007 * C716) * C106) *
                        C48996 * C49281 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C799 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C259 +
                   (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
                     (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
                     ((C113 * C1932 + C49007 * C1935) * C7914 +
                      (C113 * C1936 + C49007 * C1941) * C49316 +
                      (C113 * C1933 + C49007 * C1937) * C7915 +
                      (C113 * C1938 + C49007 * C1942) * C49303 +
                      (C113 * C1934 + C49007 * C1939) * C7916 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C799 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C259 +
                   (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
                     (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
                     ((C113 * C9578 + C49007 * C9579) * C9128 +
                      (C113 * C9580 + C49007 * C9581) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                     (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                     (C9221 + C9220) * C9123) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C7914 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C49316 +
                     (C15237 + C15238 + C15239) * C7915 +
                     (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                     C15258 * C49271) *
                        C48996 * C799 -
                    ((C15611 + C15612 + C15613) * C49271 +
                     (C15614 + C15615 + C15616) * C7916 +
                     (C15617 + C15618 + C15619) * C49303 +
                     (C15620 + C15621 + C15622) * C7915 +
                     (C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                      C15195 * C963 + C15197 * C409 + C15194 * C417) *
                         C49316 +
                     (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                      C15195 * C953 + C15197 * C399 + C15194 * C410) *
                         C7914) *
                        C48996 * C49281) *
                       C259 +
                   (((C15197 * C697 + C15194 * C702 + C15198 * C2370 +
                      C15195 * C2376 + C15199 * C3354 + C49287 * C3357) *
                         C7914 +
                     (C15197 * C703 + C15194 * C712 + C15198 * C2377 +
                      C15195 * C2388 + C15199 * C3358 + C49287 * C3363) *
                         C49316 +
                     (C15197 * C698 + C15194 * C704 + C15198 * C2371 +
                      C15195 * C2378 + C15199 * C3355 + C49287 * C3359) *
                         C7915 +
                     (C15197 * C705 + C15194 * C713 + C15198 * C2379 +
                      C15195 * C2389 + C15199 * C3360 + C49287 * C3364) *
                         C49303 +
                     (C15197 * C699 + C15194 * C706 + C15198 * C2372 +
                      C15195 * C2380 + C15199 * C3356 + C49287 * C3361) *
                         C7916 +
                     (C15197 * C707 + C15194 * C714 + C15198 * C2381 +
                      C15195 * C2390 + C15199 * C3362 + C49287 * C3365) *
                         C49271) *
                        C48996 * C49281 -
                    ((C15429 + C15430 + C15431) * C49271 +
                     (C15432 + C15433 + C15434) * C7916 +
                     (C15435 + C15436 + C15437) * C49303 +
                     (C15438 + C15439 + C15440) * C7915 +
                     (C15199 * C2377 + C49287 * C2388 + C15198 * C703 +
                      C15195 * C712 + C15197 * C277 + C15194 * C285) *
                         C49316 +
                     (C15199 * C2370 + C49287 * C2376 + C15198 * C697 +
                      C15195 * C702 + C15197 * C267 + C15194 * C278) *
                         C7914) *
                        C48996 * C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                       C15195 * C410 + C15199 * C948 + C49287 * C953) *
                          C9128 +
                      (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                       C15195 * C417 + C15199 * C954 + C49287 * C963) *
                          C48892) *
                         C49319 +
                     ((C16719 + C16720 + C16721) * C9128 +
                      (C16722 + C16723 + C16724) * C48892) *
                         C49307 +
                     C17163 * C49284) *
                        C799 -
                    (((C17334 + C17335 + C17336) * C48892 +
                      (C17337 + C17338 + C17339) * C9128) *
                         C49284 +
                     ((C17340 + C17341 + C17342) * C48892 +
                      (C17343 + C17344 + C17345) * C9128) *
                         C49307 +
                     ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                       C15195 * C963 + C15197 * C409 + C15194 * C417) *
                          C48892 +
                      (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                       C15195 * C953 + C15197 * C399 + C15194 * C410) *
                          C9128) *
                         C49319) *
                        C49281) *
                       C259 +
                   ((((C17345 + C17344 + C17343) * C9128 +
                      (C17342 + C17341 + C17340) * C48892) *
                         C49319 +
                     ((C17339 + C17338 + C17337) * C9128 +
                      (C17336 + C17335 + C17334) * C48892) *
                         C49307 +
                     ((C15197 * C1932 + C15194 * C1935 + C15198 * C9828 +
                       C15195 * C9830 + C15199 * C10731 + C49287 * C10732) *
                          C9128 +
                      (C15197 * C1936 + C15194 * C1941 + C15198 * C9831 +
                       C15195 * C9834 + C15199 * C10733 + C49287 * C10734) *
                          C48892) *
                         C49284) *
                        C49281 -
                    (((C17155 + C17156 + C17157) * C48892 +
                      (C17158 + C17159 + C17160) * C9128) *
                         C49284 +
                     ((C16730 + C16729 + C16728) * C48892 +
                      (C16727 + C16726 + C16725) * C9128) *
                         C49307 +
                     ((C16724 + C16723 + C16722) * C48892 +
                      (C16721 + C16720 + C16719) * C9128) *
                         C49319) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                    C1786 * C49284) *
                       C945 -
                   ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                    (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                    (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                     C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                     (C113 * C399 + C49007 * C410) * C1084) *
                        C49319) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C1084 +
                     (C113 * C954 + C49007 * C963) * C1078 +
                     (C113 * C949 + C49007 * C955) * C1085 +
                     (C113 * C956 + C49007 * C964) * C1079 +
                     (C113 * C950 + C49007 * C957) * C1086 +
                     (C113 * C958 + C49007 * C965) * C49271) *
                        C49319 +
                    ((C113 * C2370 + C49007 * C2376) * C1084 +
                     (C113 * C2377 + C49007 * C2388) * C1078 +
                     (C113 * C2371 + C49007 * C2378) * C1085 +
                     (C113 * C2379 + C49007 * C2389) * C1079 +
                     (C113 * C2372 + C49007 * C2380) * C1086 +
                     (C113 * C2381 + C49007 * C2390) * C49271) *
                        C49307 +
                    ((C113 * C2373 + C49007 * C2382) * C1084 +
                     (C113 * C2383 + C49007 * C2391) * C1078 +
                     (C113 * C2374 + C49007 * C2384) * C1085 +
                     (C113 * C2385 + C49007 * C2392) * C1079 +
                     (C113 * C2375 + C49007 * C2386) * C1086 +
                     (C113 * C2387 + C49007 * C2393) * C49271) *
                        C49284) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C945 -
                   (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                    C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                    (C113 * C409 + C49007 * C417) * C102 +
                    (C113 * C399 + C49007 * C410) * C114) *
                       C48996 * C946 +
                   ((C113 * C948 + C49007 * C953) * C114 +
                    (C113 * C954 + C49007 * C963) * C102 +
                    (C113 * C949 + C49007 * C955) * C115 +
                    (C113 * C956 + C49007 * C964) * C103 +
                    (C113 * C950 + C49007 * C957) * C116 +
                    (C113 * C958 + C49007 * C965) * C104 +
                    (C113 * C951 + C49007 * C959) * C117 +
                    (C113 * C960 + C49007 * C966) * C105 +
                    (C113 * C952 + C49007 * C961) * C118 +
                    (C113 * C962 + C49007 * C967) * C106) *
                       C48996 * C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                    C8500 * C49284) *
                       C945 -
                   ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                    (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                    (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                     C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                     (C113 * C399 + C49007 * C410) * C7914) *
                        C7911) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C7914 +
                     (C113 * C954 + C49007 * C963) * C49316 +
                     (C113 * C949 + C49007 * C955) * C7915 +
                     (C113 * C956 + C49007 * C964) * C49303 +
                     (C113 * C950 + C49007 * C957) * C7916 +
                     (C113 * C958 + C49007 * C965) * C49271) *
                        C7911 +
                    ((C113 * C2370 + C49007 * C2376) * C7914 +
                     (C113 * C2377 + C49007 * C2388) * C49316 +
                     (C113 * C2371 + C49007 * C2378) * C7915 +
                     (C113 * C2379 + C49007 * C2389) * C49303 +
                     (C113 * C2372 + C49007 * C2380) * C7916 +
                     (C113 * C2381 + C49007 * C2390) * C49271) *
                        C7912 +
                    ((C113 * C2373 + C49007 * C2382) * C7914 +
                     (C113 * C2383 + C49007 * C2391) * C49316 +
                     (C113 * C2374 + C49007 * C2384) * C7915 +
                     (C113 * C2385 + C49007 * C2392) * C49303 +
                     (C113 * C2375 + C49007 * C2386) * C7916 +
                     (C113 * C2387 + C49007 * C2393) * C49271) *
                        C49284) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                    C9488 * C9127) *
                       C945 -
                   ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                    (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                    ((C113 * C409 + C49007 * C417) * C48892 +
                     (C113 * C399 + C49007 * C410) * C9128) *
                        C9123) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C9128 +
                     (C113 * C954 + C49007 * C963) * C48892) *
                        C9123 +
                    ((C113 * C2370 + C49007 * C2376) * C9128 +
                     (C113 * C2377 + C49007 * C2388) * C48892) *
                        C9124 +
                    ((C113 * C2373 + C49007 * C2382) * C9128 +
                     (C113 * C2383 + C49007 * C2391) * C48892) *
                        C9125 +
                    ((C113 * C9828 + C49007 * C9830) * C9128 +
                     (C113 * C9831 + C49007 * C9834) * C48892) *
                        C9126 +
                    ((C113 * C9829 + C49007 * C9832) * C9128 +
                     (C113 * C9833 + C49007 * C9835) * C48892) *
                        C9127) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                     C15195 * C410 + C15199 * C948 + C49287 * C953) *
                        C7914 +
                    (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                     C15195 * C417 + C15199 * C954 + C49287 * C963) *
                        C49316 +
                    (C15237 + C15238 + C15239) * C7915 +
                    (C15240 + C15241 + C15242) * C49303 + C15257 * C7916 +
                    C15258 * C49271) *
                       C48996 * C945 -
                   ((C15611 + C15612 + C15613) * C49271 +
                    (C15614 + C15615 + C15616) * C7916 +
                    (C15617 + C15618 + C15619) * C49303 +
                    (C15620 + C15621 + C15622) * C7915 +
                    (C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                     C15195 * C963 + C15197 * C409 + C15194 * C417) *
                        C49316 +
                    (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                     C15195 * C953 + C15197 * C399 + C15194 * C410) *
                        C7914) *
                       C48996 * C946 +
                   ((C15197 * C948 + C15194 * C953 + C15198 * C2902 +
                     C15195 * C2909 + C15199 * C3768 + C49287 * C3771) *
                        C7914 +
                    (C15197 * C954 + C15194 * C963 + C15198 * C2908 +
                     C15195 * C2914 + C15199 * C3772 + C49287 * C3777) *
                        C49316 +
                    (C15197 * C949 + C15194 * C955 + C15198 * C2901 +
                     C15195 * C2907 + C15199 * C3769 + C49287 * C3773) *
                        C7915 +
                    (C15197 * C956 + C15194 * C964 + C15198 * C2906 +
                     C15195 * C2913 + C15199 * C3774 + C49287 * C3778) *
                        C49303 +
                    (C15197 * C950 + C15194 * C957 + C15198 * C2900 +
                     C15195 * C2905 + C15199 * C3770 + C49287 * C3775) *
                        C7916 +
                    (C15197 * C958 + C15194 * C965 + C15198 * C2904 +
                     C15195 * C2912 + C15199 * C3776 + C49287 * C3779) *
                        C49271) *
                       C48996 * C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C15197 * C119 + C15194 * C126 + C15198 * C399 +
                      C15195 * C410 + C15199 * C948 + C49287 * C953) *
                         C9128 +
                     (C15197 * C127 + C15194 * C140 + C15198 * C409 +
                      C15195 * C417 + C15199 * C954 + C49287 * C963) *
                         C48892) *
                        C49319 +
                    ((C16719 + C16720 + C16721) * C9128 +
                     (C16722 + C16723 + C16724) * C48892) *
                        C49307 +
                    C17163 * C49284) *
                       C945 -
                   (((C17334 + C17335 + C17336) * C48892 +
                     (C17337 + C17338 + C17339) * C9128) *
                        C49284 +
                    ((C17340 + C17341 + C17342) * C48892 +
                     (C17343 + C17344 + C17345) * C9128) *
                        C49307 +
                    ((C15199 * C2908 + C49287 * C2914 + C15198 * C954 +
                      C15195 * C963 + C15197 * C409 + C15194 * C417) *
                         C48892 +
                     (C15199 * C2902 + C49287 * C2909 + C15198 * C948 +
                      C15195 * C953 + C15197 * C399 + C15194 * C410) *
                         C9128) *
                        C49319) *
                       C946 +
                   (((C15197 * C948 + C15194 * C953 + C15198 * C2902 +
                      C15195 * C2909 + C15199 * C3768 + C49287 * C3771) *
                         C9128 +
                     (C15197 * C954 + C15194 * C963 + C15198 * C2908 +
                      C15195 * C2914 + C15199 * C3772 + C49287 * C3777) *
                         C48892) *
                        C49319 +
                    ((C15197 * C2370 + C15194 * C2376 + C15198 * C3354 +
                      C15195 * C3357 + C15199 * C11173 + C49287 * C11175) *
                         C9128 +
                     (C15197 * C2377 + C15194 * C2388 + C15198 * C3358 +
                      C15195 * C3363 + C15199 * C11176 + C49287 * C11179) *
                         C48892) *
                        C49307 +
                    ((C15197 * C2373 + C15194 * C2382 + C15198 * C10296 +
                      C15195 * C10299 + C15199 * C11174 + C49287 * C11177) *
                         C9128 +
                     (C15197 * C2383 + C15194 * C2391 + C15198 * C10298 +
                      C15195 * C10302 + C15199 * C11178 + C49287 * C11180) *
                         C48892) *
                        C49284) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47919 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48897 +
            (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
            C30903 * C47925 + C30904 * C26391) *
               C49251 +
           ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
            C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
            C35019 * C26391) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C31061 + C31062) * C26391 + (C31063 + C31064) * C47925 +
            (C31065 + C31066) * C48905 + (C31067 + C31068) * C47915 +
            C32349 * C48897 + C32350 * C47919) *
               C49054 +
           ((C30898 + C30897) * C26391 + (C30896 + C30895) * C47925 +
            (C30894 + C30893) * C48905 + (C30892 + C30891) * C47915 +
            (C30890 + C30889) * C48897 + (C30888 + C30887) * C47919) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C30903 * C47919 + C30904 * C48897 + C30905 * C47915 +
            C30906 * C48905 + (C30902 + C30901) * C47925 +
            (C30900 + C30899) * C26391) *
               C49251 +
           (C35018 * C47919 + C35019 * C48897 + (C31064 + C31063) * C47915 +
            (C31062 + C31061) * C48905 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C47925 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C26391) *
               C49054) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C48978 * C259 -
           (((C32121 + C32122) * C26391 + (C32123 + C32124) * C47925 +
             C32347 * C48905 + C32348 * C47915 + (C32358 + C32357) * C48897 +
             (C32356 + C32355) * C47919) *
                C49054 +
            (C35214 * C26391 + C35215 * C47925 + C32349 * C48905 +
             C32350 * C47915 + (C32354 + C32353) * C48897 +
             (C32352 + C32351) * C47919) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C47919 + C32328 * C48897 + C35018 * C47915 +
             C35019 * C48905 + (C31064 + C31063) * C47925 +
             (C31062 + C31061) * C26391) *
                C49251 +
            (C32337 * C47919 + C32338 * C48897 + (C32124 + C32123) * C47915 +
             (C32122 + C32121) * C48905 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C47925 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C26391) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C26391 + (C31063 + C31064) * C47925 +
             C35214 * C48905 + C35215 * C47915 + C32349 * C48897 +
             C32350 * C47919) *
                C49054 +
            ((C30898 + C30897) * C26391 + (C30896 + C30895) * C47925 +
             (C30894 + C30893) * C48905 + (C30892 + C30891) * C47915 +
             (C30890 + C30889) * C48897 + (C30888 + C30887) * C47919) *
                C49251) *
               C48978 * C259) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C26391 + (C35420 + C35421) * C47925 +
             (C32577 + C32578) * C48905 + (C32579 + C32580) * C47915 +
             (C33156 + C33157) * C48897 + (C33158 + C33159) * C47919) *
                C49054 +
            ((C31231 + C31232) * C26391 + (C31233 + C31234) * C47925 +
             (C31235 + C31236) * C48905 + (C31237 + C31238) * C47915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48897 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47919) *
                C49251) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C47919 + (C31236 + C31235) * C48897 +
             (C31234 + C31233) * C47915 + (C31232 + C31231) * C48905 +
             (C31230 + C31229) * C47925 + (C31228 + C31227) * C26391) *
                C49251 +
            ((C32580 + C32579) * C47919 + (C32578 + C32577) * C48897 +
             (C35421 + C35420) * C47915 + (C35419 + C35418) * C48905 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C47925 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C26391) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C26391 + (C31063 + C31064) * C47925 +
             C35214 * C48905 + C35215 * C47915 + C32349 * C48897 +
             C32350 * C47919) *
                C49054 +
            ((C30898 + C30897) * C26391 + (C30896 + C30895) * C47925 +
             (C30894 + C30893) * C48905 + (C30892 + C30891) * C47915 +
             (C30890 + C30889) * C48897 + (C30888 + C30887) * C47919) *
                C49251) *
               C393) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C48978 * C525 -
           (((C32121 + C32122) * C26391 + (C32123 + C32124) * C47925 +
             C32347 * C48905 + C32348 * C47915 + (C32358 + C32357) * C48897 +
             (C32356 + C32355) * C47919) *
                C49054 +
            (C35214 * C26391 + C35215 * C47925 + C32349 * C48905 +
             C32350 * C47915 + (C32354 + C32353) * C48897 +
             (C32352 + C32351) * C47919) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C47919 + C32328 * C48897 + C35018 * C47915 +
             C35019 * C48905 + (C31064 + C31063) * C47925 +
             (C31062 + C31061) * C26391) *
                C49251 +
            (C32337 * C47919 + C32338 * C48897 + (C32124 + C32123) * C47915 +
             (C32122 + C32121) * C48905 +
             (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                 C47925 +
             (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                 C26391) *
                C49054) *
               C48978 * C49279 -
           (((C31061 + C31062) * C26391 + (C31063 + C31064) * C47925 +
             C35214 * C48905 + C35215 * C47915 + C32349 * C48897 +
             C32350 * C47919) *
                C49054 +
            ((C30898 + C30897) * C26391 + (C30896 + C30895) * C47925 +
             (C30894 + C30893) * C48905 + (C30892 + C30891) * C47915 +
             (C30890 + C30889) * C48897 + (C30888 + C30887) * C47919) *
                C49251) *
               C48978 * C525) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47919 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48897 +
            (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
            C30903 * C47925 + C30904 * C26391) *
               C49251 +
           ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
            C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
            C35019 * C26391) *
               C49054) *
              C48978 * C591 -
          (((C32121 + C32122) * C26391 + (C32123 + C32124) * C47925 +
            C32347 * C48905 + C32348 * C47915 + (C32358 + C32357) * C48897 +
            (C32356 + C32355) * C47919) *
               C49054 +
           (C35214 * C26391 + C35215 * C47925 + C32349 * C48905 +
            C32350 * C47915 + (C32354 + C32353) * C48897 +
            (C32352 + C32351) * C47919) *
               C49251) *
              C48978 * C592 +
          ((C32921 * C47919 + C32922 * C48897 + C32337 * C47915 +
            C32338 * C48905 + (C32124 + C32123) * C47925 +
            (C32122 + C32121) * C26391) *
               C49251 +
           ((C32938 + C32937) * C47919 + (C32936 + C32935) * C48897 +
            (C32362 + C32361) * C47915 + (C32360 + C32359) * C48905 +
            (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
             C49094 * C1939) *
                C47925 +
            (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
             C49094 * C1943) *
                C26391) *
               C49054) *
              C48978 * C593) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C393 -
           (((C35418 + C35419) * C26391 + (C35420 + C35421) * C47925 +
             (C32577 + C32578) * C48905 + (C32579 + C32580) * C47915 +
             (C33156 + C33157) * C48897 + (C33158 + C33159) * C47919) *
                C49054 +
            ((C31231 + C31232) * C26391 + (C31233 + C31234) * C47925 +
             (C31235 + C31236) * C48905 + (C31237 + C31238) * C47915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48897 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47919) *
                C49251) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C47919 + (C33157 + C33156) * C48897 +
             (C32580 + C32579) * C47915 + (C32578 + C32577) * C48905 +
             (C35421 + C35420) * C47925 + (C35419 + C35418) * C26391) *
                C49251 +
            ((C33155 + C33154) * C47919 + (C33153 + C33152) * C48897 +
             (C32576 + C32575) * C47915 + (C32574 + C32573) * C48905 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C47925 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C26391) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C26391 + (C32123 + C32124) * C47925 +
             C32347 * C48905 + C32348 * C47915 + (C32358 + C32357) * C48897 +
             (C32356 + C32355) * C47919) *
                C49054 +
            (C35214 * C26391 + C35215 * C47925 + C32349 * C48905 +
             C32350 * C47915 + (C32354 + C32353) * C48897 +
             (C32352 + C32351) * C47919) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C26391 + (C35420 + C35421) * C47925 +
             (C32577 + C32578) * C48905 + (C32579 + C32580) * C47915 +
             (C33156 + C33157) * C48897 + (C33158 + C33159) * C47919) *
                C49054 +
            ((C31231 + C31232) * C26391 + (C31233 + C31234) * C47925 +
             (C31235 + C31236) * C48905 + (C31237 + C31238) * C47915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48897 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47919) *
                C49251) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C47919 + (C31236 + C31235) * C48897 +
             (C31234 + C31233) * C47915 + (C31232 + C31231) * C48905 +
             (C31230 + C31229) * C47925 + (C31228 + C31227) * C26391) *
                C49251 +
            ((C32580 + C32579) * C47919 + (C32578 + C32577) * C48897 +
             (C35421 + C35420) * C47915 + (C35419 + C35418) * C48905 +
             (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                 C47925 +
             (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                 C26391) *
                C49054) *
               C49281 -
           (((C31061 + C31062) * C26391 + (C31063 + C31064) * C47925 +
             C35214 * C48905 + C35215 * C47915 + C32349 * C48897 +
             C32350 * C47919) *
                C49054 +
            ((C30898 + C30897) * C26391 + (C30896 + C30895) * C47925 +
             (C30894 + C30893) * C48905 + (C30892 + C30891) * C47915 +
             (C30890 + C30889) * C48897 + (C30888 + C30887) * C47919) *
                C49251) *
               C799) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C47919 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C48897 +
             (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
             C30903 * C47925 + C30904 * C26391) *
                C49251 +
            ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
             C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
             C35019 * C26391) *
                C49054) *
               C799 -
           (((C35418 + C35419) * C26391 + (C35420 + C35421) * C47925 +
             (C32577 + C32578) * C48905 + (C32579 + C32580) * C47915 +
             (C33156 + C33157) * C48897 + (C33158 + C33159) * C47919) *
                C49054 +
            ((C31231 + C31232) * C26391 + (C31233 + C31234) * C47925 +
             (C31235 + C31236) * C48905 + (C31237 + C31238) * C47915 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C48897 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C47919) *
                C49251) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C47919 + (C33157 + C33156) * C48897 +
             (C32580 + C32579) * C47915 + (C32578 + C32577) * C48905 +
             (C35421 + C35420) * C47925 + (C35419 + C35418) * C26391) *
                C49251 +
            ((C33155 + C33154) * C47919 + (C33153 + C33152) * C48897 +
             (C32576 + C32575) * C47915 + (C32574 + C32573) * C48905 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C47925 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C26391) *
                C49054) *
               C49281 -
           (((C32121 + C32122) * C26391 + (C32123 + C32124) * C47925 +
             C32347 * C48905 + C32348 * C47915 + (C32358 + C32357) * C48897 +
             (C32356 + C32355) * C47919) *
                C49054 +
            (C35214 * C26391 + C35215 * C47925 + C32349 * C48905 +
             C32350 * C47915 + (C32354 + C32353) * C48897 +
             (C32352 + C32351) * C47919) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C47919 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C48897 +
            (C30887 + C30888) * C47915 + (C30889 + C30890) * C48905 +
            C30903 * C47925 + C30904 * C26391) *
               C49251 +
           ((C32351 + C32352) * C47919 + (C32353 + C32354) * C48897 +
            C32327 * C47915 + C32328 * C48905 + C35018 * C47925 +
            C35019 * C26391) *
               C49054) *
              C945 -
          (((C35418 + C35419) * C26391 + (C35420 + C35421) * C47925 +
            (C32577 + C32578) * C48905 + (C32579 + C32580) * C47915 +
            (C33156 + C33157) * C48897 + (C33158 + C33159) * C47919) *
               C49054 +
           ((C31231 + C31232) * C26391 + (C31233 + C31234) * C47925 +
            (C31235 + C31236) * C48905 + (C31237 + C31238) * C47915 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C48897 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C47919) *
               C49251) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C47919 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C48897 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C47915 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C48905 +
            (C30852 * C950 + C30850 * C957 + C30853 * C2900 + C49094 * C2905) *
                C47925 +
            (C30852 * C958 + C30850 * C965 + C30853 * C2904 + C49094 * C2912) *
                C26391) *
               C49251 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C47919 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C48897 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C47915 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C48905 +
            (C30852 * C2372 + C30850 * C2380 + C30853 * C3356 +
             C49094 * C3361) *
                C47925 +
            (C30852 * C2381 + C30850 * C2390 + C30853 * C3362 +
             C49094 * C3365) *
                C26391) *
               C49054) *
              C947) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C23627 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C23621 +
                     (C36642 + C36643 + C36644) * C23628 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C49251 +
                    ((C48044 * C267 + C49090 * C278 + C48036 * C697 +
                      C49097 * C702 + C48050 * C2370 + C36601 * C2376) *
                         C23627 +
                     (C48044 * C277 + C49090 * C285 + C48036 * C703 +
                      C49097 * C712 + C48050 * C2377 + C36601 * C2388) *
                         C23621 +
                     (C36845 + C36844 + C36843) * C23628 +
                     (C36842 + C36841 + C36840) * C48902) *
                        C49054) *
                       C48978 * C48961 * C110 -
                   (((C36834 + C36835 + C36836) * C48902 +
                     (C36837 + C36838 + C36839) * C23628 +
                     (C36840 + C36841 + C36842) * C23621 +
                     (C36843 + C36844 + C36845) * C23627) *
                        C49054 +
                    ((C36653 + C36652 + C36651) * C48902 +
                     (C36650 + C36649 + C36648) * C23628 +
                     (C36647 + C36646 + C36645) * C23621 +
                     (C36644 + C36643 + C36642) * C23627) *
                        C49251) *
                       C48978 * C48961 * C111 +
                   ((C36662 * C23627 + C36663 * C23621 +
                     (C36659 + C36658 + C36657) * C23628 +
                     (C36656 + C36655 + C36654) * C48902) *
                        C49251 +
                    ((C36839 + C36838 + C36837) * C23627 +
                     (C36836 + C36835 + C36834) * C23621 +
                     (C48044 * C264 + C49090 * C272 + C48036 * C700 +
                      C49097 * C708 + C48050 * C2714 + C36601 * C2715) *
                         C23628 +
                     (C48044 * C271 + C49090 * C282 + C48036 * C709 +
                      C49097 * C715 + C48050 * C2716 + C36601 * C2717) *
                         C48902) *
                        C49054) *
                       C48978 * C48961 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C48978 * C259 -
                    (((C38208 + C38209 + C38210) * C48902 +
                      (C38211 + C38212 + C38213) * C23628 +
                      (C48050 * C2383 + C36601 * C2391 + C48036 * C1469 +
                       C49097 * C1475 + C48044 * C601 + C49090 * C610) *
                          C23621 +
                      (C48050 * C2373 + C36601 * C2382 + C48036 * C1463 +
                       C49097 * C1470 + C48044 * C595 + C49090 * C600) *
                          C23627) *
                         C49054 +
                     (C38214 * C48902 + C38215 * C23628 +
                      (C38205 + C38204 + C38203) * C23621 +
                      (C38202 + C38201 + C38200) * C23627) *
                         C49251) *
                        C48978 * C49279) *
                       C261 +
                   (((C38206 * C23627 + C38207 * C23621 +
                      (C36839 + C36838 + C36837) * C23628 +
                      (C36836 + C36835 + C36834) * C48902) *
                         C49251 +
                     ((C38213 + C38212 + C38211) * C23627 +
                      (C38210 + C38209 + C38208) * C23621 +
                      (C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                       C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                          C23628 +
                      (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                       C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                          C48902) *
                         C49054) *
                        C48978 * C49279 -
                    (((C36834 + C36835 + C36836) * C48902 +
                      (C36837 + C36838 + C36839) * C23628 + C38214 * C23621 +
                      C38215 * C23627) *
                         C49054 +
                     ((C36653 + C36652 + C36651) * C48902 +
                      (C36650 + C36649 + C36648) * C23628 +
                      (C36647 + C36646 + C36645) * C23621 +
                      (C36644 + C36643 + C36642) * C23627) *
                         C49251) *
                        C48978 * C259) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C393 -
                    (((C38422 + C38423 + C38424) * C48902 +
                      (C38425 + C38426 + C38427) * C23628 +
                      (C48050 * C3358 + C36601 * C3363 + C48036 * C2377 +
                       C49097 * C2388 + C48044 * C703 + C49090 * C712) *
                          C23621 +
                      (C48050 * C3354 + C36601 * C3357 + C48036 * C2370 +
                       C49097 * C2376 + C48044 * C697 + C49090 * C702) *
                          C23627) *
                         C49054 +
                     ((C37022 + C37023 + C37024) * C48902 +
                      (C37025 + C37026 + C37027) * C23628 +
                      (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                       C49097 * C963 + C48044 * C409 + C49090 * C417) *
                          C23621 +
                      (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                       C49097 * C953 + C48044 * C399 + C49090 * C410) *
                          C23627) *
                         C49251) *
                        C49281) *
                       C48961 * C261 +
                   ((((C37027 + C37026 + C37025) * C23627 +
                      (C37024 + C37023 + C37022) * C23621 +
                      (C37021 + C37020 + C37019) * C23628 +
                      (C37018 + C37017 + C37016) * C48902) *
                         C49251 +
                     ((C38427 + C38426 + C38425) * C23627 +
                      (C38424 + C38423 + C38422) * C23621 +
                      (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                       C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                          C23628 +
                      (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                       C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                          C48902) *
                         C49054) *
                        C49281 -
                    (((C36834 + C36835 + C36836) * C48902 +
                      (C36837 + C36838 + C36839) * C23628 + C38214 * C23621 +
                      C38215 * C23627) *
                         C49054 +
                     ((C36653 + C36652 + C36651) * C48902 +
                      (C36650 + C36649 + C36648) * C23628 +
                      (C36647 + C36646 + C36645) * C23621 +
                      (C36644 + C36643 + C36642) * C23627) *
                         C49251) *
                        C393) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[147] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C48978 * C525 -
                    (((C38208 + C38209 + C38210) * C48902 +
                      (C38211 + C38212 + C38213) * C23628 +
                      (C48050 * C2383 + C36601 * C2391 + C48036 * C1469 +
                       C49097 * C1475 + C48044 * C601 + C49090 * C610) *
                          C23621 +
                      (C48050 * C2373 + C36601 * C2382 + C48036 * C1463 +
                       C49097 * C1470 + C48044 * C595 + C49090 * C600) *
                          C23627) *
                         C49054 +
                     (C38214 * C48902 + C38215 * C23628 +
                      (C38205 + C38204 + C38203) * C23621 +
                      (C38202 + C38201 + C38200) * C23627) *
                         C49251) *
                        C48978 * C49279) *
                       C527 +
                   (((C38206 * C23627 + C38207 * C23621 +
                      (C36839 + C36838 + C36837) * C23628 +
                      (C36836 + C36835 + C36834) * C48902) *
                         C49251 +
                     ((C38213 + C38212 + C38211) * C23627 +
                      (C38210 + C38209 + C38208) * C23621 +
                      (C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                       C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                          C23628 +
                      (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                       C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                          C48902) *
                         C49054) *
                        C48978 * C49279 -
                    (((C36834 + C36835 + C36836) * C48902 +
                      (C36837 + C36838 + C36839) * C23628 + C38214 * C23621 +
                      C38215 * C23627) *
                         C49054 +
                     ((C36653 + C36652 + C36651) * C48902 +
                      (C36650 + C36649 + C36648) * C23628 +
                      (C36647 + C36646 + C36645) * C23621 +
                      (C36644 + C36643 + C36642) * C23627) *
                         C49251) *
                        C48978 * C525) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C23627 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C23621 +
                     (C36642 + C36643 + C36644) * C23628 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C49251 +
                    ((C38200 + C38201 + C38202) * C23627 +
                     (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                     C38207 * C48902) *
                        C49054) *
                       C48978 * C591 -
                   (((C38208 + C38209 + C38210) * C48902 +
                     (C38211 + C38212 + C38213) * C23628 +
                     (C38780 + C38781 + C38782) * C23621 +
                     (C38783 + C38784 + C38785) * C23627) *
                        C49054 +
                    (C38214 * C48902 + C38215 * C23628 +
                     (C38205 + C38204 + C38203) * C23621 +
                     (C38202 + C38201 + C38200) * C23627) *
                        C49251) *
                       C48978 * C592 +
                   (((C38785 + C38784 + C38783) * C23627 +
                     (C38782 + C38781 + C38780) * C23621 +
                     (C38213 + C38212 + C38211) * C23628 +
                     (C38210 + C38209 + C38208) * C48902) *
                        C49251 +
                    ((C48044 * C1253 + C49090 * C1260 + C48036 * C1932 +
                      C49097 * C1935 + C48050 * C9828 + C36601 * C9830) *
                         C23627 +
                     (C48044 * C1259 + C49090 * C1265 + C48036 * C1936 +
                      C49097 * C1941 + C48050 * C9831 + C36601 * C9834) *
                         C23621 +
                     (C48044 * C1252 + C49090 * C1258 + C48036 * C1933 +
                      C49097 * C1937 + C48050 * C10092 + C36601 * C10093) *
                         C23628 +
                     (C48044 * C1257 + C49090 * C1264 + C48036 * C1938 +
                      C49097 * C1942 + C48050 * C10094 + C36601 * C10095) *
                         C48902) *
                        C49054) *
                       C48978 * C593) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C393 -
                    (((C38422 + C38423 + C38424) * C48902 +
                      (C38425 + C38426 + C38427) * C23628 +
                      (C38992 + C38993 + C38994) * C23621 +
                      (C38995 + C38996 + C38997) * C23627) *
                         C49054 +
                     ((C37022 + C37023 + C37024) * C48902 +
                      (C37025 + C37026 + C37027) * C23628 +
                      (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                       C49097 * C963 + C48044 * C409 + C49090 * C417) *
                          C23621 +
                      (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                       C49097 * C953 + C48044 * C399 + C49090 * C410) *
                          C23627) *
                         C49251) *
                        C49281) *
                       C525 +
                   ((((C38997 + C38996 + C38995) * C23627 +
                      (C38994 + C38993 + C38992) * C23621 +
                      (C38427 + C38426 + C38425) * C23628 +
                      (C38424 + C38423 + C38422) * C48902) *
                         C49251 +
                     ((C48044 * C1463 + C49090 * C1470 + C48036 * C2373 +
                       C49097 * C2382 + C48050 * C10296 + C36601 * C10299) *
                          C23627 +
                      (C48044 * C1469 + C49090 * C1475 + C48036 * C2383 +
                       C49097 * C2391 + C48050 * C10298 + C36601 * C10302) *
                          C23621 +
                      (C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                       C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                          C23628 +
                      (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                       C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                          C48902) *
                         C49054) *
                        C49281 -
                    (((C38208 + C38209 + C38210) * C48902 +
                      (C38211 + C38212 + C38213) * C23628 +
                      (C38780 + C38781 + C38782) * C23621 +
                      (C38783 + C38784 + C38785) * C23627) *
                         C49054 +
                     (C38214 * C48902 + C38215 * C23628 +
                      (C38205 + C38204 + C38203) * C23621 +
                      (C38202 + C38201 + C38200) * C23627) *
                         C49251) *
                        C393) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C799 -
                    (((C38422 + C38423 + C38424) * C48902 +
                      (C38425 + C38426 + C38427) * C23628 +
                      (C38992 + C38993 + C38994) * C23621 +
                      (C38995 + C38996 + C38997) * C23627) *
                         C49054 +
                     ((C37022 + C37023 + C37024) * C48902 +
                      (C37025 + C37026 + C37027) * C23628 +
                      (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                       C49097 * C963 + C48044 * C409 + C49090 * C417) *
                          C23621 +
                      (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                       C49097 * C953 + C48044 * C399 + C49090 * C410) *
                          C23627) *
                         C49251) *
                        C49281) *
                       C48961 * C527 +
                   ((((C37027 + C37026 + C37025) * C23627 +
                      (C37024 + C37023 + C37022) * C23621 +
                      (C37021 + C37020 + C37019) * C23628 +
                      (C37018 + C37017 + C37016) * C48902) *
                         C49251 +
                     ((C38427 + C38426 + C38425) * C23627 +
                      (C38424 + C38423 + C38422) * C23621 +
                      (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                       C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                          C23628 +
                      (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                       C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                          C48902) *
                         C49054) *
                        C49281 -
                    (((C36834 + C36835 + C36836) * C48902 +
                      (C36837 + C36838 + C36839) * C23628 + C38214 * C23621 +
                      C38215 * C23627) *
                         C49054 +
                     ((C36653 + C36652 + C36651) * C48902 +
                      (C36650 + C36649 + C36648) * C23628 +
                      (C36647 + C36646 + C36645) * C23621 +
                      (C36644 + C36643 + C36642) * C23627) *
                         C49251) *
                        C799) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                       C49097 * C410 + C48050 * C948 + C36601 * C953) *
                          C23627 +
                      (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                       C49097 * C417 + C48050 * C954 + C36601 * C963) *
                          C23621 +
                      (C36642 + C36643 + C36644) * C23628 +
                      (C36645 + C36646 + C36647) * C48902) *
                         C49251 +
                     ((C38200 + C38201 + C38202) * C23627 +
                      (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                      C38207 * C48902) *
                         C49054) *
                        C799 -
                    (((C38422 + C38423 + C38424) * C48902 +
                      (C38425 + C38426 + C38427) * C23628 +
                      (C38992 + C38993 + C38994) * C23621 +
                      (C38995 + C38996 + C38997) * C23627) *
                         C49054 +
                     ((C37022 + C37023 + C37024) * C48902 +
                      (C37025 + C37026 + C37027) * C23628 +
                      (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                       C49097 * C963 + C48044 * C409 + C49090 * C417) *
                          C23621 +
                      (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                       C49097 * C953 + C48044 * C399 + C49090 * C410) *
                          C23627) *
                         C49251) *
                        C49281) *
                       C259 +
                   ((((C38997 + C38996 + C38995) * C23627 +
                      (C38994 + C38993 + C38992) * C23621 +
                      (C38427 + C38426 + C38425) * C23628 +
                      (C38424 + C38423 + C38422) * C48902) *
                         C49251 +
                     ((C48044 * C1463 + C49090 * C1470 + C48036 * C2373 +
                       C49097 * C2382 + C48050 * C10296 + C36601 * C10299) *
                          C23627 +
                      (C48044 * C1469 + C49090 * C1475 + C48036 * C2383 +
                       C49097 * C2391 + C48050 * C10298 + C36601 * C10302) *
                          C23621 +
                      (C48044 * C1462 + C49090 * C1468 + C48036 * C2374 +
                       C49097 * C2384 + C48050 * C10297 + C36601 * C10300) *
                          C23628 +
                      (C48044 * C1467 + C49090 * C1474 + C48036 * C2385 +
                       C49097 * C2392 + C48050 * C10301 + C36601 * C10303) *
                          C48902) *
                         C49054) *
                        C49281 -
                    (((C38208 + C38209 + C38210) * C48902 +
                      (C38211 + C38212 + C38213) * C23628 +
                      (C38780 + C38781 + C38782) * C23621 +
                      (C38783 + C38784 + C38785) * C23627) *
                         C49054 +
                     (C38214 * C48902 + C38215 * C23628 +
                      (C38205 + C38204 + C38203) * C23621 +
                      (C38202 + C38201 + C38200) * C23627) *
                         C49251) *
                        C799) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[152] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C23627 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C23621 +
                     (C36642 + C36643 + C36644) * C23628 +
                     (C36645 + C36646 + C36647) * C48902) *
                        C49251 +
                    ((C38200 + C38201 + C38202) * C23627 +
                     (C38203 + C38204 + C38205) * C23621 + C38206 * C23628 +
                     C38207 * C48902) *
                        C49054) *
                       C945 -
                   (((C38422 + C38423 + C38424) * C48902 +
                     (C38425 + C38426 + C38427) * C23628 +
                     (C38992 + C38993 + C38994) * C23621 +
                     (C38995 + C38996 + C38997) * C23627) *
                        C49054 +
                    ((C37022 + C37023 + C37024) * C48902 +
                     (C37025 + C37026 + C37027) * C23628 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C23621 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C23627) *
                        C49251) *
                       C946 +
                   (((C48044 * C948 + C49090 * C953 + C48036 * C2902 +
                      C49097 * C2909 + C48050 * C3768 + C36601 * C3771) *
                         C23627 +
                     (C48044 * C954 + C49090 * C963 + C48036 * C2908 +
                      C49097 * C2914 + C48050 * C3772 + C36601 * C3777) *
                         C23621 +
                     (C48044 * C949 + C49090 * C955 + C48036 * C2901 +
                      C49097 * C2907 + C48050 * C3769 + C36601 * C3773) *
                         C23628 +
                     (C48044 * C956 + C49090 * C964 + C48036 * C2906 +
                      C49097 * C2913 + C48050 * C3774 + C36601 * C3778) *
                         C48902) *
                        C49251 +
                    ((C48044 * C2370 + C49090 * C2376 + C48036 * C3354 +
                      C49097 * C3357 + C48050 * C11173 + C36601 * C11175) *
                         C23627 +
                     (C48044 * C2377 + C49090 * C2388 + C48036 * C3358 +
                      C49097 * C3363 + C48050 * C11176 + C36601 * C11179) *
                         C23621 +
                     (C48044 * C2371 + C49090 * C2378 + C48036 * C3355 +
                      C49097 * C3359 + C48050 * C17901 + C36601 * C17902) *
                         C23628 +
                     (C48044 * C2379 + C49090 * C2389 + C48036 * C3360 +
                      C49097 * C3364 + C48050 * C17903 + C36601 * C17904) *
                         C48902) *
                        C49054) *
                       C947) *
                  C48961 * C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C30852 * C267 + C30850 * C278 + C30853 * C697 + C49094 * C702) *
                C23627 +
            (C30852 * C277 + C30850 * C285 + C30853 * C703 + C49094 * C712) *
                C23621 +
            (C31072 + C31071) * C23628 + (C31070 + C31069) * C48902) *
               C49307 +
           ((C30852 * C595 + C30850 * C600 + C30853 * C1463 + C49094 * C1470) *
                C23627 +
            (C30852 * C601 + C30850 * C610 + C30853 * C1469 + C49094 * C1475) *
                C23621 +
            (C32117 + C32118) * C23628 + (C32119 + C32120) * C48902) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
            (C32120 + C32119) * C23621 + (C32118 + C32117) * C23627) *
               C49284 +
           ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
            (C31069 + C31070) * C23621 + (C31071 + C31072) * C23627) *
               C49307 +
           ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
            (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
               C49319) *
              C48978 * C48961 * C111 +
          ((C30903 * C23627 + C30904 * C23621 + C30905 * C23628 +
            C30906 * C48902) *
               C49319 +
           ((C31068 + C31067) * C23627 + (C31066 + C31065) * C23621 +
            (C31064 + C31063) * C23628 + (C31062 + C31061) * C48902) *
               C49307 +
           ((C32124 + C32123) * C23627 + (C32122 + C32121) * C23621 +
            (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                C23628 +
            (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                C48902) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C48978 * C48961 * C110 -
          ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
           (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
           (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
           (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
              C48996 * C48978 * C48961 * C111 +
          (C30903 * C22511 + C30904 * C49325 + C30905 * C22512 +
           C30906 * C49318 + (C30902 + C30901) * C22513 +
           (C30900 + C30899) * C49305 +
           (C30852 * C124 + C30850 * C137 + C30853 * C400 + C49094 * C411) *
               C22514 +
           (C30852 * C136 + C30850 * C145 + C30853 * C412 + C49094 * C418) *
               C49288) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
            C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
               C23627 +
           (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
            C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
               C23621 +
           (C33832 + C33833 + C33834 + C33835) * C23628 +
           (C33836 + C33837 + C33838 + C33839) * C48902) *
              C48996 * C48978 * C48961 * C110 -
          ((C33840 + C33841 + C33842 + C33843) * C48902 +
           (C33844 + C33845 + C33846 + C33847) * C23628 +
           (C33839 + C33838 + C33837 + C33836) * C23621 +
           (C33835 + C33834 + C33833 + C33832) * C23627) *
              C48996 * C48978 * C48961 * C111 +
          ((C33847 + C33846 + C33845 + C33844) * C23627 +
           (C33843 + C33842 + C33841 + C33840) * C23621 +
           (C33795 * C122 + C49327 * C132 + C33796 * C396 + C49324 * C404 +
            C33797 * C951 + C49315 * C959 + C33798 * C2903 + C49300 * C2910) *
               C23628 +
           (C33795 * C133 + C49327 * C143 + C33796 * C403 + C49324 * C414 +
            C33797 * C960 + C49315 * C966 + C33798 * C2911 + C49300 * C2915) *
               C48902) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C48978 * C259 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C30853 * C1936 + C49094 * C1941 + C30852 * C1259 +
              C30850 * C1265) *
                 C23621 +
             (C30853 * C1932 + C49094 * C1935 + C30852 * C1253 +
              C30850 * C1260) *
                 C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C23627 + C32328 * C23621 + (C31068 + C31067) * C23628 +
             (C31066 + C31065) * C48902) *
                C49319 +
            (C32337 * C23627 + C32338 * C23621 + (C32124 + C32123) * C23628 +
             (C32122 + C32121) * C48902) *
                C49307 +
            ((C32362 + C32361) * C23627 + (C32360 + C32359) * C23621 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C23628 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C48978 * C259 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C31072 + C31071) * C22511 + (C31070 + C31069) * C49325 +
            (C31068 + C31067) * C22512 + (C31066 + C31065) * C49318 +
            (C31064 + C31063) * C22513 + (C31062 + C31061) * C49305 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C22514 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C48978 * C259 -
           ((C33994 + C33995 + C33996 + C33997) * C48902 +
            (C33998 + C33999 + C34000 + C34001) * C23628 +
            (C33798 * C3358 + C49300 * C3363 + C33797 * C2377 + C49315 * C2388 +
             C33796 * C703 + C49324 * C712 + C33795 * C277 + C49327 * C285) *
                C23621 +
            (C33798 * C3354 + C49300 * C3357 + C33797 * C2370 + C49315 * C2376 +
             C33796 * C697 + C49324 * C702 + C33795 * C267 + C49327 * C278) *
                C23627) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C34001 + C34000 + C33999 + C33998) * C23627 +
            (C33997 + C33996 + C33995 + C33994) * C23621 +
            (C33795 * C265 + C49327 * C274 + C33796 * C699 + C49324 * C706 +
             C33797 * C2372 + C49315 * C2380 + C33798 * C3356 +
             C49300 * C3361) *
                C23628 +
            (C33795 * C273 + C49327 * C283 + C33796 * C707 + C49324 * C714 +
             C33797 * C2381 + C49315 * C2390 + C33798 * C3362 +
             C49300 * C3365) *
                C48902) *
               C48996 * C48978 * C49279 -
           ((C33840 + C33841 + C33842 + C33843) * C48902 +
            (C33844 + C33845 + C33846 + C33847) * C23628 +
            (C33839 + C33838 + C33837 + C33836) * C23621 +
            (C33835 + C33834 + C33833 + C33832) * C23627) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C30853 * C2383 + C49094 * C2391 + C30852 * C1469 +
              C30850 * C1475) *
                 C23621 +
             (C30853 * C2373 + C49094 * C2382 + C30852 * C1463 +
              C30850 * C1470) *
                 C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C30853 * C2377 + C49094 * C2388 + C30852 * C703 + C30850 * C712) *
                 C23621 +
             (C30853 * C2370 + C49094 * C2376 + C30852 * C697 + C30850 * C702) *
                 C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C23627 + (C31236 + C31235) * C23621 +
             (C31234 + C31233) * C23628 + (C31232 + C31231) * C48902) *
                C49319 +
            ((C32580 + C32579) * C23627 + (C32578 + C32577) * C23621 +
             (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                 C23628 +
             (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                 C48902) *
                C49307 +
            ((C32576 + C32575) * C23627 + (C32574 + C32573) * C23621 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C23628 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C393 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C31238 + C31237) * C22511 + (C31236 + C31235) * C49325 +
            (C31234 + C31233) * C22512 + (C31232 + C31231) * C49318 +
            (C31230 + C31229) * C22513 + (C31228 + C31227) * C49305 +
            (C30852 * C395 + C30850 * C402 + C30853 * C952 + C49094 * C961) *
                C22514 +
            (C30852 * C401 + C30850 * C413 + C30853 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C393 -
           ((C34148 + C34149 + C34150 + C34151) * C48902 +
            (C34152 + C34153 + C34154 + C34155) * C23628 +
            (C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
             C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
                C23621 +
            (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
             C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
                C23627) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C34155 + C34154 + C34153 + C34152) * C23627 +
            (C34151 + C34150 + C34149 + C34148) * C23621 +
            (C33795 * C397 + C49327 * C406 + C33796 * C950 + C49324 * C957 +
             C33797 * C2900 + C49315 * C2905 + C33798 * C3770 +
             C49300 * C3775) *
                C23628 +
            (C33795 * C405 + C49327 * C415 + C33796 * C958 + C49324 * C965 +
             C33797 * C2904 + C49315 * C2912 + C33798 * C3776 +
             C49300 * C3779) *
                C48902) *
               C48996 * C49281 -
           ((C33840 + C33841 + C33842 + C33843) * C48902 +
            (C33844 + C33845 + C33846 + C33847) * C23628 +
            (C33839 + C33838 + C33837 + C33836) * C23621 +
            (C33835 + C33834 + C33833 + C33832) * C23627) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C48978 * C525 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C30853 * C1936 + C49094 * C1941 + C30852 * C1259 +
              C30850 * C1265) *
                 C23621 +
             (C30853 * C1932 + C49094 * C1935 + C30852 * C1253 +
              C30850 * C1260) *
                 C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C23627 + C32328 * C23621 + (C31068 + C31067) * C23628 +
             (C31066 + C31065) * C48902) *
                C49319 +
            (C32337 * C23627 + C32338 * C23621 + (C32124 + C32123) * C23628 +
             (C32122 + C32121) * C48902) *
                C49307 +
            ((C32362 + C32361) * C23627 + (C32360 + C32359) * C23621 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C23628 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C48978 * C525 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C31072 + C31071) * C22511 + (C31070 + C31069) * C49325 +
            (C31068 + C31067) * C22512 + (C31066 + C31065) * C49318 +
            (C31064 + C31063) * C22513 + (C31062 + C31061) * C49305 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C22514 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C48978 * C525 -
           ((C33994 + C33995 + C33996 + C33997) * C48902 +
            (C33998 + C33999 + C34000 + C34001) * C23628 +
            (C33798 * C3358 + C49300 * C3363 + C33797 * C2377 + C49315 * C2388 +
             C33796 * C703 + C49324 * C712 + C33795 * C277 + C49327 * C285) *
                C23621 +
            (C33798 * C3354 + C49300 * C3357 + C33797 * C2370 + C49315 * C2376 +
             C33796 * C697 + C49324 * C702 + C33795 * C267 + C49327 * C278) *
                C23627) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C34001 + C34000 + C33999 + C33998) * C23627 +
            (C33997 + C33996 + C33995 + C33994) * C23621 +
            (C33795 * C265 + C49327 * C274 + C33796 * C699 + C49324 * C706 +
             C33797 * C2372 + C49315 * C2380 + C33798 * C3356 +
             C49300 * C3361) *
                C23628 +
            (C33795 * C273 + C49327 * C283 + C33796 * C707 + C49324 * C714 +
             C33797 * C2381 + C49315 * C2390 + C33798 * C3362 +
             C49300 * C3365) *
                C48902) *
               C48996 * C48978 * C49279 -
           ((C33840 + C33841 + C33842 + C33843) * C48902 +
            (C33844 + C33845 + C33846 + C33847) * C23628 +
            (C33839 + C33838 + C33837 + C33836) * C23621 +
            (C33835 + C33834 + C33833 + C33832) * C23627) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
            C32327 * C23628 + C32328 * C48902) *
               C49307 +
           C32941 * C49284) *
              C48978 * C591 -
          (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
            (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
               C49284 +
           (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
            (C32356 + C32355) * C23627) *
               C49307 +
           (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
            (C32352 + C32351) * C23627) *
               C49319) *
              C48978 * C592 +
          (C32941 * C49319 +
           ((C32938 + C32937) * C23627 + (C32936 + C32935) * C23621 +
            (C32362 + C32361) * C23628 + (C32360 + C32359) * C48902) *
               C49307 +
           ((C30852 * C1757 + C30850 * C1760 + C30853 * C9329 +
             C49094 * C9332) *
                C23627 +
            (C30852 * C1761 + C30850 * C1766 + C30853 * C9331 +
             C49094 * C9335) *
                C23621 +
            (C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
             C49094 * C9333) *
                C23628 +
            (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
             C49094 * C9336) *
                C48902) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C48978 * C591 -
          ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
           (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
           (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
           (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
               C49325 +
           (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
               C22511) *
              C48996 * C48978 * C592 +
          ((C30852 * C595 + C30850 * C600 + C30853 * C1463 + C49094 * C1470) *
               C22511 +
           (C30852 * C601 + C30850 * C610 + C30853 * C1469 + C49094 * C1475) *
               C49325 +
           (C30852 * C596 + C30850 * C602 + C30853 * C1462 + C49094 * C1468) *
               C22512 +
           (C30852 * C603 + C30850 * C611 + C30853 * C1467 + C49094 * C1474) *
               C49318 +
           (C30852 * C597 + C30850 * C604 + C30853 * C1461 + C49094 * C1466) *
               C22513 +
           (C30852 * C605 + C30850 * C612 + C30853 * C1465 + C49094 * C1473) *
               C49305 +
           (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
               C22514 +
           (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
               C49288) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
            C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
               C23627 +
           (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
            C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
               C23621 +
           (C33832 + C33833 + C33834 + C33835) * C23628 +
           (C33836 + C33837 + C33838 + C33839) * C48902) *
              C48996 * C48978 * C591 -
          ((C33994 + C33995 + C33996 + C33997) * C48902 +
           (C33998 + C33999 + C34000 + C34001) * C23628 +
           (C33798 * C3358 + C49300 * C3363 + C33797 * C2377 + C49315 * C2388 +
            C33796 * C703 + C49324 * C712 + C33795 * C277 + C49327 * C285) *
               C23621 +
           (C33798 * C3354 + C49300 * C3357 + C33797 * C2370 + C49315 * C2376 +
            C33796 * C697 + C49324 * C702 + C33795 * C267 + C49327 * C278) *
               C23627) *
              C48996 * C48978 * C592 +
          ((C33795 * C595 + C49327 * C600 + C33796 * C1463 + C49324 * C1470 +
            C33797 * C2373 + C49315 * C2382 + C33798 * C10296 +
            C49300 * C10299) *
               C23627 +
           (C33795 * C601 + C49327 * C610 + C33796 * C1469 + C49324 * C1475 +
            C33797 * C2383 + C49315 * C2391 + C33798 * C10298 +
            C49300 * C10302) *
               C23621 +
           (C33795 * C596 + C49327 * C602 + C33796 * C1462 + C49324 * C1468 +
            C33797 * C2374 + C49315 * C2384 + C33798 * C10297 +
            C49300 * C10300) *
               C23628 +
           (C33795 * C603 + C49327 * C611 + C33796 * C1467 + C49324 * C1474 +
            C33797 * C2385 + C49315 * C2392 + C33798 * C10301 +
            C49300 * C10303) *
               C48902) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C23627 + (C33157 + C33156) * C23621 +
             (C32580 + C32579) * C23628 + (C32578 + C32577) * C48902) *
                C49319 +
            ((C33155 + C33154) * C23627 + (C33153 + C33152) * C23621 +
             (C32576 + C32575) * C23628 + (C32574 + C32573) * C48902) *
                C49307 +
            ((C30852 * C1932 + C30850 * C1935 + C30853 * C9828 +
              C49094 * C9830) *
                 C23627 +
             (C30852 * C1936 + C30850 * C1941 + C30853 * C9831 +
              C49094 * C9834) *
                 C23621 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C393 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C525 +
          (((C30852 * C697 + C30850 * C702 + C30853 * C2370 + C49094 * C2376) *
                C22511 +
            (C30852 * C703 + C30850 * C712 + C30853 * C2377 + C49094 * C2388) *
                C49325 +
            (C30852 * C698 + C30850 * C704 + C30853 * C2371 + C49094 * C2378) *
                C22512 +
            (C30852 * C705 + C30850 * C713 + C30853 * C2379 + C49094 * C2389) *
                C49318 +
            (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                C22513 +
            (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                C49305 +
            (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                C22514 +
            (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C393 -
           ((C34148 + C34149 + C34150 + C34151) * C48902 +
            (C34152 + C34153 + C34154 + C34155) * C23628 +
            (C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
             C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
                C23621 +
            (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
             C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
                C23627) *
               C48996 * C49281) *
              C525 +
          (((C33795 * C697 + C49327 * C702 + C33796 * C2370 + C49324 * C2376 +
             C33797 * C3354 + C49315 * C3357 + C33798 * C11173 +
             C49300 * C11175) *
                C23627 +
            (C33795 * C703 + C49327 * C712 + C33796 * C2377 + C49324 * C2388 +
             C33797 * C3358 + C49315 * C3363 + C33798 * C11176 +
             C49300 * C11179) *
                C23621 +
            (C33795 * C698 + C49327 * C704 + C33796 * C2371 + C49324 * C2378 +
             C33797 * C3355 + C49315 * C3359 + C33798 * C17901 +
             C49300 * C17902) *
                C23628 +
            (C33795 * C705 + C49327 * C713 + C33796 * C2379 + C49324 * C2389 +
             C33797 * C3360 + C49315 * C3364 + C33798 * C17903 +
             C49300 * C17904) *
                C48902) *
               C48996 * C49281 -
           ((C33994 + C33995 + C33996 + C33997) * C48902 +
            (C33998 + C33999 + C34000 + C34001) * C23628 +
            (C33798 * C3358 + C49300 * C3363 + C33797 * C2377 + C49315 * C2388 +
             C33796 * C703 + C49324 * C712 + C33795 * C277 + C49327 * C285) *
                C23621 +
            (C33798 * C3354 + C49300 * C3357 + C33797 * C2370 + C49315 * C2376 +
             C33796 * C697 + C49324 * C702 + C33795 * C267 + C49327 * C278) *
                C23627) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C23627 + (C31236 + C31235) * C23621 +
             (C31234 + C31233) * C23628 + (C31232 + C31231) * C48902) *
                C49319 +
            ((C32580 + C32579) * C23627 + (C32578 + C32577) * C23621 +
             (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                 C23628 +
             (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                 C48902) *
                C49307 +
            ((C32576 + C32575) * C23627 + (C32574 + C32573) * C23621 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C23628 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C799 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C31238 + C31237) * C22511 + (C31236 + C31235) * C49325 +
            (C31234 + C31233) * C22512 + (C31232 + C31231) * C49318 +
            (C31230 + C31229) * C22513 + (C31228 + C31227) * C49305 +
            (C30852 * C395 + C30850 * C402 + C30853 * C952 + C49094 * C961) *
                C22514 +
            (C30852 * C401 + C30850 * C413 + C30853 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C799 -
           ((C34148 + C34149 + C34150 + C34151) * C48902 +
            (C34152 + C34153 + C34154 + C34155) * C23628 +
            (C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
             C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
                C23621 +
            (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
             C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
                C23627) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C34155 + C34154 + C34153 + C34152) * C23627 +
            (C34151 + C34150 + C34149 + C34148) * C23621 +
            (C33795 * C397 + C49327 * C406 + C33796 * C950 + C49324 * C957 +
             C33797 * C2900 + C49315 * C2905 + C33798 * C3770 +
             C49300 * C3775) *
                C23628 +
            (C33795 * C405 + C49327 * C415 + C33796 * C958 + C49324 * C965 +
             C33797 * C2904 + C49315 * C2912 + C33798 * C3776 +
             C49300 * C3779) *
                C48902) *
               C48996 * C49281 -
           ((C33840 + C33841 + C33842 + C33843) * C48902 +
            (C33844 + C33845 + C33846 + C33847) * C23628 +
            (C33839 + C33838 + C33837 + C33836) * C23621 +
            (C33835 + C33834 + C33833 + C33832) * C23627) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C23627 + (C33157 + C33156) * C23621 +
             (C32580 + C32579) * C23628 + (C32578 + C32577) * C48902) *
                C49319 +
            ((C33155 + C33154) * C23627 + (C33153 + C33152) * C23621 +
             (C32576 + C32575) * C23628 + (C32574 + C32573) * C48902) *
                C49307 +
            ((C30852 * C1932 + C30850 * C1935 + C30853 * C9828 +
              C49094 * C9830) *
                 C23627 +
             (C30852 * C1936 + C30850 * C1941 + C30853 * C9831 +
              C49094 * C9834) *
                 C23621 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C799 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C259 +
          (((C30852 * C697 + C30850 * C702 + C30853 * C2370 + C49094 * C2376) *
                C22511 +
            (C30852 * C703 + C30850 * C712 + C30853 * C2377 + C49094 * C2388) *
                C49325 +
            (C30852 * C698 + C30850 * C704 + C30853 * C2371 + C49094 * C2378) *
                C22512 +
            (C30852 * C705 + C30850 * C713 + C30853 * C2379 + C49094 * C2389) *
                C49318 +
            (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                C22513 +
            (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                C49305 +
            (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                C22514 +
            (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
             C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
                C23627 +
            (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
             C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
                C23621 +
            (C33832 + C33833 + C33834 + C33835) * C23628 +
            (C33836 + C33837 + C33838 + C33839) * C48902) *
               C48996 * C799 -
           ((C34148 + C34149 + C34150 + C34151) * C48902 +
            (C34152 + C34153 + C34154 + C34155) * C23628 +
            (C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
             C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
                C23621 +
            (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
             C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
                C23627) *
               C48996 * C49281) *
              C259 +
          (((C33795 * C697 + C49327 * C702 + C33796 * C2370 + C49324 * C2376 +
             C33797 * C3354 + C49315 * C3357 + C33798 * C11173 +
             C49300 * C11175) *
                C23627 +
            (C33795 * C703 + C49327 * C712 + C33796 * C2377 + C49324 * C2388 +
             C33797 * C3358 + C49315 * C3363 + C33798 * C11176 +
             C49300 * C11179) *
                C23621 +
            (C33795 * C698 + C49327 * C704 + C33796 * C2371 + C49324 * C2378 +
             C33797 * C3355 + C49315 * C3359 + C33798 * C17901 +
             C49300 * C17902) *
                C23628 +
            (C33795 * C705 + C49327 * C713 + C33796 * C2379 + C49324 * C2389 +
             C33797 * C3360 + C49315 * C3364 + C33798 * C17903 +
             C49300 * C17904) *
                C48902) *
               C48996 * C49281 -
           ((C33994 + C33995 + C33996 + C33997) * C48902 +
            (C33998 + C33999 + C34000 + C34001) * C23628 +
            (C33798 * C3358 + C49300 * C3363 + C33797 * C2377 + C49315 * C2388 +
             C33796 * C703 + C49324 * C712 + C33795 * C277 + C49327 * C285) *
                C23621 +
            (C33798 * C3354 + C49300 * C3357 + C33797 * C2370 + C49315 * C2376 +
             C33796 * C697 + C49324 * C702 + C33795 * C267 + C49327 * C278) *
                C23627) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
            C32327 * C23628 + C32328 * C48902) *
               C49307 +
           C32941 * C49284) *
              C945 -
          (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
            (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
               C49284 +
           ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
            (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
               C49307 +
           ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C23621 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C23627) *
               C49319) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C23627 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C23621 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C23628 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C48902) *
               C49319 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C23627 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C23621 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C23628 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C48902) *
               C49307 +
           ((C30852 * C2373 + C30850 * C2382 + C30853 * C10296 +
             C49094 * C10299) *
                C23627 +
            (C30852 * C2383 + C30850 * C2391 + C30853 * C10298 +
             C49094 * C10302) *
                C23621 +
            (C30852 * C2374 + C30850 * C2384 + C30853 * C10297 +
             C49094 * C10300) *
                C23628 +
            (C30852 * C2385 + C30850 * C2392 + C30853 * C10301 +
             C49094 * C10303) *
                C48902) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C945 -
          ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
           (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
           (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
           (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
               C49325 +
           (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
               C22511) *
              C48996 * C946 +
          ((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
               C22511 +
           (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
               C49325 +
           (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
               C22512 +
           (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
               C49318 +
           (C30852 * C950 + C30850 * C957 + C30853 * C2900 + C49094 * C2905) *
               C22513 +
           (C30852 * C958 + C30850 * C965 + C30853 * C2904 + C49094 * C2912) *
               C49305 +
           (C30852 * C951 + C30850 * C959 + C30853 * C2903 + C49094 * C2910) *
               C22514 +
           (C30852 * C960 + C30850 * C966 + C30853 * C2911 + C49094 * C2915) *
               C49288) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33795 * C119 + C49327 * C126 + C33796 * C399 + C49324 * C410 +
            C33797 * C948 + C49315 * C953 + C33798 * C2902 + C49300 * C2909) *
               C23627 +
           (C33795 * C127 + C49327 * C140 + C33796 * C409 + C49324 * C417 +
            C33797 * C954 + C49315 * C963 + C33798 * C2908 + C49300 * C2914) *
               C23621 +
           (C33832 + C33833 + C33834 + C33835) * C23628 +
           (C33836 + C33837 + C33838 + C33839) * C48902) *
              C48996 * C945 -
          ((C34148 + C34149 + C34150 + C34151) * C48902 +
           (C34152 + C34153 + C34154 + C34155) * C23628 +
           (C33798 * C3772 + C49300 * C3777 + C33797 * C2908 + C49315 * C2914 +
            C33796 * C954 + C49324 * C963 + C33795 * C409 + C49327 * C417) *
               C23621 +
           (C33798 * C3768 + C49300 * C3771 + C33797 * C2902 + C49315 * C2909 +
            C33796 * C948 + C49324 * C953 + C33795 * C399 + C49327 * C410) *
               C23627) *
              C48996 * C946 +
          ((C33795 * C948 + C49327 * C953 + C33796 * C2902 + C49324 * C2909 +
            C33797 * C3768 + C49315 * C3771 + C33798 * C17987 +
            C49300 * C17990) *
               C23627 +
           (C33795 * C954 + C49327 * C963 + C33796 * C2908 + C49324 * C2914 +
            C33797 * C3772 + C49315 * C3777 + C33798 * C17989 +
            C49300 * C17993) *
               C23621 +
           (C33795 * C949 + C49327 * C955 + C33796 * C2901 + C49324 * C2907 +
            C33797 * C3769 + C49315 * C3773 + C33798 * C17988 +
            C49300 * C17991) *
               C23628 +
           (C33795 * C956 + C49327 * C964 + C33796 * C2906 + C49324 * C2913 +
            C33797 * C3774 + C49315 * C3778 + C33798 * C17992 +
            C49300 * C17994) *
               C48902) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47919 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48897 +
                    (C36642 + C36643 + C36644) * C47915 +
                    (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                    C36663 * C26391) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C36654 + C36655 + C36656) * C26391 +
                    (C36657 + C36658 + C36659) * C47925 +
                    (C36653 + C36652 + C36651) * C48905 +
                    (C36650 + C36649 + C36648) * C47915 +
                    (C36647 + C36646 + C36645) * C48897 +
                    (C36644 + C36643 + C36642) * C47919) *
                       C48996 * C48978 * C48961 * C111 +
                   (C36662 * C47919 + C36663 * C48897 +
                    (C36659 + C36658 + C36657) * C47915 +
                    (C36656 + C36655 + C36654) * C48905 +
                    (C48044 * C123 + C49090 * C134 + C48036 * C395 +
                     C49097 * C402 + C48050 * C952 + C36601 * C961) *
                        C47925 +
                    (C48044 * C135 + C49090 * C144 + C48036 * C401 +
                     C49097 * C413 + C48050 * C962 + C36601 * C967) *
                        C26391) *
                       C48996 * C48978 * C48961 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C48978 * C259 -
                    ((C36834 + C36835 + C36836) * C26391 +
                     (C36837 + C36838 + C36839) * C47925 +
                     (C36840 + C36841 + C36842) * C48905 +
                     (C36843 + C36844 + C36845) * C47915 +
                     (C48050 * C2377 + C36601 * C2388 + C48036 * C703 +
                      C49097 * C712 + C48044 * C277 + C49090 * C285) *
                         C48897 +
                     (C48050 * C2370 + C36601 * C2376 + C48036 * C697 +
                      C49097 * C702 + C48044 * C267 + C49090 * C278) *
                         C47919) *
                        C48996 * C48978 * C49279) *
                       C261 +
                   (((C36845 + C36844 + C36843) * C47919 +
                     (C36842 + C36841 + C36840) * C48897 +
                     (C36839 + C36838 + C36837) * C47915 +
                     (C36836 + C36835 + C36834) * C48905 +
                     (C48044 * C264 + C49090 * C272 + C48036 * C700 +
                      C49097 * C708 + C48050 * C2714 + C36601 * C2715) *
                         C47925 +
                     (C48044 * C271 + C49090 * C282 + C48036 * C709 +
                      C49097 * C715 + C48050 * C2716 + C36601 * C2717) *
                         C26391) *
                        C48996 * C48978 * C49279 -
                    ((C36654 + C36655 + C36656) * C26391 +
                     (C36657 + C36658 + C36659) * C47925 +
                     (C36653 + C36652 + C36651) * C48905 +
                     (C36650 + C36649 + C36648) * C47915 +
                     (C36647 + C36646 + C36645) * C48897 +
                     (C36644 + C36643 + C36642) * C47919) *
                        C48996 * C48978 * C259) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C393 -
                    ((C37016 + C37017 + C37018) * C26391 +
                     (C37019 + C37020 + C37021) * C47925 +
                     (C37022 + C37023 + C37024) * C48905 +
                     (C37025 + C37026 + C37027) * C47915 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48897 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47919) *
                        C48996 * C49281) *
                       C48961 * C261 +
                   (((C37027 + C37026 + C37025) * C47919 +
                     (C37024 + C37023 + C37022) * C48897 +
                     (C37021 + C37020 + C37019) * C47915 +
                     (C37018 + C37017 + C37016) * C48905 +
                     (C48044 * C396 + C49090 * C404 + C48036 * C951 +
                      C49097 * C959 + C48050 * C2903 + C36601 * C2910) *
                         C47925 +
                     (C48044 * C403 + C49090 * C414 + C48036 * C960 +
                      C49097 * C966 + C48050 * C2911 + C36601 * C2915) *
                         C26391) *
                        C48996 * C49281 -
                    ((C36654 + C36655 + C36656) * C26391 +
                     (C36657 + C36658 + C36659) * C47925 +
                     (C36653 + C36652 + C36651) * C48905 +
                     (C36650 + C36649 + C36648) * C47915 +
                     (C36647 + C36646 + C36645) * C48897 +
                     (C36644 + C36643 + C36642) * C47919) *
                        C48996 * C393) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C48978 * C525 -
                    ((C36834 + C36835 + C36836) * C26391 +
                     (C36837 + C36838 + C36839) * C47925 +
                     (C36840 + C36841 + C36842) * C48905 +
                     (C36843 + C36844 + C36845) * C47915 +
                     (C48050 * C2377 + C36601 * C2388 + C48036 * C703 +
                      C49097 * C712 + C48044 * C277 + C49090 * C285) *
                         C48897 +
                     (C48050 * C2370 + C36601 * C2376 + C48036 * C697 +
                      C49097 * C702 + C48044 * C267 + C49090 * C278) *
                         C47919) *
                        C48996 * C48978 * C49279) *
                       C527 +
                   (((C36845 + C36844 + C36843) * C47919 +
                     (C36842 + C36841 + C36840) * C48897 +
                     (C36839 + C36838 + C36837) * C47915 +
                     (C36836 + C36835 + C36834) * C48905 +
                     (C48044 * C264 + C49090 * C272 + C48036 * C700 +
                      C49097 * C708 + C48050 * C2714 + C36601 * C2715) *
                         C47925 +
                     (C48044 * C271 + C49090 * C282 + C48036 * C709 +
                      C49097 * C715 + C48050 * C2716 + C36601 * C2717) *
                         C26391) *
                        C48996 * C48978 * C49279 -
                    ((C36654 + C36655 + C36656) * C26391 +
                     (C36657 + C36658 + C36659) * C47925 +
                     (C36653 + C36652 + C36651) * C48905 +
                     (C36650 + C36649 + C36648) * C47915 +
                     (C36647 + C36646 + C36645) * C48897 +
                     (C36644 + C36643 + C36642) * C47919) *
                        C48996 * C48978 * C525) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47919 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48897 +
                    (C36642 + C36643 + C36644) * C47915 +
                    (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                    C36663 * C26391) *
                       C48996 * C48978 * C591 -
                   ((C36834 + C36835 + C36836) * C26391 +
                    (C36837 + C36838 + C36839) * C47925 +
                    (C36840 + C36841 + C36842) * C48905 +
                    (C36843 + C36844 + C36845) * C47915 +
                    (C48050 * C2377 + C36601 * C2388 + C48036 * C703 +
                     C49097 * C712 + C48044 * C277 + C49090 * C285) *
                        C48897 +
                    (C48050 * C2370 + C36601 * C2376 + C48036 * C697 +
                     C49097 * C702 + C48044 * C267 + C49090 * C278) *
                        C47919) *
                       C48996 * C48978 * C592 +
                   ((C48044 * C595 + C49090 * C600 + C48036 * C1463 +
                     C49097 * C1470 + C48050 * C2373 + C36601 * C2382) *
                        C47919 +
                    (C48044 * C601 + C49090 * C610 + C48036 * C1469 +
                     C49097 * C1475 + C48050 * C2383 + C36601 * C2391) *
                        C48897 +
                    (C48044 * C596 + C49090 * C602 + C48036 * C1462 +
                     C49097 * C1468 + C48050 * C2374 + C36601 * C2384) *
                        C47915 +
                    (C48044 * C603 + C49090 * C611 + C48036 * C1467 +
                     C49097 * C1474 + C48050 * C2385 + C36601 * C2392) *
                        C48905 +
                    (C48044 * C597 + C49090 * C604 + C48036 * C1461 +
                     C49097 * C1466 + C48050 * C2375 + C36601 * C2386) *
                        C47925 +
                    (C48044 * C605 + C49090 * C612 + C48036 * C1465 +
                     C49097 * C1473 + C48050 * C2387 + C36601 * C2393) *
                        C26391) *
                       C48996 * C48978 * C593) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C393 -
                    ((C37016 + C37017 + C37018) * C26391 +
                     (C37019 + C37020 + C37021) * C47925 +
                     (C37022 + C37023 + C37024) * C48905 +
                     (C37025 + C37026 + C37027) * C47915 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48897 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47919) *
                        C48996 * C49281) *
                       C525 +
                   (((C48044 * C697 + C49090 * C702 + C48036 * C2370 +
                      C49097 * C2376 + C48050 * C3354 + C36601 * C3357) *
                         C47919 +
                     (C48044 * C703 + C49090 * C712 + C48036 * C2377 +
                      C49097 * C2388 + C48050 * C3358 + C36601 * C3363) *
                         C48897 +
                     (C48044 * C698 + C49090 * C704 + C48036 * C2371 +
                      C49097 * C2378 + C48050 * C3355 + C36601 * C3359) *
                         C47915 +
                     (C48044 * C705 + C49090 * C713 + C48036 * C2379 +
                      C49097 * C2389 + C48050 * C3360 + C36601 * C3364) *
                         C48905 +
                     (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                      C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                         C47925 +
                     (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                      C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                         C26391) *
                        C48996 * C49281 -
                    ((C36834 + C36835 + C36836) * C26391 +
                     (C36837 + C36838 + C36839) * C47925 +
                     (C36840 + C36841 + C36842) * C48905 +
                     (C36843 + C36844 + C36845) * C47915 +
                     (C48050 * C2377 + C36601 * C2388 + C48036 * C703 +
                      C49097 * C712 + C48044 * C277 + C49090 * C285) *
                         C48897 +
                     (C48050 * C2370 + C36601 * C2376 + C48036 * C697 +
                      C49097 * C702 + C48044 * C267 + C49090 * C278) *
                         C47919) *
                        C48996 * C393) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C799 -
                    ((C37016 + C37017 + C37018) * C26391 +
                     (C37019 + C37020 + C37021) * C47925 +
                     (C37022 + C37023 + C37024) * C48905 +
                     (C37025 + C37026 + C37027) * C47915 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48897 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47919) *
                        C48996 * C49281) *
                       C48961 * C527 +
                   (((C37027 + C37026 + C37025) * C47919 +
                     (C37024 + C37023 + C37022) * C48897 +
                     (C37021 + C37020 + C37019) * C47915 +
                     (C37018 + C37017 + C37016) * C48905 +
                     (C48044 * C396 + C49090 * C404 + C48036 * C951 +
                      C49097 * C959 + C48050 * C2903 + C36601 * C2910) *
                         C47925 +
                     (C48044 * C403 + C49090 * C414 + C48036 * C960 +
                      C49097 * C966 + C48050 * C2911 + C36601 * C2915) *
                         C26391) *
                        C48996 * C49281 -
                    ((C36654 + C36655 + C36656) * C26391 +
                     (C36657 + C36658 + C36659) * C47925 +
                     (C36653 + C36652 + C36651) * C48905 +
                     (C36650 + C36649 + C36648) * C47915 +
                     (C36647 + C36646 + C36645) * C48897 +
                     (C36644 + C36643 + C36642) * C47919) *
                        C48996 * C799) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                      C49097 * C410 + C48050 * C948 + C36601 * C953) *
                         C47919 +
                     (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                      C49097 * C417 + C48050 * C954 + C36601 * C963) *
                         C48897 +
                     (C36642 + C36643 + C36644) * C47915 +
                     (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                     C36663 * C26391) *
                        C48996 * C799 -
                    ((C37016 + C37017 + C37018) * C26391 +
                     (C37019 + C37020 + C37021) * C47925 +
                     (C37022 + C37023 + C37024) * C48905 +
                     (C37025 + C37026 + C37027) * C47915 +
                     (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                      C49097 * C963 + C48044 * C409 + C49090 * C417) *
                         C48897 +
                     (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                      C49097 * C953 + C48044 * C399 + C49090 * C410) *
                         C47919) *
                        C48996 * C49281) *
                       C259 +
                   (((C48044 * C697 + C49090 * C702 + C48036 * C2370 +
                      C49097 * C2376 + C48050 * C3354 + C36601 * C3357) *
                         C47919 +
                     (C48044 * C703 + C49090 * C712 + C48036 * C2377 +
                      C49097 * C2388 + C48050 * C3358 + C36601 * C3363) *
                         C48897 +
                     (C48044 * C698 + C49090 * C704 + C48036 * C2371 +
                      C49097 * C2378 + C48050 * C3355 + C36601 * C3359) *
                         C47915 +
                     (C48044 * C705 + C49090 * C713 + C48036 * C2379 +
                      C49097 * C2389 + C48050 * C3360 + C36601 * C3364) *
                         C48905 +
                     (C48044 * C699 + C49090 * C706 + C48036 * C2372 +
                      C49097 * C2380 + C48050 * C3356 + C36601 * C3361) *
                         C47925 +
                     (C48044 * C707 + C49090 * C714 + C48036 * C2381 +
                      C49097 * C2390 + C48050 * C3362 + C36601 * C3365) *
                         C26391) *
                        C48996 * C49281 -
                    ((C36834 + C36835 + C36836) * C26391 +
                     (C36837 + C36838 + C36839) * C47925 +
                     (C36840 + C36841 + C36842) * C48905 +
                     (C36843 + C36844 + C36845) * C47915 +
                     (C48050 * C2377 + C36601 * C2388 + C48036 * C703 +
                      C49097 * C712 + C48044 * C277 + C49090 * C285) *
                         C48897 +
                     (C48050 * C2370 + C36601 * C2376 + C48036 * C697 +
                      C49097 * C702 + C48044 * C267 + C49090 * C278) *
                         C47919) *
                        C48996 * C799) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C48044 * C119 + C49090 * C126 + C48036 * C399 +
                     C49097 * C410 + C48050 * C948 + C36601 * C953) *
                        C47919 +
                    (C48044 * C127 + C49090 * C140 + C48036 * C409 +
                     C49097 * C417 + C48050 * C954 + C36601 * C963) *
                        C48897 +
                    (C36642 + C36643 + C36644) * C47915 +
                    (C36645 + C36646 + C36647) * C48905 + C36662 * C47925 +
                    C36663 * C26391) *
                       C48996 * C945 -
                   ((C37016 + C37017 + C37018) * C26391 +
                    (C37019 + C37020 + C37021) * C47925 +
                    (C37022 + C37023 + C37024) * C48905 +
                    (C37025 + C37026 + C37027) * C47915 +
                    (C48050 * C2908 + C36601 * C2914 + C48036 * C954 +
                     C49097 * C963 + C48044 * C409 + C49090 * C417) *
                        C48897 +
                    (C48050 * C2902 + C36601 * C2909 + C48036 * C948 +
                     C49097 * C953 + C48044 * C399 + C49090 * C410) *
                        C47919) *
                       C48996 * C946 +
                   ((C48044 * C948 + C49090 * C953 + C48036 * C2902 +
                     C49097 * C2909 + C48050 * C3768 + C36601 * C3771) *
                        C47919 +
                    (C48044 * C954 + C49090 * C963 + C48036 * C2908 +
                     C49097 * C2914 + C48050 * C3772 + C36601 * C3777) *
                        C48897 +
                    (C48044 * C949 + C49090 * C955 + C48036 * C2901 +
                     C49097 * C2907 + C48050 * C3769 + C36601 * C3773) *
                        C47915 +
                    (C48044 * C956 + C49090 * C964 + C48036 * C2906 +
                     C49097 * C2913 + C48050 * C3774 + C36601 * C3778) *
                        C48905 +
                    (C48044 * C950 + C49090 * C957 + C48036 * C2900 +
                     C49097 * C2905 + C48050 * C3770 + C36601 * C3775) *
                        C47925 +
                    (C48044 * C958 + C49090 * C965 + C48036 * C2904 +
                     C49097 * C2912 + C48050 * C3776 + C36601 * C3779) *
                        C26391) *
                       C48996 * C947) *
                  C48961 * C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C48978 * C48961 * C110 -
          ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
           (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
           (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
           (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
              C48996 * C48978 * C48961 * C111 +
          (C30903 * C22511 + C30904 * C49325 + C30905 * C22512 +
           C30906 * C49318 + (C30902 + C30901) * C22513 +
           (C30900 + C30899) * C49305 +
           (C30852 * C124 + C30850 * C137 + C30853 * C400 + C49094 * C411) *
               C22514 +
           (C30852 * C136 + C30850 * C145 + C30853 * C412 + C49094 * C418) *
               C49288) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C30852 * C267 + C30850 * C278 + C30853 * C697 + C49094 * C702) *
                C23627 +
            (C30852 * C277 + C30850 * C285 + C30853 * C703 + C49094 * C712) *
                C23621 +
            (C31072 + C31071) * C23628 + (C31070 + C31069) * C48902) *
               C49307 +
           ((C30852 * C595 + C30850 * C600 + C30853 * C1463 + C49094 * C1470) *
                C23627 +
            (C30852 * C601 + C30850 * C610 + C30853 * C1469 + C49094 * C1475) *
                C23621 +
            (C32117 + C32118) * C23628 + (C32119 + C32120) * C48902) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
            (C32120 + C32119) * C23621 + (C32118 + C32117) * C23627) *
               C49284 +
           ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
            (C31069 + C31070) * C23621 + (C31071 + C31072) * C23627) *
               C49307 +
           ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
            (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
               C49319) *
              C48978 * C48961 * C111 +
          ((C30903 * C23627 + C30904 * C23621 + C30905 * C23628 +
            C30906 * C48902) *
               C49319 +
           ((C31068 + C31067) * C23627 + (C31066 + C31065) * C23621 +
            (C31064 + C31063) * C23628 + (C31062 + C31061) * C48902) *
               C49307 +
           ((C32124 + C32123) * C23627 + (C32122 + C32121) * C23621 +
            (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
                C23628 +
            (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
                C48902) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C48978 * C259 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C31072 + C31071) * C22511 + (C31070 + C31069) * C49325 +
            (C31068 + C31067) * C22512 + (C31066 + C31065) * C49318 +
            (C31064 + C31063) * C22513 + (C31062 + C31061) * C49305 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C22514 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C48978 * C259 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C30853 * C1936 + C49094 * C1941 + C30852 * C1259 +
              C30850 * C1265) *
                 C23621 +
             (C30853 * C1932 + C49094 * C1935 + C30852 * C1253 +
              C30850 * C1260) *
                 C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C48978 * C49279) *
              C261 +
          (((C32327 * C23627 + C32328 * C23621 + (C31068 + C31067) * C23628 +
             (C31066 + C31065) * C48902) *
                C49319 +
            (C32337 * C23627 + C32338 * C23621 + (C32124 + C32123) * C23628 +
             (C32122 + C32121) * C48902) *
                C49307 +
            ((C32362 + C32361) * C23627 + (C32360 + C32359) * C23621 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C23628 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C393 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C31238 + C31237) * C22511 + (C31236 + C31235) * C49325 +
            (C31234 + C31233) * C22512 + (C31232 + C31231) * C49318 +
            (C31230 + C31229) * C22513 + (C31228 + C31227) * C49305 +
            (C30852 * C395 + C30850 * C402 + C30853 * C952 + C49094 * C961) *
                C22514 +
            (C30852 * C401 + C30850 * C413 + C30853 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C30853 * C2383 + C49094 * C2391 + C30852 * C1469 +
              C30850 * C1475) *
                 C23621 +
             (C30853 * C2373 + C49094 * C2382 + C30852 * C1463 +
              C30850 * C1470) *
                 C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C30853 * C2377 + C49094 * C2388 + C30852 * C703 + C30850 * C712) *
                 C23621 +
             (C30853 * C2370 + C49094 * C2376 + C30852 * C697 + C30850 * C702) *
                 C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C48961 * C261 +
          ((((C31238 + C31237) * C23627 + (C31236 + C31235) * C23621 +
             (C31234 + C31233) * C23628 + (C31232 + C31231) * C48902) *
                C49319 +
            ((C32580 + C32579) * C23627 + (C32578 + C32577) * C23621 +
             (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                 C23628 +
             (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                 C48902) *
                C49307 +
            ((C32576 + C32575) * C23627 + (C32574 + C32573) * C23621 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C23628 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C48978 * C525 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C31072 + C31071) * C22511 + (C31070 + C31069) * C49325 +
            (C31068 + C31067) * C22512 + (C31066 + C31065) * C49318 +
            (C31064 + C31063) * C22513 + (C31062 + C31061) * C49305 +
            (C30852 * C263 + C30850 * C270 + C30853 * C701 + C49094 * C710) *
                C22514 +
            (C30852 * C269 + C30850 * C281 + C30853 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            ((C32355 + C32356) * C23627 + (C32357 + C32358) * C23621 +
             C32337 * C23628 + C32338 * C48902) *
                C49284) *
               C48978 * C525 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C30853 * C1936 + C49094 * C1941 + C30852 * C1259 +
              C30850 * C1265) *
                 C23621 +
             (C30853 * C1932 + C49094 * C1935 + C30852 * C1253 +
              C30850 * C1260) *
                 C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C48978 * C49279) *
              C527 +
          (((C32327 * C23627 + C32328 * C23621 + (C31068 + C31067) * C23628 +
             (C31066 + C31065) * C48902) *
                C49319 +
            (C32337 * C23627 + C32338 * C23621 + (C32124 + C32123) * C23628 +
             (C32122 + C32121) * C48902) *
                C49307 +
            ((C32362 + C32361) * C23627 + (C32360 + C32359) * C23621 +
             (C30852 * C1251 + C30850 * C1256 + C30853 * C1934 +
              C49094 * C1939) *
                 C23628 +
             (C30852 * C1255 + C30850 * C1263 + C30853 * C1940 +
              C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C48978 * C591 -
          ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
           (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
           (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
           (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
               C49325 +
           (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
               C22511) *
              C48996 * C48978 * C592 +
          ((C30852 * C595 + C30850 * C600 + C30853 * C1463 + C49094 * C1470) *
               C22511 +
           (C30852 * C601 + C30850 * C610 + C30853 * C1469 + C49094 * C1475) *
               C49325 +
           (C30852 * C596 + C30850 * C602 + C30853 * C1462 + C49094 * C1468) *
               C22512 +
           (C30852 * C603 + C30850 * C611 + C30853 * C1467 + C49094 * C1474) *
               C49318 +
           (C30852 * C597 + C30850 * C604 + C30853 * C1461 + C49094 * C1466) *
               C22513 +
           (C30852 * C605 + C30850 * C612 + C30853 * C1465 + C49094 * C1473) *
               C49305 +
           (C30852 * C598 + C30850 * C606 + C30853 * C1464 + C49094 * C1471) *
               C22514 +
           (C30852 * C607 + C30850 * C613 + C30853 * C1472 + C49094 * C1476) *
               C49288) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
            C32327 * C23628 + C32328 * C48902) *
               C49307 +
           C32941 * C49284) *
              C48978 * C591 -
          (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
            (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
               C49284 +
           (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
            (C32356 + C32355) * C23627) *
               C49307 +
           (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
            (C32352 + C32351) * C23627) *
               C49319) *
              C48978 * C592 +
          (C32941 * C49319 +
           ((C32938 + C32937) * C23627 + (C32936 + C32935) * C23621 +
            (C32362 + C32361) * C23628 + (C32360 + C32359) * C48902) *
               C49307 +
           ((C30852 * C1757 + C30850 * C1760 + C30853 * C9329 +
             C49094 * C9332) *
                C23627 +
            (C30852 * C1761 + C30850 * C1766 + C30853 * C9331 +
             C49094 * C9335) *
                C23621 +
            (C30852 * C1758 + C30850 * C1762 + C30853 * C9330 +
             C49094 * C9333) *
                C23628 +
            (C30852 * C1763 + C30850 * C1767 + C30853 * C9334 +
             C49094 * C9336) *
                C48902) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C393 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C525 +
          (((C30852 * C697 + C30850 * C702 + C30853 * C2370 + C49094 * C2376) *
                C22511 +
            (C30852 * C703 + C30850 * C712 + C30853 * C2377 + C49094 * C2388) *
                C49325 +
            (C30852 * C698 + C30850 * C704 + C30853 * C2371 + C49094 * C2378) *
                C22512 +
            (C30852 * C705 + C30850 * C713 + C30853 * C2379 + C49094 * C2389) *
                C49318 +
            (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                C22513 +
            (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                C49305 +
            (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                C22514 +
            (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C393 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C525 +
          ((((C33159 + C33158) * C23627 + (C33157 + C33156) * C23621 +
             (C32580 + C32579) * C23628 + (C32578 + C32577) * C48902) *
                C49319 +
            ((C33155 + C33154) * C23627 + (C33153 + C33152) * C23621 +
             (C32576 + C32575) * C23628 + (C32574 + C32573) * C48902) *
                C49307 +
            ((C30852 * C1932 + C30850 * C1935 + C30853 * C9828 +
              C49094 * C9830) *
                 C23627 +
             (C30852 * C1936 + C30850 * C1941 + C30853 * C9831 +
              C49094 * C9834) *
                 C23621 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C799 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C31238 + C31237) * C22511 + (C31236 + C31235) * C49325 +
            (C31234 + C31233) * C22512 + (C31232 + C31231) * C49318 +
            (C31230 + C31229) * C22513 + (C31228 + C31227) * C49305 +
            (C30852 * C395 + C30850 * C402 + C30853 * C952 + C49094 * C961) *
                C22514 +
            (C30852 * C401 + C30850 * C413 + C30853 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C30899 + C30900) * C49288 + (C30901 + C30902) * C22514 +
            (C30898 + C30897) * C49305 + (C30896 + C30895) * C22513 +
            (C30894 + C30893) * C49318 + (C30892 + C30891) * C22512 +
            (C30890 + C30889) * C49325 + (C30888 + C30887) * C22511) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C48961 * C527 +
          ((((C31238 + C31237) * C23627 + (C31236 + C31235) * C23621 +
             (C31234 + C31233) * C23628 + (C31232 + C31231) * C48902) *
                C49319 +
            ((C32580 + C32579) * C23627 + (C32578 + C32577) * C23621 +
             (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                 C23628 +
             (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                 C48902) *
                C49307 +
            ((C32576 + C32575) * C23627 + (C32574 + C32573) * C23621 +
             (C30852 * C1461 + C30850 * C1466 + C30853 * C2375 +
              C49094 * C2386) *
                 C23628 +
             (C30852 * C1465 + C30850 * C1473 + C30853 * C2387 +
              C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32121 + C32122) * C48902 + (C32123 + C32124) * C23628 +
             C32347 * C23621 + C32348 * C23627) *
                C49284 +
            ((C31065 + C31066) * C48902 + (C31067 + C31068) * C23628 +
             C32349 * C23621 + C32350 * C23627) *
                C49307 +
            ((C30894 + C30893) * C48902 + (C30892 + C30891) * C23628 +
             (C30890 + C30889) * C23621 + (C30888 + C30887) * C23627) *
                C49319) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C22511 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C49325 +
            (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
            C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
            C30906 * C49288) *
               C48996 * C799 -
           ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
            (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
            (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C49325 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C22511) *
               C48996 * C49281) *
              C259 +
          (((C30852 * C697 + C30850 * C702 + C30853 * C2370 + C49094 * C2376) *
                C22511 +
            (C30852 * C703 + C30850 * C712 + C30853 * C2377 + C49094 * C2388) *
                C49325 +
            (C30852 * C698 + C30850 * C704 + C30853 * C2371 + C49094 * C2378) *
                C22512 +
            (C30852 * C705 + C30850 * C713 + C30853 * C2379 + C49094 * C2389) *
                C49318 +
            (C30852 * C699 + C30850 * C706 + C30853 * C2372 + C49094 * C2380) *
                C22513 +
            (C30852 * C707 + C30850 * C714 + C30853 * C2381 + C49094 * C2390) *
                C49305 +
            (C30852 * C700 + C30850 * C708 + C30853 * C2714 + C49094 * C2715) *
                C22514 +
            (C30852 * C709 + C30850 * C715 + C30853 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C31061 + C31062) * C49288 + (C31063 + C31064) * C22514 +
            (C31065 + C31066) * C49305 + (C31067 + C31068) * C22513 +
            (C31069 + C31070) * C49318 + (C31071 + C31072) * C22512 +
            (C30853 * C703 + C49094 * C712 + C30852 * C277 + C30850 * C285) *
                C49325 +
            (C30853 * C697 + C49094 * C702 + C30852 * C267 + C30850 * C278) *
                C22511) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                 C23627 +
             (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                 C23621 +
             (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
                C49319 +
            ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
             C32327 * C23628 + C32328 * C48902) *
                C49307 +
            C32941 * C49284) *
               C799 -
           (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
             (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
                C49284 +
            ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
             (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
                C49307 +
            ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
             (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                 C23621 +
             (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                 C23627) *
                C49319) *
               C49281) *
              C259 +
          ((((C33159 + C33158) * C23627 + (C33157 + C33156) * C23621 +
             (C32580 + C32579) * C23628 + (C32578 + C32577) * C48902) *
                C49319 +
            ((C33155 + C33154) * C23627 + (C33153 + C33152) * C23621 +
             (C32576 + C32575) * C23628 + (C32574 + C32573) * C48902) *
                C49307 +
            ((C30852 * C1932 + C30850 * C1935 + C30853 * C9828 +
              C49094 * C9830) *
                 C23627 +
             (C30852 * C1936 + C30850 * C1941 + C30853 * C9831 +
              C49094 * C9834) *
                 C23621 +
             (C30852 * C1933 + C30850 * C1937 + C30853 * C10092 +
              C49094 * C10093) *
                 C23628 +
             (C30852 * C1938 + C30850 * C1942 + C30853 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C32359 + C32360) * C48902 + (C32361 + C32362) * C23628 +
             (C32935 + C32936) * C23621 + (C32937 + C32938) * C23627) *
                C49284 +
            (C32347 * C48902 + C32348 * C23628 + (C32358 + C32357) * C23621 +
             (C32356 + C32355) * C23627) *
                C49307 +
            (C32349 * C48902 + C32350 * C23628 + (C32354 + C32353) * C23621 +
             (C32352 + C32351) * C23627) *
                C49319) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
               C22511 +
           (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
               C49325 +
           (C30887 + C30888) * C22512 + (C30889 + C30890) * C49318 +
           C30903 * C22513 + C30904 * C49305 + C30905 * C22514 +
           C30906 * C49288) *
              C48996 * C945 -
          ((C31227 + C31228) * C49288 + (C31229 + C31230) * C22514 +
           (C31231 + C31232) * C49305 + (C31233 + C31234) * C22513 +
           (C31235 + C31236) * C49318 + (C31237 + C31238) * C22512 +
           (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
               C49325 +
           (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
               C22511) *
              C48996 * C946 +
          ((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
               C22511 +
           (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
               C49325 +
           (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
               C22512 +
           (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
               C49318 +
           (C30852 * C950 + C30850 * C957 + C30853 * C2900 + C49094 * C2905) *
               C22513 +
           (C30852 * C958 + C30850 * C965 + C30853 * C2904 + C49094 * C2912) *
               C49305 +
           (C30852 * C951 + C30850 * C959 + C30853 * C2903 + C49094 * C2910) *
               C22514 +
           (C30852 * C960 + C30850 * C966 + C30853 * C2911 + C49094 * C2915) *
               C49288) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C119 + C30850 * C126 + C30853 * C399 + C49094 * C410) *
                C23627 +
            (C30852 * C127 + C30850 * C140 + C30853 * C409 + C49094 * C417) *
                C23621 +
            (C30887 + C30888) * C23628 + (C30889 + C30890) * C48902) *
               C49319 +
           ((C32351 + C32352) * C23627 + (C32353 + C32354) * C23621 +
            C32327 * C23628 + C32328 * C48902) *
               C49307 +
           C32941 * C49284) *
              C945 -
          (((C32573 + C32574) * C48902 + (C32575 + C32576) * C23628 +
            (C33152 + C33153) * C23621 + (C33154 + C33155) * C23627) *
               C49284 +
           ((C32577 + C32578) * C48902 + (C32579 + C32580) * C23628 +
            (C33156 + C33157) * C23621 + (C33158 + C33159) * C23627) *
               C49307 +
           ((C31235 + C31236) * C48902 + (C31237 + C31238) * C23628 +
            (C30853 * C954 + C49094 * C963 + C30852 * C409 + C30850 * C417) *
                C23621 +
            (C30853 * C948 + C49094 * C953 + C30852 * C399 + C30850 * C410) *
                C23627) *
               C49319) *
              C946 +
          (((C30852 * C948 + C30850 * C953 + C30853 * C2902 + C49094 * C2909) *
                C23627 +
            (C30852 * C954 + C30850 * C963 + C30853 * C2908 + C49094 * C2914) *
                C23621 +
            (C30852 * C949 + C30850 * C955 + C30853 * C2901 + C49094 * C2907) *
                C23628 +
            (C30852 * C956 + C30850 * C964 + C30853 * C2906 + C49094 * C2913) *
                C48902) *
               C49319 +
           ((C30852 * C2370 + C30850 * C2376 + C30853 * C3354 +
             C49094 * C3357) *
                C23627 +
            (C30852 * C2377 + C30850 * C2388 + C30853 * C3358 +
             C49094 * C3363) *
                C23621 +
            (C30852 * C2371 + C30850 * C2378 + C30853 * C3355 +
             C49094 * C3359) *
                C23628 +
            (C30852 * C2379 + C30850 * C2389 + C30853 * C3360 +
             C49094 * C3364) *
                C48902) *
               C49307 +
           ((C30852 * C2373 + C30850 * C2382 + C30853 * C10296 +
             C49094 * C10299) *
                C23627 +
            (C30852 * C2383 + C30850 * C2391 + C30853 * C10298 +
             C49094 * C10302) *
                C23621 +
            (C30852 * C2374 + C30850 * C2384 + C30853 * C10297 +
             C49094 * C10300) *
                C23628 +
            (C30852 * C2385 + C30850 * C2392 + C30853 * C10301 +
             C49094 * C10303) *
                C48902) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C1304 * C3884 + C1305 * C3878 + C311 * C3885 + C310 * C3879 +
            C309 * C3886 + C308 * C3880 + C307 * C3887 + C306 * C49288) *
               C49054) *
              C48978 * C48961 * C110 -
          ((C304 * C49288 + C305 * C3887 + C306 * C3880 + C307 * C3886 +
            C308 * C3879 + C309 * C3885 + C310 * C3878 + C311 * C3884) *
               C49054 +
           (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
            C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C170 * C3884 + C171 * C3878 + C172 * C3885 + C173 * C3879 +
            C174 * C3886 + C175 * C3880 + C177 * C3887 + C176 * C49288) *
               C49251 +
           (C309 * C3884 + C308 * C3878 + C307 * C3885 + C306 * C3879 +
            C305 * C3886 + C304 * C3880 +
            (C113 * C268 + C49007 * C279) * C3887 +
            (C113 * C280 + C49007 * C286) * C49288) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C1304 * C47909 + C1305 * C49229 + C311 * C47890 + C310 * C48902) *
               C11282 +
           (C1306 * C47909 + C1307 * C49229 + C1100 * C47890 + C1101 * C48902) *
               C11283 +
           (C1781 * C47909 + C1780 * C49229 + C1311 * C47890 + C1310 * C48902) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C1308 * C48902 + C1309 * C47890 + C1310 * C49229 + C1311 * C47909) *
               C49294 +
           (C1103 * C48902 + C1102 * C47890 + C1101 * C49229 + C1100 * C47909) *
               C11283 +
           (C308 * C48902 + C309 * C47890 + C310 * C49229 + C311 * C47909) *
               C11282 +
           (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
               C11281) *
              C48978 * C48961 * C111 +
          ((C170 * C47909 + C171 * C49229 + C172 * C47890 + C173 * C48902) *
               C11281 +
           (C309 * C47909 + C308 * C49229 + C307 * C47890 + C306 * C48902) *
               C11282 +
           (C1102 * C47909 + C1103 * C49229 + C1105 * C47890 + C1104 * C48902) *
               C11283 +
           (C1309 * C47909 + C1308 * C49229 +
            (C113 * C1254 + C49007 * C1261) * C47890 +
            (C113 * C1262 + C49007 * C1266) * C48902) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C48978 * C259 -
           ((C1104 * C49288 + C1105 * C3887 + C1103 * C3880 + C1102 * C3886 +
             C1101 * C3879 + C1100 * C3885 + C1307 * C3878 + C1306 * C3884) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C4027 + C4028 + C4029 + C4030 + C4031 + C4032 + C4033 + C4034) *
                C49251 +
            (C1100 * C3884 + C1101 * C3878 + C1102 * C3885 + C1103 * C3879 +
             C1105 * C3886 + C1104 * C3880 +
             (C113 * C599 + C49007 * C608) * C3887 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C48978 * C259 -
           ((C9243 * C48902 + C9242 * C47890 + C9241 * C49229 +
             C9240 * C47909) *
                C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C48978 * C49279) *
              C261 +
          (((C11430 + C11431 + C11432 + C11433) * C11281 +
            (C11434 + C11435 + C11436 + C11437) * C11282 +
            (C11438 + C11439 + C11440 + C11441) * C11283 +
            (C9242 * C47909 + C9243 * C49229 +
             (C113 * C1759 + C49007 * C1764) * C47890 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C393 -
           ((C4169 * C49288 + C4170 * C3887 + C1498 * C3880 + C1499 * C3886 +
             C1500 * C3879 + C1501 * C3885 + C1963 * C3878 + C1964 * C3884) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C48961 * C261 +
          (((C443 * C3884 + C442 * C3878 + C441 * C3885 + C440 * C3879 +
             C439 * C3886 + C438 * C3880 + C437 * C3887 + C436 * C49288) *
                C49251 +
            (C1501 * C3884 + C1500 * C3878 + C1499 * C3885 + C1498 * C3879 +
             C4170 * C3886 + C4169 * C3880 +
             (C113 * C701 + C49007 * C710) * C3887 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C393 -
           ((C11576 * C48902 + C11577 * C47890 + C9597 * C49229 +
             C9598 * C47909) *
                C49294 +
            (C1496 * C48902 + C1497 * C47890 + C1961 * C49229 +
             C1962 * C47909) *
                C11283 +
            (C1500 * C48902 + C1501 * C47890 + C1963 * C49229 +
             C1964 * C47909) *
                C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C48961 * C261 +
          (((C443 * C47909 + C442 * C49229 + C441 * C47890 + C440 * C48902) *
                C11281 +
            (C1501 * C47909 + C1500 * C49229 + C1499 * C47890 +
             C1498 * C48902) *
                C11282 +
            (C1497 * C47909 + C1496 * C49229 + C1495 * C47890 +
             C1494 * C48902) *
                C11283 +
            (C11577 * C47909 + C11576 * C49229 +
             (C113 * C1934 + C49007 * C1939) * C47890 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C48978 * C525 -
           ((C1104 * C49288 + C1105 * C3887 + C1103 * C3880 + C1102 * C3886 +
             C1101 * C3879 + C1100 * C3885 + C1307 * C3878 + C1306 * C3884) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C4027 + C4028 + C4029 + C4030 + C4031 + C4032 + C4033 + C4034) *
                C49251 +
            (C1100 * C3884 + C1101 * C3878 + C1102 * C3885 + C1103 * C3879 +
             C1105 * C3886 + C1104 * C3880 +
             (C113 * C599 + C49007 * C608) * C3887 +
             (C113 * C609 + C49007 * C614) * C49288) *
                C49054) *
               C48978 * C49279 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 +
            (C11422 + C11423 + C11424 + C11425) * C11283 +
            (C11426 + C11427 + C11428 + C11429) * C49294) *
               C48978 * C525 -
           ((C9243 * C48902 + C9242 * C47890 + C9241 * C49229 +
             C9240 * C47909) *
                C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C48978 * C49279) *
              C527 +
          (((C11430 + C11431 + C11432 + C11433) * C11281 +
            (C11434 + C11435 + C11436 + C11437) * C11282 +
            (C11438 + C11439 + C11440 + C11441) * C11283 +
            (C9242 * C47909 + C9243 * C49229 +
             (C113 * C1759 + C49007 * C1764) * C47890 +
             (C113 * C1765 + C49007 * C1768) * C48902) *
                C49294) *
               C48978 * C49279 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
               C49054) *
              C48978 * C591 -
          ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
               C49054 +
           (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
               C49251) *
              C48978 * C592 +
          ((C4406 + C4405 + C4404 + C4403 + C4402 + C4401 + C4400 + C4399) *
               C49251 +
           (C1781 * C3884 + C1780 * C3878 + C1311 * C3885 + C1310 * C3879 +
            C1309 * C3886 + C1308 * C3880 +
            (C113 * C1254 + C49007 * C1261) * C3887 +
            (C113 * C1262 + C49007 * C1266) * C49288) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
           C11815 * C49294) *
              C48978 * C591 -
          ((C11808 + C11809 + C11810 + C11811) * C49294 +
           (C11429 + C11428 + C11427 + C11426) * C11283 +
           (C11425 + C11424 + C11423 + C11422) * C11282 +
           (C11421 + C11420 + C11419 + C11418) * C11281) *
              C48978 * C592 +
          (C11814 * C11281 + C11815 * C11282 +
           (C11811 + C11810 + C11809 + C11808) * C11283 +
           (C9494 * C47909 + C9493 * C49229 +
            (C113 * C9212 + C49007 * C9215) * C47890 +
            (C113 * C9216 + C49007 * C9218) * C48902) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C393 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C525 +
          (((C4544 + C4543 + C4542 + C4541 + C4540 + C4539 + C4538 + C4537) *
                C49251 +
            (C1962 * C3884 + C1961 * C3878 + C1497 * C3885 + C1496 * C3879 +
             C1495 * C3886 + C1494 * C3880 +
             (C113 * C1464 + C49007 * C1471) * C3887 +
             (C113 * C1472 + C49007 * C1476) * C49288) *
                C49054) *
               C49281 -
           ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C393 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C525 +
          (((C11957 + C11956 + C11955 + C11954) * C11281 +
            (C11953 + C11952 + C11951 + C11950) * C11282 +
            (C11949 + C11948 + C11947 + C11946) * C11283 +
            (C9596 * C47909 + C9595 * C49229 +
             (C113 * C9330 + C49007 * C9333) * C47890 +
             (C113 * C9334 + C49007 * C9336) * C48902) *
                C49294) *
               C49281 -
           ((C11808 + C11809 + C11810 + C11811) * C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C799 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C48961 * C527 +
          (((C443 * C3884 + C442 * C3878 + C441 * C3885 + C440 * C3879 +
             C439 * C3886 + C438 * C3880 + C437 * C3887 + C436 * C49288) *
                C49251 +
            (C1501 * C3884 + C1500 * C3878 + C1499 * C3885 + C1498 * C3879 +
             C4170 * C3886 + C4169 * C3880 +
             (C113 * C701 + C49007 * C710) * C3887 +
             (C113 * C711 + C49007 * C716) * C49288) *
                C49054) *
               C49281 -
           ((C4034 + C4033 + C4032 + C4031 + C4030 + C4029 + C4028 + C4027) *
                C49054 +
            (C175 * C49288 + C174 * C3887 + C173 * C3880 + C172 * C3886 +
             C171 * C3879 + C170 * C3885 + C169 * C3878 + C168 * C3884) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C799 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C48961 * C527 +
          (((C443 * C47909 + C442 * C49229 + C441 * C47890 + C440 * C48902) *
                C11281 +
            (C1501 * C47909 + C1500 * C49229 + C1499 * C47890 +
             C1498 * C48902) *
                C11282 +
            (C1497 * C47909 + C1496 * C49229 + C1495 * C47890 +
             C1494 * C48902) *
                C11283 +
            (C11577 * C47909 + C11576 * C49229 +
             (C113 * C1934 + C49007 * C1939) * C47890 +
             (C113 * C1940 + C49007 * C1943) * C48902) *
                C49294) *
               C49281 -
           ((C11441 + C11440 + C11439 + C11438) * C49294 +
            (C11437 + C11436 + C11435 + C11434) * C11283 +
            (C11433 + C11432 + C11431 + C11430) * C11282 +
            (C171 * C48902 + C170 * C47890 + C169 * C49229 + C168 * C47909) *
                C11281) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C3884 +
             (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
             C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
             C173 * C49288) *
                C49251 +
            (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
                C49054) *
               C799 -
           ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
                C49054 +
            (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
             C442 * C3879 + C443 * C3885 +
             (C113 * C409 + C49007 * C417) * C3878 +
             (C113 * C399 + C49007 * C410) * C3884) *
                C49251) *
               C49281) *
              C259 +
          (((C4544 + C4543 + C4542 + C4541 + C4540 + C4539 + C4538 + C4537) *
                C49251 +
            (C1962 * C3884 + C1961 * C3878 + C1497 * C3885 + C1496 * C3879 +
             C1495 * C3886 + C1494 * C3880 +
             (C113 * C1464 + C49007 * C1471) * C3887 +
             (C113 * C1472 + C49007 * C1476) * C49288) *
                C49054) *
               C49281 -
           ((C4399 + C4400 + C4401 + C4402 + C4403 + C4404 + C4405 + C4406) *
                C49054 +
            (C4026 + C4025 + C4024 + C4023 + C4022 + C4021 + C4020 + C4019) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C47909 +
             (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
             C169 * C48902) *
                C11281 +
            (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
            C11815 * C49294) *
               C799 -
           ((C11946 + C11947 + C11948 + C11949) * C49294 +
            (C11950 + C11951 + C11952 + C11953) * C11283 +
            (C11954 + C11955 + C11956 + C11957) * C11282 +
            (C442 * C48902 + C443 * C47890 +
             (C113 * C409 + C49007 * C417) * C49229 +
             (C113 * C399 + C49007 * C410) * C47909) *
                C11281) *
               C49281) *
              C259 +
          (((C11957 + C11956 + C11955 + C11954) * C11281 +
            (C11953 + C11952 + C11951 + C11950) * C11282 +
            (C11949 + C11948 + C11947 + C11946) * C11283 +
            (C9596 * C47909 + C9595 * C49229 +
             (C113 * C9330 + C49007 * C9333) * C47890 +
             (C113 * C9334 + C49007 * C9336) * C48902) *
                C49294) *
               C49281 -
           ((C11808 + C11809 + C11810 + C11811) * C49294 +
            (C11429 + C11428 + C11427 + C11426) * C11283 +
            (C11425 + C11424 + C11423 + C11422) * C11282 +
            (C11421 + C11420 + C11419 + C11418) * C11281) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C3884 +
            (C113 * C127 + C49007 * C140) * C3878 + C168 * C3885 +
            C169 * C3879 + C170 * C3886 + C171 * C3880 + C172 * C3887 +
            C173 * C49288) *
               C49251 +
           (C4019 + C4020 + C4021 + C4022 + C4023 + C4024 + C4025 + C4026) *
               C49054) *
              C945 -
          ((C4537 + C4538 + C4539 + C4540 + C4541 + C4542 + C4543 + C4544) *
               C49054 +
           (C438 * C49288 + C439 * C3887 + C440 * C3880 + C441 * C3886 +
            C442 * C3879 + C443 * C3885 +
            (C113 * C409 + C49007 * C417) * C3878 +
            (C113 * C399 + C49007 * C410) * C3884) *
               C49251) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C3884 +
            (C113 * C954 + C49007 * C963) * C3878 +
            (C113 * C949 + C49007 * C955) * C3885 +
            (C113 * C956 + C49007 * C964) * C3879 +
            (C113 * C950 + C49007 * C957) * C3886 +
            (C113 * C958 + C49007 * C965) * C3880 +
            (C113 * C951 + C49007 * C959) * C3887 +
            (C113 * C960 + C49007 * C966) * C49288) *
               C49251 +
           ((C113 * C2370 + C49007 * C2376) * C3884 +
            (C113 * C2377 + C49007 * C2388) * C3878 +
            (C113 * C2371 + C49007 * C2378) * C3885 +
            (C113 * C2379 + C49007 * C2389) * C3879 +
            (C113 * C2372 + C49007 * C2380) * C3886 +
            (C113 * C2381 + C49007 * C2390) * C3880 +
            (C113 * C2714 + C49007 * C2715) * C3887 +
            (C113 * C2716 + C49007 * C2717) * C49288) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C47909 +
            (C113 * C127 + C49007 * C140) * C49229 + C168 * C47890 +
            C169 * C48902) *
               C11281 +
           (C11418 + C11419 + C11420 + C11421) * C11282 + C11814 * C11283 +
           C11815 * C49294) *
              C945 -
          ((C11946 + C11947 + C11948 + C11949) * C49294 +
           (C11950 + C11951 + C11952 + C11953) * C11283 +
           (C11954 + C11955 + C11956 + C11957) * C11282 +
           (C442 * C48902 + C443 * C47890 +
            (C113 * C409 + C49007 * C417) * C49229 +
            (C113 * C399 + C49007 * C410) * C47909) *
               C11281) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C47909 +
            (C113 * C954 + C49007 * C963) * C49229 +
            (C113 * C949 + C49007 * C955) * C47890 +
            (C113 * C956 + C49007 * C964) * C48902) *
               C11281 +
           ((C113 * C2370 + C49007 * C2376) * C47909 +
            (C113 * C2377 + C49007 * C2388) * C49229 +
            (C113 * C2371 + C49007 * C2378) * C47890 +
            (C113 * C2379 + C49007 * C2389) * C48902) *
               C11282 +
           ((C113 * C2373 + C49007 * C2382) * C47909 +
            (C113 * C2383 + C49007 * C2391) * C49229 +
            (C113 * C2374 + C49007 * C2384) * C47890 +
            (C113 * C2385 + C49007 * C2392) * C48902) *
               C11283 +
           ((C113 * C9828 + C49007 * C9830) * C47909 +
            (C113 * C9831 + C49007 * C9834) * C49229 +
            (C113 * C10092 + C49007 * C10093) * C47890 +
            (C113 * C10094 + C49007 * C10095) * C48902) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C5002 * C267 + C49252 * C278 + C5003 * C697 + C49094 * C702) *
                C1084 +
            (C5002 * C277 + C49252 * C285 + C5003 * C703 + C49094 * C712) *
                C1078 +
            (C5222 + C5221) * C1085 + (C5220 + C5219) * C1079 + C6251 * C1086 +
            C6252 * C49271) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
            (C5215 + C5216) * C1079 + (C5217 + C5218) * C1085 +
            (C5219 + C5220) * C1078 + (C5221 + C5222) * C1084) *
               C49054 +
           ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
            (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
            (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
               C49251) *
              C48978 * C48961 * C111 +
          ((C5053 * C1084 + C5054 * C1078 + C5055 * C1085 + C5056 * C1079 +
            (C5052 + C5051) * C1086 + (C5050 + C5049) * C49271) *
               C49251 +
           (C6251 * C1084 + C6252 * C1078 + (C5214 + C5213) * C1085 +
            (C5212 + C5211) * C1079 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C1086 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49271) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           (C13218 * C9128 + C13219 * C48892) * C11283 +
           ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
              C48978 * C48961 * C110 -
          (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
           (C12666 * C48892 + C12667 * C9128) * C11283 +
           (C6475 * C48892 + C6476 * C9128) * C11282 +
           ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
              C48978 * C48961 * C111 +
          ((C5053 * C9128 + C5054 * C48892) * C11281 +
           (C6251 * C9128 + C6252 * C48892) * C11282 +
           ((C6484 + C6483) * C9128 + (C6482 + C6481) * C48892) * C11283 +
           ((C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                C9128 +
            (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                C48892) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C48978 * C259 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C5003 * C1469 + C49094 * C1475 + C5002 * C601 + C49252 * C610) *
                 C1078 +
             (C5003 * C1463 + C49094 * C1470 + C5002 * C595 + C49252 * C600) *
                 C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C1084 + C6456 * C1078 + C6251 * C1085 + C6252 * C1079 +
             (C5214 + C5213) * C1086 + (C5212 + C5211) * C49271) *
                C49251 +
            ((C6488 + C6487) * C1084 + (C6486 + C6485) * C1078 +
             (C6484 + C6483) * C1085 + (C6482 + C6481) * C1079 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C1086 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C48978 * C259 -
           (((C5003 * C9331 + C49094 * C9335 + C5002 * C1761 + C49252 * C1766) *
                 C48892 +
             (C5003 * C9329 + C49094 * C9332 + C5002 * C1757 + C49252 * C1760) *
                 C9128) *
                C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C9128 + C6456 * C48892) * C11281 +
            (C12656 * C9128 + C12657 * C48892) * C11282 +
            ((C12671 + C12670) * C9128 + (C12669 + C12668) * C48892) * C11283 +
            ((C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                 C9128 +
             (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C5003 * C2377 + C49094 * C2388 + C5002 * C703 + C49252 * C712) *
                 C1078 +
             (C5003 * C2370 + C49094 * C2376 + C5002 * C697 + C49252 * C702) *
                 C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C1084 + (C5386 + C5385) * C1078 +
             (C5384 + C5383) * C1085 + (C5382 + C5381) * C1079 +
             (C5380 + C5379) * C1086 + (C5378 + C5377) * C49271) *
                C49251 +
            ((C6706 + C6705) * C1084 + (C6704 + C6703) * C1078 +
             (C6702 + C6701) * C1085 + (C6700 + C6699) * C1079 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C1086 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C393 -
           (((C5003 * C9831 + C49094 * C9834 + C5002 * C1936 + C49252 * C1941) *
                 C48892 +
             (C5003 * C9828 + C49094 * C9830 + C5002 * C1932 + C49252 * C1935) *
                 C9128) *
                C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C9128 + (C5386 + C5385) * C48892) * C11281 +
            ((C6706 + C6705) * C9128 + (C6704 + C6703) * C48892) * C11282 +
            ((C12877 + C12876) * C9128 + (C12875 + C12874) * C48892) * C11283 +
            ((C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C48978 * C525 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C5003 * C1469 + C49094 * C1475 + C5002 * C601 + C49252 * C610) *
                 C1078 +
             (C5003 * C1463 + C49094 * C1470 + C5002 * C595 + C49252 * C600) *
                 C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C1084 + C6456 * C1078 + C6251 * C1085 + C6252 * C1079 +
             (C5214 + C5213) * C1086 + (C5212 + C5211) * C49271) *
                C49251 +
            ((C6488 + C6487) * C1084 + (C6486 + C6485) * C1078 +
             (C6484 + C6483) * C1085 + (C6482 + C6481) * C1079 +
             (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                 C1086 +
             (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                 C49271) *
                C49054) *
               C48978 * C49279 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            (C13218 * C9128 + C13219 * C48892) * C11283 +
            ((C13235 + C13234) * C9128 + (C13233 + C13232) * C48892) * C49294) *
               C48978 * C525 -
           (((C5003 * C9331 + C49094 * C9335 + C5002 * C1761 + C49252 * C1766) *
                 C48892 +
             (C5003 * C9329 + C49094 * C9332 + C5002 * C1757 + C49252 * C1760) *
                 C9128) *
                C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C9128 + C6456 * C48892) * C11281 +
            (C12656 * C9128 + C12657 * C48892) * C11282 +
            ((C12671 + C12670) * C9128 + (C12669 + C12668) * C48892) * C11283 +
            ((C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                 C9128 +
             (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                 C48892) *
                C49294) *
               C48978 * C49279 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
            C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
               C49054) *
              C48978 * C591 -
          (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
            (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
            (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
               C49054 +
           (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
            (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
               C49251) *
              C48978 * C592 +
          (((C7058 + C7057) * C1084 + (C7056 + C7055) * C1078 +
            (C6488 + C6487) * C1085 + (C6486 + C6485) * C1079 +
            (C6484 + C6483) * C1086 + (C6482 + C6481) * C49271) *
               C49251 +
           ((C5002 * C1253 + C49252 * C1260 + C5003 * C1932 + C49094 * C1935) *
                C1084 +
            (C5002 * C1259 + C49252 * C1265 + C5003 * C1936 + C49094 * C1941) *
                C1078 +
            (C5002 * C1252 + C49252 * C1258 + C5003 * C1933 + C49094 * C1937) *
                C1085 +
            (C5002 * C1257 + C49252 * C1264 + C5003 * C1938 + C49094 * C1942) *
                C1079 +
            (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                C1086 +
            (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                C49271) *
               C49054) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           C14577 * C11283 + C14584 * C49294) *
              C48978 * C591 -
          (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
           ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
           ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
           ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
              C48978 * C592 +
          (C14577 * C11281 + C14584 * C11282 +
           ((C14583 + C14582) * C9128 + (C14581 + C14580) * C48892) * C11283 +
           ((C5002 * C9211 + C49252 * C9214 + C5003 * C9578 + C49094 * C9579) *
                C9128 +
            (C5002 * C9213 + C49252 * C9217 + C5003 * C9580 + C49094 * C9581) *
                C48892) *
               C49294) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C393 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C1084 + (C7262 + C7261) * C1078 +
             (C6706 + C6705) * C1085 + (C6704 + C6703) * C1079 +
             (C6702 + C6701) * C1086 + (C6700 + C6699) * C49271) *
                C49251 +
            ((C5002 * C1463 + C49252 * C1470 + C5003 * C2373 + C49094 * C2382) *
                 C1084 +
             (C5002 * C1469 + C49252 * C1475 + C5003 * C2383 + C49094 * C2391) *
                 C1078 +
             (C5002 * C1462 + C49252 * C1468 + C5003 * C2374 + C49094 * C2384) *
                 C1085 +
             (C5002 * C1467 + C49252 * C1474 + C5003 * C2385 + C49094 * C2392) *
                 C1079 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C1086 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C393 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C9128 + (C7262 + C7261) * C48892) * C11281 +
            ((C13444 + C13443) * C9128 + (C13442 + C13441) * C48892) * C11282 +
            ((C14726 + C14725) * C9128 + (C14724 + C14723) * C48892) * C11283 +
            ((C5002 * C9329 + C49252 * C9332 + C5003 * C9829 + C49094 * C9832) *
                 C9128 +
             (C5002 * C9331 + C49252 * C9335 + C5003 * C9833 + C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C1084 + (C5386 + C5385) * C1078 +
             (C5384 + C5383) * C1085 + (C5382 + C5381) * C1079 +
             (C5380 + C5379) * C1086 + (C5378 + C5377) * C49271) *
                C49251 +
            ((C6706 + C6705) * C1084 + (C6704 + C6703) * C1078 +
             (C6702 + C6701) * C1085 + (C6700 + C6699) * C1079 +
             (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                 C1086 +
             (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                 C49271) *
                C49054) *
               C49281 -
           (((C5211 + C5212) * C49271 + (C5213 + C5214) * C1086 +
             C6473 * C1079 + C6474 * C1085 + C6475 * C1078 + C6476 * C1084) *
                C49054 +
            ((C5048 + C5047) * C49271 + (C5046 + C5045) * C1086 +
             (C5044 + C5043) * C1079 + (C5042 + C5041) * C1085 +
             (C5040 + C5039) * C1078 + (C5038 + C5037) * C1084) *
                C49251) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C799 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C9128 + (C5386 + C5385) * C48892) * C11281 +
            ((C6706 + C6705) * C9128 + (C6704 + C6703) * C48892) * C11282 +
            ((C12877 + C12876) * C9128 + (C12875 + C12874) * C48892) * C11283 +
            ((C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C9128 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48892) *
                C49294) *
               C49281 -
           (((C12668 + C12669) * C48892 + (C12670 + C12671) * C9128) * C49294 +
            (C12666 * C48892 + C12667 * C9128) * C11283 +
            (C6475 * C48892 + C6476 * C9128) * C11282 +
            ((C5040 + C5039) * C48892 + (C5038 + C5037) * C9128) * C11281) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C1084 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C1078 +
             (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
             C5054 * C49271) *
                C49251 +
            ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
             C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
                C49054) *
               C799 -
           (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
             (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
             (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
                C49054 +
            ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
             (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C1078 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C1084) *
                C49251) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C1084 + (C7262 + C7261) * C1078 +
             (C6706 + C6705) * C1085 + (C6704 + C6703) * C1079 +
             (C6702 + C6701) * C1086 + (C6700 + C6699) * C49271) *
                C49251 +
            ((C5002 * C1463 + C49252 * C1470 + C5003 * C2373 + C49094 * C2382) *
                 C1084 +
             (C5002 * C1469 + C49252 * C1475 + C5003 * C2383 + C49094 * C2391) *
                 C1078 +
             (C5002 * C1462 + C49252 * C1468 + C5003 * C2374 + C49094 * C2384) *
                 C1085 +
             (C5002 * C1467 + C49252 * C1474 + C5003 * C2385 + C49094 * C2392) *
                 C1079 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C1086 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C49271) *
                C49054) *
               C49281 -
           (((C6481 + C6482) * C49271 + (C6483 + C6484) * C1086 +
             (C6485 + C6486) * C1079 + (C6487 + C6488) * C1085 +
             (C7055 + C7056) * C1078 + (C7057 + C7058) * C1084) *
                C49054 +
            (C6473 * C49271 + C6474 * C1086 + C6475 * C1079 + C6476 * C1085 +
             (C6480 + C6479) * C1078 + (C6478 + C6477) * C1084) *
                C49251) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C9128 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C48892) *
                C11281 +
            ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
            C14577 * C11283 + C14584 * C49294) *
               C799 -
           (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
            ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
            ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
            ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C48892 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C9128) *
                C11281) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C9128 + (C7262 + C7261) * C48892) * C11281 +
            ((C13444 + C13443) * C9128 + (C13442 + C13441) * C48892) * C11282 +
            ((C14726 + C14725) * C9128 + (C14724 + C14723) * C48892) * C11283 +
            ((C5002 * C9329 + C49252 * C9332 + C5003 * C9829 + C49094 * C9832) *
                 C9128 +
             (C5002 * C9331 + C49252 * C9335 + C5003 * C9833 + C49094 * C9835) *
                 C48892) *
                C49294) *
               C49281 -
           (((C14580 + C14581) * C48892 + (C14582 + C14583) * C9128) * C49294 +
            ((C13232 + C13233) * C48892 + (C13234 + C13235) * C9128) * C11283 +
            ((C7055 + C7056) * C48892 + (C7057 + C7058) * C9128) * C11282 +
            ((C6480 + C6479) * C48892 + (C6478 + C6477) * C9128) * C11281) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C1084 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C1078 +
            (C5037 + C5038) * C1085 + (C5039 + C5040) * C1079 + C5053 * C1086 +
            C5054 * C49271) *
               C49251 +
           ((C6477 + C6478) * C1084 + (C6479 + C6480) * C1078 + C6455 * C1085 +
            C6456 * C1079 + C6251 * C1086 + C6252 * C49271) *
               C49054) *
              C945 -
          (((C6699 + C6700) * C49271 + (C6701 + C6702) * C1086 +
            (C6703 + C6704) * C1079 + (C6705 + C6706) * C1085 +
            (C7261 + C7262) * C1078 + (C7263 + C7264) * C1084) *
               C49054 +
           ((C5381 + C5382) * C49271 + (C5383 + C5384) * C1086 +
            (C5385 + C5386) * C1079 + (C5387 + C5388) * C1085 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C1078 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C1084) *
               C49251) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C1084 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C1078 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C1085 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C1079 +
            (C5002 * C950 + C49252 * C957 + C5003 * C2900 + C49094 * C2905) *
                C1086 +
            (C5002 * C958 + C49252 * C965 + C5003 * C2904 + C49094 * C2912) *
                C49271) *
               C49251 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C1084 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C1078 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C1085 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C1079 +
            (C5002 * C2372 + C49252 * C2380 + C5003 * C3356 + C49094 * C3361) *
                C1086 +
            (C5002 * C2381 + C49252 * C2390 + C5003 * C3362 + C49094 * C3365) *
                C49271) *
               C49054) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C9128 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C48892) *
               C11281 +
           ((C6477 + C6478) * C9128 + (C6479 + C6480) * C48892) * C11282 +
           C14577 * C11283 + C14584 * C49294) *
              C945 -
          (((C14723 + C14724) * C48892 + (C14725 + C14726) * C9128) * C49294 +
           ((C13441 + C13442) * C48892 + (C13443 + C13444) * C9128) * C11283 +
           ((C7261 + C7262) * C48892 + (C7263 + C7264) * C9128) * C11282 +
           ((C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C48892 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C9128) *
               C11281) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C9128 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C48892) *
               C11281 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C9128 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C48892) *
               C11282 +
           ((C5002 * C2373 + C49252 * C2382 + C5003 * C10296 +
             C49094 * C10299) *
                C9128 +
            (C5002 * C2383 + C49252 * C2391 + C5003 * C10298 +
             C49094 * C10302) *
                C48892) *
               C11283 +
           ((C5002 * C9828 + C49252 * C9830 + C5003 * C10731 +
             C49094 * C10732) *
                C9128 +
            (C5002 * C9831 + C49252 * C9834 + C5003 * C10733 +
             C49094 * C10734) *
                C48892) *
               C49294) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C1084 +
            (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
            C169 * C1079 + C170 * C1086 + C171 * C49271) *
               C49319 +
           ((C113 * C267 + C49007 * C278) * C1084 +
            (C113 * C277 + C49007 * C285) * C1078 + C311 * C1085 +
            C310 * C1079 + C309 * C1086 + C308 * C49271) *
               C49307 +
           ((C113 * C595 + C49007 * C600) * C1084 +
            (C113 * C601 + C49007 * C610) * C1078 + C1100 * C1085 +
            C1101 * C1079 + C1102 * C1086 + C1103 * C49271) *
               C49284) *
              C48978 * C48961 * C110 -
          ((C1104 * C49271 + C1105 * C1086 + C1103 * C1079 + C1102 * C1085 +
            C1101 * C1078 + C1100 * C1084) *
               C49284 +
           (C306 * C49271 + C307 * C1086 + C308 * C1079 + C309 * C1085 +
            C310 * C1078 + C311 * C1084) *
               C49307 +
           (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
            C169 * C1078 + C168 * C1084) *
               C49319) *
              C48978 * C48961 * C111 +
          ((C170 * C1084 + C171 * C1078 + C172 * C1085 + C173 * C1079 +
            C174 * C1086 + C175 * C49271) *
               C49319 +
           (C309 * C1084 + C308 * C1078 + C307 * C1085 + C306 * C1079 +
            C305 * C1086 + C304 * C49271) *
               C49307 +
           (C1102 * C1084 + C1103 * C1078 + C1105 * C1085 + C1104 * C1079 +
            (C113 * C599 + C49007 * C608) * C1086 +
            (C113 * C609 + C49007 * C614) * C49271) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C49007 * C126) * C114 +
           (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48996 * C48978 * C48961 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C48996 * C48978 * C48961 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C49007 * C138) * C118 +
           (C113 * C139 + C49007 * C146) * C106) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C48978 * C48961 * C110 -
          ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
           (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
           (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
              C48996 * C48978 * C48961 * C111 +
          (C2567 * C1084 + C2568 * C1078 + (C2564 + C2563 + C2562) * C1085 +
           (C2561 + C2560 + C2559) * C1079 +
           (C2507 * C123 + C49320 * C134 + C2508 * C395 + C49309 * C402 +
            C2509 * C952 + C49287 * C961) *
               C1086 +
           (C2507 * C135 + C49320 * C144 + C2508 * C401 + C49309 * C413 +
            C2509 * C962 + C49287 * C967) *
               C49271) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C1304 * C7914 + C1305 * C49316 + C311 * C7915 + C310 * C49303 +
            C309 * C7916 + C308 * C49271) *
               C7912 +
           (C1306 * C7914 + C1307 * C49316 + C1100 * C7915 + C1101 * C49303 +
            C1102 * C7916 + C1103 * C49271) *
               C49284) *
              C48978 * C48961 * C110 -
          ((C1104 * C49271 + C1105 * C7916 + C1103 * C49303 + C1102 * C7915 +
            C1101 * C49316 + C1100 * C7914) *
               C49284 +
           (C306 * C49271 + C307 * C7916 + C308 * C49303 + C309 * C7915 +
            C310 * C49316 + C311 * C7914) *
               C7912 +
           (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
            C169 * C49316 + C168 * C7914) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C170 * C7914 + C171 * C49316 + C172 * C7915 + C173 * C49303 +
            C174 * C7916 + C175 * C49271) *
               C7911 +
           (C309 * C7914 + C308 * C49316 + C307 * C7915 + C306 * C49303 +
            C305 * C7916 + C304 * C49271) *
               C7912 +
           (C1102 * C7914 + C1103 * C49316 + C1105 * C7915 + C1104 * C49303 +
            (C113 * C599 + C49007 * C608) * C7916 +
            (C113 * C609 + C49007 * C614) * C49271) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C1304 * C9128 + C1305 * C48892) * C9124 +
           (C1306 * C9128 + C1307 * C48892) * C9125 +
           (C1781 * C9128 + C1780 * C48892) * C9126 +
           ((C113 * C1757 + C49007 * C1760) * C9128 +
            (C113 * C1761 + C49007 * C1766) * C48892) *
               C9127) *
              C48978 * C48961 * C110 -
          (((C113 * C1763 + C49007 * C1767) * C48892 +
            (C113 * C1758 + C49007 * C1762) * C9128) *
               C9127 +
           (C1310 * C48892 + C1311 * C9128) * C9126 +
           (C1101 * C48892 + C1100 * C9128) * C9125 +
           (C310 * C48892 + C311 * C9128) * C9124 +
           (C169 * C48892 + C168 * C9128) * C9123) *
              C48978 * C48961 * C111 +
          ((C170 * C9128 + C171 * C48892) * C9123 +
           (C309 * C9128 + C308 * C48892) * C9124 +
           (C1102 * C9128 + C1103 * C48892) * C9125 +
           (C1309 * C9128 + C1308 * C48892) * C9126 +
           ((C113 * C1759 + C49007 * C1764) * C9128 +
            (C113 * C1765 + C49007 * C1768) * C48892) *
               C9127) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C2507 * C267 + C49320 * C278 + C2508 * C697 + C49309 * C702 +
             C2509 * C2370 + C49287 * C2376) *
                C9128 +
            (C2507 * C277 + C49320 * C285 + C2508 * C703 + C49309 * C712 +
             C2509 * C2377 + C49287 * C2388) *
                C48892) *
               C7912 +
           ((C2507 * C595 + C49320 * C600 + C2508 * C1463 + C49309 * C1470 +
             C2509 * C2373 + C49287 * C2382) *
                C9128 +
            (C2507 * C601 + C49320 * C610 + C2508 * C1469 + C49309 * C1475 +
             C2509 * C2383 + C49287 * C2391) *
                C48892) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C2509 * C2385 + C49287 * C2392 + C2508 * C1467 + C49309 * C1474 +
             C2507 * C603 + C49320 * C611) *
                C48892 +
            (C2509 * C2374 + C49287 * C2384 + C2508 * C1462 + C49309 * C1468 +
             C2507 * C596 + C49320 * C602) *
                C9128) *
               C49284 +
           ((C2749 + C2750 + C2751) * C48892 +
            (C2752 + C2753 + C2754) * C9128) *
               C7912 +
           ((C2552 + C2551 + C2550) * C48892 +
            (C2549 + C2548 + C2547) * C9128) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C2567 * C9128 + C2568 * C48892) * C7911 +
           ((C2748 + C2747 + C2746) * C9128 +
            (C2745 + C2744 + C2743) * C48892) *
               C7912 +
           ((C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
             C2509 * C2375 + C49287 * C2386) *
                C9128 +
            (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
             C2509 * C2387 + C49287 * C2393) *
                C48892) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
               C48978 * C259 -
           ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 + C1311 * C1085 +
             (C113 * C1259 + C49007 * C1265) * C1078 +
             (C113 * C1253 + C49007 * C1260) * C1084) *
                C49284 +
            (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
            (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
               C48978 * C49279) *
              C261 +
          (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
            (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
            (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 + C1308 * C1079 +
             (C113 * C1254 + C49007 * C1261) * C1086 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
            (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
            (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
             C169 * C1078 + C168 * C1084) *
                C49319) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C48978 * C259 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C49007 * C285) * C102 +
            (C113 * C267 + C49007 * C278) * C114) *
               C48996 * C48978 * C49279) *
              C261 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C49007 * C279) * C118 +
            (C113 * C280 + C49007 * C286) * C106) *
               C48996 * C48978 * C49279 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C48978 * C259 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C2754 + C2753 + C2752) * C1084 + (C2751 + C2750 + C2749) * C1078 +
            (C2748 + C2747 + C2746) * C1085 + (C2745 + C2744 + C2743) * C1079 +
            (C2507 * C264 + C49320 * C272 + C2508 * C700 + C49309 * C708 +
             C2509 * C2714 + C49287 * C2715) *
                C1086 +
            (C2507 * C271 + C49320 * C282 + C2508 * C709 + C49309 * C715 +
             C2509 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C48978 * C259 -
           ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 + C1311 * C7915 +
             C1780 * C49316 + C1781 * C7914) *
                C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C48978 * C49279) *
              C261 +
          (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
            (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
            (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 + C1308 * C49303 +
             (C113 * C1254 + C49007 * C1261) * C7916 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C48978 * C259 -
           (((C113 * C9213 + C49007 * C9217) * C48892 +
             (C113 * C9211 + C49007 * C9214) * C9128) *
                C9127 +
            (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
            (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
               C48978 * C49279) *
              C261 +
          (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
            (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
            ((C113 * C9212 + C49007 * C9215) * C9128 +
             (C113 * C9216 + C49007 * C9218) * C48892) *
                C9127) *
               C48978 * C49279 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C48978 * C259 -
           (((C2509 * C9831 + C49287 * C9834 + C2508 * C1936 + C49309 * C1941 +
              C2507 * C1259 + C49320 * C1265) *
                 C48892 +
             (C2509 * C9828 + C49287 * C9830 + C2508 * C1932 + C49309 * C1935 +
              C2507 * C1253 + C49320 * C1260) *
                 C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C48978 * C49279) *
              C261 +
          ((((C2754 + C2753 + C2752) * C9128 +
             (C2751 + C2750 + C2749) * C48892) *
                C7911 +
            ((C10145 + C10146 + C10147) * C9128 +
             (C10148 + C10149 + C10150) * C48892) *
                C7912 +
            ((C2507 * C1252 + C49320 * C1258 + C2508 * C1933 + C49309 * C1937 +
              C2509 * C10092 + C49287 * C10093) *
                 C9128 +
             (C2507 * C1257 + C49320 * C1264 + C2508 * C1938 + C49309 * C1942 +
              C2509 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
               C393 -
           ((C1494 * C49271 + C1495 * C1086 + C1496 * C1079 + C1497 * C1085 +
             (C113 * C1469 + C49007 * C1475) * C1078 +
             (C113 * C1463 + C49007 * C1470) * C1084) *
                C49284 +
            (C1498 * C49271 + C1499 * C1086 + C1500 * C1079 + C1501 * C1085 +
             (C113 * C703 + C49007 * C712) * C1078 +
             (C113 * C697 + C49007 * C702) * C1084) *
                C49307 +
            (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
             (C113 * C409 + C49007 * C417) * C1078 +
             (C113 * C399 + C49007 * C410) * C1084) *
                C49319) *
               C49281) *
              C48961 * C261 +
          (((C443 * C1084 + C442 * C1078 + C441 * C1085 + C440 * C1079 +
             C439 * C1086 + C438 * C49271) *
                C49319 +
            (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 + C1498 * C1079 +
             (C113 * C700 + C49007 * C708) * C1086 +
             (C113 * C709 + C49007 * C715) * C49271) *
                C49307 +
            (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 + C1494 * C1079 +
             (C113 * C1464 + C49007 * C1471) * C1086 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
            (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
            (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
             C169 * C1078 + C168 * C1084) *
                C49319) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C49007 * C417) * C102 +
            (C113 * C399 + C49007 * C410) * C114) *
               C48996 * C49281) *
              C48961 * C261 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C49007 * C411) * C118 +
            (C113 * C412 + C49007 * C418) * C106) *
               C48996 * C49281 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C393 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C2952 + C2951 + C2950) * C1084 + (C2949 + C2948 + C2947) * C1078 +
            (C2946 + C2945 + C2944) * C1085 + (C2943 + C2942 + C2941) * C1079 +
            (C2507 * C396 + C49320 * C404 + C2508 * C951 + C49309 * C959 +
             C2509 * C2903 + C49287 * C2910) *
                C1086 +
            (C2507 * C403 + C49320 * C414 + C2508 * C960 + C49309 * C966 +
             C2509 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C393 -
           ((C1494 * C49271 + C1495 * C7916 + C1496 * C49303 + C1497 * C7915 +
             C1961 * C49316 + C1962 * C7914) *
                C49284 +
            (C1498 * C49271 + C1499 * C7916 + C1500 * C49303 + C1501 * C7915 +
             C1963 * C49316 + C1964 * C7914) *
                C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C48961 * C261 +
          (((C443 * C7914 + C442 * C49316 + C441 * C7915 + C440 * C49303 +
             C439 * C7916 + C438 * C49271) *
                C7911 +
            (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 + C1498 * C49303 +
             C4170 * C7916 + C4169 * C49271) *
                C7912 +
            (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 + C1494 * C49303 +
             (C113 * C1464 + C49007 * C1471) * C7916 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C393 -
           (((C113 * C9331 + C49007 * C9335) * C48892 +
             (C113 * C9329 + C49007 * C9332) * C9128) *
                C9127 +
            ((C113 * C1936 + C49007 * C1941) * C48892 +
             (C113 * C1932 + C49007 * C1935) * C9128) *
                C9126 +
            (C1961 * C48892 + C1962 * C9128) * C9125 +
            (C1963 * C48892 + C1964 * C9128) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C48961 * C261 +
          (((C443 * C9128 + C442 * C48892) * C9123 +
            (C1501 * C9128 + C1500 * C48892) * C9124 +
            (C1497 * C9128 + C1496 * C48892) * C9125 +
            ((C113 * C1933 + C49007 * C1937) * C9128 +
             (C113 * C1938 + C49007 * C1942) * C48892) *
                C9126 +
            ((C113 * C9330 + C49007 * C9333) * C9128 +
             (C113 * C9334 + C49007 * C9336) * C48892) *
                C9127) *
               C49281 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C393 -
           (((C2509 * C10298 + C49287 * C10302 + C2508 * C2383 +
              C49309 * C2391 + C2507 * C1469 + C49320 * C1475) *
                 C48892 +
             (C2509 * C10296 + C49287 * C10299 + C2508 * C2373 +
              C49309 * C2382 + C2507 * C1463 + C49320 * C1470) *
                 C9128) *
                C49284 +
            ((C2509 * C3358 + C49287 * C3363 + C2508 * C2377 + C49309 * C2388 +
              C2507 * C703 + C49320 * C712) *
                 C48892 +
             (C2509 * C3354 + C49287 * C3357 + C2508 * C2370 + C49309 * C2376 +
              C2507 * C697 + C49320 * C702) *
                 C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C48961 * C261 +
          ((((C2952 + C2951 + C2950) * C9128 +
             (C2949 + C2948 + C2947) * C48892) *
                C7911 +
            ((C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
              C2509 * C3355 + C49287 * C3359) *
                 C9128 +
             (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
              C2509 * C3360 + C49287 * C3364) *
                 C48892) *
                C7912 +
            ((C2507 * C1462 + C49320 * C1468 + C2508 * C2374 + C49309 * C2384 +
              C2509 * C10297 + C49287 * C10300) *
                 C9128 +
             (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 + C49309 * C2392 +
              C2509 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
               C48978 * C525 -
           ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 + C1311 * C1085 +
             (C113 * C1259 + C49007 * C1265) * C1078 +
             (C113 * C1253 + C49007 * C1260) * C1084) *
                C49284 +
            (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
            (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
               C48978 * C49279) *
              C527 +
          (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
            (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
            (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 + C1308 * C1079 +
             (C113 * C1254 + C49007 * C1261) * C1086 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
            (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
            (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
             C169 * C1078 + C168 * C1084) *
                C49319) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C48978 * C525 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C49007 * C285) * C102 +
            (C113 * C267 + C49007 * C278) * C114) *
               C48996 * C48978 * C49279) *
              C527 +
          ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
            C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
            (C113 * C268 + C49007 * C279) * C118 +
            (C113 * C280 + C49007 * C286) * C106) *
               C48996 * C48978 * C49279 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C48978 * C525 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C2754 + C2753 + C2752) * C1084 + (C2751 + C2750 + C2749) * C1078 +
            (C2748 + C2747 + C2746) * C1085 + (C2745 + C2744 + C2743) * C1079 +
            (C2507 * C264 + C49320 * C272 + C2508 * C700 + C49309 * C708 +
             C2509 * C2714 + C49287 * C2715) *
                C1086 +
            (C2507 * C271 + C49320 * C282 + C2508 * C709 + C49309 * C715 +
             C2509 * C2716 + C49287 * C2717) *
                C49271) *
               C48996 * C48978 * C49279 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
               C48978 * C525 -
           ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 + C1311 * C7915 +
             C1780 * C49316 + C1781 * C7914) *
                C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C48978 * C49279) *
              C527 +
          (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
            (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
            (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 + C1308 * C49303 +
             (C113 * C1254 + C49007 * C1261) * C7916 +
             (C113 * C1262 + C49007 * C1266) * C49271) *
                C49284) *
               C48978 * C49279 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
            (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
               C48978 * C525 -
           (((C113 * C9213 + C49007 * C9217) * C48892 +
             (C113 * C9211 + C49007 * C9214) * C9128) *
                C9127 +
            (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
            (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
               C48978 * C49279) *
              C527 +
          (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
            (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
            ((C113 * C9212 + C49007 * C9215) * C9128 +
             (C113 * C9216 + C49007 * C9218) * C48892) *
                C9127) *
               C48978 * C49279 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            ((C10139 + C10140 + C10141) * C9128 +
             (C10142 + C10143 + C10144) * C48892) *
                C49284) *
               C48978 * C525 -
           (((C2509 * C9831 + C49287 * C9834 + C2508 * C1936 + C49309 * C1941 +
              C2507 * C1259 + C49320 * C1265) *
                 C48892 +
             (C2509 * C9828 + C49287 * C9830 + C2508 * C1932 + C49309 * C1935 +
              C2507 * C1253 + C49320 * C1260) *
                 C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C48978 * C49279) *
              C527 +
          ((((C2754 + C2753 + C2752) * C9128 +
             (C2751 + C2750 + C2749) * C48892) *
                C7911 +
            ((C10145 + C10146 + C10147) * C9128 +
             (C10148 + C10149 + C10150) * C48892) *
                C7912 +
            ((C2507 * C1252 + C49320 * C1258 + C2508 * C1933 + C49309 * C1937 +
              C2509 * C10092 + C49287 * C10093) *
                 C9128 +
             (C2507 * C1257 + C49320 * C1264 + C2508 * C1938 + C49309 * C1942 +
              C2509 * C10094 + C49287 * C10095) *
                 C48892) *
                C49284) *
               C48978 * C49279 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C1084 +
            (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
            C169 * C1079 + C170 * C1086 + C171 * C49271) *
               C49319 +
           (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
           C1786 * C49284) *
              C48978 * C591 -
          ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
           (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
           (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
              C48978 * C592 +
          (C1786 * C49319 +
           (C1784 + C1783 + C1774 + C1773 + C1772 + C1771) * C49307 +
           ((C113 * C1757 + C49007 * C1760) * C1084 +
            (C113 * C1761 + C49007 * C1766) * C1078 +
            (C113 * C1758 + C49007 * C1762) * C1085 +
            (C113 * C1763 + C49007 * C1767) * C1079 +
            (C113 * C1759 + C49007 * C1764) * C1086 +
            (C113 * C1765 + C49007 * C1768) * C49271) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C49007 * C126) * C114 +
           (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48996 * C48978 * C591 -
          (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 + C308 * C104 +
           C309 * C116 + C310 * C103 + C311 * C115 +
           (C113 * C277 + C49007 * C285) * C102 +
           (C113 * C267 + C49007 * C278) * C114) *
              C48996 * C48978 * C592 +
          ((C113 * C595 + C49007 * C600) * C114 +
           (C113 * C601 + C49007 * C610) * C102 +
           (C113 * C596 + C49007 * C602) * C115 +
           (C113 * C603 + C49007 * C611) * C103 +
           (C113 * C597 + C49007 * C604) * C116 +
           (C113 * C605 + C49007 * C612) * C104 +
           (C113 * C598 + C49007 * C606) * C117 +
           (C113 * C607 + C49007 * C613) * C105 +
           (C113 * C599 + C49007 * C608) * C118 +
           (C113 * C609 + C49007 * C614) * C106) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C48978 * C591 -
          ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
           (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
           (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
            C2507 * C277 + C49320 * C285) *
               C1078 +
           (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
            C2507 * C267 + C49320 * C278) *
               C1084) *
              C48996 * C48978 * C592 +
          ((C2507 * C595 + C49320 * C600 + C2508 * C1463 + C49309 * C1470 +
            C2509 * C2373 + C49287 * C2382) *
               C1084 +
           (C2507 * C601 + C49320 * C610 + C2508 * C1469 + C49309 * C1475 +
            C2509 * C2383 + C49287 * C2391) *
               C1078 +
           (C2507 * C596 + C49320 * C602 + C2508 * C1462 + C49309 * C1468 +
            C2509 * C2374 + C49287 * C2384) *
               C1085 +
           (C2507 * C603 + C49320 * C611 + C2508 * C1467 + C49309 * C1474 +
            C2509 * C2385 + C49287 * C2392) *
               C1079 +
           (C2507 * C597 + C49320 * C604 + C2508 * C1461 + C49309 * C1466 +
            C2509 * C2375 + C49287 * C2386) *
               C1086 +
           (C2507 * C605 + C49320 * C612 + C2508 * C1465 + C49309 * C1473 +
            C2509 * C2387 + C49287 * C2393) *
               C49271) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
           C8500 * C49284) *
              C48978 * C591 -
          ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
           (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
           (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
              C48978 * C592 +
          (C8500 * C7911 +
           (C8496 + C8495 + C8494 + C8493 + C8492 + C8491) * C7912 +
           ((C113 * C1757 + C49007 * C1760) * C7914 +
            (C113 * C1761 + C49007 * C1766) * C49316 +
            (C113 * C1758 + C49007 * C1762) * C7915 +
            (C113 * C1763 + C49007 * C1767) * C49303 +
            (C113 * C1759 + C49007 * C1764) * C7916 +
            (C113 * C1765 + C49007 * C1768) * C49271) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
           C9488 * C9127) *
              C48978 * C591 -
          ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
           (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
           (C9221 + C9220) * C9123) *
              C48978 * C592 +
          (C9486 * C9123 + C9487 * C9124 + C9488 * C9125 +
           (C9496 + C9495) * C9126 +
           ((C113 * C9481 + C49007 * C9482) * C9128 +
            (C113 * C9483 + C49007 * C9484) * C48892) *
               C9127) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C10133 + C10134 + C10135) * C9128 +
            (C10136 + C10137 + C10138) * C48892) *
               C7912 +
           C10585 * C49284) *
              C48978 * C591 -
          (((C10577 + C10578 + C10579) * C48892 +
            (C10580 + C10581 + C10582) * C9128) *
               C49284 +
           ((C10144 + C10143 + C10142) * C48892 +
            (C10141 + C10140 + C10139) * C9128) *
               C7912 +
           ((C10138 + C10137 + C10136) * C48892 +
            (C10135 + C10134 + C10133) * C9128) *
               C7911) *
              C48978 * C592 +
          (C10585 * C7911 +
           ((C10582 + C10581 + C10580) * C9128 +
            (C10579 + C10578 + C10577) * C48892) *
               C7912 +
           ((C2507 * C1757 + C49320 * C1760 + C2508 * C9329 + C49309 * C9332 +
             C2509 * C9829 + C49287 * C9832) *
                C9128 +
            (C2507 * C1761 + C49320 * C1766 + C2508 * C9331 + C49309 * C9335 +
             C2509 * C9833 + C49287 * C9835) *
                C48892) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            C1786 * C49284) *
               C393 -
           ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
            (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
            (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
             (C113 * C409 + C49007 * C417) * C1078 +
             (C113 * C399 + C49007 * C410) * C1084) *
                C49319) *
               C49281) *
              C525 +
          (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
            (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
            ((C113 * C1932 + C49007 * C1935) * C1084 +
             (C113 * C1936 + C49007 * C1941) * C1078 +
             (C113 * C1933 + C49007 * C1937) * C1085 +
             (C113 * C1938 + C49007 * C1942) * C1079 +
             (C113 * C1934 + C49007 * C1939) * C1086 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
            (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
            (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C393 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C49007 * C417) * C102 +
            (C113 * C399 + C49007 * C410) * C114) *
               C48996 * C49281) *
              C525 +
          (((C113 * C697 + C49007 * C702) * C114 +
            (C113 * C703 + C49007 * C712) * C102 +
            (C113 * C698 + C49007 * C704) * C115 +
            (C113 * C705 + C49007 * C713) * C103 +
            (C113 * C699 + C49007 * C706) * C116 +
            (C113 * C707 + C49007 * C714) * C104 +
            (C113 * C700 + C49007 * C708) * C117 +
            (C113 * C709 + C49007 * C715) * C105 +
            (C113 * C701 + C49007 * C710) * C118 +
            (C113 * C711 + C49007 * C716) * C106) *
               C48996 * C49281 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C49007 * C285) * C102 +
            (C113 * C267 + C49007 * C278) * C114) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C393 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C525 +
          (((C2507 * C697 + C49320 * C702 + C2508 * C2370 + C49309 * C2376 +
             C2509 * C3354 + C49287 * C3357) *
                C1084 +
            (C2507 * C703 + C49320 * C712 + C2508 * C2377 + C49309 * C2388 +
             C2509 * C3358 + C49287 * C3363) *
                C1078 +
            (C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
             C2509 * C3355 + C49287 * C3359) *
                C1085 +
            (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
             C2509 * C3360 + C49287 * C3364) *
                C1079 +
            (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
             C2509 * C3356 + C49287 * C3361) *
                C1086 +
            (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
             C2509 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C393 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C525 +
          (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
            (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
            ((C113 * C1932 + C49007 * C1935) * C7914 +
             (C113 * C1936 + C49007 * C1941) * C49316 +
             (C113 * C1933 + C49007 * C1937) * C7915 +
             (C113 * C1938 + C49007 * C1942) * C49303 +
             (C113 * C1934 + C49007 * C1939) * C7916 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C393 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C525 +
          (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
            (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
            ((C113 * C9578 + C49007 * C9579) * C9128 +
             (C113 * C9580 + C49007 * C9581) * C48892) *
                C9127) *
               C49281 -
           ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
            (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
            (C9221 + C9220) * C9123) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C393 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C525 +
          ((((C10771 + C10770 + C10769) * C9128 +
             (C10768 + C10767 + C10766) * C48892) *
                C7911 +
            ((C10765 + C10764 + C10763) * C9128 +
             (C10762 + C10761 + C10760) * C48892) *
                C7912 +
            ((C2507 * C1932 + C49320 * C1935 + C2508 * C9828 + C49309 * C9830 +
              C2509 * C10731 + C49287 * C10732) *
                 C9128 +
             (C2507 * C1936 + C49320 * C1941 + C2508 * C9831 + C49309 * C9834 +
              C2509 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10577 + C10578 + C10579) * C48892 +
             (C10580 + C10581 + C10582) * C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            C1786 * C49284) *
               C799 -
           ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
            (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
            (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
             (C113 * C409 + C49007 * C417) * C1078 +
             (C113 * C399 + C49007 * C410) * C1084) *
                C49319) *
               C49281) *
              C48961 * C527 +
          (((C443 * C1084 + C442 * C1078 + C441 * C1085 + C440 * C1079 +
             C439 * C1086 + C438 * C49271) *
                C49319 +
            (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 + C1498 * C1079 +
             (C113 * C700 + C49007 * C708) * C1086 +
             (C113 * C709 + C49007 * C715) * C49271) *
                C49307 +
            (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 + C1494 * C1079 +
             (C113 * C1464 + C49007 * C1471) * C1086 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
            (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
            (C173 * C49271 + C172 * C1086 + C171 * C1079 + C170 * C1085 +
             C169 * C1078 + C168 * C1084) *
                C49319) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C49007 * C417) * C102 +
            (C113 * C399 + C49007 * C410) * C114) *
               C48996 * C49281) *
              C48961 * C527 +
          ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
            C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
            (C113 * C400 + C49007 * C411) * C118 +
            (C113 * C412 + C49007 * C418) * C106) *
               C48996 * C49281 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C799 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C2952 + C2951 + C2950) * C1084 + (C2949 + C2948 + C2947) * C1078 +
            (C2946 + C2945 + C2944) * C1085 + (C2943 + C2942 + C2941) * C1079 +
            (C2507 * C396 + C49320 * C404 + C2508 * C951 + C49309 * C959 +
             C2509 * C2903 + C49287 * C2910) *
                C1086 +
            (C2507 * C403 + C49320 * C414 + C2508 * C960 + C49309 * C966 +
             C2509 * C2911 + C49287 * C2915) *
                C49271) *
               C48996 * C49281 -
           ((C2559 + C2560 + C2561) * C49271 + (C2562 + C2563 + C2564) * C1086 +
            (C2558 + C2557 + C2556) * C1079 + (C2555 + C2554 + C2553) * C1085 +
            (C2552 + C2551 + C2550) * C1078 + (C2549 + C2548 + C2547) * C1084) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C799 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C48961 * C527 +
          (((C443 * C7914 + C442 * C49316 + C441 * C7915 + C440 * C49303 +
             C439 * C7916 + C438 * C49271) *
                C7911 +
            (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 + C1498 * C49303 +
             C4170 * C7916 + C4169 * C49271) *
                C7912 +
            (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 + C1494 * C49303 +
             (C113 * C1464 + C49007 * C1471) * C7916 +
             (C113 * C1472 + C49007 * C1476) * C49271) *
                C49284) *
               C49281 -
           ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
            (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
            (C173 * C49271 + C172 * C7916 + C171 * C49303 + C170 * C7915 +
             C169 * C49316 + C168 * C7914) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C799 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C48961 * C527 +
          (((C443 * C9128 + C442 * C48892) * C9123 +
            (C1501 * C9128 + C1500 * C48892) * C9124 +
            (C1497 * C9128 + C1496 * C48892) * C9125 +
            ((C113 * C1933 + C49007 * C1937) * C9128 +
             (C113 * C1938 + C49007 * C1942) * C48892) *
                C9126 +
            ((C113 * C9330 + C49007 * C9333) * C9128 +
             (C113 * C9334 + C49007 * C9336) * C48892) *
                C9127) *
               C49281 -
           ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
            (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
            (C169 * C48892 + C168 * C9128) * C9123) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C799 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C48961 * C527 +
          ((((C2952 + C2951 + C2950) * C9128 +
             (C2949 + C2948 + C2947) * C48892) *
                C7911 +
            ((C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
              C2509 * C3355 + C49287 * C3359) *
                 C9128 +
             (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
              C2509 * C3360 + C49287 * C3364) *
                 C48892) *
                C7912 +
            ((C2507 * C1462 + C49320 * C1468 + C2508 * C2374 + C49309 * C2384 +
              C2509 * C10297 + C49287 * C10300) *
                 C9128 +
             (C2507 * C1467 + C49320 * C1474 + C2508 * C2385 + C49309 * C2392 +
              C2509 * C10301 + C49287 * C10303) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10150 + C10149 + C10148) * C48892 +
             (C10147 + C10146 + C10145) * C9128) *
                C49284 +
            ((C2749 + C2750 + C2751) * C48892 +
             (C2752 + C2753 + C2754) * C9128) *
                C7912 +
            ((C2552 + C2551 + C2550) * C48892 +
             (C2549 + C2548 + C2547) * C9128) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C1084 +
             (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
             C169 * C1079 + C170 * C1086 + C171 * C49271) *
                C49319 +
            (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
            C1786 * C49284) *
               C799 -
           ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
            (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
            (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
             (C113 * C409 + C49007 * C417) * C1078 +
             (C113 * C399 + C49007 * C410) * C1084) *
                C49319) *
               C49281) *
              C259 +
          (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
            (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
            ((C113 * C1932 + C49007 * C1935) * C1084 +
             (C113 * C1936 + C49007 * C1941) * C1078 +
             (C113 * C1933 + C49007 * C1937) * C1085 +
             (C113 * C1938 + C49007 * C1942) * C1079 +
             (C113 * C1934 + C49007 * C1939) * C1086 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
            (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
            (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C114 +
            (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C48996 * C799 -
           (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
            C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
            (C113 * C409 + C49007 * C417) * C102 +
            (C113 * C399 + C49007 * C410) * C114) *
               C48996 * C49281) *
              C259 +
          (((C113 * C697 + C49007 * C702) * C114 +
            (C113 * C703 + C49007 * C712) * C102 +
            (C113 * C698 + C49007 * C704) * C115 +
            (C113 * C705 + C49007 * C713) * C103 +
            (C113 * C699 + C49007 * C706) * C116 +
            (C113 * C707 + C49007 * C714) * C104 +
            (C113 * C700 + C49007 * C708) * C117 +
            (C113 * C709 + C49007 * C715) * C105 +
            (C113 * C701 + C49007 * C710) * C118 +
            (C113 * C711 + C49007 * C716) * C106) *
               C48996 * C49281 -
           (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
            C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
            (C113 * C277 + C49007 * C285) * C102 +
            (C113 * C267 + C49007 * C278) * C114) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C1084 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C1078 +
            (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
            C2567 * C1086 + C2568 * C49271) *
               C48996 * C799 -
           ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
            (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
            (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C1078 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C1084) *
               C48996 * C49281) *
              C259 +
          (((C2507 * C697 + C49320 * C702 + C2508 * C2370 + C49309 * C2376 +
             C2509 * C3354 + C49287 * C3357) *
                C1084 +
            (C2507 * C703 + C49320 * C712 + C2508 * C2377 + C49309 * C2388 +
             C2509 * C3358 + C49287 * C3363) *
                C1078 +
            (C2507 * C698 + C49320 * C704 + C2508 * C2371 + C49309 * C2378 +
             C2509 * C3355 + C49287 * C3359) *
                C1085 +
            (C2507 * C705 + C49320 * C713 + C2508 * C2379 + C49309 * C2389 +
             C2509 * C3360 + C49287 * C3364) *
                C1079 +
            (C2507 * C699 + C49320 * C706 + C2508 * C2372 + C49309 * C2380 +
             C2509 * C3356 + C49287 * C3361) *
                C1086 +
            (C2507 * C707 + C49320 * C714 + C2508 * C2381 + C49309 * C2390 +
             C2509 * C3362 + C49287 * C3365) *
                C49271) *
               C48996 * C49281 -
           ((C2743 + C2744 + C2745) * C49271 + (C2746 + C2747 + C2748) * C1086 +
            (C2749 + C2750 + C2751) * C1079 + (C2752 + C2753 + C2754) * C1085 +
            (C2509 * C2377 + C49287 * C2388 + C2508 * C703 + C49309 * C712 +
             C2507 * C277 + C49320 * C285) *
                C1078 +
            (C2509 * C2370 + C49287 * C2376 + C2508 * C697 + C49309 * C702 +
             C2507 * C267 + C49320 * C278) *
                C1084) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C7914 +
             (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
             C169 * C49303 + C170 * C7916 + C171 * C49271) *
                C7911 +
            (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
            C8500 * C49284) *
               C799 -
           ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
            (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
            (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
             (C113 * C409 + C49007 * C417) * C49316 +
             (C113 * C399 + C49007 * C410) * C7914) *
                C7911) *
               C49281) *
              C259 +
          (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
            (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
            ((C113 * C1932 + C49007 * C1935) * C7914 +
             (C113 * C1936 + C49007 * C1941) * C49316 +
             (C113 * C1933 + C49007 * C1937) * C7915 +
             (C113 * C1938 + C49007 * C1942) * C49303 +
             (C113 * C1934 + C49007 * C1939) * C7916 +
             (C113 * C1940 + C49007 * C1943) * C49271) *
                C49284) *
               C49281 -
           ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
            (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
            (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C49007 * C126) * C9128 +
             (C113 * C127 + C49007 * C140) * C48892) *
                C9123 +
            (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
            C9488 * C9127) *
               C799 -
           ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
            (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
            ((C113 * C409 + C49007 * C417) * C48892 +
             (C113 * C399 + C49007 * C410) * C9128) *
                C9123) *
               C49281) *
              C259 +
          (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
            (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
            ((C113 * C9578 + C49007 * C9579) * C9128 +
             (C113 * C9580 + C49007 * C9581) * C48892) *
                C9127) *
               C49281 -
           ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
            (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
            (C9221 + C9220) * C9123) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
              C2509 * C948 + C49287 * C953) *
                 C9128 +
             (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
              C2509 * C954 + C49287 * C963) *
                 C48892) *
                C7911 +
            ((C10133 + C10134 + C10135) * C9128 +
             (C10136 + C10137 + C10138) * C48892) *
                C7912 +
            C10585 * C49284) *
               C799 -
           (((C10760 + C10761 + C10762) * C48892 +
             (C10763 + C10764 + C10765) * C9128) *
                C49284 +
            ((C10766 + C10767 + C10768) * C48892 +
             (C10769 + C10770 + C10771) * C9128) *
                C7912 +
            ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
              C2507 * C409 + C49320 * C417) *
                 C48892 +
             (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
              C2507 * C399 + C49320 * C410) *
                 C9128) *
                C7911) *
               C49281) *
              C259 +
          ((((C10771 + C10770 + C10769) * C9128 +
             (C10768 + C10767 + C10766) * C48892) *
                C7911 +
            ((C10765 + C10764 + C10763) * C9128 +
             (C10762 + C10761 + C10760) * C48892) *
                C7912 +
            ((C2507 * C1932 + C49320 * C1935 + C2508 * C9828 + C49309 * C9830 +
              C2509 * C10731 + C49287 * C10732) *
                 C9128 +
             (C2507 * C1936 + C49320 * C1941 + C2508 * C9831 + C49309 * C9834 +
              C2509 * C10733 + C49287 * C10734) *
                 C48892) *
                C49284) *
               C49281 -
           (((C10577 + C10578 + C10579) * C48892 +
             (C10580 + C10581 + C10582) * C9128) *
                C49284 +
            ((C10144 + C10143 + C10142) * C48892 +
             (C10141 + C10140 + C10139) * C9128) *
                C7912 +
            ((C10138 + C10137 + C10136) * C48892 +
             (C10135 + C10134 + C10133) * C9128) *
                C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C1084 +
            (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
            C169 * C1079 + C170 * C1086 + C171 * C49271) *
               C49319 +
           (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
           C1786 * C49284) *
              C945 -
          ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
           (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
           (C440 * C49271 + C441 * C1086 + C442 * C1079 + C443 * C1085 +
            (C113 * C409 + C49007 * C417) * C1078 +
            (C113 * C399 + C49007 * C410) * C1084) *
               C49319) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C1084 +
            (C113 * C954 + C49007 * C963) * C1078 +
            (C113 * C949 + C49007 * C955) * C1085 +
            (C113 * C956 + C49007 * C964) * C1079 +
            (C113 * C950 + C49007 * C957) * C1086 +
            (C113 * C958 + C49007 * C965) * C49271) *
               C49319 +
           ((C113 * C2370 + C49007 * C2376) * C1084 +
            (C113 * C2377 + C49007 * C2388) * C1078 +
            (C113 * C2371 + C49007 * C2378) * C1085 +
            (C113 * C2379 + C49007 * C2389) * C1079 +
            (C113 * C2372 + C49007 * C2380) * C1086 +
            (C113 * C2381 + C49007 * C2390) * C49271) *
               C49307 +
           ((C113 * C2373 + C49007 * C2382) * C1084 +
            (C113 * C2383 + C49007 * C2391) * C1078 +
            (C113 * C2374 + C49007 * C2384) * C1085 +
            (C113 * C2385 + C49007 * C2392) * C1079 +
            (C113 * C2375 + C49007 * C2386) * C1086 +
            (C113 * C2387 + C49007 * C2393) * C49271) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C49007 * C126) * C114 +
           (C113 * C127 + C49007 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48996 * C945 -
          (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 + C440 * C104 +
           C441 * C116 + C442 * C103 + C443 * C115 +
           (C113 * C409 + C49007 * C417) * C102 +
           (C113 * C399 + C49007 * C410) * C114) *
              C48996 * C946 +
          ((C113 * C948 + C49007 * C953) * C114 +
           (C113 * C954 + C49007 * C963) * C102 +
           (C113 * C949 + C49007 * C955) * C115 +
           (C113 * C956 + C49007 * C964) * C103 +
           (C113 * C950 + C49007 * C957) * C116 +
           (C113 * C958 + C49007 * C965) * C104 +
           (C113 * C951 + C49007 * C959) * C117 +
           (C113 * C960 + C49007 * C966) * C105 +
           (C113 * C952 + C49007 * C961) * C118 +
           (C113 * C962 + C49007 * C967) * C106) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
            C2509 * C948 + C49287 * C953) *
               C1084 +
           (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
            C2509 * C954 + C49287 * C963) *
               C1078 +
           (C2547 + C2548 + C2549) * C1085 + (C2550 + C2551 + C2552) * C1079 +
           C2567 * C1086 + C2568 * C49271) *
              C48996 * C945 -
          ((C2941 + C2942 + C2943) * C49271 + (C2944 + C2945 + C2946) * C1086 +
           (C2947 + C2948 + C2949) * C1079 + (C2950 + C2951 + C2952) * C1085 +
           (C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
            C2507 * C409 + C49320 * C417) *
               C1078 +
           (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
            C2507 * C399 + C49320 * C410) *
               C1084) *
              C48996 * C946 +
          ((C2507 * C948 + C49320 * C953 + C2508 * C2902 + C49309 * C2909 +
            C2509 * C3768 + C49287 * C3771) *
               C1084 +
           (C2507 * C954 + C49320 * C963 + C2508 * C2908 + C49309 * C2914 +
            C2509 * C3772 + C49287 * C3777) *
               C1078 +
           (C2507 * C949 + C49320 * C955 + C2508 * C2901 + C49309 * C2907 +
            C2509 * C3769 + C49287 * C3773) *
               C1085 +
           (C2507 * C956 + C49320 * C964 + C2508 * C2906 + C49309 * C2913 +
            C2509 * C3774 + C49287 * C3778) *
               C1079 +
           (C2507 * C950 + C49320 * C957 + C2508 * C2900 + C49309 * C2905 +
            C2509 * C3770 + C49287 * C3775) *
               C1086 +
           (C2507 * C958 + C49320 * C965 + C2508 * C2904 + C49309 * C2912 +
            C2509 * C3776 + C49287 * C3779) *
               C49271) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C7914 +
            (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
            C169 * C49303 + C170 * C7916 + C171 * C49271) *
               C7911 +
           (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
           C8500 * C49284) *
              C945 -
          ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
           (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
           (C440 * C49271 + C441 * C7916 + C442 * C49303 + C443 * C7915 +
            (C113 * C409 + C49007 * C417) * C49316 +
            (C113 * C399 + C49007 * C410) * C7914) *
               C7911) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C7914 +
            (C113 * C954 + C49007 * C963) * C49316 +
            (C113 * C949 + C49007 * C955) * C7915 +
            (C113 * C956 + C49007 * C964) * C49303 +
            (C113 * C950 + C49007 * C957) * C7916 +
            (C113 * C958 + C49007 * C965) * C49271) *
               C7911 +
           ((C113 * C2370 + C49007 * C2376) * C7914 +
            (C113 * C2377 + C49007 * C2388) * C49316 +
            (C113 * C2371 + C49007 * C2378) * C7915 +
            (C113 * C2379 + C49007 * C2389) * C49303 +
            (C113 * C2372 + C49007 * C2380) * C7916 +
            (C113 * C2381 + C49007 * C2390) * C49271) *
               C7912 +
           ((C113 * C2373 + C49007 * C2382) * C7914 +
            (C113 * C2383 + C49007 * C2391) * C49316 +
            (C113 * C2374 + C49007 * C2384) * C7915 +
            (C113 * C2385 + C49007 * C2392) * C49303 +
            (C113 * C2375 + C49007 * C2386) * C7916 +
            (C113 * C2387 + C49007 * C2393) * C49271) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C49007 * C126) * C9128 +
            (C113 * C127 + C49007 * C140) * C48892) *
               C9123 +
           (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
           C9488 * C9127) *
              C945 -
          ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
           (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
           ((C113 * C409 + C49007 * C417) * C48892 +
            (C113 * C399 + C49007 * C410) * C9128) *
               C9123) *
              C946 +
          (((C113 * C948 + C49007 * C953) * C9128 +
            (C113 * C954 + C49007 * C963) * C48892) *
               C9123 +
           ((C113 * C2370 + C49007 * C2376) * C9128 +
            (C113 * C2377 + C49007 * C2388) * C48892) *
               C9124 +
           ((C113 * C2373 + C49007 * C2382) * C9128 +
            (C113 * C2383 + C49007 * C2391) * C48892) *
               C9125 +
           ((C113 * C9828 + C49007 * C9830) * C9128 +
            (C113 * C9831 + C49007 * C9834) * C48892) *
               C9126 +
           ((C113 * C9829 + C49007 * C9832) * C9128 +
            (C113 * C9833 + C49007 * C9835) * C48892) *
               C9127) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2507 * C119 + C49320 * C126 + C2508 * C399 + C49309 * C410 +
             C2509 * C948 + C49287 * C953) *
                C9128 +
            (C2507 * C127 + C49320 * C140 + C2508 * C409 + C49309 * C417 +
             C2509 * C954 + C49287 * C963) *
                C48892) *
               C7911 +
           ((C10133 + C10134 + C10135) * C9128 +
            (C10136 + C10137 + C10138) * C48892) *
               C7912 +
           C10585 * C49284) *
              C945 -
          (((C10760 + C10761 + C10762) * C48892 +
            (C10763 + C10764 + C10765) * C9128) *
               C49284 +
           ((C10766 + C10767 + C10768) * C48892 +
            (C10769 + C10770 + C10771) * C9128) *
               C7912 +
           ((C2509 * C2908 + C49287 * C2914 + C2508 * C954 + C49309 * C963 +
             C2507 * C409 + C49320 * C417) *
                C48892 +
            (C2509 * C2902 + C49287 * C2909 + C2508 * C948 + C49309 * C953 +
             C2507 * C399 + C49320 * C410) *
                C9128) *
               C7911) *
              C946 +
          (((C2507 * C948 + C49320 * C953 + C2508 * C2902 + C49309 * C2909 +
             C2509 * C3768 + C49287 * C3771) *
                C9128 +
            (C2507 * C954 + C49320 * C963 + C2508 * C2908 + C49309 * C2914 +
             C2509 * C3772 + C49287 * C3777) *
                C48892) *
               C7911 +
           ((C2507 * C2370 + C49320 * C2376 + C2508 * C3354 + C49309 * C3357 +
             C2509 * C11173 + C49287 * C11175) *
                C9128 +
            (C2507 * C2377 + C49320 * C2388 + C2508 * C3358 + C49309 * C3363 +
             C2509 * C11176 + C49287 * C11179) *
                C48892) *
               C7912 +
           ((C2507 * C2373 + C49320 * C2382 + C2508 * C10296 + C49309 * C10299 +
             C2509 * C11174 + C49287 * C11177) *
                C9128 +
            (C2507 * C2383 + C49320 * C2391 + C2508 * C10298 + C49309 * C10302 +
             C2509 * C11178 + C49287 * C11180) *
                C48892) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C48978 * C48961 * C110 -
          ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
           (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
           (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
           (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
              C48996 * C48978 * C48961 * C111 +
          (C5053 * C3884 + C5054 * C3878 + C5055 * C3885 + C5056 * C3879 +
           (C5052 + C5051) * C3886 + (C5050 + C5049) * C3880 +
           (C5002 * C124 + C49252 * C137 + C5003 * C400 + C49094 * C411) *
               C3887 +
           (C5002 * C136 + C49252 * C145 + C5003 * C412 + C49094 * C418) *
               C49288) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
            (C6488 + C6487) * C47890 + (C6486 + C6485) * C48902) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
            (C6485 + C6486) * C49229 + (C6487 + C6488) * C47909) *
               C49284 +
           (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 + C6476 * C47909) *
               C7912 +
           ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
            (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
               C7911) *
              C48978 * C48961 * C111 +
          ((C5053 * C47909 + C5054 * C49229 + C5055 * C47890 + C5056 * C48902) *
               C7911 +
           (C6251 * C47909 + C6252 * C49229 + (C5214 + C5213) * C47890 +
            (C5212 + C5211) * C48902) *
               C7912 +
           ((C6484 + C6483) * C47909 + (C6482 + C6481) * C49229 +
            (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
                C47890 +
            (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
                C48902) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C48978 * C259 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C48978 * C49279) *
              C261 +
          (((C5222 + C5221) * C3884 + (C5220 + C5219) * C3878 +
            (C5218 + C5217) * C3885 + (C5216 + C5215) * C3879 +
            (C5214 + C5213) * C3886 + (C5212 + C5211) * C3880 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C3887 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C48978 * C259 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C5003 * C1936 + C49094 * C1941 + C5002 * C1259 + C49252 * C1265) *
                 C49229 +
             (C5003 * C1932 + C49094 * C1935 + C5002 * C1253 + C49252 * C1260) *
                 C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C48978 * C49279) *
              C261 +
          (((C6455 * C47909 + C6456 * C49229 + C6251 * C47890 +
             C6252 * C48902) *
                C7911 +
            (C12656 * C47909 + C12657 * C49229 + (C6484 + C6483) * C47890 +
             (C6482 + C6481) * C48902) *
                C7912 +
            ((C12671 + C12670) * C47909 + (C12669 + C12668) * C49229 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C47890 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C48978 * C259) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C393 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C48961 * C261 +
          (((C5388 + C5387) * C3884 + (C5386 + C5385) * C3878 +
            (C5384 + C5383) * C3885 + (C5382 + C5381) * C3879 +
            (C5380 + C5379) * C3886 + (C5378 + C5377) * C3880 +
            (C5002 * C395 + C49252 * C402 + C5003 * C952 + C49094 * C961) *
                C3887 +
            (C5002 * C401 + C49252 * C413 + C5003 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C5003 * C2383 + C49094 * C2391 + C5002 * C1469 + C49252 * C1475) *
                 C49229 +
             (C5003 * C2373 + C49094 * C2382 + C5002 * C1463 + C49252 * C1470) *
                 C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C48961 * C261 +
          ((((C5388 + C5387) * C47909 + (C5386 + C5385) * C49229 +
             (C5384 + C5383) * C47890 + (C5382 + C5381) * C48902) *
                C7911 +
            ((C6706 + C6705) * C47909 + (C6704 + C6703) * C49229 +
             (C6702 + C6701) * C47890 + (C6700 + C6699) * C48902) *
                C7912 +
            ((C12877 + C12876) * C47909 + (C12875 + C12874) * C49229 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47890 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C393) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C48978 * C525 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C48978 * C49279) *
              C527 +
          (((C5222 + C5221) * C3884 + (C5220 + C5219) * C3878 +
            (C5218 + C5217) * C3885 + (C5216 + C5215) * C3879 +
            (C5214 + C5213) * C3886 + (C5212 + C5211) * C3880 +
            (C5002 * C263 + C49252 * C270 + C5003 * C701 + C49094 * C710) *
                C3887 +
            (C5002 * C269 + C49252 * C281 + C5003 * C711 + C49094 * C716) *
                C49288) *
               C48996 * C48978 * C49279 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            ((C7058 + C7057) * C47909 + (C7056 + C7055) * C49229 +
             C12656 * C47890 + C12657 * C48902) *
                C49284) *
               C48978 * C525 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C5003 * C1936 + C49094 * C1941 + C5002 * C1259 + C49252 * C1265) *
                 C49229 +
             (C5003 * C1932 + C49094 * C1935 + C5002 * C1253 + C49252 * C1260) *
                 C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C48978 * C49279) *
              C527 +
          (((C6455 * C47909 + C6456 * C49229 + C6251 * C47890 +
             C6252 * C48902) *
                C7911 +
            (C12656 * C47909 + C12657 * C49229 + (C6484 + C6483) * C47890 +
             (C6482 + C6481) * C48902) *
                C7912 +
            ((C12671 + C12670) * C47909 + (C12669 + C12668) * C49229 +
             (C5002 * C1251 + C49252 * C1256 + C5003 * C1934 + C49094 * C1939) *
                 C47890 +
             (C5002 * C1255 + C49252 * C1263 + C5003 * C1940 + C49094 * C1943) *
                 C48902) *
                C49284) *
               C48978 * C49279 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C48978 * C525) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C48978 * C591 -
          ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
           (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
           (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
           (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
               C3878 +
           (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
               C3884) *
              C48996 * C48978 * C592 +
          ((C5002 * C595 + C49252 * C600 + C5003 * C1463 + C49094 * C1470) *
               C3884 +
           (C5002 * C601 + C49252 * C610 + C5003 * C1469 + C49094 * C1475) *
               C3878 +
           (C5002 * C596 + C49252 * C602 + C5003 * C1462 + C49094 * C1468) *
               C3885 +
           (C5002 * C603 + C49252 * C611 + C5003 * C1467 + C49094 * C1474) *
               C3879 +
           (C5002 * C597 + C49252 * C604 + C5003 * C1461 + C49094 * C1466) *
               C3886 +
           (C5002 * C605 + C49252 * C612 + C5003 * C1465 + C49094 * C1473) *
               C3880 +
           (C5002 * C598 + C49252 * C606 + C5003 * C1464 + C49094 * C1471) *
               C3887 +
           (C5002 * C607 + C49252 * C613 + C5003 * C1472 + C49094 * C1476) *
               C49288) *
              C48996 * C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           C13238 * C49284) *
              C48978 * C591 -
          (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
            (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
               C49284 +
           (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
            (C7057 + C7058) * C47909) *
               C7912 +
           (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
            (C6478 + C6477) * C47909) *
               C7911) *
              C48978 * C592 +
          (C13238 * C7911 +
           ((C13235 + C13234) * C47909 + (C13233 + C13232) * C49229 +
            (C12671 + C12670) * C47890 + (C12669 + C12668) * C48902) *
               C7912 +
           ((C5002 * C1757 + C49252 * C1760 + C5003 * C9329 + C49094 * C9332) *
                C47909 +
            (C5002 * C1761 + C49252 * C1766 + C5003 * C9331 + C49094 * C9335) *
                C49229 +
            (C5002 * C1758 + C49252 * C1762 + C5003 * C9330 + C49094 * C9333) *
                C47890 +
            (C5002 * C1763 + C49252 * C1767 + C5003 * C9334 + C49094 * C9336) *
                C48902) *
               C49284) *
              C48978 * C593) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C393 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C525 +
          (((C5002 * C697 + C49252 * C702 + C5003 * C2370 + C49094 * C2376) *
                C3884 +
            (C5002 * C703 + C49252 * C712 + C5003 * C2377 + C49094 * C2388) *
                C3878 +
            (C5002 * C698 + C49252 * C704 + C5003 * C2371 + C49094 * C2378) *
                C3885 +
            (C5002 * C705 + C49252 * C713 + C5003 * C2379 + C49094 * C2389) *
                C3879 +
            (C5002 * C699 + C49252 * C706 + C5003 * C2372 + C49094 * C2380) *
                C3886 +
            (C5002 * C707 + C49252 * C714 + C5003 * C2381 + C49094 * C2390) *
                C3880 +
            (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                C3887 +
            (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C393 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C525 +
          ((((C7264 + C7263) * C47909 + (C7262 + C7261) * C49229 +
             (C6706 + C6705) * C47890 + (C6704 + C6703) * C48902) *
                C7911 +
            ((C13444 + C13443) * C47909 + (C13442 + C13441) * C49229 +
             (C12877 + C12876) * C47890 + (C12875 + C12874) * C48902) *
                C7912 +
            ((C5002 * C1932 + C49252 * C1935 + C5003 * C9828 + C49094 * C9830) *
                 C47909 +
             (C5002 * C1936 + C49252 * C1941 + C5003 * C9831 + C49094 * C9834) *
                 C49229 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C393) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C799 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C48961 * C527 +
          (((C5388 + C5387) * C3884 + (C5386 + C5385) * C3878 +
            (C5384 + C5383) * C3885 + (C5382 + C5381) * C3879 +
            (C5380 + C5379) * C3886 + (C5378 + C5377) * C3880 +
            (C5002 * C395 + C49252 * C402 + C5003 * C952 + C49094 * C961) *
                C3887 +
            (C5002 * C401 + C49252 * C413 + C5003 * C962 + C49094 * C967) *
                C49288) *
               C48996 * C49281 -
           ((C5049 + C5050) * C49288 + (C5051 + C5052) * C3887 +
            (C5048 + C5047) * C3880 + (C5046 + C5045) * C3886 +
            (C5044 + C5043) * C3879 + (C5042 + C5041) * C3885 +
            (C5040 + C5039) * C3878 + (C5038 + C5037) * C3884) *
               C48996 * C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C48961 * C527 +
          ((((C5388 + C5387) * C47909 + (C5386 + C5385) * C49229 +
             (C5384 + C5383) * C47890 + (C5382 + C5381) * C48902) *
                C7911 +
            ((C6706 + C6705) * C47909 + (C6704 + C6703) * C49229 +
             (C6702 + C6701) * C47890 + (C6700 + C6699) * C48902) *
                C7912 +
            ((C12877 + C12876) * C47909 + (C12875 + C12874) * C49229 +
             (C5002 * C1461 + C49252 * C1466 + C5003 * C2375 + C49094 * C2386) *
                 C47890 +
             (C5002 * C1465 + C49252 * C1473 + C5003 * C2387 + C49094 * C2393) *
                 C48902) *
                C49284) *
               C49281 -
           (((C6481 + C6482) * C48902 + (C6483 + C6484) * C47890 +
             C12666 * C49229 + C12667 * C47909) *
                C49284 +
            (C6473 * C48902 + C6474 * C47890 + C6475 * C49229 +
             C6476 * C47909) *
                C7912 +
            ((C5044 + C5043) * C48902 + (C5042 + C5041) * C47890 +
             (C5040 + C5039) * C49229 + (C5038 + C5037) * C47909) *
                C7911) *
               C799) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C3884 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C3878 +
            (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
            C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
               C48996 * C799 -
           ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
            (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
            (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C3878 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C3884) *
               C48996 * C49281) *
              C259 +
          (((C5002 * C697 + C49252 * C702 + C5003 * C2370 + C49094 * C2376) *
                C3884 +
            (C5002 * C703 + C49252 * C712 + C5003 * C2377 + C49094 * C2388) *
                C3878 +
            (C5002 * C698 + C49252 * C704 + C5003 * C2371 + C49094 * C2378) *
                C3885 +
            (C5002 * C705 + C49252 * C713 + C5003 * C2379 + C49094 * C2389) *
                C3879 +
            (C5002 * C699 + C49252 * C706 + C5003 * C2372 + C49094 * C2380) *
                C3886 +
            (C5002 * C707 + C49252 * C714 + C5003 * C2381 + C49094 * C2390) *
                C3880 +
            (C5002 * C700 + C49252 * C708 + C5003 * C2714 + C49094 * C2715) *
                C3887 +
            (C5002 * C709 + C49252 * C715 + C5003 * C2716 + C49094 * C2717) *
                C49288) *
               C48996 * C49281 -
           ((C5211 + C5212) * C49288 + (C5213 + C5214) * C3887 +
            (C5215 + C5216) * C3880 + (C5217 + C5218) * C3886 +
            (C5219 + C5220) * C3879 + (C5221 + C5222) * C3885 +
            (C5003 * C703 + C49094 * C712 + C5002 * C277 + C49252 * C285) *
                C3878 +
            (C5003 * C697 + C49094 * C702 + C5002 * C267 + C49252 * C278) *
                C3884) *
               C48996 * C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                 C47909 +
             (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                 C49229 +
             (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
                C7911 +
            ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
             C6455 * C47890 + C6456 * C48902) *
                C7912 +
            C13238 * C49284) *
               C799 -
           (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
             (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
                C49284 +
            ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
             (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
                C7912 +
            ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
             (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                 C49229 +
             (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                 C47909) *
                C7911) *
               C49281) *
              C259 +
          ((((C7264 + C7263) * C47909 + (C7262 + C7261) * C49229 +
             (C6706 + C6705) * C47890 + (C6704 + C6703) * C48902) *
                C7911 +
            ((C13444 + C13443) * C47909 + (C13442 + C13441) * C49229 +
             (C12877 + C12876) * C47890 + (C12875 + C12874) * C48902) *
                C7912 +
            ((C5002 * C1932 + C49252 * C1935 + C5003 * C9828 + C49094 * C9830) *
                 C47909 +
             (C5002 * C1936 + C49252 * C1941 + C5003 * C9831 + C49094 * C9834) *
                 C49229 +
             (C5002 * C1933 + C49252 * C1937 + C5003 * C10092 +
              C49094 * C10093) *
                 C47890 +
             (C5002 * C1938 + C49252 * C1942 + C5003 * C10094 +
              C49094 * C10095) *
                 C48902) *
                C49284) *
               C49281 -
           (((C12668 + C12669) * C48902 + (C12670 + C12671) * C47890 +
             (C13232 + C13233) * C49229 + (C13234 + C13235) * C47909) *
                C49284 +
            (C12666 * C48902 + C12667 * C47890 + (C7055 + C7056) * C49229 +
             (C7057 + C7058) * C47909) *
                C7912 +
            (C6475 * C48902 + C6476 * C47890 + (C6480 + C6479) * C49229 +
             (C6478 + C6477) * C47909) *
                C7911) *
               C799) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
               C3884 +
           (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
               C3878 +
           (C5037 + C5038) * C3885 + (C5039 + C5040) * C3879 + C5053 * C3886 +
           C5054 * C3880 + C5055 * C3887 + C5056 * C49288) *
              C48996 * C945 -
          ((C5377 + C5378) * C49288 + (C5379 + C5380) * C3887 +
           (C5381 + C5382) * C3880 + (C5383 + C5384) * C3886 +
           (C5385 + C5386) * C3879 + (C5387 + C5388) * C3885 +
           (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
               C3878 +
           (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
               C3884) *
              C48996 * C946 +
          ((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
               C3884 +
           (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
               C3878 +
           (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
               C3885 +
           (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
               C3879 +
           (C5002 * C950 + C49252 * C957 + C5003 * C2900 + C49094 * C2905) *
               C3886 +
           (C5002 * C958 + C49252 * C965 + C5003 * C2904 + C49094 * C2912) *
               C3880 +
           (C5002 * C951 + C49252 * C959 + C5003 * C2903 + C49094 * C2910) *
               C3887 +
           (C5002 * C960 + C49252 * C966 + C5003 * C2911 + C49094 * C2915) *
               C49288) *
              C48996 * C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5002 * C119 + C49252 * C126 + C5003 * C399 + C49094 * C410) *
                C47909 +
            (C5002 * C127 + C49252 * C140 + C5003 * C409 + C49094 * C417) *
                C49229 +
            (C5037 + C5038) * C47890 + (C5039 + C5040) * C48902) *
               C7911 +
           ((C6477 + C6478) * C47909 + (C6479 + C6480) * C49229 +
            C6455 * C47890 + C6456 * C48902) *
               C7912 +
           C13238 * C49284) *
              C945 -
          (((C12874 + C12875) * C48902 + (C12876 + C12877) * C47890 +
            (C13441 + C13442) * C49229 + (C13443 + C13444) * C47909) *
               C49284 +
           ((C6703 + C6704) * C48902 + (C6705 + C6706) * C47890 +
            (C7261 + C7262) * C49229 + (C7263 + C7264) * C47909) *
               C7912 +
           ((C5385 + C5386) * C48902 + (C5387 + C5388) * C47890 +
            (C5003 * C954 + C49094 * C963 + C5002 * C409 + C49252 * C417) *
                C49229 +
            (C5003 * C948 + C49094 * C953 + C5002 * C399 + C49252 * C410) *
                C47909) *
               C7911) *
              C946 +
          (((C5002 * C948 + C49252 * C953 + C5003 * C2902 + C49094 * C2909) *
                C47909 +
            (C5002 * C954 + C49252 * C963 + C5003 * C2908 + C49094 * C2914) *
                C49229 +
            (C5002 * C949 + C49252 * C955 + C5003 * C2901 + C49094 * C2907) *
                C47890 +
            (C5002 * C956 + C49252 * C964 + C5003 * C2906 + C49094 * C2913) *
                C48902) *
               C7911 +
           ((C5002 * C2370 + C49252 * C2376 + C5003 * C3354 + C49094 * C3357) *
                C47909 +
            (C5002 * C2377 + C49252 * C2388 + C5003 * C3358 + C49094 * C3363) *
                C49229 +
            (C5002 * C2371 + C49252 * C2378 + C5003 * C3355 + C49094 * C3359) *
                C47890 +
            (C5002 * C2379 + C49252 * C2389 + C5003 * C3360 + C49094 * C3364) *
                C48902) *
               C7912 +
           ((C5002 * C2373 + C49252 * C2382 + C5003 * C10296 +
             C49094 * C10299) *
                C47909 +
            (C5002 * C2383 + C49252 * C2391 + C5003 * C10298 +
             C49094 * C10302) *
                C49229 +
            (C5002 * C2374 + C49252 * C2384 + C5003 * C10297 +
             C49094 * C10300) *
                C47890 +
            (C5002 * C2385 + C49252 * C2392 + C5003 * C10301 +
             C49094 * C10303) *
                C48902) *
               C49284) *
              C947) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C48978 * C48961 * C110 -
                   (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                    C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                    C169 * C102 + C168 * C114) *
                       C48996 * C48978 * C48961 * C111 +
                   (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
                    C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
                    (C113 * C125 + C49007 * C138) * C118 +
                    (C113 * C139 + C49007 * C146) * C106) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    ((C113 * C267 + C49007 * C278) * C1084 +
                     (C113 * C277 + C49007 * C285) * C1078 + C311 * C1085 +
                     C310 * C1079 + C309 * C1086 + C308 * C49271) *
                        C49307 +
                    ((C113 * C595 + C49007 * C600) * C1084 +
                     (C113 * C601 + C49007 * C610) * C1078 + C1100 * C1085 +
                     C1101 * C1079 + C1102 * C1086 + C1103 * C49271) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   ((C1104 * C49271 + C1105 * C1086 + C1103 * C1079 +
                     C1102 * C1085 + C1101 * C1078 + C1100 * C1084) *
                        C49284 +
                    (C306 * C49271 + C307 * C1086 + C308 * C1079 +
                     C309 * C1085 + C310 * C1078 + C311 * C1084) *
                        C49307 +
                    (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                     C170 * C1085 + C169 * C1078 + C168 * C1084) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   ((C170 * C1084 + C171 * C1078 + C172 * C1085 + C173 * C1079 +
                     C174 * C1086 + C175 * C49271) *
                        C49319 +
                    (C309 * C1084 + C308 * C1078 + C307 * C1085 + C306 * C1079 +
                     C305 * C1086 + C304 * C49271) *
                        C49307 +
                    (C1102 * C1084 + C1103 * C1078 + C1105 * C1085 +
                     C1104 * C1079 + (C113 * C599 + C49007 * C608) * C1086 +
                     (C113 * C609 + C49007 * C614) * C49271) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C1304 * C7914 + C1305 * C49316 + C311 * C7915 +
                     C310 * C49303 + C309 * C7916 + C308 * C49271) *
                        C7912 +
                    (C1306 * C7914 + C1307 * C49316 + C1100 * C7915 +
                     C1101 * C49303 + C1102 * C7916 + C1103 * C49271) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   ((C1104 * C49271 + C1105 * C7916 + C1103 * C49303 +
                     C1102 * C7915 + C1101 * C49316 + C1100 * C7914) *
                        C49284 +
                    (C306 * C49271 + C307 * C7916 + C308 * C49303 +
                     C309 * C7915 + C310 * C49316 + C311 * C7914) *
                        C7912 +
                    (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                     C170 * C7915 + C169 * C49316 + C168 * C7914) *
                        C7911) *
                       C48978 * C48961 * C111 +
                   ((C170 * C7914 + C171 * C49316 + C172 * C7915 +
                     C173 * C49303 + C174 * C7916 + C175 * C49271) *
                        C7911 +
                    (C309 * C7914 + C308 * C49316 + C307 * C7915 +
                     C306 * C49303 + C305 * C7916 + C304 * C49271) *
                        C7912 +
                    (C1102 * C7914 + C1103 * C49316 + C1105 * C7915 +
                     C1104 * C49303 + (C113 * C599 + C49007 * C608) * C7916 +
                     (C113 * C609 + C49007 * C614) * C49271) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C1304 * C9128 + C1305 * C48892) * C9124 +
                    (C1306 * C9128 + C1307 * C48892) * C9125 +
                    (C1781 * C9128 + C1780 * C48892) * C9126 +
                    ((C113 * C1757 + C49007 * C1760) * C9128 +
                     (C113 * C1761 + C49007 * C1766) * C48892) *
                        C9127) *
                       C48978 * C48961 * C110 -
                   (((C113 * C1763 + C49007 * C1767) * C48892 +
                     (C113 * C1758 + C49007 * C1762) * C9128) *
                        C9127 +
                    (C1310 * C48892 + C1311 * C9128) * C9126 +
                    (C1101 * C48892 + C1100 * C9128) * C9125 +
                    (C310 * C48892 + C311 * C9128) * C9124 +
                    (C169 * C48892 + C168 * C9128) * C9123) *
                       C48978 * C48961 * C111 +
                   ((C170 * C9128 + C171 * C48892) * C9123 +
                    (C309 * C9128 + C308 * C48892) * C9124 +
                    (C1102 * C9128 + C1103 * C48892) * C9125 +
                    (C1309 * C9128 + C1308 * C48892) * C9126 +
                    ((C113 * C1759 + C49007 * C1764) * C9128 +
                     (C113 * C1765 + C49007 * C1768) * C48892) *
                        C9127) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C48978 * C259 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C48978 * C49279) *
                       C261 +
                   ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                     C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                     (C113 * C268 + C49007 * C279) * C118 +
                     (C113 * C280 + C49007 * C286) * C106) *
                        C48996 * C48978 * C49279 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C48978 * C259 -
                    ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                      C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                      (C113 * C1253 + C49007 * C1260) * C1084) *
                         C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C48978 * C49279) *
                       C261 +
                   (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                     (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                     (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 +
                      C1308 * C1079 + (C113 * C1254 + C49007 * C1261) * C1086 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C48978 * C259 -
                    ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 +
                      C1311 * C7915 + C1780 * C49316 + C1781 * C7914) *
                         C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C48978 * C49279) *
                       C261 +
                   (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
                     (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
                     (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 +
                      C1308 * C49303 + (C113 * C1254 + C49007 * C1261) * C7916 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C48978 * C259 -
                    (((C113 * C9213 + C49007 * C9217) * C48892 +
                      (C113 * C9211 + C49007 * C9214) * C9128) *
                         C9127 +
                     (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
                     (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
                        C48978 * C49279) *
                       C261 +
                   (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
                     (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
                     ((C113 * C9212 + C49007 * C9215) * C9128 +
                      (C113 * C9216 + C49007 * C9218) * C48892) *
                         C9127) *
                        C48978 * C49279 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C48978 * C259) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C393 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C48961 * C261 +
                   ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                     C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                     (C113 * C400 + C49007 * C411) * C118 +
                     (C113 * C412 + C49007 * C418) * C106) *
                        C48996 * C49281 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C393 -
                    ((C1494 * C49271 + C1495 * C1086 + C1496 * C1079 +
                      C1497 * C1085 + (C113 * C1469 + C49007 * C1475) * C1078 +
                      (C113 * C1463 + C49007 * C1470) * C1084) *
                         C49284 +
                     (C1498 * C49271 + C1499 * C1086 + C1500 * C1079 +
                      C1501 * C1085 + (C113 * C703 + C49007 * C712) * C1078 +
                      (C113 * C697 + C49007 * C702) * C1084) *
                         C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C1084 + C442 * C1078 + C441 * C1085 +
                      C440 * C1079 + C439 * C1086 + C438 * C49271) *
                         C49319 +
                     (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 +
                      C1498 * C1079 + (C113 * C700 + C49007 * C708) * C1086 +
                      (C113 * C709 + C49007 * C715) * C49271) *
                         C49307 +
                     (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 +
                      C1494 * C1079 + (C113 * C1464 + C49007 * C1471) * C1086 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C393 -
                    ((C1494 * C49271 + C1495 * C7916 + C1496 * C49303 +
                      C1497 * C7915 + C1961 * C49316 + C1962 * C7914) *
                         C49284 +
                     (C1498 * C49271 + C1499 * C7916 + C1500 * C49303 +
                      C1501 * C7915 + C1963 * C49316 + C1964 * C7914) *
                         C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C7914 + C442 * C49316 + C441 * C7915 +
                      C440 * C49303 + C439 * C7916 + C438 * C49271) *
                         C7911 +
                     (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 +
                      C1498 * C49303 + C4170 * C7916 + C4169 * C49271) *
                         C7912 +
                     (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 +
                      C1494 * C49303 + (C113 * C1464 + C49007 * C1471) * C7916 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C393 -
                    (((C113 * C9331 + C49007 * C9335) * C48892 +
                      (C113 * C9329 + C49007 * C9332) * C9128) *
                         C9127 +
                     ((C113 * C1936 + C49007 * C1941) * C48892 +
                      (C113 * C1932 + C49007 * C1935) * C9128) *
                         C9126 +
                     (C1961 * C48892 + C1962 * C9128) * C9125 +
                     (C1963 * C48892 + C1964 * C9128) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C48961 * C261 +
                   (((C443 * C9128 + C442 * C48892) * C9123 +
                     (C1501 * C9128 + C1500 * C48892) * C9124 +
                     (C1497 * C9128 + C1496 * C48892) * C9125 +
                     ((C113 * C1933 + C49007 * C1937) * C9128 +
                      (C113 * C1938 + C49007 * C1942) * C48892) *
                         C9126 +
                     ((C113 * C9330 + C49007 * C9333) * C9128 +
                      (C113 * C9334 + C49007 * C9336) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C393) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C48978 * C525 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C48978 * C49279) *
                       C527 +
                   ((C311 * C114 + C310 * C102 + C309 * C115 + C308 * C103 +
                     C307 * C116 + C306 * C104 + C305 * C117 + C304 * C105 +
                     (C113 * C268 + C49007 * C279) * C118 +
                     (C113 * C280 + C49007 * C286) * C106) *
                        C48996 * C48978 * C49279 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     (C1314 + C1315 + C1280 + C1281 + C1282 + C1283) * C49284) *
                        C48978 * C525 -
                    ((C1308 * C49271 + C1309 * C1086 + C1310 * C1079 +
                      C1311 * C1085 + (C113 * C1259 + C49007 * C1265) * C1078 +
                      (C113 * C1253 + C49007 * C1260) * C1084) *
                         C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C48978 * C49279) *
                       C527 +
                   (((C1292 + C1293 + C1294 + C1295 + C1296 + C1297) * C49319 +
                     (C1298 + C1299 + C1300 + C1301 + C1302 + C1303) * C49307 +
                     (C1311 * C1084 + C1310 * C1078 + C1309 * C1085 +
                      C1308 * C1079 + (C113 * C1254 + C49007 * C1261) * C1086 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     (C8070 + C8071 + C8072 + C8073 + C8074 + C8075) * C49284) *
                        C48978 * C525 -
                    ((C1308 * C49271 + C1309 * C7916 + C1310 * C49303 +
                      C1311 * C7915 + C1780 * C49316 + C1781 * C7914) *
                         C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C48978 * C49279) *
                       C527 +
                   (((C8076 + C8077 + C8078 + C8079 + C8080 + C8081) * C7911 +
                     (C8082 + C8083 + C8084 + C8085 + C8086 + C8087) * C7912 +
                     (C1311 * C7914 + C1310 * C49316 + C1309 * C7915 +
                      C1308 * C49303 + (C113 * C1254 + C49007 * C1261) * C7916 +
                      (C113 * C1262 + C49007 * C1266) * C49271) *
                         C49284) *
                        C48978 * C49279 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + (C9222 + C9223) * C9125 +
                     (C9224 + C9225) * C9126 + (C9244 + C9245) * C9127) *
                        C48978 * C525 -
                    (((C113 * C9213 + C49007 * C9217) * C48892 +
                      (C113 * C9211 + C49007 * C9214) * C9128) *
                         C9127 +
                     (C9245 + C9244) * C9126 + (C9225 + C9224) * C9125 +
                     (C9223 + C9222) * C9124 + (C9221 + C9220) * C9123) *
                        C48978 * C49279) *
                       C527 +
                   (((C9230 + C9231) * C9123 + (C9232 + C9233) * C9124 +
                     (C9234 + C9235) * C9125 + (C9246 + C9247) * C9126 +
                     ((C113 * C9212 + C49007 * C9215) * C9128 +
                      (C113 * C9216 + C49007 * C9218) * C48892) *
                         C9127) *
                        C48978 * C49279 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C48978 * C525) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C48978 * C591 -
                   (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                    C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                    (C113 * C277 + C49007 * C285) * C102 +
                    (C113 * C267 + C49007 * C278) * C114) *
                       C48996 * C48978 * C592 +
                   ((C113 * C595 + C49007 * C600) * C114 +
                    (C113 * C601 + C49007 * C610) * C102 +
                    (C113 * C596 + C49007 * C602) * C115 +
                    (C113 * C603 + C49007 * C611) * C103 +
                    (C113 * C597 + C49007 * C604) * C116 +
                    (C113 * C605 + C49007 * C612) * C104 +
                    (C113 * C598 + C49007 * C606) * C117 +
                    (C113 * C607 + C49007 * C613) * C105 +
                    (C113 * C599 + C49007 * C608) * C118 +
                    (C113 * C609 + C49007 * C614) * C106) *
                       C48996 * C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                    C1786 * C49284) *
                       C48978 * C591 -
                   ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                    (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                    (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                       C48978 * C592 +
                   (C1786 * C49319 +
                    (C1784 + C1783 + C1774 + C1773 + C1772 + C1771) * C49307 +
                    ((C113 * C1757 + C49007 * C1760) * C1084 +
                     (C113 * C1761 + C49007 * C1766) * C1078 +
                     (C113 * C1758 + C49007 * C1762) * C1085 +
                     (C113 * C1763 + C49007 * C1767) * C1079 +
                     (C113 * C1759 + C49007 * C1764) * C1086 +
                     (C113 * C1765 + C49007 * C1768) * C49271) *
                        C49284) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                    C8500 * C49284) *
                       C48978 * C591 -
                   ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                    (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                    (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                       C48978 * C592 +
                   (C8500 * C7911 +
                    (C8496 + C8495 + C8494 + C8493 + C8492 + C8491) * C7912 +
                    ((C113 * C1757 + C49007 * C1760) * C7914 +
                     (C113 * C1761 + C49007 * C1766) * C49316 +
                     (C113 * C1758 + C49007 * C1762) * C7915 +
                     (C113 * C1763 + C49007 * C1767) * C49303 +
                     (C113 * C1759 + C49007 * C1764) * C7916 +
                     (C113 * C1765 + C49007 * C1768) * C49271) *
                        C49284) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                    C9488 * C9127) *
                       C48978 * C591 -
                   ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                    (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                    (C9221 + C9220) * C9123) *
                       C48978 * C592 +
                   (C9486 * C9123 + C9487 * C9124 + C9488 * C9125 +
                    (C9496 + C9495) * C9126 +
                    ((C113 * C9481 + C49007 * C9482) * C9128 +
                     (C113 * C9483 + C49007 * C9484) * C48892) *
                        C9127) *
                       C48978 * C593) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C393 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C525 +
                   (((C113 * C697 + C49007 * C702) * C114 +
                     (C113 * C703 + C49007 * C712) * C102 +
                     (C113 * C698 + C49007 * C704) * C115 +
                     (C113 * C705 + C49007 * C713) * C103 +
                     (C113 * C699 + C49007 * C706) * C116 +
                     (C113 * C707 + C49007 * C714) * C104 +
                     (C113 * C700 + C49007 * C708) * C117 +
                     (C113 * C709 + C49007 * C715) * C105 +
                     (C113 * C701 + C49007 * C710) * C118 +
                     (C113 * C711 + C49007 * C716) * C106) *
                        C48996 * C49281 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C393 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C525 +
                   (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                     (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                     ((C113 * C1932 + C49007 * C1935) * C1084 +
                      (C113 * C1936 + C49007 * C1941) * C1078 +
                      (C113 * C1933 + C49007 * C1937) * C1085 +
                      (C113 * C1938 + C49007 * C1942) * C1079 +
                      (C113 * C1934 + C49007 * C1939) * C1086 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C393 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C525 +
                   (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
                     (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
                     ((C113 * C1932 + C49007 * C1935) * C7914 +
                      (C113 * C1936 + C49007 * C1941) * C49316 +
                      (C113 * C1933 + C49007 * C1937) * C7915 +
                      (C113 * C1938 + C49007 * C1942) * C49303 +
                      (C113 * C1934 + C49007 * C1939) * C7916 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C393 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C525 +
                   (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
                     (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
                     ((C113 * C9578 + C49007 * C9579) * C9128 +
                      (C113 * C9580 + C49007 * C9581) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                     (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                     (C9221 + C9220) * C9123) *
                        C393) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C799 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C48961 * C527 +
                   ((C443 * C114 + C442 * C102 + C441 * C115 + C440 * C103 +
                     C439 * C116 + C438 * C104 + C437 * C117 + C436 * C105 +
                     (C113 * C400 + C49007 * C411) * C118 +
                     (C113 * C412 + C49007 * C418) * C106) *
                        C48996 * C49281 -
                    (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                     C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                     C169 * C102 + C168 * C114) *
                        C48996 * C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C799 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C1084 + C442 * C1078 + C441 * C1085 +
                      C440 * C1079 + C439 * C1086 + C438 * C49271) *
                         C49319 +
                     (C1501 * C1084 + C1500 * C1078 + C1499 * C1085 +
                      C1498 * C1079 + (C113 * C700 + C49007 * C708) * C1086 +
                      (C113 * C709 + C49007 * C715) * C49271) *
                         C49307 +
                     (C1497 * C1084 + C1496 * C1078 + C1495 * C1085 +
                      C1494 * C1079 + (C113 * C1464 + C49007 * C1471) * C1086 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1303 + C1302 + C1301 + C1300 + C1299 + C1298) * C49284 +
                     (C1297 + C1296 + C1295 + C1294 + C1293 + C1292) * C49307 +
                     (C173 * C49271 + C172 * C1086 + C171 * C1079 +
                      C170 * C1085 + C169 * C1078 + C168 * C1084) *
                         C49319) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C799 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C7914 + C442 * C49316 + C441 * C7915 +
                      C440 * C49303 + C439 * C7916 + C438 * C49271) *
                         C7911 +
                     (C1501 * C7914 + C1500 * C49316 + C1499 * C7915 +
                      C1498 * C49303 + C4170 * C7916 + C4169 * C49271) *
                         C7912 +
                     (C1497 * C7914 + C1496 * C49316 + C1495 * C7915 +
                      C1494 * C49303 + (C113 * C1464 + C49007 * C1471) * C7916 +
                      (C113 * C1472 + C49007 * C1476) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8087 + C8086 + C8085 + C8084 + C8083 + C8082) * C49284 +
                     (C8081 + C8080 + C8079 + C8078 + C8077 + C8076) * C7912 +
                     (C173 * C49271 + C172 * C7916 + C171 * C49303 +
                      C170 * C7915 + C169 * C49316 + C168 * C7914) *
                         C7911) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C799 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C48961 * C527 +
                   (((C443 * C9128 + C442 * C48892) * C9123 +
                     (C1501 * C9128 + C1500 * C48892) * C9124 +
                     (C1497 * C9128 + C1496 * C48892) * C9125 +
                     ((C113 * C1933 + C49007 * C1937) * C9128 +
                      (C113 * C1938 + C49007 * C1942) * C48892) *
                         C9126 +
                     ((C113 * C9330 + C49007 * C9333) * C9128 +
                      (C113 * C9334 + C49007 * C9336) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9247 + C9246) * C9127 + (C9235 + C9234) * C9126 +
                     (C9233 + C9232) * C9125 + (C9231 + C9230) * C9124 +
                     (C169 * C48892 + C168 * C9128) * C9123) *
                        C799) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C114 +
                     (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                     C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                     C173 * C105 + C174 * C118 + C175 * C106) *
                        C48996 * C799 -
                    (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                     C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                     (C113 * C409 + C49007 * C417) * C102 +
                     (C113 * C399 + C49007 * C410) * C114) *
                        C48996 * C49281) *
                       C259 +
                   (((C113 * C697 + C49007 * C702) * C114 +
                     (C113 * C703 + C49007 * C712) * C102 +
                     (C113 * C698 + C49007 * C704) * C115 +
                     (C113 * C705 + C49007 * C713) * C103 +
                     (C113 * C699 + C49007 * C706) * C116 +
                     (C113 * C707 + C49007 * C714) * C104 +
                     (C113 * C700 + C49007 * C708) * C117 +
                     (C113 * C709 + C49007 * C715) * C105 +
                     (C113 * C701 + C49007 * C710) * C118 +
                     (C113 * C711 + C49007 * C716) * C106) *
                        C48996 * C49281 -
                    (C304 * C106 + C305 * C118 + C306 * C105 + C307 * C117 +
                     C308 * C104 + C309 * C116 + C310 * C103 + C311 * C115 +
                     (C113 * C277 + C49007 * C285) * C102 +
                     (C113 * C267 + C49007 * C278) * C114) *
                        C48996 * C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C1084 +
                      (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                      C169 * C1079 + C170 * C1086 + C171 * C49271) *
                         C49319 +
                     (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                     C1786 * C49284) *
                        C799 -
                    ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                     (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                     (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                      C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                      (C113 * C399 + C49007 * C410) * C1084) *
                         C49319) *
                        C49281) *
                       C259 +
                   (((C1968 + C1967 + C1956 + C1955 + C1954 + C1953) * C49319 +
                     (C1966 + C1965 + C1948 + C1947 + C1946 + C1945) * C49307 +
                     ((C113 * C1932 + C49007 * C1935) * C1084 +
                      (C113 * C1936 + C49007 * C1941) * C1078 +
                      (C113 * C1933 + C49007 * C1937) * C1085 +
                      (C113 * C1938 + C49007 * C1942) * C1079 +
                      (C113 * C1934 + C49007 * C1939) * C1086 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C1771 + C1772 + C1773 + C1774 + C1783 + C1784) * C49284 +
                     (C1283 + C1282 + C1281 + C1280 + C1315 + C1314) * C49307 +
                     (C1275 + C1274 + C1273 + C1272 + C1313 + C1312) * C49319) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C7914 +
                      (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                      C169 * C49303 + C170 * C7916 + C171 * C49271) *
                         C7911 +
                     (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                     C8500 * C49284) *
                        C799 -
                    ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                     (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                     (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                      C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                      (C113 * C399 + C49007 * C410) * C7914) *
                         C7911) *
                        C49281) *
                       C259 +
                   (((C8658 + C8657 + C8656 + C8655 + C8654 + C8653) * C7911 +
                     (C8652 + C8651 + C8650 + C8649 + C8648 + C8647) * C7912 +
                     ((C113 * C1932 + C49007 * C1935) * C7914 +
                      (C113 * C1936 + C49007 * C1941) * C49316 +
                      (C113 * C1933 + C49007 * C1937) * C7915 +
                      (C113 * C1938 + C49007 * C1942) * C49303 +
                      (C113 * C1934 + C49007 * C1939) * C7916 +
                      (C113 * C1940 + C49007 * C1943) * C49271) *
                         C49284) *
                        C49281 -
                    ((C8491 + C8492 + C8493 + C8494 + C8495 + C8496) * C49284 +
                     (C8075 + C8074 + C8073 + C8072 + C8071 + C8070) * C7912 +
                     (C8069 + C8068 + C8067 + C8066 + C8065 + C8064) * C7911) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C49007 * C126) * C9128 +
                      (C113 * C127 + C49007 * C140) * C48892) *
                         C9123 +
                     (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                     C9488 * C9127) *
                        C799 -
                    ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                     (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                     ((C113 * C409 + C49007 * C417) * C48892 +
                      (C113 * C399 + C49007 * C410) * C9128) *
                         C9123) *
                        C49281) *
                       C259 +
                   (((C9594 + C9593) * C9123 + (C9592 + C9591) * C9124 +
                     (C9602 + C9601) * C9125 + (C9600 + C9599) * C9126 +
                     ((C113 * C9578 + C49007 * C9579) * C9128 +
                      (C113 * C9580 + C49007 * C9581) * C48892) *
                         C9127) *
                        C49281 -
                    ((C9495 + C9496) * C9127 + (C9245 + C9244) * C9126 +
                     (C9225 + C9224) * C9125 + (C9223 + C9222) * C9124 +
                     (C9221 + C9220) * C9123) *
                        C799) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C49007 * C126) * C114 +
                    (C113 * C127 + C49007 * C140) * C102 + C168 * C115 +
                    C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C48996 * C945 -
                   (C436 * C106 + C437 * C118 + C438 * C105 + C439 * C117 +
                    C440 * C104 + C441 * C116 + C442 * C103 + C443 * C115 +
                    (C113 * C409 + C49007 * C417) * C102 +
                    (C113 * C399 + C49007 * C410) * C114) *
                       C48996 * C946 +
                   ((C113 * C948 + C49007 * C953) * C114 +
                    (C113 * C954 + C49007 * C963) * C102 +
                    (C113 * C949 + C49007 * C955) * C115 +
                    (C113 * C956 + C49007 * C964) * C103 +
                    (C113 * C950 + C49007 * C957) * C116 +
                    (C113 * C958 + C49007 * C965) * C104 +
                    (C113 * C951 + C49007 * C959) * C117 +
                    (C113 * C960 + C49007 * C966) * C105 +
                    (C113 * C952 + C49007 * C961) * C118 +
                    (C113 * C962 + C49007 * C967) * C106) *
                       C48996 * C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C1084 +
                     (C113 * C127 + C49007 * C140) * C1078 + C168 * C1085 +
                     C169 * C1079 + C170 * C1086 + C171 * C49271) *
                        C49319 +
                    (C1312 + C1313 + C1272 + C1273 + C1274 + C1275) * C49307 +
                    C1786 * C49284) *
                       C945 -
                   ((C1945 + C1946 + C1947 + C1948 + C1965 + C1966) * C49284 +
                    (C1953 + C1954 + C1955 + C1956 + C1967 + C1968) * C49307 +
                    (C440 * C49271 + C441 * C1086 + C442 * C1079 +
                     C443 * C1085 + (C113 * C409 + C49007 * C417) * C1078 +
                     (C113 * C399 + C49007 * C410) * C1084) *
                        C49319) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C1084 +
                     (C113 * C954 + C49007 * C963) * C1078 +
                     (C113 * C949 + C49007 * C955) * C1085 +
                     (C113 * C956 + C49007 * C964) * C1079 +
                     (C113 * C950 + C49007 * C957) * C1086 +
                     (C113 * C958 + C49007 * C965) * C49271) *
                        C49319 +
                    ((C113 * C2370 + C49007 * C2376) * C1084 +
                     (C113 * C2377 + C49007 * C2388) * C1078 +
                     (C113 * C2371 + C49007 * C2378) * C1085 +
                     (C113 * C2379 + C49007 * C2389) * C1079 +
                     (C113 * C2372 + C49007 * C2380) * C1086 +
                     (C113 * C2381 + C49007 * C2390) * C49271) *
                        C49307 +
                    ((C113 * C2373 + C49007 * C2382) * C1084 +
                     (C113 * C2383 + C49007 * C2391) * C1078 +
                     (C113 * C2374 + C49007 * C2384) * C1085 +
                     (C113 * C2385 + C49007 * C2392) * C1079 +
                     (C113 * C2375 + C49007 * C2386) * C1086 +
                     (C113 * C2387 + C49007 * C2393) * C49271) *
                        C49284) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C7914 +
                     (C113 * C127 + C49007 * C140) * C49316 + C168 * C7915 +
                     C169 * C49303 + C170 * C7916 + C171 * C49271) *
                        C7911 +
                    (C8064 + C8065 + C8066 + C8067 + C8068 + C8069) * C7912 +
                    C8500 * C49284) *
                       C945 -
                   ((C8647 + C8648 + C8649 + C8650 + C8651 + C8652) * C49284 +
                    (C8653 + C8654 + C8655 + C8656 + C8657 + C8658) * C7912 +
                    (C440 * C49271 + C441 * C7916 + C442 * C49303 +
                     C443 * C7915 + (C113 * C409 + C49007 * C417) * C49316 +
                     (C113 * C399 + C49007 * C410) * C7914) *
                        C7911) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C7914 +
                     (C113 * C954 + C49007 * C963) * C49316 +
                     (C113 * C949 + C49007 * C955) * C7915 +
                     (C113 * C956 + C49007 * C964) * C49303 +
                     (C113 * C950 + C49007 * C957) * C7916 +
                     (C113 * C958 + C49007 * C965) * C49271) *
                        C7911 +
                    ((C113 * C2370 + C49007 * C2376) * C7914 +
                     (C113 * C2377 + C49007 * C2388) * C49316 +
                     (C113 * C2371 + C49007 * C2378) * C7915 +
                     (C113 * C2379 + C49007 * C2389) * C49303 +
                     (C113 * C2372 + C49007 * C2380) * C7916 +
                     (C113 * C2381 + C49007 * C2390) * C49271) *
                        C7912 +
                    ((C113 * C2373 + C49007 * C2382) * C7914 +
                     (C113 * C2383 + C49007 * C2391) * C49316 +
                     (C113 * C2374 + C49007 * C2384) * C7915 +
                     (C113 * C2385 + C49007 * C2392) * C49303 +
                     (C113 * C2375 + C49007 * C2386) * C7916 +
                     (C113 * C2387 + C49007 * C2393) * C49271) *
                        C49284) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C49007 * C126) * C9128 +
                     (C113 * C127 + C49007 * C140) * C48892) *
                        C9123 +
                    (C9220 + C9221) * C9124 + C9486 * C9125 + C9487 * C9126 +
                    C9488 * C9127) *
                       C945 -
                   ((C9599 + C9600) * C9127 + (C9601 + C9602) * C9126 +
                    (C9591 + C9592) * C9125 + (C9593 + C9594) * C9124 +
                    ((C113 * C409 + C49007 * C417) * C48892 +
                     (C113 * C399 + C49007 * C410) * C9128) *
                        C9123) *
                       C946 +
                   (((C113 * C948 + C49007 * C953) * C9128 +
                     (C113 * C954 + C49007 * C963) * C48892) *
                        C9123 +
                    ((C113 * C2370 + C49007 * C2376) * C9128 +
                     (C113 * C2377 + C49007 * C2388) * C48892) *
                        C9124 +
                    ((C113 * C2373 + C49007 * C2382) * C9128 +
                     (C113 * C2383 + C49007 * C2391) * C48892) *
                        C9125 +
                    ((C113 * C9828 + C49007 * C9830) * C9128 +
                     (C113 * C9831 + C49007 * C9834) * C48892) *
                        C9126 +
                    ((C113 * C9829 + C49007 * C9832) * C9128 +
                     (C113 * C9833 + C49007 * C9835) * C48892) *
                        C9127) *
                       C947) *
                  C48961 * C48927) /
                     (p * q * std::sqrt(p + q));
}
