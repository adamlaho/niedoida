/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47866 = 0 * ae;
    const double C47865 = ae * be;
    const double C47864 = 0 * be;
    const double C47863 = 0 * be;
    const double C47862 = ae + be;
    const double C47861 = 0 * be;
    const double C47860 = xA - xB;
    const double C47921 = 0 * be;
    const double C47948 = 0 * be;
    const double C47947 = yA - yB;
    const double C47999 = 0 * ae;
    const double C47994 = 0 * be;
    const double C47993 = 0 * be;
    const double C48044 = 0 * be;
    const double C48108 = xP - xQ;
    const double C48107 = yP - yQ;
    const double C48106 = p + q;
    const double C48105 = p * q;
    const double C48115 = std::pow(ae, 2);
    const double C48113 = bs[3];
    const double C48123 = bs[4];
    const double C48132 = bs[5];
    const double C48146 = bs[6];
    const double C48168 = bs[7];
    const double C48272 = zP - zQ;
    const double C48440 = bs[2];
    const double C119 = bs[0];
    const double C48832 = ce + de;
    const double C48831 = ce * de;
    const double C48830 = xC - xD;
    const double C48845 = yC - yD;
    const double C48854 = zC - zD;
    const double C48912 = zA - zB;
    const double C47873 = C47866 / C47862;
    const double C47870 = C47864 / C47862;
    const double C47868 = 2 * C47862;
    const double C47867 = std::pow(C47862, 2);
    const double C47872 = C47865 * C47860;
    const double C47871 = C47860 * C47864;
    const double C47869 = C47860 * C47863;
    const double C48796 = C47860 * be;
    const double C48795 = C47860 * ae;
    const double C48794 = std::pow(C47860, 2);
    const double C47922 = C47921 / C47862;
    const double C47995 = C47948 / C47862;
    const double C47949 = C47865 * C47947;
    const double C47996 = C47947 * C47948;
    const double C48901 = std::pow(C47947, 2);
    const double C48956 = C47947 * be;
    const double C48954 = C47947 * ae;
    const double C48006 = C47999 / C47862;
    const double C48001 = C47947 * C47994;
    const double C48045 = C48044 / C47862;
    const double C48133 = std::pow(C48108, 2);
    const double C48191 = C48108 * ae;
    const double C48116 = C48107 * ae;
    const double C48114 = C48107 * C48108;
    const double C48294 = std::pow(C48107, 2);
    const double C48109 = 2 * C48105;
    const double C48319 = std::pow(C48272, 2);
    const double C48842 = 2 * C48832;
    const double C49151 = std::pow(C48832, 2);
    const double C48833 = std::pow(C48830, 2);
    const double C49150 = C48830 * de;
    const double C49149 = C48830 * ce;
    const double C48867 = std::pow(C48845, 2);
    const double C49155 = C48845 * de;
    const double C49153 = C48845 * ce;
    const double C48884 = std::pow(C48854, 2);
    const double C49156 = C48854 * de;
    const double C49154 = C48854 * ce;
    const double C48913 = std::pow(C48912, 2);
    const double C48996 = C48912 * be;
    const double C48994 = C48912 * ae;
    const double C48808 = std::pow(C47868, -1);
    const double C49144 = std::pow(C47868, -2);
    const double C47874 = 2 * C47867;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C47867;
    const double C49148 = C47867 * C47868;
    const double C49147 = 4 * C47867;
    const double C47876 = C47871 / C47862;
    const double C47875 = C47869 / C47862;
    const double C49137 = std::pow(C48795, 2);
    const double C48797 = C48794 * C47865;
    const double C48004 = C47996 / C47862;
    const double C48902 = C48901 * C47865;
    const double C49157 = std::pow(C48954, 2);
    const double C48007 = C48001 / C47862;
    const double C48194 = C48132 * C48191;
    const double C48203 = C48123 * C48191;
    const double C48210 = C48146 * C48191;
    const double C48233 = C48113 * C48191;
    const double C48253 = C48168 * C48191;
    const double C48119 = C48113 * C48116;
    const double C48125 = C48123 * C48116;
    const double C48135 = C48132 * C48116;
    const double C48150 = C48146 * C48116;
    const double C48174 = C48168 * C48116;
    const double C48118 = C48114 * C48115;
    const double C48110 = C48109 / C48106;
    const double C126 = (-(bs[1] * C48191 * C48109) / C48106) / C47862;
    const double C131 = (-(bs[1] * C48116 * C48109) / C48106) / C47862;
    const double C120 = -(C48108 * bs[1] * C48109) / C48106;
    const double C237 = -(C48107 * bs[1] * C48109) / C48106;
    const double C345 = -(C48272 * bs[1] * C48109) / C48106;
    const double C49152 = std::pow(C48842, -1);
    const double C49186 = 2 * C49151;
    const double C48834 = C48833 * C48831;
    const double C48868 = C48867 * C48831;
    const double C48885 = C48884 * C48831;
    const double C48914 = C48913 * C47865;
    const double C49159 = std::pow(C48994, 2);
    const double C47883 = C47864 / C47874;
    const double C47880 = C47863 / C47874;
    const double C47879 = C47861 / C47874;
    const double C47998 = C47948 / C47874;
    const double C48003 = C47994 / C47874;
    const double C48002 = C47993 / C47874;
    const double C49184 = 4 * C49148;
    const double C49183 = C47862 * C49147;
    const double C47881 = 0 - C47876;
    const double C47878 = 0 - C47875;
    const double C48798 = C48797 / C47862;
    const double C48008 = 0 - C48004;
    const double C48903 = C48902 / C47862;
    const double C48011 = 0 - C48007;
    const double C48124 = C48123 * C48118;
    const double C48134 = C48132 * C48118;
    const double C48148 = C48146 * C48118;
    const double C48172 = C48168 * C48118;
    const double C48112 = -C48110;
    const double C48122 = std::pow(C48110, 4);
    const double C48145 = std::pow(C48110, 6);
    const double C141 = (ae * std::pow(C48110, 2) * bs[2] * C48107 * ae +
                         C48108 * std::pow(-C48110, 3) * bs[3] * C48107 *
                             C48108 * std::pow(ae, 2)) /
                        C47867;
    const double C48439 = std::pow(C48110, 2);
    const double C127 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48191) / C47862 -
        (ae * bs[1] * C48109) / (C48106 * C47862);
    const double C48835 = C48834 / C48832;
    const double C48869 = C48868 / C48832;
    const double C48886 = C48885 / C48832;
    const double C48915 = C48914 / C47862;
    const double C47886 = C47881 * ae;
    const double C47885 = C47878 * ae;
    const double C48799 = -C48798;
    const double C48012 = C48008 * ae;
    const double C48904 = -C48903;
    const double C48015 = C48011 * ae;
    const double C48117 = std::pow(C48112, 3);
    const double C48131 = std::pow(C48112, 5);
    const double C48167 = std::pow(C48112, 7);
    const double C48127 = C48122 * C48125;
    const double C48126 = C48122 * C48124;
    const double C48192 = C48123 * C48122;
    const double C48205 = C48122 * C48203;
    const double C48153 = C48145 * C48150;
    const double C48152 = C48145 * C48148;
    const double C48213 = C48146 * C48145;
    const double C48214 = C48145 * C48210;
    const double C48441 = C48440 * C48439;
    const double C132 = (C48108 * C48439 * C48440 * C48116) / C47862;
    const double C243 = (C48107 * C48439 * C48440 * C48116) / C47862 -
                        (ae * bs[1] * C48109) / (C48106 * C47862);
    const double C248 = (C48107 * C48439 * C48440 * C48191) / C47862;
    const double C351 = (C48272 * C48439 * C48440 * C48116) / C47862;
    const double C356 = (C48272 * C48439 * C48440 * C48191) / C47862;
    const double C48836 = -C48835;
    const double C48870 = -C48869;
    const double C48887 = -C48886;
    const double C48916 = -C48915;
    const double C47890 = C47886 / C47862;
    const double C47889 = C47885 / C47862;
    const double C48800 = std::exp(C48799);
    const double C48016 = C48012 / C47862;
    const double C48905 = std::exp(C48904);
    const double C48019 = C48015 / C47862;
    const double C48120 = C48117 * C48119;
    const double C48204 = C48113 * C48117;
    const double C48234 = C48117 * C48233;
    const double C255 = (ae * std::pow(C48110, 2) * bs[2] * C48191 +
                         C48107 * C48117 * C48113 * C48118) /
                        C47867;
    const double C363 = ((zP - zQ) * C48117 * C48113 * C48118) / C47867;
    const double C48137 = C48131 * C48135;
    const double C48136 = C48131 * C48134;
    const double C48193 = C48132 * C48131;
    const double C48198 = C48131 * C48194;
    const double C48177 = C48167 * C48174;
    const double C48176 = C48167 * C48172;
    const double C48258 = C48167 * C48253;
    const double C48130 = ae * C48127;
    const double C48129 = C48108 * C48127;
    const double C48536 = C48107 * C48127;
    const double C885 =
        (C48117 * C48113 * C48118 + C48126 * std::pow(C48272, 2)) / C47867;
    const double C48196 = C48108 * C48192;
    const double C48195 = C48192 * ae;
    const double C48445 = C48192 * C48133;
    const double C48538 = C48192 * C48294;
    const double C48595 = C48107 * C48192;
    const double C48777 = C48192 * C48319;
    const double C48786 = C48272 * C48192;
    const double C48236 = C48108 * C48205;
    const double C48292 = ae * C48205;
    const double C48291 = C48107 * C48205;
    const double C48155 = C48153 * C48133;
    const double C48166 = ae * C48153;
    const double C48165 = C48108 * C48153;
    const double C48628 = C48107 * C48153;
    const double C48691 = C48153 * C48319;
    const double C48154 = C48108 * C48152;
    const double C48339 = C48107 * C48152;
    const double C48366 = C48272 * C48152;
    const double C48410 = C48152 * C48319;
    const double C48216 = C48213 * C48133;
    const double C48255 = C48108 * C48213;
    const double C48254 = C48213 * ae;
    const double C48631 = C48213 * C48294;
    const double C48218 = C48108 * C48214;
    const double C48340 = C48214 * C48294;
    const double C48380 = ae * C48214;
    const double C48379 = C48107 * C48214;
    const double C48400 = C48272 * C48214;
    const double C48413 = C48214 * C48319;
    const double C121 = C48441 * C48133 - (bs[1] * C48109) / C48106;
    const double C236 = C48107 * C48108 * C48441;
    const double C344 = C48272 * C48108 * C48441;
    const double C517 = C48441 * C48294 - (bs[1] * C48109) / C48106;
    const double C619 = C48272 * C48107 * C48441;
    const double C870 = C48441 * C48319 - (bs[1] * C48109) / C48106;
    const double C48837 = std::exp(C48836);
    const double C48871 = std::exp(C48870);
    const double C48888 = std::exp(C48887);
    const double C48917 = std::exp(C48916);
    const double C47894 = C47890 - C47880;
    const double C47893 = C47889 - C47879;
    const double C9158 = C48800 * C248;
    const double C10244 = C48800 * C356;
    const double C47877 = C47872 * C48800;
    const double C48802 = C48800 * C48795;
    const double C48801 = C48800 / C47868;
    const double C48810 = C48808 * C48800;
    const double C49140 = C48800 * C48796;
    const double C49181 = C49144 * C48800;
    const double C49175 = C48800 * C49137;
    const double C48020 = C48016 - C48003;
    const double C47950 = C47949 * C48905;
    const double C118 = -(2 * C47865 * (yA - yB) * C48905) / C47862;
    const double C48955 = C48905 / C47868;
    const double C48957 = C48905 * C48954;
    const double C48964 = C48808 * C48905;
    const double C49163 = C48905 * C48956;
    const double C49194 = C49144 * C48905;
    const double C49192 = C48905 * C49157;
    const double C48023 = C48019 - C48002;
    const double C142 = (C48117 * C48113 * C48118 + ae * C48108 * C48120 +
                         C48108 * (ae * C48120 + C48108 * std::pow(C48110, 4) *
                                                     bs[4] * C48118)) /
                        C47867;
    const double C143 =
        (2 * (ae * C48120 + C48108 * C48126) +
         ae * (C48120 + C48127 * std::pow(C48108, 2)) +
         C48108 * (C48126 + ae * C48108 * C48127 +
                   C48108 * (ae * C48127 +
                             C48108 * std::pow(C48112, 5) * bs[5] * C48118))) /
        C47867;
    const double C254 = (ae * (C48108 * C48117 * C48113 * C48191 +
                               bs[2] * std::pow(C48110, 2) * ae) +
                         C48107 * (ae * C48120 + C48108 * C48126)) /
                        C47867;
    const double C362 = ((zP - zQ) * (ae * C48120 + C48108 * C48126)) / C47867;
    const double C133 = (C48439 * C48440 * C48116 + C48120 * C48133) / C47862;
    const double C134 =
        (2 * C48108 * C48120 + C48108 * (C48120 + C48127 * C48133)) / C47862;
    const double C242 =
        (C48107 * C48108 * C48120 + C48108 * C48441 * ae) / C47862;
    const double C349 = (C48272 * (C48120 + C48127 * C48133)) / C47862;
    const double C350 = (C48272 * C48108 * C48120) / C47862;
    const double C527 =
        (C48439 * C48440 * C48116 + C48107 * (C48107 * C48120 + C48441 * ae) +
         C48107 * C48441 * ae) /
        C47862;
    const double C629 = (C48272 * (C48107 * C48120 + C48441 * ae)) / C47862;
    const double C880 = (C48439 * C48440 * C48116 + C48120 * C48319) / C47862;
    const double C2733 =
        (2 * C48272 * C48120 + C48272 * (C48120 + C48127 * C48319)) / C47862;
    const double C48237 = C48204 * ae;
    const double C48444 = C48108 * C48204;
    const double C48537 = C48107 * C48204;
    const double C241 = (C48107 * (C48120 + C48127 * C48133) +
                         (C48441 + C48204 * C48133) * ae) /
                        C47862;
    const double C122 =
        2 * C48108 * C48441 + C48108 * (C48441 + C48204 * C48133);
    const double C235 = C48107 * (C48441 + C48204 * C48133);
    const double C343 = C48272 * (C48441 + C48204 * C48133);
    const double C1160 =
        2 * C48107 * C48441 + C48107 * (C48441 + C48204 * C48294);
    const double C1394 = C48272 * (C48441 + C48204 * C48294);
    const double C2729 =
        2 * C48272 * C48441 + C48272 * (C48441 + C48204 * C48319);
    const double C3649 =
        3 * (C48441 + C48204 * C48319) +
        C48272 * (2 * C48272 * C48204 + C48272 * (C48204 + C48192 * C48319));
    const double C532 = (C48117 * C48113 * C48118 + ae * C48107 * C48234 +
                         C48107 * (ae * C48234 + C48107 * C48126)) /
                        C47867;
    const double C634 =
        (ae * C48272 * C48234 + C48107 * C48272 * C48126) / C47867;
    const double C128 =
        (C48439 * C48440 * C48191 + C48108 * (C48108 * C48234 + C48441 * ae) +
         C48108 * C48441 * ae) /
        C47862;
    const double C247 = (C48107 * (C48108 * C48234 + C48441 * ae)) / C47862;
    const double C355 = (C48272 * (C48108 * C48234 + C48441 * ae)) / C47862;
    const double C522 = (C48439 * C48440 * C48191 + C48234 * C48294) / C47862;
    const double C624 = (C48272 * C48107 * C48234) / C47862;
    const double C875 = (C48439 * C48440 * C48191 + C48234 * C48319) / C47862;
    const double C1167 =
        (2 * C48107 * C48234 + C48107 * (C48234 + C48205 * C48294)) / C47862;
    const double C1401 = (C48272 * (C48234 + C48205 * C48294)) / C47862;
    const double C2736 =
        (2 * C48272 * C48234 + C48272 * (C48234 + C48205 * C48319)) / C47862;
    const double C9160 = C48800 * C255;
    const double C10246 = C48800 * C363;
    const double C48139 = C48137 * C48133;
    const double C48144 = ae * C48137;
    const double C48143 = C48108 * C48137;
    const double C48594 = C48107 * C48137;
    const double C48668 = C48137 * C48319;
    const double C48690 = C48272 * C48137;
    const double C3655 =
        (3 * (C48120 + C48127 * C48319) +
         C48272 * (2 * C48272 * C48127 + C48272 * (C48127 + C48137 * C48319))) /
        C47862;
    const double C48138 = C48108 * C48136;
    const double C48293 = C48107 * C48136;
    const double C48313 = C48272 * C48136;
    const double C1172 = (2 * (ae * C48234 + C48107 * C48126) +
                          ae * (C48234 + C48205 * std::pow(C48107, 2)) +
                          C48107 * (C48126 + ae * C48107 * C48205 +
                                    C48107 * (ae * C48205 + C48107 * C48136))) /
                         C47867;
    const double C1406 =
        (C48272 * C48126 + ae * C48272 * C48107 * C48205 +
         C48107 * (ae * C48272 * C48205 + C48107 * C48272 * C48136)) /
        C47867;
    const double C2312 = (ae * (C48234 + C48205 * C48319) +
                          C48107 * (C48126 + C48136 * C48319)) /
                         C47867;
    const double C2741 =
        (2 * C48272 * C48126 + C48272 * (C48126 + C48136 * C48319)) / C47867;
    const double C48197 = C48193 * C48133;
    const double C48212 = C48108 * C48193;
    const double C48211 = C48193 * ae;
    const double C48596 = C48193 * C48294;
    const double C48629 = C48107 * C48193;
    const double C48787 = C48193 * C48319;
    const double C48200 = C48108 * C48198;
    const double C48296 = C48198 * C48294;
    const double C48338 = ae * C48198;
    const double C48337 = C48107 * C48198;
    const double C48365 = C48272 * C48198;
    const double C48671 = C48198 * C48319;
    const double C3652 =
        (3 * (C48234 + C48205 * C48319) +
         C48272 * (2 * C48272 * C48205 + C48272 * (C48205 + C48198 * C48319))) /
        C47862;
    const double C48179 = C48177 * C48133;
    const double C48178 = C48108 * C48176;
    const double C48381 = C48107 * C48176;
    const double C48401 = C48272 * C48176;
    const double C48414 = C48176 * C48319;
    const double C48260 = C48108 * C48258;
    const double C48383 = C48258 * C48294;
    const double C881 = (C48108 * C48120 + C48129 * C48319) / C47862;
    const double C10254 = C48800 * C885;
    const double C48241 = C48196 * ae;
    const double C48454 = 2 * C48196;
    const double C48543 = C48107 * C48196;
    const double C48446 = C48204 + C48445;
    const double C48540 = C48204 + C48538;
    const double C48600 = 2 * C48595;
    const double C48598 = C48595 * ae;
    const double C48778 = C48204 + C48777;
    const double C48788 = 2 * C48786;
    const double C2315 =
        (C48126 + C48136 * C48319 + ae * (C48291 + C48107 * C48198 * C48319) +
         C48107 * (ae * (C48205 + C48198 * C48319) +
                   C48107 * (C48136 + C48152 * C48319))) /
        C47867;
    const double C2300 = (C48107 * C48234 + C48291 * C48319) / C47862;
    const double C48157 = C48137 + C48155;
    const double C48173 = 2 * C48165;
    const double C48171 = ae * C48165;
    const double C48609 = C48107 * C48165;
    const double C48677 = C48165 * C48319;
    const double C48693 = C48137 + C48691;
    const double C48368 = C48107 * C48366;
    const double C48426 = 2 * C48366;
    const double C48411 = C48136 + C48410;
    const double C48219 = C48193 + C48216;
    const double C48259 = C48255 * ae;
    const double C48611 = C48255 * C48294;
    const double C48635 = C48193 + C48631;
    const double C48344 = C48198 + C48340;
    const double C48387 = 2 * C48379;
    const double C48385 = ae * C48379;
    const double C48399 = C48272 * C48379;
    const double C48680 = C48379 * C48319;
    const double C48403 = ae * C48400;
    const double C48415 = C48198 + C48413;
    const double C49187 = C49152 * C48837;
    const double C49185 = C48837 * C49149;
    const double C231 = -(C48837 * C49150) / C48832;
    const double C49189 = C49152 * C48871;
    const double C49188 = C48871 * C49153;
    const double C447 = -(C48871 * C49155) / C48832;
    const double C49191 = C49152 * C48888;
    const double C49190 = C48888 * C49154;
    const double C721 = -(C48888 * C49156) / C48832;
    const double C48995 = C48917 / C47868;
    const double C48997 = C48917 * C48994;
    const double C49004 = C48808 * C48917;
    const double C49169 = C48917 * C48996;
    const double C49197 = C49144 * C48917;
    const double C49195 = C48917 * C49159;
    const double C47899 = C47894 / C47868;
    const double C47898 = C47860 * C47894;
    const double C47897 = C47893 + C47870;
    const double C47884 = C47877 / C47867;
    const double C47882 = 2 * C47877;
    const double C48803 = C48802 * C48796;
    const double C48809 = C48802 / C47874;
    const double C49141 = C48808 * C48802;
    const double C49139 = C48802 / C47862;
    const double C1000 = (C48800 * std::pow(C48796, 2)) / C47867 + C48801;
    const double C48811 = C48810 * C48796;
    const double C49145 = C48795 * C48810;
    const double C49143 = 2 * C48810;
    const double C49198 = C48810 / C49147;
    const double C105 = C48810 / C49184;
    const double C26650 = C48810 / C47868;
    const double C49177 = C49140 / C47862;
    const double C1001 = (-2 * C48808 * C49140) / C47862;
    const double C49211 = C49175 / C47867;
    const double C48025 = C48020 / C47868;
    const double C48024 = C47947 * C48020;
    const double C47976 = 2 * C47950;
    const double C48000 = C47950 / C47867;
    const double C1011 =
        ((0 * ae) / C47862 - C47950 / C47867) / C47868 + (0 * ae) / C47862;
    const double C3794 =
        ((C48905 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
        C47948 / C47874;
    const double C3795 = (0 * ae) / C47862 - C47950 / C47867;
    const double C7757 = (C48905 * std::pow(C48956, 2)) / C47867 + C48955;
    const double C48958 = C48957 * C48956;
    const double C48963 = C48957 / C47874;
    const double C49161 = C48957 / C47862;
    const double C49158 = C48808 * C48957;
    const double C1010 =
        (((C48905 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
         C47948 / C47874) /
            C47868 +
        ((C47947 * ((0 * ae) / C47862 - C47950 / C47867) + C48964) * ae) /
            C47862;
    const double C48965 = C48964 * C48956;
    const double C49167 = C48954 * C48964;
    const double C49166 = 2 * C48964;
    const double C49204 = C48964 / C49147;
    const double C9059 = C48964 / C49184;
    const double C26653 = C48964 / C47868;
    const double C49200 = C49163 / C47862;
    const double C7758 = (-2 * C48808 * C49163) / C47862;
    const double C49216 = C49192 / C47867;
    const double C48029 = C48023 + C47995;
    const double C9176 = C48800 * C254;
    const double C11401 = C48810 * C254;
    const double C23837 = C48810 * C254;
    const double C10262 = C48800 * C362;
    const double C12929 = C48810 * C362;
    const double C25377 = C48810 * C362;
    const double C48238 = C48236 + C48237;
    const double C48539 = C48536 + C48237;
    const double C1164 =
        (2 * (C48107 * C48120 + C48441 * ae) +
         C48107 * (C48120 + C48107 * (C48107 * C48127 + C48237) +
                   C48107 * C48204 * ae) +
         (C48441 + C48204 * C48294) * ae) /
        C47862;
    const double C1398 =
        (C48272 * (C48120 + C48107 * (C48107 * C48127 + C48237) +
                   C48107 * C48204 * ae)) /
        C47862;
    const double C528 =
        (C48108 * C48120 + C48107 * (C48107 * C48129 + C48444 * ae) +
         C48107 * C48444 * ae) /
        C47862;
    const double C630 = (C48272 * (C48107 * C48129 + C48444 * ae)) / C47862;
    const double C518 = C48108 * C48441 + C48444 * C48294;
    const double C620 = C48272 * C48107 * C48444;
    const double C871 = C48108 * C48441 + C48444 * C48319;
    const double C1159 =
        2 * C48107 * C48444 + C48107 * (C48444 + C48196 * C48294);
    const double C1393 = C48272 * (C48444 + C48196 * C48294);
    const double C2728 =
        2 * C48272 * C48444 + C48272 * (C48444 + C48196 * C48319);
    const double C2294 = C48107 * C48441 + C48537 * C48319;
    const double C3217 =
        2 * C48272 * C48537 + C48272 * (C48537 + C48595 * C48319);
    const double C9164 = C48800 * C532;
    const double C9548 = C48800 * C634;
    const double C9174 = C48800 * C247;
    const double C11397 = C48810 * C247;
    const double C23833 = C48810 * C247;
    const double C10260 = C48800 * C355;
    const double C12925 = C48810 * C355;
    const double C25373 = C48810 * C355;
    const double C9162 = C48800 * C522;
    const double C9550 = C48800 * C624;
    const double C10252 = C48800 * C875;
    const double C9166 = C48800 * C1167;
    const double C9546 = C48800 * C1401;
    const double C11145 = C48800 * C2736;
    const double C48141 = C48127 + C48139;
    const double C48156 = C48144 + C48154;
    const double C48149 = 2 * C48143;
    const double C48147 = ae * C48143;
    const double C48542 = C48107 * C48143;
    const double C2732 =
        (2 * C48272 * C48129 + C48272 * (C48129 + C48143 * C48319)) / C47862;
    const double C3656 =
        (3 * (C48129 + C48143 * C48319) +
         C48272 * (2 * C48272 * C48143 + C48272 * (C48143 + C48165 * C48319))) /
        C47862;
    const double C48597 = C48594 + C48195;
    const double C48669 = C48127 + C48668;
    const double C48692 = 2 * C48690;
    const double C48140 = C48130 + C48138;
    const double C48295 = C48292 + C48293;
    const double C3226 =
        (ae * (2 * C48272 * C48205 + C48272 * (C48205 + C48198 * C48319)) +
         C48107 * (2 * C48313 + C48272 * (C48136 + C48152 * C48319))) /
        C47867;
    const double C3658 =
        (3 * (C48126 + C48136 * C48319) +
         C48272 * (2 * C48313 + C48272 * (C48136 + C48152 * C48319))) /
        C47867;
    const double C9168 = C48800 * C1172;
    const double C9544 = C48800 * C1406;
    const double C10056 = C48800 * C2312;
    const double C11143 = C48800 * C2741;
    const double C48199 = C48192 + C48197;
    const double C48217 = 2 * C48212;
    const double C48215 = C48212 * ae;
    const double C48544 = C48212 * C48294;
    const double C48610 = C48107 * C48212;
    const double C48780 = C48212 * C48319;
    const double C3650 =
        3 * (C48444 + C48196 * C48319) +
        C48272 * (2 * C48272 * C48196 + C48272 * (C48196 + C48212 * C48319));
    const double C48220 = C48218 + C48211;
    const double C48633 = C48628 + C48211;
    const double C48599 = C48192 + C48596;
    const double C48636 = 2 * C48629;
    const double C48634 = C48629 * ae;
    const double C48783 = C48629 * C48319;
    const double C11128 =
        3 * (C48537 + C48595 * C48319) +
        C48272 * (2 * C48272 * C48595 + C48272 * (C48595 + C48629 * C48319));
    const double C48789 = C48192 + C48787;
    const double C48201 = C48200 + C48195;
    const double C48297 = C48205 + C48296;
    const double C48342 = C48338 + C48339;
    const double C48343 = 2 * C48337;
    const double C48341 = ae * C48337;
    const double C3220 =
        (2 * C48272 * C48291 + C48272 * (C48291 + C48337 * C48319)) / C47862;
    const double C11130 =
        (3 * (C48291 + C48337 * C48319) +
         C48272 * (2 * C48272 * C48337 + C48272 * (C48337 + C48379 * C48319))) /
        C47862;
    const double C48367 = ae * C48365;
    const double C48686 = 2 * C48365;
    const double C48672 = C48205 + C48671;
    const double C17997 = C48800 * C3652;
    const double C48181 = C48153 + C48179;
    const double C48180 = C48166 + C48178;
    const double C48386 = C48380 + C48381;
    const double C48404 = C48107 * C48401;
    const double C48416 = C48152 + C48414;
    const double C48261 = C48260 + C48254;
    const double C48388 = C48214 + C48383;
    const double C1163 =
        (2 * (C48107 * C48129 + C48444 * ae) +
         C48107 * (C48129 + C48107 * (C48107 * C48143 + C48241) +
                   C48107 * C48196 * ae) +
         (C48444 + C48196 * C48294) * ae) /
        C47862;
    const double C1397 =
        (C48272 * (C48129 + C48107 * (C48107 * C48143 + C48241) +
                   C48107 * C48196 * ae)) /
        C47862;
    const double C2295 = C48107 * C48444 + C48543 * C48319;
    const double C123 = 3 * (C48441 + C48204 * C48133) +
                        C48108 * (2 * C48444 + C48108 * C48446);
    const double C234 = C48107 * (2 * C48444 + C48108 * C48446);
    const double C342 = C48272 * (2 * C48444 + C48108 * C48446);
    const double C519 = C48441 + C48204 * C48133 + C48446 * C48294;
    const double C621 = C48272 * C48107 * C48446;
    const double C872 = C48441 + C48204 * C48133 + C48446 * C48319;
    const double C1664 = 3 * (C48441 + C48204 * C48294) +
                         C48107 * (2 * C48537 + C48107 * C48540);
    const double C1844 = C48272 * (2 * C48537 + C48107 * C48540);
    const double C2297 = C48441 + C48204 * C48294 + C48540 * C48319;
    const double C17981 =
        4 * (2 * C48272 * C48204 + C48272 * C48778) +
        C48272 * (3 * C48778 + C48272 * (2 * C48272 * C48192 +
                                         C48272 * (C48192 + C48193 * C48319)));
    const double C10060 = C48800 * C2315;
    const double C10054 = C48800 * C2300;
    const double C48159 = C48108 * C48157;
    const double C48169 = 3 * C48157;
    const double C48164 = ae * C48157;
    const double C48548 = C48107 * C48157;
    const double C48175 = C48152 + C48171;
    const double C48678 = C48143 + C48677;
    const double C48694 = C48272 * C48693;
    const double C48221 = C48108 * C48219;
    const double C48256 = C48219 * ae;
    const double C48550 = C48219 * C48294;
    const double C48614 = C48212 + C48611;
    const double C48638 = C48107 * C48635;
    const double C48347 = C48107 * C48344;
    const double C48382 = 3 * C48344;
    const double C48378 = ae * C48344;
    const double C48389 = C48152 + C48385;
    const double C48402 = ae * C48399;
    const double C48681 = C48337 + C48680;
    const double C48417 = ae * C48415;
    const double C48687 = C48272 * C48415;
    const double C112 = C49187 / C48842;
    const double C110 = C48837 / C48842 - (C49185 * C49150) / C49151;
    const double C111 = C49185 / C49186 - (C49187 * C49150) / C48832;
    const double C449 = C49185 / C48832;
    const double C515 = C49189 / C48842;
    const double C229 = C49188 / C48832;
    const double C513 = C48871 / C48842 - (C49188 * C49155) / C49151;
    const double C514 = C49188 / C49186 - (C49189 * C49155) / C48832;
    const double C869 = C49191 / C48842;
    const double C339 = C49190 / C48832;
    const double C867 = C48888 / C48842 - (C49190 * C49156) / C49151;
    const double C868 = C49190 / C49186 - (C49191 * C49156) / C48832;
    const double C15279 = (C48917 * std::pow(C48996, 2)) / C47867 + C48995;
    const double C48998 = C48997 * C48996;
    const double C49003 = C48997 / C47874;
    const double C49162 = C48997 / C47862;
    const double C49160 = C48808 * C48997;
    const double C49005 = C49004 * C48996;
    const double C49173 = C48994 * C49004;
    const double C49172 = 2 * C49004;
    const double C49210 = C49004 / C49147;
    const double C17812 = C49004 / C49184;
    const double C36778 = C49004 / C47868;
    const double C49206 = C49169 / C47862;
    const double C15280 = (-2 * C48808 * C49169) / C47862;
    const double C49218 = C49195 / C47867;
    const double C47903 = C47898 + 0;
    const double C47902 = C47897 / C47868;
    const double C47888 = C47873 - C47884;
    const double C47887 = C47860 * C47882;
    const double C1008 =
        ((-C47882 / C47862) / C47868 - (0 * be) / C47862) / C47868 -
        (0 * be) / C47862;
    const double C9060 = -C47882 / C47862;
    const double C23694 = (-C47882 / C47862) / C47868 - (0 * be) / C47862;
    const double C48804 = C48803 / C47867;
    const double C49178 = 2 * C49141;
    const double C11423 = C49139 * C254;
    const double C11419 = C49139 * C247;
    const double C11415 = C49139 * C1172;
    const double C11411 = C49139 * C1167;
    const double C11407 = C49139 * C532;
    const double C11403 = C49139 * C522;
    const double C11399 = C49139 * C255;
    const double C11395 = C49139 * C248;
    const double C11993 = C49139 * C624;
    const double C11989 = C49139 * C634;
    const double C11985 = C49139 * C1401;
    const double C11981 = C49139 * C1406;
    const double C12935 = C49139 * C362;
    const double C12931 = C49139 * C355;
    const double C12927 = C49139 * C363;
    const double C12923 = C49139 * C356;
    const double C13499 = C49139 * C2300;
    const double C13495 = C49139 * C2312;
    const double C13487 = C49139 * C2315;
    const double C14053 = C49139 * C875;
    const double C14049 = C49139 * C885;
    const double C20162 = C49139 * C2736;
    const double C20158 = C49139 * C2741;
    const double C21273 = C49139 * C3652;
    const double C1206 = C1000 * C254;
    const double C1200 = C1000 * C247;
    const double C1194 = C1000 * C532;
    const double C1188 = C1000 * C522;
    const double C1182 = C1000 * C255;
    const double C1176 = C1000 * C248;
    const double C1690 = C1000 * C1167;
    const double C1684 = C1000 * C1172;
    const double C1880 = C1000 * C624;
    const double C1874 = C1000 * C634;
    const double C1868 = C1000 * C1401;
    const double C1862 = C1000 * C1406;
    const double C2775 = C1000 * C362;
    const double C2769 = C1000 * C355;
    const double C2763 = C1000 * C885;
    const double C2757 = C1000 * C875;
    const double C2751 = C1000 * C363;
    const double C2745 = C1000 * C356;
    const double C3237 = C1000 * C2312;
    const double C3231 = C1000 * C2300;
    const double C3675 = C1000 * C2736;
    const double C3669 = C1000 * C2741;
    const double C48812 = C48811 / C47862;
    const double C49182 = C49145 / C47874;
    const double C49212 = C49139 - C49177;
    const double C23687 = -C49177;
    const double C1184 = C1001 * C254;
    const double C1178 = C1001 * C247;
    const double C2753 = C1001 * C362;
    const double C2747 = C1001 * C355;
    const double C49226 = C49211 + C48801;
    const double C48030 = C48024 + 0;
    const double C47997 = C47947 * C47976;
    const double C7764 =
        ((-C47948 / C47862) / C47868 -
         ((C48905 - (C47947 * C47976) / C47862) * be) / C47862) /
            C47868 -
        ((C47947 * ((-C47976 / C47862) / C47868 - (0 * be) / C47862) + C48964) *
         be) /
            C47862;
    const double C7765 =
        ((-C47976 / C47862) / C47868 - (0 * be) / C47862) / C47868 -
        (0 * be) / C47862;
    const double C22516 = (-C47976 / C47862) / C47868 - (0 * be) / C47862;
    const double C48010 = C48006 - C48000;
    const double C48959 = C48958 / C47867;
    const double C1009 =
        (((0 - (C47947 * C47948) / C47862) * ae) / C47862 - (0 * be) / C47874) /
            C47868 +
        ((C47947 * (((C48905 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
                    C47948 / C47874) +
          C49161) *
         ae) /
            C47862 +
        (0 * ae) / C47862 - C47950 / C47867;
    const double C49193 = 2 * C49158;
    const double C48966 = C48965 / C47862;
    const double C49203 = C49167 / C47874;
    const double C49220 = C49161 - C49200;
    const double C22509 = -C49200;
    const double C49229 = C49216 + C48955;
    const double C48033 = C48029 / C47868;
    const double C129 =
        (2 * (C48108 * C48234 + C48441 * ae) +
         C48108 * (C48234 + C48108 * C48238 + C48108 * C48204 * ae) +
         (C48441 + C48204 * C48133) * ae) /
        C47862;
    const double C246 =
        (C48107 * (C48234 + C48108 * C48238 + C48444 * ae)) / C47862;
    const double C354 =
        (C48272 * (C48234 + C48108 * C48238 + C48444 * ae)) / C47862;
    const double C523 =
        (C48108 * C48234 + C48441 * ae + C48238 * C48294) / C47862;
    const double C625 = (C48272 * C48107 * C48238) / C47862;
    const double C876 =
        (C48108 * C48234 + C48441 * ae + C48238 * C48319) / C47862;
    const double C1670 =
        (3 * (C48120 + C48107 * C48539 + C48537 * ae) +
         C48107 * (2 * C48539 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48195) +
                             C48107 * C48192 * ae) +
                   C48540 * ae) +
         (2 * C48537 + C48107 * C48540) * ae) /
        C47862;
    const double C1850 =
        (C48272 * (2 * C48539 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48195) +
                             C48107 * C48192 * ae) +
                   C48540 * ae)) /
        C47862;
    const double C2303 =
        (C48107 * C48120 + C48441 * ae + C48539 * C48319) / C47862;
    const double C2309 =
        (C48120 + C48107 * C48539 + C48537 * ae +
         (C48127 + C48107 * (C48107 * C48137 + C48195) + C48107 * C48192 * ae) *
             C48319) /
        C47862;
    const double C3223 =
        (2 * C48272 * C48539 +
         C48272 * (C48539 + (C48107 * C48137 + C48195) * C48319)) /
        C47862;
    const double C135 = (3 * (C48120 + C48127 * C48133) +
                         C48108 * (2 * C48129 + C48108 * C48141)) /
                        C47862;
    const double C240 = (C48107 * (2 * C48129 + C48108 * C48141) +
                         (2 * C48444 + C48108 * C48446) * ae) /
                        C47862;
    const double C348 = (C48272 * (2 * C48129 + C48108 * C48141)) / C47862;
    const double C529 =
        (C48120 + C48127 * C48133 + C48107 * (C48107 * C48141 + C48446 * ae) +
         C48107 * C48446 * ae) /
        C47862;
    const double C631 = (C48272 * (C48107 * C48141 + C48446 * ae)) / C47862;
    const double C882 = (C48120 + C48127 * C48133 + C48141 * C48319) / C47862;
    const double C2731 =
        (2 * C48272 * C48141 + C48272 * (C48141 + C48157 * C48319)) / C47862;
    const double C48158 = C48108 * C48156;
    const double C48163 = 2 * C48156;
    const double C48301 = C48107 * C48156;
    const double C48315 = C48272 * C48156;
    const double C48151 = C48136 + C48147;
    const double C48545 = C48542 + C48241;
    const double C48601 = C48107 * C48597;
    const double C48627 = 2 * C48597;
    const double C17983 =
        (4 * (2 * C48272 * C48127 + C48272 * C48669) +
         C48272 *
             (3 * C48669 + C48272 * (2 * C48272 * C48137 +
                                     C48272 * (C48137 + C48153 * C48319)))) /
        C47862;
    const double C144 =
        (3 * (C48126 + ae * C48129 + C48108 * C48140) +
         ae * (2 * C48129 + C48108 * C48141) +
         C48108 *
             (2 * C48140 + ae * C48141 +
              C48108 * (C48136 + ae * C48108 * C48137 +
                        C48108 * (ae * C48137 + C48108 * std::pow(C48110, 6) *
                                                    bs[6] * C48118)))) /
        C47867;
    const double C253 = (ae * (C48117 * C48113 * C48191 +
                               C48108 * (C48108 * C48205 + C48204 * ae) +
                               C48108 * C48204 * ae) +
                         C48107 * (C48126 + ae * C48129 + C48108 * C48140)) /
                        C47867;
    const double C361 =
        ((zP - zQ) * (C48126 + ae * C48129 + C48108 * C48140)) / C47867;
    const double C533 = (ae * C48120 + C48108 * C48126 + ae * C48107 * C48238 +
                         C48107 * (ae * C48238 + C48107 * C48140)) /
                        C47867;
    const double C635 =
        (ae * C48272 * C48238 + C48107 * C48272 * C48140) / C47867;
    const double C886 =
        (ae * C48120 + C48108 * C48126 + C48140 * std::pow(C48272, 2)) / C47867;
    const double C2740 =
        (2 * C48272 * C48140 + C48272 * (C48140 + C48156 * C48319)) / C47867;
    const double C10708 = C48800 * C3226;
    const double C19606 = C49139 * C3226;
    const double C17999 = C48800 * C3658;
    const double C21269 = C49139 * C3658;
    const double C48247 = C48199 * ae;
    const double C48455 = C48108 * C48199;
    const double C48458 = 3 * C48199;
    const double C48549 = C48107 * C48199;
    const double C1158 =
        2 * C48107 * C48446 + C48107 * (C48446 + C48199 * C48294);
    const double C1392 = C48272 * (C48446 + C48199 * C48294);
    const double C2727 =
        2 * C48272 * C48446 + C48272 * (C48446 + C48199 * C48319);
    const double C3651 =
        3 * (C48446 + C48199 * C48319) +
        C48272 * (2 * C48272 * C48199 + C48272 * (C48199 + C48219 * C48319));
    const double C48612 = C48609 + C48215;
    const double C48546 = C48196 + C48544;
    const double C48615 = 2 * C48610;
    const double C48613 = C48610 * ae;
    const double C3218 =
        2 * C48272 * C48543 + C48272 * (C48543 + C48610 * C48319);
    const double C17895 =
        3 * (C48543 + C48610 * C48319) +
        C48272 * (2 * C48272 * C48610 +
                  C48272 * (C48610 + C48107 * C48255 * C48319));
    const double C48781 = C48196 + C48780;
    const double C48222 = C48108 * C48220;
    const double C48252 = 2 * C48220;
    const double C48302 = C48220 * C48294;
    const double C48352 = ae * C48220;
    const double C48351 = C48107 * C48220;
    const double C48371 = C48272 * C48220;
    const double C48674 = C48220 * C48319;
    const double C48637 = C48107 * C48633;
    const double C48683 = C48633 * C48319;
    const double C11131 =
        (3 * (C48539 + C48597 * C48319) +
         C48272 * (2 * C48272 * C48597 + C48272 * (C48597 + C48633 * C48319))) /
        C47862;
    const double C48602 = C48107 * C48599;
    const double C48632 = 3 * C48599;
    const double C48630 = C48599 * ae;
    const double C10234 =
        2 * C48272 * C48540 + C48272 * (C48540 + C48599 * C48319);
    const double C11129 =
        3 * (C48540 + C48599 * C48319) +
        C48272 * (2 * C48272 * C48599 + C48272 * (C48599 + C48635 * C48319));
    const double C48784 = C48595 + C48783;
    const double C48790 = C48272 * C48789;
    const double C48240 = C48108 * C48201;
    const double C48245 = 2 * C48201;
    const double C48300 = ae * C48201;
    const double C48299 = C48107 * C48201;
    const double C1171 = (2 * (ae * C48238 + C48107 * C48140) +
                          ae * (C48238 + C48201 * std::pow(C48107, 2)) +
                          C48107 * (C48140 + ae * C48107 * C48201 +
                                    C48107 * (ae * C48201 + C48107 * C48156))) /
                         C47867;
    const double C1405 =
        (C48272 * C48140 + ae * C48272 * C48107 * C48201 +
         C48107 * (ae * C48272 * C48201 + C48107 * C48272 * C48156)) /
        C47867;
    const double C2313 = (ae * (C48238 + C48201 * C48319) +
                          C48107 * (C48140 + C48156 * C48319)) /
                         C47867;
    const double C1166 =
        (2 * C48107 * C48238 + C48107 * (C48238 + C48201 * C48294)) / C47862;
    const double C1400 = (C48272 * (C48238 + C48201 * C48294)) / C47862;
    const double C2735 =
        (2 * C48272 * C48238 + C48272 * (C48238 + C48201 * C48319)) / C47862;
    const double C3653 =
        (3 * (C48238 + C48201 * C48319) +
         C48272 * (2 * C48272 * C48201 + C48272 * (C48201 + C48220 * C48319))) /
        C47862;
    const double C1673 =
        (3 * (C48126 + ae * C48291 + C48107 * C48295) +
         ae * (2 * C48291 + C48107 * C48297) +
         C48107 * (2 * C48295 + ae * C48297 +
                   C48107 * (C48136 + ae * C48107 * C48198 +
                             C48107 * (ae * C48198 + C48107 * C48152)))) /
        C47867;
    const double C1853 =
        (2 * (ae * C48272 * C48205 + C48107 * C48313) + ae * C48272 * C48297 +
         C48107 *
             (C48313 + ae * C48272 * C48107 * C48198 +
              C48107 * (ae * C48272 * C48198 + C48107 * C48272 * C48152))) /
        C47867;
    const double C9790 =
        (2 * (ae * (C48205 + C48198 * C48319) + C48107 * C48411) +
         ae * (C48297 + C48344 * C48319) +
         C48107 * (C48411 + ae * (C48337 + C48379 * C48319) +
                   C48107 * (ae * (C48198 + C48214 * C48319) +
                             C48107 * (C48152 + C48176 * C48319)))) /
        C47867;
    const double C1667 = (3 * (C48234 + C48205 * C48294) +
                          C48107 * (2 * C48291 + C48107 * C48297)) /
                         C47862;
    const double C1847 = (C48272 * (2 * C48291 + C48107 * C48297)) / C47862;
    const double C2306 = (C48234 + C48205 * C48294 + C48297 * C48319) / C47862;
    const double C10237 =
        (2 * C48272 * C48297 + C48272 * (C48297 + C48344 * C48319)) / C47862;
    const double C48346 = C48107 * C48342;
    const double C48377 = 2 * C48342;
    const double C48345 = C48136 + C48341;
    const double C10710 = C48800 * C3220;
    const double C19610 = C49139 * C3220;
    const double C18261 = C48800 * C11130;
    const double C48369 = C48367 + C48368;
    const double C17984 =
        (4 * (2 * C48272 * C48205 + C48272 * C48672) +
         C48272 * (3 * C48672 + C48272 * (2 * C48365 + C48272 * C48415))) /
        C47862;
    const double C48183 = C48108 * C48181;
    const double C3657 =
        (3 * (C48141 + C48157 * C48319) +
         C48272 * (2 * C48272 * C48157 + C48272 * (C48157 + C48181 * C48319))) /
        C47862;
    const double C48182 = C48108 * C48180;
    const double C48353 = C48107 * C48180;
    const double C48372 = C48272 * C48180;
    const double C48421 = C48180 * C48319;
    const double C48390 = C48107 * C48386;
    const double C48406 = C48403 + C48404;
    const double C48418 = C48107 * C48416;
    const double C48427 = C48272 * C48416;
    const double C10240 =
        (2 * C48313 + C48272 * C48411 +
         ae * (2 * C48272 * C48337 + C48272 * (C48337 + C48379 * C48319)) +
         C48107 * (ae * (2 * C48365 + C48272 * C48415) +
                   C48107 * (2 * C48366 + C48272 * C48416))) /
        C47867;
    const double C48262 = C48108 * C48261;
    const double C48354 = C48261 * C48294;
    const double C48391 = C48107 * C48388;
    const double C11132 =
        (3 * (C48297 + C48344 * C48319) +
         C48272 * (2 * C48272 * C48344 + C48272 * (C48344 + C48388 * C48319))) /
        C47862;
    const double C48161 = C48149 + C48159;
    const double C17986 =
        (4 * (2 * C48272 * C48143 + C48272 * C48678) +
         C48272 * (3 * C48678 +
                   C48272 * (2 * C48272 * C48165 +
                             C48272 * (C48165 + C48108 * C48177 * C48319)))) /
        C47862;
    const double C48695 = C48692 + C48694;
    const double C48223 = C48217 + C48221;
    const double C48552 = C48199 + C48550;
    const double C48617 = C48107 * C48614;
    const double C48640 = C48636 + C48638;
    const double C48349 = C48343 + C48347;
    const double C48405 = C48366 + C48402;
    const double C18250 =
        (4 * (2 * C48272 * C48337 + C48272 * C48681) +
         C48272 * (3 * C48681 +
                   C48272 * (2 * C48399 +
                             C48272 * (C48379 + C48107 * C48258 * C48319)))) /
        C47862;
    const double C48688 = C48686 + C48687;
    const double C48999 = C48998 / C47867;
    const double C49196 = 2 * C49160;
    const double C49006 = C49005 / C47862;
    const double C49209 = C49173 / C47874;
    const double C49223 = C49162 - C49206;
    const double C31302 = -C49206;
    const double C49230 = C49218 + C48995;
    const double C47906 = C47903 * be;
    const double C11428 = C47888 * C519;
    const double C11424 = C47888 * C241;
    const double C11420 = C47888 * C235;
    const double C11416 = C47888 * C1163;
    const double C11412 = C47888 * C1159;
    const double C11408 = C47888 * C528;
    const double C11404 = C47888 * C518;
    const double C11400 = C47888 * C242;
    const double C11396 = C47888 * C236;
    const double C11990 = C47888 * C620;
    const double C11986 = C47888 * C630;
    const double C11982 = C47888 * C1393;
    const double C11978 = C47888 * C1397;
    const double C12706 = C47888 * C621;
    const double C12936 = C47888 * C349;
    const double C12932 = C47888 * C343;
    const double C12928 = C47888 * C350;
    const double C12924 = C47888 * C344;
    const double C13496 = C47888 * C2295;
    const double C14050 = C47888 * C871;
    const double C14046 = C47888 * C881;
    const double C19057 = C47888 * C872;
    const double C20159 = C47888 * C2728;
    const double C20155 = C47888 * C2732;
    const double C21270 = C47888 * C3650;
    const double C21266 = C47888 * C3656;
    const double C47892 = C47860 * C47888;
    const double C47920 = C47888 / C47868;
    const double C47891 = C47887 / C47862;
    const double C1203 = C1008 * C234;
    const double C1191 = C1008 * C519;
    const double C1185 = C1008 * C241;
    const double C1179 = C1008 * C235;
    const double C1875 = C1008 * C621;
    const double C2772 = C1008 * C342;
    const double C2760 = C1008 * C872;
    const double C2754 = C1008 * C349;
    const double C2748 = C1008 * C343;
    const double C9183 = C9060 * C1163;
    const double C9181 = C9060 * C1159;
    const double C9179 = C9060 * C528;
    const double C9177 = C9060 * C518;
    const double C9175 = C9060 * C242;
    const double C9173 = C9060 * C236;
    const double C9169 = C9060 * C1664;
    const double C9167 = C9060 * C1164;
    const double C9165 = C9060 * C1160;
    const double C9163 = C9060 * C527;
    const double C9161 = C9060 * C517;
    const double C9159 = C9060 * C243;
    const double C9157 = C9060 * C237;
    const double C9549 = C9060 * C619;
    const double C9547 = C9060 * C629;
    const double C9545 = C9060 * C1394;
    const double C9543 = C9060 * C1398;
    const double C9541 = C9060 * C1844;
    const double C10069 = C9060 * C2295;
    const double C10067 = C9060 * C1397;
    const double C10065 = C9060 * C1393;
    const double C10063 = C9060 * C630;
    const double C10061 = C9060 * C620;
    const double C10057 = C9060 * C2297;
    const double C10053 = C9060 * C2294;
    const double C10269 = C9060 * C881;
    const double C10267 = C9060 * C871;
    const double C10261 = C9060 * C350;
    const double C10259 = C9060 * C344;
    const double C10253 = C9060 * C880;
    const double C10251 = C9060 * C870;
    const double C10245 = C9060 * C351;
    const double C10243 = C9060 * C345;
    const double C10709 = C9060 * C3217;
    const double C11144 = C9060 * C2729;
    const double C11142 = C9060 * C2733;
    const double C18010 = C9060 * C3656;
    const double C18008 = C9060 * C3650;
    const double C18006 = C9060 * C2732;
    const double C18004 = C9060 * C2728;
    const double C17998 = C9060 * C3655;
    const double C17996 = C9060 * C3649;
    const double C18260 = C9060 * C11128;
    const double C18503 = C9060 * C17981;
    const double C23864 = C23694 * C519;
    const double C23860 = C23694 * C241;
    const double C23856 = C23694 * C235;
    const double C23852 = C23694 * C1163;
    const double C23848 = C23694 * C1159;
    const double C23844 = C23694 * C528;
    const double C23840 = C23694 * C518;
    const double C23836 = C23694 * C242;
    const double C23832 = C23694 * C236;
    const double C24426 = C23694 * C620;
    const double C24422 = C23694 * C630;
    const double C24418 = C23694 * C1393;
    const double C24414 = C23694 * C1397;
    const double C25150 = C23694 * C621;
    const double C25142 = C23694 * C2295;
    const double C25396 = C23694 * C872;
    const double C25392 = C23694 * C349;
    const double C25388 = C23694 * C343;
    const double C25384 = C23694 * C881;
    const double C25380 = C23694 * C871;
    const double C25376 = C23694 * C350;
    const double C25372 = C23694 * C344;
    const double C26526 = C23694 * C2728;
    const double C26522 = C23694 * C2732;
    const double C35053 = C23694 * C3650;
    const double C35049 = C23694 * C3656;
    const double C48805 = C48801 - C48804;
    const double C49213 = C49178 / C47862;
    const double C48813 = C48809 - C48812;
    const double C49227 = C49212 / C47868;
    const double C23859 = C23687 * C254;
    const double C23855 = C23687 * C247;
    const double C23851 = C23687 * C1172;
    const double C23847 = C23687 * C1167;
    const double C23843 = C23687 * C532;
    const double C23839 = C23687 * C522;
    const double C23835 = C23687 * C255;
    const double C23831 = C23687 * C248;
    const double C24429 = C23687 * C624;
    const double C24425 = C23687 * C634;
    const double C24421 = C23687 * C1401;
    const double C24417 = C23687 * C1406;
    const double C25145 = C23687 * C2312;
    const double C25141 = C23687 * C2300;
    const double C25391 = C23687 * C362;
    const double C25387 = C23687 * C355;
    const double C25383 = C23687 * C885;
    const double C25379 = C23687 * C875;
    const double C25375 = C23687 * C363;
    const double C25371 = C23687 * C356;
    const double C25761 = C23687 * C2315;
    const double C25975 = C23687 * C3220;
    const double C25971 = C23687 * C3226;
    const double C26529 = C23687 * C2736;
    const double C26525 = C23687 * C2741;
    const double C35056 = C23687 * C3652;
    const double C35052 = C23687 * C3658;
    const double C7944 = C49226 * C254;
    const double C7938 = C49226 * C247;
    const double C7932 = C49226 * C532;
    const double C7926 = C49226 * C522;
    const double C7920 = C49226 * C255;
    const double C7914 = C49226 * C248;
    const double C8400 = C49226 * C1167;
    const double C8394 = C49226 * C1172;
    const double C8578 = C49226 * C624;
    const double C8572 = C49226 * C634;
    const double C8566 = C49226 * C1401;
    const double C8560 = C49226 * C1406;
    const double C15606 = C49226 * C362;
    const double C15600 = C49226 * C355;
    const double C15594 = C49226 * C885;
    const double C15588 = C49226 * C875;
    const double C15582 = C49226 * C363;
    const double C15576 = C49226 * C356;
    const double C16056 = C49226 * C2312;
    const double C16050 = C49226 * C2300;
    const double C16482 = C49226 * C2736;
    const double C16476 = C49226 * C2741;
    const double C48034 = C48030 * be;
    const double C48005 = C47997 / C47862;
    const double C48014 = C47947 * C48010;
    const double C48043 = C48010 / C47868;
    const double C48960 = C48955 - C48959;
    const double C49217 = C49193 / C47862;
    const double C48967 = C48963 - C48966;
    const double C49231 = C49220 / C47868;
    const double C7763 =
        ((-(0 * be) / C47862) / C47868 -
         ((0 - (C47947 * C47948) / C47862) * be) / C47862) /
            C47868 -
        ((C47947 * ((-C47948 / C47862) / C47868 -
                    ((C48905 - (C47947 * C47976) / C47862) * be) / C47862) +
          C22509) *
         be) /
            C47862 +
        (-C47976 / C47862) / C47868 - (0 * be) / C47862;
    const double C1202 = C1001 * C246;
    const double C1180 = C49181 * C246;
    const double C7918 = C49181 * C246;
    const double C11421 = C48810 * C246;
    const double C23857 = C48810 * C246;
    const double C26812 = C26650 * C246;
    const double C2771 = C1001 * C354;
    const double C2749 = C49181 * C354;
    const double C12933 = C48810 * C354;
    const double C15580 = C49181 * C354;
    const double C25389 = C48810 * C354;
    const double C28444 = C26650 * C354;
    const double C1212 = C1000 * C523;
    const double C1190 = C1001 * C523;
    const double C7950 = C49226 * C523;
    const double C9178 = C48800 * C523;
    const double C11427 = C49139 * C523;
    const double C11405 = C48810 * C523;
    const double C23863 = C23687 * C523;
    const double C23841 = C48810 * C523;
    const double C1878 = C1001 * C625;
    const double C6358 = C1000 * C625;
    const double C10062 = C48800 * C625;
    const double C11991 = C48810 * C625;
    const double C12705 = C49139 * C625;
    const double C24427 = C48810 * C625;
    const double C25149 = C23687 * C625;
    const double C39869 = C49226 * C625;
    const double C2781 = C1000 * C876;
    const double C2759 = C1001 * C876;
    const double C10268 = C48800 * C876;
    const double C14051 = C48810 * C876;
    const double C15612 = C49226 * C876;
    const double C19056 = C49139 * C876;
    const double C25395 = C23687 * C876;
    const double C25381 = C48810 * C876;
    const double C9171 = C9060 * C1670;
    const double C9539 = C9060 * C1850;
    const double C10055 = C9060 * C2303;
    const double C10059 = C9060 * C2309;
    const double C10707 = C9060 * C3223;
    const double C1209 = C1008 * C240;
    const double C2778 = C1008 * C348;
    const double C1197 = C1008 * C529;
    const double C11432 = C47888 * C529;
    const double C23868 = C23694 * C529;
    const double C1869 = C1008 * C631;
    const double C12710 = C47888 * C631;
    const double C25154 = C23694 * C631;
    const double C2766 = C1008 * C882;
    const double C19061 = C47888 * C882;
    const double C25400 = C23694 * C882;
    const double C3664 = C1008 * C2731;
    const double C20540 = C47888 * C2731;
    const double C34323 = C23694 * C2731;
    const double C48170 = C48163 + C48164;
    const double C3227 =
        (ae * (2 * C48272 * C48201 + C48272 * (C48201 + C48220 * C48319)) +
         C48107 * (2 * C48315 + C48272 * (C48156 + C48180 * C48319))) /
        C47867;
    const double C3659 =
        (3 * (C48140 + C48156 * C48319) +
         C48272 * (2 * C48315 + C48272 * (C48156 + C48180 * C48319))) /
        C47867;
    const double C48160 = C48151 + C48158;
    const double C2304 =
        (C48107 * C48129 + C48444 * ae + C48545 * C48319) / C47862;
    const double C2310 =
        (C48129 + C48107 * C48545 + C48543 * ae +
         (C48143 + C48107 * (C48107 * C48165 + C48215) + C48107 * C48212 * ae) *
             C48319) /
        C47862;
    const double C3224 =
        (2 * C48272 * C48545 +
         C48272 * (C48545 + (C48107 * C48165 + C48215) * C48319)) /
        C47862;
    const double C48603 = C48127 + C48601;
    const double C18501 = C9060 * C17983;
    const double C1208 = C1001 * C253;
    const double C1186 = C49181 * C253;
    const double C7924 = C49181 * C253;
    const double C11425 = C48810 * C253;
    const double C23861 = C48810 * C253;
    const double C26818 = C26650 * C253;
    const double C2777 = C1001 * C361;
    const double C2755 = C49181 * C361;
    const double C12937 = C48810 * C361;
    const double C15586 = C49181 * C361;
    const double C25393 = C48810 * C361;
    const double C28450 = C26650 * C361;
    const double C1218 = C1000 * C533;
    const double C1196 = C1001 * C533;
    const double C7956 = C49226 * C533;
    const double C9180 = C48800 * C533;
    const double C11431 = C49139 * C533;
    const double C11409 = C48810 * C533;
    const double C23867 = C23687 * C533;
    const double C23845 = C48810 * C533;
    const double C1872 = C1001 * C635;
    const double C6364 = C1000 * C635;
    const double C10064 = C48800 * C635;
    const double C11987 = C48810 * C635;
    const double C12709 = C49139 * C635;
    const double C24423 = C48810 * C635;
    const double C25153 = C23687 * C635;
    const double C39875 = C49226 * C635;
    const double C2787 = C1000 * C886;
    const double C2765 = C1001 * C886;
    const double C10270 = C48800 * C886;
    const double C14047 = C48810 * C886;
    const double C15618 = C49226 * C886;
    const double C19060 = C49139 * C886;
    const double C25399 = C23687 * C886;
    const double C25385 = C48810 * C886;
    const double C3667 = C1001 * C2740;
    const double C18007 = C48800 * C2740;
    const double C20156 = C48810 * C2740;
    const double C20539 = C49139 * C2740;
    const double C26523 = C48810 * C2740;
    const double C34322 = C23687 * C2740;
    const double C48551 = C48548 + C48247;
    const double C1162 =
        (2 * (C48107 * C48141 + C48446 * ae) +
         C48107 * (C48141 + C48107 * (C48107 * C48157 + C48247) +
                   C48107 * C48199 * ae) +
         (C48446 + C48199 * C48294) * ae) /
        C47862;
    const double C1396 =
        (C48272 * (C48141 + C48107 * (C48107 * C48157 + C48247) +
                   C48107 * C48199 * ae)) /
        C47862;
    const double C48456 = C48454 + C48455;
    const double C2296 = C48107 * C48446 + C48549 * C48319;
    const double C3219 =
        2 * C48272 * C48549 + C48272 * (C48549 + C48107 * C48219 * C48319);
    const double C1685 = C1008 * C1158;
    const double C11436 = C47888 * C1158;
    const double C23872 = C23694 * C1158;
    const double C1863 = C1008 * C1392;
    const double C12714 = C47888 * C1392;
    const double C29929 = C23694 * C1392;
    const double C3670 = C1008 * C2727;
    const double C20536 = C47888 * C2727;
    const double C34319 = C23694 * C2727;
    const double C48616 = C48107 * C48612;
    const double C17897 =
        (3 * (C48545 + C48612 * C48319) +
         C48272 * (2 * C48272 * C48612 +
                   C48272 * (C48612 +
                             (C48107 * C48108 * C48177 + C48259) * C48319))) /
        C47862;
    const double C1671 =
        (3 * (C48129 + C48107 * C48545 + C48543 * ae) +
         C48107 * (2 * C48545 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48215) +
                             C48107 * C48212 * ae) +
                   C48546 * ae) +
         (2 * C48543 + C48107 * C48546) * ae) /
        C47862;
    const double C1851 =
        (C48272 * (2 * C48545 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48215) +
                             C48107 * C48212 * ae) +
                   C48546 * ae)) /
        C47862;
    const double C1665 = 3 * (C48444 + C48196 * C48294) +
                         C48107 * (2 * C48543 + C48107 * C48546);
    const double C1845 = C48272 * (2 * C48543 + C48107 * C48546);
    const double C2298 = C48444 + C48196 * C48294 + C48546 * C48319;
    const double C10235 =
        2 * C48272 * C48546 + C48272 * (C48546 + C48614 * C48319);
    const double C19607 = C47888 * C3218;
    const double C21510 = C9060 * C3218;
    const double C25972 = C23694 * C3218;
    const double C17982 =
        4 * (2 * C48272 * C48196 + C48272 * C48781) +
        C48272 * (3 * C48781 + C48272 * (2 * C48272 * C48212 +
                                         C48272 * (C48212 + C48255 * C48319)));
    const double C48224 = C48198 + C48222;
    const double C48304 = C48201 + C48302;
    const double C48357 = 2 * C48351;
    const double C48355 = ae * C48351;
    const double C48373 = ae * C48371;
    const double C48675 = C48201 + C48674;
    const double C48639 = C48137 + C48637;
    const double C48684 = C48597 + C48683;
    const double C18262 = C9060 * C11131;
    const double C48604 = C48600 + C48602;
    const double C10705 = C9060 * C10234;
    const double C18249 =
        4 * (2 * C48272 * C48595 + C48272 * C48784) +
        C48272 * (3 * C48784 +
                  C48272 * (2 * C48272 * C48629 +
                            C48272 * (C48629 + C48107 * C48213 * C48319)));
    const double C48791 = C48788 + C48790;
    const double C48242 = C48205 + C48240;
    const double C48303 = C48300 + C48301;
    const double C2316 =
        (C48140 + C48156 * C48319 + ae * (C48299 + C48107 * C48220 * C48319) +
         C48107 * (ae * (C48201 + C48220 * C48319) +
                   C48107 * (C48156 + C48180 * C48319))) /
        C47867;
    const double C2301 = (C48107 * C48238 + C48299 * C48319) / C47862;
    const double C3221 =
        (2 * C48272 * C48299 + C48272 * (C48299 + C48351 * C48319)) / C47862;
    const double C17896 =
        (3 * (C48299 + C48351 * C48319) +
         C48272 * (2 * C48272 * C48351 +
                   C48272 * (C48351 + C48107 * C48261 * C48319))) /
        C47862;
    const double C1682 = C1001 * C1171;
    const double C9184 = C48800 * C1171;
    const double C11439 = C49139 * C1171;
    const double C11417 = C48810 * C1171;
    const double C23875 = C23687 * C1171;
    const double C23853 = C48810 * C1171;
    const double C1860 = C1001 * C1405;
    const double C10068 = C48800 * C1405;
    const double C11979 = C48810 * C1405;
    const double C12717 = C49139 * C1405;
    const double C24415 = C48810 * C1405;
    const double C29932 = C23687 * C1405;
    const double C3239 = C1001 * C2313;
    const double C10072 = C48800 * C2313;
    const double C13493 = C48810 * C2313;
    const double C18854 = C49139 * C2313;
    const double C25161 = C23687 * C2313;
    const double C25147 = C48810 * C2313;
    const double C1688 = C1001 * C1166;
    const double C9182 = C48800 * C1166;
    const double C11435 = C49139 * C1166;
    const double C11413 = C48810 * C1166;
    const double C23871 = C23687 * C1166;
    const double C23849 = C48810 * C1166;
    const double C1866 = C1001 * C1400;
    const double C10066 = C48800 * C1400;
    const double C11983 = C48810 * C1400;
    const double C12713 = C49139 * C1400;
    const double C24419 = C48810 * C1400;
    const double C29928 = C23687 * C1400;
    const double C3673 = C1001 * C2735;
    const double C18005 = C48800 * C2735;
    const double C20160 = C48810 * C2735;
    const double C20535 = C49139 * C2735;
    const double C26527 = C48810 * C2735;
    const double C34318 = C23687 * C2735;
    const double C18009 = C48800 * C3653;
    const double C21271 = C48810 * C3653;
    const double C35054 = C48810 * C3653;
    const double C9172 = C48800 * C1673;
    const double C11831 = C49139 * C1673;
    const double C24267 = C23687 * C1673;
    const double C9540 = C48800 * C1853;
    const double C11973 = C49139 * C1853;
    const double C24409 = C23687 * C1853;
    const double C10548 = C48800 * C9790;
    const double C9170 = C48800 * C1667;
    const double C11835 = C49139 * C1667;
    const double C24271 = C23687 * C1667;
    const double C9542 = C48800 * C1847;
    const double C11977 = C49139 * C1847;
    const double C24413 = C23687 * C1847;
    const double C10058 = C48800 * C2306;
    const double C13491 = C49139 * C2306;
    const double C25765 = C23687 * C2306;
    const double C10706 = C48800 * C10237;
    const double C48384 = C48377 + C48378;
    const double C48348 = C48345 + C48346;
    const double C18504 = C48800 * C17984;
    const double C48185 = C48173 + C48183;
    const double C48184 = C48175 + C48182;
    const double C48356 = C48352 + C48353;
    const double C48374 = C48107 * C48372;
    const double C48422 = C48156 + C48421;
    const double C48392 = C48389 + C48390;
    const double C48407 = C48107 * C48406;
    const double C48419 = C48417 + C48418;
    const double C48428 = C48426 + C48427;
    const double C10704 = C48800 * C10240;
    const double C48263 = C48214 + C48262;
    const double C48358 = C48220 + C48354;
    const double C48393 = C48387 + C48391;
    const double C136 = (4 * (2 * C48129 + C48108 * C48141) +
                         C48108 * (3 * C48141 + C48108 * C48161)) /
                        C47862;
    const double C347 = (C48272 * (3 * C48141 + C48108 * C48161)) / C47862;
    const double C883 =
        (2 * C48129 + C48108 * C48141 + C48161 * C48319) / C47862;
    const double C18495 =
        (5 * (3 * C48669 + C48272 * C48695) +
         C48272 * (4 * C48695 +
                   C48272 * (3 * C48693 +
                             C48272 * (2 * C48272 * C48153 +
                                       C48272 * (C48153 + C48177 * C48319))))) /
        C47862;
    const double C48257 = C48223 * ae;
    const double C48459 = C48108 * C48223;
    const double C1666 = 3 * (C48446 + C48199 * C48294) +
                         C48107 * (2 * C48549 + C48107 * C48552);
    const double C1846 = C48272 * (2 * C48549 + C48107 * C48552);
    const double C2299 = C48446 + C48199 * C48294 + C48552 * C48319;
    const double C48619 = C48615 + C48617;
    const double C48642 = C48107 * C48640;
    const double C9292 =
        (3 * (C48313 + ae * C48272 * C48337 + C48107 * C48369) +
         ae * C48272 * C48349 +
         C48107 * (2 * C48369 + ae * C48272 * C48344 +
                   C48107 * (C48366 + ae * C48272 * C48107 * C48214 +
                             C48107 * (ae * C48272 * C48214 +
                                       C48107 * C48272 * C48176)))) /
        C47867;
    const double C9151 = (4 * (2 * C48291 + C48107 * C48297) +
                          C48107 * (3 * C48297 + C48107 * C48349)) /
                         C47862;
    const double C9289 = (C48272 * (3 * C48297 + C48107 * C48349)) / C47862;
    const double C9786 =
        (2 * C48291 + C48107 * C48297 + C48349 * C48319) / C47862;
    const double C18494 =
        (5 * (3 * C48672 + C48272 * C48688) +
         C48272 * (4 * C48688 +
                   C48272 * (3 * C48415 +
                             C48272 * (2 * C48400 +
                                       C48272 * (C48214 + C48258 * C48319))))) /
        C47862;
    const double C49000 = C48995 - C48999;
    const double C49219 = C49196 / C47862;
    const double C49007 = C49003 - C49006;
    const double C49233 = C49223 / C47868;
    const double C47908 = C47906 / C47862;
    const double C11445 = C11400 + C11401;
    const double C11443 = C11396 + C11397;
    const double C12941 = C12928 + C12929;
    const double C12939 = C12924 + C12925;
    const double C47896 = C47892 + C48810;
    const double C47923 = C47920 - C47922;
    const double C7762 = C47920 + (0 * ae) / C47862;
    const double C47895 = C48800 - C47891;
    const double C9198 = C9175 + C9176;
    const double C9197 = C9173 + C9174;
    const double C9194 = C9167 + C9168;
    const double C9193 = C9165 + C9166;
    const double C9192 = C9163 + C9164;
    const double C9191 = C9161 + C9162;
    const double C9190 = C9159 + C9160;
    const double C9189 = C9157 + C9158;
    const double C9558 = C9549 + C9550;
    const double C9557 = C9547 + C9548;
    const double C9556 = C9545 + C9546;
    const double C9555 = C9543 + C9544;
    const double C10077 = C10053 + C10054;
    const double C10280 = C10261 + C10262;
    const double C10279 = C10259 + C10260;
    const double C10278 = C10253 + C10254;
    const double C10277 = C10251 + C10252;
    const double C10276 = C10245 + C10246;
    const double C10275 = C10243 + C10244;
    const double C10726 = C10709 + C10710;
    const double C11148 = C11144 + C11145;
    const double C11147 = C11142 + C11143;
    const double C18013 = C17998 + C17999;
    const double C18012 = C17996 + C17997;
    const double C18264 = C18260 + C18261;
    const double C23881 = C23836 + C23837;
    const double C23879 = C23832 + C23833;
    const double C25405 = C25376 + C25377;
    const double C25403 = C25372 + C25373;
    const double C26850 = C48805 * C533;
    const double C26844 = C48805 * C523;
    const double C26838 = C48805 * C254;
    const double C26832 = C48805 * C247;
    const double C26826 = C48805 * C532;
    const double C26820 = C48805 * C522;
    const double C26814 = C48805 * C255;
    const double C26808 = C48805 * C248;
    const double C27294 = C48805 * C1167;
    const double C27288 = C48805 * C1172;
    const double C27472 = C48805 * C624;
    const double C27466 = C48805 * C634;
    const double C27460 = C48805 * C1401;
    const double C27454 = C48805 * C1406;
    const double C28234 = C48805 * C635;
    const double C28228 = C48805 * C625;
    const double C28458 = C48805 * C362;
    const double C28452 = C48805 * C355;
    const double C28446 = C48805 * C363;
    const double C28440 = C48805 * C356;
    const double C29022 = C48805 * C2300;
    const double C29016 = C48805 * C2312;
    const double C29580 = C48805 * C875;
    const double C29574 = C48805 * C885;
    const double C37079 = C48805 * C886;
    const double C37073 = C48805 * C876;
    const double C37907 = C48805 * C2736;
    const double C37901 = C48805 * C2741;
    const double C49138 = C48805 * C48795;
    const double C49180 = C49143 + C48805;
    const double C7946 = C49213 * C253;
    const double C7940 = C49213 * C246;
    const double C7934 = C49213 * C533;
    const double C7928 = C49213 * C523;
    const double C7922 = C49213 * C254;
    const double C7916 = C49213 * C247;
    const double C8398 = C49213 * C1166;
    const double C8392 = C49213 * C1171;
    const double C8576 = C49213 * C625;
    const double C8570 = C49213 * C635;
    const double C8564 = C49213 * C1400;
    const double C8558 = C49213 * C1405;
    const double C15608 = C49213 * C361;
    const double C15602 = C49213 * C354;
    const double C15596 = C49213 * C886;
    const double C15590 = C49213 * C876;
    const double C15584 = C49213 * C362;
    const double C15578 = C49213 * C355;
    const double C16058 = C49213 * C2313;
    const double C16480 = C49213 * C2735;
    const double C16474 = C49213 * C2740;
    const double C26840 = C48813 * C253;
    const double C26834 = C48813 * C246;
    const double C26828 = C48813 * C533;
    const double C26822 = C48813 * C523;
    const double C26816 = C48813 * C254;
    const double C26810 = C48813 * C247;
    const double C27292 = C48813 * C1166;
    const double C27286 = C48813 * C1171;
    const double C27470 = C48813 * C625;
    const double C27464 = C48813 * C635;
    const double C27458 = C48813 * C1400;
    const double C27452 = C48813 * C1405;
    const double C28460 = C48813 * C361;
    const double C28454 = C48813 * C354;
    const double C28448 = C48813 * C362;
    const double C28442 = C48813 * C355;
    const double C29014 = C48813 * C2313;
    const double C29578 = C48813 * C876;
    const double C29572 = C48813 * C886;
    const double C37905 = C48813 * C2735;
    const double C37899 = C48813 * C2740;
    const double C49146 = C48813 / C47868;
    const double C49142 = C48813 * C48795;
    const double C3784 = C49227 - (C48805 * C48796) / C47862;
    const double C48036 = C48034 / C47862;
    const double C48009 = C48905 - C48005;
    const double C48018 = C48014 + C48964;
    const double C48046 = C48043 - C48045;
    const double C49164 = C48960 * C48954;
    const double C49202 = C49166 + C48960;
    const double C49168 = C48967 / C47868;
    const double C49165 = C48967 * C48954;
    const double C11253 = C49231 - (C48960 * C48956) / C47862;
    const double C1225 = C1179 + C1180;
    const double C11455 = C11420 + C11421;
    const double C23891 = C23856 + C23857;
    const double C2794 = C2748 + C2749;
    const double C12943 = C12932 + C12933;
    const double C25411 = C25388 + C25389;
    const double C9199 = C9177 + C9178;
    const double C11447 = C11404 + C11405;
    const double C23883 = C23840 + C23841;
    const double C10081 = C10061 + C10062;
    const double C12004 = C11990 + C11991;
    const double C24440 = C24426 + C24427;
    const double C10281 = C10267 + C10268;
    const double C14056 = C14050 + C14051;
    const double C25407 = C25380 + C25381;
    const double C10078 = C10055 + C10056;
    const double C10080 = C10059 + C10060;
    const double C10725 = C10707 + C10708;
    const double C19604 = C48810 * C3227;
    const double C21513 = C48800 * C3227;
    const double C25969 = C48810 * C3227;
    const double C18011 = C48800 * C3659;
    const double C21267 = C48810 * C3659;
    const double C35050 = C48810 * C3659;
    const double C145 =
        (4 * (2 * C48140 + ae * C48141 + C48108 * C48160) +
         ae * (3 * C48141 + C48108 * C48161) +
         C48108 * (3 * C48160 + ae * C48161 +
                   C48108 * (2 * C48156 + ae * C48157 +
                             C48108 * (C48152 + ae * C48108 * C48153 +
                                       C48108 * (ae * C48153 +
                                                 C48108 * std::pow(C48112, 7) *
                                                     bs[7] * C48118))))) /
        C47867;
    const double C252 =
        (ae * (2 * (C48108 * C48205 + C48204 * ae) +
               C48108 * (C48205 + C48108 * C48201 + C48196 * ae) +
               (C48204 + C48192 * C48133) * ae) +
         C48107 * (2 * C48140 + ae * C48141 + C48108 * C48160)) /
        C47867;
    const double C360 =
        ((zP - zQ) * (2 * C48140 + ae * C48141 + C48108 * C48160)) / C47867;
    const double C887 = (C48126 + ae * C48129 + C48108 * C48140 +
                         C48160 * std::pow(C48272, 2)) /
                        C47867;
    const double C10071 = C9060 * C2304;
    const double C13492 = C47888 * C2304;
    const double C25146 = C23694 * C2304;
    const double C10075 = C9060 * C2310;
    const double C13484 = C47888 * C2310;
    const double C25758 = C23694 * C2310;
    const double C19603 = C47888 * C3224;
    const double C21512 = C9060 * C3224;
    const double C25968 = C23694 * C3224;
    const double C48605 = C48603 + C48598;
    const double C1228 = C1185 + C1186;
    const double C11457 = C11424 + C11425;
    const double C23893 = C23860 + C23861;
    const double C2797 = C2754 + C2755;
    const double C12945 = C12936 + C12937;
    const double C25413 = C25392 + C25393;
    const double C9200 = C9179 + C9180;
    const double C11449 = C11408 + C11409;
    const double C23885 = C23844 + C23845;
    const double C10082 = C10063 + C10064;
    const double C12002 = C11986 + C11987;
    const double C24438 = C24422 + C24423;
    const double C10282 = C10269 + C10270;
    const double C14054 = C14046 + C14047;
    const double C25409 = C25384 + C25385;
    const double C18015 = C18006 + C18007;
    const double C20165 = C20155 + C20156;
    const double C26532 = C26522 + C26523;
    const double C1672 =
        (3 * (C48141 + C48107 * C48551 + C48549 * ae) +
         C48107 * (2 * C48551 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48256) +
                             C48107 * C48219 * ae) +
                   C48552 * ae) +
         (2 * C48549 + C48107 * C48552) * ae) /
        C47862;
    const double C1852 =
        (C48272 * (2 * C48551 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48256) +
                             C48107 * C48219 * ae) +
                   C48552 * ae)) /
        C47862;
    const double C2305 =
        (C48107 * C48141 + C48446 * ae + C48551 * C48319) / C47862;
    const double C2311 =
        (C48141 + C48107 * C48551 + C48549 * ae +
         (C48157 + C48107 * (C48107 * C48181 + C48256) + C48107 * C48219 * ae) *
             C48319) /
        C47862;
    const double C3225 =
        (2 * C48272 * C48551 +
         C48272 * (C48551 + (C48107 * C48181 + C48256) * C48319)) /
        C47862;
    const double C1679 = C1008 * C1162;
    const double C11440 = C47888 * C1162;
    const double C23876 = C23694 * C1162;
    const double C1857 = C1008 * C1396;
    const double C12718 = C47888 * C1396;
    const double C29933 = C23694 * C1396;
    const double C239 = (C48107 * (3 * C48141 + C48108 * C48161) +
                         (3 * C48446 + C48108 * C48456) * ae) /
                        C47862;
    const double C530 =
        (2 * C48129 + C48108 * C48141 +
         C48107 * (C48107 * C48161 + C48456 * ae) + C48107 * C48456 * ae) /
        C47862;
    const double C632 = (C48272 * (C48107 * C48161 + C48456 * ae)) / C47862;
    const double C124 = 4 * (2 * C48444 + C48108 * C48446) +
                        C48108 * (3 * C48446 + C48108 * C48456);
    const double C233 = C48107 * (3 * C48446 + C48108 * C48456);
    const double C341 = C48272 * (3 * C48446 + C48108 * C48456);
    const double C520 = 2 * C48444 + C48108 * C48446 + C48456 * C48294;
    const double C622 = C48272 * C48107 * C48456;
    const double C873 = 2 * C48444 + C48108 * C48446 + C48456 * C48319;
    const double C1161 =
        2 * C48107 * C48456 + C48107 * (C48456 + C48223 * C48294);
    const double C1395 = C48272 * (C48456 + C48223 * C48294);
    const double C2577 = C48107 * C48456 + C48107 * C48223 * C48319;
    const double C2730 =
        2 * C48272 * C48456 + C48272 * (C48456 + C48223 * C48319);
    const double C3234 = C1008 * C2296;
    const double C18851 = C47888 * C2296;
    const double C25158 = C23694 * C2296;
    const double C48618 = C48143 + C48616;
    const double C9187 = C9060 * C1671;
    const double C11828 = C47888 * C1671;
    const double C24264 = C23694 * C1671;
    const double C11970 = C47888 * C1851;
    const double C14288 = C9060 * C1851;
    const double C24406 = C23694 * C1851;
    const double C9185 = C9060 * C1665;
    const double C11832 = C47888 * C1665;
    const double C24268 = C23694 * C1665;
    const double C11974 = C47888 * C1845;
    const double C14286 = C9060 * C1845;
    const double C24410 = C23694 * C1845;
    const double C10073 = C9060 * C2298;
    const double C13488 = C47888 * C2298;
    const double C25762 = C23694 * C2298;
    const double C48225 = C48224 + C48215;
    const double C1854 =
        (2 * (ae * C48272 * C48201 + C48107 * C48315) + ae * C48272 * C48304 +
         C48107 *
             (C48315 + ae * C48272 * C48107 * C48220 +
              C48107 * (ae * C48272 * C48220 + C48107 * C48272 * C48180))) /
        C47867;
    const double C1668 = (3 * (C48238 + C48201 * C48294) +
                          C48107 * (2 * C48299 + C48107 * C48304)) /
                         C47862;
    const double C1848 = (C48272 * (2 * C48299 + C48107 * C48304)) / C47862;
    const double C2307 = (C48238 + C48201 * C48294 + C48304 * C48319) / C47862;
    const double C48359 = C48156 + C48355;
    const double C17985 =
        (4 * (2 * C48272 * C48201 + C48272 * C48675) +
         C48272 *
             (3 * C48675 +
              C48272 * (2 * C48371 + C48272 * (C48220 + C48261 * C48319)))) /
        C47862;
    const double C48641 = C48639 + C48634;
    const double C18251 =
        (4 * (2 * C48272 * C48597 + C48272 * C48684) +
         C48272 * (3 * C48684 +
                   C48272 * (2 * C48272 * C48633 +
                             C48272 * (C48633 +
                                       (C48107 * C48177 + C48254) * C48319)))) /
        C47862;
    const double C9148 = 4 * (2 * C48537 + C48107 * C48540) +
                         C48107 * (3 * C48540 + C48107 * C48604);
    const double C9286 = C48272 * (3 * C48540 + C48107 * C48604);
    const double C9784 = 2 * C48537 + C48107 * C48540 + C48604 * C48319;
    const double C10698 =
        2 * C48272 * C48604 + C48272 * (C48604 + C48640 * C48319);
    const double C18493 =
        5 * (3 * C48778 + C48272 * C48791) +
        C48272 * (4 * C48791 +
                  C48272 * (3 * C48789 +
                            C48272 * (2 * C48272 * C48193 +
                                      C48272 * (C48193 + C48213 * C48319))));
    const double C48243 = C48242 + C48241;
    const double C1674 =
        (3 * (C48140 + ae * C48299 + C48107 * C48303) +
         ae * (2 * C48299 + C48107 * C48304) +
         C48107 * (2 * C48303 + ae * C48304 +
                   C48107 * (C48156 + ae * C48107 * C48220 +
                             C48107 * (ae * C48220 + C48107 * C48180)))) /
        C47867;
    const double C10076 = C48800 * C2316;
    const double C13485 = C48810 * C2316;
    const double C25759 = C48810 * C2316;
    const double C3233 = C1001 * C2301;
    const double C10070 = C48800 * C2301;
    const double C13497 = C48810 * C2301;
    const double C16052 = C49213 * C2301;
    const double C18850 = C49139 * C2301;
    const double C25157 = C23687 * C2301;
    const double C25143 = C48810 * C2301;
    const double C29020 = C48813 * C2301;
    const double C19608 = C48810 * C3221;
    const double C21511 = C48800 * C3221;
    const double C25973 = C48810 * C3221;
    const double C9202 = C9183 + C9184;
    const double C11453 = C11416 + C11417;
    const double C23889 = C23852 + C23853;
    const double C10084 = C10067 + C10068;
    const double C11998 = C11978 + C11979;
    const double C24434 = C24414 + C24415;
    const double C9201 = C9181 + C9182;
    const double C11451 = C11412 + C11413;
    const double C23887 = C23848 + C23849;
    const double C10083 = C10065 + C10066;
    const double C12000 = C11982 + C11983;
    const double C24436 = C24418 + C24419;
    const double C18014 = C18004 + C18005;
    const double C20167 = C20159 + C20160;
    const double C26534 = C26526 + C26527;
    const double C18016 = C18008 + C18009;
    const double C21279 = C21270 + C21271;
    const double C35062 = C35053 + C35054;
    const double C9196 = C9171 + C9172;
    const double C9553 = C9539 + C9540;
    const double C9195 = C9169 + C9170;
    const double C9554 = C9541 + C9542;
    const double C10079 = C10057 + C10058;
    const double C10724 = C10705 + C10706;
    const double C9154 =
        (4 * (2 * C48295 + ae * C48297 + C48107 * C48348) +
         ae * (3 * C48297 + C48107 * C48349) +
         C48107 *
             (3 * C48348 + ae * C48349 +
              C48107 * (2 * C48342 + ae * C48344 +
                        C48107 * (C48152 + ae * C48107 * C48214 +
                                  C48107 * (ae * C48214 + C48107 * C48176))))) /
        C47867;
    const double C18506 = C18503 + C18504;
    const double C48187 = C48108 * C48185;
    const double C2738 =
        (2 * C48272 * C48161 + C48272 * (C48161 + C48185 * C48319)) / C47862;
    const double C48186 = C48108 * C48184;
    const double C48308 = C48107 * C48184;
    const double C48317 = C48272 * C48184;
    const double C2739 =
        (2 * C48272 * C48160 + C48272 * (C48160 + C48184 * C48319)) / C47867;
    const double C48360 = C48107 * C48356;
    const double C48375 = C48373 + C48374;
    const double C10241 =
        (2 * C48315 + C48272 * C48422 +
         ae * (2 * C48272 * C48351 +
               C48272 * (C48351 + C48107 * C48261 * C48319)) +
         C48107 * (ae * (2 * C48371 + C48272 * (C48220 + C48261 * C48319)) +
                   C48107 * (2 * C48372 +
                             C48272 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48319)))) /
        C47867;
    const double C17898 =
        (ae * (3 * (C48201 + C48220 * C48319) +
               C48272 * (2 * C48371 + C48272 * (C48220 + C48261 * C48319))) +
         C48107 * (3 * C48422 +
                   C48272 * (2 * C48372 +
                             C48272 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48319)))) /
        C47867;
    const double C17988 =
        (4 * (2 * C48315 + C48272 * C48422) +
         C48272 * (3 * C48422 +
                   C48272 * (2 * C48372 +
                             C48272 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48319)))) /
        C47867;
    const double C48394 = C48107 * C48392;
    const double C48408 = C48405 + C48407;
    const double C10701 =
        (2 * (ae * (2 * C48365 + C48272 * C48415) + C48107 * C48428) +
         ae * (2 * C48272 * C48344 + C48272 * (C48344 + C48388 * C48319)) +
         C48107 *
             (C48428 +
              ae * (2 * C48399 + C48272 * (C48379 + C48107 * C48258 * C48319)) +
              C48107 *
                  (ae * (2 * C48400 + C48272 * (C48214 + C48258 * C48319)) +
                   C48107 * (2 * C48401 +
                             C48272 * (C48176 + std::pow(C48110, 8) * bs[8] *
                                                    C48118 * C48319))))) /
        C47867;
    const double C11134 = (ae * (3 * (C48205 + C48198 * C48319) +
                                 C48272 * (2 * C48365 + C48272 * C48415)) +
                           C48107 * (3 * C48411 + C48272 * C48428)) /
                          C47867;
    const double C11135 =
        (3 * C48411 + C48272 * C48428 +
         ae * (3 * (C48337 + C48379 * C48319) +
               C48272 * (2 * C48399 +
                         C48272 * (C48379 + C48107 * C48258 * C48319))) +
         C48107 * (ae * (3 * C48415 +
                         C48272 * (2 * C48400 +
                                   C48272 * (C48214 + C48258 * C48319))) +
                   C48107 * (3 * C48416 +
                             C48272 * (2 * C48401 +
                                       C48272 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48319))))) /
        C47867;
    const double C17987 = (4 * (2 * C48313 + C48272 * C48411) +
                           C48272 * (3 * C48411 + C48272 * C48428)) /
                          C47867;
    const double C18252 =
        (ae * (4 * (2 * C48365 + C48272 * C48415) +
               C48272 * (3 * C48415 +
                         C48272 * (2 * C48400 +
                                   C48272 * (C48214 + C48258 * C48319)))) +
         C48107 * (4 * C48428 +
                   C48272 * (3 * C48416 +
                             C48272 * (2 * C48401 +
                                       C48272 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48319))))) /
        C47867;
    const double C18496 =
        (5 * (3 * C48411 + C48272 * C48428) +
         C48272 * (4 * C48428 +
                   C48272 * (3 * C48416 +
                             C48272 * (2 * C48401 +
                                       C48272 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48319))))) /
        C47867;
    const double C48264 = C48263 + C48259;
    const double C48361 = C48107 * C48358;
    const double C10051 =
        (2 * (ae * (C48201 + C48220 * C48319) + C48107 * C48422) +
         ae * (C48304 + C48358 * C48319) +
         C48107 * (C48422 + ae * (C48351 + C48107 * C48261 * C48319) +
                   C48107 * (ae * (C48220 + C48261 * C48319) +
                             C48107 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48319)))) /
        C47867;
    const double C10238 =
        (2 * C48272 * C48304 + C48272 * (C48304 + C48358 * C48319)) / C47862;
    const double C48395 = C48107 * C48393;
    const double C9791 =
        (3 * (C48411 + ae * (C48337 + C48379 * C48319) + C48107 * C48419) +
         ae * (C48349 + C48393 * C48319) +
         C48107 * (2 * C48419 + ae * (C48344 + C48388 * C48319) +
                   C48107 * (C48416 + ae * (C48379 + C48107 * C48258 * C48319) +
                             C48107 * (ae * (C48214 + C48258 * C48319) +
                                       C48107 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48319))))) /
        C47867;
    const double C10699 =
        (2 * C48272 * C48349 + C48272 * (C48349 + C48393 * C48319)) / C47862;
    const double C2790 = C1008 * C883;
    const double C1169 =
        (2 * (C48107 * C48161 + C48456 * ae) +
         C48107 * (C48161 + C48107 * (C48107 * C48185 + C48257) +
                   C48107 * C48223 * ae) +
         (C48456 + C48223 * C48294) * ae) /
        C47862;
    const double C1403 =
        (C48272 * (C48161 + C48107 * (C48107 * C48185 + C48257) +
                   C48107 * C48223 * ae)) /
        C47862;
    const double C2579 =
        (C48107 * C48161 + C48456 * ae + (C48107 * C48185 + C48257) * C48319) /
        C47862;
    const double C48460 = C48458 + C48459;
    const double C9149 = 4 * (2 * C48543 + C48107 * C48546) +
                         C48107 * (3 * C48546 + C48107 * C48619);
    const double C9287 = C48272 * (3 * C48546 + C48107 * C48619);
    const double C10048 = 2 * C48543 + C48107 * C48546 + C48619 * C48319;
    const double C48644 = C48632 + C48642;
    const double C9536 = C48800 * C9292;
    const double C9446 = C48800 * C9151;
    const double C9538 = C48800 * C9289;
    const double C10550 = C48800 * C9786;
    const double C49170 = C49000 * C48994;
    const double C49208 = C49172 + C49000;
    const double C49174 = C49007 / C47868;
    const double C49171 = C49007 * C48994;
    const double C20269 = C49233 - (C49000 * C48996) / C47862;
    const double C47911 = C47902 - C47908;
    const double C47901 = C47896 * be;
    const double C26841 = C47923 * C240;
    const double C26835 = C47923 * C234;
    const double C26829 = C47923 * C529;
    const double C26823 = C47923 * C519;
    const double C26817 = C47923 * C241;
    const double C26811 = C47923 * C235;
    const double C27289 = C47923 * C1158;
    const double C27283 = C47923 * C1162;
    const double C27467 = C47923 * C621;
    const double C27461 = C47923 * C631;
    const double C27455 = C47923 * C1392;
    const double C27449 = C47923 * C1396;
    const double C28461 = C47923 * C348;
    const double C28455 = C47923 * C342;
    const double C28449 = C47923 * C349;
    const double C28443 = C47923 * C343;
    const double C29017 = C47923 * C2296;
    const double C29575 = C47923 * C872;
    const double C29569 = C47923 * C882;
    const double C37082 = C47923 * C883;
    const double C37902 = C47923 * C2727;
    const double C37896 = C47923 * C2731;
    const double C117 =
        (C47923 / C47868 + (0 * ae) / C47862) / C47868 - (0 * be) / C47862;
    const double C3793 = C47923 / C47868 - (0 * be) / C47862;
    const double C22514 = C47923 / C47868 + (0 * ae) / C47862;
    const double C7947 = C7762 * C240;
    const double C7941 = C7762 * C234;
    const double C7935 = C7762 * C529;
    const double C7929 = C7762 * C519;
    const double C7923 = C7762 * C241;
    const double C7917 = C7762 * C235;
    const double C8395 = C7762 * C1158;
    const double C8389 = C7762 * C1162;
    const double C8573 = C7762 * C621;
    const double C8567 = C7762 * C631;
    const double C8561 = C7762 * C1392;
    const double C8555 = C7762 * C1396;
    const double C15621 = C7762 * C883;
    const double C15609 = C7762 * C348;
    const double C15603 = C7762 * C342;
    const double C15597 = C7762 * C882;
    const double C15591 = C7762 * C872;
    const double C15585 = C7762 * C349;
    const double C15579 = C7762 * C343;
    const double C16053 = C7762 * C2296;
    const double C16477 = C7762 * C2727;
    const double C16471 = C7762 * C2731;
    const double C47900 = C47895 * ae;
    const double C1006 =
        ((-C47863 / C47862) / C47868 - (C47881 * be) / C47862) / C47868 -
        ((C47860 * ((-C47870) / C47868 - (C47895 * be) / C47862) + C23687) *
         be) /
            C47862 +
        (-C47882 / C47862) / C47868 - (0 * be) / C47862;
    const double C1007 =
        ((-C47870) / C47868 - (C47895 * be) / C47862) / C47868 -
        ((C47860 * ((-C47882 / C47862) / C47868 - (0 * be) / C47862) + C48810) *
         be) /
            C47862;
    const double C23693 = (-C47870) / C47868 - (C47895 * be) / C47862;
    const double C10247 = C9558 * C7764;
    const double C10711 = C9558 * C7763;
    const double C16898 = C9558 * C1010;
    const double C17322 = C9558 * C1009;
    const double C18254 = C9558 * C118;
    const double C21648 = C9558 * C3795;
    const double C22028 = C9558 * C3794;
    const double C42622 = C9558 * C22516;
    const double C10248 = C9557 * C7758;
    const double C10712 = C9557 * C7757;
    const double C16899 = C9557 * C49217;
    const double C17323 = C9557 * C49229;
    const double C18255 = C9557 * C48905;
    const double C21649 = C9557 * C48964;
    const double C22029 = C9557 * C49161;
    const double C42623 = C9557 * C48964;
    const double C43003 = C9557 * C22509;
    const double C46998 = C9557 * C48967;
    const double C47422 = C9557 * C48960;
    const double C10249 = C9556 * C7765;
    const double C10713 = C9556 * C7764;
    const double C16900 = C9556 * C1011;
    const double C17324 = C9556 * C1010;
    const double C22030 = C9556 * C3795;
    const double C43004 = C9556 * C22516;
    const double C10250 = C9555 * C49194;
    const double C10714 = C9555 * C7758;
    const double C16901 = C9555 * C49194;
    const double C17325 = C9555 * C49217;
    const double C22031 = C9555 * C48964;
    const double C43005 = C9555 * C48964;
    const double C47000 = C9555 * C26653;
    const double C47424 = C9555 * C48967;
    const double C10255 = C10077 * C7764;
    const double C10717 = C10077 * C7763;
    const double C16904 = C10077 * C1010;
    const double C17328 = C10077 * C1009;
    const double C18256 = C10077 * C118;
    const double C21652 = C10077 * C3795;
    const double C22032 = C10077 * C3794;
    const double C42626 = C10077 * C22516;
    const double C10288 = C10280 * C7757;
    const double C16909 = C10280 * C49229;
    const double C18001 = C10280 * C48905;
    const double C21659 = C10280 * C49161;
    const double C42633 = C10280 * C22509;
    const double C47008 = C10280 * C48960;
    const double C10287 = C10279 * C7763;
    const double C16908 = C10279 * C1009;
    const double C18000 = C10279 * C118;
    const double C21658 = C10279 * C3794;
    const double C10286 = C10278 * C7757;
    const double C16903 = C10278 * C49229;
    const double C17993 = C10278 * C48905;
    const double C21651 = C10278 * C49161;
    const double C42625 = C10278 * C22509;
    const double C47002 = C10278 * C48960;
    const double C10285 = C10277 * C7763;
    const double C16902 = C10277 * C1009;
    const double C17992 = C10277 * C118;
    const double C21650 = C10277 * C3794;
    const double C10284 = C10276 * C7757;
    const double C16897 = C10276 * C49229;
    const double C17991 = C10276 * C48905;
    const double C21647 = C10276 * C49161;
    const double C42621 = C10276 * C22509;
    const double C46996 = C10276 * C48960;
    const double C10283 = C10275 * C7763;
    const double C16896 = C10275 * C1009;
    const double C17990 = C10275 * C118;
    const double C21646 = C10275 * C3794;
    const double C11141 = C10726 * C7764;
    const double C17740 = C10726 * C1010;
    const double C18258 = C10726 * C118;
    const double C21656 = C10726 * C3795;
    const double C22036 = C10726 * C3794;
    const double C42630 = C10726 * C22516;
    const double C11151 = C11148 * C7763;
    const double C17742 = C11148 * C1009;
    const double C17994 = C11148 * C118;
    const double C21654 = C11148 * C3794;
    const double C11150 = C11147 * C7757;
    const double C17741 = C11147 * C49229;
    const double C17995 = C11147 * C48905;
    const double C21655 = C11147 * C49161;
    const double C42629 = C11147 * C22509;
    const double C47840 = C11147 * C48960;
    const double C18019 = C18013 * C48905;
    const double C22402 = C18013 * C49161;
    const double C43376 = C18013 * C22509;
    const double C18018 = C18012 * C118;
    const double C22403 = C18012 * C3794;
    const double C18266 = C18264 * C118;
    const double C22401 = C18264 * C3795;
    const double C43375 = C18264 * C22516;
    const double C49176 = C49138 / C47862;
    const double C49214 = C49180 / C47868;
    const double C49215 = C49182 + C49146;
    const double C3786 = C49146 - C48811 / C47874;
    const double C49179 = C49142 / C47862;
    const double C3952 = C3784 * C254;
    const double C3944 = C3784 * C247;
    const double C3936 = C3784 * C255;
    const double C3928 = C3784 * C248;
    const double C4348 = C3784 * C522;
    const double C4340 = C3784 * C532;
    const double C4502 = C3784 * C624;
    const double C4494 = C3784 * C634;
    const double C5254 = C3784 * C362;
    const double C5246 = C3784 * C355;
    const double C5238 = C3784 * C363;
    const double C5230 = C3784 * C356;
    const double C6008 = C3784 * C875;
    const double C6000 = C3784 * C885;
    const double C48038 = C48033 - C48036;
    const double C48013 = C48009 * ae;
    const double C22515 = (-C47995) / C47868 - (C48009 * be) / C47862;
    const double C48022 = C48018 * be;
    const double C46999 = C9556 * C48046;
    const double C9065 =
        (C48046 / C47868 + (0 * ae) / C47862) / C47868 - (0 * be) / C47862;
    const double C11262 = C48046 / C47868 - (0 * be) / C47862;
    const double C23698 = C48046 / C47868 + (0 * ae) / C47862;
    const double C49199 = C49164 / C47862;
    const double C49221 = C49202 / C47868;
    const double C49222 = C49203 + C49168;
    const double C11255 = C49168 - C48965 / C47874;
    const double C49201 = C49165 / C47862;
    const double C14431 = C10280 * C11253;
    const double C14423 = C10276 * C11253;
    const double C14797 = C9557 * C11253;
    const double C15168 = C10278 * C11253;
    const double C10263 = C10081 * C7764;
    const double C16910 = C10081 * C1010;
    const double C21660 = C10081 * C3795;
    const double C42634 = C10081 * C22516;
    const double C10289 = C10281 * C7763;
    const double C16914 = C10281 * C1009;
    const double C18002 = C10281 * C118;
    const double C21662 = C10281 * C3794;
    const double C10256 = C10078 * C7758;
    const double C10718 = C10078 * C7757;
    const double C16905 = C10078 * C49217;
    const double C17329 = C10078 * C49229;
    const double C18257 = C10078 * C48905;
    const double C21653 = C10078 * C48964;
    const double C22033 = C10078 * C49161;
    const double C42627 = C10078 * C48964;
    const double C43007 = C10078 * C22509;
    const double C47004 = C10078 * C48967;
    const double C47428 = C10078 * C48960;
    const double C10258 = C10080 * C49194;
    const double C10720 = C10080 * C7758;
    const double C16907 = C10080 * C49194;
    const double C17331 = C10080 * C49217;
    const double C22035 = C10080 * C48964;
    const double C43009 = C10080 * C48964;
    const double C47006 = C10080 * C26653;
    const double C47430 = C10080 * C48967;
    const double C11140 = C10725 * C7758;
    const double C17739 = C10725 * C49217;
    const double C18259 = C10725 * C48905;
    const double C21657 = C10725 * C48964;
    const double C22037 = C10725 * C49161;
    const double C42631 = C10725 * C48964;
    const double C43011 = C10725 * C22509;
    const double C47838 = C10725 * C48967;
    const double C18017 = C18010 + C18011;
    const double C21277 = C21266 + C21267;
    const double C35060 = C35049 + C35050;
    const double C1210 = C49181 * C252;
    const double C3942 = C49198 * C252;
    const double C7948 = C49181 * C252;
    const double C22663 = C49198 * C252;
    const double C26842 = C26650 * C252;
    const double C2779 = C49181 * C360;
    const double C5244 = C49198 * C360;
    const double C15610 = C49181 * C360;
    const double C28462 = C26650 * C360;
    const double C31580 = C49198 * C360;
    const double C2789 = C1001 * C887;
    const double C2767 = C49181 * C887;
    const double C15620 = C49213 * C887;
    const double C15598 = C49181 * C887;
    const double C19062 = C48810 * C887;
    const double C25401 = C48810 * C887;
    const double C29570 = C26650 * C887;
    const double C37081 = C48813 * C887;
    const double C10086 = C10071 + C10072;
    const double C13508 = C13492 + C13493;
    const double C25167 = C25146 + C25147;
    const double C19613 = C19603 + C19604;
    const double C21515 = C21512 + C21513;
    const double C25980 = C25968 + C25969;
    const double C9150 =
        (4 * (2 * C48539 + C48107 * C48605 + C48540 * ae) +
         C48107 *
             (3 * C48605 +
              C48107 * (2 * C48597 +
                        C48107 * (C48137 + C48107 * (C48107 * C48153 + C48211) +
                                  C48107 * C48193 * ae) +
                        C48599 * ae) +
              C48604 * ae) +
         (3 * C48540 + C48107 * C48604) * ae) /
        C47862;
    const double C9288 =
        (C48272 *
         (3 * C48605 +
          C48107 * (2 * C48597 +
                    C48107 * (C48137 + C48107 * (C48107 * C48153 + C48211) +
                              C48107 * C48193 * ae) +
                    C48599 * ae) +
          C48604 * ae)) /
        C47862;
    const double C10264 = C10082 * C7758;
    const double C16911 = C10082 * C49217;
    const double C21661 = C10082 * C48964;
    const double C42635 = C10082 * C48964;
    const double C47010 = C10082 * C48967;
    const double C10290 = C10282 * C7757;
    const double C16915 = C10282 * C49229;
    const double C18003 = C10282 * C48905;
    const double C21663 = C10282 * C49161;
    const double C42637 = C10282 * C22509;
    const double C47014 = C10282 * C48960;
    const double C18021 = C18015 * C48905;
    const double C21667 = C18015 * C49161;
    const double C42641 = C18015 * C22509;
    const double C3240 = C1008 * C2305;
    const double C16059 = C7762 * C2305;
    const double C18855 = C47888 * C2305;
    const double C25162 = C23694 * C2305;
    const double C29011 = C47923 * C2305;
    const double C1221 = C1008 * C530;
    const double C7959 = C7762 * C530;
    const double C26853 = C47923 * C530;
    const double C6367 = C1008 * C632;
    const double C28237 = C47923 * C632;
    const double C39878 = C7762 * C632;
    const double C1215 = C1008 * C520;
    const double C7953 = C7762 * C520;
    const double C26847 = C47923 * C520;
    const double C6361 = C1008 * C622;
    const double C28231 = C47923 * C622;
    const double C39872 = C7762 * C622;
    const double C2784 = C1008 * C873;
    const double C15615 = C7762 * C873;
    const double C37076 = C47923 * C873;
    const double C48620 = C48618 + C48613;
    const double C48246 = C48108 * C48225;
    const double C48251 = 3 * C48225;
    const double C48307 = ae * C48225;
    const double C48306 = C48107 * C48225;
    const double C1404 =
        (C48272 * C48160 + ae * C48272 * C48107 * C48225 +
         C48107 * (ae * C48272 * C48225 + C48107 * C48272 * C48184)) /
        C47867;
    const double C11971 = C48810 * C1854;
    const double C14289 = C48800 * C1854;
    const double C24407 = C48810 * C1854;
    const double C9186 = C48800 * C1668;
    const double C11833 = C48810 * C1668;
    const double C24269 = C48810 * C1668;
    const double C11975 = C48810 * C1848;
    const double C14287 = C48800 * C1848;
    const double C24411 = C48810 * C1848;
    const double C10074 = C48800 * C2307;
    const double C13489 = C48810 * C2307;
    const double C25763 = C48810 * C2307;
    const double C48643 = C48107 * C48641;
    const double C10236 =
        (2 * C48272 * C48605 + C48272 * (C48605 + C48641 * C48319)) / C47862;
    const double C11133 =
        (3 * (C48605 + C48641 * C48319) +
         C48272 *
             (2 * C48272 * C48641 +
              C48272 * (C48641 + (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) *
                                     C48319))) /
        C47862;
    const double C9445 = C9060 * C9148;
    const double C9537 = C9060 * C9286;
    const double C10549 = C9060 * C9784;
    const double C534 =
        (C48126 + ae * C48129 + C48108 * C48140 + ae * C48107 * C48243 +
         C48107 * (ae * C48243 + C48107 * C48160)) /
        C47867;
    const double C636 =
        (ae * C48272 * C48243 + C48107 * C48272 * C48160) / C47867;
    const double C1170 = (2 * (ae * C48243 + C48107 * C48160) +
                          ae * (C48243 + C48225 * std::pow(C48107, 2)) +
                          C48107 * (C48160 + ae * C48107 * C48225 +
                                    C48107 * (ae * C48225 + C48107 * C48184))) /
                         C47867;
    const double C2314 = (ae * (C48243 + C48225 * C48319) +
                          C48107 * (C48160 + C48184 * C48319)) /
                         C47867;
    const double C130 = (3 * (C48234 + C48108 * C48238 + C48444 * ae) +
                         C48108 * (2 * C48238 + C48108 * C48243 + C48446 * ae) +
                         (2 * C48444 + C48108 * C48446) * ae) /
                        C47862;
    const double C245 =
        (C48107 * (2 * C48238 + C48108 * C48243 + C48446 * ae)) / C47862;
    const double C353 =
        (C48272 * (2 * C48238 + C48108 * C48243 + C48446 * ae)) / C47862;
    const double C524 =
        (C48234 + C48108 * C48238 + C48444 * ae + C48243 * C48294) / C47862;
    const double C626 = (C48272 * C48107 * C48243) / C47862;
    const double C877 =
        (C48234 + C48108 * C48238 + C48444 * ae + C48243 * C48319) / C47862;
    const double C1165 =
        (2 * C48107 * C48243 + C48107 * (C48243 + C48225 * C48294)) / C47862;
    const double C1399 = (C48272 * (C48243 + C48225 * C48294)) / C47862;
    const double C2734 =
        (2 * C48272 * C48243 + C48272 * (C48243 + C48225 * C48319)) / C47862;
    const double C9188 = C48800 * C1674;
    const double C11829 = C48810 * C1674;
    const double C24265 = C48810 * C1674;
    const double C10088 = C10075 + C10076;
    const double C13504 = C13484 + C13485;
    const double C25766 = C25758 + C25759;
    const double C10085 = C10069 + C10070;
    const double C13510 = C13496 + C13497;
    const double C25165 = C25142 + C25143;
    const double C19615 = C19607 + C19608;
    const double C21514 = C21510 + C21511;
    const double C25982 = C25972 + C25973;
    const double C10266 = C10084 * C49194;
    const double C16913 = C10084 * C49194;
    const double C47012 = C10084 * C26653;
    const double C10265 = C10083 * C7765;
    const double C16912 = C10083 * C1011;
    const double C47011 = C10083 * C48046;
    const double C18020 = C18014 * C118;
    const double C21666 = C18014 * C3794;
    const double C18022 = C18016 * C118;
    const double C10716 = C9553 * C49194;
    const double C14429 = C9553 * C49204;
    const double C17327 = C9553 * C49194;
    const double C41521 = C9553 * C49204;
    const double C47426 = C9553 * C26653;
    const double C10715 = C9554 * C7765;
    const double C17326 = C9554 * C1011;
    const double C47425 = C9554 * C48046;
    const double C10257 = C10079 * C7765;
    const double C10719 = C10079 * C7764;
    const double C16906 = C10079 * C1011;
    const double C17330 = C10079 * C1010;
    const double C22034 = C10079 * C3795;
    const double C43008 = C10079 * C22516;
    const double C47005 = C10079 * C48046;
    const double C11139 = C10724 * C7765;
    const double C17738 = C10724 * C1011;
    const double C22038 = C10724 * C3795;
    const double C43012 = C10724 * C22516;
    const double C47837 = C10724 * C48046;
    const double C9444 = C48800 * C9154;
    const double C18508 = C18506 * C118;
    const double C48189 = C48169 + C48187;
    const double C48188 = C48170 + C48186;
    const double C3660 =
        (3 * (C48160 + C48184 * C48319) +
         C48272 * (2 * C48317 +
                   C48272 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48319))) /
        C47867;
    const double C3665 = C49181 * C2739;
    const double C16472 = C49181 * C2739;
    const double C20541 = C48810 * C2739;
    const double C34324 = C48810 * C2739;
    const double C37897 = C26650 * C2739;
    const double C48362 = C48359 + C48360;
    const double C48396 = C48384 + C48394;
    const double C18263 = C48800 * C11134;
    const double C18502 = C48800 * C17987;
    const double C48265 = C48108 * C48264;
    const double C48309 = C48264 * C48294;
    const double C3228 =
        (ae * (2 * C48272 * C48225 + C48272 * (C48225 + C48264 * C48319)) +
         C48107 * (2 * C48317 +
                   C48272 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48319))) /
        C47867;
    const double C3654 =
        (3 * (C48243 + C48225 * C48319) +
         C48272 * (2 * C48272 * C48225 + C48272 * (C48225 + C48264 * C48319))) /
        C47862;
    const double C48363 = C48357 + C48361;
    const double C48397 = C48382 + C48395;
    const double C125 = 5 * (3 * C48446 + C48108 * C48456) +
                        C48108 * (4 * C48456 + C48108 * C48460);
    const double C238 = C48107 * (4 * C48456 + C48108 * C48460);
    const double C346 = C48272 * (4 * C48456 + C48108 * C48460);
    const double C521 = 3 * C48446 + C48108 * C48456 + C48460 * C48294;
    const double C623 = C48272 * C48107 * C48460;
    const double C874 = 3 * C48446 + C48108 * C48456 + C48460 * C48319;
    const double C9438 = 5 * (3 * C48540 + C48107 * C48604) +
                         C48107 * (4 * C48604 + C48107 * C48644);
    const double C9530 = C48272 * (4 * C48604 + C48107 * C48644);
    const double C9785 = 3 * C48540 + C48107 * C48604 + C48644 * C48319;
    const double C49205 = C49170 / C47862;
    const double C49224 = C49208 / C47868;
    const double C49225 = C49209 + C49174;
    const double C20271 = C49174 - C49005 / C47874;
    const double C49207 = C49171 / C47862;
    const double C47905 = C47901 / C47862;
    const double C26860 = C26817 + C26818;
    const double C26857 = C26811 + C26812;
    const double C28468 = C28449 + C28450;
    const double C28465 = C28443 + C28444;
    const double C3957 = C3793 * C239;
    const double C3949 = C3793 * C233;
    const double C3941 = C3793 * C240;
    const double C3933 = C3793 * C234;
    const double C4341 = C3793 * C520;
    const double C4333 = C3793 * C530;
    const double C4495 = C3793 * C622;
    const double C4487 = C3793 * C632;
    const double C5259 = C3793 * C347;
    const double C5251 = C3793 * C341;
    const double C5243 = C3793 * C348;
    const double C5235 = C3793 * C342;
    const double C6001 = C3793 * C873;
    const double C5993 = C3793 * C883;
    const double C22678 = C22514 * C239;
    const double C22670 = C22514 * C233;
    const double C22662 = C22514 * C240;
    const double C22654 = C22514 * C234;
    const double C23062 = C22514 * C520;
    const double C23054 = C22514 * C530;
    const double C23216 = C22514 * C622;
    const double C23208 = C22514 * C632;
    const double C31595 = C22514 * C347;
    const double C31587 = C22514 * C341;
    const double C31579 = C22514 * C348;
    const double C31571 = C22514 * C342;
    const double C32337 = C22514 * C873;
    const double C32329 = C22514 * C883;
    const double C7966 = C7923 + C7924;
    const double C7963 = C7917 + C7918;
    const double C15628 = C15585 + C15586;
    const double C15625 = C15579 + C15580;
    const double C47904 = C47900 / C47862;
    const double C1217 = C1006 * C528;
    const double C1211 = C1006 * C518;
    const double C1205 = C1006 * C242;
    const double C1199 = C1006 * C236;
    const double C1193 = C1006 * C527;
    const double C1187 = C1006 * C517;
    const double C1181 = C1006 * C243;
    const double C1175 = C1006 * C237;
    const double C1689 = C1006 * C1160;
    const double C1683 = C1006 * C1164;
    const double C1879 = C1006 * C619;
    const double C1873 = C1006 * C629;
    const double C1867 = C1006 * C1394;
    const double C1861 = C1006 * C1398;
    const double C2786 = C1006 * C881;
    const double C2780 = C1006 * C871;
    const double C2774 = C1006 * C350;
    const double C2768 = C1006 * C344;
    const double C2762 = C1006 * C880;
    const double C2756 = C1006 * C870;
    const double C2750 = C1006 * C351;
    const double C2744 = C1006 * C345;
    const double C3236 = C1006 * C2303;
    const double C3230 = C1006 * C2294;
    const double C3674 = C1006 * C2729;
    const double C3668 = C1006 * C2733;
    const double C6363 = C1006 * C630;
    const double C6357 = C1006 * C620;
    const double C1219 = C1007 * C529;
    const double C1213 = C1007 * C519;
    const double C1207 = C1007 * C241;
    const double C1201 = C1007 * C235;
    const double C1195 = C1007 * C528;
    const double C1189 = C1007 * C518;
    const double C1183 = C1007 * C242;
    const double C1177 = C1007 * C236;
    const double C1687 = C1007 * C1159;
    const double C1681 = C1007 * C1163;
    const double C1877 = C1007 * C620;
    const double C1871 = C1007 * C630;
    const double C1865 = C1007 * C1393;
    const double C1859 = C1007 * C1397;
    const double C2788 = C1007 * C882;
    const double C2782 = C1007 * C872;
    const double C2776 = C1007 * C349;
    const double C2770 = C1007 * C343;
    const double C2764 = C1007 * C881;
    const double C2758 = C1007 * C871;
    const double C2752 = C1007 * C350;
    const double C2746 = C1007 * C344;
    const double C3238 = C1007 * C2304;
    const double C3232 = C1007 * C2295;
    const double C3672 = C1007 * C2728;
    const double C3666 = C1007 * C2732;
    const double C6365 = C1007 * C631;
    const double C6359 = C1007 * C621;
    const double C23874 = C23693 * C1163;
    const double C23870 = C23693 * C1159;
    const double C23866 = C23693 * C528;
    const double C23862 = C23693 * C518;
    const double C23858 = C23693 * C242;
    const double C23854 = C23693 * C236;
    const double C23850 = C23693 * C1164;
    const double C23846 = C23693 * C1160;
    const double C23842 = C23693 * C527;
    const double C23838 = C23693 * C517;
    const double C23834 = C23693 * C243;
    const double C23830 = C23693 * C237;
    const double C24270 = C23693 * C1664;
    const double C24266 = C23693 * C1670;
    const double C24428 = C23693 * C619;
    const double C24424 = C23693 * C629;
    const double C24420 = C23693 * C1394;
    const double C24416 = C23693 * C1398;
    const double C24412 = C23693 * C1844;
    const double C24408 = C23693 * C1850;
    const double C25160 = C23693 * C2304;
    const double C25156 = C23693 * C2295;
    const double C25152 = C23693 * C630;
    const double C25148 = C23693 * C620;
    const double C25144 = C23693 * C2303;
    const double C25140 = C23693 * C2294;
    const double C25398 = C23693 * C881;
    const double C25394 = C23693 * C871;
    const double C25390 = C23693 * C350;
    const double C25386 = C23693 * C344;
    const double C25382 = C23693 * C880;
    const double C25378 = C23693 * C870;
    const double C25374 = C23693 * C351;
    const double C25370 = C23693 * C345;
    const double C25764 = C23693 * C2297;
    const double C25760 = C23693 * C2309;
    const double C25974 = C23693 * C3217;
    const double C25970 = C23693 * C3223;
    const double C26528 = C23693 * C2729;
    const double C26524 = C23693 * C2733;
    const double C29931 = C23693 * C1397;
    const double C29927 = C23693 * C1393;
    const double C34321 = C23693 * C2732;
    const double C34317 = C23693 * C2728;
    const double C35055 = C23693 * C3649;
    const double C35051 = C23693 * C3655;
    const double C11137 = C10285 + C10286;
    const double C17736 = C16902 + C16903;
    const double C18498 = C17992 + C17993;
    const double C22398 = C21650 + C21651;
    const double C18499 = C17994 + C17995;
    const double C22399 = C21654 + C21655;
    const double C18500 = C18018 + C18019;
    const double C49235 = C49176 + C49227;
    const double C3785 = C49214 - (C48813 * C48796) / C47862;
    const double C22677 = C49215 * C252;
    const double C22661 = C49215 * C253;
    const double C22653 = C49215 * C246;
    const double C31594 = C49215 * C360;
    const double C31578 = C49215 * C361;
    const double C31570 = C49215 * C354;
    const double C32332 = C49215 * C887;
    const double C104 = C49215 / C47868 - C48811 / C49183;
    const double C3956 = C3786 * C252;
    const double C3940 = C3786 * C253;
    const double C3932 = C3786 * C246;
    const double C5258 = C3786 * C360;
    const double C5242 = C3786 * C361;
    const double C5234 = C3786 * C354;
    const double C5996 = C3786 * C887;
    const double C49228 = C49179 + C49214;
    const double C48017 = C48013 / C47862;
    const double C42640 = C18014 * C22515;
    const double C42636 = C10281 * C22515;
    const double C42632 = C10279 * C22515;
    const double C42628 = C11148 * C22515;
    const double C42624 = C10277 * C22515;
    const double C42620 = C10275 * C22515;
    const double C43010 = C10726 * C22515;
    const double C43006 = C10077 * C22515;
    const double C43002 = C9558 * C22515;
    const double C43377 = C18012 * C22515;
    const double C48028 = C48022 / C47862;
    const double C14428 = C9554 * C11262;
    const double C41520 = C9554 * C23698;
    const double C49236 = C49199 + C49231;
    const double C11254 = C49221 - (C48967 * C48956) / C47862;
    const double C41527 = C10084 * C49222;
    const double C41519 = C9555 * C49222;
    const double C41893 = C9553 * C49222;
    const double C42256 = C10080 * C49222;
    const double C9058 = C49222 / C47868 - C48965 / C49183;
    const double C14435 = C10084 * C11255;
    const double C14427 = C9555 * C11255;
    const double C14801 = C9553 * C11255;
    const double C15164 = C10080 * C11255;
    const double C49232 = C49201 + C49221;
    const double C18023 = C18017 * C48905;
    const double C1240 = C1209 + C1210;
    const double C7978 = C7947 + C7948;
    const double C26872 = C26841 + C26842;
    const double C2809 = C2778 + C2779;
    const double C15640 = C15609 + C15610;
    const double C28474 = C28461 + C28462;
    const double C2803 = C2766 + C2767;
    const double C15634 = C15597 + C15598;
    const double C19066 = C19061 + C19062;
    const double C25417 = C25400 + C25401;
    const double C29581 = C29569 + C29570;
    const double C10272 = C10086 * C7758;
    const double C16917 = C10086 * C49217;
    const double C21665 = C10086 * C48964;
    const double C42639 = C10086 * C48964;
    const double C47016 = C10086 * C48967;
    const double C21669 = C21515 * C48964;
    const double C42643 = C21515 * C48964;
    const double C9443 = C9060 * C9150;
    const double C9535 = C9060 * C9288;
    const double C9153 =
        (4 * (2 * C48545 + C48107 * C48620 + C48546 * ae) +
         C48107 *
             (3 * C48620 +
              C48107 * (2 * C48612 +
                        C48107 * (C48165 +
                                  C48107 * (C48107 * C48108 * C48177 + C48259) +
                                  C48107 * C48255 * ae) +
                        C48614 * ae) +
              C48619 * ae) +
         (3 * C48546 + C48107 * C48619) * ae) /
        C47862;
    const double C9291 =
        (C48272 *
         (3 * C48620 +
          C48107 *
              (2 * C48612 +
               C48107 * (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                         C48107 * C48255 * ae) +
               C48614 * ae) +
          C48619 * ae)) /
        C47862;
    const double C10050 =
        (2 * C48545 + C48107 * C48620 + C48546 * ae +
         (2 * C48612 +
          C48107 * (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                    C48107 * C48255 * ae) +
          C48614 * ae) *
             C48319) /
        C47862;
    const double C10239 =
        (2 * C48272 * C48620 +
         C48272 *
             (C48620 + (C48165 + C48107 * (C48107 * C48108 * C48177 + C48259) +
                        C48107 * C48255 * ae) *
                           C48319)) /
        C47862;
    const double C48248 = C48245 + C48246;
    const double C48310 = C48307 + C48308;
    const double C2317 =
        (C48160 + C48184 * C48319 + ae * (C48306 + C48107 * C48264 * C48319) +
         C48107 * (ae * (C48225 + C48264 * C48319) +
                   C48107 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48319))) /
        C47867;
    const double C2302 = (C48107 * C48243 + C48306 * C48319) / C47862;
    const double C3222 =
        (2 * C48272 * C48306 + C48272 * (C48306 + C48107 * C48264 * C48319)) /
        C47862;
    const double C1858 = C49181 * C1404;
    const double C8556 = C49181 * C1404;
    const double C12719 = C48810 * C1404;
    const double C27450 = C26650 * C1404;
    const double C29934 = C48810 * C1404;
    const double C11994 = C11970 + C11971;
    const double C14291 = C14288 + C14289;
    const double C24430 = C24406 + C24407;
    const double C9203 = C9185 + C9186;
    const double C11838 = C11832 + C11833;
    const double C24274 = C24268 + C24269;
    const double C11996 = C11974 + C11975;
    const double C14290 = C14286 + C14287;
    const double C24432 = C24410 + C24411;
    const double C10087 = C10073 + C10074;
    const double C13506 = C13488 + C13489;
    const double C25768 = C25762 + C25763;
    const double C48645 = C48627 + C48643;
    const double C10703 = C9060 * C10236;
    const double C9448 = C9445 + C9446;
    const double C9552 = C9537 + C9538;
    const double C10552 = C10549 + C10550;
    const double C1220 = C1001 * C534;
    const double C1198 = C49181 * C534;
    const double C4336 = C3786 * C534;
    const double C7958 = C49213 * C534;
    const double C7936 = C49181 * C534;
    const double C11433 = C48810 * C534;
    const double C23057 = C49215 * C534;
    const double C23869 = C48810 * C534;
    const double C26852 = C48813 * C534;
    const double C26830 = C26650 * C534;
    const double C1870 = C49181 * C636;
    const double C4490 = C3786 * C636;
    const double C6366 = C1001 * C636;
    const double C8568 = C49181 * C636;
    const double C12711 = C48810 * C636;
    const double C23211 = C49215 * C636;
    const double C25155 = C48810 * C636;
    const double C27462 = C26650 * C636;
    const double C28236 = C48813 * C636;
    const double C39877 = C49213 * C636;
    const double C1680 = C49181 * C1170;
    const double C8390 = C49181 * C1170;
    const double C11441 = C48810 * C1170;
    const double C23877 = C48810 * C1170;
    const double C27284 = C26650 * C1170;
    const double C3241 = C49181 * C2314;
    const double C16060 = C49181 * C2314;
    const double C18856 = C48810 * C2314;
    const double C25163 = C48810 * C2314;
    const double C29012 = C26650 * C2314;
    const double C1204 = C49181 * C245;
    const double C3948 = C3786 * C245;
    const double C3934 = C49198 * C245;
    const double C7942 = C49181 * C245;
    const double C22669 = C49215 * C245;
    const double C22655 = C49198 * C245;
    const double C26836 = C26650 * C245;
    const double C2773 = C49181 * C353;
    const double C5250 = C3786 * C353;
    const double C5236 = C49198 * C353;
    const double C15604 = C49181 * C353;
    const double C28456 = C26650 * C353;
    const double C31586 = C49215 * C353;
    const double C31572 = C49198 * C353;
    const double C1214 = C1001 * C524;
    const double C1192 = C49181 * C524;
    const double C4344 = C3786 * C524;
    const double C7952 = C49213 * C524;
    const double C7930 = C49181 * C524;
    const double C11429 = C48810 * C524;
    const double C23065 = C49215 * C524;
    const double C23865 = C48810 * C524;
    const double C26846 = C48813 * C524;
    const double C26824 = C26650 * C524;
    const double C1876 = C49181 * C626;
    const double C4498 = C3786 * C626;
    const double C6360 = C1001 * C626;
    const double C8574 = C49181 * C626;
    const double C12707 = C48810 * C626;
    const double C23219 = C49215 * C626;
    const double C25151 = C48810 * C626;
    const double C27468 = C26650 * C626;
    const double C28230 = C48813 * C626;
    const double C39871 = C49213 * C626;
    const double C2783 = C1001 * C877;
    const double C2761 = C49181 * C877;
    const double C6004 = C3786 * C877;
    const double C15614 = C49213 * C877;
    const double C15592 = C49181 * C877;
    const double C19058 = C48810 * C877;
    const double C25397 = C48810 * C877;
    const double C29576 = C26650 * C877;
    const double C32340 = C49215 * C877;
    const double C37075 = C48813 * C877;
    const double C1686 = C49181 * C1165;
    const double C8396 = C49181 * C1165;
    const double C11437 = C48810 * C1165;
    const double C23873 = C48810 * C1165;
    const double C27290 = C26650 * C1165;
    const double C1864 = C49181 * C1399;
    const double C8562 = C49181 * C1399;
    const double C12715 = C48810 * C1399;
    const double C27456 = C26650 * C1399;
    const double C29930 = C48810 * C1399;
    const double C3671 = C49181 * C2734;
    const double C16478 = C49181 * C2734;
    const double C20537 = C48810 * C2734;
    const double C34320 = C48810 * C2734;
    const double C37903 = C26650 * C2734;
    const double C9204 = C9187 + C9188;
    const double C11836 = C11828 + C11829;
    const double C24272 = C24264 + C24265;
    const double C10274 = C10088 * C49194;
    const double C16919 = C10088 * C49194;
    const double C47018 = C10088 * C26653;
    const double C10271 = C10085 * C7764;
    const double C16916 = C10085 * C1010;
    const double C21664 = C10085 * C3795;
    const double C42638 = C10085 * C22516;
    const double C21668 = C21514 * C3795;
    const double C42642 = C21514 * C22516;
    const double C139 = (5 * (3 * C48141 + C48108 * C48161) +
                         C48108 * (4 * C48161 + C48108 * C48189)) /
                        C47862;
    const double C250 = (C48107 * (4 * C48161 + C48108 * C48189) +
                         (4 * C48456 + C48108 * C48460) * ae) /
                        C47862;
    const double C358 = (C48272 * (4 * C48161 + C48108 * C48189)) / C47862;
    const double C531 =
        (3 * C48141 + C48108 * C48161 +
         C48107 * (C48107 * C48189 + C48460 * ae) + C48107 * C48460 * ae) /
        C47862;
    const double C633 = (C48272 * (C48107 * C48189 + C48460 * ae)) / C47862;
    const double C884 =
        (3 * C48141 + C48108 * C48161 + C48189 * C48319) / C47862;
    const double C146 =
        (5 * (3 * C48160 + ae * C48161 + C48108 * C48188) +
         ae * (4 * C48161 + C48108 * C48189) +
         C48108 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C251 =
        (ae * (3 * (C48122 * C48123 * C48191 + C48108 * C48201 + C48196 * ae) +
               C48108 * (2 * C48201 +
                         C48108 * (C48198 +
                                   C48108 * (C48108 * C48145 * C48146 * C48191 +
                                             C48193 * ae) +
                                   C48108 * C48193 * ae) +
                         C48199 * ae) +
               (2 * C48196 + C48108 * C48199) * ae) +
         C48107 * (3 * C48160 + ae * C48161 + C48108 * C48188)) /
        C47867;
    const double C256 =
        (ae * (4 * (2 * C48201 + C48108 * C48225 + C48199 * ae) +
               C48108 * (3 * C48225 +
                         C48108 * (2 * C48220 +
                                   C48108 * (C48214 +
                                             C48108 * (C48108 * C48167 *
                                                           C48168 * C48191 +
                                                       C48213 * ae) +
                                             C48108 * C48213 * ae) +
                                   C48219 * ae) +
                         C48223 * ae) +
               (3 * C48199 + C48108 * C48223) * ae) +
         C48107 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C359 =
        ((zP - zQ) * (3 * C48160 + ae * C48161 + C48108 * C48188)) / C47867;
    const double C364 =
        ((zP - zQ) *
         (4 * C48188 + ae * C48189 +
          C48108 * (3 * C48184 + ae * C48185 +
                    C48108 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47867;
    const double C888 = (2 * C48140 + ae * C48141 + C48108 * C48160 +
                         C48188 * std::pow(C48272, 2)) /
                        C47867;
    const double C889 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 +
         (3 * C48184 + ae * C48185 +
          C48108 *
              (2 * C48180 + ae * C48181 +
               C48108 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(C48272, 2)) /
        C47867;
    const double C2742 =
        (2 * C48272 * C48188 +
         C48272 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48319)) /
        C47867;
    const double C3678 = C3664 + C3665;
    const double C16485 = C16471 + C16472;
    const double C20545 = C20540 + C20541;
    const double C34328 = C34323 + C34324;
    const double C37910 = C37896 + C37897;
    const double C18265 = C18262 + C18263;
    const double C18505 = C18501 + C18502;
    const double C48266 = C48252 + C48265;
    const double C48311 = C48225 + C48309;
    const double C9155 =
        (4 * (2 * C48303 + ae * C48304 + C48107 * C48362) +
         ae * (3 * C48304 + C48107 * C48363) +
         C48107 *
             (3 * C48362 + ae * C48363 +
              C48107 *
                  (2 * C48356 + ae * C48358 +
                   C48107 * (C48180 + ae * C48107 * C48261 +
                             C48107 * (ae * C48261 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C9293 =
        (3 * (C48315 + ae * C48272 * C48351 + C48107 * C48375) +
         ae * C48272 * C48363 +
         C48107 * (2 * C48375 + ae * C48272 * C48358 +
                   C48107 * (C48372 + ae * C48272 * C48107 * C48261 +
                             C48107 * (ae * C48272 * C48261 +
                                       C48107 * C48272 *
                                           (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C9152 = (4 * (2 * C48299 + C48107 * C48304) +
                          C48107 * (3 * C48304 + C48107 * C48363)) /
                         C47862;
    const double C9290 = (C48272 * (3 * C48304 + C48107 * C48363)) / C47862;
    const double C10049 =
        (2 * C48299 + C48107 * C48304 + C48363 * C48319) / C47862;
    const double C9441 =
        (5 * (3 * C48348 + ae * C48349 + C48107 * C48396) +
         ae * (4 * C48349 + C48107 * C48397) +
         C48107 *
             (4 * C48396 + ae * C48397 +
              C48107 *
                  (3 * C48392 + ae * C48393 +
                   C48107 * (2 * C48386 + ae * C48388 +
                             C48107 * (C48176 + ae * C48107 * C48258 +
                                       C48107 * (ae * C48258 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C9533 =
        (4 * (2 * C48369 + ae * C48272 * C48344 + C48107 * C48408) +
         ae * C48272 * C48397 +
         C48107 * (3 * C48408 + ae * C48272 * C48393 +
                   C48107 * (2 * C48406 + ae * C48272 * C48388 +
                             C48107 * (C48401 + ae * C48272 * C48107 * C48258 +
                                       C48107 * (ae * C48272 * C48258 +
                                                 C48107 * C48272 *
                                                     std::pow(C48110, 8) *
                                                     bs[8] * C48118))))) /
        C47867;
    const double C9439 = (5 * (3 * C48297 + C48107 * C48349) +
                          C48107 * (4 * C48349 + C48107 * C48397)) /
                         C47862;
    const double C9531 = (C48272 * (4 * C48349 + C48107 * C48397)) / C47862;
    const double C9788 =
        (3 * C48297 + C48107 * C48349 + C48397 * C48319) / C47862;
    const double C49237 = C49205 + C49233;
    const double C20270 = C49224 - (C49007 * C48996) / C47862;
    const double C17811 = C49225 / C47868 - C49005 / C49183;
    const double C49234 = C49207 + C49224;
    const double C3966 = C3941 + C3942;
    const double C5268 = C5243 + C5244;
    const double C22687 = C22662 + C22663;
    const double C31604 = C31579 + C31580;
    const double C47907 = C47904 - C47883;
    const double C1244 = C1217 + C1218;
    const double C1241 = C1211 + C1212;
    const double C1238 = C1205 + C1206;
    const double C1235 = C1199 + C1200;
    const double C1232 = C1193 + C1194;
    const double C1229 = C1187 + C1188;
    const double C1226 = C1181 + C1182;
    const double C1223 = C1175 + C1176;
    const double C1698 = C1689 + C1690;
    const double C1695 = C1683 + C1684;
    const double C1892 = C1879 + C1880;
    const double C1889 = C1873 + C1874;
    const double C1886 = C1867 + C1868;
    const double C1883 = C1861 + C1862;
    const double C2813 = C2786 + C2787;
    const double C2810 = C2780 + C2781;
    const double C2807 = C2774 + C2775;
    const double C2804 = C2768 + C2769;
    const double C2801 = C2762 + C2763;
    const double C2798 = C2756 + C2757;
    const double C2795 = C2750 + C2751;
    const double C2792 = C2744 + C2745;
    const double C3245 = C3236 + C3237;
    const double C3242 = C3230 + C3231;
    const double C3683 = C3674 + C3675;
    const double C3680 = C3668 + C3669;
    const double C6372 = C6363 + C6364;
    const double C6369 = C6357 + C6358;
    const double C1239 = C1207 + C1208;
    const double C1236 = C1201 + C1202;
    const double C1233 = C1195 + C1196;
    const double C1230 = C1189 + C1190;
    const double C1227 = C1183 + C1184;
    const double C1224 = C1177 + C1178;
    const double C1697 = C1687 + C1688;
    const double C1694 = C1681 + C1682;
    const double C1891 = C1877 + C1878;
    const double C1888 = C1871 + C1872;
    const double C1885 = C1865 + C1866;
    const double C1882 = C1859 + C1860;
    const double C2814 = C2788 + C2789;
    const double C2808 = C2776 + C2777;
    const double C2805 = C2770 + C2771;
    const double C2802 = C2764 + C2765;
    const double C2799 = C2758 + C2759;
    const double C2796 = C2752 + C2753;
    const double C2793 = C2746 + C2747;
    const double C3246 = C3238 + C3239;
    const double C3243 = C3232 + C3233;
    const double C3682 = C3672 + C3673;
    const double C3679 = C3666 + C3667;
    const double C23900 = C23874 + C23875;
    const double C23898 = C23870 + C23871;
    const double C23896 = C23866 + C23867;
    const double C23894 = C23862 + C23863;
    const double C23892 = C23858 + C23859;
    const double C23890 = C23854 + C23855;
    const double C23888 = C23850 + C23851;
    const double C23886 = C23846 + C23847;
    const double C23884 = C23842 + C23843;
    const double C23882 = C23838 + C23839;
    const double C23880 = C23834 + C23835;
    const double C23878 = C23830 + C23831;
    const double C24275 = C24270 + C24271;
    const double C24273 = C24266 + C24267;
    const double C24441 = C24428 + C24429;
    const double C24439 = C24424 + C24425;
    const double C24437 = C24420 + C24421;
    const double C24435 = C24416 + C24417;
    const double C24433 = C24412 + C24413;
    const double C24431 = C24408 + C24409;
    const double C25174 = C25160 + C25161;
    const double C25172 = C25156 + C25157;
    const double C25170 = C25152 + C25153;
    const double C25168 = C25148 + C25149;
    const double C25166 = C25144 + C25145;
    const double C25164 = C25140 + C25141;
    const double C25416 = C25398 + C25399;
    const double C25414 = C25394 + C25395;
    const double C25412 = C25390 + C25391;
    const double C25410 = C25386 + C25387;
    const double C25408 = C25382 + C25383;
    const double C25406 = C25378 + C25379;
    const double C25404 = C25374 + C25375;
    const double C25402 = C25370 + C25371;
    const double C25769 = C25764 + C25765;
    const double C25767 = C25760 + C25761;
    const double C25983 = C25974 + C25975;
    const double C25981 = C25970 + C25971;
    const double C26535 = C26528 + C26529;
    const double C26533 = C26524 + C26525;
    const double C29937 = C29931 + C29932;
    const double C29935 = C29927 + C29928;
    const double C34327 = C34321 + C34322;
    const double C34325 = C34317 + C34318;
    const double C35063 = C35055 + C35056;
    const double C35061 = C35051 + C35052;
    const double C11146 = C11137 + C10255;
    const double C17743 = C17736 + C16904;
    const double C22404 = C22398 + C21652;
    const double C22405 = C22399 + C21656;
    const double C22673 = C49235 * C254;
    const double C22665 = C49235 * C247;
    const double C22657 = C49235 * C255;
    const double C22649 = C49235 * C248;
    const double C23069 = C49235 * C522;
    const double C23061 = C49235 * C532;
    const double C23223 = C49235 * C624;
    const double C23215 = C49235 * C634;
    const double C31590 = C49235 * C362;
    const double C31582 = C49235 * C355;
    const double C31574 = C49235 * C363;
    const double C31566 = C49235 * C356;
    const double C32344 = C49235 * C875;
    const double C32336 = C49235 * C885;
    const double C101 =
        (C49226 + 2 * C48805) / C47868 - (C49235 * C48796) / C47862;
    const double C3954 = C3785 * C253;
    const double C3946 = C3785 * C246;
    const double C3938 = C3785 * C254;
    const double C3930 = C3785 * C247;
    const double C4346 = C3785 * C523;
    const double C4338 = C3785 * C533;
    const double C4500 = C3785 * C625;
    const double C4492 = C3785 * C635;
    const double C5256 = C3785 * C361;
    const double C5248 = C3785 * C354;
    const double C5240 = C3785 * C362;
    const double C5232 = C3785 * C355;
    const double C6006 = C3785 * C876;
    const double C5998 = C3785 * C886;
    const double C22675 = C49228 * C253;
    const double C22667 = C49228 * C246;
    const double C22659 = C49228 * C254;
    const double C22651 = C49228 * C247;
    const double C23067 = C49228 * C523;
    const double C23059 = C49228 * C533;
    const double C23221 = C49228 * C625;
    const double C23213 = C49228 * C635;
    const double C31592 = C49228 * C361;
    const double C31584 = C49228 * C354;
    const double C31576 = C49228 * C362;
    const double C31568 = C49228 * C355;
    const double C32342 = C49228 * C876;
    const double C32334 = C49228 * C886;
    const double C102 =
        (C49213 + 2 * C48813 + C49235) / C47868 - (C49228 * C48796) / C47862;
    const double C103 = (C49181 + C48810 / C47862 + C49228) / C47868 -
                        (C49215 * C48796) / C47862;
    const double C48021 = C48017 - C47998;
    const double C43373 = C42628 + C42629;
    const double C43372 = C42624 + C42625;
    const double C41523 = C10280 * C49236;
    const double C41515 = C10276 * C49236;
    const double C41889 = C9557 * C49236;
    const double C42260 = C10278 * C49236;
    const double C9055 =
        (C49229 + 2 * C48960) / C47868 - (C49236 * C48956) / C47862;
    const double C14433 = C10082 * C11254;
    const double C14425 = C9557 * C11254;
    const double C14799 = C9555 * C11254;
    const double C15166 = C10078 * C11254;
    const double C41525 = C10082 * C49232;
    const double C41517 = C9557 * C49232;
    const double C41891 = C9555 * C49232;
    const double C42258 = C10078 * C49232;
    const double C9056 =
        (C49217 + 2 * C48967 + C49236) / C47868 - (C49232 * C48956) / C47862;
    const double C9057 = (C49194 + C48964 / C47862 + C49232) / C47868 -
                         (C49222 * C48956) / C47862;
    const double C9447 = C9443 + C9444;
    const double C9551 = C9535 + C9536;
    const double C48249 = C48248 + C48247;
    const double C3235 = C49181 * C2302;
    const double C16054 = C49181 * C2302;
    const double C18852 = C48810 * C2302;
    const double C25159 = C48810 * C2302;
    const double C29018 = C26650 * C2302;
    const double C1881 = C1857 + C1858;
    const double C8579 = C8555 + C8556;
    const double C12727 = C12718 + C12719;
    const double C27473 = C27449 + C27450;
    const double C29938 = C29933 + C29934;
    const double C14437 = C14291 * C49204;
    const double C41529 = C14291 * C49204;
    const double C14436 = C14290 * C11262;
    const double C41528 = C14290 * C23698;
    const double C10273 = C10087 * C7765;
    const double C16918 = C10087 * C1011;
    const double C47017 = C10087 * C48046;
    const double C48646 = C48645 + C48630;
    const double C10723 = C10703 + C10704;
    const double C14802 = C9552 * C11262;
    const double C41894 = C9552 * C23698;
    const double C10721 = C10552 * C7765;
    const double C15163 = C10552 * C11262;
    const double C17332 = C10552 * C1011;
    const double C42255 = C10552 * C23698;
    const double C47431 = C10552 * C48046;
    const double C1245 = C1219 + C1220;
    const double C1234 = C1197 + C1198;
    const double C7972 = C7935 + C7936;
    const double C11461 = C11432 + C11433;
    const double C23897 = C23868 + C23869;
    const double C26866 = C26829 + C26830;
    const double C1887 = C1869 + C1870;
    const double C6373 = C6365 + C6366;
    const double C8585 = C8567 + C8568;
    const double C12723 = C12710 + C12711;
    const double C25171 = C25154 + C25155;
    const double C27479 = C27461 + C27462;
    const double C1693 = C1679 + C1680;
    const double C8403 = C8389 + C8390;
    const double C11465 = C11440 + C11441;
    const double C23901 = C23876 + C23877;
    const double C27297 = C27283 + C27284;
    const double C3247 = C3240 + C3241;
    const double C16066 = C16059 + C16060;
    const double C18860 = C18855 + C18856;
    const double C25175 = C25162 + C25163;
    const double C29027 = C29011 + C29012;
    const double C1237 = C1203 + C1204;
    const double C3962 = C3933 + C3934;
    const double C7975 = C7941 + C7942;
    const double C22683 = C22654 + C22655;
    const double C26869 = C26835 + C26836;
    const double C2806 = C2772 + C2773;
    const double C5264 = C5235 + C5236;
    const double C15637 = C15603 + C15604;
    const double C28471 = C28455 + C28456;
    const double C31600 = C31571 + C31572;
    const double C1242 = C1213 + C1214;
    const double C1231 = C1191 + C1192;
    const double C7969 = C7929 + C7930;
    const double C11459 = C11428 + C11429;
    const double C23895 = C23864 + C23865;
    const double C26863 = C26823 + C26824;
    const double C1890 = C1875 + C1876;
    const double C6370 = C6359 + C6360;
    const double C8588 = C8573 + C8574;
    const double C12721 = C12706 + C12707;
    const double C25169 = C25150 + C25151;
    const double C27482 = C27467 + C27468;
    const double C2811 = C2782 + C2783;
    const double C2800 = C2760 + C2761;
    const double C15631 = C15591 + C15592;
    const double C19064 = C19057 + C19058;
    const double C25415 = C25396 + C25397;
    const double C29584 = C29575 + C29576;
    const double C1696 = C1685 + C1686;
    const double C8406 = C8395 + C8396;
    const double C11463 = C11436 + C11437;
    const double C23899 = C23872 + C23873;
    const double C27300 = C27289 + C27290;
    const double C1884 = C1863 + C1864;
    const double C8582 = C8561 + C8562;
    const double C12725 = C12714 + C12715;
    const double C27476 = C27455 + C27456;
    const double C29936 = C29929 + C29930;
    const double C3681 = C3670 + C3671;
    const double C16488 = C16477 + C16478;
    const double C20543 = C20536 + C20537;
    const double C34326 = C34319 + C34320;
    const double C37913 = C37902 + C37903;
    const double C3958 = C49198 * C251;
    const double C22679 = C49198 * C251;
    const double C5260 = C49198 * C359;
    const double C31596 = C49198 * C359;
    const double C2791 = C49181 * C888;
    const double C5994 = C49198 * C888;
    const double C15622 = C49181 * C888;
    const double C32330 = C49198 * C888;
    const double C37083 = C26650 * C888;
    const double C18267 = C18265 * C48905;
    const double C22400 = C18265 * C48964;
    const double C43374 = C18265 * C48964;
    const double C18507 = C18505 * C48905;
    const double C48267 = C48266 + C48256;
    const double C1675 =
        (3 * (C48160 + ae * C48306 + C48107 * C48310) +
         ae * (2 * C48306 + C48107 * C48311) +
         C48107 *
             (2 * C48310 + ae * C48311 +
              C48107 *
                  (C48184 + ae * C48107 * C48264 +
                   C48107 * (ae * C48264 +
                             C48107 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C1855 =
        (2 * (ae * C48272 * C48225 + C48107 * C48317) + ae * C48272 * C48311 +
         C48107 * (C48317 + ae * C48272 * C48107 * C48264 +
                   C48107 * (ae * C48272 * C48264 +
                             C48107 * C48272 *
                                 (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C1669 = (3 * (C48243 + C48225 * C48294) +
                          C48107 * (2 * C48306 + C48107 * C48311)) /
                         C47862;
    const double C1849 = (C48272 * (2 * C48306 + C48107 * C48311)) / C47862;
    const double C2308 = (C48243 + C48225 * C48294 + C48311 * C48319) / C47862;
    const double C17808 =
        (C49230 + 2 * C49000) / C47868 - (C49237 * C48996) / C47862;
    const double C17809 =
        (C49219 + 2 * C49007 + C49237) / C47868 - (C49234 * C48996) / C47862;
    const double C17810 = (C49197 + C49004 / C47862 + C49234) / C47868 -
                          (C49225 * C48996) / C47862;
    const double C11438 = C47907 * C1163;
    const double C11434 = C47907 * C1159;
    const double C11430 = C47907 * C528;
    const double C11426 = C47907 * C518;
    const double C11422 = C47907 * C242;
    const double C11418 = C47907 * C236;
    const double C11414 = C47907 * C1164;
    const double C11410 = C47907 * C1160;
    const double C11406 = C47907 * C527;
    const double C11402 = C47907 * C517;
    const double C11398 = C47907 * C243;
    const double C11394 = C47907 * C237;
    const double C11834 = C47907 * C1664;
    const double C11830 = C47907 * C1670;
    const double C11992 = C47907 * C619;
    const double C11988 = C47907 * C629;
    const double C11984 = C47907 * C1394;
    const double C11980 = C47907 * C1398;
    const double C11976 = C47907 * C1844;
    const double C11972 = C47907 * C1850;
    const double C12716 = C47907 * C1397;
    const double C12712 = C47907 * C1393;
    const double C12708 = C47907 * C630;
    const double C12704 = C47907 * C620;
    const double C12934 = C47907 * C350;
    const double C12930 = C47907 * C344;
    const double C12926 = C47907 * C351;
    const double C12922 = C47907 * C345;
    const double C13498 = C47907 * C2294;
    const double C13494 = C47907 * C2303;
    const double C13490 = C47907 * C2297;
    const double C13486 = C47907 * C2309;
    const double C14052 = C47907 * C870;
    const double C14048 = C47907 * C880;
    const double C18853 = C47907 * C2304;
    const double C18849 = C47907 * C2295;
    const double C19059 = C47907 * C881;
    const double C19055 = C47907 * C871;
    const double C19609 = C47907 * C3217;
    const double C19605 = C47907 * C3223;
    const double C20161 = C47907 * C2729;
    const double C20157 = C47907 * C2733;
    const double C20538 = C47907 * C2732;
    const double C20534 = C47907 * C2728;
    const double C21272 = C47907 * C3649;
    const double C21268 = C47907 * C3655;
    const double C47910 = C47907 / C47868;
    const double C47909 = C47860 * C47907;
    const double C1678 = C1232 + C1233;
    const double C1677 = C1229 + C1230;
    const double C7106 = C1891 + C1892;
    const double C7103 = C1892 + C1891;
    const double C7105 = C1888 + C1889;
    const double C7104 = C1889 + C1888;
    const double C3663 = C2801 + C2802;
    const double C3662 = C2798 + C2799;
    const double C24263 = C23888 + C23889;
    const double C24262 = C23886 + C23887;
    const double C24261 = C23884 + C23885;
    const double C24260 = C23882 + C23883;
    const double C25979 = C24440 + C24441;
    const double C25964 = C24441 + C24440;
    const double C25978 = C24438 + C24439;
    const double C25965 = C24439 + C24438;
    const double C30473 = C24437 + C24436;
    const double C30670 = C24436 + C24437;
    const double C30474 = C24435 + C24434;
    const double C30669 = C24434 + C24435;
    const double C25976 = C25167 + C25166;
    const double C25967 = C25166 + C25167;
    const double C25977 = C25165 + C25164;
    const double C25966 = C25164 + C25165;
    const double C26519 = C25408 + C25409;
    const double C26518 = C25406 + C25407;
    const double C35047 = C26535 + C26534;
    const double C35048 = C26533 + C26532;
    const double C11149 = C11146 + C10256;
    const double C17744 = C17743 + C16905;
    const double C22406 = C22404 + C21653;
    const double C22407 = C22405 + C21657;
    const double C48027 = C48021 / C47868;
    const double C48026 = C47947 * C48021;
    const double C43379 = C43373 + C42630;
    const double C43378 = C43372 + C42626;
    const double C14803 = C9551 * C49204;
    const double C41895 = C9551 * C49204;
    const double C535 =
        (2 * C48140 + ae * C48141 + C48108 * C48160 + ae * C48107 * C48249 +
         C48107 * (ae * C48249 + C48107 * C48188)) /
        C47867;
    const double C637 =
        (ae * C48272 * C48249 + C48107 * C48272 * C48188) / C47867;
    const double C137 = (4 * (2 * C48238 + C48108 * C48243 + C48446 * ae) +
                         C48108 * (3 * C48243 + C48108 * C48249 + C48456 * ae) +
                         (3 * C48446 + C48108 * C48456) * ae) /
                        C47862;
    const double C244 =
        (C48107 * (3 * C48243 + C48108 * C48249 + C48456 * ae)) / C47862;
    const double C352 =
        (C48272 * (3 * C48243 + C48108 * C48249 + C48456 * ae)) / C47862;
    const double C525 =
        (2 * C48238 + C48108 * C48243 + C48446 * ae + C48249 * C48294) / C47862;
    const double C627 = (C48272 * C48107 * C48249) / C47862;
    const double C878 =
        (2 * C48238 + C48108 * C48243 + C48446 * ae + C48249 * C48319) / C47862;
    const double C3244 = C3234 + C3235;
    const double C16063 = C16053 + C16054;
    const double C18858 = C18851 + C18852;
    const double C25173 = C25158 + C25159;
    const double C29030 = C29017 + C29018;
    const double C9440 =
        (5 * (3 * C48605 + C48107 * C48646 + C48604 * ae) +
         C48107 *
             (4 * C48646 +
              C48107 *
                  (3 * C48641 +
                   C48107 *
                       (2 * C48633 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) +
                        C48635 * ae) +
                   C48640 * ae) +
              C48644 * ae) +
         (4 * C48604 + C48107 * C48644) * ae) /
        C47862;
    const double C9532 =
        (C48272 *
         (4 * C48646 +
          C48107 * (3 * C48641 +
                    C48107 * (2 * C48633 +
                              C48107 * (C48153 +
                                        C48107 * (C48107 * C48177 + C48254) +
                                        C48107 * C48213 * ae) +
                              C48635 * ae) +
                    C48640 * ae) +
          C48644 * ae)) /
        C47862;
    const double C9787 =
        (2 * C48539 + C48107 * C48605 + C48540 * ae + C48646 * C48319) / C47862;
    const double C9789 =
        (3 * C48605 + C48107 * C48646 + C48604 * ae +
         (3 * C48641 +
          C48107 * (2 * C48633 +
                    C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                              C48107 * C48213 * ae) +
                    C48635 * ae) +
          C48640 * ae) *
             C48319) /
        C47862;
    const double C10700 =
        (2 * C48272 * C48646 +
         C48272 *
             (C48646 + (2 * C48633 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48254) +
                                  C48107 * C48213 * ae) +
                        C48635 * ae) *
                           C48319)) /
        C47862;
    const double C11138 = C10723 * C49194;
    const double C17737 = C10723 * C49194;
    const double C22039 = C10723 * C48964;
    const double C43013 = C10723 * C48964;
    const double C47836 = C10723 * C26653;
    const double C3974 = C3957 + C3958;
    const double C22695 = C22678 + C22679;
    const double C5276 = C5259 + C5260;
    const double C31612 = C31595 + C31596;
    const double C2815 = C2790 + C2791;
    const double C6009 = C5993 + C5994;
    const double C15646 = C15621 + C15622;
    const double C32345 = C32329 + C32330;
    const double C37089 = C37082 + C37083;
    const double C48268 = C48108 * C48267;
    const double C1173 =
        (2 * (ae * C48249 + C48107 * C48188) +
         ae * (C48249 + C48267 * std::pow(C48107, 2)) +
         C48107 *
             (C48188 + ae * C48107 * C48267 +
              C48107 *
                  (ae * C48267 +
                   C48107 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C1407 =
        (C48272 * C48188 + ae * C48272 * C48107 * C48267 +
         C48107 * (ae * C48272 * C48267 +
                   C48107 * C48272 *
                       (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C2580 =
        (ae * (C48249 + C48267 * C48319) +
         C48107 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48319)) /
        C47867;
    const double C1168 =
        (2 * C48107 * C48249 + C48107 * (C48249 + C48267 * C48294)) / C47862;
    const double C1402 = (C48272 * (C48249 + C48267 * C48294)) / C47862;
    const double C2578 = (C48107 * C48249 + C48107 * C48267 * C48319) / C47862;
    const double C2737 =
        (2 * C48272 * C48249 + C48272 * (C48249 + C48267 * C48319)) / C47862;
    const double C11464 = C11438 + C11439;
    const double C11462 = C11434 + C11435;
    const double C11460 = C11430 + C11431;
    const double C11458 = C11426 + C11427;
    const double C11456 = C11422 + C11423;
    const double C11454 = C11418 + C11419;
    const double C11452 = C11414 + C11415;
    const double C11450 = C11410 + C11411;
    const double C11448 = C11406 + C11407;
    const double C11446 = C11402 + C11403;
    const double C11444 = C11398 + C11399;
    const double C11442 = C11394 + C11395;
    const double C11839 = C11834 + C11835;
    const double C11837 = C11830 + C11831;
    const double C12005 = C11992 + C11993;
    const double C12003 = C11988 + C11989;
    const double C12001 = C11984 + C11985;
    const double C11999 = C11980 + C11981;
    const double C11997 = C11976 + C11977;
    const double C11995 = C11972 + C11973;
    const double C12726 = C12716 + C12717;
    const double C12724 = C12712 + C12713;
    const double C12722 = C12708 + C12709;
    const double C12720 = C12704 + C12705;
    const double C12944 = C12934 + C12935;
    const double C12942 = C12930 + C12931;
    const double C12940 = C12926 + C12927;
    const double C12938 = C12922 + C12923;
    const double C13511 = C13498 + C13499;
    const double C13509 = C13494 + C13495;
    const double C13507 = C13490 + C13491;
    const double C13505 = C13486 + C13487;
    const double C14057 = C14052 + C14053;
    const double C14055 = C14048 + C14049;
    const double C18859 = C18853 + C18854;
    const double C18857 = C18849 + C18850;
    const double C19065 = C19059 + C19060;
    const double C19063 = C19055 + C19056;
    const double C19616 = C19609 + C19610;
    const double C19614 = C19605 + C19606;
    const double C20168 = C20161 + C20162;
    const double C20166 = C20157 + C20158;
    const double C20544 = C20538 + C20539;
    const double C20542 = C20534 + C20535;
    const double C21280 = C21272 + C21273;
    const double C21278 = C21268 + C21269;
    const double C47913 = C47910 - C47905;
    const double C7761 = C47910 + (C47896 * ae) / C47862;
    const double C47912 = C47909 + C49139;
    const double C1692 = C1678 + C1234;
    const double C1691 = C1677 + C1231;
    const double C7110 = C1890 + C7106;
    const double C7107 = C7103 + C1890;
    const double C7109 = C1887 + C7105;
    const double C7108 = C7104 + C1887;
    const double C3677 = C3663 + C2803;
    const double C3676 = C3662 + C2800;
    const double C26521 = C25967 * C48964;
    const double C39524 = C25967 * C48964;
    const double C26520 = C25966 * C22516;
    const double C39523 = C25966 * C3795;
    const double C26531 = C26519 * C22509;
    const double C35046 = C26519 * C48905;
    const double C39522 = C26519 * C49161;
    const double C26530 = C26518 * C22515;
    const double C35045 = C26518 * C118;
    const double C39521 = C26518 * C3794;
    const double C35058 = C35047 * C118;
    const double C35059 = C35048 * C48905;
    const double C11152 = C11149 + C10257;
    const double C17745 = C17744 + C16906;
    const double C48032 = C48027 - C48028;
    const double C48031 = C48026 + C49161;
    const double C43381 = C43379 + C42631;
    const double C43380 = C43378 + C42627;
    const double C1222 = C49181 * C535;
    const double C4334 = C49198 * C535;
    const double C7960 = C49181 * C535;
    const double C23055 = C49198 * C535;
    const double C26854 = C26650 * C535;
    const double C4488 = C49198 * C637;
    const double C6368 = C49181 * C637;
    const double C23209 = C49198 * C637;
    const double C28238 = C26650 * C637;
    const double C39879 = C49181 * C637;
    const double C3950 = C49198 * C244;
    const double C22671 = C49198 * C244;
    const double C5252 = C49198 * C352;
    const double C31588 = C49198 * C352;
    const double C1216 = C49181 * C525;
    const double C4342 = C49198 * C525;
    const double C7954 = C49181 * C525;
    const double C23063 = C49198 * C525;
    const double C26848 = C26650 * C525;
    const double C4496 = C49198 * C627;
    const double C6362 = C49181 * C627;
    const double C23217 = C49198 * C627;
    const double C28232 = C26650 * C627;
    const double C39873 = C49181 * C627;
    const double C2785 = C49181 * C878;
    const double C6002 = C49198 * C878;
    const double C15616 = C49181 * C878;
    const double C32338 = C49198 * C878;
    const double C37077 = C26650 * C878;
    const double C10547 = C9060 * C9787;
    const double C48269 = C48251 + C48268;
    const double C11827 = C11452 + C11453;
    const double C11826 = C11450 + C11451;
    const double C11825 = C11448 + C11449;
    const double C11824 = C11446 + C11447;
    const double C13503 = C12004 + C12005;
    const double C13482 = C12005 + C12004;
    const double C13502 = C12002 + C12003;
    const double C13483 = C12003 + C12002;
    const double C13286 = C12001 + C12000;
    const double C13501 = C12000 + C12001;
    const double C13287 = C11999 + C11998;
    const double C13500 = C11998 + C11999;
    const double C19612 = C13510 + C13511;
    const double C19601 = C13511 + C13510;
    const double C19611 = C13508 + C13509;
    const double C19602 = C13509 + C13508;
    const double C20151 = C14057 + C14056;
    const double C20152 = C14055 + C14054;
    const double C21264 = C20168 + C20167;
    const double C21265 = C20166 + C20165;
    const double C26851 = C47913 * C529;
    const double C26845 = C47913 * C519;
    const double C26839 = C47913 * C241;
    const double C26833 = C47913 * C235;
    const double C26827 = C47913 * C528;
    const double C26821 = C47913 * C518;
    const double C26815 = C47913 * C242;
    const double C26809 = C47913 * C236;
    const double C27291 = C47913 * C1159;
    const double C27285 = C47913 * C1163;
    const double C27469 = C47913 * C620;
    const double C27463 = C47913 * C630;
    const double C27457 = C47913 * C1393;
    const double C27451 = C47913 * C1397;
    const double C28235 = C47913 * C631;
    const double C28229 = C47913 * C621;
    const double C28459 = C47913 * C349;
    const double C28453 = C47913 * C343;
    const double C28447 = C47913 * C350;
    const double C28441 = C47913 * C344;
    const double C29019 = C47913 * C2295;
    const double C29013 = C47913 * C2304;
    const double C29577 = C47913 * C871;
    const double C29571 = C47913 * C881;
    const double C37080 = C47913 * C882;
    const double C37074 = C47913 * C872;
    const double C37904 = C47913 * C2728;
    const double C37898 = C47913 * C2732;
    const double C116 =
        (C47913 / C47868 + ((C47860 * C47923 + C26650) * ae) / C47862) /
            C47868 -
        ((C47860 * (C47923 / C47868 + (0 * ae) / C47862) + C49198) * be) /
            C47862;
    const double C3792 =
        C47913 / C47868 - ((C47860 * C47923 + C26650) * be) / C47862;
    const double C22513 =
        C47913 / C47868 + ((C47860 * C47923 + C26650) * ae) / C47862;
    const double C7957 = C7761 * C529;
    const double C7951 = C7761 * C519;
    const double C7945 = C7761 * C241;
    const double C7939 = C7761 * C235;
    const double C7933 = C7761 * C528;
    const double C7927 = C7761 * C518;
    const double C7921 = C7761 * C242;
    const double C7915 = C7761 * C236;
    const double C8397 = C7761 * C1159;
    const double C8391 = C7761 * C1163;
    const double C8575 = C7761 * C620;
    const double C8569 = C7761 * C630;
    const double C8563 = C7761 * C1393;
    const double C8557 = C7761 * C1397;
    const double C15619 = C7761 * C882;
    const double C15613 = C7761 * C872;
    const double C15607 = C7761 * C349;
    const double C15601 = C7761 * C343;
    const double C15595 = C7761 * C881;
    const double C15589 = C7761 * C871;
    const double C15583 = C7761 * C350;
    const double C15577 = C7761 * C344;
    const double C16057 = C7761 * C2304;
    const double C16051 = C7761 * C2295;
    const double C16479 = C7761 * C2728;
    const double C16473 = C7761 * C2732;
    const double C39876 = C7761 * C631;
    const double C39870 = C7761 * C621;
    const double C47914 = C47912 * be;
    const double C7760 = C47899 + (C47912 * ae) / C47862 + C47888;
    const double C3685 = C3677 * C48905;
    const double C3684 = C3676 * C118;
    const double C26536 = C26530 + C26531;
    const double C35057 = C35045 + C35046;
    const double C39525 = C39521 + C39522;
    const double C35064 = C35058 + C35059;
    const double C11153 = C11152 + C10258;
    const double C17746 = C17745 + C16907;
    const double C47015 = C10085 * C48032;
    const double C47009 = C10081 * C48032;
    const double C47003 = C10077 * C48032;
    const double C46997 = C9558 * C48032;
    const double C47429 = C10079 * C48032;
    const double C47423 = C9556 * C48032;
    const double C47839 = C10726 * C48032;
    const double C9064 =
        (C48032 / C47868 + ((C47947 * C48046 + C26653) * ae) / C47862) /
            C47868 -
        ((C47947 * (C48046 / C47868 + (0 * ae) / C47862) + C49204) * be) /
            C47862;
    const double C11261 =
        C48032 / C47868 - ((C47947 * C48046 + C26653) * be) / C47862;
    const double C23697 =
        C48032 / C47868 + ((C47947 * C48046 + C26653) * ae) / C47862;
    const double C48035 = C48031 * be;
    const double C1246 = C1221 + C1222;
    const double C4349 = C4333 + C4334;
    const double C7984 = C7959 + C7960;
    const double C23070 = C23054 + C23055;
    const double C26878 = C26853 + C26854;
    const double C4503 = C4487 + C4488;
    const double C6374 = C6367 + C6368;
    const double C23224 = C23208 + C23209;
    const double C28244 = C28237 + C28238;
    const double C39885 = C39878 + C39879;
    const double C3970 = C3949 + C3950;
    const double C22691 = C22670 + C22671;
    const double C5272 = C5251 + C5252;
    const double C31608 = C31587 + C31588;
    const double C1243 = C1215 + C1216;
    const double C4353 = C4341 + C4342;
    const double C7981 = C7953 + C7954;
    const double C23074 = C23062 + C23063;
    const double C26875 = C26847 + C26848;
    const double C4507 = C4495 + C4496;
    const double C6371 = C6361 + C6362;
    const double C23228 = C23216 + C23217;
    const double C28241 = C28231 + C28232;
    const double C39882 = C39872 + C39873;
    const double C2812 = C2784 + C2785;
    const double C6013 = C6001 + C6002;
    const double C15643 = C15615 + C15616;
    const double C32349 = C32337 + C32338;
    const double C37086 = C37076 + C37077;
    const double C10551 = C10547 + C10548;
    const double C48270 = C48269 + C48257;
    const double C20153 = C19601 * C3795;
    const double C46588 = C19601 * C22516;
    const double C20154 = C19602 * C48964;
    const double C46589 = C19602 * C48964;
    const double C20163 = C20151 * C3794;
    const double C21262 = C20151 * C118;
    const double C46586 = C20151 * C22515;
    const double C20164 = C20152 * C49161;
    const double C21263 = C20152 * C48905;
    const double C46587 = C20152 * C22509;
    const double C21275 = C21264 * C118;
    const double C21276 = C21265 * C48905;
    const double C26877 = C26851 + C26852;
    const double C26874 = C26845 + C26846;
    const double C26871 = C26839 + C26840;
    const double C26868 = C26833 + C26834;
    const double C26865 = C26827 + C26828;
    const double C26862 = C26821 + C26822;
    const double C26859 = C26815 + C26816;
    const double C26856 = C26809 + C26810;
    const double C27301 = C27291 + C27292;
    const double C27298 = C27285 + C27286;
    const double C27483 = C27469 + C27470;
    const double C27480 = C27463 + C27464;
    const double C27477 = C27457 + C27458;
    const double C27474 = C27451 + C27452;
    const double C28243 = C28235 + C28236;
    const double C28240 = C28229 + C28230;
    const double C28473 = C28459 + C28460;
    const double C28470 = C28453 + C28454;
    const double C28467 = C28447 + C28448;
    const double C28464 = C28441 + C28442;
    const double C29031 = C29019 + C29020;
    const double C29028 = C29013 + C29014;
    const double C29585 = C29577 + C29578;
    const double C29582 = C29571 + C29572;
    const double C37088 = C37080 + C37081;
    const double C37085 = C37074 + C37075;
    const double C37914 = C37904 + C37905;
    const double C37911 = C37898 + C37899;
    const double C3955 = C3792 * C240;
    const double C3947 = C3792 * C234;
    const double C3939 = C3792 * C241;
    const double C3931 = C3792 * C235;
    const double C4343 = C3792 * C519;
    const double C4335 = C3792 * C529;
    const double C4497 = C3792 * C621;
    const double C4489 = C3792 * C631;
    const double C5257 = C3792 * C348;
    const double C5249 = C3792 * C342;
    const double C5241 = C3792 * C349;
    const double C5233 = C3792 * C343;
    const double C6003 = C3792 * C872;
    const double C5995 = C3792 * C882;
    const double C22676 = C22513 * C240;
    const double C22668 = C22513 * C234;
    const double C22660 = C22513 * C241;
    const double C22652 = C22513 * C235;
    const double C23064 = C22513 * C519;
    const double C23056 = C22513 * C529;
    const double C23218 = C22513 * C621;
    const double C23210 = C22513 * C631;
    const double C31593 = C22513 * C348;
    const double C31585 = C22513 * C342;
    const double C31577 = C22513 * C349;
    const double C31569 = C22513 * C343;
    const double C32339 = C22513 * C872;
    const double C32331 = C22513 * C882;
    const double C7983 = C7957 + C7958;
    const double C7980 = C7951 + C7952;
    const double C7977 = C7945 + C7946;
    const double C7974 = C7939 + C7940;
    const double C7971 = C7933 + C7934;
    const double C7968 = C7927 + C7928;
    const double C7965 = C7921 + C7922;
    const double C7962 = C7915 + C7916;
    const double C8407 = C8397 + C8398;
    const double C8404 = C8391 + C8392;
    const double C8589 = C8575 + C8576;
    const double C8586 = C8569 + C8570;
    const double C8583 = C8563 + C8564;
    const double C8580 = C8557 + C8558;
    const double C15645 = C15619 + C15620;
    const double C15642 = C15613 + C15614;
    const double C15639 = C15607 + C15608;
    const double C15636 = C15601 + C15602;
    const double C15633 = C15595 + C15596;
    const double C15630 = C15589 + C15590;
    const double C15627 = C15583 + C15584;
    const double C15624 = C15577 + C15578;
    const double C16065 = C16057 + C16058;
    const double C16062 = C16051 + C16052;
    const double C16489 = C16479 + C16480;
    const double C16486 = C16473 + C16474;
    const double C39884 = C39876 + C39877;
    const double C39881 = C39870 + C39871;
    const double C47915 = C47914 / C47862;
    const double C7955 = C7760 * C528;
    const double C7949 = C7760 * C518;
    const double C7943 = C7760 * C242;
    const double C7937 = C7760 * C236;
    const double C7931 = C7760 * C527;
    const double C7925 = C7760 * C517;
    const double C7919 = C7760 * C243;
    const double C7913 = C7760 * C237;
    const double C8399 = C7760 * C1160;
    const double C8393 = C7760 * C1164;
    const double C8577 = C7760 * C619;
    const double C8571 = C7760 * C629;
    const double C8565 = C7760 * C1394;
    const double C8559 = C7760 * C1398;
    const double C15617 = C7760 * C881;
    const double C15611 = C7760 * C871;
    const double C15605 = C7760 * C350;
    const double C15599 = C7760 * C344;
    const double C15593 = C7760 * C880;
    const double C15587 = C7760 * C870;
    const double C15581 = C7760 * C351;
    const double C15575 = C7760 * C345;
    const double C16055 = C7760 * C2303;
    const double C16049 = C7760 * C2294;
    const double C16481 = C7760 * C2729;
    const double C16475 = C7760 * C2733;
    const double C39874 = C7760 * C630;
    const double C39868 = C7760 * C620;
    const double C3686 = C3684 + C3685;
    const double C26537 = C26536 + C26520;
    const double C39526 = C39525 + C39523;
    const double C14434 = C10083 * C11261;
    const double C14426 = C9556 * C11261;
    const double C14800 = C9554 * C11261;
    const double C15165 = C10079 * C11261;
    const double C41526 = C10083 * C23697;
    const double C41518 = C9556 * C23697;
    const double C41892 = C9554 * C23697;
    const double C42257 = C10079 * C23697;
    const double C48037 = C48035 / C47862;
    const double C10722 = C10551 * C49194;
    const double C15162 = C10551 * C49204;
    const double C17333 = C10551 * C49194;
    const double C42254 = C10551 * C49204;
    const double C47432 = C10551 * C26653;
    const double C536 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 + ae * C48107 * C48270 +
         C48107 *
             (ae * C48270 +
              C48107 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C638 =
        (ae * C48272 * C48270 +
         C48107 * C48272 *
             (3 * C48184 + ae * C48185 +
              C48108 * (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C138 = (5 * (3 * C48243 + C48108 * C48249 + C48456 * ae) +
                         C48108 * (4 * C48249 + C48108 * C48270 + C48460 * ae) +
                         (4 * C48456 + C48108 * C48460) * ae) /
                        C47862;
    const double C249 =
        (C48107 * (4 * C48249 + C48108 * C48270 + C48460 * ae)) / C47862;
    const double C357 =
        (C48272 * (4 * C48249 + C48108 * C48270 + C48460 * ae)) / C47862;
    const double C526 =
        (3 * C48243 + C48108 * C48249 + C48456 * ae + C48270 * C48294) / C47862;
    const double C628 = (C48272 * C48107 * C48270) / C47862;
    const double C879 =
        (3 * C48243 + C48108 * C48249 + C48456 * ae + C48270 * C48319) / C47862;
    const double C20169 = C20163 + C20164;
    const double C21274 = C21262 + C21263;
    const double C46590 = C46586 + C46587;
    const double C21281 = C21275 + C21276;
    const double C3973 = C3955 + C3956;
    const double C3969 = C3947 + C3948;
    const double C3965 = C3939 + C3940;
    const double C3961 = C3931 + C3932;
    const double C4354 = C4343 + C4344;
    const double C4350 = C4335 + C4336;
    const double C4508 = C4497 + C4498;
    const double C4504 = C4489 + C4490;
    const double C5275 = C5257 + C5258;
    const double C5271 = C5249 + C5250;
    const double C5267 = C5241 + C5242;
    const double C5263 = C5233 + C5234;
    const double C6014 = C6003 + C6004;
    const double C6010 = C5995 + C5996;
    const double C22694 = C22676 + C22677;
    const double C22690 = C22668 + C22669;
    const double C22686 = C22660 + C22661;
    const double C22682 = C22652 + C22653;
    const double C23075 = C23064 + C23065;
    const double C23071 = C23056 + C23057;
    const double C23229 = C23218 + C23219;
    const double C23225 = C23210 + C23211;
    const double C31611 = C31593 + C31594;
    const double C31607 = C31585 + C31586;
    const double C31603 = C31577 + C31578;
    const double C31599 = C31569 + C31570;
    const double C32350 = C32339 + C32340;
    const double C32346 = C32331 + C32332;
    const double C47916 = C47899 - C47915;
    const double C7982 = C7955 + C7956;
    const double C7979 = C7949 + C7950;
    const double C7976 = C7943 + C7944;
    const double C7973 = C7937 + C7938;
    const double C7970 = C7931 + C7932;
    const double C7967 = C7925 + C7926;
    const double C7964 = C7919 + C7920;
    const double C7961 = C7913 + C7914;
    const double C8408 = C8399 + C8400;
    const double C8405 = C8393 + C8394;
    const double C8590 = C8577 + C8578;
    const double C8587 = C8571 + C8572;
    const double C8584 = C8565 + C8566;
    const double C8581 = C8559 + C8560;
    const double C15644 = C15617 + C15618;
    const double C15641 = C15611 + C15612;
    const double C15638 = C15605 + C15606;
    const double C15635 = C15599 + C15600;
    const double C15632 = C15593 + C15594;
    const double C15629 = C15587 + C15588;
    const double C15626 = C15581 + C15582;
    const double C15623 = C15575 + C15576;
    const double C16064 = C16055 + C16056;
    const double C16061 = C16049 + C16050;
    const double C16490 = C16481 + C16482;
    const double C16487 = C16475 + C16476;
    const double C39883 = C39874 + C39875;
    const double C39880 = C39868 + C39869;
    const double C26538 = C26537 + C26521;
    const double C39527 = C39526 + C39524;
    const double C48039 = C48025 - C48037;
    const double C20170 = C20169 + C20153;
    const double C46591 = C46590 + C46588;
    const double C47917 = C47916 + C47888;
    const double C8388 = C7970 + C7971;
    const double C8387 = C7967 + C7968;
    const double C40617 = C8589 + C8590;
    const double C40614 = C8590 + C8589;
    const double C40616 = C8586 + C8587;
    const double C40615 = C8587 + C8586;
    const double C16470 = C15632 + C15633;
    const double C16469 = C15629 + C15630;
    const double C48040 = C48039 + C48010;
    const double C20171 = C20170 + C20154;
    const double C46592 = C46591 + C46589;
    const double C26849 = C47917 * C528;
    const double C26843 = C47917 * C518;
    const double C26837 = C47917 * C242;
    const double C26831 = C47917 * C236;
    const double C26825 = C47917 * C527;
    const double C26819 = C47917 * C517;
    const double C26813 = C47917 * C243;
    const double C26807 = C47917 * C237;
    const double C27293 = C47917 * C1160;
    const double C27287 = C47917 * C1164;
    const double C27471 = C47917 * C619;
    const double C27465 = C47917 * C629;
    const double C27459 = C47917 * C1394;
    const double C27453 = C47917 * C1398;
    const double C28233 = C47917 * C630;
    const double C28227 = C47917 * C620;
    const double C28457 = C47917 * C350;
    const double C28451 = C47917 * C344;
    const double C28445 = C47917 * C351;
    const double C28439 = C47917 * C345;
    const double C29021 = C47917 * C2294;
    const double C29015 = C47917 * C2303;
    const double C29579 = C47917 * C870;
    const double C29573 = C47917 * C880;
    const double C37078 = C47917 * C881;
    const double C37072 = C47917 * C871;
    const double C37906 = C47917 * C2729;
    const double C37900 = C47917 * C2733;
    const double C113 =
        (((((0 - (C47860 * C47861) / C47862) * ae) / C47862 -
           (0 * be) / C47874 + (2 * C47863) / C47862) /
              C47868 -
          ((C47860 * C47897 + 0) * be) / C47862 + C47880 - C47890) /
             C47868 +
         ((C47860 * C47911 + 0) * ae) / C47862) /
            C47868 -
        ((C47860 * (C47911 / C47868 +
                    ((C47860 * C47917 + C48805) * ae) / C47862 + C47913) +
          C49235) *
         be) /
            C47862 +
        C47917 / C47868 + ((C47860 * C47913 + C48813) * ae) / C47862 +
        2 * (C47888 / C47868 - (0 * be) / C47862);
    const double C114 =
        (C47911 / C47868 + ((C47860 * C47917 + C48805) * ae) / C47862 +
         C47913) /
            C47868 -
        ((C47860 * (C47917 / C47868 +
                    ((C47860 * C47913 + C48813) * ae) / C47862 + 2 * C47923) +
          C49228) *
         be) /
            C47862 +
        2 * (C47913 / C47868 + ((C47860 * C47923 + C26650) * ae) / C47862);
    const double C115 =
        (C47917 / C47868 + ((C47860 * C47913 + C48813) * ae) / C47862 +
         2 * C47923) /
            C47868 -
        ((C47860 *
              (C47913 / C47868 + ((C47860 * C47923 + C26650) * ae) / C47862) +
          C49215) *
         be) /
            C47862 +
        3 * (C47923 / C47868 + (0 * ae) / C47862);
    const double C3790 =
        C47911 / C47868 - ((C47860 * C47917 + C48805) * be) / C47862 + C47913;
    const double C3791 = C47917 / C47868 -
                         ((C47860 * C47913 + C48813) * be) / C47862 +
                         2 * C47923;
    const double C22511 =
        C47911 / C47868 + ((C47860 * C47917 + C48805) * ae) / C47862 + C47913;
    const double C22512 = C47917 / C47868 +
                          ((C47860 * C47913 + C48813) * ae) / C47862 +
                          2 * C47923;
    const double C8402 = C8388 + C7972;
    const double C8401 = C8387 + C7969;
    const double C40621 = C8588 + C40617;
    const double C40618 = C40614 + C8588;
    const double C40620 = C8585 + C40616;
    const double C40619 = C40615 + C8585;
    const double C16484 = C16470 + C15634;
    const double C16483 = C16469 + C15631;
    const double C47013 = C10281 * C48040;
    const double C47007 = C10279 * C48040;
    const double C47001 = C10277 * C48040;
    const double C46995 = C10275 * C48040;
    const double C47427 = C10077 * C48040;
    const double C47421 = C9558 * C48040;
    const double C47841 = C11148 * C48040;
    const double C9061 =
        (((((0 - (C47947 * C47993) / C47862) * ae) / C47862 -
           (0 * be) / C47874 + (2 * C47994) / C47862) /
              C47868 -
          ((C47947 * C48029 + 0) * be) / C47862 + C48003 - C48016) /
             C47868 +
         ((C47947 * C48038 + 0) * ae) / C47862) /
            C47868 -
        ((C47947 * (C48038 / C47868 +
                    ((C47947 * C48040 + C48960) * ae) / C47862 + C48032) +
          C49236) *
         be) /
            C47862 +
        C48040 / C47868 + ((C47947 * C48032 + C48967) * ae) / C47862 +
        2 * (C48010 / C47868 - (0 * be) / C47862);
    const double C9062 =
        (C48038 / C47868 + ((C47947 * C48040 + C48960) * ae) / C47862 +
         C48032) /
            C47868 -
        ((C47947 * (C48040 / C47868 +
                    ((C47947 * C48032 + C48967) * ae) / C47862 + 2 * C48046) +
          C49232) *
         be) /
            C47862 +
        2 * (C48032 / C47868 + ((C47947 * C48046 + C26653) * ae) / C47862);
    const double C9063 =
        (C48040 / C47868 + ((C47947 * C48032 + C48967) * ae) / C47862 +
         2 * C48046) /
            C47868 -
        ((C47947 *
              (C48032 / C47868 + ((C47947 * C48046 + C26653) * ae) / C47862) +
          C49222) *
         be) /
            C47862 +
        3 * (C48046 / C47868 + (0 * ae) / C47862);
    const double C11259 =
        C48038 / C47868 - ((C47947 * C48040 + C48960) * be) / C47862 + C48032;
    const double C11260 = C48040 / C47868 -
                          ((C47947 * C48032 + C48967) * be) / C47862 +
                          2 * C48046;
    const double C23695 =
        C48038 / C47868 + ((C47947 * C48040 + C48960) * ae) / C47862 + C48032;
    const double C23696 = C48040 / C47868 +
                          ((C47947 * C48032 + C48967) * ae) / C47862 +
                          2 * C48046;
    const double C26876 = C26849 + C26850;
    const double C26873 = C26843 + C26844;
    const double C26870 = C26837 + C26838;
    const double C26867 = C26831 + C26832;
    const double C26864 = C26825 + C26826;
    const double C26861 = C26819 + C26820;
    const double C26858 = C26813 + C26814;
    const double C26855 = C26807 + C26808;
    const double C27302 = C27293 + C27294;
    const double C27299 = C27287 + C27288;
    const double C27484 = C27471 + C27472;
    const double C27481 = C27465 + C27466;
    const double C27478 = C27459 + C27460;
    const double C27475 = C27453 + C27454;
    const double C28242 = C28233 + C28234;
    const double C28239 = C28227 + C28228;
    const double C28472 = C28457 + C28458;
    const double C28469 = C28451 + C28452;
    const double C28466 = C28445 + C28446;
    const double C28463 = C28439 + C28440;
    const double C29032 = C29021 + C29022;
    const double C29029 = C29015 + C29016;
    const double C29586 = C29579 + C29580;
    const double C29583 = C29573 + C29574;
    const double C37087 = C37078 + C37079;
    const double C37084 = C37072 + C37073;
    const double C37915 = C37906 + C37907;
    const double C37912 = C37900 + C37901;
    const double C3951 = C3790 * C242;
    const double C3943 = C3790 * C236;
    const double C3935 = C3790 * C243;
    const double C3927 = C3790 * C237;
    const double C4347 = C3790 * C517;
    const double C4339 = C3790 * C527;
    const double C4501 = C3790 * C619;
    const double C4493 = C3790 * C629;
    const double C5253 = C3790 * C350;
    const double C5245 = C3790 * C344;
    const double C5237 = C3790 * C351;
    const double C5229 = C3790 * C345;
    const double C6007 = C3790 * C870;
    const double C5999 = C3790 * C880;
    const double C3953 = C3791 * C241;
    const double C3945 = C3791 * C235;
    const double C3937 = C3791 * C242;
    const double C3929 = C3791 * C236;
    const double C4345 = C3791 * C518;
    const double C4337 = C3791 * C528;
    const double C4499 = C3791 * C620;
    const double C4491 = C3791 * C630;
    const double C5255 = C3791 * C349;
    const double C5247 = C3791 * C343;
    const double C5239 = C3791 * C350;
    const double C5231 = C3791 * C344;
    const double C6005 = C3791 * C871;
    const double C5997 = C3791 * C881;
    const double C22672 = C22511 * C242;
    const double C22664 = C22511 * C236;
    const double C22656 = C22511 * C243;
    const double C22648 = C22511 * C237;
    const double C23068 = C22511 * C517;
    const double C23060 = C22511 * C527;
    const double C23222 = C22511 * C619;
    const double C23214 = C22511 * C629;
    const double C31589 = C22511 * C350;
    const double C31581 = C22511 * C344;
    const double C31573 = C22511 * C351;
    const double C31565 = C22511 * C345;
    const double C32343 = C22511 * C870;
    const double C32335 = C22511 * C880;
    const double C22674 = C22512 * C241;
    const double C22666 = C22512 * C235;
    const double C22658 = C22512 * C242;
    const double C22650 = C22512 * C236;
    const double C23066 = C22512 * C518;
    const double C23058 = C22512 * C528;
    const double C23220 = C22512 * C620;
    const double C23212 = C22512 * C630;
    const double C31591 = C22512 * C349;
    const double C31583 = C22512 * C343;
    const double C31575 = C22512 * C350;
    const double C31567 = C22512 * C344;
    const double C32341 = C22512 * C871;
    const double C32333 = C22512 * C881;
    const double C16492 = C16484 * C48905;
    const double C16491 = C16483 * C118;
    const double C47835 = C47001 + C47002;
    const double C14430 = C10279 * C11259;
    const double C14422 = C10275 * C11259;
    const double C14796 = C9558 * C11259;
    const double C15169 = C10277 * C11259;
    const double C14432 = C10081 * C11260;
    const double C14424 = C9558 * C11260;
    const double C14798 = C9556 * C11260;
    const double C15167 = C10077 * C11260;
    const double C41522 = C10279 * C23695;
    const double C41514 = C10275 * C23695;
    const double C41888 = C9558 * C23695;
    const double C42261 = C10277 * C23695;
    const double C41524 = C10081 * C23696;
    const double C41516 = C9558 * C23696;
    const double C41890 = C9556 * C23696;
    const double C42259 = C10077 * C23696;
    const double C27282 = C26864 + C26865;
    const double C27281 = C26861 + C26862;
    const double C29024 = C27483 + C27484;
    const double C29009 = C27484 + C27483;
    const double C29023 = C27480 + C27481;
    const double C29010 = C27481 + C27480;
    const double C37894 = C29586 + C29585;
    const double C37895 = C29583 + C29582;
    const double C3971 = C3951 + C3952;
    const double C3967 = C3943 + C3944;
    const double C3963 = C3935 + C3936;
    const double C3959 = C3927 + C3928;
    const double C4356 = C4347 + C4348;
    const double C4352 = C4339 + C4340;
    const double C4510 = C4501 + C4502;
    const double C4506 = C4493 + C4494;
    const double C5273 = C5253 + C5254;
    const double C5269 = C5245 + C5246;
    const double C5265 = C5237 + C5238;
    const double C5261 = C5229 + C5230;
    const double C6016 = C6007 + C6008;
    const double C6012 = C5999 + C6000;
    const double C3972 = C3953 + C3954;
    const double C3968 = C3945 + C3946;
    const double C3964 = C3937 + C3938;
    const double C3960 = C3929 + C3930;
    const double C4355 = C4345 + C4346;
    const double C4351 = C4337 + C4338;
    const double C4509 = C4499 + C4500;
    const double C4505 = C4491 + C4492;
    const double C5274 = C5255 + C5256;
    const double C5270 = C5247 + C5248;
    const double C5266 = C5239 + C5240;
    const double C5262 = C5231 + C5232;
    const double C6015 = C6005 + C6006;
    const double C6011 = C5997 + C5998;
    const double C22692 = C22672 + C22673;
    const double C22688 = C22664 + C22665;
    const double C22684 = C22656 + C22657;
    const double C22680 = C22648 + C22649;
    const double C23077 = C23068 + C23069;
    const double C23073 = C23060 + C23061;
    const double C23231 = C23222 + C23223;
    const double C23227 = C23214 + C23215;
    const double C31609 = C31589 + C31590;
    const double C31605 = C31581 + C31582;
    const double C31601 = C31573 + C31574;
    const double C31597 = C31565 + C31566;
    const double C32352 = C32343 + C32344;
    const double C32348 = C32335 + C32336;
    const double C22693 = C22674 + C22675;
    const double C22689 = C22666 + C22667;
    const double C22685 = C22658 + C22659;
    const double C22681 = C22650 + C22651;
    const double C23076 = C23066 + C23067;
    const double C23072 = C23058 + C23059;
    const double C23230 = C23220 + C23221;
    const double C23226 = C23212 + C23213;
    const double C31610 = C31591 + C31592;
    const double C31606 = C31583 + C31584;
    const double C31602 = C31575 + C31576;
    const double C31598 = C31567 + C31568;
    const double C32351 = C32341 + C32342;
    const double C32347 = C32333 + C32334;
    const double C16493 = C16491 + C16492;
    const double C47842 = C47835 + C47003;
    const double C27296 = C27282 + C26866;
    const double C27295 = C27281 + C26863;
    const double C29034 = C27482 + C29024;
    const double C29025 = C29009 + C27482;
    const double C29033 = C27479 + C29023;
    const double C29026 = C29010 + C27479;
    const double C37908 = C37894 + C29584;
    const double C37909 = C37895 + C29581;
    const double C47843 = C47842 + C47004;
    const double C37916 = C37908 * C118;
    const double C37917 = C37909 * C48905;
    const double C47844 = C47843 + C47005;
    const double C37918 = C37916 + C37917;
    const double C47845 = C47844 + C47006;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                   C48813 * C127 + C47923 * C121 + C26650 * C128) *
                      C48040 +
                  (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                   C48813 * C141 + C47923 * C133 + C26650 * C142) *
                      C48960 +
                  (C47917 * C237 + C48805 * C248 + C47913 * C236 +
                   C48813 * C247 + C47923 * C235 + C26650 * C246) *
                      C48032 +
                  (C47917 * C243 + C48805 * C255 + C47913 * C242 +
                   C48813 * C254 + C47923 * C241 + C26650 * C253) *
                      C48967 +
                  (C47917 * C517 + C48805 * C522 + C47913 * C518 +
                   C48813 * C523 + C47923 * C519 + C26650 * C524) *
                      C48046 +
                  (C47917 * C527 + C48805 * C532 + C47913 * C528 +
                   C48813 * C533 + C47923 * C529 + C26650 * C534) *
                      C26653) *
                     C48917 * C48888 * C48871 * C110 -
                 ((C47923 * C530 + C26650 * C535 + C47913 * C529 +
                   C48813 * C534 + C47917 * C528 + C48805 * C533) *
                      C26653 +
                  (C47923 * C520 + C26650 * C525 + C47913 * C519 +
                   C48813 * C524 + C47917 * C518 + C48805 * C523) *
                      C48046 +
                  (C47923 * C240 + C26650 * C252 + C47913 * C241 +
                   C48813 * C253 + C47917 * C242 + C48805 * C254) *
                      C48967 +
                  (C47923 * C234 + C26650 * C245 + C47913 * C235 +
                   C48813 * C246 + C47917 * C236 + C48805 * C247) *
                      C48032 +
                  (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                   C48813 * C142 + C47917 * C132 + C48805 * C141) *
                      C48960 +
                  (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                   C48813 * C128 + C47917 * C120 + C48805 * C127) *
                      C48040) *
                     C48917 * C48888 * C48871 * C111 +
                 ((C47917 * C121 + C48805 * C128 + C47913 * C122 +
                   C48813 * C129 + C47923 * C123 + C26650 * C130) *
                      C48040 +
                  (C47917 * C133 + C48805 * C142 + C47913 * C134 +
                   C48813 * C143 + C47923 * C135 + C26650 * C144) *
                      C48960 +
                  (C47917 * C235 + C48805 * C246 + C47913 * C234 +
                   C48813 * C245 + C47923 * C233 + C26650 * C244) *
                      C48032 +
                  (C47917 * C241 + C48805 * C253 + C47913 * C240 +
                   C48813 * C252 + C47923 * C239 + C26650 * C251) *
                      C48967 +
                  (C47917 * C519 + C48805 * C524 + C47913 * C520 +
                   C48813 * C525 + C47923 * C521 + C26650 * C526) *
                      C48046 +
                  (C47917 * C529 + C48805 * C534 + C47913 * C530 +
                   C48813 * C535 + C47923 * C531 + C26650 * C536) *
                      C26653) *
                     C48917 * C48888 * C48871 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 +
                   (C26861 + C26862 + C26863) * C48046 +
                   (C26864 + C26865 + C26866) * C26653) *
                      C48917 * C48888 * C229 -
                  ((C47923 * C1162 + C26650 * C1170 + C47913 * C1163 +
                    C48813 * C1171 + C47917 * C1164 + C48805 * C1172) *
                       C26653 +
                   (C47923 * C1158 + C26650 * C1165 + C47913 * C1159 +
                    C48813 * C1166 + C47917 * C1160 + C48805 * C1167) *
                       C48046 +
                   (C26866 + C26865 + C26864) * C48967 +
                   (C26863 + C26862 + C26861) * C48032 +
                   (C26860 + C26859 + C26858) * C48960 +
                   (C26857 + C26856 + C26855) * C48040) *
                      C48917 * C48888 * C49189) *
                     C231 +
                 (((C26867 + C26868 + C26869) * C48040 +
                   (C26870 + C26871 + C26872) * C48960 +
                   (C26873 + C26874 + C26875) * C48032 +
                   (C26876 + C26877 + C26878) * C48967 +
                   (C47917 * C1159 + C48805 * C1166 + C47913 * C1158 +
                    C48813 * C1165 + C47923 * C1161 + C26650 * C1168) *
                       C48046 +
                   (C47917 * C1163 + C48805 * C1171 + C47913 * C1162 +
                    C48813 * C1170 + C47923 * C1169 + C26650 * C1173) *
                       C26653) *
                      C48917 * C48888 * C49189 -
                  ((C26878 + C26877 + C26876) * C26653 +
                   (C26875 + C26874 + C26873) * C48046 +
                   (C26872 + C26871 + C26870) * C48967 +
                   (C26869 + C26868 + C26867) * C48032 +
                   (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                    C48813 * C142 + C47917 * C132 + C48805 * C141) *
                       C48960 +
                   (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                    C48813 * C128 + C47917 * C120 + C48805 * C127) *
                       C48040) *
                      C48917 * C48888 * C229) *
                     C49187)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 +
                   (C26861 + C26862 + C26863) * C48046 +
                   (C26864 + C26865 + C26866) * C26653) *
                      C48917 * C339 -
                  ((C47923 * C1396 + C26650 * C1404 + C47913 * C1397 +
                    C48813 * C1405 + C47917 * C1398 + C48805 * C1406) *
                       C26653 +
                   (C47923 * C1392 + C26650 * C1399 + C47913 * C1393 +
                    C48813 * C1400 + C47917 * C1394 + C48805 * C1401) *
                       C48046 +
                   (C47923 * C631 + C26650 * C636 + C47913 * C630 +
                    C48813 * C635 + C47917 * C629 + C48805 * C634) *
                       C48967 +
                   (C47923 * C621 + C26650 * C626 + C47913 * C620 +
                    C48813 * C625 + C47917 * C619 + C48805 * C624) *
                       C48032 +
                   (C47923 * C349 + C26650 * C361 + C47913 * C350 +
                    C48813 * C362 + C47917 * C351 + C48805 * C363) *
                       C48960 +
                   (C47923 * C343 + C26650 * C354 + C47913 * C344 +
                    C48813 * C355 + C47917 * C345 + C48805 * C356) *
                       C48040) *
                      C48917 * C49191) *
                     C48871 * C231 +
                 (((C47917 * C344 + C48805 * C355 + C47913 * C343 +
                    C48813 * C354 + C47923 * C342 + C26650 * C353) *
                       C48040 +
                   (C47917 * C350 + C48805 * C362 + C47913 * C349 +
                    C48813 * C361 + C47923 * C348 + C26650 * C360) *
                       C48960 +
                   (C47917 * C620 + C48805 * C625 + C47913 * C621 +
                    C48813 * C626 + C47923 * C622 + C26650 * C627) *
                       C48032 +
                   (C47917 * C630 + C48805 * C635 + C47913 * C631 +
                    C48813 * C636 + C47923 * C632 + C26650 * C637) *
                       C48967 +
                   (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                    C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                       C48046 +
                   (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                    C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                       C26653) *
                      C48917 * C49191 -
                  ((C26878 + C26877 + C26876) * C26653 +
                   (C26875 + C26874 + C26873) * C48046 +
                   (C26872 + C26871 + C26870) * C48967 +
                   (C26869 + C26868 + C26867) * C48032 +
                   (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                    C48813 * C142 + C47917 * C132 + C48805 * C141) *
                       C48960 +
                   (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                    C48813 * C128 + C47917 * C120 + C48805 * C127) *
                       C48040) *
                      C48917 * C339) *
                     C48871 * C49187)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 +
                   (C26861 + C26862 + C26863) * C48046 +
                   (C26864 + C26865 + C26866) * C26653) *
                      C48917 * C48888 * C447 -
                  ((C47923 * C1162 + C26650 * C1170 + C47913 * C1163 +
                    C48813 * C1171 + C47917 * C1164 + C48805 * C1172) *
                       C26653 +
                   (C47923 * C1158 + C26650 * C1165 + C47913 * C1159 +
                    C48813 * C1166 + C47917 * C1160 + C48805 * C1167) *
                       C48046 +
                   (C26866 + C26865 + C26864) * C48967 +
                   (C26863 + C26862 + C26861) * C48032 +
                   (C26860 + C26859 + C26858) * C48960 +
                   (C26857 + C26856 + C26855) * C48040) *
                      C48917 * C48888 * C49189) *
                     C449 +
                 (((C26867 + C26868 + C26869) * C48040 +
                   (C26870 + C26871 + C26872) * C48960 +
                   (C26873 + C26874 + C26875) * C48032 +
                   (C26876 + C26877 + C26878) * C48967 +
                   (C47917 * C1159 + C48805 * C1166 + C47913 * C1158 +
                    C48813 * C1165 + C47923 * C1161 + C26650 * C1168) *
                       C48046 +
                   (C47917 * C1163 + C48805 * C1171 + C47913 * C1162 +
                    C48813 * C1170 + C47923 * C1169 + C26650 * C1173) *
                       C26653) *
                      C48917 * C48888 * C49189 -
                  ((C26878 + C26877 + C26876) * C26653 +
                   (C26875 + C26874 + C26873) * C48046 +
                   (C26872 + C26871 + C26870) * C48967 +
                   (C26869 + C26868 + C26867) * C48032 +
                   (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                    C48813 * C142 + C47917 * C132 + C48805 * C141) *
                       C48960 +
                   (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                    C48813 * C128 + C47917 * C120 + C48805 * C127) *
                       C48040) *
                      C48917 * C48888 * C447) *
                     C49187)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                   C48813 * C127 + C47923 * C121 + C26650 * C128) *
                      C48040 +
                  (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                   C48813 * C141 + C47923 * C133 + C26650 * C142) *
                      C48960 +
                  (C26855 + C26856 + C26857) * C48032 +
                  (C26858 + C26859 + C26860) * C48967 + C27295 * C48046 +
                  C27296 * C26653) *
                     C48917 * C48888 * C513 -
                 ((C27297 + C27298 + C27299) * C26653 +
                  (C27300 + C27301 + C27302) * C48046 +
                  (C26866 + C26865 + C26864) * C48967 +
                  (C26863 + C26862 + C26861) * C48032 +
                  (C26860 + C26859 + C26858) * C48960 +
                  (C26857 + C26856 + C26855) * C48040) *
                     C48917 * C48888 * C514 +
                 (C27295 * C48040 + C27296 * C48960 +
                  (C27302 + C27301 + C27300) * C48032 +
                  (C27299 + C27298 + C27297) * C48967 +
                  (C47917 * C1664 + C48805 * C1667 + C47913 * C1665 +
                   C48813 * C1668 + C47923 * C1666 + C26650 * C1669) *
                      C48046 +
                  (C47917 * C1670 + C48805 * C1673 + C47913 * C1671 +
                   C48813 * C1674 + C47923 * C1672 + C26650 * C1675) *
                      C26653) *
                     C48917 * C48888 * C515) *
                C48837) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 + C27295 * C48046 +
                   C27296 * C26653) *
                      C48917 * C339 -
                  ((C27473 + C27474 + C27475) * C26653 +
                   (C27476 + C27477 + C27478) * C48046 +
                   (C27479 + C27480 + C27481) * C48967 +
                   (C27482 + C27483 + C27484) * C48032 +
                   (C47923 * C349 + C26650 * C361 + C47913 * C350 +
                    C48813 * C362 + C47917 * C351 + C48805 * C363) *
                       C48960 +
                   (C47923 * C343 + C26650 * C354 + C47913 * C344 +
                    C48813 * C355 + C47917 * C345 + C48805 * C356) *
                       C48040) *
                      C48917 * C49191) *
                     C447 +
                 (((C27484 + C27483 + C27482) * C48040 +
                   (C27481 + C27480 + C27479) * C48960 +
                   (C27478 + C27477 + C27476) * C48032 +
                   (C27475 + C27474 + C27473) * C48967 +
                   (C47917 * C1844 + C48805 * C1847 + C47913 * C1845 +
                    C48813 * C1848 + C47923 * C1846 + C26650 * C1849) *
                       C48046 +
                   (C47917 * C1850 + C48805 * C1853 + C47913 * C1851 +
                    C48813 * C1854 + C47923 * C1852 + C26650 * C1855) *
                       C26653) *
                      C48917 * C49191 -
                  ((C27297 + C27298 + C27299) * C26653 +
                   (C27300 + C27301 + C27302) * C48046 +
                   (C26866 + C26865 + C26864) * C48967 +
                   (C26863 + C26862 + C26861) * C48032 +
                   (C26860 + C26859 + C26858) * C48960 +
                   (C26857 + C26856 + C26855) * C48040) *
                      C48917 * C339) *
                     C49189) *
                C48837) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 + C27295 * C48046 +
                   C27296 * C26653) *
                      C48917 * C721 -
                  ((C27473 + C27474 + C27475) * C26653 +
                   (C27476 + C27477 + C27478) * C48046 +
                   (C27479 + C27480 + C27481) * C48967 +
                   (C27482 + C27483 + C27484) * C48032 +
                   (C47923 * C349 + C26650 * C361 + C47913 * C350 +
                    C48813 * C362 + C47917 * C351 + C48805 * C363) *
                       C48960 +
                   (C47923 * C343 + C26650 * C354 + C47913 * C344 +
                    C48813 * C355 + C47917 * C345 + C48805 * C356) *
                       C48040) *
                      C48917 * C49191) *
                     C48871 * C449 +
                 (((C47917 * C344 + C48805 * C355 + C47913 * C343 +
                    C48813 * C354 + C47923 * C342 + C26650 * C353) *
                       C48040 +
                   (C47917 * C350 + C48805 * C362 + C47913 * C349 +
                    C48813 * C361 + C47923 * C348 + C26650 * C360) *
                       C48960 +
                   (C47917 * C620 + C48805 * C625 + C47913 * C621 +
                    C48813 * C626 + C47923 * C622 + C26650 * C627) *
                       C48032 +
                   (C47917 * C630 + C48805 * C635 + C47913 * C631 +
                    C48813 * C636 + C47923 * C632 + C26650 * C637) *
                       C48967 +
                   (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                    C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                       C48046 +
                   (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                    C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                       C26653) *
                      C48917 * C49191 -
                  ((C26878 + C26877 + C26876) * C26653 +
                   (C26875 + C26874 + C26873) * C48046 +
                   (C26872 + C26871 + C26870) * C48967 +
                   (C26869 + C26868 + C26867) * C48032 +
                   (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                    C48813 * C142 + C47917 * C132 + C48805 * C141) *
                       C48960 +
                   (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                    C48813 * C128 + C47917 * C120 + C48805 * C127) *
                       C48040) *
                      C48917 * C721) *
                     C48871 * C49187)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                    C48813 * C127 + C47923 * C121 + C26650 * C128) *
                       C48040 +
                   (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                    C48813 * C141 + C47923 * C133 + C26650 * C142) *
                       C48960 +
                   (C26855 + C26856 + C26857) * C48032 +
                   (C26858 + C26859 + C26860) * C48967 + C27295 * C48046 +
                   C27296 * C26653) *
                      C48917 * C721 -
                  ((C27473 + C27474 + C27475) * C26653 +
                   (C27476 + C27477 + C27478) * C48046 +
                   (C27479 + C27480 + C27481) * C48967 +
                   (C27482 + C27483 + C27484) * C48032 +
                   (C47923 * C349 + C26650 * C361 + C47913 * C350 +
                    C48813 * C362 + C47917 * C351 + C48805 * C363) *
                       C48960 +
                   (C47923 * C343 + C26650 * C354 + C47913 * C344 +
                    C48813 * C355 + C47917 * C345 + C48805 * C356) *
                       C48040) *
                      C48917 * C49191) *
                     C229 +
                 (((C27484 + C27483 + C27482) * C48040 +
                   (C27481 + C27480 + C27479) * C48960 +
                   (C27478 + C27477 + C27476) * C48032 +
                   (C27475 + C27474 + C27473) * C48967 +
                   (C47917 * C1844 + C48805 * C1847 + C47913 * C1845 +
                    C48813 * C1848 + C47923 * C1846 + C26650 * C1849) *
                       C48046 +
                   (C47917 * C1850 + C48805 * C1853 + C47913 * C1851 +
                    C48813 * C1854 + C47923 * C1852 + C26650 * C1855) *
                       C26653) *
                      C48917 * C49191 -
                  ((C27297 + C27298 + C27299) * C26653 +
                   (C27300 + C27301 + C27302) * C48046 +
                   (C26866 + C26865 + C26864) * C48967 +
                   (C26863 + C26862 + C26861) * C48032 +
                   (C26860 + C26859 + C26858) * C48960 +
                   (C26857 + C26856 + C26855) * C48040) *
                      C48917 * C721) *
                     C49189) *
                C48837) /
               (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                   C48813 * C127 + C47923 * C121 + C26650 * C128) *
                      C48040 +
                  (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                   C48813 * C141 + C47923 * C133 + C26650 * C142) *
                      C48960 +
                  (C26855 + C26856 + C26857) * C48032 +
                  (C26858 + C26859 + C26860) * C48967 + C27295 * C48046 +
                  C27296 * C26653) *
                     C48917 * C867 -
                 ((C27473 + C27474 + C27475) * C26653 +
                  (C27476 + C27477 + C27478) * C48046 +
                  (C27479 + C27480 + C27481) * C48967 +
                  (C27482 + C27483 + C27484) * C48032 +
                  (C47923 * C349 + C26650 * C361 + C47913 * C350 +
                   C48813 * C362 + C47917 * C351 + C48805 * C363) *
                      C48960 +
                  (C47923 * C343 + C26650 * C354 + C47913 * C344 +
                   C48813 * C355 + C47917 * C345 + C48805 * C356) *
                      C48040) *
                     C48917 * C868 +
                 ((C47917 * C870 + C48805 * C875 + C47913 * C871 +
                   C48813 * C876 + C47923 * C872 + C26650 * C877) *
                      C48040 +
                  (C47917 * C880 + C48805 * C885 + C47913 * C881 +
                   C48813 * C886 + C47923 * C882 + C26650 * C887) *
                      C48960 +
                  (C47917 * C2294 + C48805 * C2300 + C47913 * C2295 +
                   C48813 * C2301 + C47923 * C2296 + C26650 * C2302) *
                      C48032 +
                  (C47917 * C2303 + C48805 * C2312 + C47913 * C2304 +
                   C48813 * C2313 + C47923 * C2305 + C26650 * C2314) *
                      C48967 +
                  (C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                   C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                      C48046 +
                  (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                   C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                      C26653) *
                     C48917 * C869) *
                C48871 * C48837) /
               (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C48040 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48960 +
            (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
            C24260 * C48046 + C24261 * C26653) *
               C49162 +
           ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
            C25964 * C48032 + C25965 * C48967 + (C24437 + C24436) * C48046 +
            (C24435 + C24434) * C26653) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C23694 * C1396 + C48810 * C1404 + C23693 * C1397 +
             C23687 * C1405) *
                C26653 +
            (C23694 * C1392 + C48810 * C1399 + C23693 * C1393 +
             C23687 * C1400) *
                C48046 +
            (C25171 + C25170) * C48967 + (C25169 + C25168) * C48032 +
            (C25413 + C25412) * C48960 + (C25411 + C25410) * C48040) *
               C49004 +
           ((C23897 + C23896) * C26653 + (C23895 + C23894) * C48046 +
            (C23893 + C23892) * C48967 + (C23891 + C23890) * C48032 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C48960 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C48040) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C48040 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C48960 +
            (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
                C48032 +
            (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
                C48967 +
            (C23693 * C519 + C23687 * C524 + C23694 * C520 + C48810 * C525) *
                C48046 +
            (C23693 * C529 + C23687 * C534 + C23694 * C530 + C48810 * C535) *
                C26653) *
               C49162 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C48040 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C48960 +
            (C23693 * C621 + C23687 * C626 + C23694 * C622 + C48810 * C627) *
                C48032 +
            (C23693 * C631 + C23687 * C636 + C23694 * C632 + C48810 * C637) *
                C48967 +
            (C23693 * C1392 + C23687 * C1399 + C23694 * C1395 +
             C48810 * C1402) *
                C48046 +
            (C23693 * C1396 + C23687 * C1404 + C23694 * C1403 +
             C48810 * C1407) *
                C26653) *
               C49004) *
              C48888 * C48871 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + (C24437 + C24436) * C48046 +
             (C24435 + C24434) * C26653) *
                C49004) *
               C48888 * C229 -
           (((C24430 + C24431) * C26653 + (C24432 + C24433) * C48046 +
             (C24434 + C24435) * C48967 + (C24436 + C24437) * C48032 +
             C25978 * C48960 + C25979 * C48040) *
                C49004 +
            ((C23889 + C23888) * C26653 + (C23887 + C23886) * C48046 +
             (C23885 + C23884) * C48967 + (C23883 + C23882) * C48032 +
             (C23881 + C23880) * C48960 + (C23879 + C23878) * C48040) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C48040 + (C23892 + C23893) * C48960 +
             (C23894 + C23895) * C48032 + (C23896 + C23897) * C48967 +
             (C23898 + C23899) * C48046 + (C23900 + C23901) * C26653) *
                C49162 +
            ((C25168 + C25169) * C48040 + (C25170 + C25171) * C48960 +
             (C29935 + C29936) * C48032 + (C29937 + C29938) * C48967 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C48046 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C26653) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C26653 + (C29936 + C29935) * C48046 +
             (C25171 + C25170) * C48967 + (C25169 + C25168) * C48032 +
             (C25413 + C25412) * C48960 + (C25411 + C25410) * C48040) *
                C49004 +
            ((C23897 + C23896) * C26653 + (C23895 + C23894) * C48046 +
             (C23893 + C23892) * C48967 + (C23891 + C23890) * C48032 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48960 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C48040) *
                C49162) *
               C48888 * C229) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + (C24437 + C24436) * C48046 +
             (C24435 + C24434) * C26653) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C26653 + (C25768 + C25769) * C48046 +
             C25976 * C48967 + C25977 * C48032 + (C25409 + C25408) * C48960 +
             (C25407 + C25406) * C48040) *
                C49004 +
            ((C24434 + C24435) * C26653 + (C24436 + C24437) * C48046 +
             C25978 * C48967 + C25979 * C48032 + (C25405 + C25404) * C48960 +
             (C25403 + C25402) * C48040) *
                C49162) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C48040 + (C25412 + C25413) * C48960 +
             (C25168 + C25169) * C48032 + (C25170 + C25171) * C48967 +
             (C29935 + C29936) * C48046 + (C29937 + C29938) * C26653) *
                C49162 +
            ((C25414 + C25415) * C48040 + (C25416 + C25417) * C48960 +
             (C25172 + C25173) * C48032 + (C25174 + C25175) * C48967 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C48046 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C26653) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C26653 + (C29936 + C29935) * C48046 +
             (C25171 + C25170) * C48967 + (C25169 + C25168) * C48032 +
             (C25413 + C25412) * C48960 + (C25411 + C25410) * C48040) *
                C49004 +
            ((C23897 + C23896) * C26653 + (C23895 + C23894) * C48046 +
             (C23893 + C23892) * C48967 + (C23891 + C23890) * C48032 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48960 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C48040) *
                C49162) *
               C339) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + (C24437 + C24436) * C48046 +
             (C24435 + C24434) * C26653) *
                C49004) *
               C48888 * C447 -
           (((C24430 + C24431) * C26653 + (C24432 + C24433) * C48046 +
             (C24434 + C24435) * C48967 + (C24436 + C24437) * C48032 +
             C25978 * C48960 + C25979 * C48040) *
                C49004 +
            ((C23889 + C23888) * C26653 + (C23887 + C23886) * C48046 +
             (C23885 + C23884) * C48967 + (C23883 + C23882) * C48032 +
             (C23881 + C23880) * C48960 + (C23879 + C23878) * C48040) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C48040 + (C23892 + C23893) * C48960 +
             (C23894 + C23895) * C48032 + (C23896 + C23897) * C48967 +
             (C23898 + C23899) * C48046 + (C23900 + C23901) * C26653) *
                C49162 +
            ((C25168 + C25169) * C48040 + (C25170 + C25171) * C48960 +
             (C29935 + C29936) * C48032 + (C29937 + C29938) * C48967 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C48046 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C26653) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C26653 + (C29936 + C29935) * C48046 +
             (C25171 + C25170) * C48967 + (C25169 + C25168) * C48032 +
             (C25413 + C25412) * C48960 + (C25411 + C25410) * C48040) *
                C49004 +
            ((C23897 + C23896) * C26653 + (C23895 + C23894) * C48046 +
             (C23893 + C23892) * C48967 + (C23891 + C23890) * C48032 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48960 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C48040) *
                C49162) *
               C48888 * C447) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C48040 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48960 +
            (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
            C24260 * C48046 + C24261 * C26653) *
               C49162 +
           ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
            C25964 * C48032 + C25965 * C48967 + C30473 * C48046 +
            C30474 * C26653) *
               C49004) *
              C48888 * C513 -
          (((C24430 + C24431) * C26653 + (C24432 + C24433) * C48046 +
            (C24434 + C24435) * C48967 + (C24436 + C24437) * C48032 +
            C25978 * C48960 + C25979 * C48040) *
               C49004 +
           ((C23889 + C23888) * C26653 + (C23887 + C23886) * C48046 +
            (C23885 + C23884) * C48967 + (C23883 + C23882) * C48032 +
            (C23881 + C23880) * C48960 + (C23879 + C23878) * C48040) *
               C49162) *
              C48888 * C514 +
          ((C24260 * C48040 + C24261 * C48960 + C24262 * C48032 +
            C24263 * C48967 + (C24275 + C24274) * C48046 +
            (C24273 + C24272) * C26653) *
               C49162 +
           (C30473 * C48040 + C30474 * C48960 + (C24433 + C24432) * C48032 +
            (C24431 + C24430) * C48967 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C48046 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C26653) *
               C49004) *
              C48888 * C515) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + C30473 * C48046 +
             C30474 * C26653) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C26653 + (C25768 + C25769) * C48046 +
             C25976 * C48967 + C25977 * C48032 + (C25409 + C25408) * C48960 +
             (C25407 + C25406) * C48040) *
                C49004 +
            (C30669 * C26653 + C30670 * C48046 + C25978 * C48967 +
             C25979 * C48032 + (C25405 + C25404) * C48960 +
             (C25403 + C25402) * C48040) *
                C49162) *
               C49191) *
              C447 +
          (((C25964 * C48040 + C25965 * C48960 + C30473 * C48032 +
             C30474 * C48967 + (C24433 + C24432) * C48046 +
             (C24431 + C24430) * C26653) *
                C49162 +
            (C25966 * C48040 + C25967 * C48960 + (C25769 + C25768) * C48032 +
             (C25767 + C25766) * C48967 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C48046 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C26653) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C26653 + (C24432 + C24433) * C48046 +
             C30669 * C48967 + C30670 * C48032 + C25978 * C48960 +
             C25979 * C48040) *
                C49004 +
            ((C23889 + C23888) * C26653 + (C23887 + C23886) * C48046 +
             (C23885 + C23884) * C48967 + (C23883 + C23882) * C48032 +
             (C23881 + C23880) * C48960 + (C23879 + C23878) * C48040) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + C30473 * C48046 +
             C30474 * C26653) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C26653 + (C25768 + C25769) * C48046 +
             C25976 * C48967 + C25977 * C48032 + (C25409 + C25408) * C48960 +
             (C25407 + C25406) * C48040) *
                C49004 +
            (C30669 * C26653 + C30670 * C48046 + C25978 * C48967 +
             C25979 * C48032 + (C25405 + C25404) * C48960 +
             (C25403 + C25402) * C48040) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C48040 + (C25412 + C25413) * C48960 +
             (C25168 + C25169) * C48032 + (C25170 + C25171) * C48967 +
             (C29935 + C29936) * C48046 + (C29937 + C29938) * C26653) *
                C49162 +
            ((C25414 + C25415) * C48040 + (C25416 + C25417) * C48960 +
             (C25172 + C25173) * C48032 + (C25174 + C25175) * C48967 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C48046 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C26653) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C26653 + (C29936 + C29935) * C48046 +
             (C25171 + C25170) * C48967 + (C25169 + C25168) * C48032 +
             (C25413 + C25412) * C48960 + (C25411 + C25410) * C48040) *
                C49004 +
            ((C23897 + C23896) * C26653 + (C23895 + C23894) * C48046 +
             (C23893 + C23892) * C48967 + (C23891 + C23890) * C48032 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48960 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C48040) *
                C49162) *
               C721) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C48040 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48960 +
             (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
             C24260 * C48046 + C24261 * C26653) *
                C49162 +
            ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
             C25964 * C48032 + C25965 * C48967 + C30473 * C48046 +
             C30474 * C26653) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C26653 + (C25768 + C25769) * C48046 +
             C25976 * C48967 + C25977 * C48032 + (C25409 + C25408) * C48960 +
             (C25407 + C25406) * C48040) *
                C49004 +
            (C30669 * C26653 + C30670 * C48046 + C25978 * C48967 +
             C25979 * C48032 + (C25405 + C25404) * C48960 +
             (C25403 + C25402) * C48040) *
                C49162) *
               C49191) *
              C229 +
          (((C25964 * C48040 + C25965 * C48960 + C30473 * C48032 +
             C30474 * C48967 + (C24433 + C24432) * C48046 +
             (C24431 + C24430) * C26653) *
                C49162 +
            (C25966 * C48040 + C25967 * C48960 + (C25769 + C25768) * C48032 +
             (C25767 + C25766) * C48967 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C48046 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C26653) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C26653 + (C24432 + C24433) * C48046 +
             C30669 * C48967 + C30670 * C48032 + C25978 * C48960 +
             C25979 * C48040) *
                C49004 +
            ((C23889 + C23888) * C26653 + (C23887 + C23886) * C48046 +
             (C23885 + C23884) * C48967 + (C23883 + C23882) * C48032 +
             (C23881 + C23880) * C48960 + (C23879 + C23878) * C48040) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C48040 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48960 +
            (C23878 + C23879) * C48032 + (C23880 + C23881) * C48967 +
            C24260 * C48046 + C24261 * C26653) *
               C49162 +
           ((C25402 + C25403) * C48040 + (C25404 + C25405) * C48960 +
            C25964 * C48032 + C25965 * C48967 + C30473 * C48046 +
            C30474 * C26653) *
               C49004) *
              C867 -
          (((C25766 + C25767) * C26653 + (C25768 + C25769) * C48046 +
            C25976 * C48967 + C25977 * C48032 + (C25409 + C25408) * C48960 +
            (C25407 + C25406) * C48040) *
               C49004 +
           (C30669 * C26653 + C30670 * C48046 + C25978 * C48967 +
            C25979 * C48032 + (C25405 + C25404) * C48960 +
            (C25403 + C25402) * C48040) *
               C49162) *
              C868 +
          ((C26518 * C48040 + C26519 * C48960 + C25966 * C48032 +
            C25967 * C48967 + (C25769 + C25768) * C48046 +
            (C25767 + C25766) * C26653) *
               C49162 +
           ((C26535 + C26534) * C48040 + (C26533 + C26532) * C48960 +
            (C25983 + C25982) * C48032 + (C25981 + C25980) * C48967 +
            (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
             C48810 * C10238) *
                C48046 +
            (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
             C48810 * C10241) *
                C26653) *
               C49004) *
              C869) *
         C48871 * C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23693 * C237 + C23687 * C248 + C23694 * C236 + C48810 * C247) *
               C23696 +
           (C23693 * C243 + C23687 * C255 + C23694 * C242 + C48810 * C254) *
               C49232 +
           (C23693 * C517 + C23687 * C522 + C23694 * C518 + C48810 * C523) *
               C23697 +
           (C23693 * C527 + C23687 * C532 + C23694 * C528 + C48810 * C533) *
               C49222 +
           (C23693 * C1160 + C23687 * C1167 + C23694 * C1159 + C48810 * C1166) *
               C23698 +
           (C23693 * C1164 + C23687 * C1172 + C23694 * C1163 + C48810 * C1171) *
               C49204) *
              C48917 * C48888 * C48871 * C110 -
          ((C23694 * C1162 + C48810 * C1170 + C23693 * C1163 + C23687 * C1171) *
               C49204 +
           (C23694 * C1158 + C48810 * C1165 + C23693 * C1159 + C23687 * C1166) *
               C23698 +
           (C23694 * C529 + C48810 * C534 + C23693 * C528 + C23687 * C533) *
               C49222 +
           (C23694 * C519 + C48810 * C524 + C23693 * C518 + C23687 * C523) *
               C23697 +
           (C23694 * C241 + C48810 * C253 + C23693 * C242 + C23687 * C254) *
               C49232 +
           (C23694 * C235 + C48810 * C246 + C23693 * C236 + C23687 * C247) *
               C23696 +
           (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
               C49236 +
           (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
               C23695) *
              C48917 * C48888 * C48871 * C111 +
          ((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
               C23695 +
           (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
               C49236 +
           (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
               C23696 +
           (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
               C49232 +
           (C23693 * C519 + C23687 * C524 + C23694 * C520 + C48810 * C525) *
               C23697 +
           (C23693 * C529 + C23687 * C534 + C23694 * C530 + C48810 * C535) *
               C49222 +
           (C23693 * C1158 + C23687 * C1165 + C23694 * C1161 + C48810 * C1168) *
               C23698 +
           (C23693 * C1162 + C23687 * C1170 + C23694 * C1169 + C48810 * C1173) *
               C49204) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22511 * C237 + C49235 * C248 + C22512 * C236 + C49228 * C247 +
            C22513 * C235 + C49215 * C246 + C22514 * C234 + C49198 * C245) *
               C22516 +
           (C22511 * C243 + C49235 * C255 + C22512 * C242 + C49228 * C254 +
            C22513 * C241 + C49215 * C253 + C22514 * C240 + C49198 * C252) *
               C48964) *
              C48917 * C48888 * C48871 * C110 -
          ((C22514 * C239 + C49198 * C251 + C22513 * C240 + C49215 * C252 +
            C22512 * C241 + C49228 * C253 + C22511 * C242 + C49235 * C254) *
               C48964 +
           (C22514 * C233 + C49198 * C244 + C22513 * C234 + C49215 * C245 +
            C22512 * C235 + C49228 * C246 + C22511 * C236 + C49235 * C247) *
               C22516 +
           (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
            C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
               C22509 +
           (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
            C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
               C22515) *
              C48917 * C48888 * C48871 * C111 +
          ((C22511 * C121 + C49235 * C128 + C22512 * C122 + C49228 * C129 +
            C22513 * C123 + C49215 * C130 + C22514 * C124 + C49198 * C137) *
               C22515 +
           (C22511 * C133 + C49235 * C142 + C22512 * C134 + C49228 * C143 +
            C22513 * C135 + C49215 * C144 + C22514 * C136 + C49198 * C145) *
               C22509 +
           (C22511 * C235 + C49235 * C246 + C22512 * C234 + C49228 * C245 +
            C22513 * C233 + C49215 * C244 + C22514 * C238 + C49198 * C249) *
               C22516 +
           (C22511 * C241 + C49235 * C253 + C22512 * C240 + C49228 * C252 +
            C22513 * C239 + C49215 * C251 + C22514 * C250 + C49198 * C256) *
               C48964) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C22515 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C22509 +
            (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
               C49230 +
           ((C23693 * C345 + C23687 * C356 + C23694 * C344 + C48810 * C355) *
                C22515 +
            (C23693 * C351 + C23687 * C363 + C23694 * C350 + C48810 * C362) *
                C22509 +
            (C24441 + C24440) * C22516 + (C24439 + C24438) * C48964) *
               C49219 +
           ((C23693 * C870 + C23687 * C875 + C23694 * C871 + C48810 * C876) *
                C22515 +
            (C23693 * C880 + C23687 * C885 + C23694 * C881 + C48810 * C886) *
                C22509 +
            (C23693 * C2294 + C23687 * C2300 + C23694 * C2295 +
             C48810 * C2301) *
                C22516 +
            (C23693 * C2303 + C23687 * C2312 + C23694 * C2304 +
             C48810 * C2313) *
                C48964) *
               C49197) *
              C48888 * C48871 * C110 -
          (((C23694 * C2305 + C48810 * C2314 + C23693 * C2304 +
             C23687 * C2313) *
                C48964 +
            (C23694 * C2296 + C48810 * C2302 + C23693 * C2295 +
             C23687 * C2301) *
                C22516 +
            (C23694 * C882 + C48810 * C887 + C23693 * C881 + C23687 * C886) *
                C22509 +
            (C23694 * C872 + C48810 * C877 + C23693 * C871 + C23687 * C876) *
                C22515) *
               C49197 +
           ((C23694 * C631 + C48810 * C636 + C23693 * C630 + C23687 * C635) *
                C48964 +
            (C23694 * C621 + C48810 * C626 + C23693 * C620 + C23687 * C625) *
                C22516 +
            (C23694 * C349 + C48810 * C361 + C23693 * C350 + C23687 * C362) *
                C22509 +
            (C23694 * C343 + C48810 * C354 + C23693 * C344 + C23687 * C355) *
                C22515) *
               C49219 +
           ((C23893 + C23892) * C48964 + (C23891 + C23890) * C22516 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C22509 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C22515) *
               C49230) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C22515 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C22509 +
            (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
                C22516 +
            (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
                C48964) *
               C49230 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C22515 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C22509 +
            (C23693 * C621 + C23687 * C626 + C23694 * C622 + C48810 * C627) *
                C22516 +
            (C23693 * C631 + C23687 * C636 + C23694 * C632 + C48810 * C637) *
                C48964) *
               C49219 +
           ((C23693 * C872 + C23687 * C877 + C23694 * C873 + C48810 * C878) *
                C22515 +
            (C23693 * C882 + C23687 * C887 + C23694 * C883 + C48810 * C888) *
                C22509 +
            (C23693 * C2296 + C23687 * C2302 + C23694 * C2577 +
             C48810 * C2578) *
                C22516 +
            (C23693 * C2305 + C23687 * C2314 + C23694 * C2579 +
             C48810 * C2580) *
                C48964) *
               C49197) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C48888 * C229 -
           ((C23694 * C1671 + C48810 * C1674 + C23693 * C1670 +
             C23687 * C1673) *
                C49204 +
            (C23694 * C1665 + C48810 * C1668 + C23693 * C1664 +
             C23687 * C1667) *
                C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C23890 + C23891) * C23695 + (C23892 + C23893) * C49236 +
            (C23894 + C23895) * C23696 + (C23896 + C23897) * C49232 +
            (C23898 + C23899) * C23697 + (C23900 + C23901) * C49222 +
            (C23693 * C1665 + C23687 * C1668 + C23694 * C1666 +
             C48810 * C1669) *
                C23698 +
            (C23693 * C1671 + C23687 * C1674 + C23694 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C48888 * C229 -
           ((C22514 * C530 + C49198 * C535 + C22513 * C529 + C49215 * C534 +
             C22512 * C528 + C49228 * C533 + C22511 * C527 + C49235 * C532) *
                C48964 +
            (C22514 * C520 + C49198 * C525 + C22513 * C519 + C49215 * C524 +
             C22512 * C518 + C49228 * C523 + C22511 * C517 + C49235 * C522) *
                C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C22688 + C22689 + C22690 + C22691) * C22515 +
            (C22692 + C22693 + C22694 + C22695) * C22509 +
            (C22511 * C518 + C49235 * C523 + C22512 * C519 + C49228 * C524 +
             C22513 * C520 + C49215 * C525 + C22514 * C521 + C49198 * C526) *
                C22516 +
            (C22511 * C528 + C49235 * C533 + C22512 * C529 + C49228 * C534 +
             C22513 * C530 + C49215 * C535 + C22514 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C23693 * C345 + C23687 * C356 + C23694 * C344 + C48810 * C355) *
                 C22515 +
             (C23693 * C351 + C23687 * C363 + C23694 * C350 + C48810 * C362) *
                 C22509 +
             (C24441 + C24440) * C22516 + (C24439 + C24438) * C48964) *
                C49219 +
            ((C23693 * C870 + C23687 * C875 + C23694 * C871 + C48810 * C876) *
                 C22515 +
             (C23693 * C880 + C23687 * C885 + C23694 * C881 + C48810 * C886) *
                 C22509 +
             (C25164 + C25165) * C22516 + (C25166 + C25167) * C48964) *
                C49197) *
               C48888 * C229 -
           (((C23694 * C2310 + C48810 * C2316 + C23693 * C2309 +
              C23687 * C2315) *
                 C48964 +
             (C23694 * C2298 + C48810 * C2307 + C23693 * C2297 +
              C23687 * C2306) *
                 C22516 +
             (C25167 + C25166) * C22509 + (C25165 + C25164) * C22515) *
                C49197 +
            ((C24434 + C24435) * C48964 + (C24436 + C24437) * C22516 +
             (C24438 + C24439) * C22509 + (C24440 + C24441) * C22515) *
                C49219 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C22516 +
             (C23881 + C23880) * C22509 + (C23879 + C23878) * C22515) *
                C49230) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C22515 + (C23892 + C23893) * C22509 +
             (C23894 + C23895) * C22516 + (C23896 + C23897) * C48964) *
                C49230 +
            ((C25168 + C25169) * C22515 + (C25170 + C25171) * C22509 +
             (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
              C48810 * C1399) *
                 C22516 +
             (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
              C48810 * C1404) *
                 C48964) *
                C49219 +
            ((C25172 + C25173) * C22515 + (C25174 + C25175) * C22509 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C22516 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C49197) *
               C48888 * C49189 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C22516 +
             (C23694 * C882 + C48810 * C887 + C23693 * C881 + C23687 * C886) *
                 C22509 +
             (C23694 * C872 + C48810 * C877 + C23693 * C871 + C23687 * C876) *
                 C22515) *
                C49197 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C22516 +
             (C23694 * C349 + C48810 * C361 + C23693 * C350 + C23687 * C362) *
                 C22509 +
             (C23694 * C343 + C48810 * C354 + C23693 * C344 + C23687 * C355) *
                 C22515) *
                C49219 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C22516 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C22509 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C22515) *
                C49230) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C339 -
           ((C23694 * C1851 + C48810 * C1854 + C23693 * C1850 +
             C23687 * C1853) *
                C49204 +
            (C23694 * C1845 + C48810 * C1848 + C23693 * C1844 +
             C23687 * C1847) *
                C23698 +
            (C23694 * C1397 + C48810 * C1405 + C23693 * C1398 +
             C23687 * C1406) *
                C49222 +
            (C23694 * C1393 + C48810 * C1400 + C23693 * C1394 +
             C23687 * C1401) *
                C23697 +
            (C23694 * C630 + C48810 * C635 + C23693 * C629 + C23687 * C634) *
                C49232 +
            (C23694 * C620 + C48810 * C625 + C23693 * C619 + C23687 * C624) *
                C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C23693 * C344 + C23687 * C355 + C23694 * C343 + C48810 * C354) *
                C23695 +
            (C23693 * C350 + C23687 * C362 + C23694 * C349 + C48810 * C361) *
                C49236 +
            (C23693 * C620 + C23687 * C625 + C23694 * C621 + C48810 * C626) *
                C23696 +
            (C23693 * C630 + C23687 * C635 + C23694 * C631 + C48810 * C636) *
                C49232 +
            (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
             C48810 * C1399) *
                C23697 +
            (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
             C48810 * C1404) *
                C49222 +
            (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
             C48810 * C1849) *
                C23698 +
            (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C339 -
           ((C22514 * C632 + C49198 * C637 + C22513 * C631 + C49215 * C636 +
             C22512 * C630 + C49228 * C635 + C22511 * C629 + C49235 * C634) *
                C48964 +
            (C22514 * C622 + C49198 * C627 + C22513 * C621 + C49215 * C626 +
             C22512 * C620 + C49228 * C625 + C22511 * C619 + C49235 * C624) *
                C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C22511 * C344 + C49235 * C355 + C22512 * C343 + C49228 * C354 +
             C22513 * C342 + C49215 * C353 + C22514 * C341 + C49198 * C352) *
                C22515 +
            (C22511 * C350 + C49235 * C362 + C22512 * C349 + C49228 * C361 +
             C22513 * C348 + C49215 * C360 + C22514 * C347 + C49198 * C359) *
                C22509 +
            (C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
             C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                C22516 +
            (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
             C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
             (C24441 + C24440) * C22516 + (C24439 + C24438) * C48964) *
                C49219 +
            ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
             (C25164 + C25165) * C22516 + (C25166 + C25167) * C48964) *
                C49197) *
               C339 -
           (((C23694 * C3224 + C48810 * C3227 + C23693 * C3223 +
              C23687 * C3226) *
                 C48964 +
             (C23694 * C3218 + C48810 * C3221 + C23693 * C3217 +
              C23687 * C3220) *
                 C22516 +
             (C23694 * C2732 + C48810 * C2740 + C23693 * C2733 +
              C23687 * C2741) *
                 C22509 +
             (C23694 * C2728 + C48810 * C2735 + C23693 * C2729 +
              C23687 * C2736) *
                 C22515) *
                C49197 +
            ((C25167 + C25166) * C48964 + (C25165 + C25164) * C22516 +
             (C25409 + C25408) * C22509 + (C25407 + C25406) * C22515) *
                C49219 +
            ((C24438 + C24439) * C48964 + (C24440 + C24441) * C22516 +
             (C25405 + C25404) * C22509 + (C25403 + C25402) * C22515) *
                C49230) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C22515 + (C25412 + C25413) * C22509 +
             (C25168 + C25169) * C22516 + (C25170 + C25171) * C48964) *
                C49230 +
            ((C25414 + C25415) * C22515 + (C25416 + C25417) * C22509 +
             (C25172 + C25173) * C22516 + (C25174 + C25175) * C48964) *
                C49219 +
            ((C23693 * C2728 + C23687 * C2735 + C23694 * C2727 +
              C48810 * C2734) *
                 C22515 +
             (C23693 * C2732 + C23687 * C2740 + C23694 * C2731 +
              C48810 * C2739) *
                 C22509 +
             (C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C22516 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C49197) *
               C49191 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C22516 +
             (C25417 + C25416) * C22509 + (C25415 + C25414) * C22515) *
                C49197 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C22516 +
             (C25413 + C25412) * C22509 + (C25411 + C25410) * C22515) *
                C49219 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C22516 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C22509 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C22515) *
                C49230) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C48888 * C447 -
           ((C23694 * C1671 + C48810 * C1674 + C23693 * C1670 +
             C23687 * C1673) *
                C49204 +
            (C23694 * C1665 + C48810 * C1668 + C23693 * C1664 +
             C23687 * C1667) *
                C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C23890 + C23891) * C23695 + (C23892 + C23893) * C49236 +
            (C23894 + C23895) * C23696 + (C23896 + C23897) * C49232 +
            (C23898 + C23899) * C23697 + (C23900 + C23901) * C49222 +
            (C23693 * C1665 + C23687 * C1668 + C23694 * C1666 +
             C48810 * C1669) *
                C23698 +
            (C23693 * C1671 + C23687 * C1674 + C23694 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C48888 * C447 -
           ((C22514 * C530 + C49198 * C535 + C22513 * C529 + C49215 * C534 +
             C22512 * C528 + C49228 * C533 + C22511 * C527 + C49235 * C532) *
                C48964 +
            (C22514 * C520 + C49198 * C525 + C22513 * C519 + C49215 * C524 +
             C22512 * C518 + C49228 * C523 + C22511 * C517 + C49235 * C522) *
                C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C22688 + C22689 + C22690 + C22691) * C22515 +
            (C22692 + C22693 + C22694 + C22695) * C22509 +
            (C22511 * C518 + C49235 * C523 + C22512 * C519 + C49228 * C524 +
             C22513 * C520 + C49215 * C525 + C22514 * C521 + C49198 * C526) *
                C22516 +
            (C22511 * C528 + C49235 * C533 + C22512 * C529 + C49228 * C534 +
             C22513 * C530 + C49215 * C535 + C22514 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
             (C24441 + C24440) * C22516 + (C24439 + C24438) * C48964) *
                C49219 +
            ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
             (C25164 + C25165) * C22516 + (C25166 + C25167) * C48964) *
                C49197) *
               C48888 * C447 -
           (((C23694 * C2310 + C48810 * C2316 + C23693 * C2309 +
              C23687 * C2315) *
                 C48964 +
             (C23694 * C2298 + C48810 * C2307 + C23693 * C2297 +
              C23687 * C2306) *
                 C22516 +
             (C25167 + C25166) * C22509 + (C25165 + C25164) * C22515) *
                C49197 +
            ((C24434 + C24435) * C48964 + (C24436 + C24437) * C22516 +
             (C24438 + C24439) * C22509 + (C24440 + C24441) * C22515) *
                C49219 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C22516 +
             (C23881 + C23880) * C22509 + (C23879 + C23878) * C22515) *
                C49230) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C22515 + (C23892 + C23893) * C22509 +
             (C23894 + C23895) * C22516 + (C23896 + C23897) * C48964) *
                C49230 +
            ((C25168 + C25169) * C22515 + (C25170 + C25171) * C22509 +
             (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
              C48810 * C1399) *
                 C22516 +
             (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
              C48810 * C1404) *
                 C48964) *
                C49219 +
            ((C25172 + C25173) * C22515 + (C25174 + C25175) * C22509 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C22516 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C49197) *
               C48888 * C49189 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C22516 +
             (C25417 + C25416) * C22509 + (C25415 + C25414) * C22515) *
                C49197 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C22516 +
             (C25413 + C25412) * C22509 + (C25411 + C25410) * C22515) *
                C49219 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C22516 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C22509 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C22515) *
                C49230) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
           C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
           C24263 * C49204) *
              C48917 * C48888 * C513 -
          ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
           (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
           (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
           (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
              C48917 * C48888 * C514 +
          (C24260 * C23695 + C24261 * C49236 + C24262 * C23696 +
           C24263 * C49232 + (C24275 + C24274) * C23697 +
           (C24273 + C24272) * C49222 +
           (C23693 * C9148 + C23687 * C9151 + C23694 * C9149 + C48810 * C9152) *
               C23698 +
           (C23693 * C9150 + C23687 * C9154 + C23694 * C9153 + C48810 * C9155) *
               C49204) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22680 + C22681 + C22682 + C22683) * C22516 +
           (C22684 + C22685 + C22686 + C22687) * C48964) *
              C48917 * C48888 * C513 -
          ((C23070 + C23071 + C23072 + C23073) * C48964 +
           (C23074 + C23075 + C23076 + C23077) * C22516 +
           (C22687 + C22686 + C22685 + C22684) * C22509 +
           (C22683 + C22682 + C22681 + C22680) * C22515) *
              C48917 * C48888 * C514 +
          ((C23077 + C23076 + C23075 + C23074) * C22515 +
           (C23073 + C23072 + C23071 + C23070) * C22509 +
           (C22511 * C1160 + C49235 * C1167 + C22512 * C1159 + C49228 * C1166 +
            C22513 * C1158 + C49215 * C1165 + C22514 * C1161 + C49198 * C1168) *
               C22516 +
           (C22511 * C1164 + C49235 * C1172 + C22512 * C1163 + C49228 * C1171 +
            C22513 * C1162 + C49215 * C1170 + C22514 * C1169 + C49198 * C1173) *
               C48964) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C22515 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C22509 +
            (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
               C49230 +
           ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
            (C24441 + C24440) * C22516 + (C24439 + C24438) * C48964) *
               C49219 +
           ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
            (C25164 + C25165) * C22516 + (C25166 + C25167) * C48964) *
               C49197) *
              C48888 * C513 -
          (((C25766 + C25767) * C48964 + (C25768 + C25769) * C22516 +
            (C25167 + C25166) * C22509 + (C25165 + C25164) * C22515) *
               C49197 +
           ((C24434 + C24435) * C48964 + (C24436 + C24437) * C22516 +
            (C24438 + C24439) * C22509 + (C24440 + C24441) * C22515) *
               C49219 +
           ((C23885 + C23884) * C48964 + (C23883 + C23882) * C22516 +
            (C23881 + C23880) * C22509 + (C23879 + C23878) * C22515) *
               C49230) *
              C48888 * C514 +
          ((C24260 * C22515 + C24261 * C22509 + C24262 * C22516 +
            C24263 * C48964) *
               C49230 +
           ((C24437 + C24436) * C22515 + (C24435 + C24434) * C22509 +
            (C24433 + C24432) * C22516 + (C24431 + C24430) * C48964) *
               C49219 +
           ((C25769 + C25768) * C22515 + (C25767 + C25766) * C22509 +
            (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
             C48810 * C10049) *
                C22516 +
            (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
             C48810 * C10051) *
                C48964) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C339 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C447 +
          (((C24441 + C24440) * C23695 + (C24439 + C24438) * C49236 +
            (C24437 + C24436) * C23696 + (C24435 + C24434) * C49232 +
            (C24433 + C24432) * C23697 + (C24431 + C24430) * C49222 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C23698 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C339 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C447 +
          (((C23231 + C23230 + C23229 + C23228) * C22515 +
            (C23227 + C23226 + C23225 + C23224) * C22509 +
            (C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C22516 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C23070 + C23071 + C23072 + C23073) * C48964 +
            (C23074 + C23075 + C23076 + C23077) * C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
             C25964 * C22516 + C25965 * C48964) *
                C49219 +
            ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
             C25966 * C22516 + C25967 * C48964) *
                C49197) *
               C339 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C22516 +
             (C23694 * C2732 + C48810 * C2740 + C23693 * C2733 +
              C23687 * C2741) *
                 C22509 +
             (C23694 * C2728 + C48810 * C2735 + C23693 * C2729 +
              C23687 * C2736) *
                 C22515) *
                C49197 +
            (C25976 * C48964 + C25977 * C22516 + (C25409 + C25408) * C22509 +
             (C25407 + C25406) * C22515) *
                C49219 +
            (C25978 * C48964 + C25979 * C22516 + (C25405 + C25404) * C22509 +
             (C25403 + C25402) * C22515) *
                C49230) *
               C49191) *
              C447 +
          (((C25964 * C22515 + C25965 * C22509 + (C24437 + C24436) * C22516 +
             (C24435 + C24434) * C48964) *
                C49230 +
            (C25966 * C22515 + C25967 * C22509 + (C25769 + C25768) * C22516 +
             (C25767 + C25766) * C48964) *
                C49219 +
            ((C25983 + C25982) * C22515 + (C25981 + C25980) * C22509 +
             (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
              C48810 * C10238) *
                 C22516 +
             (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C49197) *
               C49191 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C22516 +
             C25976 * C22509 + C25977 * C22515) *
                C49197 +
            ((C24434 + C24435) * C48964 + (C24436 + C24437) * C22516 +
             C25978 * C22509 + C25979 * C22515) *
                C49219 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C22516 +
             (C23881 + C23880) * C22509 + (C23879 + C23878) * C22515) *
                C49230) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C721 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C23693 * C344 + C23687 * C355 + C23694 * C343 + C48810 * C354) *
                C23695 +
            (C23693 * C350 + C23687 * C362 + C23694 * C349 + C48810 * C361) *
                C49236 +
            (C23693 * C620 + C23687 * C625 + C23694 * C621 + C48810 * C626) *
                C23696 +
            (C23693 * C630 + C23687 * C635 + C23694 * C631 + C48810 * C636) *
                C49232 +
            (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
             C48810 * C1399) *
                C23697 +
            (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
             C48810 * C1404) *
                C49222 +
            (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
             C48810 * C1849) *
                C23698 +
            (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C721 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C22511 * C344 + C49235 * C355 + C22512 * C343 + C49228 * C354 +
             C22513 * C342 + C49215 * C353 + C22514 * C341 + C49198 * C352) *
                C22515 +
            (C22511 * C350 + C49235 * C362 + C22512 * C349 + C49228 * C361 +
             C22513 * C348 + C49215 * C360 + C22514 * C347 + C49198 * C359) *
                C22509 +
            (C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
             C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                C22516 +
            (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
             C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
             C25964 * C22516 + C25965 * C48964) *
                C49219 +
            ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
             C25966 * C22516 + C25967 * C48964) *
                C49197) *
               C721 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C22516 +
             (C23694 * C2732 + C48810 * C2740 + C23693 * C2733 +
              C23687 * C2741) *
                 C22509 +
             (C23694 * C2728 + C48810 * C2735 + C23693 * C2729 +
              C23687 * C2736) *
                 C22515) *
                C49197 +
            (C25976 * C48964 + C25977 * C22516 + (C25409 + C25408) * C22509 +
             (C25407 + C25406) * C22515) *
                C49219 +
            (C25978 * C48964 + C25979 * C22516 + (C25405 + C25404) * C22509 +
             (C25403 + C25402) * C22515) *
                C49230) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C22515 + (C25412 + C25413) * C22509 +
             (C25168 + C25169) * C22516 + (C25170 + C25171) * C48964) *
                C49230 +
            ((C25414 + C25415) * C22515 + (C25416 + C25417) * C22509 +
             (C25172 + C25173) * C22516 + (C25174 + C25175) * C48964) *
                C49219 +
            ((C23693 * C2728 + C23687 * C2735 + C23694 * C2727 +
              C48810 * C2734) *
                 C22515 +
             (C23693 * C2732 + C23687 * C2740 + C23694 * C2731 +
              C48810 * C2739) *
                 C22509 +
             (C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C22516 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C49197) *
               C49191 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C22516 +
             (C25417 + C25416) * C22509 + (C25415 + C25414) * C22515) *
                C49197 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C22516 +
             (C25413 + C25412) * C22509 + (C25411 + C25410) * C22515) *
                C49219 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C22516 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C22509 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C22515) *
                C49230) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C721 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C229 +
          (((C24441 + C24440) * C23695 + (C24439 + C24438) * C49236 +
            (C24437 + C24436) * C23696 + (C24435 + C24434) * C49232 +
            (C24433 + C24432) * C23697 + (C24431 + C24430) * C49222 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C23698 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C721 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C229 +
          (((C23231 + C23230 + C23229 + C23228) * C22515 +
            (C23227 + C23226 + C23225 + C23224) * C22509 +
            (C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C22516 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C23070 + C23071 + C23072 + C23073) * C48964 +
            (C23074 + C23075 + C23076 + C23077) * C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C22515 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C22509 +
             (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
                C49230 +
            ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
             C25964 * C22516 + C25965 * C48964) *
                C49219 +
            ((C25406 + C25407) * C22515 + (C25408 + C25409) * C22509 +
             C25966 * C22516 + C25967 * C48964) *
                C49197) *
               C721 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C22516 +
             (C23694 * C2732 + C48810 * C2740 + C23693 * C2733 +
              C23687 * C2741) *
                 C22509 +
             (C23694 * C2728 + C48810 * C2735 + C23693 * C2729 +
              C23687 * C2736) *
                 C22515) *
                C49197 +
            (C25976 * C48964 + C25977 * C22516 + (C25409 + C25408) * C22509 +
             (C25407 + C25406) * C22515) *
                C49219 +
            (C25978 * C48964 + C25979 * C22516 + (C25405 + C25404) * C22509 +
             (C25403 + C25402) * C22515) *
                C49230) *
               C49191) *
              C229 +
          (((C25964 * C22515 + C25965 * C22509 + (C24437 + C24436) * C22516 +
             (C24435 + C24434) * C48964) *
                C49230 +
            (C25966 * C22515 + C25967 * C22509 + (C25769 + C25768) * C22516 +
             (C25767 + C25766) * C48964) *
                C49219 +
            ((C25983 + C25982) * C22515 + (C25981 + C25980) * C22509 +
             (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
              C48810 * C10238) *
                 C22516 +
             (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C49197) *
               C49191 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C22516 +
             C25976 * C22509 + C25977 * C22515) *
                C49197 +
            ((C24434 + C24435) * C48964 + (C24436 + C24437) * C22516 +
             C25978 * C22509 + C25979 * C22515) *
                C49219 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C22516 +
             (C23881 + C23880) * C22509 + (C23879 + C23878) * C22515) *
                C49230) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
           C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
           C24263 * C49204) *
              C48917 * C867 -
          ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
           (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
           (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
           (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
               C49236 +
           (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
               C23695) *
              C48917 * C868 +
          ((C23693 * C870 + C23687 * C875 + C23694 * C871 + C48810 * C876) *
               C23695 +
           (C23693 * C880 + C23687 * C885 + C23694 * C881 + C48810 * C886) *
               C49236 +
           (C23693 * C2294 + C23687 * C2300 + C23694 * C2295 + C48810 * C2301) *
               C23696 +
           (C23693 * C2303 + C23687 * C2312 + C23694 * C2304 + C48810 * C2313) *
               C49232 +
           (C23693 * C2297 + C23687 * C2306 + C23694 * C2298 + C48810 * C2307) *
               C23697 +
           (C23693 * C2309 + C23687 * C2315 + C23694 * C2310 + C48810 * C2316) *
               C49222 +
           (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
            C48810 * C10049) *
               C23698 +
           (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
            C48810 * C10051) *
               C49204) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22680 + C22681 + C22682 + C22683) * C22516 +
           (C22684 + C22685 + C22686 + C22687) * C48964) *
              C48917 * C867 -
          ((C23224 + C23225 + C23226 + C23227) * C48964 +
           (C23228 + C23229 + C23230 + C23231) * C22516 +
           (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
            C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
               C22509 +
           (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
            C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
               C22515) *
              C48917 * C868 +
          ((C22511 * C870 + C49235 * C875 + C22512 * C871 + C49228 * C876 +
            C22513 * C872 + C49215 * C877 + C22514 * C873 + C49198 * C878) *
               C22515 +
           (C22511 * C880 + C49235 * C885 + C22512 * C881 + C49228 * C886 +
            C22513 * C882 + C49215 * C887 + C22514 * C883 + C49198 * C888) *
               C22509 +
           (C22511 * C2294 + C49235 * C2300 + C22512 * C2295 + C49228 * C2301 +
            C22513 * C2296 + C49215 * C2302 + C22514 * C2577 + C49198 * C2578) *
               C22516 +
           (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 + C49228 * C2313 +
            C22513 * C2305 + C49215 * C2314 + C22514 * C2579 + C49198 * C2580) *
               C48964) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C22515 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C22509 +
            (C23878 + C23879) * C22516 + (C23880 + C23881) * C48964) *
               C49230 +
           ((C25402 + C25403) * C22515 + (C25404 + C25405) * C22509 +
            C25964 * C22516 + C25965 * C48964) *
               C49219 +
           C26538 * C49197) *
              C867 -
          (((C25980 + C25981) * C48964 + (C25982 + C25983) * C22516 +
            (C26532 + C26533) * C22509 + (C26534 + C26535) * C22515) *
               C49197 +
           (C25976 * C48964 + C25977 * C22516 + (C25409 + C25408) * C22509 +
            (C25407 + C25406) * C22515) *
               C49219 +
           (C25978 * C48964 + C25979 * C22516 + (C25405 + C25404) * C22509 +
            (C25403 + C25402) * C22515) *
               C49230) *
              C868 +
          (C26538 * C49230 +
           ((C26535 + C26534) * C22515 + (C26533 + C26532) * C22509 +
            (C25983 + C25982) * C22516 + (C25981 + C25980) * C48964) *
               C49219 +
           ((C23693 * C3649 + C23687 * C3652 + C23694 * C3650 +
             C48810 * C3653) *
                C22515 +
            (C23693 * C3655 + C23687 * C3658 + C23694 * C3656 +
             C48810 * C3659) *
                C22509 +
            (C23693 * C11128 + C23687 * C11130 + C23694 * C17895 +
             C48810 * C17896) *
                C22516 +
            (C23693 * C11131 + C23687 * C11134 + C23694 * C17897 +
             C48810 * C17898) *
                C48964) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[27] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                     C48813 * C127 + C47923 * C121 + C26650 * C128) *
                        C22515 +
                    (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                     C48813 * C141 + C47923 * C133 + C26650 * C142) *
                        C22509 +
                    (C26855 + C26856 + C26857) * C22516 +
                    (C26858 + C26859 + C26860) * C48964) *
                       C49162 +
                   ((C47917 * C345 + C48805 * C356 + C47913 * C344 +
                     C48813 * C355 + C47923 * C343 + C26650 * C354) *
                        C22515 +
                    (C47917 * C351 + C48805 * C363 + C47913 * C350 +
                     C48813 * C362 + C47923 * C349 + C26650 * C361) *
                        C22509 +
                    (C27484 + C27483 + C27482) * C22516 +
                    (C27481 + C27480 + C27479) * C48964) *
                       C49004) *
                      C48888 * C48871 * C110 -
                  (((C47923 * C632 + C26650 * C637 + C47913 * C631 +
                     C48813 * C636 + C47917 * C630 + C48805 * C635) *
                        C48964 +
                    (C47923 * C622 + C26650 * C627 + C47913 * C621 +
                     C48813 * C626 + C47917 * C620 + C48805 * C625) *
                        C22516 +
                    (C47923 * C348 + C26650 * C360 + C47913 * C349 +
                     C48813 * C361 + C47917 * C350 + C48805 * C362) *
                        C22509 +
                    (C47923 * C342 + C26650 * C353 + C47913 * C343 +
                     C48813 * C354 + C47917 * C344 + C48805 * C355) *
                        C22515) *
                       C49004 +
                   ((C26872 + C26871 + C26870) * C48964 +
                    (C26869 + C26868 + C26867) * C22516 +
                    (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                     C48813 * C142 + C47917 * C132 + C48805 * C141) *
                        C22509 +
                    (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                     C48813 * C128 + C47917 * C120 + C48805 * C127) *
                        C22515) *
                       C49162) *
                      C48888 * C48871 * C111 +
                  (((C47917 * C121 + C48805 * C128 + C47913 * C122 +
                     C48813 * C129 + C47923 * C123 + C26650 * C130) *
                        C22515 +
                    (C47917 * C133 + C48805 * C142 + C47913 * C134 +
                     C48813 * C143 + C47923 * C135 + C26650 * C144) *
                        C22509 +
                    (C47917 * C235 + C48805 * C246 + C47913 * C234 +
                     C48813 * C245 + C47923 * C233 + C26650 * C244) *
                        C22516 +
                    (C47917 * C241 + C48805 * C253 + C47913 * C240 +
                     C48813 * C252 + C47923 * C239 + C26650 * C251) *
                        C48964) *
                       C49162 +
                   ((C47917 * C343 + C48805 * C354 + C47913 * C342 +
                     C48813 * C353 + C47923 * C341 + C26650 * C352) *
                        C22515 +
                    (C47917 * C349 + C48805 * C361 + C47913 * C348 +
                     C48813 * C360 + C47923 * C347 + C26650 * C359) *
                        C22509 +
                    (C47917 * C621 + C48805 * C626 + C47913 * C622 +
                     C48813 * C627 + C47923 * C623 + C26650 * C628) *
                        C22516 +
                    (C47917 * C631 + C48805 * C636 + C47913 * C632 +
                     C48813 * C637 + C47923 * C633 + C26650 * C638) *
                        C48964) *
                       C49004) *
                      C48888 * C48871 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C47917 * C345 + C48805 * C356 + C47913 * C344 +
                      C48813 * C355 + C47923 * C343 + C26650 * C354) *
                         C22515 +
                     (C47917 * C351 + C48805 * C363 + C47913 * C350 +
                      C48813 * C362 + C47923 * C349 + C26650 * C361) *
                         C22509 +
                     (C27484 + C27483 + C27482) * C22516 +
                     (C27481 + C27480 + C27479) * C48964) *
                        C49004) *
                       C48888 * C229 -
                   (((C27473 + C27474 + C27475) * C48964 +
                     (C27476 + C27477 + C27478) * C22516 +
                     (C27479 + C27480 + C27481) * C22509 +
                     (C27482 + C27483 + C27484) * C22515) *
                        C49004 +
                    ((C26866 + C26865 + C26864) * C48964 +
                     (C26863 + C26862 + C26861) * C22516 +
                     (C26860 + C26859 + C26858) * C22509 +
                     (C26857 + C26856 + C26855) * C22515) *
                        C49162) *
                       C48888 * C49189) *
                      C231 +
                  ((((C26867 + C26868 + C26869) * C22515 +
                     (C26870 + C26871 + C26872) * C22509 +
                     (C26873 + C26874 + C26875) * C22516 +
                     (C26876 + C26877 + C26878) * C48964) *
                        C49162 +
                    ((C28239 + C28240 + C28241) * C22515 +
                     (C28242 + C28243 + C28244) * C22509 +
                     (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                      C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                         C22516 +
                     (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                      C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C28244 + C28243 + C28242) * C48964 +
                     (C28241 + C28240 + C28239) * C22516 +
                     (C47923 * C348 + C26650 * C360 + C47913 * C349 +
                      C48813 * C361 + C47917 * C350 + C48805 * C362) *
                         C22509 +
                     (C47923 * C342 + C26650 * C353 + C47913 * C343 +
                      C48813 * C354 + C47917 * C344 + C48805 * C355) *
                         C22515) *
                        C49004 +
                    ((C26872 + C26871 + C26870) * C48964 +
                     (C26869 + C26868 + C26867) * C22516 +
                     (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C22509 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C22515) *
                        C49162) *
                       C48888 * C229) *
                      C49187)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C28463 + C28464 + C28465) * C22515 +
                     (C28466 + C28467 + C28468) * C22509 +
                     (C27484 + C27483 + C27482) * C22516 +
                     (C27481 + C27480 + C27479) * C48964) *
                        C49004) *
                       C339 -
                   (((C47923 * C2305 + C26650 * C2314 + C47913 * C2304 +
                      C48813 * C2313 + C47917 * C2303 + C48805 * C2312) *
                         C48964 +
                     (C47923 * C2296 + C26650 * C2302 + C47913 * C2295 +
                      C48813 * C2301 + C47917 * C2294 + C48805 * C2300) *
                         C22516 +
                     (C47923 * C882 + C26650 * C887 + C47913 * C881 +
                      C48813 * C886 + C47917 * C880 + C48805 * C885) *
                         C22509 +
                     (C47923 * C872 + C26650 * C877 + C47913 * C871 +
                      C48813 * C876 + C47917 * C870 + C48805 * C875) *
                         C22515) *
                        C49004 +
                    ((C27479 + C27480 + C27481) * C48964 +
                     (C27482 + C27483 + C27484) * C22516 +
                     (C28468 + C28467 + C28466) * C22509 +
                     (C28465 + C28464 + C28463) * C22515) *
                        C49162) *
                       C49191) *
                      C48871 * C231 +
                  ((((C28469 + C28470 + C28471) * C22515 +
                     (C28472 + C28473 + C28474) * C22509 +
                     (C28239 + C28240 + C28241) * C22516 +
                     (C28242 + C28243 + C28244) * C48964) *
                        C49162 +
                    ((C47917 * C871 + C48805 * C876 + C47913 * C872 +
                      C48813 * C877 + C47923 * C873 + C26650 * C878) *
                         C22515 +
                     (C47917 * C881 + C48805 * C886 + C47913 * C882 +
                      C48813 * C887 + C47923 * C883 + C26650 * C888) *
                         C22509 +
                     (C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                      C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                         C22516 +
                     (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                      C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C28244 + C28243 + C28242) * C48964 +
                     (C28241 + C28240 + C28239) * C22516 +
                     (C28474 + C28473 + C28472) * C22509 +
                     (C28471 + C28470 + C28469) * C22515) *
                        C49004 +
                    ((C26872 + C26871 + C26870) * C48964 +
                     (C26869 + C26868 + C26867) * C22516 +
                     (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C22509 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C22515) *
                        C49162) *
                       C339) *
                      C48871 * C49187)) /
                (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C28463 + C28464 + C28465) * C22515 +
                     (C28466 + C28467 + C28468) * C22509 +
                     (C27484 + C27483 + C27482) * C22516 +
                     (C27481 + C27480 + C27479) * C48964) *
                        C49004) *
                       C48888 * C447 -
                   (((C27473 + C27474 + C27475) * C48964 +
                     (C27476 + C27477 + C27478) * C22516 +
                     (C27479 + C27480 + C27481) * C22509 +
                     (C27482 + C27483 + C27484) * C22515) *
                        C49004 +
                    ((C26866 + C26865 + C26864) * C48964 +
                     (C26863 + C26862 + C26861) * C22516 +
                     (C26860 + C26859 + C26858) * C22509 +
                     (C26857 + C26856 + C26855) * C22515) *
                        C49162) *
                       C48888 * C49189) *
                      C449 +
                  ((((C26867 + C26868 + C26869) * C22515 +
                     (C26870 + C26871 + C26872) * C22509 +
                     (C26873 + C26874 + C26875) * C22516 +
                     (C26876 + C26877 + C26878) * C48964) *
                        C49162 +
                    ((C28239 + C28240 + C28241) * C22515 +
                     (C28242 + C28243 + C28244) * C22509 +
                     (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                      C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                         C22516 +
                     (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                      C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C28244 + C28243 + C28242) * C48964 +
                     (C28241 + C28240 + C28239) * C22516 +
                     (C28474 + C28473 + C28472) * C22509 +
                     (C28471 + C28470 + C28469) * C22515) *
                        C49004 +
                    ((C26872 + C26871 + C26870) * C48964 +
                     (C26869 + C26868 + C26867) * C22516 +
                     (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C22509 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C22515) *
                        C49162) *
                       C48888 * C447) *
                      C49187)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                     C48813 * C127 + C47923 * C121 + C26650 * C128) *
                        C22515 +
                    (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                     C48813 * C141 + C47923 * C133 + C26650 * C142) *
                        C22509 +
                    (C26855 + C26856 + C26857) * C22516 +
                    (C26858 + C26859 + C26860) * C48964) *
                       C49162 +
                   ((C28463 + C28464 + C28465) * C22515 +
                    (C28466 + C28467 + C28468) * C22509 +
                    (C27484 + C27483 + C27482) * C22516 +
                    (C27481 + C27480 + C27479) * C48964) *
                       C49004) *
                      C48888 * C513 -
                  (((C27473 + C27474 + C27475) * C48964 +
                    (C27476 + C27477 + C27478) * C22516 +
                    (C27479 + C27480 + C27481) * C22509 +
                    (C27482 + C27483 + C27484) * C22515) *
                       C49004 +
                   ((C26866 + C26865 + C26864) * C48964 +
                    (C26863 + C26862 + C26861) * C22516 +
                    (C26860 + C26859 + C26858) * C22509 +
                    (C26857 + C26856 + C26855) * C22515) *
                       C49162) *
                      C48888 * C514 +
                  ((C27295 * C22515 + C27296 * C22509 +
                    (C27302 + C27301 + C27300) * C22516 +
                    (C27299 + C27298 + C27297) * C48964) *
                       C49162 +
                   ((C27478 + C27477 + C27476) * C22515 +
                    (C27475 + C27474 + C27473) * C22509 +
                    (C47917 * C1844 + C48805 * C1847 + C47913 * C1845 +
                     C48813 * C1848 + C47923 * C1846 + C26650 * C1849) *
                        C22516 +
                    (C47917 * C1850 + C48805 * C1853 + C47913 * C1851 +
                     C48813 * C1854 + C47923 * C1852 + C26650 * C1855) *
                        C48964) *
                       C49004) *
                      C48888 * C515) *
                 C48837) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C28463 + C28464 + C28465) * C22515 +
                     (C28466 + C28467 + C28468) * C22509 + C29025 * C22516 +
                     C29026 * C48964) *
                        C49004) *
                       C339 -
                   (((C29027 + C29028 + C29029) * C48964 +
                     (C29030 + C29031 + C29032) * C22516 +
                     (C47923 * C882 + C26650 * C887 + C47913 * C881 +
                      C48813 * C886 + C47917 * C880 + C48805 * C885) *
                         C22509 +
                     (C47923 * C872 + C26650 * C877 + C47913 * C871 +
                      C48813 * C876 + C47917 * C870 + C48805 * C875) *
                         C22515) *
                        C49004 +
                    (C29033 * C48964 + C29034 * C22516 +
                     (C28468 + C28467 + C28466) * C22509 +
                     (C28465 + C28464 + C28463) * C22515) *
                        C49162) *
                       C49191) *
                      C447 +
                  (((C29025 * C22515 + C29026 * C22509 +
                     (C27478 + C27477 + C27476) * C22516 +
                     (C27475 + C27474 + C27473) * C48964) *
                        C49162 +
                    ((C29032 + C29031 + C29030) * C22515 +
                     (C29029 + C29028 + C29027) * C22509 +
                     (C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                      C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                         C22516 +
                     (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                      C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C27473 + C27474 + C27475) * C48964 +
                     (C27476 + C27477 + C27478) * C22516 + C29033 * C22509 +
                     C29034 * C22515) *
                        C49004 +
                    ((C26866 + C26865 + C26864) * C48964 +
                     (C26863 + C26862 + C26861) * C22516 +
                     (C26860 + C26859 + C26858) * C22509 +
                     (C26857 + C26856 + C26855) * C22515) *
                        C49162) *
                       C339) *
                      C49189) *
                 C48837) /
                (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C28463 + C28464 + C28465) * C22515 +
                     (C28466 + C28467 + C28468) * C22509 + C29025 * C22516 +
                     C29026 * C48964) *
                        C49004) *
                       C721 -
                   (((C29027 + C29028 + C29029) * C48964 +
                     (C29030 + C29031 + C29032) * C22516 +
                     (C47923 * C882 + C26650 * C887 + C47913 * C881 +
                      C48813 * C886 + C47917 * C880 + C48805 * C885) *
                         C22509 +
                     (C47923 * C872 + C26650 * C877 + C47913 * C871 +
                      C48813 * C876 + C47917 * C870 + C48805 * C875) *
                         C22515) *
                        C49004 +
                    (C29033 * C48964 + C29034 * C22516 +
                     (C28468 + C28467 + C28466) * C22509 +
                     (C28465 + C28464 + C28463) * C22515) *
                        C49162) *
                       C49191) *
                      C48871 * C449 +
                  ((((C28469 + C28470 + C28471) * C22515 +
                     (C28472 + C28473 + C28474) * C22509 +
                     (C28239 + C28240 + C28241) * C22516 +
                     (C28242 + C28243 + C28244) * C48964) *
                        C49162 +
                    ((C47917 * C871 + C48805 * C876 + C47913 * C872 +
                      C48813 * C877 + C47923 * C873 + C26650 * C878) *
                         C22515 +
                     (C47917 * C881 + C48805 * C886 + C47913 * C882 +
                      C48813 * C887 + C47923 * C883 + C26650 * C888) *
                         C22509 +
                     (C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                      C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                         C22516 +
                     (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                      C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C28244 + C28243 + C28242) * C48964 +
                     (C28241 + C28240 + C28239) * C22516 +
                     (C28474 + C28473 + C28472) * C22509 +
                     (C28471 + C28470 + C28469) * C22515) *
                        C49004 +
                    ((C26872 + C26871 + C26870) * C48964 +
                     (C26869 + C26868 + C26867) * C22516 +
                     (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C22509 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C22515) *
                        C49162) *
                       C721) *
                      C48871 * C49187)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C22515 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C22509 +
                     (C26855 + C26856 + C26857) * C22516 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C49162 +
                    ((C28463 + C28464 + C28465) * C22515 +
                     (C28466 + C28467 + C28468) * C22509 + C29025 * C22516 +
                     C29026 * C48964) *
                        C49004) *
                       C721 -
                   (((C29027 + C29028 + C29029) * C48964 +
                     (C29030 + C29031 + C29032) * C22516 +
                     (C47923 * C882 + C26650 * C887 + C47913 * C881 +
                      C48813 * C886 + C47917 * C880 + C48805 * C885) *
                         C22509 +
                     (C47923 * C872 + C26650 * C877 + C47913 * C871 +
                      C48813 * C876 + C47917 * C870 + C48805 * C875) *
                         C22515) *
                        C49004 +
                    (C29033 * C48964 + C29034 * C22516 +
                     (C28468 + C28467 + C28466) * C22509 +
                     (C28465 + C28464 + C28463) * C22515) *
                        C49162) *
                       C49191) *
                      C229 +
                  (((C29025 * C22515 + C29026 * C22509 +
                     (C27478 + C27477 + C27476) * C22516 +
                     (C27475 + C27474 + C27473) * C48964) *
                        C49162 +
                    ((C29032 + C29031 + C29030) * C22515 +
                     (C29029 + C29028 + C29027) * C22509 +
                     (C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                      C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                         C22516 +
                     (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                      C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C27473 + C27474 + C27475) * C48964 +
                     (C27476 + C27477 + C27478) * C22516 + C29033 * C22509 +
                     C29034 * C22515) *
                        C49004 +
                    ((C26866 + C26865 + C26864) * C48964 +
                     (C26863 + C26862 + C26861) * C22516 +
                     (C26860 + C26859 + C26858) * C22509 +
                     (C26857 + C26856 + C26855) * C22515) *
                        C49162) *
                       C721) *
                      C49189) *
                 C48837) /
                (p * q * std::sqrt(p + q));
    d2ee[35] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                     C48813 * C127 + C47923 * C121 + C26650 * C128) *
                        C22515 +
                    (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                     C48813 * C141 + C47923 * C133 + C26650 * C142) *
                        C22509 +
                    (C26855 + C26856 + C26857) * C22516 +
                    (C26858 + C26859 + C26860) * C48964) *
                       C49162 +
                   ((C28463 + C28464 + C28465) * C22515 +
                    (C28466 + C28467 + C28468) * C22509 + C29025 * C22516 +
                    C29026 * C48964) *
                       C49004) *
                      C867 -
                  (((C29027 + C29028 + C29029) * C48964 +
                    (C29030 + C29031 + C29032) * C22516 +
                    (C29581 + C29582 + C29583) * C22509 +
                    (C29584 + C29585 + C29586) * C22515) *
                       C49004 +
                   (C29033 * C48964 + C29034 * C22516 +
                    (C28468 + C28467 + C28466) * C22509 +
                    (C28465 + C28464 + C28463) * C22515) *
                       C49162) *
                      C868 +
                  (((C29586 + C29585 + C29584) * C22515 +
                    (C29583 + C29582 + C29581) * C22509 +
                    (C29032 + C29031 + C29030) * C22516 +
                    (C29029 + C29028 + C29027) * C48964) *
                       C49162 +
                   ((C47917 * C2729 + C48805 * C2736 + C47913 * C2728 +
                     C48813 * C2735 + C47923 * C2727 + C26650 * C2734) *
                        C22515 +
                    (C47917 * C2733 + C48805 * C2741 + C47913 * C2732 +
                     C48813 * C2740 + C47923 * C2731 + C26650 * C2739) *
                        C22509 +
                    (C47917 * C3217 + C48805 * C3220 + C47913 * C3218 +
                     C48813 * C3221 + C47923 * C3219 + C26650 * C3222) *
                        C22516 +
                    (C47917 * C3223 + C48805 * C3226 + C47913 * C3224 +
                     C48813 * C3227 + C47923 * C3225 + C26650 * C3228) *
                        C48964) *
                       C49004) *
                      C869) *
                 C48871 * C48837) /
                (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22511 * C237 + C49235 * C248 + C22512 * C236 + C49228 * C247 +
            C22513 * C235 + C49215 * C246 + C22514 * C234 + C49198 * C245) *
               C22516 +
           (C22511 * C243 + C49235 * C255 + C22512 * C242 + C49228 * C254 +
            C22513 * C241 + C49215 * C253 + C22514 * C240 + C49198 * C252) *
               C48964) *
              C48917 * C48888 * C48871 * C110 -
          ((C22514 * C239 + C49198 * C251 + C22513 * C240 + C49215 * C252 +
            C22512 * C241 + C49228 * C253 + C22511 * C242 + C49235 * C254) *
               C48964 +
           (C22514 * C233 + C49198 * C244 + C22513 * C234 + C49215 * C245 +
            C22512 * C235 + C49228 * C246 + C22511 * C236 + C49235 * C247) *
               C22516 +
           (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
            C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
               C22509 +
           (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
            C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
               C22515) *
              C48917 * C48888 * C48871 * C111 +
          ((C22511 * C121 + C49235 * C128 + C22512 * C122 + C49228 * C129 +
            C22513 * C123 + C49215 * C130 + C22514 * C124 + C49198 * C137) *
               C22515 +
           (C22511 * C133 + C49235 * C142 + C22512 * C134 + C49228 * C143 +
            C22513 * C135 + C49215 * C144 + C22514 * C136 + C49198 * C145) *
               C22509 +
           (C22511 * C235 + C49235 * C246 + C22512 * C234 + C49228 * C245 +
            C22513 * C233 + C49215 * C244 + C22514 * C238 + C49198 * C249) *
               C22516 +
           (C22511 * C241 + C49235 * C253 + C22512 * C240 + C49228 * C252 +
            C22513 * C239 + C49215 * C251 + C22514 * C250 + C49198 * C256) *
               C48964) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23693 * C237 + C23687 * C248 + C23694 * C236 + C48810 * C247) *
               C23696 +
           (C23693 * C243 + C23687 * C255 + C23694 * C242 + C48810 * C254) *
               C49232 +
           (C23693 * C517 + C23687 * C522 + C23694 * C518 + C48810 * C523) *
               C23697 +
           (C23693 * C527 + C23687 * C532 + C23694 * C528 + C48810 * C533) *
               C49222 +
           (C23693 * C1160 + C23687 * C1167 + C23694 * C1159 + C48810 * C1166) *
               C23698 +
           (C23693 * C1164 + C23687 * C1172 + C23694 * C1163 + C48810 * C1171) *
               C49204) *
              C48917 * C48888 * C48871 * C110 -
          ((C23694 * C1162 + C48810 * C1170 + C23693 * C1163 + C23687 * C1171) *
               C49204 +
           (C23694 * C1158 + C48810 * C1165 + C23693 * C1159 + C23687 * C1166) *
               C23698 +
           (C23694 * C529 + C48810 * C534 + C23693 * C528 + C23687 * C533) *
               C49222 +
           (C23694 * C519 + C48810 * C524 + C23693 * C518 + C23687 * C523) *
               C23697 +
           (C23694 * C241 + C48810 * C253 + C23693 * C242 + C23687 * C254) *
               C49232 +
           (C23694 * C235 + C48810 * C246 + C23693 * C236 + C23687 * C247) *
               C23696 +
           (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
               C49236 +
           (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
               C23695) *
              C48917 * C48888 * C48871 * C111 +
          ((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
               C23695 +
           (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
               C49236 +
           (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
               C23696 +
           (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
               C49232 +
           (C23693 * C519 + C23687 * C524 + C23694 * C520 + C48810 * C525) *
               C23697 +
           (C23693 * C529 + C23687 * C534 + C23694 * C530 + C48810 * C535) *
               C49222 +
           (C23693 * C1158 + C23687 * C1165 + C23694 * C1161 + C48810 * C1168) *
               C23698 +
           (C23693 * C1162 + C23687 * C1170 + C23694 * C1169 + C48810 * C1173) *
               C49204) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C48888 * C229 -
           ((C22514 * C530 + C49198 * C535 + C22513 * C529 + C49215 * C534 +
             C22512 * C528 + C49228 * C533 + C22511 * C527 + C49235 * C532) *
                C48964 +
            (C22514 * C520 + C49198 * C525 + C22513 * C519 + C49215 * C524 +
             C22512 * C518 + C49228 * C523 + C22511 * C517 + C49235 * C522) *
                C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C22688 + C22689 + C22690 + C22691) * C22515 +
            (C22692 + C22693 + C22694 + C22695) * C22509 +
            (C22511 * C518 + C49235 * C523 + C22512 * C519 + C49228 * C524 +
             C22513 * C520 + C49215 * C525 + C22514 * C521 + C49198 * C526) *
                C22516 +
            (C22511 * C528 + C49235 * C533 + C22512 * C529 + C49228 * C534 +
             C22513 * C530 + C49215 * C535 + C22514 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C48888 * C229 -
           ((C23694 * C1671 + C48810 * C1674 + C23693 * C1670 +
             C23687 * C1673) *
                C49204 +
            (C23694 * C1665 + C48810 * C1668 + C23693 * C1664 +
             C23687 * C1667) *
                C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C23890 + C23891) * C23695 + (C23892 + C23893) * C49236 +
            (C23894 + C23895) * C23696 + (C23896 + C23897) * C49232 +
            (C23898 + C23899) * C23697 + (C23900 + C23901) * C49222 +
            (C23693 * C1665 + C23687 * C1668 + C23694 * C1666 +
             C48810 * C1669) *
                C23698 +
            (C23693 * C1671 + C23687 * C1674 + C23694 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C339 -
           ((C22514 * C632 + C49198 * C637 + C22513 * C631 + C49215 * C636 +
             C22512 * C630 + C49228 * C635 + C22511 * C629 + C49235 * C634) *
                C48964 +
            (C22514 * C622 + C49198 * C627 + C22513 * C621 + C49215 * C626 +
             C22512 * C620 + C49228 * C625 + C22511 * C619 + C49235 * C624) *
                C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C22511 * C344 + C49235 * C355 + C22512 * C343 + C49228 * C354 +
             C22513 * C342 + C49215 * C353 + C22514 * C341 + C49198 * C352) *
                C22515 +
            (C22511 * C350 + C49235 * C362 + C22512 * C349 + C49228 * C361 +
             C22513 * C348 + C49215 * C360 + C22514 * C347 + C49198 * C359) *
                C22509 +
            (C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
             C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                C22516 +
            (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
             C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C339 -
           ((C23694 * C1851 + C48810 * C1854 + C23693 * C1850 +
             C23687 * C1853) *
                C49204 +
            (C23694 * C1845 + C48810 * C1848 + C23693 * C1844 +
             C23687 * C1847) *
                C23698 +
            (C23694 * C1397 + C48810 * C1405 + C23693 * C1398 +
             C23687 * C1406) *
                C49222 +
            (C23694 * C1393 + C48810 * C1400 + C23693 * C1394 +
             C23687 * C1401) *
                C23697 +
            (C23694 * C630 + C48810 * C635 + C23693 * C629 + C23687 * C634) *
                C49232 +
            (C23694 * C620 + C48810 * C625 + C23693 * C619 + C23687 * C624) *
                C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C23693 * C344 + C23687 * C355 + C23694 * C343 + C48810 * C354) *
                C23695 +
            (C23693 * C350 + C23687 * C362 + C23694 * C349 + C48810 * C361) *
                C49236 +
            (C23693 * C620 + C23687 * C625 + C23694 * C621 + C48810 * C626) *
                C23696 +
            (C23693 * C630 + C23687 * C635 + C23694 * C631 + C48810 * C636) *
                C49232 +
            (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
             C48810 * C1399) *
                C23697 +
            (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
             C48810 * C1404) *
                C49222 +
            (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
             C48810 * C1849) *
                C23698 +
            (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C48888 * C447 -
           ((C22514 * C530 + C49198 * C535 + C22513 * C529 + C49215 * C534 +
             C22512 * C528 + C49228 * C533 + C22511 * C527 + C49235 * C532) *
                C48964 +
            (C22514 * C520 + C49198 * C525 + C22513 * C519 + C49215 * C524 +
             C22512 * C518 + C49228 * C523 + C22511 * C517 + C49235 * C522) *
                C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C22688 + C22689 + C22690 + C22691) * C22515 +
            (C22692 + C22693 + C22694 + C22695) * C22509 +
            (C22511 * C518 + C49235 * C523 + C22512 * C519 + C49228 * C524 +
             C22513 * C520 + C49215 * C525 + C22514 * C521 + C49198 * C526) *
                C22516 +
            (C22511 * C528 + C49235 * C533 + C22512 * C529 + C49228 * C534 +
             C22513 * C530 + C49215 * C535 + C22514 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            (C23882 + C23883) * C23697 + (C23884 + C23885) * C49222 +
            (C23886 + C23887) * C23698 + (C23888 + C23889) * C49204) *
               C48917 * C48888 * C447 -
           ((C23694 * C1671 + C48810 * C1674 + C23693 * C1670 +
             C23687 * C1673) *
                C49204 +
            (C23694 * C1665 + C48810 * C1668 + C23693 * C1664 +
             C23687 * C1667) *
                C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C23890 + C23891) * C23695 + (C23892 + C23893) * C49236 +
            (C23894 + C23895) * C23696 + (C23896 + C23897) * C49232 +
            (C23898 + C23899) * C23697 + (C23900 + C23901) * C49222 +
            (C23693 * C1665 + C23687 * C1668 + C23694 * C1666 +
             C48810 * C1669) *
                C23698 +
            (C23693 * C1671 + C23687 * C1674 + C23694 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22680 + C22681 + C22682 + C22683) * C22516 +
           (C22684 + C22685 + C22686 + C22687) * C48964) *
              C48917 * C48888 * C513 -
          ((C23070 + C23071 + C23072 + C23073) * C48964 +
           (C23074 + C23075 + C23076 + C23077) * C22516 +
           (C22687 + C22686 + C22685 + C22684) * C22509 +
           (C22683 + C22682 + C22681 + C22680) * C22515) *
              C48917 * C48888 * C514 +
          ((C23077 + C23076 + C23075 + C23074) * C22515 +
           (C23073 + C23072 + C23071 + C23070) * C22509 +
           (C22511 * C1160 + C49235 * C1167 + C22512 * C1159 + C49228 * C1166 +
            C22513 * C1158 + C49215 * C1165 + C22514 * C1161 + C49198 * C1168) *
               C22516 +
           (C22511 * C1164 + C49235 * C1172 + C22512 * C1163 + C49228 * C1171 +
            C22513 * C1162 + C49215 * C1170 + C22514 * C1169 + C49198 * C1173) *
               C48964) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
           C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
           C24263 * C49204) *
              C48917 * C48888 * C513 -
          ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
           (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
           (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
           (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
              C48917 * C48888 * C514 +
          (C24260 * C23695 + C24261 * C49236 + C24262 * C23696 +
           C24263 * C49232 + (C24275 + C24274) * C23697 +
           (C24273 + C24272) * C49222 +
           (C23693 * C9148 + C23687 * C9151 + C23694 * C9149 + C48810 * C9152) *
               C23698 +
           (C23693 * C9150 + C23687 * C9154 + C23694 * C9153 + C48810 * C9155) *
               C49204) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C339 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C447 +
          (((C23231 + C23230 + C23229 + C23228) * C22515 +
            (C23227 + C23226 + C23225 + C23224) * C22509 +
            (C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C22516 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C23070 + C23071 + C23072 + C23073) * C48964 +
            (C23074 + C23075 + C23076 + C23077) * C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C339 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C447 +
          (((C24441 + C24440) * C23695 + (C24439 + C24438) * C49236 +
            (C24437 + C24436) * C23696 + (C24435 + C24434) * C49232 +
            (C24433 + C24432) * C23697 + (C24431 + C24430) * C49222 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C23698 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C721 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C22511 * C344 + C49235 * C355 + C22512 * C343 + C49228 * C354 +
             C22513 * C342 + C49215 * C353 + C22514 * C341 + C49198 * C352) *
                C22515 +
            (C22511 * C350 + C49235 * C362 + C22512 * C349 + C49228 * C361 +
             C22513 * C348 + C49215 * C360 + C22514 * C347 + C49198 * C359) *
                C22509 +
            (C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
             C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                C22516 +
            (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
             C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C22695 + C22694 + C22693 + C22692) * C48964 +
            (C22691 + C22690 + C22689 + C22688) * C22516 +
            (C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C22509 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C22515) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C721 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C23693 * C344 + C23687 * C355 + C23694 * C343 + C48810 * C354) *
                C23695 +
            (C23693 * C350 + C23687 * C362 + C23694 * C349 + C48810 * C361) *
                C49236 +
            (C23693 * C620 + C23687 * C625 + C23694 * C621 + C48810 * C626) *
                C23696 +
            (C23693 * C630 + C23687 * C635 + C23694 * C631 + C48810 * C636) *
                C49232 +
            (C23693 * C1393 + C23687 * C1400 + C23694 * C1392 +
             C48810 * C1399) *
                C23697 +
            (C23693 * C1397 + C23687 * C1405 + C23694 * C1396 +
             C48810 * C1404) *
                C49222 +
            (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
             C48810 * C1849) *
                C23698 +
            (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C23901 + C23900) * C49204 + (C23899 + C23898) * C23698 +
            (C23897 + C23896) * C49222 + (C23895 + C23894) * C23697 +
            (C23893 + C23892) * C49232 + (C23891 + C23890) * C23696 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49236 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C23695) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C22515 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C22509 +
            (C22680 + C22681 + C22682 + C22683) * C22516 +
            (C22684 + C22685 + C22686 + C22687) * C48964) *
               C48917 * C721 -
           ((C23224 + C23225 + C23226 + C23227) * C48964 +
            (C23228 + C23229 + C23230 + C23231) * C22516 +
            (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
             C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
                C22509 +
            (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
             C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
                C22515) *
               C48917 * C49191) *
              C229 +
          (((C23231 + C23230 + C23229 + C23228) * C22515 +
            (C23227 + C23226 + C23225 + C23224) * C22509 +
            (C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C22516 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C23070 + C23071 + C23072 + C23073) * C48964 +
            (C23074 + C23075 + C23076 + C23077) * C22516 +
            (C22687 + C22686 + C22685 + C22684) * C22509 +
            (C22683 + C22682 + C22681 + C22680) * C22515) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C23695 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49236 +
            (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
            C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
            C24263 * C49204) *
               C48917 * C721 -
           ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
            (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
            (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
            (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
                C49236 +
            (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
                C23695) *
               C48917 * C49191) *
              C229 +
          (((C24441 + C24440) * C23695 + (C24439 + C24438) * C49236 +
            (C24437 + C24436) * C23696 + (C24435 + C24434) * C49232 +
            (C24433 + C24432) * C23697 + (C24431 + C24430) * C49222 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C23698 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C24272 + C24273) * C49204 + (C24274 + C24275) * C23698 +
            (C23889 + C23888) * C49222 + (C23887 + C23886) * C23697 +
            (C23885 + C23884) * C49232 + (C23883 + C23882) * C23696 +
            (C23881 + C23880) * C49236 + (C23879 + C23878) * C23695) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
            C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
               C22515 +
           (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
            C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
               C22509 +
           (C22680 + C22681 + C22682 + C22683) * C22516 +
           (C22684 + C22685 + C22686 + C22687) * C48964) *
              C48917 * C867 -
          ((C23224 + C23225 + C23226 + C23227) * C48964 +
           (C23228 + C23229 + C23230 + C23231) * C22516 +
           (C22514 * C348 + C49198 * C360 + C22513 * C349 + C49215 * C361 +
            C22512 * C350 + C49228 * C362 + C22511 * C351 + C49235 * C363) *
               C22509 +
           (C22514 * C342 + C49198 * C353 + C22513 * C343 + C49215 * C354 +
            C22512 * C344 + C49228 * C355 + C22511 * C345 + C49235 * C356) *
               C22515) *
              C48917 * C868 +
          ((C22511 * C870 + C49235 * C875 + C22512 * C871 + C49228 * C876 +
            C22513 * C872 + C49215 * C877 + C22514 * C873 + C49198 * C878) *
               C22515 +
           (C22511 * C880 + C49235 * C885 + C22512 * C881 + C49228 * C886 +
            C22513 * C882 + C49215 * C887 + C22514 * C883 + C49198 * C888) *
               C22509 +
           (C22511 * C2294 + C49235 * C2300 + C22512 * C2295 + C49228 * C2301 +
            C22513 * C2296 + C49215 * C2302 + C22514 * C2577 + C49198 * C2578) *
               C22516 +
           (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 + C49228 * C2313 +
            C22513 * C2305 + C49215 * C2314 + C22514 * C2579 + C49198 * C2580) *
               C48964) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
               C23695 +
           (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
               C49236 +
           (C23878 + C23879) * C23696 + (C23880 + C23881) * C49232 +
           C24260 * C23697 + C24261 * C49222 + C24262 * C23698 +
           C24263 * C49204) *
              C48917 * C867 -
          ((C24430 + C24431) * C49204 + (C24432 + C24433) * C23698 +
           (C24434 + C24435) * C49222 + (C24436 + C24437) * C23697 +
           (C24438 + C24439) * C49232 + (C24440 + C24441) * C23696 +
           (C23694 * C350 + C48810 * C362 + C23693 * C351 + C23687 * C363) *
               C49236 +
           (C23694 * C344 + C48810 * C355 + C23693 * C345 + C23687 * C356) *
               C23695) *
              C48917 * C868 +
          ((C23693 * C870 + C23687 * C875 + C23694 * C871 + C48810 * C876) *
               C23695 +
           (C23693 * C880 + C23687 * C885 + C23694 * C881 + C48810 * C886) *
               C49236 +
           (C23693 * C2294 + C23687 * C2300 + C23694 * C2295 + C48810 * C2301) *
               C23696 +
           (C23693 * C2303 + C23687 * C2312 + C23694 * C2304 + C48810 * C2313) *
               C49232 +
           (C23693 * C2297 + C23687 * C2306 + C23694 * C2298 + C48810 * C2307) *
               C23697 +
           (C23693 * C2309 + C23687 * C2315 + C23694 * C2310 + C48810 * C2316) *
               C49222 +
           (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
            C48810 * C10049) *
               C23698 +
           (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
            C48810 * C10051) *
               C49204) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C48040 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48960 +
            (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
            C11824 * C48046 + C11825 * C26653) *
               C31302 +
           ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
            C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
            C13287 * C26653) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C12727 + C12726) * C26653 + (C12725 + C12724) * C48046 +
            (C12723 + C12722) * C48967 + (C12721 + C12720) * C48032 +
            (C12945 + C12944) * C48960 + (C12943 + C12942) * C48040) *
               C49004 +
           ((C11461 + C11460) * C26653 + (C11459 + C11458) * C48046 +
            (C11457 + C11456) * C48967 + (C11455 + C11454) * C48032 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C48960 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C48040) *
               C31302) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C48040 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C48960 +
            (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
                C48032 +
            (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
                C48967 +
            (C47907 * C519 + C49139 * C524 + C47888 * C520 + C48810 * C525) *
                C48046 +
            (C47907 * C529 + C49139 * C534 + C47888 * C530 + C48810 * C535) *
                C26653) *
               C31302 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C48040 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C48960 +
            (C47907 * C621 + C49139 * C626 + C47888 * C622 + C48810 * C627) *
                C48032 +
            (C47907 * C631 + C49139 * C636 + C47888 * C632 + C48810 * C637) *
                C48967 +
            (C47907 * C1392 + C49139 * C1399 + C47888 * C1395 +
             C48810 * C1402) *
                C48046 +
            (C47907 * C1396 + C49139 * C1404 + C47888 * C1403 +
             C48810 * C1407) *
                C26653) *
               C49004) *
              C48888 * C48871 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C48888 * C229 -
           (((C11994 + C11995) * C26653 + (C11996 + C11997) * C48046 +
             C13500 * C48967 + C13501 * C48032 + C13502 * C48960 +
             C13503 * C48040) *
                C49004 +
            ((C11453 + C11452) * C26653 + (C11451 + C11450) * C48046 +
             (C11449 + C11448) * C48967 + (C11447 + C11446) * C48032 +
             (C11445 + C11444) * C48960 + (C11443 + C11442) * C48040) *
                C31302) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C48040 + (C11456 + C11457) * C48960 +
             (C11458 + C11459) * C48032 + (C11460 + C11461) * C48967 +
             (C11462 + C11463) * C48046 + (C11464 + C11465) * C26653) *
                C31302 +
            ((C12720 + C12721) * C48040 + (C12722 + C12723) * C48960 +
             (C12724 + C12725) * C48032 + (C12726 + C12727) * C48967 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C48046 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C26653) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C26653 + (C12725 + C12724) * C48046 +
             (C12723 + C12722) * C48967 + (C12721 + C12720) * C48032 +
             (C12945 + C12944) * C48960 + (C12943 + C12942) * C48040) *
                C49004 +
            ((C11461 + C11460) * C26653 + (C11459 + C11458) * C48046 +
             (C11457 + C11456) * C48967 + (C11455 + C11454) * C48032 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48960 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C48040) *
                C31302) *
               C48888 * C229) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C339 -
           (((C13504 + C13505) * C26653 + (C13506 + C13507) * C48046 +
             C19611 * C48967 + C19612 * C48032 + (C14054 + C14055) * C48960 +
             (C14056 + C14057) * C48040) *
                C49004 +
            (C13500 * C26653 + C13501 * C48046 + C13502 * C48967 +
             C13503 * C48032 + (C12941 + C12940) * C48960 +
             (C12939 + C12938) * C48040) *
                C31302) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C48040 + (C12944 + C12945) * C48960 +
             (C12720 + C12721) * C48032 + (C12722 + C12723) * C48967 +
             (C12724 + C12725) * C48046 + (C12726 + C12727) * C26653) *
                C31302 +
            ((C19063 + C19064) * C48040 + (C19065 + C19066) * C48960 +
             (C18857 + C18858) * C48032 + (C18859 + C18860) * C48967 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C48046 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C26653) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C26653 + (C12725 + C12724) * C48046 +
             (C12723 + C12722) * C48967 + (C12721 + C12720) * C48032 +
             (C12945 + C12944) * C48960 + (C12943 + C12942) * C48040) *
                C49004 +
            ((C11461 + C11460) * C26653 + (C11459 + C11458) * C48046 +
             (C11457 + C11456) * C48967 + (C11455 + C11454) * C48032 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48960 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C48040) *
                C31302) *
               C339) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C48888 * C447 -
           (((C11994 + C11995) * C26653 + (C11996 + C11997) * C48046 +
             C13500 * C48967 + C13501 * C48032 + C13502 * C48960 +
             C13503 * C48040) *
                C49004 +
            ((C11453 + C11452) * C26653 + (C11451 + C11450) * C48046 +
             (C11449 + C11448) * C48967 + (C11447 + C11446) * C48032 +
             (C11445 + C11444) * C48960 + (C11443 + C11442) * C48040) *
                C31302) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C48040 + (C11456 + C11457) * C48960 +
             (C11458 + C11459) * C48032 + (C11460 + C11461) * C48967 +
             (C11462 + C11463) * C48046 + (C11464 + C11465) * C26653) *
                C31302 +
            ((C12720 + C12721) * C48040 + (C12722 + C12723) * C48960 +
             (C12724 + C12725) * C48032 + (C12726 + C12727) * C48967 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C48046 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C26653) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C26653 + (C12725 + C12724) * C48046 +
             (C12723 + C12722) * C48967 + (C12721 + C12720) * C48032 +
             (C12945 + C12944) * C48960 + (C12943 + C12942) * C48040) *
                C49004 +
            ((C11461 + C11460) * C26653 + (C11459 + C11458) * C48046 +
             (C11457 + C11456) * C48967 + (C11455 + C11454) * C48032 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48960 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C48040) *
                C31302) *
               C48888 * C447) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C48040 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48960 +
            (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
            C11824 * C48046 + C11825 * C26653) *
               C31302 +
           ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
            C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
            C13287 * C26653) *
               C49004) *
              C48888 * C513 -
          (((C11994 + C11995) * C26653 + (C11996 + C11997) * C48046 +
            C13500 * C48967 + C13501 * C48032 + C13502 * C48960 +
            C13503 * C48040) *
               C49004 +
           ((C11453 + C11452) * C26653 + (C11451 + C11450) * C48046 +
            (C11449 + C11448) * C48967 + (C11447 + C11446) * C48032 +
            (C11445 + C11444) * C48960 + (C11443 + C11442) * C48040) *
               C31302) *
              C48888 * C514 +
          ((C11824 * C48040 + C11825 * C48960 + C11826 * C48032 +
            C11827 * C48967 + (C11839 + C11838) * C48046 +
            (C11837 + C11836) * C26653) *
               C31302 +
           (C13286 * C48040 + C13287 * C48960 + (C11997 + C11996) * C48032 +
            (C11995 + C11994) * C48967 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C48046 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C26653) *
               C49004) *
              C48888 * C515) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C339 -
           (((C13504 + C13505) * C26653 + (C13506 + C13507) * C48046 +
             C19611 * C48967 + C19612 * C48032 + (C14054 + C14055) * C48960 +
             (C14056 + C14057) * C48040) *
                C49004 +
            (C13500 * C26653 + C13501 * C48046 + C13502 * C48967 +
             C13503 * C48032 + (C12941 + C12940) * C48960 +
             (C12939 + C12938) * C48040) *
                C31302) *
               C49191) *
              C447 +
          (((C13482 * C48040 + C13483 * C48960 + C13286 * C48032 +
             C13287 * C48967 + (C11997 + C11996) * C48046 +
             (C11995 + C11994) * C26653) *
                C31302 +
            (C19601 * C48040 + C19602 * C48960 + (C13507 + C13506) * C48032 +
             (C13505 + C13504) * C48967 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C48046 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C26653) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C26653 + (C11996 + C11997) * C48046 +
             C13500 * C48967 + C13501 * C48032 + C13502 * C48960 +
             C13503 * C48040) *
                C49004 +
            ((C11453 + C11452) * C26653 + (C11451 + C11450) * C48046 +
             (C11449 + C11448) * C48967 + (C11447 + C11446) * C48032 +
             (C11445 + C11444) * C48960 + (C11443 + C11442) * C48040) *
                C31302) *
               C339) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C26653 + (C13506 + C13507) * C48046 +
             C19611 * C48967 + C19612 * C48032 + (C14054 + C14055) * C48960 +
             (C14056 + C14057) * C48040) *
                C49004 +
            (C13500 * C26653 + C13501 * C48046 + C13502 * C48967 +
             C13503 * C48032 + (C12941 + C12940) * C48960 +
             (C12939 + C12938) * C48040) *
                C31302) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C48040 + (C12944 + C12945) * C48960 +
             (C12720 + C12721) * C48032 + (C12722 + C12723) * C48967 +
             (C12724 + C12725) * C48046 + (C12726 + C12727) * C26653) *
                C31302 +
            ((C19063 + C19064) * C48040 + (C19065 + C19066) * C48960 +
             (C18857 + C18858) * C48032 + (C18859 + C18860) * C48967 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C48046 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C26653) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C26653 + (C12725 + C12724) * C48046 +
             (C12723 + C12722) * C48967 + (C12721 + C12720) * C48032 +
             (C12945 + C12944) * C48960 + (C12943 + C12942) * C48040) *
                C49004 +
            ((C11461 + C11460) * C26653 + (C11459 + C11458) * C48046 +
             (C11457 + C11456) * C48967 + (C11455 + C11454) * C48032 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48960 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C48040) *
                C31302) *
               C721) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C48040 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48960 +
             (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
             C11824 * C48046 + C11825 * C26653) *
                C31302 +
            ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
             C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
             C13287 * C26653) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C26653 + (C13506 + C13507) * C48046 +
             C19611 * C48967 + C19612 * C48032 + (C14054 + C14055) * C48960 +
             (C14056 + C14057) * C48040) *
                C49004 +
            (C13500 * C26653 + C13501 * C48046 + C13502 * C48967 +
             C13503 * C48032 + (C12941 + C12940) * C48960 +
             (C12939 + C12938) * C48040) *
                C31302) *
               C49191) *
              C229 +
          (((C13482 * C48040 + C13483 * C48960 + C13286 * C48032 +
             C13287 * C48967 + (C11997 + C11996) * C48046 +
             (C11995 + C11994) * C26653) *
                C31302 +
            (C19601 * C48040 + C19602 * C48960 + (C13507 + C13506) * C48032 +
             (C13505 + C13504) * C48967 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C48046 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C26653) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C26653 + (C11996 + C11997) * C48046 +
             C13500 * C48967 + C13501 * C48032 + C13502 * C48960 +
             C13503 * C48040) *
                C49004 +
            ((C11453 + C11452) * C26653 + (C11451 + C11450) * C48046 +
             (C11449 + C11448) * C48967 + (C11447 + C11446) * C48032 +
             (C11445 + C11444) * C48960 + (C11443 + C11442) * C48040) *
                C31302) *
               C721) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C48040 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48960 +
            (C11442 + C11443) * C48032 + (C11444 + C11445) * C48967 +
            C11824 * C48046 + C11825 * C26653) *
               C31302 +
           ((C12938 + C12939) * C48040 + (C12940 + C12941) * C48960 +
            C13482 * C48032 + C13483 * C48967 + C13286 * C48046 +
            C13287 * C26653) *
               C49004) *
              C867 -
          (((C13504 + C13505) * C26653 + (C13506 + C13507) * C48046 +
            C19611 * C48967 + C19612 * C48032 + (C14054 + C14055) * C48960 +
            (C14056 + C14057) * C48040) *
               C49004 +
           (C13500 * C26653 + C13501 * C48046 + C13502 * C48967 +
            C13503 * C48032 + (C12941 + C12940) * C48960 +
            (C12939 + C12938) * C48040) *
               C31302) *
              C868 +
          ((C20151 * C48040 + C20152 * C48960 + C19601 * C48032 +
            C19602 * C48967 + (C13507 + C13506) * C48046 +
            (C13505 + C13504) * C26653) *
               C31302 +
           (C21264 * C48040 + C21265 * C48960 + (C19616 + C19615) * C48032 +
            (C19614 + C19613) * C48967 +
            (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
             C48810 * C10238) *
                C48046 +
            (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
             C48810 * C10241) *
                C26653) *
               C49004) *
              C869) *
         C48871 * C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C48040 +
                    (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
                    C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                       C49000 +
                   (C10275 * C48040 + C10276 * C48960 + C9558 * C48032 +
                    C9557 * C48967 + C9556 * C48046 + C9555 * C26653) *
                       C49007 +
                   (C10277 * C48040 + C10278 * C48960 + C10077 * C48032 +
                    C10078 * C48967 + C10079 * C48046 + C10080 * C26653) *
                       C36778) *
                      C48888 * C48871 * C110 -
                  ((C10088 * C26653 + C10087 * C48046 + C10086 * C48967 +
                    C10085 * C48032 + C10282 * C48960 + C10281 * C48040) *
                       C36778 +
                   (C10084 * C26653 + C10083 * C48046 + C10082 * C48967 +
                    C10081 * C48032 + C10280 * C48960 + C10279 * C48040) *
                       C49007 +
                   (C9200 * C26653 + C9199 * C48046 + C9198 * C48967 +
                    C9197 * C48032 + (C9060 * C132 + C48800 * C141) * C48960 +
                    (C9060 * C120 + C48800 * C127) * C48040) *
                       C49000) *
                      C48888 * C48871 * C111 +
                  (((C9060 * C121 + C48800 * C128) * C48040 +
                    (C9060 * C133 + C48800 * C142) * C48960 +
                    (C9060 * C235 + C48800 * C246) * C48032 +
                    (C9060 * C241 + C48800 * C253) * C48967 +
                    (C9060 * C519 + C48800 * C524) * C48046 +
                    (C9060 * C529 + C48800 * C534) * C26653) *
                       C49000 +
                   ((C9060 * C343 + C48800 * C354) * C48040 +
                    (C9060 * C349 + C48800 * C361) * C48960 +
                    (C9060 * C621 + C48800 * C626) * C48032 +
                    (C9060 * C631 + C48800 * C636) * C48967 +
                    (C9060 * C1392 + C48800 * C1399) * C48046 +
                    (C9060 * C1396 + C48800 * C1404) * C26653) *
                       C49007 +
                   ((C9060 * C872 + C48800 * C877) * C48040 +
                    (C9060 * C882 + C48800 * C887) * C48960 +
                    (C9060 * C2296 + C48800 * C2302) * C48032 +
                    (C9060 * C2305 + C48800 * C2314) * C48967 +
                    (C9060 * C2299 + C48800 * C2308) * C48046 +
                    (C9060 * C2311 + C48800 * C2317) * C26653) *
                       C36778) *
                      C48888 * C48871 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C10275 * C48040 + C10276 * C48960 + C9558 * C48032 +
             C9557 * C48967 + C9556 * C48046 + C9555 * C26653) *
                C49007 +
            (C10277 * C48040 + C10278 * C48960 + C10077 * C48032 +
             C10078 * C48967 + C10079 * C48046 + C10080 * C26653) *
                C36778) *
               C48888 * C229 -
           ((C10551 * C26653 + C10552 * C48046 + C10080 * C48967 +
             C10079 * C48032 + C10078 * C48960 + C10077 * C48040) *
                C36778 +
            (C9553 * C26653 + C9554 * C48046 + C9555 * C48967 + C9556 * C48032 +
             C9557 * C48960 + C9558 * C48040) *
                C49007 +
            (C9194 * C26653 + C9193 * C48046 + C9192 * C48967 + C9191 * C48032 +
             C9190 * C48960 + C9189 * C48040) *
                C49000) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C48040 + C9198 * C48960 + C9199 * C48032 + C9200 * C48967 +
             C9201 * C48046 + C9202 * C26653) *
                C49000 +
            (C10081 * C48040 + C10082 * C48960 + C10083 * C48032 +
             C10084 * C48967 + C14290 * C48046 + C14291 * C26653) *
                C49007 +
            (C10085 * C48040 + C10086 * C48960 + C10087 * C48032 +
             C10088 * C48967 + (C9060 * C10048 + C48800 * C10049) * C48046 +
             (C9060 * C10050 + C48800 * C10051) * C26653) *
                C36778) *
               C48888 * C49189 -
           ((C10088 * C26653 + C10087 * C48046 + C10086 * C48967 +
             C10085 * C48032 + C10282 * C48960 + C10281 * C48040) *
                C36778 +
            (C10084 * C26653 + C10083 * C48046 + C10082 * C48967 +
             C10081 * C48032 + C10280 * C48960 + C10279 * C48040) *
                C49007 +
            (C9200 * C26653 + C9199 * C48046 + C9198 * C48967 + C9197 * C48032 +
             (C9060 * C132 + C48800 * C141) * C48960 +
             (C9060 * C120 + C48800 * C127) * C48040) *
                C49000) *
               C48888 * C229) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
            (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
               C339 -
           ((C10723 * C26653 + C10724 * C48046 + C10725 * C48967 +
             C10726 * C48032 + C11147 * C48960 + C11148 * C48040) *
                C36778 +
            (C47006 + C47005 + C47004 + C47003 + C47002 + C47001) * C49007 +
            (C47000 + C46999 + C46998 + C46997 + C46996 + C46995) * C49000) *
               C49191) *
              C48871 * C231 +
          (((C47007 + C47008 + C47009 + C47010 + C47011 + C47012) * C49000 +
            (C47013 + C47014 + C47015 + C47016 + C47017 + C47018) * C49007 +
            (C18014 * C48040 + C18015 * C48960 + C21514 * C48032 +
             C21515 * C48967 + (C9060 * C10235 + C48800 * C10238) * C48046 +
             (C9060 * C10239 + C48800 * C10241) * C26653) *
                C36778) *
               C49191 -
           ((C47018 + C47017 + C47016 + C47015 + C47014 + C47013) * C36778 +
            (C47012 + C47011 + C47010 + C47009 + C47008 + C47007) * C49007 +
            (C9200 * C26653 + C9199 * C48046 + C9198 * C48967 + C9197 * C48032 +
             (C9060 * C132 + C48800 * C141) * C48960 +
             (C9060 * C120 + C48800 * C127) * C48040) *
                C49000) *
               C339) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
            (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
               C48888 * C447 -
           ((C10551 * C26653 + C10552 * C48046 + C10080 * C48967 +
             C10079 * C48032 + C10078 * C48960 + C10077 * C48040) *
                C36778 +
            (C9553 * C26653 + C9554 * C48046 + C9555 * C48967 + C9556 * C48032 +
             C9557 * C48960 + C9558 * C48040) *
                C49007 +
            (C9194 * C26653 + C9193 * C48046 + C9192 * C48967 + C9191 * C48032 +
             C9190 * C48960 + C9189 * C48040) *
                C49000) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C48040 + C9198 * C48960 + C9199 * C48032 + C9200 * C48967 +
             C9201 * C48046 + C9202 * C26653) *
                C49000 +
            (C10081 * C48040 + C10082 * C48960 + C10083 * C48032 +
             C10084 * C48967 + C14290 * C48046 + C14291 * C26653) *
                C49007 +
            (C10085 * C48040 + C10086 * C48960 + C10087 * C48032 +
             C10088 * C48967 + (C9060 * C10048 + C48800 * C10049) * C48046 +
             (C9060 * C10050 + C48800 * C10051) * C26653) *
                C36778) *
               C48888 * C49189 -
           ((C47018 + C47017 + C47016 + C47015 + C47014 + C47013) * C36778 +
            (C47012 + C47011 + C47010 + C47009 + C47008 + C47007) * C49007 +
            (C9200 * C26653 + C9199 * C48046 + C9198 * C48967 + C9197 * C48032 +
             (C9060 * C132 + C48800 * C141) * C48960 +
             (C9060 * C120 + C48800 * C127) * C48040) *
                C49000) *
               C48888 * C447) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C48040 +
            (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
            C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
               C49000 +
           (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
           (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
              C48888 * C513 -
          ((C10551 * C26653 + C10552 * C48046 + C10080 * C48967 +
            C10079 * C48032 + C10078 * C48960 + C10077 * C48040) *
               C36778 +
           (C9553 * C26653 + C9554 * C48046 + C9555 * C48967 + C9556 * C48032 +
            C9557 * C48960 + C9558 * C48040) *
               C49007 +
           (C9194 * C26653 + C9193 * C48046 + C9192 * C48967 + C9191 * C48032 +
            C9190 * C48960 + C9189 * C48040) *
               C49000) *
              C48888 * C514 +
          ((C9191 * C48040 + C9192 * C48960 + C9193 * C48032 + C9194 * C48967 +
            C9195 * C48046 + C9196 * C26653) *
               C49000 +
           (C9556 * C48040 + C9555 * C48960 + C9554 * C48032 + C9553 * C48967 +
            C9552 * C48046 + C9551 * C26653) *
               C49007 +
           (C10079 * C48040 + C10080 * C48960 + C10552 * C48032 +
            C10551 * C48967 + (C9060 * C9785 + C48800 * C9788) * C48046 +
            (C9060 * C9789 + C48800 * C9791) * C26653) *
               C36778) *
              C48888 * C515) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
            (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
               C339 -
           ((C10723 * C26653 + C10724 * C48046 + C10725 * C48967 +
             C10726 * C48032 + C11147 * C48960 + C11148 * C48040) *
                C36778 +
            (C47006 + C47005 + C47004 + C47003 + C47002 + C47001) * C49007 +
            (C47000 + C46999 + C46998 + C46997 + C46996 + C46995) * C49000) *
               C49191) *
              C447 +
          (((C47421 + C47422 + C47423 + C47424 + C47425 + C47426) * C49000 +
            (C47427 + C47428 + C47429 + C47430 + C47431 + C47432) * C49007 +
            (C10726 * C48040 + C10725 * C48960 + C10724 * C48032 +
             C10723 * C48967 + (C9060 * C10698 + C48800 * C10699) * C48046 +
             (C9060 * C10700 + C48800 * C10701) * C26653) *
                C36778) *
               C49191 -
           ((C47432 + C47431 + C47430 + C47429 + C47428 + C47427) * C36778 +
            (C47426 + C47425 + C47424 + C47423 + C47422 + C47421) * C49007 +
            (C9194 * C26653 + C9193 * C48046 + C9192 * C48967 + C9191 * C48032 +
             C9190 * C48960 + C9189 * C48040) *
                C49000) *
               C339) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
            (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
               C721 -
           ((C10723 * C26653 + C10724 * C48046 + C10725 * C48967 +
             C10726 * C48032 + C11147 * C48960 + C11148 * C48040) *
                C36778 +
            (C47006 + C47005 + C47004 + C47003 + C47002 + C47001) * C49007 +
            (C47000 + C46999 + C46998 + C46997 + C46996 + C46995) * C49000) *
               C49191) *
              C48871 * C449 +
          (((C47007 + C47008 + C47009 + C47010 + C47011 + C47012) * C49000 +
            (C47013 + C47014 + C47015 + C47016 + C47017 + C47018) * C49007 +
            (C18014 * C48040 + C18015 * C48960 + C21514 * C48032 +
             C21515 * C48967 + (C9060 * C10235 + C48800 * C10238) * C48046 +
             (C9060 * C10239 + C48800 * C10241) * C26653) *
                C36778) *
               C49191 -
           ((C47018 + C47017 + C47016 + C47015 + C47014 + C47013) * C36778 +
            (C47012 + C47011 + C47010 + C47009 + C47008 + C47007) * C49007 +
            (C9200 * C26653 + C9199 * C48046 + C9198 * C48967 + C9197 * C48032 +
             (C9060 * C132 + C48800 * C141) * C48960 +
             (C9060 * C120 + C48800 * C127) * C48040) *
                C49000) *
               C721) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C48040 +
             (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
             C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
                C49000 +
            (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
            (C47001 + C47002 + C47003 + C47004 + C47005 + C47006) * C36778) *
               C721 -
           ((C10723 * C26653 + C10724 * C48046 + C10725 * C48967 +
             C10726 * C48032 + C11147 * C48960 + C11148 * C48040) *
                C36778 +
            (C47006 + C47005 + C47004 + C47003 + C47002 + C47001) * C49007 +
            (C47000 + C46999 + C46998 + C46997 + C46996 + C46995) * C49000) *
               C49191) *
              C229 +
          (((C47421 + C47422 + C47423 + C47424 + C47425 + C47426) * C49000 +
            (C47427 + C47428 + C47429 + C47430 + C47431 + C47432) * C49007 +
            (C10726 * C48040 + C10725 * C48960 + C10724 * C48032 +
             C10723 * C48967 + (C9060 * C10698 + C48800 * C10699) * C48046 +
             (C9060 * C10700 + C48800 * C10701) * C26653) *
                C36778) *
               C49191 -
           ((C47432 + C47431 + C47430 + C47429 + C47428 + C47427) * C36778 +
            (C47426 + C47425 + C47424 + C47423 + C47422 + C47421) * C49007 +
            (C9194 * C26653 + C9193 * C48046 + C9192 * C48967 + C9191 * C48032 +
             C9190 * C48960 + C9189 * C48040) *
                C49000) *
               C721) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C48040 +
            (C9060 * C131 + C48800 * C140) * C48960 + C9189 * C48032 +
            C9190 * C48967 + C9191 * C48046 + C9192 * C26653) *
               C49000 +
           (C46995 + C46996 + C46997 + C46998 + C46999 + C47000) * C49007 +
           C47845 * C36778) *
              C867 -
          ((C47836 + C47837 + C47838 + C47839 + C47840 + C47841) * C36778 +
           (C47006 + C47005 + C47004 + C47003 + C47002 + C47001) * C49007 +
           (C47000 + C46999 + C46998 + C46997 + C46996 + C46995) * C49000) *
              C868 +
          (C47845 * C49000 +
           (C47841 + C47840 + C47839 + C47838 + C47837 + C47836) * C49007 +
           (C18012 * C48040 + C18013 * C48960 + C18264 * C48032 +
            C18265 * C48967 + (C9060 * C11129 + C48800 * C11132) * C48046 +
            (C9060 * C11133 + C48800 * C11135) * C26653) *
               C36778) *
              C869) *
         C48871 * C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C23695 +
                    (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                    C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                    C9193 * C23698 + C9194 * C49204) *
                       C31302 +
                   (C10275 * C23695 + C10276 * C49236 + C9558 * C23696 +
                    C9557 * C49232 + C9556 * C23697 + C9555 * C49222 +
                    C9554 * C23698 + C9553 * C49204) *
                       C49004) *
                      C48888 * C48871 * C110 -
                  ((C14291 * C49204 + C14290 * C23698 + C10084 * C49222 +
                    C10083 * C23697 + C10082 * C49232 + C10081 * C23696 +
                    C10280 * C49236 + C10279 * C23695) *
                       C49004 +
                   (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                    C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                    (C9060 * C132 + C48800 * C141) * C49236 +
                    (C9060 * C120 + C48800 * C127) * C23695) *
                       C31302) *
                      C48888 * C48871 * C111 +
                  (((C9060 * C121 + C48800 * C128) * C23695 +
                    (C9060 * C133 + C48800 * C142) * C49236 +
                    (C9060 * C235 + C48800 * C246) * C23696 +
                    (C9060 * C241 + C48800 * C253) * C49232 +
                    (C9060 * C519 + C48800 * C524) * C23697 +
                    (C9060 * C529 + C48800 * C534) * C49222 +
                    (C9060 * C1158 + C48800 * C1165) * C23698 +
                    (C9060 * C1162 + C48800 * C1170) * C49204) *
                       C31302 +
                   ((C9060 * C343 + C48800 * C354) * C23695 +
                    (C9060 * C349 + C48800 * C361) * C49236 +
                    (C9060 * C621 + C48800 * C626) * C23696 +
                    (C9060 * C631 + C48800 * C636) * C49232 +
                    (C9060 * C1392 + C48800 * C1399) * C23697 +
                    (C9060 * C1396 + C48800 * C1404) * C49222 +
                    (C9060 * C1846 + C48800 * C1849) * C23698 +
                    (C9060 * C1852 + C48800 * C1855) * C49204) *
                       C49004) *
                      C48888 * C48871 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C22515 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C22509 +
                    (C7961 + C7962 + C7963) * C22516 +
                    (C7964 + C7965 + C7966) * C48964) *
                       C31302 +
                   ((C15623 + C15624 + C15625) * C22515 +
                    (C15626 + C15627 + C15628) * C22509 +
                    (C8590 + C8589 + C8588) * C22516 +
                    (C8587 + C8586 + C8585) * C48964) *
                       C49004) *
                      C48888 * C48871 * C110 -
                  (((C7762 * C632 + C49181 * C637 + C7761 * C631 +
                     C49213 * C636 + C7760 * C630 + C49226 * C635) *
                        C48964 +
                    (C7762 * C622 + C49181 * C627 + C7761 * C621 +
                     C49213 * C626 + C7760 * C620 + C49226 * C625) *
                        C22516 +
                    (C15640 + C15639 + C15638) * C22509 +
                    (C15637 + C15636 + C15635) * C22515) *
                       C49004 +
                   ((C7978 + C7977 + C7976) * C48964 +
                    (C7975 + C7974 + C7973) * C22516 +
                    (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                     C49213 * C142 + C7760 * C132 + C49226 * C141) *
                        C22509 +
                    (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                     C49213 * C128 + C7760 * C120 + C49226 * C127) *
                        C22515) *
                       C31302) *
                      C48888 * C48871 * C111 +
                  (((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                     C49213 * C129 + C7762 * C123 + C49181 * C130) *
                        C22515 +
                    (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                     C49213 * C143 + C7762 * C135 + C49181 * C144) *
                        C22509 +
                    (C7760 * C235 + C49226 * C246 + C7761 * C234 +
                     C49213 * C245 + C7762 * C233 + C49181 * C244) *
                        C22516 +
                    (C7760 * C241 + C49226 * C253 + C7761 * C240 +
                     C49213 * C252 + C7762 * C239 + C49181 * C251) *
                        C48964) *
                       C31302 +
                   ((C7760 * C343 + C49226 * C354 + C7761 * C342 +
                     C49213 * C353 + C7762 * C341 + C49181 * C352) *
                        C22515 +
                    (C7760 * C349 + C49226 * C361 + C7761 * C348 +
                     C49213 * C360 + C7762 * C347 + C49181 * C359) *
                        C22509 +
                    (C7760 * C621 + C49226 * C626 + C7761 * C622 +
                     C49213 * C627 + C7762 * C623 + C49181 * C628) *
                        C22516 +
                    (C7760 * C631 + C49226 * C636 + C7761 * C632 +
                     C49213 * C637 + C7762 * C633 + C49181 * C638) *
                        C48964) *
                       C49004) *
                      C48888 * C48871 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C22515 +
                    (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                    C9190 * C48964) *
                       C49237 +
                   (C10275 * C22515 + C10276 * C22509 + C9558 * C22516 +
                    C9557 * C48964) *
                       C49234 +
                   (C10277 * C22515 + C10278 * C22509 + C10077 * C22516 +
                    C10078 * C48964) *
                       C49225 +
                   (C11148 * C22515 + C11147 * C22509 + C10726 * C22516 +
                    C10725 * C48964) *
                       C49210) *
                      C48888 * C48871 * C110 -
                  ((C21515 * C48964 + C21514 * C22516 + C18015 * C22509 +
                    C18014 * C22515) *
                       C49210 +
                   (C10086 * C48964 + C10085 * C22516 + C10282 * C22509 +
                    C10281 * C22515) *
                       C49225 +
                   (C10082 * C48964 + C10081 * C22516 + C10280 * C22509 +
                    C10279 * C22515) *
                       C49234 +
                   (C9198 * C48964 + C9197 * C22516 +
                    (C9060 * C132 + C48800 * C141) * C22509 +
                    (C9060 * C120 + C48800 * C127) * C22515) *
                       C49237) *
                      C48888 * C48871 * C111 +
                  (((C9060 * C121 + C48800 * C128) * C22515 +
                    (C9060 * C133 + C48800 * C142) * C22509 +
                    (C9060 * C235 + C48800 * C246) * C22516 +
                    (C9060 * C241 + C48800 * C253) * C48964) *
                       C49237 +
                   ((C9060 * C343 + C48800 * C354) * C22515 +
                    (C9060 * C349 + C48800 * C361) * C22509 +
                    (C9060 * C621 + C48800 * C626) * C22516 +
                    (C9060 * C631 + C48800 * C636) * C48964) *
                       C49234 +
                   ((C9060 * C872 + C48800 * C877) * C22515 +
                    (C9060 * C882 + C48800 * C887) * C22509 +
                    (C9060 * C2296 + C48800 * C2302) * C22516 +
                    (C9060 * C2305 + C48800 * C2314) * C48964) *
                       C49225 +
                   ((C9060 * C2727 + C48800 * C2734) * C22515 +
                    (C9060 * C2731 + C48800 * C2739) * C22509 +
                    (C9060 * C3219 + C48800 * C3222) * C22516 +
                    (C9060 * C3225 + C48800 * C3228) * C48964) *
                       C49210) *
                      C48888 * C48871 * C112)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C10275 * C23695 + C10276 * C49236 + C9558 * C23696 +
                     C9557 * C49232 + C9556 * C23697 + C9555 * C49222 +
                     C9554 * C23698 + C9553 * C49204) *
                        C49004) *
                       C48888 * C229 -
                   ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 +
                     C9554 * C23697 + C9555 * C49232 + C9556 * C23696 +
                     C9557 * C49236 + C9558 * C23695) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C48888 * C49189) *
                      C231 +
                  (((C9197 * C23695 + C9198 * C49236 + C9199 * C23696 +
                     C9200 * C49232 + C9201 * C23697 + C9202 * C49222 +
                     C9203 * C23698 + C9204 * C49204) *
                        C31302 +
                    (C10081 * C23695 + C10082 * C49236 + C10083 * C23696 +
                     C10084 * C49232 + C14290 * C23697 + C14291 * C49222 +
                     (C9060 * C9287 + C48800 * C9290) * C23698 +
                     (C9060 * C9291 + C48800 * C9293) * C49204) *
                        C49004) *
                       C48888 * C49189 -
                   ((C14291 * C49204 + C14290 * C23698 + C10084 * C49222 +
                     C10083 * C23697 + C10082 * C49232 + C10081 * C23696 +
                     C10280 * C49236 + C10279 * C23695) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C48888 * C229) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C48888 * C229 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 +
                     (C8585 + C8586 + C8587) * C22509 +
                     (C8588 + C8589 + C8590) * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C48888 * C49189) *
                      C231 +
                  ((((C7973 + C7974 + C7975) * C22515 +
                     (C7976 + C7977 + C7978) * C22509 +
                     (C7979 + C7980 + C7981) * C22516 +
                     (C7982 + C7983 + C7984) * C48964) *
                        C31302 +
                    ((C39880 + C39881 + C39882) * C22515 +
                     (C39883 + C39884 + C39885) * C22509 +
                     (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 +
                      C49213 * C1399 + C7762 * C1395 + C49181 * C1402) *
                         C22516 +
                     (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 +
                      C49213 * C1404 + C7762 * C1403 + C49181 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C48888 * C229) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C10275 * C22515 + C10276 * C22509 + C9558 * C22516 +
                     C9557 * C48964) *
                        C49234 +
                    (C10277 * C22515 + C10278 * C22509 + C10077 * C22516 +
                     C10078 * C48964) *
                        C49225 +
                    (C11148 * C22515 + C11147 * C22509 + C10726 * C22516 +
                     C10725 * C48964) *
                        C49210) *
                       C48888 * C229 -
                   ((C10723 * C48964 + C10724 * C22516 + C10725 * C22509 +
                     C10726 * C22515) *
                        C49210 +
                    (C10080 * C48964 + C10079 * C22516 + C10078 * C22509 +
                     C10077 * C22515) *
                        C49225 +
                    (C9555 * C48964 + C9556 * C22516 + C9557 * C22509 +
                     C9558 * C22515) *
                        C49234 +
                    (C9192 * C48964 + C9191 * C22516 + C9190 * C22509 +
                     C9189 * C22515) *
                        C49237) *
                       C48888 * C49189) *
                      C231 +
                  (((C9197 * C22515 + C9198 * C22509 + C9199 * C22516 +
                     C9200 * C48964) *
                        C49237 +
                    (C10081 * C22515 + C10082 * C22509 + C10083 * C22516 +
                     C10084 * C48964) *
                        C49234 +
                    (C10085 * C22515 + C10086 * C22509 + C10087 * C22516 +
                     C10088 * C48964) *
                        C49225 +
                    (C21514 * C22515 + C21515 * C22509 +
                     (C9060 * C10235 + C48800 * C10238) * C22516 +
                     (C9060 * C10239 + C48800 * C10241) * C48964) *
                        C49210) *
                       C48888 * C49189 -
                   ((C21515 * C48964 + C21514 * C22516 + C18015 * C22509 +
                     C18014 * C22515) *
                        C49210 +
                    (C10086 * C48964 + C10085 * C22516 + C10282 * C22509 +
                     C10281 * C22515) *
                        C49225 +
                    (C10082 * C48964 + C10081 * C22516 + C10280 * C22509 +
                     C10279 * C22515) *
                        C49234 +
                    (C9198 * C48964 + C9197 * C22516 +
                     (C9060 * C132 + C48800 * C141) * C22509 +
                     (C9060 * C120 + C48800 * C127) * C22515) *
                        C49237) *
                       C48888 * C229) *
                      C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C339 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C48871 * C231 +
                  (((C41522 + C41523 + C41524 + C41525 + C41526 + C41527 +
                     C41528 + C41529) *
                        C31302 +
                    (C10281 * C23695 + C10282 * C49236 + C10085 * C23696 +
                     C10086 * C49232 + C10087 * C23697 + C10088 * C49222 +
                     (C9060 * C10048 + C48800 * C10049) * C23698 +
                     (C9060 * C10050 + C48800 * C10051) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C339) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C339 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    ((C8585 + C8586 + C8587) * C48964 +
                     (C8588 + C8589 + C8590) * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C48871 * C231 +
                  ((((C15635 + C15636 + C15637) * C22515 +
                     (C15638 + C15639 + C15640) * C22509 +
                     (C39880 + C39881 + C39882) * C22516 +
                     (C39883 + C39884 + C39885) * C48964) *
                        C31302 +
                    ((C15641 + C15642 + C15643) * C22515 +
                     (C15644 + C15645 + C15646) * C22509 +
                     (C7760 * C2295 + C49226 * C2301 + C7761 * C2296 +
                      C49213 * C2302 + C7762 * C2577 + C49181 * C2578) *
                         C22516 +
                     (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 +
                      C49213 * C2314 + C7762 * C2579 + C49181 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C339) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C42620 + C42621 + C42622 + C42623) * C49234 +
                    (C42624 + C42625 + C42626 + C42627) * C49225 +
                    (C42628 + C42629 + C42630 + C42631) * C49210) *
                       C339 -
                   ((C18265 * C48964 + C18264 * C22516 + C18013 * C22509 +
                     C18012 * C22515) *
                        C49210 +
                    (C42631 + C42630 + C42629 + C42628) * C49225 +
                    (C42627 + C42626 + C42625 + C42624) * C49234 +
                    (C42623 + C42622 + C42621 + C42620) * C49237) *
                       C49191) *
                      C48871 * C231 +
                  (((C42632 + C42633 + C42634 + C42635) * C49237 +
                    (C42636 + C42637 + C42638 + C42639) * C49234 +
                    (C42640 + C42641 + C42642 + C42643) * C49225 +
                    (C18016 * C22515 + C18017 * C22509 +
                     (C9060 * C17895 + C48800 * C17896) * C22516 +
                     (C9060 * C17897 + C48800 * C17898) * C48964) *
                        C49210) *
                       C49191 -
                   ((C42643 + C42642 + C42641 + C42640) * C49210 +
                    (C42639 + C42638 + C42637 + C42636) * C49225 +
                    (C42635 + C42634 + C42633 + C42632) * C49234 +
                    (C9198 * C48964 + C9197 * C22516 +
                     (C9060 * C132 + C48800 * C141) * C22509 +
                     (C9060 * C120 + C48800 * C127) * C22515) *
                        C49237) *
                       C339) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C48888 * C447 -
                   ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 +
                     C9554 * C23697 + C9555 * C49232 + C9556 * C23696 +
                     C9557 * C49236 + C9558 * C23695) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C48888 * C49189) *
                      C449 +
                  (((C9197 * C23695 + C9198 * C49236 + C9199 * C23696 +
                     C9200 * C49232 + C9201 * C23697 + C9202 * C49222 +
                     C9203 * C23698 + C9204 * C49204) *
                        C31302 +
                    (C10081 * C23695 + C10082 * C49236 + C10083 * C23696 +
                     C10084 * C49232 + C14290 * C23697 + C14291 * C49222 +
                     (C9060 * C9287 + C48800 * C9290) * C23698 +
                     (C9060 * C9291 + C48800 * C9293) * C49204) *
                        C49004) *
                       C48888 * C49189 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C48888 * C447) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C48888 * C447 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 +
                     (C8585 + C8586 + C8587) * C22509 +
                     (C8588 + C8589 + C8590) * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C48888 * C49189) *
                      C449 +
                  ((((C7973 + C7974 + C7975) * C22515 +
                     (C7976 + C7977 + C7978) * C22509 +
                     (C7979 + C7980 + C7981) * C22516 +
                     (C7982 + C7983 + C7984) * C48964) *
                        C31302 +
                    ((C39880 + C39881 + C39882) * C22515 +
                     (C39883 + C39884 + C39885) * C22509 +
                     (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 +
                      C49213 * C1399 + C7762 * C1395 + C49181 * C1402) *
                         C22516 +
                     (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 +
                      C49213 * C1404 + C7762 * C1403 + C49181 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C48888 * C447) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C42620 + C42621 + C42622 + C42623) * C49234 +
                    (C42624 + C42625 + C42626 + C42627) * C49225 +
                    (C42628 + C42629 + C42630 + C42631) * C49210) *
                       C48888 * C447 -
                   ((C10723 * C48964 + C10724 * C22516 + C10725 * C22509 +
                     C10726 * C22515) *
                        C49210 +
                    (C10080 * C48964 + C10079 * C22516 + C10078 * C22509 +
                     C10077 * C22515) *
                        C49225 +
                    (C9555 * C48964 + C9556 * C22516 + C9557 * C22509 +
                     C9558 * C22515) *
                        C49234 +
                    (C9192 * C48964 + C9191 * C22516 + C9190 * C22509 +
                     C9189 * C22515) *
                        C49237) *
                       C48888 * C49189) *
                      C449 +
                  (((C9197 * C22515 + C9198 * C22509 + C9199 * C22516 +
                     C9200 * C48964) *
                        C49237 +
                    (C10081 * C22515 + C10082 * C22509 + C10083 * C22516 +
                     C10084 * C48964) *
                        C49234 +
                    (C10085 * C22515 + C10086 * C22509 + C10087 * C22516 +
                     C10088 * C48964) *
                        C49225 +
                    (C21514 * C22515 + C21515 * C22509 +
                     (C9060 * C10235 + C48800 * C10238) * C22516 +
                     (C9060 * C10239 + C48800 * C10241) * C48964) *
                        C49210) *
                       C48888 * C49189 -
                   ((C42643 + C42642 + C42641 + C42640) * C49210 +
                    (C42639 + C42638 + C42637 + C42636) * C49225 +
                    (C42635 + C42634 + C42633 + C42632) * C49234 +
                    (C9198 * C48964 + C9197 * C22516 +
                     (C9060 * C132 + C48800 * C141) * C22509 +
                     (C9060 * C120 + C48800 * C127) * C22515) *
                        C49237) *
                       C48888 * C447) *
                      C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C23695 +
            (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
            C9190 * C49232 + C9191 * C23697 + C9192 * C49222 + C9193 * C23698 +
            C9194 * C49204) *
               C31302 +
           (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 + C41520 +
            C41521) *
               C49004) *
              C48888 * C513 -
          ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 + C9554 * C23697 +
            C9555 * C49232 + C9556 * C23696 + C9557 * C49236 + C9558 * C23695) *
               C49004 +
           (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 + C9193 * C23697 +
            C9192 * C49232 + C9191 * C23696 + C9190 * C49236 + C9189 * C23695) *
               C31302) *
              C48888 * C514 +
          ((C9191 * C23695 + C9192 * C49236 + C9193 * C23696 + C9194 * C49232 +
            C9195 * C23697 + C9196 * C49222 + C9448 * C23698 + C9447 * C49204) *
               C31302 +
           (C9556 * C23695 + C9555 * C49236 + C9554 * C23696 + C9553 * C49232 +
            C9552 * C23697 + C9551 * C49222 +
            (C9060 * C9530 + C48800 * C9531) * C23698 +
            (C9060 * C9532 + C48800 * C9533) * C49204) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C22515 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C22509 +
            (C7961 + C7962 + C7963) * C22516 +
            (C7964 + C7965 + C7966) * C48964) *
               C31302 +
           ((C15623 + C15624 + C15625) * C22515 +
            (C15626 + C15627 + C15628) * C22509 +
            (C8590 + C8589 + C8588) * C22516 +
            (C8587 + C8586 + C8585) * C48964) *
               C49004) *
              C48888 * C513 -
          (((C8579 + C8580 + C8581) * C48964 +
            (C8582 + C8583 + C8584) * C22516 +
            (C8585 + C8586 + C8587) * C22509 +
            (C8588 + C8589 + C8590) * C22515) *
               C49004 +
           ((C7972 + C7971 + C7970) * C48964 +
            (C7969 + C7968 + C7967) * C22516 +
            (C7966 + C7965 + C7964) * C22509 +
            (C7963 + C7962 + C7961) * C22515) *
               C31302) *
              C48888 * C514 +
          ((C8401 * C22515 + C8402 * C22509 + (C8408 + C8407 + C8406) * C22516 +
            (C8405 + C8404 + C8403) * C48964) *
               C31302 +
           ((C8584 + C8583 + C8582) * C22515 +
            (C8581 + C8580 + C8579) * C22509 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C22516 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C48964) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C22515 +
            (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
            C9190 * C48964) *
               C49237 +
           (C42620 + C42621 + C42622 + C42623) * C49234 +
           (C42624 + C42625 + C42626 + C42627) * C49225 +
           (C42628 + C42629 + C42630 + C42631) * C49210) *
              C48888 * C513 -
          ((C10723 * C48964 + C10724 * C22516 + C10725 * C22509 +
            C10726 * C22515) *
               C49210 +
           (C10080 * C48964 + C10079 * C22516 + C10078 * C22509 +
            C10077 * C22515) *
               C49225 +
           (C9555 * C48964 + C9556 * C22516 + C9557 * C22509 + C9558 * C22515) *
               C49234 +
           (C9192 * C48964 + C9191 * C22516 + C9190 * C22509 + C9189 * C22515) *
               C49237) *
              C48888 * C514 +
          ((C9191 * C22515 + C9192 * C22509 + C9193 * C22516 + C9194 * C48964) *
               C49237 +
           (C9556 * C22515 + C9555 * C22509 + C9554 * C22516 + C9553 * C48964) *
               C49234 +
           (C10079 * C22515 + C10080 * C22509 + C10552 * C22516 +
            C10551 * C48964) *
               C49225 +
           (C10724 * C22515 + C10723 * C22509 +
            (C9060 * C10698 + C48800 * C10699) * C22516 +
            (C9060 * C10700 + C48800 * C10701) * C48964) *
               C49210) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[68] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C339 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C447 +
                  (((C41888 + C41889 + C41890 + C41891 + C41892 + C41893 +
                     C41894 + C41895) *
                        C31302 +
                    (C10077 * C23695 + C10078 * C49236 + C10079 * C23696 +
                     C10080 * C49232 + C10552 * C23697 + C10551 * C49222 +
                     (C9060 * C9785 + C48800 * C9788) * C23698 +
                     (C9060 * C9789 + C48800 * C9791) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41895 + C41894 + C41893 + C41892 + C41891 + C41890 +
                     C41889 + C41888) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C339) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C339 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C447 +
                  (((C40618 * C22515 + C40619 * C22509 +
                     (C8584 + C8583 + C8582) * C22516 +
                     (C8581 + C8580 + C8579) * C48964) *
                        C31302 +
                    ((C16061 + C16062 + C16063) * C22515 +
                     (C16064 + C16065 + C16066) * C22509 +
                     (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 +
                      C49213 * C2307 + C7762 * C2299 + C49181 * C2308) *
                         C22516 +
                     (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 +
                      C49213 * C2316 + C7762 * C2311 + C49181 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 + C40620 * C22509 +
                     C40621 * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C339) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C42620 + C42621 + C42622 + C42623) * C49234 +
                    (C42624 + C42625 + C42626 + C42627) * C49225 +
                    (C42628 + C42629 + C42630 + C42631) * C49210) *
                       C339 -
                   ((C18265 * C48964 + C18264 * C22516 + C18013 * C22509 +
                     C18012 * C22515) *
                        C49210 +
                    (C42631 + C42630 + C42629 + C42628) * C49225 +
                    (C42627 + C42626 + C42625 + C42624) * C49234 +
                    (C42623 + C42622 + C42621 + C42620) * C49237) *
                       C49191) *
                      C447 +
                  (((C43002 + C43003 + C43004 + C43005) * C49237 +
                    (C43006 + C43007 + C43008 + C43009) * C49234 +
                    (C43010 + C43011 + C43012 + C43013) * C49225 +
                    (C18264 * C22515 + C18265 * C22509 +
                     (C9060 * C11129 + C48800 * C11132) * C22516 +
                     (C9060 * C11133 + C48800 * C11135) * C48964) *
                        C49210) *
                       C49191 -
                   ((C43013 + C43012 + C43011 + C43010) * C49210 +
                    (C43009 + C43008 + C43007 + C43006) * C49225 +
                    (C43005 + C43004 + C43003 + C43002) * C49234 +
                    (C9192 * C48964 + C9191 * C22516 + C9190 * C22509 +
                     C9189 * C22515) *
                        C49237) *
                       C339) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[69] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C721 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C48871 * C449 +
                  (((C41522 + C41523 + C41524 + C41525 + C41526 + C41527 +
                     C41528 + C41529) *
                        C31302 +
                    (C10281 * C23695 + C10282 * C49236 + C10085 * C23696 +
                     C10086 * C49232 + C10087 * C23697 + C10088 * C49222 +
                     (C9060 * C10048 + C48800 * C10049) * C23698 +
                     (C9060 * C10050 + C48800 * C10051) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C721) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C721 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C48871 * C449 +
                  ((((C15635 + C15636 + C15637) * C22515 +
                     (C15638 + C15639 + C15640) * C22509 +
                     (C39880 + C39881 + C39882) * C22516 +
                     (C39883 + C39884 + C39885) * C48964) *
                        C31302 +
                    ((C15641 + C15642 + C15643) * C22515 +
                     (C15644 + C15645 + C15646) * C22509 +
                     (C7760 * C2295 + C49226 * C2301 + C7761 * C2296 +
                      C49213 * C2302 + C7762 * C2577 + C49181 * C2578) *
                         C22516 +
                     (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 +
                      C49213 * C2314 + C7762 * C2579 + C49181 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C721) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C42620 + C42621 + C42622 + C42623) * C49234 +
                    (C42624 + C42625 + C42626 + C42627) * C49225 +
                    (C42628 + C42629 + C42630 + C42631) * C49210) *
                       C721 -
                   ((C18265 * C48964 + C18264 * C22516 + C18013 * C22509 +
                     C18012 * C22515) *
                        C49210 +
                    (C42631 + C42630 + C42629 + C42628) * C49225 +
                    (C42627 + C42626 + C42625 + C42624) * C49234 +
                    (C42623 + C42622 + C42621 + C42620) * C49237) *
                       C49191) *
                      C48871 * C449 +
                  (((C42632 + C42633 + C42634 + C42635) * C49237 +
                    (C42636 + C42637 + C42638 + C42639) * C49234 +
                    (C42640 + C42641 + C42642 + C42643) * C49225 +
                    (C18016 * C22515 + C18017 * C22509 +
                     (C9060 * C17895 + C48800 * C17896) * C22516 +
                     (C9060 * C17897 + C48800 * C17898) * C48964) *
                        C49210) *
                       C49191 -
                   ((C42643 + C42642 + C42641 + C42640) * C49210 +
                    (C42639 + C42638 + C42637 + C42636) * C49225 +
                    (C42635 + C42634 + C42633 + C42632) * C49234 +
                    (C9198 * C48964 + C9197 * C22516 +
                     (C9060 * C132 + C48800 * C141) * C22509 +
                     (C9060 * C120 + C48800 * C127) * C22515) *
                        C49237) *
                       C721) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C721 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C229 +
                  (((C41888 + C41889 + C41890 + C41891 + C41892 + C41893 +
                     C41894 + C41895) *
                        C31302 +
                    (C10077 * C23695 + C10078 * C49236 + C10079 * C23696 +
                     C10080 * C49232 + C10552 * C23697 + C10551 * C49222 +
                     (C9060 * C9785 + C48800 * C9788) * C23698 +
                     (C9060 * C9789 + C48800 * C9791) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41895 + C41894 + C41893 + C41892 + C41891 + C41890 +
                     C41889 + C41888) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C721) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C721 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C229 +
                  (((C40618 * C22515 + C40619 * C22509 +
                     (C8584 + C8583 + C8582) * C22516 +
                     (C8581 + C8580 + C8579) * C48964) *
                        C31302 +
                    ((C16061 + C16062 + C16063) * C22515 +
                     (C16064 + C16065 + C16066) * C22509 +
                     (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 +
                      C49213 * C2307 + C7762 * C2299 + C49181 * C2308) *
                         C22516 +
                     (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 +
                      C49213 * C2316 + C7762 * C2311 + C49181 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 + C40620 * C22509 +
                     C40621 * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C721) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C22515 +
                     (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                     C9190 * C48964) *
                        C49237 +
                    (C42620 + C42621 + C42622 + C42623) * C49234 +
                    (C42624 + C42625 + C42626 + C42627) * C49225 +
                    (C42628 + C42629 + C42630 + C42631) * C49210) *
                       C721 -
                   ((C18265 * C48964 + C18264 * C22516 + C18013 * C22509 +
                     C18012 * C22515) *
                        C49210 +
                    (C42631 + C42630 + C42629 + C42628) * C49225 +
                    (C42627 + C42626 + C42625 + C42624) * C49234 +
                    (C42623 + C42622 + C42621 + C42620) * C49237) *
                       C49191) *
                      C229 +
                  (((C43002 + C43003 + C43004 + C43005) * C49237 +
                    (C43006 + C43007 + C43008 + C43009) * C49234 +
                    (C43010 + C43011 + C43012 + C43013) * C49225 +
                    (C18264 * C22515 + C18265 * C22509 +
                     (C9060 * C11129 + C48800 * C11132) * C22516 +
                     (C9060 * C11133 + C48800 * C11135) * C48964) *
                        C49210) *
                       C49191 -
                   ((C43013 + C43012 + C43011 + C43010) * C49210 +
                    (C43009 + C43008 + C43007 + C43006) * C49225 +
                    (C43005 + C43004 + C43003 + C43002) * C49234 +
                    (C9192 * C48964 + C9191 * C22516 + C9190 * C22509 +
                     C9189 * C22515) *
                        C49237) *
                       C721) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C23695 +
                    (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                    C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                    C9193 * C23698 + C9194 * C49204) *
                       C31302 +
                   (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                    C41520 + C41521) *
                       C49004) *
                      C867 -
                  ((C42254 + C42255 + C42256 + C42257 + C42258 + C42259 +
                    C42260 + C42261) *
                       C49004 +
                   (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                    C41515 + C41514) *
                       C31302) *
                      C868 +
                  ((C42261 + C42260 + C42259 + C42258 + C42257 + C42256 +
                    C42255 + C42254) *
                       C31302 +
                   (C11148 * C23695 + C11147 * C49236 + C10726 * C23696 +
                    C10725 * C49232 + C10724 * C23697 + C10723 * C49222 +
                    (C9060 * C10698 + C48800 * C10699) * C23698 +
                    (C9060 * C10700 + C48800 * C10701) * C49204) *
                       C49004) *
                      C869) *
                 C48871 * C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C22515 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C22509 +
                    (C7961 + C7962 + C7963) * C22516 +
                    (C7964 + C7965 + C7966) * C48964) *
                       C31302 +
                   ((C15623 + C15624 + C15625) * C22515 +
                    (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                    C40619 * C48964) *
                       C49004) *
                      C867 -
                  (((C16066 + C16065 + C16064) * C48964 +
                    (C16063 + C16062 + C16061) * C22516 +
                    (C15634 + C15633 + C15632) * C22509 +
                    (C15631 + C15630 + C15629) * C22515) *
                       C49004 +
                   (C40620 * C48964 + C40621 * C22516 +
                    (C15628 + C15627 + C15626) * C22509 +
                    (C15625 + C15624 + C15623) * C22515) *
                       C31302) *
                      C868 +
                  ((C16483 * C22515 + C16484 * C22509 +
                    (C16061 + C16062 + C16063) * C22516 +
                    (C16064 + C16065 + C16066) * C48964) *
                       C31302 +
                   ((C16490 + C16489 + C16488) * C22515 +
                    (C16487 + C16486 + C16485) * C22509 +
                    (C7760 * C3217 + C49226 * C3220 + C7761 * C3218 +
                     C49213 * C3221 + C7762 * C3219 + C49181 * C3222) *
                        C22516 +
                    (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 +
                     C49213 * C3227 + C7762 * C3225 + C49181 * C3228) *
                        C48964) *
                       C49004) *
                      C869) *
                 C48871 * C48837) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C22515 +
                    (C9060 * C131 + C48800 * C140) * C22509 + C9189 * C22516 +
                    C9190 * C48964) *
                       C49237 +
                   (C42620 + C42621 + C42622 + C42623) * C49234 +
                   C43380 * C49225 + C43381 * C49210) *
                      C867 -
                  ((C43374 + C43375 + C43376 + C43377) * C49210 +
                   (C42631 + C42630 + C42629 + C42628) * C49225 +
                   (C42627 + C42626 + C42625 + C42624) * C49234 +
                   (C42623 + C42622 + C42621 + C42620) * C49237) *
                      C868 +
                  (C43380 * C49237 + C43381 * C49234 +
                   (C43377 + C43376 + C43375 + C43374) * C49225 +
                   (C18506 * C22515 + C18505 * C22509 +
                    (C9060 * C18249 + C48800 * C18250) * C22516 +
                    (C9060 * C18251 + C48800 * C18252) * C48964) *
                       C49210) *
                      C869) *
                 C48871 * C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C22515 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C22509 +
            (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
               C49000 +
           ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
            C13482 * C22516 + C13483 * C48964) *
               C49007 +
           (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
            C19602 * C48964) *
               C36778) *
              C48888 * C48871 * C110 -
          (((C18860 + C18859) * C48964 + (C18858 + C18857) * C22516 +
            (C19066 + C19065) * C22509 + (C19064 + C19063) * C22515) *
               C36778 +
           ((C12723 + C12722) * C48964 + (C12721 + C12720) * C22516 +
            (C12945 + C12944) * C22509 + (C12943 + C12942) * C22515) *
               C49007 +
           ((C11457 + C11456) * C48964 + (C11455 + C11454) * C22516 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C22509 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C22515) *
               C49000) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C22515 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C22509 +
            (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
                C22516 +
            (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
                C48964) *
               C49000 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C22515 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C22509 +
            (C47907 * C621 + C49139 * C626 + C47888 * C622 + C48810 * C627) *
                C22516 +
            (C47907 * C631 + C49139 * C636 + C47888 * C632 + C48810 * C637) *
                C48964) *
               C49007 +
           ((C47907 * C872 + C49139 * C877 + C47888 * C873 + C48810 * C878) *
                C22515 +
            (C47907 * C882 + C49139 * C887 + C47888 * C883 + C48810 * C888) *
                C22509 +
            (C47907 * C2296 + C49139 * C2302 + C47888 * C2577 +
             C48810 * C2578) *
                C22516 +
            (C47907 * C2305 + C49139 * C2314 + C47888 * C2579 +
             C48810 * C2580) *
                C48964) *
               C36778) *
              C48888 * C48871 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C48888 * C229 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C22516 +
             C19611 * C22509 + C19612 * C22515) *
                C36778 +
            (C13500 * C48964 + C13501 * C22516 + C13502 * C22509 +
             C13503 * C22515) *
                C49007 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C22516 +
             (C11445 + C11444) * C22509 + (C11443 + C11442) * C22515) *
                C49000) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C22515 + (C11456 + C11457) * C22509 +
             (C11458 + C11459) * C22516 + (C11460 + C11461) * C48964) *
                C49000 +
            ((C12720 + C12721) * C22515 + (C12722 + C12723) * C22509 +
             (C12724 + C12725) * C22516 + (C12726 + C12727) * C48964) *
                C49007 +
            ((C18857 + C18858) * C22515 + (C18859 + C18860) * C22509 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C22516 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C36778) *
               C48888 * C49189 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C22516 +
             (C19066 + C19065) * C22509 + (C19064 + C19063) * C22515) *
                C36778 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C22516 +
             (C12945 + C12944) * C22509 + (C12943 + C12942) * C22515) *
                C49007 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C22516 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C22509 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C22515) *
                C49000) *
               C48888 * C229) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C339 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C22516 +
             (C20165 + C20166) * C22509 + (C20167 + C20168) * C22515) *
                C36778 +
            (C19611 * C48964 + C19612 * C22516 + (C14054 + C14055) * C22509 +
             (C14056 + C14057) * C22515) *
                C49007 +
            (C13502 * C48964 + C13503 * C22516 + (C12941 + C12940) * C22509 +
             (C12939 + C12938) * C22515) *
                C49000) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C22515 + (C12944 + C12945) * C22509 +
             (C12720 + C12721) * C22516 + (C12722 + C12723) * C48964) *
                C49000 +
            ((C19063 + C19064) * C22515 + (C19065 + C19066) * C22509 +
             (C18857 + C18858) * C22516 + (C18859 + C18860) * C48964) *
                C49007 +
            ((C20542 + C20543) * C22515 + (C20544 + C20545) * C22509 +
             (C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C22516 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C36778) *
               C49191 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C22516 +
             (C19066 + C19065) * C22509 + (C19064 + C19063) * C22515) *
                C36778 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C22516 +
             (C12945 + C12944) * C22509 + (C12943 + C12942) * C22515) *
                C49007 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C22516 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C22509 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C22515) *
                C49000) *
               C339) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C48888 * C447 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C22516 +
             C19611 * C22509 + C19612 * C22515) *
                C36778 +
            (C13500 * C48964 + C13501 * C22516 + C13502 * C22509 +
             C13503 * C22515) *
                C49007 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C22516 +
             (C11445 + C11444) * C22509 + (C11443 + C11442) * C22515) *
                C49000) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C22515 + (C11456 + C11457) * C22509 +
             (C11458 + C11459) * C22516 + (C11460 + C11461) * C48964) *
                C49000 +
            ((C12720 + C12721) * C22515 + (C12722 + C12723) * C22509 +
             (C12724 + C12725) * C22516 + (C12726 + C12727) * C48964) *
                C49007 +
            ((C18857 + C18858) * C22515 + (C18859 + C18860) * C22509 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C22516 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C36778) *
               C48888 * C49189 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C22516 +
             (C19066 + C19065) * C22509 + (C19064 + C19063) * C22515) *
                C36778 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C22516 +
             (C12945 + C12944) * C22509 + (C12943 + C12942) * C22515) *
                C49007 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C22516 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C22509 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C22515) *
                C49000) *
               C48888 * C447) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C22515 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C22509 +
            (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
               C49000 +
           ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
            C13482 * C22516 + C13483 * C48964) *
               C49007 +
           (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
            C19602 * C48964) *
               C36778) *
              C48888 * C513 -
          (((C13504 + C13505) * C48964 + (C13506 + C13507) * C22516 +
            C19611 * C22509 + C19612 * C22515) *
               C36778 +
           (C13500 * C48964 + C13501 * C22516 + C13502 * C22509 +
            C13503 * C22515) *
               C49007 +
           ((C11449 + C11448) * C48964 + (C11447 + C11446) * C22516 +
            (C11445 + C11444) * C22509 + (C11443 + C11442) * C22515) *
               C49000) *
              C48888 * C514 +
          ((C11824 * C22515 + C11825 * C22509 + C11826 * C22516 +
            C11827 * C48964) *
               C49000 +
           (C13286 * C22515 + C13287 * C22509 + (C11997 + C11996) * C22516 +
            (C11995 + C11994) * C48964) *
               C49007 +
           ((C13507 + C13506) * C22515 + (C13505 + C13504) * C22509 +
            (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
             C48810 * C10049) *
                C22516 +
            (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
             C48810 * C10051) *
                C48964) *
               C36778) *
              C48888 * C515) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C339 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C22516 +
             (C20165 + C20166) * C22509 + (C20167 + C20168) * C22515) *
                C36778 +
            (C19611 * C48964 + C19612 * C22516 + (C14054 + C14055) * C22509 +
             (C14056 + C14057) * C22515) *
                C49007 +
            (C13502 * C48964 + C13503 * C22516 + (C12941 + C12940) * C22509 +
             (C12939 + C12938) * C22515) *
                C49000) *
               C49191) *
              C447 +
          (((C13482 * C22515 + C13483 * C22509 + C13286 * C22516 +
             C13287 * C48964) *
                C49000 +
            (C19601 * C22515 + C19602 * C22509 + (C13507 + C13506) * C22516 +
             (C13505 + C13504) * C48964) *
                C49007 +
            ((C19616 + C19615) * C22515 + (C19614 + C19613) * C22509 +
             (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
              C48810 * C10238) *
                 C22516 +
             (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C36778) *
               C49191 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C22516 +
             C19611 * C22509 + C19612 * C22515) *
                C36778 +
            (C13500 * C48964 + C13501 * C22516 + C13502 * C22509 +
             C13503 * C22515) *
                C49007 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C22516 +
             (C11445 + C11444) * C22509 + (C11443 + C11442) * C22515) *
                C49000) *
               C339) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C721 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C22516 +
             (C20165 + C20166) * C22509 + (C20167 + C20168) * C22515) *
                C36778 +
            (C19611 * C48964 + C19612 * C22516 + (C14054 + C14055) * C22509 +
             (C14056 + C14057) * C22515) *
                C49007 +
            (C13502 * C48964 + C13503 * C22516 + (C12941 + C12940) * C22509 +
             (C12939 + C12938) * C22515) *
                C49000) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C22515 + (C12944 + C12945) * C22509 +
             (C12720 + C12721) * C22516 + (C12722 + C12723) * C48964) *
                C49000 +
            ((C19063 + C19064) * C22515 + (C19065 + C19066) * C22509 +
             (C18857 + C18858) * C22516 + (C18859 + C18860) * C48964) *
                C49007 +
            ((C20542 + C20543) * C22515 + (C20544 + C20545) * C22509 +
             (C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C22516 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C36778) *
               C49191 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C22516 +
             (C19066 + C19065) * C22509 + (C19064 + C19063) * C22515) *
                C36778 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C22516 +
             (C12945 + C12944) * C22509 + (C12943 + C12942) * C22515) *
                C49007 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C22516 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C22509 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C22515) *
                C49000) *
               C721) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C22515 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C22509 +
             (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
                C49000 +
            ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
             C13482 * C22516 + C13483 * C48964) *
                C49007 +
            (C20151 * C22515 + C20152 * C22509 + C19601 * C22516 +
             C19602 * C48964) *
                C36778) *
               C721 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C22516 +
             (C20165 + C20166) * C22509 + (C20167 + C20168) * C22515) *
                C36778 +
            (C19611 * C48964 + C19612 * C22516 + (C14054 + C14055) * C22509 +
             (C14056 + C14057) * C22515) *
                C49007 +
            (C13502 * C48964 + C13503 * C22516 + (C12941 + C12940) * C22509 +
             (C12939 + C12938) * C22515) *
                C49000) *
               C49191) *
              C229 +
          (((C13482 * C22515 + C13483 * C22509 + C13286 * C22516 +
             C13287 * C48964) *
                C49000 +
            (C19601 * C22515 + C19602 * C22509 + (C13507 + C13506) * C22516 +
             (C13505 + C13504) * C48964) *
                C49007 +
            ((C19616 + C19615) * C22515 + (C19614 + C19613) * C22509 +
             (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
              C48810 * C10238) *
                 C22516 +
             (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C36778) *
               C49191 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C22516 +
             C19611 * C22509 + C19612 * C22515) *
                C36778 +
            (C13500 * C48964 + C13501 * C22516 + C13502 * C22509 +
             C13503 * C22515) *
                C49007 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C22516 +
             (C11445 + C11444) * C22509 + (C11443 + C11442) * C22515) *
                C49000) *
               C721) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C22515 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C22509 +
            (C11442 + C11443) * C22516 + (C11444 + C11445) * C48964) *
               C49000 +
           ((C12938 + C12939) * C22515 + (C12940 + C12941) * C22509 +
            C13482 * C22516 + C13483 * C48964) *
               C49007 +
           C46592 * C36778) *
              C867 -
          (((C19613 + C19614) * C48964 + (C19615 + C19616) * C22516 +
            (C20165 + C20166) * C22509 + (C20167 + C20168) * C22515) *
               C36778 +
           (C19611 * C48964 + C19612 * C22516 + (C14054 + C14055) * C22509 +
            (C14056 + C14057) * C22515) *
               C49007 +
           (C13502 * C48964 + C13503 * C22516 + (C12941 + C12940) * C22509 +
            (C12939 + C12938) * C22515) *
               C49000) *
              C868 +
          (C46592 * C49000 +
           (C21264 * C22515 + C21265 * C22509 + (C19616 + C19615) * C22516 +
            (C19614 + C19613) * C48964) *
               C49007 +
           ((C21280 + C21279) * C22515 + (C21278 + C21277) * C22509 +
            (C47907 * C11128 + C49139 * C11130 + C47888 * C17895 +
             C48810 * C17896) *
                C22516 +
            (C47907 * C11131 + C49139 * C11134 + C47888 * C17897 +
             C48810 * C17898) *
                C48964) *
               C36778) *
              C869) *
         C48871 * C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C22515 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C22509 +
                    (C7961 + C7962 + C7963) * C22516 +
                    (C7964 + C7965 + C7966) * C48964) *
                       C31302 +
                   ((C15623 + C15624 + C15625) * C22515 +
                    (C15626 + C15627 + C15628) * C22509 +
                    (C8590 + C8589 + C8588) * C22516 +
                    (C8587 + C8586 + C8585) * C48964) *
                       C49004) *
                      C48888 * C48871 * C110 -
                  (((C7762 * C632 + C49181 * C637 + C7761 * C631 +
                     C49213 * C636 + C7760 * C630 + C49226 * C635) *
                        C48964 +
                    (C7762 * C622 + C49181 * C627 + C7761 * C621 +
                     C49213 * C626 + C7760 * C620 + C49226 * C625) *
                        C22516 +
                    (C15640 + C15639 + C15638) * C22509 +
                    (C15637 + C15636 + C15635) * C22515) *
                       C49004 +
                   ((C7978 + C7977 + C7976) * C48964 +
                    (C7975 + C7974 + C7973) * C22516 +
                    (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                     C49213 * C142 + C7760 * C132 + C49226 * C141) *
                        C22509 +
                    (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                     C49213 * C128 + C7760 * C120 + C49226 * C127) *
                        C22515) *
                       C31302) *
                      C48888 * C48871 * C111 +
                  (((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                     C49213 * C129 + C7762 * C123 + C49181 * C130) *
                        C22515 +
                    (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                     C49213 * C143 + C7762 * C135 + C49181 * C144) *
                        C22509 +
                    (C7760 * C235 + C49226 * C246 + C7761 * C234 +
                     C49213 * C245 + C7762 * C233 + C49181 * C244) *
                        C22516 +
                    (C7760 * C241 + C49226 * C253 + C7761 * C240 +
                     C49213 * C252 + C7762 * C239 + C49181 * C251) *
                        C48964) *
                       C31302 +
                   ((C7760 * C343 + C49226 * C354 + C7761 * C342 +
                     C49213 * C353 + C7762 * C341 + C49181 * C352) *
                        C22515 +
                    (C7760 * C349 + C49226 * C361 + C7761 * C348 +
                     C49213 * C360 + C7762 * C347 + C49181 * C359) *
                        C22509 +
                    (C7760 * C621 + C49226 * C626 + C7761 * C622 +
                     C49213 * C627 + C7762 * C623 + C49181 * C628) *
                        C22516 +
                    (C7760 * C631 + C49226 * C636 + C7761 * C632 +
                     C49213 * C637 + C7762 * C633 + C49181 * C638) *
                        C48964) *
                       C49004) *
                      C48888 * C48871 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C23695 +
                    (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                    C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                    C9193 * C23698 + C9194 * C49204) *
                       C31302 +
                   (C10275 * C23695 + C10276 * C49236 + C9558 * C23696 +
                    C9557 * C49232 + C9556 * C23697 + C9555 * C49222 +
                    C9554 * C23698 + C9553 * C49204) *
                       C49004) *
                      C48888 * C48871 * C110 -
                  ((C14291 * C49204 + C14290 * C23698 + C10084 * C49222 +
                    C10083 * C23697 + C10082 * C49232 + C10081 * C23696 +
                    C10280 * C49236 + C10279 * C23695) *
                       C49004 +
                   (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                    C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                    (C9060 * C132 + C48800 * C141) * C49236 +
                    (C9060 * C120 + C48800 * C127) * C23695) *
                       C31302) *
                      C48888 * C48871 * C111 +
                  (((C9060 * C121 + C48800 * C128) * C23695 +
                    (C9060 * C133 + C48800 * C142) * C49236 +
                    (C9060 * C235 + C48800 * C246) * C23696 +
                    (C9060 * C241 + C48800 * C253) * C49232 +
                    (C9060 * C519 + C48800 * C524) * C23697 +
                    (C9060 * C529 + C48800 * C534) * C49222 +
                    (C9060 * C1158 + C48800 * C1165) * C23698 +
                    (C9060 * C1162 + C48800 * C1170) * C49204) *
                       C31302 +
                   ((C9060 * C343 + C48800 * C354) * C23695 +
                    (C9060 * C349 + C48800 * C361) * C49236 +
                    (C9060 * C621 + C48800 * C626) * C23696 +
                    (C9060 * C631 + C48800 * C636) * C49232 +
                    (C9060 * C1392 + C48800 * C1399) * C23697 +
                    (C9060 * C1396 + C48800 * C1404) * C49222 +
                    (C9060 * C1846 + C48800 * C1849) * C23698 +
                    (C9060 * C1852 + C48800 * C1855) * C49204) *
                       C49004) *
                      C48888 * C48871 * C112)) /
                    (p * q * std::sqrt(p + q));
    d2ee[82] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C48888 * C229 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 +
                     (C8585 + C8586 + C8587) * C22509 +
                     (C8588 + C8589 + C8590) * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C48888 * C49189) *
                      C231 +
                  ((((C7973 + C7974 + C7975) * C22515 +
                     (C7976 + C7977 + C7978) * C22509 +
                     (C7979 + C7980 + C7981) * C22516 +
                     (C7982 + C7983 + C7984) * C48964) *
                        C31302 +
                    ((C39880 + C39881 + C39882) * C22515 +
                     (C39883 + C39884 + C39885) * C22509 +
                     (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 +
                      C49213 * C1399 + C7762 * C1395 + C49181 * C1402) *
                         C22516 +
                     (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 +
                      C49213 * C1404 + C7762 * C1403 + C49181 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C48888 * C229) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C10275 * C23695 + C10276 * C49236 + C9558 * C23696 +
                     C9557 * C49232 + C9556 * C23697 + C9555 * C49222 +
                     C9554 * C23698 + C9553 * C49204) *
                        C49004) *
                       C48888 * C229 -
                   ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 +
                     C9554 * C23697 + C9555 * C49232 + C9556 * C23696 +
                     C9557 * C49236 + C9558 * C23695) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C48888 * C49189) *
                      C231 +
                  (((C9197 * C23695 + C9198 * C49236 + C9199 * C23696 +
                     C9200 * C49232 + C9201 * C23697 + C9202 * C49222 +
                     C9203 * C23698 + C9204 * C49204) *
                        C31302 +
                    (C10081 * C23695 + C10082 * C49236 + C10083 * C23696 +
                     C10084 * C49232 + C14290 * C23697 + C14291 * C49222 +
                     (C9060 * C9287 + C48800 * C9290) * C23698 +
                     (C9060 * C9291 + C48800 * C9293) * C49204) *
                        C49004) *
                       C48888 * C49189 -
                   ((C14291 * C49204 + C14290 * C23698 + C10084 * C49222 +
                     C10083 * C23697 + C10082 * C49232 + C10081 * C23696 +
                     C10280 * C49236 + C10279 * C23695) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C48888 * C229) *
                      C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C339 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    ((C8585 + C8586 + C8587) * C48964 +
                     (C8588 + C8589 + C8590) * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C48871 * C231 +
                  ((((C15635 + C15636 + C15637) * C22515 +
                     (C15638 + C15639 + C15640) * C22509 +
                     (C39880 + C39881 + C39882) * C22516 +
                     (C39883 + C39884 + C39885) * C48964) *
                        C31302 +
                    ((C15641 + C15642 + C15643) * C22515 +
                     (C15644 + C15645 + C15646) * C22509 +
                     (C7760 * C2295 + C49226 * C2301 + C7761 * C2296 +
                      C49213 * C2302 + C7762 * C2577 + C49181 * C2578) *
                         C22516 +
                     (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 +
                      C49213 * C2314 + C7762 * C2579 + C49181 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C339) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C339 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C48871 * C231 +
                  (((C41522 + C41523 + C41524 + C41525 + C41526 + C41527 +
                     C41528 + C41529) *
                        C31302 +
                    (C10281 * C23695 + C10282 * C49236 + C10085 * C23696 +
                     C10086 * C49232 + C10087 * C23697 + C10088 * C49222 +
                     (C9060 * C10048 + C48800 * C10049) * C23698 +
                     (C9060 * C10050 + C48800 * C10051) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C339) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 +
                     (C8590 + C8589 + C8588) * C22516 +
                     (C8587 + C8586 + C8585) * C48964) *
                        C49004) *
                       C48888 * C447 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 +
                     (C8585 + C8586 + C8587) * C22509 +
                     (C8588 + C8589 + C8590) * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C48888 * C49189) *
                      C449 +
                  ((((C7973 + C7974 + C7975) * C22515 +
                     (C7976 + C7977 + C7978) * C22509 +
                     (C7979 + C7980 + C7981) * C22516 +
                     (C7982 + C7983 + C7984) * C48964) *
                        C31302 +
                    ((C39880 + C39881 + C39882) * C22515 +
                     (C39883 + C39884 + C39885) * C22509 +
                     (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 +
                      C49213 * C1399 + C7762 * C1395 + C49181 * C1402) *
                         C22516 +
                     (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 +
                      C49213 * C1404 + C7762 * C1403 + C49181 * C1407) *
                         C48964) *
                        C49004) *
                       C48888 * C49189 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C48888 * C447) *
                      C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C48888 * C447 -
                   ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 +
                     C9554 * C23697 + C9555 * C49232 + C9556 * C23696 +
                     C9557 * C49236 + C9558 * C23695) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C48888 * C49189) *
                      C449 +
                  (((C9197 * C23695 + C9198 * C49236 + C9199 * C23696 +
                     C9200 * C49232 + C9201 * C23697 + C9202 * C49222 +
                     C9203 * C23698 + C9204 * C49204) *
                        C31302 +
                    (C10081 * C23695 + C10082 * C49236 + C10083 * C23696 +
                     C10084 * C49232 + C14290 * C23697 + C14291 * C49222 +
                     (C9060 * C9287 + C48800 * C9290) * C23698 +
                     (C9060 * C9291 + C48800 * C9293) * C49204) *
                        C49004) *
                       C48888 * C49189 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C48888 * C447) *
                      C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C22515 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C22509 +
            (C7961 + C7962 + C7963) * C22516 +
            (C7964 + C7965 + C7966) * C48964) *
               C31302 +
           ((C15623 + C15624 + C15625) * C22515 +
            (C15626 + C15627 + C15628) * C22509 +
            (C8590 + C8589 + C8588) * C22516 +
            (C8587 + C8586 + C8585) * C48964) *
               C49004) *
              C48888 * C513 -
          (((C8579 + C8580 + C8581) * C48964 +
            (C8582 + C8583 + C8584) * C22516 +
            (C8585 + C8586 + C8587) * C22509 +
            (C8588 + C8589 + C8590) * C22515) *
               C49004 +
           ((C7972 + C7971 + C7970) * C48964 +
            (C7969 + C7968 + C7967) * C22516 +
            (C7966 + C7965 + C7964) * C22509 +
            (C7963 + C7962 + C7961) * C22515) *
               C31302) *
              C48888 * C514 +
          ((C8401 * C22515 + C8402 * C22509 + (C8408 + C8407 + C8406) * C22516 +
            (C8405 + C8404 + C8403) * C48964) *
               C31302 +
           ((C8584 + C8583 + C8582) * C22515 +
            (C8581 + C8580 + C8579) * C22509 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C22516 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C48964) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C23695 +
            (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
            C9190 * C49232 + C9191 * C23697 + C9192 * C49222 + C9193 * C23698 +
            C9194 * C49204) *
               C31302 +
           (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 + C41520 +
            C41521) *
               C49004) *
              C48888 * C513 -
          ((C9551 * C49204 + C9552 * C23698 + C9553 * C49222 + C9554 * C23697 +
            C9555 * C49232 + C9556 * C23696 + C9557 * C49236 + C9558 * C23695) *
               C49004 +
           (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 + C9193 * C23697 +
            C9192 * C49232 + C9191 * C23696 + C9190 * C49236 + C9189 * C23695) *
               C31302) *
              C48888 * C514 +
          ((C9191 * C23695 + C9192 * C49236 + C9193 * C23696 + C9194 * C49232 +
            C9195 * C23697 + C9196 * C49222 + C9448 * C23698 + C9447 * C49204) *
               C31302 +
           (C9556 * C23695 + C9555 * C49236 + C9554 * C23696 + C9553 * C49232 +
            C9552 * C23697 + C9551 * C49222 +
            (C9060 * C9530 + C48800 * C9531) * C23698 +
            (C9060 * C9532 + C48800 * C9533) * C49204) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C339 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C447 +
                  (((C40618 * C22515 + C40619 * C22509 +
                     (C8584 + C8583 + C8582) * C22516 +
                     (C8581 + C8580 + C8579) * C48964) *
                        C31302 +
                    ((C16061 + C16062 + C16063) * C22515 +
                     (C16064 + C16065 + C16066) * C22509 +
                     (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 +
                      C49213 * C2307 + C7762 * C2299 + C49181 * C2308) *
                         C22516 +
                     (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 +
                      C49213 * C2316 + C7762 * C2311 + C49181 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 + C40620 * C22509 +
                     C40621 * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C339) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C339 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C447 +
                  (((C41888 + C41889 + C41890 + C41891 + C41892 + C41893 +
                     C41894 + C41895) *
                        C31302 +
                    (C10077 * C23695 + C10078 * C49236 + C10079 * C23696 +
                     C10080 * C49232 + C10552 * C23697 + C10551 * C49222 +
                     (C9060 * C9785 + C48800 * C9788) * C23698 +
                     (C9060 * C9789 + C48800 * C9791) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41895 + C41894 + C41893 + C41892 + C41891 + C41890 +
                     C41889 + C41888) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C339) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C721 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C48871 * C449 +
                  ((((C15635 + C15636 + C15637) * C22515 +
                     (C15638 + C15639 + C15640) * C22509 +
                     (C39880 + C39881 + C39882) * C22516 +
                     (C39883 + C39884 + C39885) * C48964) *
                        C31302 +
                    ((C15641 + C15642 + C15643) * C22515 +
                     (C15644 + C15645 + C15646) * C22509 +
                     (C7760 * C2295 + C49226 * C2301 + C7761 * C2296 +
                      C49213 * C2302 + C7762 * C2577 + C49181 * C2578) *
                         C22516 +
                     (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 +
                      C49213 * C2314 + C7762 * C2579 + C49181 * C2580) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C39885 + C39884 + C39883) * C48964 +
                     (C39882 + C39881 + C39880) * C22516 +
                     (C15640 + C15639 + C15638) * C22509 +
                     (C15637 + C15636 + C15635) * C22515) *
                        C49004 +
                    ((C7978 + C7977 + C7976) * C48964 +
                     (C7975 + C7974 + C7973) * C22516 +
                     (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C22509 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C22515) *
                        C31302) *
                       C721) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C721 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C48871 * C449 +
                  (((C41522 + C41523 + C41524 + C41525 + C41526 + C41527 +
                     C41528 + C41529) *
                        C31302 +
                    (C10281 * C23695 + C10282 * C49236 + C10085 * C23696 +
                     C10086 * C49232 + C10087 * C23697 + C10088 * C49222 +
                     (C9060 * C10048 + C48800 * C10049) * C23698 +
                     (C9060 * C10050 + C48800 * C10051) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41529 + C41528 + C41527 + C41526 + C41525 + C41524 +
                     C41523 + C41522) *
                        C49004 +
                    (C9202 * C49204 + C9201 * C23698 + C9200 * C49222 +
                     C9199 * C23697 + C9198 * C49232 + C9197 * C23696 +
                     (C9060 * C132 + C48800 * C141) * C49236 +
                     (C9060 * C120 + C48800 * C127) * C23695) *
                        C31302) *
                       C721) *
                      C48871 * C49187)) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C22515 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C22509 +
                     (C7961 + C7962 + C7963) * C22516 +
                     (C7964 + C7965 + C7966) * C48964) *
                        C31302 +
                    ((C15623 + C15624 + C15625) * C22515 +
                     (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                     C40619 * C48964) *
                        C49004) *
                       C721 -
                   (((C16066 + C16065 + C16064) * C48964 +
                     (C16063 + C16062 + C16061) * C22516 +
                     (C15634 + C15633 + C15632) * C22509 +
                     (C15631 + C15630 + C15629) * C22515) *
                        C49004 +
                    (C40620 * C48964 + C40621 * C22516 +
                     (C15628 + C15627 + C15626) * C22509 +
                     (C15625 + C15624 + C15623) * C22515) *
                        C31302) *
                       C49191) *
                      C229 +
                  (((C40618 * C22515 + C40619 * C22509 +
                     (C8584 + C8583 + C8582) * C22516 +
                     (C8581 + C8580 + C8579) * C48964) *
                        C31302 +
                    ((C16061 + C16062 + C16063) * C22515 +
                     (C16064 + C16065 + C16066) * C22509 +
                     (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 +
                      C49213 * C2307 + C7762 * C2299 + C49181 * C2308) *
                         C22516 +
                     (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 +
                      C49213 * C2316 + C7762 * C2311 + C49181 * C2317) *
                         C48964) *
                        C49004) *
                       C49191 -
                   (((C8579 + C8580 + C8581) * C48964 +
                     (C8582 + C8583 + C8584) * C22516 + C40620 * C22509 +
                     C40621 * C22515) *
                        C49004 +
                    ((C7972 + C7971 + C7970) * C48964 +
                     (C7969 + C7968 + C7967) * C22516 +
                     (C7966 + C7965 + C7964) * C22509 +
                     (C7963 + C7962 + C7961) * C22515) *
                        C31302) *
                       C721) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48800 * C126) * C23695 +
                     (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                     C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                     C9193 * C23698 + C9194 * C49204) *
                        C31302 +
                    (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                     C41520 + C41521) *
                        C49004) *
                       C721 -
                   ((C10551 * C49204 + C10552 * C23698 + C10080 * C49222 +
                     C10079 * C23697 + C10078 * C49232 + C10077 * C23696 +
                     C10278 * C49236 + C10277 * C23695) *
                        C49004 +
                    (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                     C41515 + C41514) *
                        C31302) *
                       C49191) *
                      C229 +
                  (((C41888 + C41889 + C41890 + C41891 + C41892 + C41893 +
                     C41894 + C41895) *
                        C31302 +
                    (C10077 * C23695 + C10078 * C49236 + C10079 * C23696 +
                     C10080 * C49232 + C10552 * C23697 + C10551 * C49222 +
                     (C9060 * C9785 + C48800 * C9788) * C23698 +
                     (C9060 * C9789 + C48800 * C9791) * C49204) *
                        C49004) *
                       C49191 -
                   ((C41895 + C41894 + C41893 + C41892 + C41891 + C41890 +
                     C41889 + C41888) *
                        C49004 +
                    (C9196 * C49204 + C9195 * C23698 + C9194 * C49222 +
                     C9193 * C23697 + C9192 * C49232 + C9191 * C23696 +
                     C9190 * C49236 + C9189 * C23695) *
                        C31302) *
                       C721) *
                      C49189) *
                 C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C22515 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C22509 +
                    (C7961 + C7962 + C7963) * C22516 +
                    (C7964 + C7965 + C7966) * C48964) *
                       C31302 +
                   ((C15623 + C15624 + C15625) * C22515 +
                    (C15626 + C15627 + C15628) * C22509 + C40618 * C22516 +
                    C40619 * C48964) *
                       C49004) *
                      C867 -
                  (((C16066 + C16065 + C16064) * C48964 +
                    (C16063 + C16062 + C16061) * C22516 +
                    (C15634 + C15633 + C15632) * C22509 +
                    (C15631 + C15630 + C15629) * C22515) *
                       C49004 +
                   (C40620 * C48964 + C40621 * C22516 +
                    (C15628 + C15627 + C15626) * C22509 +
                    (C15625 + C15624 + C15623) * C22515) *
                       C31302) *
                      C868 +
                  ((C16483 * C22515 + C16484 * C22509 +
                    (C16061 + C16062 + C16063) * C22516 +
                    (C16064 + C16065 + C16066) * C48964) *
                       C31302 +
                   ((C16490 + C16489 + C16488) * C22515 +
                    (C16487 + C16486 + C16485) * C22509 +
                    (C7760 * C3217 + C49226 * C3220 + C7761 * C3218 +
                     C49213 * C3221 + C7762 * C3219 + C49181 * C3222) *
                        C22516 +
                    (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 +
                     C49213 * C3227 + C7762 * C3225 + C49181 * C3228) *
                        C48964) *
                       C49004) *
                      C869) *
                 C48871 * C48837) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48800 * C126) * C23695 +
                    (C9060 * C131 + C48800 * C140) * C49236 + C9189 * C23696 +
                    C9190 * C49232 + C9191 * C23697 + C9192 * C49222 +
                    C9193 * C23698 + C9194 * C49204) *
                       C31302 +
                   (C41514 + C41515 + C41516 + C41517 + C41518 + C41519 +
                    C41520 + C41521) *
                       C49004) *
                      C867 -
                  ((C42254 + C42255 + C42256 + C42257 + C42258 + C42259 +
                    C42260 + C42261) *
                       C49004 +
                   (C41521 + C41520 + C41519 + C41518 + C41517 + C41516 +
                    C41515 + C41514) *
                       C31302) *
                      C868 +
                  ((C42261 + C42260 + C42259 + C42258 + C42257 + C42256 +
                    C42255 + C42254) *
                       C31302 +
                   (C11148 * C23695 + C11147 * C49236 + C10726 * C23696 +
                    C10725 * C49232 + C10724 * C23697 + C10723 * C49222 +
                    (C9060 * C10698 + C48800 * C10699) * C23698 +
                    (C9060 * C10700 + C48800 * C10701) * C49204) *
                       C49004) *
                      C869) *
                 C48871 * C48837) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C47907 * C237 + C49139 * C248 + C47888 * C236 + C48810 * C247) *
               C11260 +
           (C47907 * C243 + C49139 * C255 + C47888 * C242 + C48810 * C254) *
               C11254 +
           (C47907 * C517 + C49139 * C522 + C47888 * C518 + C48810 * C523) *
               C11261 +
           (C47907 * C527 + C49139 * C532 + C47888 * C528 + C48810 * C533) *
               C11255 +
           (C47907 * C1160 + C49139 * C1167 + C47888 * C1159 + C48810 * C1166) *
               C11262 +
           (C47907 * C1164 + C49139 * C1172 + C47888 * C1163 + C48810 * C1171) *
               C49204) *
              C48917 * C48888 * C48871 * C110 -
          ((C47888 * C1162 + C48810 * C1170 + C47907 * C1163 + C49139 * C1171) *
               C49204 +
           (C47888 * C1158 + C48810 * C1165 + C47907 * C1159 + C49139 * C1166) *
               C11262 +
           (C47888 * C529 + C48810 * C534 + C47907 * C528 + C49139 * C533) *
               C11255 +
           (C47888 * C519 + C48810 * C524 + C47907 * C518 + C49139 * C523) *
               C11261 +
           (C47888 * C241 + C48810 * C253 + C47907 * C242 + C49139 * C254) *
               C11254 +
           (C47888 * C235 + C48810 * C246 + C47907 * C236 + C49139 * C247) *
               C11260 +
           (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
               C11253 +
           (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
               C11259) *
              C48917 * C48888 * C48871 * C111 +
          ((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
               C11259 +
           (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
               C11253 +
           (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
               C11260 +
           (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
               C11254 +
           (C47907 * C519 + C49139 * C524 + C47888 * C520 + C48810 * C525) *
               C11261 +
           (C47907 * C529 + C49139 * C534 + C47888 * C530 + C48810 * C535) *
               C11255 +
           (C47907 * C1158 + C49139 * C1165 + C47888 * C1161 + C48810 * C1168) *
               C11262 +
           (C47907 * C1162 + C49139 * C1170 + C47888 * C1169 + C48810 * C1173) *
               C49204) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3790 * C237 + C3784 * C248 + C3791 * C236 + C3785 * C247 +
            C3792 * C235 + C3786 * C246 + C3793 * C234 + C49198 * C245) *
               C3795 +
           (C3790 * C243 + C3784 * C255 + C3791 * C242 + C3785 * C254 +
            C3792 * C241 + C3786 * C253 + C3793 * C240 + C49198 * C252) *
               C48964) *
              C48917 * C48888 * C48871 * C110 -
          ((C3793 * C239 + C49198 * C251 + C3792 * C240 + C3786 * C252 +
            C3791 * C241 + C3785 * C253 + C3790 * C242 + C3784 * C254) *
               C48964 +
           (C3793 * C233 + C49198 * C244 + C3792 * C234 + C3786 * C245 +
            C3791 * C235 + C3785 * C246 + C3790 * C236 + C3784 * C247) *
               C3795 +
           (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
            C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
               C49161 +
           (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
            C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
               C3794) *
              C48917 * C48888 * C48871 * C111 +
          ((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
            C3792 * C123 + C3786 * C130 + C3793 * C124 + C49198 * C137) *
               C3794 +
           (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
            C3792 * C135 + C3786 * C144 + C3793 * C136 + C49198 * C145) *
               C49161 +
           (C3790 * C235 + C3784 * C246 + C3791 * C234 + C3785 * C245 +
            C3792 * C233 + C3786 * C244 + C3793 * C238 + C49198 * C249) *
               C3795 +
           (C3790 * C241 + C3784 * C253 + C3791 * C240 + C3785 * C252 +
            C3792 * C239 + C3786 * C251 + C3793 * C250 + C49198 * C256) *
               C48964) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C3794 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C49161 +
            (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
               C15279 +
           ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
            C13482 * C3795 + C13483 * C48964) *
               C15280 +
           ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
            (C13511 + C13510) * C3795 + (C13509 + C13508) * C48964) *
               C49197) *
              C48888 * C48871 * C110 -
          (((C47888 * C2305 + C48810 * C2314 + C47907 * C2304 +
             C49139 * C2313) *
                C48964 +
            (C47888 * C2296 + C48810 * C2302 + C47907 * C2295 +
             C49139 * C2301) *
                C3795 +
            (C47888 * C882 + C48810 * C887 + C47907 * C881 + C49139 * C886) *
                C49161 +
            (C47888 * C872 + C48810 * C877 + C47907 * C871 + C49139 * C876) *
                C3794) *
               C49197 +
           ((C12723 + C12722) * C48964 + (C12721 + C12720) * C3795 +
            (C12945 + C12944) * C49161 + (C12943 + C12942) * C3794) *
               C15280 +
           ((C11457 + C11456) * C48964 + (C11455 + C11454) * C3795 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C49161 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C3794) *
               C15279) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C3794 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C49161 +
            (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
                C3795 +
            (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
                C48964) *
               C15279 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C3794 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C49161 +
            (C47907 * C621 + C49139 * C626 + C47888 * C622 + C48810 * C627) *
                C3795 +
            (C47907 * C631 + C49139 * C636 + C47888 * C632 + C48810 * C637) *
                C48964) *
               C15280 +
           ((C47907 * C872 + C49139 * C877 + C47888 * C873 + C48810 * C878) *
                C3794 +
            (C47907 * C882 + C49139 * C887 + C47888 * C883 + C48810 * C888) *
                C49161 +
            (C47907 * C2296 + C49139 * C2302 + C47888 * C2577 +
             C48810 * C2578) *
                C3795 +
            (C47907 * C2305 + C49139 * C2314 + C47888 * C2579 +
             C48810 * C2580) *
                C48964) *
               C49197) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C48888 * C229 -
           ((C47888 * C1671 + C48810 * C1674 + C47907 * C1670 +
             C49139 * C1673) *
                C49204 +
            (C47888 * C1665 + C48810 * C1668 + C47907 * C1664 +
             C49139 * C1667) *
                C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C11454 + C11455) * C11259 + (C11456 + C11457) * C11253 +
            (C11458 + C11459) * C11260 + (C11460 + C11461) * C11254 +
            (C11462 + C11463) * C11261 + (C11464 + C11465) * C11255 +
            (C47907 * C1665 + C49139 * C1668 + C47888 * C1666 +
             C48810 * C1669) *
                C11262 +
            (C47907 * C1671 + C49139 * C1674 + C47888 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C48888 * C229 -
           ((C3793 * C530 + C49198 * C535 + C3792 * C529 + C3786 * C534 +
             C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                C48964 +
            (C3793 * C520 + C49198 * C525 + C3792 * C519 + C3786 * C524 +
             C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C3967 + C3968 + C3969 + C3970) * C3794 +
            (C3971 + C3972 + C3973 + C3974) * C49161 +
            (C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
             C3792 * C520 + C3786 * C525 + C3793 * C521 + C49198 * C526) *
                C3795 +
            (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
             C3792 * C530 + C3786 * C535 + C3793 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             (C13511 + C13510) * C3795 + (C13509 + C13508) * C48964) *
                C49197) *
               C48888 * C229 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C3795 +
             (C13508 + C13509) * C49161 + (C13510 + C13511) * C3794) *
                C49197 +
            (C13500 * C48964 + C13501 * C3795 + C13502 * C49161 +
             C13503 * C3794) *
                C15280 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C3795 +
             (C11445 + C11444) * C49161 + (C11443 + C11442) * C3794) *
                C15279) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C3794 + (C11456 + C11457) * C49161 +
             (C11458 + C11459) * C3795 + (C11460 + C11461) * C48964) *
                C15279 +
            ((C12720 + C12721) * C3794 + (C12722 + C12723) * C49161 +
             (C12724 + C12725) * C3795 + (C12726 + C12727) * C48964) *
                C15280 +
            ((C18857 + C18858) * C3794 + (C18859 + C18860) * C49161 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C3795 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C49197) *
               C48888 * C49189 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C3795 +
             (C47888 * C882 + C48810 * C887 + C47907 * C881 + C49139 * C886) *
                 C49161 +
             (C47888 * C872 + C48810 * C877 + C47907 * C871 + C49139 * C876) *
                 C3794) *
                C49197 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C3795 +
             (C12945 + C12944) * C49161 + (C12943 + C12942) * C3794) *
                C15280 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C3795 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C49161 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C3794) *
                C15279) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C339 -
           ((C47888 * C1851 + C48810 * C1854 + C47907 * C1850 +
             C49139 * C1853) *
                C49204 +
            (C47888 * C1845 + C48810 * C1848 + C47907 * C1844 +
             C49139 * C1847) *
                C11262 +
            (C47888 * C1397 + C48810 * C1405 + C47907 * C1398 +
             C49139 * C1406) *
                C11255 +
            (C47888 * C1393 + C48810 * C1400 + C47907 * C1394 +
             C49139 * C1401) *
                C11261 +
            (C47888 * C630 + C48810 * C635 + C47907 * C629 + C49139 * C634) *
                C11254 +
            (C47888 * C620 + C48810 * C625 + C47907 * C619 + C49139 * C624) *
                C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C47907 * C344 + C49139 * C355 + C47888 * C343 + C48810 * C354) *
                C11259 +
            (C47907 * C350 + C49139 * C362 + C47888 * C349 + C48810 * C361) *
                C11253 +
            (C47907 * C620 + C49139 * C625 + C47888 * C621 + C48810 * C626) *
                C11260 +
            (C47907 * C630 + C49139 * C635 + C47888 * C631 + C48810 * C636) *
                C11254 +
            (C47907 * C1393 + C49139 * C1400 + C47888 * C1392 +
             C48810 * C1399) *
                C11261 +
            (C47907 * C1397 + C49139 * C1405 + C47888 * C1396 +
             C48810 * C1404) *
                C11255 +
            (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
             C48810 * C1849) *
                C11262 +
            (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C339 -
           ((C3793 * C632 + C49198 * C637 + C3792 * C631 + C3786 * C636 +
             C3791 * C630 + C3785 * C635 + C3790 * C629 + C3784 * C634) *
                C48964 +
            (C3793 * C622 + C49198 * C627 + C3792 * C621 + C3786 * C626 +
             C3791 * C620 + C3785 * C625 + C3790 * C619 + C3784 * C624) *
                C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
             C3792 * C342 + C3786 * C353 + C3793 * C341 + C49198 * C352) *
                C3794 +
            (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
             C3792 * C348 + C3786 * C360 + C3793 * C347 + C49198 * C359) *
                C49161 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                C3795 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             (C13511 + C13510) * C3795 + (C13509 + C13508) * C48964) *
                C49197) *
               C339 -
           (((C47888 * C3224 + C48810 * C3227 + C47907 * C3223 +
              C49139 * C3226) *
                 C48964 +
             (C47888 * C3218 + C48810 * C3221 + C47907 * C3217 +
              C49139 * C3220) *
                 C3795 +
             (C47888 * C2732 + C48810 * C2740 + C47907 * C2733 +
              C49139 * C2741) *
                 C49161 +
             (C47888 * C2728 + C48810 * C2735 + C47907 * C2729 +
              C49139 * C2736) *
                 C3794) *
                C49197 +
            ((C13508 + C13509) * C48964 + (C13510 + C13511) * C3795 +
             (C14054 + C14055) * C49161 + (C14056 + C14057) * C3794) *
                C15280 +
            (C13502 * C48964 + C13503 * C3795 + (C12941 + C12940) * C49161 +
             (C12939 + C12938) * C3794) *
                C15279) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C3794 + (C12944 + C12945) * C49161 +
             (C12720 + C12721) * C3795 + (C12722 + C12723) * C48964) *
                C15279 +
            ((C19063 + C19064) * C3794 + (C19065 + C19066) * C49161 +
             (C18857 + C18858) * C3795 + (C18859 + C18860) * C48964) *
                C15280 +
            ((C47907 * C2728 + C49139 * C2735 + C47888 * C2727 +
              C48810 * C2734) *
                 C3794 +
             (C47907 * C2732 + C49139 * C2740 + C47888 * C2731 +
              C48810 * C2739) *
                 C49161 +
             (C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C3795 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C49197) *
               C49191 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C3795 +
             (C19066 + C19065) * C49161 + (C19064 + C19063) * C3794) *
                C49197 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C3795 +
             (C12945 + C12944) * C49161 + (C12943 + C12942) * C3794) *
                C15280 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C3795 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C49161 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C3794) *
                C15279) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C48888 * C447 -
           ((C47888 * C1671 + C48810 * C1674 + C47907 * C1670 +
             C49139 * C1673) *
                C49204 +
            (C47888 * C1665 + C48810 * C1668 + C47907 * C1664 +
             C49139 * C1667) *
                C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C11454 + C11455) * C11259 + (C11456 + C11457) * C11253 +
            (C11458 + C11459) * C11260 + (C11460 + C11461) * C11254 +
            (C11462 + C11463) * C11261 + (C11464 + C11465) * C11255 +
            (C47907 * C1665 + C49139 * C1668 + C47888 * C1666 +
             C48810 * C1669) *
                C11262 +
            (C47907 * C1671 + C49139 * C1674 + C47888 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C48888 * C447 -
           ((C3793 * C530 + C49198 * C535 + C3792 * C529 + C3786 * C534 +
             C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                C48964 +
            (C3793 * C520 + C49198 * C525 + C3792 * C519 + C3786 * C524 +
             C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C3967 + C3968 + C3969 + C3970) * C3794 +
            (C3971 + C3972 + C3973 + C3974) * C49161 +
            (C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
             C3792 * C520 + C3786 * C525 + C3793 * C521 + C49198 * C526) *
                C3795 +
            (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
             C3792 * C530 + C3786 * C535 + C3793 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             (C13511 + C13510) * C3795 + (C13509 + C13508) * C48964) *
                C49197) *
               C48888 * C447 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C3795 +
             (C13508 + C13509) * C49161 + (C13510 + C13511) * C3794) *
                C49197 +
            (C13500 * C48964 + C13501 * C3795 + C13502 * C49161 +
             C13503 * C3794) *
                C15280 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C3795 +
             (C11445 + C11444) * C49161 + (C11443 + C11442) * C3794) *
                C15279) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C3794 + (C11456 + C11457) * C49161 +
             (C11458 + C11459) * C3795 + (C11460 + C11461) * C48964) *
                C15279 +
            ((C12720 + C12721) * C3794 + (C12722 + C12723) * C49161 +
             (C12724 + C12725) * C3795 + (C12726 + C12727) * C48964) *
                C15280 +
            ((C18857 + C18858) * C3794 + (C18859 + C18860) * C49161 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C3795 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C49197) *
               C48888 * C49189 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C3795 +
             (C19066 + C19065) * C49161 + (C19064 + C19063) * C3794) *
                C49197 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C3795 +
             (C12945 + C12944) * C49161 + (C12943 + C12942) * C3794) *
                C15280 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C3795 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C49161 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C3794) *
                C15279) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
           C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
           C11827 * C49204) *
              C48917 * C48888 * C513 -
          ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
           (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
           (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
           (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
              C48917 * C48888 * C514 +
          (C11824 * C11259 + C11825 * C11253 + C11826 * C11260 +
           C11827 * C11254 + (C11839 + C11838) * C11261 +
           (C11837 + C11836) * C11255 +
           (C47907 * C9148 + C49139 * C9151 + C47888 * C9149 + C48810 * C9152) *
               C11262 +
           (C47907 * C9150 + C49139 * C9154 + C47888 * C9153 + C48810 * C9155) *
               C49204) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3959 + C3960 + C3961 + C3962) * C3795 +
           (C3963 + C3964 + C3965 + C3966) * C48964) *
              C48917 * C48888 * C513 -
          ((C4349 + C4350 + C4351 + C4352) * C48964 +
           (C4353 + C4354 + C4355 + C4356) * C3795 +
           (C3966 + C3965 + C3964 + C3963) * C49161 +
           (C3962 + C3961 + C3960 + C3959) * C3794) *
              C48917 * C48888 * C514 +
          ((C4356 + C4355 + C4354 + C4353) * C3794 +
           (C4352 + C4351 + C4350 + C4349) * C49161 +
           (C3790 * C1160 + C3784 * C1167 + C3791 * C1159 + C3785 * C1166 +
            C3792 * C1158 + C3786 * C1165 + C3793 * C1161 + C49198 * C1168) *
               C3795 +
           (C3790 * C1164 + C3784 * C1172 + C3791 * C1163 + C3785 * C1171 +
            C3792 * C1162 + C3786 * C1170 + C3793 * C1169 + C49198 * C1173) *
               C48964) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C3794 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C49161 +
            (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
               C15279 +
           ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
            C13482 * C3795 + C13483 * C48964) *
               C15280 +
           ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
            (C13511 + C13510) * C3795 + (C13509 + C13508) * C48964) *
               C49197) *
              C48888 * C513 -
          (((C13504 + C13505) * C48964 + (C13506 + C13507) * C3795 +
            (C13508 + C13509) * C49161 + (C13510 + C13511) * C3794) *
               C49197 +
           (C13500 * C48964 + C13501 * C3795 + C13502 * C49161 +
            C13503 * C3794) *
               C15280 +
           ((C11449 + C11448) * C48964 + (C11447 + C11446) * C3795 +
            (C11445 + C11444) * C49161 + (C11443 + C11442) * C3794) *
               C15279) *
              C48888 * C514 +
          ((C11824 * C3794 + C11825 * C49161 + C11826 * C3795 +
            C11827 * C48964) *
               C15279 +
           (C13286 * C3794 + C13287 * C49161 + (C11997 + C11996) * C3795 +
            (C11995 + C11994) * C48964) *
               C15280 +
           ((C13507 + C13506) * C3794 + (C13505 + C13504) * C49161 +
            (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
             C48810 * C10049) *
                C3795 +
            (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
             C48810 * C10051) *
                C48964) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C339 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C447 +
          (((C12005 + C12004) * C11259 + (C12003 + C12002) * C11253 +
            (C12001 + C12000) * C11260 + (C11999 + C11998) * C11254 +
            (C11997 + C11996) * C11261 + (C11995 + C11994) * C11255 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C11262 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C339 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C447 +
          (((C4510 + C4509 + C4508 + C4507) * C3794 +
            (C4506 + C4505 + C4504 + C4503) * C49161 +
            (C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C3795 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C4349 + C4350 + C4351 + C4352) * C48964 +
            (C4353 + C4354 + C4355 + C4356) * C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             C19601 * C3795 + C19602 * C48964) *
                C49197) *
               C339 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C3795 +
             (C47888 * C2732 + C48810 * C2740 + C47907 * C2733 +
              C49139 * C2741) *
                 C49161 +
             (C47888 * C2728 + C48810 * C2735 + C47907 * C2729 +
              C49139 * C2736) *
                 C3794) *
                C49197 +
            (C19611 * C48964 + C19612 * C3795 + (C14054 + C14055) * C49161 +
             (C14056 + C14057) * C3794) *
                C15280 +
            (C13502 * C48964 + C13503 * C3795 + (C12941 + C12940) * C49161 +
             (C12939 + C12938) * C3794) *
                C15279) *
               C49191) *
              C447 +
          (((C13482 * C3794 + C13483 * C49161 + C13286 * C3795 +
             C13287 * C48964) *
                C15279 +
            (C19601 * C3794 + C19602 * C49161 + (C13507 + C13506) * C3795 +
             (C13505 + C13504) * C48964) *
                C15280 +
            ((C19616 + C19615) * C3794 + (C19614 + C19613) * C49161 +
             (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
              C48810 * C10238) *
                 C3795 +
             (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C49197) *
               C49191 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C3795 +
             C19611 * C49161 + C19612 * C3794) *
                C49197 +
            (C13500 * C48964 + C13501 * C3795 + C13502 * C49161 +
             C13503 * C3794) *
                C15280 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C3795 +
             (C11445 + C11444) * C49161 + (C11443 + C11442) * C3794) *
                C15279) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C721 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C47907 * C344 + C49139 * C355 + C47888 * C343 + C48810 * C354) *
                C11259 +
            (C47907 * C350 + C49139 * C362 + C47888 * C349 + C48810 * C361) *
                C11253 +
            (C47907 * C620 + C49139 * C625 + C47888 * C621 + C48810 * C626) *
                C11260 +
            (C47907 * C630 + C49139 * C635 + C47888 * C631 + C48810 * C636) *
                C11254 +
            (C47907 * C1393 + C49139 * C1400 + C47888 * C1392 +
             C48810 * C1399) *
                C11261 +
            (C47907 * C1397 + C49139 * C1405 + C47888 * C1396 +
             C48810 * C1404) *
                C11255 +
            (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
             C48810 * C1849) *
                C11262 +
            (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C721 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
             C3792 * C342 + C3786 * C353 + C3793 * C341 + C49198 * C352) *
                C3794 +
            (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
             C3792 * C348 + C3786 * C360 + C3793 * C347 + C49198 * C359) *
                C49161 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                C3795 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             C19601 * C3795 + C19602 * C48964) *
                C49197) *
               C721 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C3795 +
             (C47888 * C2732 + C48810 * C2740 + C47907 * C2733 +
              C49139 * C2741) *
                 C49161 +
             (C47888 * C2728 + C48810 * C2735 + C47907 * C2729 +
              C49139 * C2736) *
                 C3794) *
                C49197 +
            (C19611 * C48964 + C19612 * C3795 + (C14054 + C14055) * C49161 +
             (C14056 + C14057) * C3794) *
                C15280 +
            (C13502 * C48964 + C13503 * C3795 + (C12941 + C12940) * C49161 +
             (C12939 + C12938) * C3794) *
                C15279) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C3794 + (C12944 + C12945) * C49161 +
             (C12720 + C12721) * C3795 + (C12722 + C12723) * C48964) *
                C15279 +
            ((C19063 + C19064) * C3794 + (C19065 + C19066) * C49161 +
             (C18857 + C18858) * C3795 + (C18859 + C18860) * C48964) *
                C15280 +
            ((C47907 * C2728 + C49139 * C2735 + C47888 * C2727 +
              C48810 * C2734) *
                 C3794 +
             (C47907 * C2732 + C49139 * C2740 + C47888 * C2731 +
              C48810 * C2739) *
                 C49161 +
             (C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C3795 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C49197) *
               C49191 -
           (((C18860 + C18859) * C48964 + (C18858 + C18857) * C3795 +
             (C19066 + C19065) * C49161 + (C19064 + C19063) * C3794) *
                C49197 +
            ((C12723 + C12722) * C48964 + (C12721 + C12720) * C3795 +
             (C12945 + C12944) * C49161 + (C12943 + C12942) * C3794) *
                C15280 +
            ((C11457 + C11456) * C48964 + (C11455 + C11454) * C3795 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C49161 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C3794) *
                C15279) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C721 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C229 +
          (((C12005 + C12004) * C11259 + (C12003 + C12002) * C11253 +
            (C12001 + C12000) * C11260 + (C11999 + C11998) * C11254 +
            (C11997 + C11996) * C11261 + (C11995 + C11994) * C11255 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C11262 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C721 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C229 +
          (((C4510 + C4509 + C4508 + C4507) * C3794 +
            (C4506 + C4505 + C4504 + C4503) * C49161 +
            (C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C3795 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C4349 + C4350 + C4351 + C4352) * C48964 +
            (C4353 + C4354 + C4355 + C4356) * C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C3794 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C49161 +
             (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
                C15279 +
            ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
             C13482 * C3795 + C13483 * C48964) *
                C15280 +
            ((C14057 + C14056) * C3794 + (C14055 + C14054) * C49161 +
             C19601 * C3795 + C19602 * C48964) *
                C49197) *
               C721 -
           (((C19613 + C19614) * C48964 + (C19615 + C19616) * C3795 +
             (C47888 * C2732 + C48810 * C2740 + C47907 * C2733 +
              C49139 * C2741) *
                 C49161 +
             (C47888 * C2728 + C48810 * C2735 + C47907 * C2729 +
              C49139 * C2736) *
                 C3794) *
                C49197 +
            (C19611 * C48964 + C19612 * C3795 + (C14054 + C14055) * C49161 +
             (C14056 + C14057) * C3794) *
                C15280 +
            (C13502 * C48964 + C13503 * C3795 + (C12941 + C12940) * C49161 +
             (C12939 + C12938) * C3794) *
                C15279) *
               C49191) *
              C229 +
          (((C13482 * C3794 + C13483 * C49161 + C13286 * C3795 +
             C13287 * C48964) *
                C15279 +
            (C19601 * C3794 + C19602 * C49161 + (C13507 + C13506) * C3795 +
             (C13505 + C13504) * C48964) *
                C15280 +
            ((C19616 + C19615) * C3794 + (C19614 + C19613) * C49161 +
             (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
              C48810 * C10238) *
                 C3795 +
             (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C49197) *
               C49191 -
           (((C13504 + C13505) * C48964 + (C13506 + C13507) * C3795 +
             C19611 * C49161 + C19612 * C3794) *
                C49197 +
            (C13500 * C48964 + C13501 * C3795 + C13502 * C49161 +
             C13503 * C3794) *
                C15280 +
            ((C11449 + C11448) * C48964 + (C11447 + C11446) * C3795 +
             (C11445 + C11444) * C49161 + (C11443 + C11442) * C3794) *
                C15279) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
           C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
           C11827 * C49204) *
              C48917 * C867 -
          ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
           (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
           (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
           (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
               C11253 +
           (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
               C11259) *
              C48917 * C868 +
          ((C47907 * C870 + C49139 * C875 + C47888 * C871 + C48810 * C876) *
               C11259 +
           (C47907 * C880 + C49139 * C885 + C47888 * C881 + C48810 * C886) *
               C11253 +
           (C47907 * C2294 + C49139 * C2300 + C47888 * C2295 + C48810 * C2301) *
               C11260 +
           (C47907 * C2303 + C49139 * C2312 + C47888 * C2304 + C48810 * C2313) *
               C11254 +
           (C47907 * C2297 + C49139 * C2306 + C47888 * C2298 + C48810 * C2307) *
               C11261 +
           (C47907 * C2309 + C49139 * C2315 + C47888 * C2310 + C48810 * C2316) *
               C11255 +
           (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
            C48810 * C10049) *
               C11262 +
           (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
            C48810 * C10051) *
               C49204) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3959 + C3960 + C3961 + C3962) * C3795 +
           (C3963 + C3964 + C3965 + C3966) * C48964) *
              C48917 * C867 -
          ((C4503 + C4504 + C4505 + C4506) * C48964 +
           (C4507 + C4508 + C4509 + C4510) * C3795 +
           (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
            C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
               C49161 +
           (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
            C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
               C3794) *
              C48917 * C868 +
          ((C3790 * C870 + C3784 * C875 + C3791 * C871 + C3785 * C876 +
            C3792 * C872 + C3786 * C877 + C3793 * C873 + C49198 * C878) *
               C3794 +
           (C3790 * C880 + C3784 * C885 + C3791 * C881 + C3785 * C886 +
            C3792 * C882 + C3786 * C887 + C3793 * C883 + C49198 * C888) *
               C49161 +
           (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
            C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
               C3795 +
           (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
            C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
               C48964) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C3794 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C49161 +
            (C11442 + C11443) * C3795 + (C11444 + C11445) * C48964) *
               C15279 +
           ((C12938 + C12939) * C3794 + (C12940 + C12941) * C49161 +
            C13482 * C3795 + C13483 * C48964) *
               C15280 +
           C20171 * C49197) *
              C867 -
          (((C19613 + C19614) * C48964 + (C19615 + C19616) * C3795 +
            (C20165 + C20166) * C49161 + (C20167 + C20168) * C3794) *
               C49197 +
           (C19611 * C48964 + C19612 * C3795 + (C14054 + C14055) * C49161 +
            (C14056 + C14057) * C3794) *
               C15280 +
           (C13502 * C48964 + C13503 * C3795 + (C12941 + C12940) * C49161 +
            (C12939 + C12938) * C3794) *
               C15279) *
              C868 +
          (C20171 * C15279 +
           ((C20168 + C20167) * C3794 + (C20166 + C20165) * C49161 +
            (C19616 + C19615) * C3795 + (C19614 + C19613) * C48964) *
               C15280 +
           ((C47907 * C3649 + C49139 * C3652 + C47888 * C3650 +
             C48810 * C3653) *
                C3794 +
            (C47907 * C3655 + C49139 * C3658 + C47888 * C3656 +
             C48810 * C3659) *
                C49161 +
            (C47907 * C11128 + C49139 * C11130 + C47888 * C17895 +
             C48810 * C17896) *
                C3795 +
            (C47907 * C11131 + C49139 * C11134 + C47888 * C17897 +
             C48810 * C17898) *
                C48964) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C10275 * C11259 + C10276 * C11253 + C9558 * C11260 +
            C9557 * C11254 + C9556 * C11261 + C9555 * C11255 + C9554 * C11262 +
            C9553 * C49204) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C9060 * C1851 + C48800 * C1854) * C49204 +
            (C9060 * C1845 + C48800 * C1848) * C11262 + C10084 * C11255 +
            C10083 * C11261 + C10082 * C11254 + C10081 * C11260 +
            C10280 * C11253 + C10279 * C11259) *
               C49004 +
           (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
            C9198 * C11254 + C9197 * C11260 +
            (C9060 * C132 + C48800 * C141) * C11253 +
            (C9060 * C120 + C48800 * C127) * C11259) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C11259 +
            (C9060 * C133 + C48800 * C142) * C11253 +
            (C9060 * C235 + C48800 * C246) * C11260 +
            (C9060 * C241 + C48800 * C253) * C11254 +
            (C9060 * C519 + C48800 * C524) * C11261 +
            (C9060 * C529 + C48800 * C534) * C11255 +
            (C9060 * C1158 + C48800 * C1165) * C11262 +
            (C9060 * C1162 + C48800 * C1170) * C49204) *
               C49162 +
           ((C9060 * C343 + C48800 * C354) * C11259 +
            (C9060 * C349 + C48800 * C361) * C11253 +
            (C9060 * C621 + C48800 * C626) * C11260 +
            (C9060 * C631 + C48800 * C636) * C11254 +
            (C9060 * C1392 + C48800 * C1399) * C11261 +
            (C9060 * C1396 + C48800 * C1404) * C11255 +
            (C9060 * C1846 + C48800 * C1849) * C11262 +
            (C9060 * C1852 + C48800 * C1855) * C49204) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            (C1892 + C1891 + C1890) * C3795 +
            (C1889 + C1888 + C1887) * C48964) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C1008 * C632 + C49181 * C637 + C1007 * C631 + C1001 * C636 +
             C1006 * C630 + C1000 * C635) *
                C48964 +
            (C1008 * C622 + C49181 * C627 + C1007 * C621 + C1001 * C626 +
             C1006 * C620 + C1000 * C625) *
                C3795 +
            (C2809 + C2808 + C2807) * C49161 +
            (C2806 + C2805 + C2804) * C3794) *
               C49004 +
           ((C1240 + C1239 + C1238) * C48964 + (C1237 + C1236 + C1235) * C3795 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49161 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C3794) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
             C1008 * C123 + C49181 * C130) *
                C3794 +
            (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
             C1008 * C135 + C49181 * C144) *
                C49161 +
            (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
             C1008 * C233 + C49181 * C244) *
                C3795 +
            (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
             C1008 * C239 + C49181 * C251) *
                C48964) *
               C49162 +
           ((C1006 * C343 + C1000 * C354 + C1007 * C342 + C1001 * C353 +
             C1008 * C341 + C49181 * C352) *
                C3794 +
            (C1006 * C349 + C1000 * C361 + C1007 * C348 + C1001 * C360 +
             C1008 * C347 + C49181 * C359) *
                C49161 +
            (C1006 * C621 + C1000 * C626 + C1007 * C622 + C1001 * C627 +
             C1008 * C623 + C49181 * C628) *
                C3795 +
            (C1006 * C631 + C1000 * C636 + C1007 * C632 + C1001 * C637 +
             C1008 * C633 + C49181 * C638) *
                C48964) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C3794 +
            (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
            C9190 * C48964) *
               C20269 +
           (C10275 * C3794 + C10276 * C49161 + C9558 * C3795 + C9557 * C48964) *
               C20270 +
           (C10277 * C3794 + C10278 * C49161 + C10077 * C3795 +
            C10078 * C48964) *
               C20271 +
           (C11148 * C3794 + C11147 * C49161 + C10726 * C3795 +
            C10725 * C48964) *
               C49210) *
              C48888 * C48871 * C110 -
          (((C9060 * C3224 + C48800 * C3227) * C48964 +
            (C9060 * C3218 + C48800 * C3221) * C3795 + C18015 * C49161 +
            C18014 * C3794) *
               C49210 +
           (C10086 * C48964 + C10085 * C3795 + C10282 * C49161 +
            C10281 * C3794) *
               C20271 +
           (C10082 * C48964 + C10081 * C3795 + C10280 * C49161 +
            C10279 * C3794) *
               C20270 +
           (C9198 * C48964 + C9197 * C3795 +
            (C9060 * C132 + C48800 * C141) * C49161 +
            (C9060 * C120 + C48800 * C127) * C3794) *
               C20269) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C3794 +
            (C9060 * C133 + C48800 * C142) * C49161 +
            (C9060 * C235 + C48800 * C246) * C3795 +
            (C9060 * C241 + C48800 * C253) * C48964) *
               C20269 +
           ((C9060 * C343 + C48800 * C354) * C3794 +
            (C9060 * C349 + C48800 * C361) * C49161 +
            (C9060 * C621 + C48800 * C626) * C3795 +
            (C9060 * C631 + C48800 * C636) * C48964) *
               C20270 +
           ((C9060 * C872 + C48800 * C877) * C3794 +
            (C9060 * C882 + C48800 * C887) * C49161 +
            (C9060 * C2296 + C48800 * C2302) * C3795 +
            (C9060 * C2305 + C48800 * C2314) * C48964) *
               C20271 +
           ((C9060 * C2727 + C48800 * C2734) * C3794 +
            (C9060 * C2731 + C48800 * C2739) * C49161 +
            (C9060 * C3219 + C48800 * C3222) * C3795 +
            (C9060 * C3225 + C48800 * C3228) * C48964) *
               C49210) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C10275 * C11259 + C10276 * C11253 + C9558 * C11260 +
             C9557 * C11254 + C9556 * C11261 + C9555 * C11255 + C9554 * C11262 +
             C9553 * C49204) *
                C49004) *
               C48888 * C229 -
           ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 + C9554 * C11261 +
             C9555 * C11254 + C9556 * C11260 + C9557 * C11253 +
             C9558 * C11259) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C11259 + C9198 * C11253 + C9199 * C11260 + C9200 * C11254 +
             C9201 * C11261 + C9202 * C11255 + C9203 * C11262 +
             C9204 * C49204) *
                C49162 +
            (C10081 * C11259 + C10082 * C11253 + C10083 * C11260 +
             C10084 * C11254 + C14290 * C11261 + C14291 * C11255 +
             (C9060 * C9287 + C48800 * C9290) * C11262 +
             (C9060 * C9291 + C48800 * C9293) * C49204) *
                C49004) *
               C48888 * C49189 -
           ((C14291 * C49204 + C14290 * C11262 + C10084 * C11255 +
             C10083 * C11261 + C10082 * C11254 + C10081 * C11260 +
             C10280 * C11253 + C10279 * C11259) *
                C49004 +
            (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
             C9198 * C11254 + C9197 * C11260 +
             (C9060 * C132 + C48800 * C141) * C11253 +
             (C9060 * C120 + C48800 * C127) * C11259) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 +
             (C1892 + C1891 + C1890) * C3795 +
             (C1889 + C1888 + C1887) * C48964) *
                C49004) *
               C48888 * C229 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 +
             (C1887 + C1888 + C1889) * C49161 +
             (C1890 + C1891 + C1892) * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C1235 + C1236 + C1237) * C3794 +
             (C1238 + C1239 + C1240) * C49161 +
             (C1241 + C1242 + C1243) * C3795 +
             (C1244 + C1245 + C1246) * C48964) *
                C49162 +
            ((C6369 + C6370 + C6371) * C3794 +
             (C6372 + C6373 + C6374) * C49161 +
             (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
              C1008 * C1395 + C49181 * C1402) *
                 C3795 +
             (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
              C1008 * C1403 + C49181 * C1407) *
                 C48964) *
                C49004) *
               C48888 * C49189 -
           (((C6374 + C6373 + C6372) * C48964 +
             (C6371 + C6370 + C6369) * C3795 +
             (C2809 + C2808 + C2807) * C49161 +
             (C2806 + C2805 + C2804) * C3794) *
                C49004 +
            ((C1240 + C1239 + C1238) * C48964 +
             (C1237 + C1236 + C1235) * C3795 +
             (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49161 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C3794) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C3794 +
             (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
             C9190 * C48964) *
                C20269 +
            (C10275 * C3794 + C10276 * C49161 + C9558 * C3795 +
             C9557 * C48964) *
                C20270 +
            (C10277 * C3794 + C10278 * C49161 + C10077 * C3795 +
             C10078 * C48964) *
                C20271 +
            (C11148 * C3794 + C11147 * C49161 + C10726 * C3795 +
             C10725 * C48964) *
                C49210) *
               C48888 * C229 -
           ((C10723 * C48964 + C10724 * C3795 + C10725 * C49161 +
             C10726 * C3794) *
                C49210 +
            (C10080 * C48964 + C10079 * C3795 + C10078 * C49161 +
             C10077 * C3794) *
                C20271 +
            (C9555 * C48964 + C9556 * C3795 + C9557 * C49161 + C9558 * C3794) *
                C20270 +
            (C9192 * C48964 + C9191 * C3795 + C9190 * C49161 + C9189 * C3794) *
                C20269) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C3794 + C9198 * C49161 + C9199 * C3795 + C9200 * C48964) *
                C20269 +
            (C10081 * C3794 + C10082 * C49161 + C10083 * C3795 +
             C10084 * C48964) *
                C20270 +
            (C10085 * C3794 + C10086 * C49161 + C10087 * C3795 +
             C10088 * C48964) *
                C20271 +
            (C21514 * C3794 + C21515 * C49161 +
             (C9060 * C10235 + C48800 * C10238) * C3795 +
             (C9060 * C10239 + C48800 * C10241) * C48964) *
                C49210) *
               C48888 * C49189 -
           ((C21515 * C48964 + C21514 * C3795 + C18015 * C49161 +
             C18014 * C3794) *
                C49210 +
            (C10086 * C48964 + C10085 * C3795 + C10282 * C49161 +
             C10281 * C3794) *
                C20271 +
            (C10082 * C48964 + C10081 * C3795 + C10280 * C49161 +
             C10279 * C3794) *
                C20270 +
            (C9198 * C48964 + C9197 * C3795 +
             (C9060 * C132 + C48800 * C141) * C49161 +
             (C9060 * C120 + C48800 * C127) * C3794) *
                C20269) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48800 * C126) * C11259 +
                      (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
                      C9190 * C11254 + C9191 * C11261 + C9192 * C11255 +
                      C9193 * C11262 + C9194 * C49204) *
                         C49162 +
                     (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 +
                      C14428 + C14429) *
                         C49004) *
                        C339 -
                    ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
                      C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
                      C10278 * C11253 + C10277 * C11259) *
                         C49004 +
                     (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 +
                      C14423 + C14422) *
                         C49162) *
                        C49191) *
                       C48871 * C231 +
                   (((C14430 + C14431 + C14432 + C14433 + C14434 + C14435 +
                      C14436 + C14437) *
                         C49162 +
                     (C10281 * C11259 + C10282 * C11253 + C10085 * C11260 +
                      C10086 * C11254 + C10087 * C11261 + C10088 * C11255 +
                      (C9060 * C10048 + C48800 * C10049) * C11262 +
                      (C9060 * C10050 + C48800 * C10051) * C49204) *
                         C49004) *
                        C49191 -
                    ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 +
                      C14431 + C14430) *
                         C49004 +
                     (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 +
                      C9199 * C11261 + C9198 * C11254 + C9197 * C11260 +
                      (C9060 * C132 + C48800 * C141) * C11253 +
                      (C9060 * C120 + C48800 * C127) * C11259) *
                         C49162) *
                        C339) *
                       C48871 * C49187)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49181 * C128) *
                          C3794 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49181 * C142) *
                          C49161 +
                      (C1223 + C1224 + C1225) * C3795 +
                      (C1226 + C1227 + C1228) * C48964) *
                         C49162 +
                     ((C2792 + C2793 + C2794) * C3794 +
                      (C2795 + C2796 + C2797) * C49161 +
                      (C1892 + C1891 + C1890) * C3795 +
                      (C1889 + C1888 + C1887) * C48964) *
                         C49004) *
                        C339 -
                    (((C3247 + C3246 + C3245) * C48964 +
                      (C3244 + C3243 + C3242) * C3795 +
                      (C2803 + C2802 + C2801) * C49161 +
                      (C2800 + C2799 + C2798) * C3794) *
                         C49004 +
                     ((C1887 + C1888 + C1889) * C48964 +
                      (C1890 + C1891 + C1892) * C3795 +
                      (C2797 + C2796 + C2795) * C49161 +
                      (C2794 + C2793 + C2792) * C3794) *
                         C49162) *
                        C49191) *
                       C48871 * C231 +
                   ((((C2804 + C2805 + C2806) * C3794 +
                      (C2807 + C2808 + C2809) * C49161 +
                      (C6369 + C6370 + C6371) * C3795 +
                      (C6372 + C6373 + C6374) * C48964) *
                         C49162 +
                     ((C2810 + C2811 + C2812) * C3794 +
                      (C2813 + C2814 + C2815) * C49161 +
                      (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 +
                       C1001 * C2302 + C1008 * C2577 + C49181 * C2578) *
                          C3795 +
                      (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 +
                       C1001 * C2314 + C1008 * C2579 + C49181 * C2580) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C6374 + C6373 + C6372) * C48964 +
                      (C6371 + C6370 + C6369) * C3795 +
                      (C2809 + C2808 + C2807) * C49161 +
                      (C2806 + C2805 + C2804) * C3794) *
                         C49004 +
                     ((C1240 + C1239 + C1238) * C48964 +
                      (C1237 + C1236 + C1235) * C3795 +
                      (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49161 +
                      (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C3794) *
                         C49162) *
                        C339) *
                       C48871 * C49187)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48800 * C126) * C3794 +
                      (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
                      C9190 * C48964) *
                         C20269 +
                     (C21646 + C21647 + C21648 + C21649) * C20270 +
                     (C21650 + C21651 + C21652 + C21653) * C20271 +
                     (C21654 + C21655 + C21656 + C21657) * C49210) *
                        C339 -
                    ((C18265 * C48964 + C18264 * C3795 + C18013 * C49161 +
                      C18012 * C3794) *
                         C49210 +
                     (C21657 + C21656 + C21655 + C21654) * C20271 +
                     (C21653 + C21652 + C21651 + C21650) * C20270 +
                     (C21649 + C21648 + C21647 + C21646) * C20269) *
                        C49191) *
                       C48871 * C231 +
                   (((C21658 + C21659 + C21660 + C21661) * C20269 +
                     (C21662 + C21663 + C21664 + C21665) * C20270 +
                     (C21666 + C21667 + C21668 + C21669) * C20271 +
                     (C18016 * C3794 + C18017 * C49161 +
                      (C9060 * C17895 + C48800 * C17896) * C3795 +
                      (C9060 * C17897 + C48800 * C17898) * C48964) *
                         C49210) *
                        C49191 -
                    ((C21669 + C21668 + C21667 + C21666) * C49210 +
                     (C21665 + C21664 + C21663 + C21662) * C20271 +
                     (C21661 + C21660 + C21659 + C21658) * C20270 +
                     (C9198 * C48964 + C9197 * C3795 +
                      (C9060 * C132 + C48800 * C141) * C49161 +
                      (C9060 * C120 + C48800 * C127) * C3794) *
                         C20269) *
                        C339) *
                       C48871 * C49187)) /
                     (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C48888 * C447 -
           ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 + C9554 * C11261 +
             C9555 * C11254 + C9556 * C11260 + C9557 * C11253 +
             C9558 * C11259) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C11259 + C9198 * C11253 + C9199 * C11260 + C9200 * C11254 +
             C9201 * C11261 + C9202 * C11255 + C9203 * C11262 +
             C9204 * C49204) *
                C49162 +
            (C10081 * C11259 + C10082 * C11253 + C10083 * C11260 +
             C10084 * C11254 + C14290 * C11261 + C14291 * C11255 +
             (C9060 * C9287 + C48800 * C9290) * C11262 +
             (C9060 * C9291 + C48800 * C9293) * C49204) *
                C49004) *
               C48888 * C49189 -
           ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 + C14431 +
             C14430) *
                C49004 +
            (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
             C9198 * C11254 + C9197 * C11260 +
             (C9060 * C132 + C48800 * C141) * C11253 +
             (C9060 * C120 + C48800 * C127) * C11259) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 +
             (C1892 + C1891 + C1890) * C3795 +
             (C1889 + C1888 + C1887) * C48964) *
                C49004) *
               C48888 * C447 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 +
             (C1887 + C1888 + C1889) * C49161 +
             (C1890 + C1891 + C1892) * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C1235 + C1236 + C1237) * C3794 +
             (C1238 + C1239 + C1240) * C49161 +
             (C1241 + C1242 + C1243) * C3795 +
             (C1244 + C1245 + C1246) * C48964) *
                C49162 +
            ((C6369 + C6370 + C6371) * C3794 +
             (C6372 + C6373 + C6374) * C49161 +
             (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
              C1008 * C1395 + C49181 * C1402) *
                 C3795 +
             (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
              C1008 * C1403 + C49181 * C1407) *
                 C48964) *
                C49004) *
               C48888 * C49189 -
           (((C6374 + C6373 + C6372) * C48964 +
             (C6371 + C6370 + C6369) * C3795 +
             (C2809 + C2808 + C2807) * C49161 +
             (C2806 + C2805 + C2804) * C3794) *
                C49004 +
            ((C1240 + C1239 + C1238) * C48964 +
             (C1237 + C1236 + C1235) * C3795 +
             (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49161 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C3794) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C3794 +
             (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
             C9190 * C48964) *
                C20269 +
            (C21646 + C21647 + C21648 + C21649) * C20270 +
            (C21650 + C21651 + C21652 + C21653) * C20271 +
            (C21654 + C21655 + C21656 + C21657) * C49210) *
               C48888 * C447 -
           ((C10723 * C48964 + C10724 * C3795 + C10725 * C49161 +
             C10726 * C3794) *
                C49210 +
            (C10080 * C48964 + C10079 * C3795 + C10078 * C49161 +
             C10077 * C3794) *
                C20271 +
            (C9555 * C48964 + C9556 * C3795 + C9557 * C49161 + C9558 * C3794) *
                C20270 +
            (C9192 * C48964 + C9191 * C3795 + C9190 * C49161 + C9189 * C3794) *
                C20269) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C3794 + C9198 * C49161 + C9199 * C3795 + C9200 * C48964) *
                C20269 +
            (C10081 * C3794 + C10082 * C49161 + C10083 * C3795 +
             C10084 * C48964) *
                C20270 +
            (C10085 * C3794 + C10086 * C49161 + C10087 * C3795 +
             C10088 * C48964) *
                C20271 +
            (C21514 * C3794 + C21515 * C49161 +
             (C9060 * C10235 + C48800 * C10238) * C3795 +
             (C9060 * C10239 + C48800 * C10241) * C48964) *
                C49210) *
               C48888 * C49189 -
           ((C21669 + C21668 + C21667 + C21666) * C49210 +
            (C21665 + C21664 + C21663 + C21662) * C20271 +
            (C21661 + C21660 + C21659 + C21658) * C20270 +
            (C9198 * C48964 + C9197 * C3795 +
             (C9060 * C132 + C48800 * C141) * C49161 +
             (C9060 * C120 + C48800 * C127) * C3794) *
                C20269) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
            C14429) *
               C49004) *
              C48888 * C513 -
          ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 + C9554 * C11261 +
            C9555 * C11254 + C9556 * C11260 + C9557 * C11253 + C9558 * C11259) *
               C49004 +
           (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
            C9192 * C11254 + C9191 * C11260 + C9190 * C11253 + C9189 * C11259) *
               C49162) *
              C48888 * C514 +
          ((C9191 * C11259 + C9192 * C11253 + C9193 * C11260 + C9194 * C11254 +
            C9195 * C11261 + C9196 * C11255 + C9448 * C11262 + C9447 * C49204) *
               C49162 +
           (C9556 * C11259 + C9555 * C11253 + C9554 * C11260 + C9553 * C11254 +
            C9552 * C11261 + C9551 * C11255 +
            (C9060 * C9530 + C48800 * C9531) * C11262 +
            (C9060 * C9532 + C48800 * C9533) * C49204) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            (C1892 + C1891 + C1890) * C3795 +
            (C1889 + C1888 + C1887) * C48964) *
               C49004) *
              C48888 * C513 -
          (((C1881 + C1882 + C1883) * C48964 + (C1884 + C1885 + C1886) * C3795 +
            (C1887 + C1888 + C1889) * C49161 +
            (C1890 + C1891 + C1892) * C3794) *
               C49004 +
           ((C1234 + C1233 + C1232) * C48964 + (C1231 + C1230 + C1229) * C3795 +
            (C1228 + C1227 + C1226) * C49161 +
            (C1225 + C1224 + C1223) * C3794) *
               C49162) *
              C48888 * C514 +
          ((C1691 * C3794 + C1692 * C49161 + (C1698 + C1697 + C1696) * C3795 +
            (C1695 + C1694 + C1693) * C48964) *
               C49162 +
           ((C1886 + C1885 + C1884) * C3794 + (C1883 + C1882 + C1881) * C49161 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C3795 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C48964) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C3794 +
            (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
            C9190 * C48964) *
               C20269 +
           (C21646 + C21647 + C21648 + C21649) * C20270 +
           (C21650 + C21651 + C21652 + C21653) * C20271 +
           (C21654 + C21655 + C21656 + C21657) * C49210) *
              C48888 * C513 -
          ((C10723 * C48964 + C10724 * C3795 + C10725 * C49161 +
            C10726 * C3794) *
               C49210 +
           (C10080 * C48964 + C10079 * C3795 + C10078 * C49161 +
            C10077 * C3794) *
               C20271 +
           (C9555 * C48964 + C9556 * C3795 + C9557 * C49161 + C9558 * C3794) *
               C20270 +
           (C9192 * C48964 + C9191 * C3795 + C9190 * C49161 + C9189 * C3794) *
               C20269) *
              C48888 * C514 +
          ((C9191 * C3794 + C9192 * C49161 + C9193 * C3795 + C9194 * C48964) *
               C20269 +
           (C9556 * C3794 + C9555 * C49161 + C9554 * C3795 + C9553 * C48964) *
               C20270 +
           (C10079 * C3794 + C10080 * C49161 + C10552 * C3795 +
            C10551 * C48964) *
               C20271 +
           (C10724 * C3794 + C10723 * C49161 +
            (C9060 * C10698 + C48800 * C10699) * C3795 +
            (C9060 * C10700 + C48800 * C10701) * C48964) *
               C49210) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C339 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C447 +
          (((C14796 + C14797 + C14798 + C14799 + C14800 + C14801 + C14802 +
             C14803) *
                C49162 +
            (C10077 * C11259 + C10078 * C11253 + C10079 * C11260 +
             C10080 * C11254 + C10552 * C11261 + C10551 * C11255 +
             (C9060 * C9785 + C48800 * C9788) * C11262 +
             (C9060 * C9789 + C48800 * C9791) * C49204) *
                C49004) *
               C49191 -
           ((C14803 + C14802 + C14801 + C14800 + C14799 + C14798 + C14797 +
             C14796) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C339 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C447 +
          (((C7107 * C3794 + C7108 * C49161 + (C1886 + C1885 + C1884) * C3795 +
             (C1883 + C1882 + C1881) * C48964) *
                C49162 +
            ((C3242 + C3243 + C3244) * C3794 +
             (C3245 + C3246 + C3247) * C49161 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49181 * C2308) *
                 C3795 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49181 * C2317) *
                 C48964) *
                C49004) *
               C49191 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 + C7109 * C49161 + C7110 * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C3794 +
             (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
             C9190 * C48964) *
                C20269 +
            (C21646 + C21647 + C21648 + C21649) * C20270 +
            (C21650 + C21651 + C21652 + C21653) * C20271 +
            (C21654 + C21655 + C21656 + C21657) * C49210) *
               C339 -
           ((C18265 * C48964 + C18264 * C3795 + C18013 * C49161 +
             C18012 * C3794) *
                C49210 +
            (C21657 + C21656 + C21655 + C21654) * C20271 +
            (C21653 + C21652 + C21651 + C21650) * C20270 +
            (C21649 + C21648 + C21647 + C21646) * C20269) *
               C49191) *
              C447 +
          (((C22028 + C22029 + C22030 + C22031) * C20269 +
            (C22032 + C22033 + C22034 + C22035) * C20270 +
            (C22036 + C22037 + C22038 + C22039) * C20271 +
            (C18264 * C3794 + C18265 * C49161 +
             (C9060 * C11129 + C48800 * C11132) * C3795 +
             (C9060 * C11133 + C48800 * C11135) * C48964) *
                C49210) *
               C49191 -
           ((C22039 + C22038 + C22037 + C22036) * C49210 +
            (C22035 + C22034 + C22033 + C22032) * C20271 +
            (C22031 + C22030 + C22029 + C22028) * C20270 +
            (C9192 * C48964 + C9191 * C3795 + C9190 * C49161 + C9189 * C3794) *
                C20269) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C721 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C48871 * C449 +
          (((C14430 + C14431 + C14432 + C14433 + C14434 + C14435 + C14436 +
             C14437) *
                C49162 +
            (C10281 * C11259 + C10282 * C11253 + C10085 * C11260 +
             C10086 * C11254 + C10087 * C11261 + C10088 * C11255 +
             (C9060 * C10048 + C48800 * C10049) * C11262 +
             (C9060 * C10050 + C48800 * C10051) * C49204) *
                C49004) *
               C49191 -
           ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 + C14431 +
             C14430) *
                C49004 +
            (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
             C9198 * C11254 + C9197 * C11260 +
             (C9060 * C132 + C48800 * C141) * C11253 +
             (C9060 * C120 + C48800 * C127) * C11259) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C721 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C2804 + C2805 + C2806) * C3794 +
             (C2807 + C2808 + C2809) * C49161 +
             (C6369 + C6370 + C6371) * C3795 +
             (C6372 + C6373 + C6374) * C48964) *
                C49162 +
            ((C2810 + C2811 + C2812) * C3794 +
             (C2813 + C2814 + C2815) * C49161 +
             (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C3795 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48964) *
                C49004) *
               C49191 -
           (((C6374 + C6373 + C6372) * C48964 +
             (C6371 + C6370 + C6369) * C3795 +
             (C2809 + C2808 + C2807) * C49161 +
             (C2806 + C2805 + C2804) * C3794) *
                C49004 +
            ((C1240 + C1239 + C1238) * C48964 +
             (C1237 + C1236 + C1235) * C3795 +
             (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49161 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C3794) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C3794 +
             (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
             C9190 * C48964) *
                C20269 +
            (C21646 + C21647 + C21648 + C21649) * C20270 +
            (C21650 + C21651 + C21652 + C21653) * C20271 +
            (C21654 + C21655 + C21656 + C21657) * C49210) *
               C721 -
           ((C18265 * C48964 + C18264 * C3795 + C18013 * C49161 +
             C18012 * C3794) *
                C49210 +
            (C21657 + C21656 + C21655 + C21654) * C20271 +
            (C21653 + C21652 + C21651 + C21650) * C20270 +
            (C21649 + C21648 + C21647 + C21646) * C20269) *
               C49191) *
              C48871 * C449 +
          (((C21658 + C21659 + C21660 + C21661) * C20269 +
            (C21662 + C21663 + C21664 + C21665) * C20270 +
            (C21666 + C21667 + C21668 + C21669) * C20271 +
            (C18016 * C3794 + C18017 * C49161 +
             (C9060 * C17895 + C48800 * C17896) * C3795 +
             (C9060 * C17897 + C48800 * C17898) * C48964) *
                C49210) *
               C49191 -
           ((C21669 + C21668 + C21667 + C21666) * C49210 +
            (C21665 + C21664 + C21663 + C21662) * C20271 +
            (C21661 + C21660 + C21659 + C21658) * C20270 +
            (C9198 * C48964 + C9197 * C3795 +
             (C9060 * C132 + C48800 * C141) * C49161 +
             (C9060 * C120 + C48800 * C127) * C3794) *
                C20269) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C721 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C229 +
          (((C14796 + C14797 + C14798 + C14799 + C14800 + C14801 + C14802 +
             C14803) *
                C49162 +
            (C10077 * C11259 + C10078 * C11253 + C10079 * C11260 +
             C10080 * C11254 + C10552 * C11261 + C10551 * C11255 +
             (C9060 * C9785 + C48800 * C9788) * C11262 +
             (C9060 * C9789 + C48800 * C9791) * C49204) *
                C49004) *
               C49191 -
           ((C14803 + C14802 + C14801 + C14800 + C14799 + C14798 + C14797 +
             C14796) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C721 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C229 +
          (((C7107 * C3794 + C7108 * C49161 + (C1886 + C1885 + C1884) * C3795 +
             (C1883 + C1882 + C1881) * C48964) *
                C49162 +
            ((C3242 + C3243 + C3244) * C3794 +
             (C3245 + C3246 + C3247) * C49161 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49181 * C2308) *
                 C3795 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49181 * C2317) *
                 C48964) *
                C49004) *
               C49191 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 + C7109 * C49161 + C7110 * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C3794 +
             (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
             C9190 * C48964) *
                C20269 +
            (C21646 + C21647 + C21648 + C21649) * C20270 +
            (C21650 + C21651 + C21652 + C21653) * C20271 +
            (C21654 + C21655 + C21656 + C21657) * C49210) *
               C721 -
           ((C18265 * C48964 + C18264 * C3795 + C18013 * C49161 +
             C18012 * C3794) *
                C49210 +
            (C21657 + C21656 + C21655 + C21654) * C20271 +
            (C21653 + C21652 + C21651 + C21650) * C20270 +
            (C21649 + C21648 + C21647 + C21646) * C20269) *
               C49191) *
              C229 +
          (((C22028 + C22029 + C22030 + C22031) * C20269 +
            (C22032 + C22033 + C22034 + C22035) * C20270 +
            (C22036 + C22037 + C22038 + C22039) * C20271 +
            (C18264 * C3794 + C18265 * C49161 +
             (C9060 * C11129 + C48800 * C11132) * C3795 +
             (C9060 * C11133 + C48800 * C11135) * C48964) *
                C49210) *
               C49191 -
           ((C22039 + C22038 + C22037 + C22036) * C49210 +
            (C22035 + C22034 + C22033 + C22032) * C20271 +
            (C22031 + C22030 + C22029 + C22028) * C20270 +
            (C9192 * C48964 + C9191 * C3795 + C9190 * C49161 + C9189 * C3794) *
                C20269) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
            C14429) *
               C49004) *
              C867 -
          ((C15162 + C15163 + C15164 + C15165 + C15166 + C15167 + C15168 +
            C15169) *
               C49004 +
           (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
            C14422) *
               C49162) *
              C868 +
          ((C15169 + C15168 + C15167 + C15166 + C15165 + C15164 + C15163 +
            C15162) *
               C49162 +
           (C11148 * C11259 + C11147 * C11253 + C10726 * C11260 +
            C10725 * C11254 + C10724 * C11261 + C10723 * C11255 +
            (C9060 * C10698 + C48800 * C10699) * C11262 +
            (C9060 * C10700 + C48800 * C10701) * C49204) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            C7107 * C3795 + C7108 * C48964) *
               C49004) *
              C867 -
          (((C3247 + C3246 + C3245) * C48964 + (C3244 + C3243 + C3242) * C3795 +
            (C2803 + C2802 + C2801) * C49161 +
            (C2800 + C2799 + C2798) * C3794) *
               C49004 +
           (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
            (C2794 + C2793 + C2792) * C3794) *
               C49162) *
              C868 +
          ((C3676 * C3794 + C3677 * C49161 + (C3242 + C3243 + C3244) * C3795 +
            (C3245 + C3246 + C3247) * C48964) *
               C49162 +
           ((C3683 + C3682 + C3681) * C3794 + (C3680 + C3679 + C3678) * C49161 +
            (C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
             C1008 * C3219 + C49181 * C3222) *
                C3795 +
            (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
             C1008 * C3225 + C49181 * C3228) *
                C48964) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C3794 +
            (C9060 * C131 + C48800 * C140) * C49161 + C9189 * C3795 +
            C9190 * C48964) *
               C20269 +
           (C21646 + C21647 + C21648 + C21649) * C20270 + C22406 * C20271 +
           C22407 * C49210) *
              C867 -
          ((C22400 + C22401 + C22402 + C22403) * C49210 +
           (C21657 + C21656 + C21655 + C21654) * C20271 +
           (C21653 + C21652 + C21651 + C21650) * C20270 +
           (C21649 + C21648 + C21647 + C21646) * C20269) *
              C868 +
          (C22406 * C20269 + C22407 * C20270 +
           (C22403 + C22402 + C22401 + C22400) * C20271 +
           (C18506 * C3794 + C18505 * C49161 +
            (C9060 * C18249 + C48800 * C18250) * C3795 +
            (C9060 * C18251 + C48800 * C18252) * C48964) *
               C49210) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C48905) *
                  C48917 * C48888 * C48871 * C110 -
              ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C132 + C101 * C141) *
                   C48905 +
               (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                C113 * C120 + C101 * C127) *
                   C118) *
                  C48917 * C48888 * C48871 * C111 +
              ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                C117 * C125 + C105 * C138) *
                   C118 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                C117 * C139 + C105 * C146) *
                   C48905) *
                  C48917 * C48888 * C48871 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                C1008 * C121 + C49181 * C128) *
                   C1009 +
               (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                C1008 * C133 + C49181 * C142) *
                   C49229 +
               (C1006 * C237 + C1000 * C248 + C1007 * C236 + C1001 * C247 +
                C1008 * C235 + C49181 * C246) *
                   C1010 +
               (C1006 * C243 + C1000 * C255 + C1007 * C242 + C1001 * C254 +
                C1008 * C241 + C49181 * C253) *
                   C49217 +
               (C1006 * C517 + C1000 * C522 + C1007 * C518 + C1001 * C523 +
                C1008 * C519 + C49181 * C524) *
                   C1011 +
               (C1006 * C527 + C1000 * C532 + C1007 * C528 + C1001 * C533 +
                C1008 * C529 + C49181 * C534) *
                   C49194) *
                  C48917 * C48888 * C48871 * C110 -
              ((C1008 * C530 + C49181 * C535 + C1007 * C529 + C1001 * C534 +
                C1006 * C528 + C1000 * C533) *
                   C49194 +
               (C1008 * C520 + C49181 * C525 + C1007 * C519 + C1001 * C524 +
                C1006 * C518 + C1000 * C523) *
                   C1011 +
               (C1008 * C240 + C49181 * C252 + C1007 * C241 + C1001 * C253 +
                C1006 * C242 + C1000 * C254) *
                   C49217 +
               (C1008 * C234 + C49181 * C245 + C1007 * C235 + C1001 * C246 +
                C1006 * C236 + C1000 * C247) *
                   C1010 +
               (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
                C1006 * C132 + C1000 * C141) *
                   C49229 +
               (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
                C1006 * C120 + C1000 * C127) *
                   C1009) *
                  C48917 * C48888 * C48871 * C111 +
              ((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                C1008 * C123 + C49181 * C130) *
                   C1009 +
               (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                C1008 * C135 + C49181 * C144) *
                   C49229 +
               (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
                C1008 * C233 + C49181 * C244) *
                   C1010 +
               (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
                C1008 * C239 + C49181 * C251) *
                   C49217 +
               (C1006 * C519 + C1000 * C524 + C1007 * C520 + C1001 * C525 +
                C1008 * C521 + C49181 * C526) *
                   C1011 +
               (C1006 * C529 + C1000 * C534 + C1007 * C530 + C1001 * C535 +
                C1008 * C531 + C49181 * C536) *
                   C49194) *
                  C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                                 C1001 * C127 + C1008 * C121 + C49181 * C128) *
                                    C118 +
                                (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                                 C1001 * C141 + C1008 * C133 + C49181 * C142) *
                                    C48905) *
                                   C49230 +
                               ((C1006 * C345 + C1000 * C356 + C1007 * C344 +
                                 C1001 * C355 + C1008 * C343 + C49181 * C354) *
                                    C118 +
                                (C1006 * C351 + C1000 * C363 + C1007 * C350 +
                                 C1001 * C362 + C1008 * C349 + C49181 * C361) *
                                    C48905) *
                                   C49219 +
                               ((C1006 * C870 + C1000 * C875 + C1007 * C871 +
                                 C1001 * C876 + C1008 * C872 + C49181 * C877) *
                                    C118 +
                                (C1006 * C880 + C1000 * C885 + C1007 * C881 +
                                 C1001 * C886 + C1008 * C882 + C49181 * C887) *
                                    C48905) *
                                   C49197) *
                                  C48888 * C48871 * C110 -
                              (((C1008 * C883 + C49181 * C888 + C1007 * C882 +
                                 C1001 * C887 + C1006 * C881 + C1000 * C886) *
                                    C48905 +
                                (C1008 * C873 + C49181 * C878 + C1007 * C872 +
                                 C1001 * C877 + C1006 * C871 + C1000 * C876) *
                                    C118) *
                                   C49197 +
                               ((C1008 * C348 + C49181 * C360 + C1007 * C349 +
                                 C1001 * C361 + C1006 * C350 + C1000 * C362) *
                                    C48905 +
                                (C1008 * C342 + C49181 * C353 + C1007 * C343 +
                                 C1001 * C354 + C1006 * C344 + C1000 * C355) *
                                    C118) *
                                   C49219 +
                               ((C1008 * C134 + C49181 * C143 + C1007 * C133 +
                                 C1001 * C142 + C1006 * C132 + C1000 * C141) *
                                    C48905 +
                                (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                                 C1001 * C128 + C1006 * C120 + C1000 * C127) *
                                    C118) *
                                   C49230) *
                                  C48888 * C48871 * C111 +
                              (((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                                 C1001 * C129 + C1008 * C123 + C49181 * C130) *
                                    C118 +
                                (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                                 C1001 * C143 + C1008 * C135 + C49181 * C144) *
                                    C48905) *
                                   C49230 +
                               ((C1006 * C343 + C1000 * C354 + C1007 * C342 +
                                 C1001 * C353 + C1008 * C341 + C49181 * C352) *
                                    C118 +
                                (C1006 * C349 + C1000 * C361 + C1007 * C348 +
                                 C1001 * C360 + C1008 * C347 + C49181 * C359) *
                                    C48905) *
                                   C49219 +
                               ((C1006 * C872 + C1000 * C877 + C1007 * C873 +
                                 C1001 * C878 + C1008 * C874 + C49181 * C879) *
                                    C118 +
                                (C1006 * C882 + C1000 * C887 + C1007 * C883 +
                                 C1001 * C888 + C1008 * C884 + C49181 * C889) *
                                    C48905) *
                                   C49197) *
                                  C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7760 * C237 + C49226 * C248 + C7761 * C236 + C49213 * C247 +
            C7762 * C235 + C49181 * C246) *
               C7764 +
           (C7760 * C243 + C49226 * C255 + C7761 * C242 + C49213 * C254 +
            C7762 * C241 + C49181 * C253) *
               C7758 +
           (C7760 * C517 + C49226 * C522 + C7761 * C518 + C49213 * C523 +
            C7762 * C519 + C49181 * C524) *
               C7765 +
           (C7760 * C527 + C49226 * C532 + C7761 * C528 + C49213 * C533 +
            C7762 * C529 + C49181 * C534) *
               C49194) *
              C48917 * C48888 * C48871 * C110 -
          ((C7762 * C530 + C49181 * C535 + C7761 * C529 + C49213 * C534 +
            C7760 * C528 + C49226 * C533) *
               C49194 +
           (C7762 * C520 + C49181 * C525 + C7761 * C519 + C49213 * C524 +
            C7760 * C518 + C49226 * C523) *
               C7765 +
           (C7762 * C240 + C49181 * C252 + C7761 * C241 + C49213 * C253 +
            C7760 * C242 + C49226 * C254) *
               C7758 +
           (C7762 * C234 + C49181 * C245 + C7761 * C235 + C49213 * C246 +
            C7760 * C236 + C49226 * C247) *
               C7764 +
           (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
            C7760 * C132 + C49226 * C141) *
               C7757 +
           (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
            C7760 * C120 + C49226 * C127) *
               C7763) *
              C48917 * C48888 * C48871 * C111 +
          ((C7760 * C121 + C49226 * C128 + C7761 * C122 + C49213 * C129 +
            C7762 * C123 + C49181 * C130) *
               C7763 +
           (C7760 * C133 + C49226 * C142 + C7761 * C134 + C49213 * C143 +
            C7762 * C135 + C49181 * C144) *
               C7757 +
           (C7760 * C235 + C49226 * C246 + C7761 * C234 + C49213 * C245 +
            C7762 * C233 + C49181 * C244) *
               C7764 +
           (C7760 * C241 + C49226 * C253 + C7761 * C240 + C49213 * C252 +
            C7762 * C239 + C49181 * C251) *
               C7758 +
           (C7760 * C519 + C49226 * C524 + C7761 * C520 + C49213 * C525 +
            C7762 * C521 + C49181 * C526) *
               C7765 +
           (C7760 * C529 + C49226 * C534 + C7761 * C530 + C49213 * C535 +
            C7762 * C531 + C49181 * C536) *
               C49194) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 +
           (C9060 * C237 + C48800 * C248) * C9062 +
           (C9060 * C243 + C48800 * C255) * C9056 +
           (C9060 * C517 + C48800 * C522) * C9063 +
           (C9060 * C527 + C48800 * C532) * C9057 +
           (C9060 * C1160 + C48800 * C1167) * C9064 +
           (C9060 * C1164 + C48800 * C1172) * C9058 +
           (C9060 * C1664 + C48800 * C1667) * C9065 +
           (C9060 * C1670 + C48800 * C1673) * C9059) *
              C48917 * C48888 * C48871 * C110 -
          ((C9060 * C1671 + C48800 * C1674) * C9059 +
           (C9060 * C1665 + C48800 * C1668) * C9065 +
           (C9060 * C1163 + C48800 * C1171) * C9058 +
           (C9060 * C1159 + C48800 * C1166) * C9064 +
           (C9060 * C528 + C48800 * C533) * C9057 +
           (C9060 * C518 + C48800 * C523) * C9063 +
           (C9060 * C242 + C48800 * C254) * C9056 +
           (C9060 * C236 + C48800 * C247) * C9062 +
           (C9060 * C132 + C48800 * C141) * C9055 +
           (C9060 * C120 + C48800 * C127) * C9061) *
              C48917 * C48888 * C48871 * C111 +
          ((C9060 * C121 + C48800 * C128) * C9061 +
           (C9060 * C133 + C48800 * C142) * C9055 +
           (C9060 * C235 + C48800 * C246) * C9062 +
           (C9060 * C241 + C48800 * C253) * C9056 +
           (C9060 * C519 + C48800 * C524) * C9063 +
           (C9060 * C529 + C48800 * C534) * C9057 +
           (C9060 * C1158 + C48800 * C1165) * C9064 +
           (C9060 * C1162 + C48800 * C1170) * C9058 +
           (C9060 * C1666 + C48800 * C1669) * C9065 +
           (C9060 * C1672 + C48800 * C1675) * C9059) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C7763 +
            (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
            C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
               C49230 +
           ((C9060 * C345 + C48800 * C356) * C7763 +
            (C9060 * C351 + C48800 * C363) * C7757 + C9558 * C7764 +
            C9557 * C7758 + C9556 * C7765 + C9555 * C49194) *
               C49219 +
           ((C9060 * C870 + C48800 * C875) * C7763 +
            (C9060 * C880 + C48800 * C885) * C7757 +
            (C9060 * C2294 + C48800 * C2300) * C7764 +
            (C9060 * C2303 + C48800 * C2312) * C7758 +
            (C9060 * C2297 + C48800 * C2306) * C7765 +
            (C9060 * C2309 + C48800 * C2315) * C49194) *
               C49197) *
              C48888 * C48871 * C110 -
          (((C9060 * C2310 + C48800 * C2316) * C49194 +
            (C9060 * C2298 + C48800 * C2307) * C7765 +
            (C9060 * C2304 + C48800 * C2313) * C7758 +
            (C9060 * C2295 + C48800 * C2301) * C7764 +
            (C9060 * C881 + C48800 * C886) * C7757 +
            (C9060 * C871 + C48800 * C876) * C7763) *
               C49197 +
           ((C9060 * C1397 + C48800 * C1405) * C49194 +
            (C9060 * C1393 + C48800 * C1400) * C7765 +
            (C9060 * C630 + C48800 * C635) * C7758 +
            (C9060 * C620 + C48800 * C625) * C7764 +
            (C9060 * C350 + C48800 * C362) * C7757 +
            (C9060 * C344 + C48800 * C355) * C7763) *
               C49219 +
           (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
            (C9060 * C132 + C48800 * C141) * C7757 +
            (C9060 * C120 + C48800 * C127) * C7763) *
               C49230) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C7763 +
            (C9060 * C133 + C48800 * C142) * C7757 +
            (C9060 * C235 + C48800 * C246) * C7764 +
            (C9060 * C241 + C48800 * C253) * C7758 +
            (C9060 * C519 + C48800 * C524) * C7765 +
            (C9060 * C529 + C48800 * C534) * C49194) *
               C49230 +
           ((C9060 * C343 + C48800 * C354) * C7763 +
            (C9060 * C349 + C48800 * C361) * C7757 +
            (C9060 * C621 + C48800 * C626) * C7764 +
            (C9060 * C631 + C48800 * C636) * C7758 +
            (C9060 * C1392 + C48800 * C1399) * C7765 +
            (C9060 * C1396 + C48800 * C1404) * C49194) *
               C49219 +
           ((C9060 * C872 + C48800 * C877) * C7763 +
            (C9060 * C882 + C48800 * C887) * C7757 +
            (C9060 * C2296 + C48800 * C2302) * C7764 +
            (C9060 * C2305 + C48800 * C2314) * C7758 +
            (C9060 * C2299 + C48800 * C2308) * C7765 +
            (C9060 * C2311 + C48800 * C2317) * C49194) *
               C49197) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                                 C49213 * C127 + C7762 * C121 + C49181 * C128) *
                                    C118 +
                                (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                                 C49213 * C141 + C7762 * C133 + C49181 * C142) *
                                    C48905) *
                                   C15279 +
                               ((C7760 * C345 + C49226 * C356 + C7761 * C344 +
                                 C49213 * C355 + C7762 * C343 + C49181 * C354) *
                                    C118 +
                                (C7760 * C351 + C49226 * C363 + C7761 * C350 +
                                 C49213 * C362 + C7762 * C349 + C49181 * C361) *
                                    C48905) *
                                   C15280 +
                               ((C7760 * C870 + C49226 * C875 + C7761 * C871 +
                                 C49213 * C876 + C7762 * C872 + C49181 * C877) *
                                    C118 +
                                (C7760 * C880 + C49226 * C885 + C7761 * C881 +
                                 C49213 * C886 + C7762 * C882 + C49181 * C887) *
                                    C48905) *
                                   C49197) *
                                  C48888 * C48871 * C110 -
                              (((C7762 * C883 + C49181 * C888 + C7761 * C882 +
                                 C49213 * C887 + C7760 * C881 + C49226 * C886) *
                                    C48905 +
                                (C7762 * C873 + C49181 * C878 + C7761 * C872 +
                                 C49213 * C877 + C7760 * C871 + C49226 * C876) *
                                    C118) *
                                   C49197 +
                               ((C7762 * C348 + C49181 * C360 + C7761 * C349 +
                                 C49213 * C361 + C7760 * C350 + C49226 * C362) *
                                    C48905 +
                                (C7762 * C342 + C49181 * C353 + C7761 * C343 +
                                 C49213 * C354 + C7760 * C344 + C49226 * C355) *
                                    C118) *
                                   C15280 +
                               ((C7762 * C134 + C49181 * C143 + C7761 * C133 +
                                 C49213 * C142 + C7760 * C132 + C49226 * C141) *
                                    C48905 +
                                (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                                 C49213 * C128 + C7760 * C120 + C49226 * C127) *
                                    C118) *
                                   C15279) *
                                  C48888 * C48871 * C111 +
                              (((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                                 C49213 * C129 + C7762 * C123 + C49181 * C130) *
                                    C118 +
                                (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                                 C49213 * C143 + C7762 * C135 + C49181 * C144) *
                                    C48905) *
                                   C15279 +
                               ((C7760 * C343 + C49226 * C354 + C7761 * C342 +
                                 C49213 * C353 + C7762 * C341 + C49181 * C352) *
                                    C118 +
                                (C7760 * C349 + C49226 * C361 + C7761 * C348 +
                                 C49213 * C360 + C7762 * C347 + C49181 * C359) *
                                    C48905) *
                                   C15280 +
                               ((C7760 * C872 + C49226 * C877 + C7761 * C873 +
                                 C49213 * C878 + C7762 * C874 + C49181 * C879) *
                                    C118 +
                                (C7760 * C882 + C49226 * C887 + C7761 * C883 +
                                 C49213 * C888 + C7762 * C884 + C49181 * C889) *
                                    C48905) *
                                   C49197) *
                                  C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C1009 +
            (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
            C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
               C15279 +
           (C10275 * C1009 + C10276 * C49229 + C9558 * C1010 + C9557 * C49217 +
            C9556 * C1011 + C9555 * C49194) *
               C15280 +
           (C10277 * C1009 + C10278 * C49229 + C10077 * C1010 +
            C10078 * C49217 + C10079 * C1011 + C10080 * C49194) *
               C49197) *
              C48888 * C48871 * C110 -
          ((C10088 * C49194 + C10087 * C1011 + C10086 * C49217 +
            C10085 * C1010 + C10282 * C49229 + C10281 * C1009) *
               C49197 +
           (C10084 * C49194 + C10083 * C1011 + C10082 * C49217 +
            C10081 * C1010 + C10280 * C49229 + C10279 * C1009) *
               C15280 +
           (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
            (C9060 * C132 + C48800 * C141) * C49229 +
            (C9060 * C120 + C48800 * C127) * C1009) *
               C15279) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C1009 +
            (C9060 * C133 + C48800 * C142) * C49229 +
            (C9060 * C235 + C48800 * C246) * C1010 +
            (C9060 * C241 + C48800 * C253) * C49217 +
            (C9060 * C519 + C48800 * C524) * C1011 +
            (C9060 * C529 + C48800 * C534) * C49194) *
               C15279 +
           ((C9060 * C343 + C48800 * C354) * C1009 +
            (C9060 * C349 + C48800 * C361) * C49229 +
            (C9060 * C621 + C48800 * C626) * C1010 +
            (C9060 * C631 + C48800 * C636) * C49217 +
            (C9060 * C1392 + C48800 * C1399) * C1011 +
            (C9060 * C1396 + C48800 * C1404) * C49194) *
               C15280 +
           ((C9060 * C872 + C48800 * C877) * C1009 +
            (C9060 * C882 + C48800 * C887) * C49229 +
            (C9060 * C2296 + C48800 * C2302) * C1010 +
            (C9060 * C2305 + C48800 * C2314) * C49217 +
            (C9060 * C2299 + C48800 * C2308) * C1011 +
            (C9060 * C2311 + C48800 * C2317) * C49194) *
               C49197) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C118 +
            (C9060 * C131 + C48800 * C140) * C48905) *
               C17808 +
           (C10275 * C118 + C10276 * C48905) * C17809 +
           (C10277 * C118 + C10278 * C48905) * C17810 +
           (C11148 * C118 + C11147 * C48905) * C17811 +
           ((C9060 * C3649 + C48800 * C3652) * C118 +
            (C9060 * C3655 + C48800 * C3658) * C48905) *
               C17812) *
              C48888 * C48871 * C110 -
          (((C9060 * C3656 + C48800 * C3659) * C48905 +
            (C9060 * C3650 + C48800 * C3653) * C118) *
               C17812 +
           ((C9060 * C2732 + C48800 * C2740) * C48905 +
            (C9060 * C2728 + C48800 * C2735) * C118) *
               C17811 +
           (C10282 * C48905 + C10281 * C118) * C17810 +
           (C10280 * C48905 + C10279 * C118) * C17809 +
           ((C9060 * C132 + C48800 * C141) * C48905 +
            (C9060 * C120 + C48800 * C127) * C118) *
               C17808) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C118 +
            (C9060 * C133 + C48800 * C142) * C48905) *
               C17808 +
           ((C9060 * C343 + C48800 * C354) * C118 +
            (C9060 * C349 + C48800 * C361) * C48905) *
               C17809 +
           ((C9060 * C872 + C48800 * C877) * C118 +
            (C9060 * C882 + C48800 * C887) * C48905) *
               C17810 +
           ((C9060 * C2727 + C48800 * C2734) * C118 +
            (C9060 * C2731 + C48800 * C2739) * C48905) *
               C17811 +
           ((C9060 * C3651 + C48800 * C3654) * C118 +
            (C9060 * C3657 + C48800 * C3660) * C48905) *
               C17812) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C48888 * C229 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C48905 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48917 * C48888 * C49189) *
                  C231 +
              (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                 C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                 C117 * C238 + C105 * C249) *
                    C118 +
                (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                 C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                 C117 * C250 + C105 * C256) *
                    C48905) *
                   C48917 * C48888 * C49189 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C48905 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48917 * C48888 * C229) *
                  C49187) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 +
                (C1229 + C1230 + C1231) * C1011 +
                (C1232 + C1233 + C1234) * C49194) *
                   C48917 * C48888 * C229 -
               ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 +
                 C1001 * C1171 + C1006 * C1164 + C1000 * C1172) *
                    C49194 +
                (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 +
                 C1001 * C1166 + C1006 * C1160 + C1000 * C1167) *
                    C1011 +
                (C1234 + C1233 + C1232) * C49217 +
                (C1231 + C1230 + C1229) * C1010 +
                (C1228 + C1227 + C1226) * C49229 +
                (C1225 + C1224 + C1223) * C1009) *
                   C48917 * C48888 * C49189) *
                  C231 +
              (((C1235 + C1236 + C1237) * C1009 +
                (C1238 + C1239 + C1240) * C49229 +
                (C1241 + C1242 + C1243) * C1010 +
                (C1244 + C1245 + C1246) * C49217 +
                (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
                 C1008 * C1161 + C49181 * C1168) *
                    C1011 +
                (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
                 C1008 * C1169 + C49181 * C1173) *
                    C49194) *
                   C48917 * C48888 * C49189 -
               ((C1246 + C1245 + C1244) * C49194 +
                (C1243 + C1242 + C1241) * C1011 +
                (C1240 + C1239 + C1238) * C49217 +
                (C1237 + C1236 + C1235) * C1010 +
                (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
                 C1006 * C132 + C1000 * C141) *
                    C49229 +
                (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
                 C1006 * C120 + C1000 * C127) *
                    C1009) *
                   C48917 * C48888 * C229) *
                  C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C1006 * C345 + C1000 * C356 + C1007 * C344 + C1001 * C355 +
              C1008 * C343 + C49181 * C354) *
                 C118 +
             (C1006 * C351 + C1000 * C363 + C1007 * C350 + C1001 * C362 +
              C1008 * C349 + C49181 * C361) *
                 C48905) *
                C49219 +
            ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
              C1008 * C872 + C49181 * C877) *
                 C118 +
             (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
              C1008 * C882 + C49181 * C887) *
                 C48905) *
                C49197) *
               C48888 * C229 -
           (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
              C1006 * C2303 + C1000 * C2312) *
                 C48905 +
             (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
              C1006 * C2294 + C1000 * C2300) *
                 C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C48888 * C49189) *
              C231 +
          ((((C1235 + C1236 + C1237) * C118 +
             (C1238 + C1239 + C1240) * C48905) *
                C49230 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49181 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49181 * C637) *
                 C48905) *
                C49219 +
            ((C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C118 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C1008 * C883 + C49181 * C888 + C1007 * C882 + C1001 * C887 +
              C1006 * C881 + C1000 * C886) *
                 C48905 +
             (C1008 * C873 + C49181 * C878 + C1007 * C872 + C1001 * C877 +
              C1006 * C871 + C1000 * C876) *
                 C118) *
                C49197 +
            ((C1008 * C348 + C49181 * C360 + C1007 * C349 + C1001 * C361 +
              C1006 * C350 + C1000 * C362) *
                 C48905 +
             (C1008 * C342 + C49181 * C353 + C1007 * C343 + C1001 * C354 +
              C1006 * C344 + C1000 * C355) *
                 C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C229 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C229 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C231 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            ((C9060 * C345 + C48800 * C356) * C7763 +
             (C9060 * C351 + C48800 * C363) * C7757 + C9558 * C7764 +
             C9557 * C7758 + C9556 * C7765 + C9555 * C49194) *
                C49219 +
            ((C9060 * C870 + C48800 * C875) * C7763 +
             (C9060 * C880 + C48800 * C885) * C7757 + C10077 * C7764 +
             C10078 * C7758 + C10079 * C7765 + C10080 * C49194) *
                C49197) *
               C48888 * C229 -
           (((C9060 * C9787 + C48800 * C9790) * C49194 +
             (C9060 * C9784 + C48800 * C9786) * C7765 + C10080 * C7758 +
             C10079 * C7764 + C10078 * C7757 + C10077 * C7763) *
                C49197 +
            (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
             C9557 * C7757 + C9558 * C7763) *
                C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C7763 + C9198 * C7757 + C9199 * C7764 + C9200 * C7758 +
             C9201 * C7765 + C9202 * C49194) *
                C49230 +
            (C10081 * C7763 + C10082 * C7757 + C10083 * C7764 + C10084 * C7758 +
             (C9060 * C1845 + C48800 * C1848) * C7765 +
             (C9060 * C1851 + C48800 * C1854) * C49194) *
                C49219 +
            (C10085 * C7763 + C10086 * C7757 + C10087 * C7764 + C10088 * C7758 +
             (C9060 * C10048 + C48800 * C10049) * C7765 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10088 * C49194 + C10087 * C7765 + C10086 * C7758 +
             C10085 * C7764 + (C9060 * C881 + C48800 * C886) * C7757 +
             (C9060 * C871 + C48800 * C876) * C7763) *
                C49197 +
            (C10084 * C49194 + C10083 * C7765 + C10082 * C7758 +
             C10081 * C7764 + (C9060 * C350 + C48800 * C362) * C7757 +
             (C9060 * C344 + C48800 * C355) * C7763) *
                C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C7760 * C345 + C49226 * C356 + C7761 * C344 + C49213 * C355 +
              C7762 * C343 + C49181 * C354) *
                 C118 +
             (C7760 * C351 + C49226 * C363 + C7761 * C350 + C49213 * C362 +
              C7762 * C349 + C49181 * C361) *
                 C48905) *
                C15280 +
            ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
              C7762 * C872 + C49181 * C877) *
                 C118 +
             (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
              C7762 * C882 + C49181 * C887) *
                 C48905) *
                C49197) *
               C48888 * C229 -
           (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
              C7760 * C2303 + C49226 * C2312) *
                 C48905 +
             (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
              C7760 * C2294 + C49226 * C2300) *
                 C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C48888 * C49189) *
              C231 +
          ((((C7973 + C7974 + C7975) * C118 +
             (C7976 + C7977 + C7978) * C48905) *
                C15279 +
            ((C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
              C7762 * C622 + C49181 * C627) *
                 C118 +
             (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
              C7762 * C632 + C49181 * C637) *
                 C48905) *
                C15280 +
            ((C7760 * C2295 + C49226 * C2301 + C7761 * C2296 + C49213 * C2302 +
              C7762 * C2577 + C49181 * C2578) *
                 C118 +
             (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 + C49213 * C2314 +
              C7762 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C7762 * C883 + C49181 * C888 + C7761 * C882 + C49213 * C887 +
              C7760 * C881 + C49226 * C886) *
                 C48905 +
             (C7762 * C873 + C49181 * C878 + C7761 * C872 + C49213 * C877 +
              C7760 * C871 + C49226 * C876) *
                 C118) *
                C49197 +
            ((C7762 * C348 + C49181 * C360 + C7761 * C349 + C49213 * C361 +
              C7760 * C350 + C49226 * C362) *
                 C48905 +
             (C7762 * C342 + C49181 * C353 + C7761 * C343 + C49213 * C354 +
              C7760 * C344 + C49226 * C355) *
                 C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C10275 * C1009 + C10276 * C49229 + C9558 * C1010 + C9557 * C49217 +
             C9556 * C1011 + C9555 * C49194) *
                C15280 +
            (C10277 * C1009 + C10278 * C49229 + C10077 * C1010 +
             C10078 * C49217 + C10079 * C1011 + C10080 * C49194) *
                C49197) *
               C48888 * C229 -
           ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
             C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
                C49197 +
            (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
             C9557 * C49229 + C9558 * C1009) *
                C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C1009 + C9198 * C49229 + C9199 * C1010 + C9200 * C49217 +
             C9201 * C1011 + C9202 * C49194) *
                C15279 +
            (C10081 * C1009 + C10082 * C49229 + C10083 * C1010 +
             C10084 * C49217 + C14290 * C1011 + C14291 * C49194) *
                C15280 +
            (C10085 * C1009 + C10086 * C49229 + C10087 * C1010 +
             C10088 * C49217 + (C9060 * C10048 + C48800 * C10049) * C1011 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10088 * C49194 + C10087 * C1011 + C10086 * C49217 +
             C10085 * C1010 + C10282 * C49229 + C10281 * C1009) *
                C49197 +
            (C10084 * C49194 + C10083 * C1011 + C10082 * C49217 +
             C10081 * C1010 + C10280 * C49229 + C10279 * C1009) *
                C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C10275 * C118 + C10276 * C48905) * C17809 +
            (C10277 * C118 + C10278 * C48905) * C17810 +
            (C11148 * C118 + C11147 * C48905) * C17811 +
            ((C9060 * C3649 + C48800 * C3652) * C118 +
             (C9060 * C3655 + C48800 * C3658) * C48905) *
                C17812) *
               C48888 * C229 -
           (((C9060 * C11131 + C48800 * C11134) * C48905 +
             (C9060 * C11128 + C48800 * C11130) * C118) *
                C17812 +
            (C10725 * C48905 + C10726 * C118) * C17811 +
            (C10078 * C48905 + C10077 * C118) * C17810 +
            (C9557 * C48905 + C9558 * C118) * C17809 +
            (C9190 * C48905 + C9189 * C118) * C17808) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C118 + C9198 * C48905) * C17808 +
            (C10081 * C118 + C10082 * C48905) * C17809 +
            (C10085 * C118 + C10086 * C48905) * C17810 +
            ((C9060 * C3218 + C48800 * C3221) * C118 +
             (C9060 * C3224 + C48800 * C3227) * C48905) *
                C17811 +
            ((C9060 * C17895 + C48800 * C17896) * C118 +
             (C9060 * C17897 + C48800 * C17898) * C48905) *
                C17812) *
               C48888 * C49189 -
           (((C9060 * C3656 + C48800 * C3659) * C48905 +
             (C9060 * C3650 + C48800 * C3653) * C118) *
                C17812 +
            ((C9060 * C2732 + C48800 * C2740) * C48905 +
             (C9060 * C2728 + C48800 * C2735) * C118) *
                C17811 +
            (C10282 * C48905 + C10281 * C118) * C17810 +
            (C10280 * C48905 + C10279 * C118) * C17809 +
            ((C9060 * C132 + C48800 * C141) * C48905 +
             (C9060 * C120 + C48800 * C127) * C118) *
                C17808) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C339 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C48905 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48917 * C49191) *
                  C48871 * C231 +
              (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                 C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                 C117 * C346 + C105 * C357) *
                    C118 +
                (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                 C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                 C117 * C358 + C105 * C364) *
                    C48905) *
                   C48917 * C49191 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C48905 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48917 * C339) *
                  C48871 * C49187) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 +
                (C1229 + C1230 + C1231) * C1011 +
                (C1232 + C1233 + C1234) * C49194) *
                   C48917 * C339 -
               ((C1008 * C1396 + C49181 * C1404 + C1007 * C1397 +
                 C1001 * C1405 + C1006 * C1398 + C1000 * C1406) *
                    C49194 +
                (C1008 * C1392 + C49181 * C1399 + C1007 * C1393 +
                 C1001 * C1400 + C1006 * C1394 + C1000 * C1401) *
                    C1011 +
                (C1008 * C631 + C49181 * C636 + C1007 * C630 + C1001 * C635 +
                 C1006 * C629 + C1000 * C634) *
                    C49217 +
                (C1008 * C621 + C49181 * C626 + C1007 * C620 + C1001 * C625 +
                 C1006 * C619 + C1000 * C624) *
                    C1010 +
                (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
                 C1006 * C351 + C1000 * C363) *
                    C49229 +
                (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
                 C1006 * C345 + C1000 * C356) *
                    C1009) *
                   C48917 * C49191) *
                  C48871 * C231 +
              (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
                 C1008 * C342 + C49181 * C353) *
                    C1009 +
                (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
                 C1008 * C348 + C49181 * C360) *
                    C49229 +
                (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
                 C1008 * C622 + C49181 * C627) *
                    C1010 +
                (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
                 C1008 * C632 + C49181 * C637) *
                    C49217 +
                (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
                 C1008 * C1395 + C49181 * C1402) *
                    C1011 +
                (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
                 C1008 * C1403 + C49181 * C1407) *
                    C49194) *
                   C48917 * C49191 -
               ((C1246 + C1245 + C1244) * C49194 +
                (C1243 + C1242 + C1241) * C1011 +
                (C1240 + C1239 + C1238) * C49217 +
                (C1237 + C1236 + C1235) * C1010 +
                (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
                 C1006 * C132 + C1000 * C141) *
                    C49229 +
                (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
                 C1006 * C120 + C1000 * C127) *
                    C1009) *
                   C48917 * C339) *
                  C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C339 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C48871 * C231 +
          ((((C2804 + C2805 + C2806) * C118 +
             (C2807 + C2808 + C2809) * C48905) *
                C49230 +
            ((C2810 + C2811 + C2812) * C118 +
             (C2813 + C2814 + C2815) * C48905) *
                C49219 +
            ((C1006 * C2728 + C1000 * C2735 + C1007 * C2727 + C1001 * C2734 +
              C1008 * C2730 + C49181 * C2737) *
                 C118 +
             (C1006 * C2732 + C1000 * C2740 + C1007 * C2731 + C1001 * C2739 +
              C1008 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C339 -
           ((C7762 * C1396 + C49181 * C1404 + C7761 * C1397 + C49213 * C1405 +
             C7760 * C1398 + C49226 * C1406) *
                C49194 +
            (C7762 * C1392 + C49181 * C1399 + C7761 * C1393 + C49213 * C1400 +
             C7760 * C1394 + C49226 * C1401) *
                C7765 +
            (C7762 * C631 + C49181 * C636 + C7761 * C630 + C49213 * C635 +
             C7760 * C629 + C49226 * C634) *
                C7758 +
            (C7762 * C621 + C49181 * C626 + C7761 * C620 + C49213 * C625 +
             C7760 * C619 + C49226 * C624) *
                C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           ((C9060 * C9288 + C48800 * C9292) * C9059 +
            (C9060 * C9286 + C48800 * C9289) * C9065 +
            (C9060 * C1850 + C48800 * C1853) * C9058 +
            (C9060 * C1844 + C48800 * C1847) * C9064 +
            (C9060 * C1398 + C48800 * C1406) * C9057 +
            (C9060 * C1394 + C48800 * C1401) * C9063 +
            (C9060 * C629 + C48800 * C634) * C9056 +
            (C9060 * C619 + C48800 * C624) * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C339 -
           (((C9060 * C10236 + C48800 * C10240) * C49194 +
             (C9060 * C10234 + C48800 * C10237) * C7765 +
             (C9060 * C3223 + C48800 * C3226) * C7758 +
             (C9060 * C3217 + C48800 * C3220) * C7764 +
             (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C48871 * C231 +
          (((C10287 + C10288 + C10263 + C10264 + C10265 + C10266) * C49230 +
            (C10289 + C10290 + C10271 + C10272 + C10273 + C10274) * C49219 +
            ((C9060 * C2728 + C48800 * C2735) * C7763 +
             (C9060 * C2732 + C48800 * C2740) * C7757 +
             (C9060 * C3218 + C48800 * C3221) * C7764 +
             (C9060 * C3224 + C48800 * C3227) * C7758 +
             (C9060 * C10235 + C48800 * C10238) * C7765 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C339 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C48871 * C231 +
          ((((C15635 + C15636 + C15637) * C118 +
             (C15638 + C15639 + C15640) * C48905) *
                C15279 +
            ((C15641 + C15642 + C15643) * C118 +
             (C15644 + C15645 + C15646) * C48905) *
                C15280 +
            ((C7760 * C2728 + C49226 * C2735 + C7761 * C2727 + C49213 * C2734 +
              C7762 * C2730 + C49181 * C2737) *
                 C118 +
             (C7760 * C2732 + C49226 * C2740 + C7761 * C2731 + C49213 * C2739 +
              C7762 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C48871 * C231 +
          (((C16908 + C16909 + C16910 + C16911 + C16912 + C16913) * C15279 +
            (C16914 + C16915 + C16916 + C16917 + C16918 + C16919) * C15280 +
            ((C9060 * C2728 + C48800 * C2735) * C1009 +
             (C9060 * C2732 + C48800 * C2740) * C49229 +
             (C9060 * C3218 + C48800 * C3221) * C1010 +
             (C9060 * C3224 + C48800 * C3227) * C49217 +
             (C9060 * C10235 + C48800 * C10238) * C1011 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
               C339 -
           (((C9060 * C17983 + C48800 * C17987) * C48905 +
             (C9060 * C17981 + C48800 * C17984) * C118) *
                C17812 +
            (C18019 + C18018) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49191) *
              C48871 * C231 +
          (((C18000 + C18001) * C17808 + (C18002 + C18003) * C17809 +
            (C18020 + C18021) * C17810 + (C18022 + C18023) * C17811 +
            ((C9060 * C17982 + C48800 * C17985) * C118 +
             (C9060 * C17986 + C48800 * C17988) * C48905) *
                C17812) *
               C49191 -
           ((C18023 + C18022) * C17812 + (C18021 + C18020) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            ((C9060 * C132 + C48800 * C141) * C48905 +
             (C9060 * C120 + C48800 * C127) * C118) *
                C17808) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C48888 * C447 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C48905 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48917 * C48888 * C49189) *
                  C449 +
              (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                 C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                 C117 * C238 + C105 * C249) *
                    C118 +
                (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                 C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                 C117 * C250 + C105 * C256) *
                    C48905) *
                   C48917 * C48888 * C49189 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C48905 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48917 * C48888 * C447) *
                  C49187) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 +
                (C1229 + C1230 + C1231) * C1011 +
                (C1232 + C1233 + C1234) * C49194) *
                   C48917 * C48888 * C447 -
               ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 +
                 C1001 * C1171 + C1006 * C1164 + C1000 * C1172) *
                    C49194 +
                (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 +
                 C1001 * C1166 + C1006 * C1160 + C1000 * C1167) *
                    C1011 +
                (C1234 + C1233 + C1232) * C49217 +
                (C1231 + C1230 + C1229) * C1010 +
                (C1228 + C1227 + C1226) * C49229 +
                (C1225 + C1224 + C1223) * C1009) *
                   C48917 * C48888 * C49189) *
                  C449 +
              (((C1235 + C1236 + C1237) * C1009 +
                (C1238 + C1239 + C1240) * C49229 +
                (C1241 + C1242 + C1243) * C1010 +
                (C1244 + C1245 + C1246) * C49217 +
                (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
                 C1008 * C1161 + C49181 * C1168) *
                    C1011 +
                (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
                 C1008 * C1169 + C49181 * C1173) *
                    C49194) *
                   C48917 * C48888 * C49189 -
               ((C1246 + C1245 + C1244) * C49194 +
                (C1243 + C1242 + C1241) * C1011 +
                (C1240 + C1239 + C1238) * C49217 +
                (C1237 + C1236 + C1235) * C1010 +
                (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
                 C1006 * C132 + C1000 * C141) *
                    C49229 +
                (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
                 C1006 * C120 + C1000 * C127) *
                    C1009) *
                   C48917 * C48888 * C447) *
                  C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C48888 * C447 -
           (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
              C1006 * C2303 + C1000 * C2312) *
                 C48905 +
             (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
              C1006 * C2294 + C1000 * C2300) *
                 C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C48888 * C49189) *
              C449 +
          ((((C1235 + C1236 + C1237) * C118 +
             (C1238 + C1239 + C1240) * C48905) *
                C49230 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49181 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49181 * C637) *
                 C48905) *
                C49219 +
            ((C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C118 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C447 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C447 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C449 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C48888 * C447 -
           (((C9060 * C9787 + C48800 * C9790) * C49194 +
             (C9060 * C9784 + C48800 * C9786) * C7765 + C10080 * C7758 +
             C10079 * C7764 + C10078 * C7757 + C10077 * C7763) *
                C49197 +
            (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
             C9557 * C7757 + C9558 * C7763) *
                C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C7763 + C9198 * C7757 + C9199 * C7764 + C9200 * C7758 +
             C9201 * C7765 + C9202 * C49194) *
                C49230 +
            (C10081 * C7763 + C10082 * C7757 + C10083 * C7764 + C10084 * C7758 +
             (C9060 * C1845 + C48800 * C1848) * C7765 +
             (C9060 * C1851 + C48800 * C1854) * C49194) *
                C49219 +
            (C10085 * C7763 + C10086 * C7757 + C10087 * C7764 + C10088 * C7758 +
             (C9060 * C10048 + C48800 * C10049) * C7765 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C48888 * C447 -
           (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
              C7760 * C2303 + C49226 * C2312) *
                 C48905 +
             (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
              C7760 * C2294 + C49226 * C2300) *
                 C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C48888 * C49189) *
              C449 +
          ((((C7973 + C7974 + C7975) * C118 +
             (C7976 + C7977 + C7978) * C48905) *
                C15279 +
            ((C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
              C7762 * C622 + C49181 * C627) *
                 C118 +
             (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
              C7762 * C632 + C49181 * C637) *
                 C48905) *
                C15280 +
            ((C7760 * C2295 + C49226 * C2301 + C7761 * C2296 + C49213 * C2302 +
              C7762 * C2577 + C49181 * C2578) *
                 C118 +
             (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 + C49213 * C2314 +
              C7762 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C48888 * C447 -
           ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
             C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
                C49197 +
            (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
             C9557 * C49229 + C9558 * C1009) *
                C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C1009 + C9198 * C49229 + C9199 * C1010 + C9200 * C49217 +
             C9201 * C1011 + C9202 * C49194) *
                C15279 +
            (C10081 * C1009 + C10082 * C49229 + C10083 * C1010 +
             C10084 * C49217 + C14290 * C1011 + C14291 * C49194) *
                C15280 +
            (C10085 * C1009 + C10086 * C49229 + C10087 * C1010 +
             C10088 * C49217 + (C9060 * C10048 + C48800 * C10049) * C1011 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
               C48888 * C447 -
           (((C9060 * C11131 + C48800 * C11134) * C48905 +
             (C9060 * C11128 + C48800 * C11130) * C118) *
                C17812 +
            (C10725 * C48905 + C10726 * C118) * C17811 +
            (C10078 * C48905 + C10077 * C118) * C17810 +
            (C9557 * C48905 + C9558 * C118) * C17809 +
            (C9190 * C48905 + C9189 * C118) * C17808) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C118 + C9198 * C48905) * C17808 +
            (C10081 * C118 + C10082 * C48905) * C17809 +
            (C10085 * C118 + C10086 * C48905) * C17810 +
            ((C9060 * C3218 + C48800 * C3221) * C118 +
             (C9060 * C3224 + C48800 * C3227) * C48905) *
                C17811 +
            ((C9060 * C17895 + C48800 * C17896) * C118 +
             (C9060 * C17897 + C48800 * C17898) * C48905) *
                C17812) *
               C48888 * C49189 -
           ((C18023 + C18022) * C17812 + (C18021 + C18020) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            ((C9060 * C132 + C48800 * C141) * C48905 +
             (C9060 * C120 + C48800 * C127) * C118) *
                C17808) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C48905) *
                  C48917 * C48888 * C513 -
              ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                C113 * C243 + C101 * C255) *
                   C48905 +
               (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                C113 * C237 + C101 * C248) *
                   C118) *
                  C48917 * C48888 * C514 +
              ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
                C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
                C117 * C521 + C105 * C526) *
                   C118 +
               (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
                C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
                C117 * C531 + C105 * C536) *
                   C48905) *
                  C48917 * C48888 * C515) *
             C48837 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                C1008 * C121 + C49181 * C128) *
                   C1009 +
               (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                C1008 * C133 + C49181 * C142) *
                   C49229 +
               (C1223 + C1224 + C1225) * C1010 +
               (C1226 + C1227 + C1228) * C49217 + C1691 * C1011 +
               C1692 * C49194) *
                  C48917 * C48888 * C513 -
              ((C1693 + C1694 + C1695) * C49194 +
               (C1696 + C1697 + C1698) * C1011 +
               (C1234 + C1233 + C1232) * C49217 +
               (C1231 + C1230 + C1229) * C1010 +
               (C1228 + C1227 + C1226) * C49229 +
               (C1225 + C1224 + C1223) * C1009) *
                  C48917 * C48888 * C514 +
              (C1691 * C1009 + C1692 * C49229 +
               (C1698 + C1697 + C1696) * C1010 +
               (C1695 + C1694 + C1693) * C49217 +
               (C1006 * C1664 + C1000 * C1667 + C1007 * C1665 + C1001 * C1668 +
                C1008 * C1666 + C49181 * C1669) *
                   C1011 +
               (C1006 * C1670 + C1000 * C1673 + C1007 * C1671 + C1001 * C1674 +
                C1008 * C1672 + C49181 * C1675) *
                   C49194) *
                  C48917 * C48888 * C515) *
             C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C48905) *
               C49230 +
           ((C2792 + C2793 + C2794) * C118 + (C2795 + C2796 + C2797) * C48905) *
               C49219 +
           ((C2798 + C2799 + C2800) * C118 + (C2801 + C2802 + C2803) * C48905) *
               C49197) *
              C48888 * C513 -
          (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C48905 +
            (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C118) *
               C49197 +
           ((C1887 + C1888 + C1889) * C48905 + (C1890 + C1891 + C1892) * C118) *
               C49219 +
           ((C1228 + C1227 + C1226) * C48905 + (C1225 + C1224 + C1223) * C118) *
               C49230) *
              C48888 * C514 +
          ((C1691 * C118 + C1692 * C48905) * C49230 +
           ((C1886 + C1885 + C1884) * C118 + (C1883 + C1882 + C1881) * C48905) *
               C49219 +
           ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
             C1008 * C2299 + C49181 * C2308) *
                C118 +
            (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
             C1008 * C2311 + C49181 * C2317) *
                C48905) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C48888 * C513 -
          ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
           (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
           (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
              C48917 * C48888 * C514 +
          (C8401 * C7763 + C8402 * C7757 + (C8408 + C8407 + C8406) * C7764 +
           (C8405 + C8404 + C8403) * C7758 +
           (C7760 * C1664 + C49226 * C1667 + C7761 * C1665 + C49213 * C1668 +
            C7762 * C1666 + C49181 * C1669) *
               C7765 +
           (C7760 * C1670 + C49226 * C1673 + C7761 * C1671 + C49213 * C1674 +
            C7762 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C48888 * C513 -
          (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
           C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
           C9190 * C9055 + C9189 * C9061) *
              C48917 * C48888 * C514 +
          (C9191 * C9061 + C9192 * C9055 + C9193 * C9062 + C9194 * C9056 +
           C9195 * C9063 + C9196 * C9057 + C9448 * C9064 + C9447 * C9058 +
           (C9060 * C9438 + C48800 * C9439) * C9065 +
           (C9060 * C9440 + C48800 * C9441) * C9059) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C7763 +
            (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
            C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
               C49230 +
           (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
           (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
              C48888 * C513 -
          ((C10551 * C49194 + C10552 * C7765 + C10080 * C7758 + C10079 * C7764 +
            C10078 * C7757 + C10077 * C7763) *
               C49197 +
           (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
            C9557 * C7757 + C9558 * C7763) *
               C49219 +
           (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
            C9190 * C7757 + C9189 * C7763) *
               C49230) *
              C48888 * C514 +
          ((C9191 * C7763 + C9192 * C7757 + C9193 * C7764 + C9194 * C7758 +
            C9195 * C7765 + C9196 * C49194) *
               C49230 +
           (C9556 * C7763 + C9555 * C7757 + C9554 * C7764 + C9553 * C7758 +
            C9552 * C7765 + C9551 * C49194) *
               C49219 +
           (C10079 * C7763 + C10080 * C7757 + C10552 * C7764 + C10551 * C7758 +
            (C9060 * C9785 + C48800 * C9788) * C7765 +
            (C9060 * C9789 + C48800 * C9791) * C49194) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C118 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C48905) *
               C15279 +
           ((C15623 + C15624 + C15625) * C118 +
            (C15626 + C15627 + C15628) * C48905) *
               C15280 +
           ((C15629 + C15630 + C15631) * C118 +
            (C15632 + C15633 + C15634) * C48905) *
               C49197) *
              C48888 * C513 -
          (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
             C7760 * C2303 + C49226 * C2312) *
                C48905 +
            (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
             C7760 * C2294 + C49226 * C2300) *
                C118) *
               C49197 +
           ((C8585 + C8586 + C8587) * C48905 + (C8588 + C8589 + C8590) * C118) *
               C15280 +
           ((C7966 + C7965 + C7964) * C48905 + (C7963 + C7962 + C7961) * C118) *
               C15279) *
              C48888 * C514 +
          ((C8401 * C118 + C8402 * C48905) * C15279 +
           ((C8584 + C8583 + C8582) * C118 + (C8581 + C8580 + C8579) * C48905) *
               C15280 +
           ((C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
             C7762 * C2299 + C49181 * C2308) *
                C118 +
            (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
             C7762 * C2311 + C49181 * C2317) *
                C48905) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C1009 +
            (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
            C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
               C15279 +
           (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
           (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
              C48888 * C513 -
          ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
            C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
               C49197 +
           (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
            C9557 * C49229 + C9558 * C1009) *
               C15280 +
           (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
            C9190 * C49229 + C9189 * C1009) *
               C15279) *
              C48888 * C514 +
          ((C9191 * C1009 + C9192 * C49229 + C9193 * C1010 + C9194 * C49217 +
            C9195 * C1011 + C9196 * C49194) *
               C15279 +
           (C9556 * C1009 + C9555 * C49229 + C9554 * C1010 + C9553 * C49217 +
            C9552 * C1011 + C9551 * C49194) *
               C15280 +
           (C10079 * C1009 + C10080 * C49229 + C10552 * C1010 +
            C10551 * C49217 + (C9060 * C9785 + C48800 * C9788) * C1011 +
            (C9060 * C9789 + C48800 * C9791) * C49194) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C118 +
            (C9060 * C131 + C48800 * C140) * C48905) *
               C17808 +
           (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
           (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
              C48888 * C513 -
          (((C9060 * C11131 + C48800 * C11134) * C48905 +
            (C9060 * C11128 + C48800 * C11130) * C118) *
               C17812 +
           (C10725 * C48905 + C10726 * C118) * C17811 +
           (C10078 * C48905 + C10077 * C118) * C17810 +
           (C9557 * C48905 + C9558 * C118) * C17809 +
           (C9190 * C48905 + C9189 * C118) * C17808) *
              C48888 * C514 +
          ((C9191 * C118 + C9192 * C48905) * C17808 +
           (C9556 * C118 + C9555 * C48905) * C17809 +
           (C10079 * C118 + C10080 * C48905) * C17810 +
           (C10724 * C118 + C10723 * C48905) * C17811 +
           ((C9060 * C11129 + C48800 * C11132) * C118 +
            (C9060 * C11133 + C48800 * C11135) * C48905) *
               C17812) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C339 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C48905 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48917 * C49191) *
                  C447 +
              (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                 C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                 C117 * C623 + C105 * C628) *
                    C118 +
                (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                 C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                 C117 * C633 + C105 * C638) *
                    C48905) *
                   C48917 * C49191 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C48905 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48917 * C339) *
                  C49189) *
             C48837 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 + C1691 * C1011 +
                C1692 * C49194) *
                   C48917 * C339 -
               ((C1881 + C1882 + C1883) * C49194 +
                (C1884 + C1885 + C1886) * C1011 +
                (C1887 + C1888 + C1889) * C49217 +
                (C1890 + C1891 + C1892) * C1010 +
                (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
                 C1006 * C351 + C1000 * C363) *
                    C49229 +
                (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
                 C1006 * C345 + C1000 * C356) *
                    C1009) *
                   C48917 * C49191) *
                  C447 +
              (((C1892 + C1891 + C1890) * C1009 +
                (C1889 + C1888 + C1887) * C49229 +
                (C1886 + C1885 + C1884) * C1010 +
                (C1883 + C1882 + C1881) * C49217 +
                (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
                 C1008 * C1846 + C49181 * C1849) *
                    C1011 +
                (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
                 C1008 * C1852 + C49181 * C1855) *
                    C49194) *
                   C48917 * C49191 -
               ((C1693 + C1694 + C1695) * C49194 +
                (C1696 + C1697 + C1698) * C1011 +
                (C1234 + C1233 + C1232) * C49217 +
                (C1231 + C1230 + C1229) * C1010 +
                (C1228 + C1227 + C1226) * C49229 +
                (C1225 + C1224 + C1223) * C1009) *
                   C48917 * C339) *
                  C49189) *
             C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C339 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C447 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C48905) *
                C49230 +
            ((C3242 + C3243 + C3244) * C118 +
             (C3245 + C3246 + C3247) * C48905) *
                C49219 +
            ((C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
              C1008 * C3219 + C49181 * C3222) *
                 C118 +
             (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
              C1008 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C3247 + C3246 + C3245) * C48905 +
             (C3244 + C3243 + C3242) * C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C339 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C447 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C447 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C447 +
          (((C10711 + C10712 + C10713 + C10714 + C10715 + C10716) * C49230 +
            (C10717 + C10718 + C10719 + C10720 + C10721 + C10722) * C49219 +
            (C10726 * C7763 + C10725 * C7757 + C10724 * C7764 + C10723 * C7758 +
             (C9060 * C10698 + C48800 * C10699) * C7765 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C10722 + C10721 + C10720 + C10719 + C10718 + C10717) * C49197 +
            (C10716 + C10715 + C10714 + C10713 + C10712 + C10711) * C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C339 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C447 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C48905) *
                C15279 +
            ((C16061 + C16062 + C16063) * C118 +
             (C16064 + C16065 + C16066) * C48905) *
                C15280 +
            ((C7760 * C3217 + C49226 * C3220 + C7761 * C3218 + C49213 * C3221 +
              C7762 * C3219 + C49181 * C3222) *
                 C118 +
             (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 + C49213 * C3227 +
              C7762 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C16066 + C16065 + C16064) * C48905 +
             (C16063 + C16062 + C16061) * C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C447 +
          (((C17322 + C17323 + C17324 + C17325 + C17326 + C17327) * C15279 +
            (C17328 + C17329 + C17330 + C17331 + C17332 + C17333) * C15280 +
            (C10726 * C1009 + C10725 * C49229 + C10724 * C1010 +
             C10723 * C49217 + (C9060 * C10698 + C48800 * C10699) * C1011 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C17333 + C17332 + C17331 + C17330 + C17329 + C17328) * C49197 +
            (C17327 + C17326 + C17325 + C17324 + C17323 + C17322) * C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
               C339 -
           (((C9060 * C17983 + C48800 * C17987) * C48905 +
             (C9060 * C17981 + C48800 * C17984) * C118) *
                C17812 +
            (C18019 + C18018) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49191) *
              C447 +
          (((C18254 + C18255) * C17808 + (C18256 + C18257) * C17809 +
            (C18258 + C18259) * C17810 + (C18266 + C18267) * C17811 +
            ((C9060 * C18249 + C48800 * C18250) * C118 +
             (C9060 * C18251 + C48800 * C18252) * C48905) *
                C17812) *
               C49191 -
           ((C18267 + C18266) * C17812 + (C18259 + C18258) * C17811 +
            (C18257 + C18256) * C17810 + (C18255 + C18254) * C17809 +
            (C9190 * C48905 + C9189 * C118) * C17808) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C721 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C48905 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48917 * C49191) *
                  C48871 * C449 +
              (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                 C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                 C117 * C346 + C105 * C357) *
                    C118 +
                (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                 C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                 C117 * C358 + C105 * C364) *
                    C48905) *
                   C48917 * C49191 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C48905 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48917 * C721) *
                  C48871 * C49187) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 + C1691 * C1011 +
                C1692 * C49194) *
                   C48917 * C721 -
               ((C1881 + C1882 + C1883) * C49194 +
                (C1884 + C1885 + C1886) * C1011 +
                (C1887 + C1888 + C1889) * C49217 +
                (C1890 + C1891 + C1892) * C1010 +
                (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
                 C1006 * C351 + C1000 * C363) *
                    C49229 +
                (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
                 C1006 * C345 + C1000 * C356) *
                    C1009) *
                   C48917 * C49191) *
                  C48871 * C449 +
              (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
                 C1008 * C342 + C49181 * C353) *
                    C1009 +
                (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
                 C1008 * C348 + C49181 * C360) *
                    C49229 +
                (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
                 C1008 * C622 + C49181 * C627) *
                    C1010 +
                (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
                 C1008 * C632 + C49181 * C637) *
                    C49217 +
                (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
                 C1008 * C1395 + C49181 * C1402) *
                    C1011 +
                (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
                 C1008 * C1403 + C49181 * C1407) *
                    C49194) *
                   C48917 * C49191 -
               ((C1246 + C1245 + C1244) * C49194 +
                (C1243 + C1242 + C1241) * C1011 +
                (C1240 + C1239 + C1238) * C49217 +
                (C1237 + C1236 + C1235) * C1010 +
                (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
                 C1006 * C132 + C1000 * C141) *
                    C49229 +
                (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
                 C1006 * C120 + C1000 * C127) *
                    C1009) *
                   C48917 * C721) *
                  C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C721 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C48871 * C449 +
          ((((C2804 + C2805 + C2806) * C118 +
             (C2807 + C2808 + C2809) * C48905) *
                C49230 +
            ((C2810 + C2811 + C2812) * C118 +
             (C2813 + C2814 + C2815) * C48905) *
                C49219 +
            ((C1006 * C2728 + C1000 * C2735 + C1007 * C2727 + C1001 * C2734 +
              C1008 * C2730 + C49181 * C2737) *
                 C118 +
             (C1006 * C2732 + C1000 * C2740 + C1007 * C2731 + C1001 * C2739 +
              C1008 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C48871 * C449 +
          (((C10287 + C10288 + C10263 + C10264 + C10265 + C10266) * C49230 +
            (C10289 + C10290 + C10271 + C10272 + C10273 + C10274) * C49219 +
            ((C9060 * C2728 + C48800 * C2735) * C7763 +
             (C9060 * C2732 + C48800 * C2740) * C7757 +
             (C9060 * C3218 + C48800 * C3221) * C7764 +
             (C9060 * C3224 + C48800 * C3227) * C7758 +
             (C9060 * C10235 + C48800 * C10238) * C7765 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C721 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C48871 * C449 +
          ((((C15635 + C15636 + C15637) * C118 +
             (C15638 + C15639 + C15640) * C48905) *
                C15279 +
            ((C15641 + C15642 + C15643) * C118 +
             (C15644 + C15645 + C15646) * C48905) *
                C15280 +
            ((C7760 * C2728 + C49226 * C2735 + C7761 * C2727 + C49213 * C2734 +
              C7762 * C2730 + C49181 * C2737) *
                 C118 +
             (C7760 * C2732 + C49226 * C2740 + C7761 * C2731 + C49213 * C2739 +
              C7762 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C48871 * C449 +
          (((C16908 + C16909 + C16910 + C16911 + C16912 + C16913) * C15279 +
            (C16914 + C16915 + C16916 + C16917 + C16918 + C16919) * C15280 +
            ((C9060 * C2728 + C48800 * C2735) * C1009 +
             (C9060 * C2732 + C48800 * C2740) * C49229 +
             (C9060 * C3218 + C48800 * C3221) * C1010 +
             (C9060 * C3224 + C48800 * C3227) * C49217 +
             (C9060 * C10235 + C48800 * C10238) * C1011 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
               C721 -
           (((C9060 * C17983 + C48800 * C17987) * C48905 +
             (C9060 * C17981 + C48800 * C17984) * C118) *
                C17812 +
            (C18019 + C18018) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49191) *
              C48871 * C449 +
          (((C18000 + C18001) * C17808 + (C18002 + C18003) * C17809 +
            (C18020 + C18021) * C17810 + (C18022 + C18023) * C17811 +
            ((C9060 * C17982 + C48800 * C17985) * C118 +
             (C9060 * C17986 + C48800 * C17988) * C48905) *
                C17812) *
               C49191 -
           ((C18023 + C18022) * C17812 + (C18021 + C18020) * C17811 +
            (C18003 + C18002) * C17810 + (C18001 + C18000) * C17809 +
            ((C9060 * C132 + C48800 * C141) * C48905 +
             (C9060 * C120 + C48800 * C127) * C118) *
                C17808) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C48905) *
                   C48917 * C721 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C48905 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48917 * C49191) *
                  C229 +
              (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                 C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                 C117 * C623 + C105 * C628) *
                    C118 +
                (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                 C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                 C117 * C633 + C105 * C638) *
                    C48905) *
                   C48917 * C49191 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C48905 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48917 * C721) *
                  C49189) *
             C48837 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49181 * C128) *
                    C1009 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49181 * C142) *
                    C49229 +
                (C1223 + C1224 + C1225) * C1010 +
                (C1226 + C1227 + C1228) * C49217 + C1691 * C1011 +
                C1692 * C49194) *
                   C48917 * C721 -
               ((C1881 + C1882 + C1883) * C49194 +
                (C1884 + C1885 + C1886) * C1011 +
                (C1887 + C1888 + C1889) * C49217 +
                (C1890 + C1891 + C1892) * C1010 +
                (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
                 C1006 * C351 + C1000 * C363) *
                    C49229 +
                (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
                 C1006 * C345 + C1000 * C356) *
                    C1009) *
                   C48917 * C49191) *
                  C229 +
              (((C1892 + C1891 + C1890) * C1009 +
                (C1889 + C1888 + C1887) * C49229 +
                (C1886 + C1885 + C1884) * C1010 +
                (C1883 + C1882 + C1881) * C49217 +
                (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
                 C1008 * C1846 + C49181 * C1849) *
                    C1011 +
                (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
                 C1008 * C1852 + C49181 * C1855) *
                    C49194) *
                   C48917 * C49191 -
               ((C1693 + C1694 + C1695) * C49194 +
                (C1696 + C1697 + C1698) * C1011 +
                (C1234 + C1233 + C1232) * C49217 +
                (C1231 + C1230 + C1229) * C1010 +
                (C1228 + C1227 + C1226) * C49229 +
                (C1225 + C1224 + C1223) * C1009) *
                   C48917 * C721) *
                  C49189) *
             C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C721 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C229 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C48905) *
                C49230 +
            ((C3242 + C3243 + C3244) * C118 +
             (C3245 + C3246 + C3247) * C48905) *
                C49219 +
            ((C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
              C1008 * C3219 + C49181 * C3222) *
                 C118 +
             (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
              C1008 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C3247 + C3246 + C3245) * C48905 +
             (C3244 + C3243 + C3242) * C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C229 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C229 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C229 +
          (((C10711 + C10712 + C10713 + C10714 + C10715 + C10716) * C49230 +
            (C10717 + C10718 + C10719 + C10720 + C10721 + C10722) * C49219 +
            (C10726 * C7763 + C10725 * C7757 + C10724 * C7764 + C10723 * C7758 +
             (C9060 * C10698 + C48800 * C10699) * C7765 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C10722 + C10721 + C10720 + C10719 + C10718 + C10717) * C49197 +
            (C10716 + C10715 + C10714 + C10713 + C10712 + C10711) * C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C721 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C229 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C48905) *
                C15279 +
            ((C16061 + C16062 + C16063) * C118 +
             (C16064 + C16065 + C16066) * C48905) *
                C15280 +
            ((C7760 * C3217 + C49226 * C3220 + C7761 * C3218 + C49213 * C3221 +
              C7762 * C3219 + C49181 * C3222) *
                 C118 +
             (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 + C49213 * C3227 +
              C7762 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C16066 + C16065 + C16064) * C48905 +
             (C16063 + C16062 + C16061) * C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C229 +
          (((C17322 + C17323 + C17324 + C17325 + C17326 + C17327) * C15279 +
            (C17328 + C17329 + C17330 + C17331 + C17332 + C17333) * C15280 +
            (C10726 * C1009 + C10725 * C49229 + C10724 * C1010 +
             C10723 * C49217 + (C9060 * C10698 + C48800 * C10699) * C1011 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C17333 + C17332 + C17331 + C17330 + C17329 + C17328) * C49197 +
            (C17327 + C17326 + C17325 + C17324 + C17323 + C17322) * C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C118 +
             (C9060 * C131 + C48800 * C140) * C48905) *
                C17808 +
            (C17990 + C17991) * C17809 + (C17992 + C17993) * C17810 +
            (C17994 + C17995) * C17811 + (C18018 + C18019) * C17812) *
               C721 -
           (((C9060 * C17983 + C48800 * C17987) * C48905 +
             (C9060 * C17981 + C48800 * C17984) * C118) *
                C17812 +
            (C18019 + C18018) * C17811 + (C17995 + C17994) * C17810 +
            (C17993 + C17992) * C17809 + (C17991 + C17990) * C17808) *
               C49191) *
              C229 +
          (((C18254 + C18255) * C17808 + (C18256 + C18257) * C17809 +
            (C18258 + C18259) * C17810 + (C18266 + C18267) * C17811 +
            ((C9060 * C18249 + C48800 * C18250) * C118 +
             (C9060 * C18251 + C48800 * C18252) * C48905) *
                C17812) *
               C49191 -
           ((C18267 + C18266) * C17812 + (C18259 + C18258) * C17811 +
            (C18257 + C18256) * C17810 + (C18255 + C18254) * C17809 +
            (C9190 * C48905 + C9189 * C118) * C17808) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C48905) *
                  C48917 * C867 -
              ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                C113 * C351 + C101 * C363) *
                   C48905 +
               (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                C113 * C345 + C101 * C356) *
                   C118) *
                  C48917 * C868 +
              ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
                C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
                C117 * C874 + C105 * C879) *
                   C118 +
               (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
                C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
                C117 * C884 + C105 * C889) *
                   C48905) *
                  C48917 * C869) *
             C48871 * C48837 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                C1008 * C121 + C49181 * C128) *
                   C1009 +
               (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                C1008 * C133 + C49181 * C142) *
                   C49229 +
               (C1223 + C1224 + C1225) * C1010 +
               (C1226 + C1227 + C1228) * C49217 + C1691 * C1011 +
               C1692 * C49194) *
                  C48917 * C867 -
              ((C1881 + C1882 + C1883) * C49194 +
               (C1884 + C1885 + C1886) * C1011 +
               (C1887 + C1888 + C1889) * C49217 +
               (C1890 + C1891 + C1892) * C1010 +
               (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
                C1006 * C351 + C1000 * C363) *
                   C49229 +
               (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
                C1006 * C345 + C1000 * C356) *
                   C1009) *
                  C48917 * C868 +
              ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
                C1008 * C872 + C49181 * C877) *
                   C1009 +
               (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
                C1008 * C882 + C49181 * C887) *
                   C49229 +
               (C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
                C1008 * C2296 + C49181 * C2302) *
                   C1010 +
               (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
                C1008 * C2305 + C49181 * C2314) *
                   C49217 +
               (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
                C1008 * C2299 + C49181 * C2308) *
                   C1011 +
               (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
                C1008 * C2311 + C49181 * C2317) *
                   C49194) *
                  C48917 * C869) *
             C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C48905) *
               C49230 +
           ((C2792 + C2793 + C2794) * C118 + (C2795 + C2796 + C2797) * C48905) *
               C49219 +
           C3686 * C49197) *
              C867 -
          (((C3678 + C3679 + C3680) * C48905 + (C3681 + C3682 + C3683) * C118) *
               C49197 +
           ((C2803 + C2802 + C2801) * C48905 + (C2800 + C2799 + C2798) * C118) *
               C49219 +
           ((C2797 + C2796 + C2795) * C48905 + (C2794 + C2793 + C2792) * C118) *
               C49230) *
              C868 +
          (C3686 * C49230 +
           ((C3683 + C3682 + C3681) * C118 + (C3680 + C3679 + C3678) * C48905) *
               C49219 +
           ((C1006 * C3649 + C1000 * C3652 + C1007 * C3650 + C1001 * C3653 +
             C1008 * C3651 + C49181 * C3654) *
                C118 +
            (C1006 * C3655 + C1000 * C3658 + C1007 * C3656 + C1001 * C3659 +
             C1008 * C3657 + C49181 * C3660) *
                C48905) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C867 -
          ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
           (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
           (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
            C7760 * C351 + C49226 * C363) *
               C7757 +
           (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
            C7760 * C345 + C49226 * C356) *
               C7763) *
              C48917 * C868 +
          ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
            C7762 * C872 + C49181 * C877) *
               C7763 +
           (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
            C7762 * C882 + C49181 * C887) *
               C7757 +
           (C7760 * C2294 + C49226 * C2300 + C7761 * C2295 + C49213 * C2301 +
            C7762 * C2296 + C49181 * C2302) *
               C7764 +
           (C7760 * C2303 + C49226 * C2312 + C7761 * C2304 + C49213 * C2313 +
            C7762 * C2305 + C49181 * C2314) *
               C7758 +
           (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
            C7762 * C2299 + C49181 * C2308) *
               C7765 +
           (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
            C7762 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C867 -
          (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
           C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
           (C9060 * C351 + C48800 * C363) * C9055 +
           (C9060 * C345 + C48800 * C356) * C9061) *
              C48917 * C868 +
          ((C9060 * C870 + C48800 * C875) * C9061 +
           (C9060 * C880 + C48800 * C885) * C9055 +
           (C9060 * C2294 + C48800 * C2300) * C9062 +
           (C9060 * C2303 + C48800 * C2312) * C9056 +
           (C9060 * C2297 + C48800 * C2306) * C9063 +
           (C9060 * C2309 + C48800 * C2315) * C9057 +
           (C9060 * C9784 + C48800 * C9786) * C9064 +
           (C9060 * C9787 + C48800 * C9790) * C9058 +
           (C9060 * C9785 + C48800 * C9788) * C9065 +
           (C9060 * C9789 + C48800 * C9791) * C9059) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C7763 +
            (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
            C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
               C49230 +
           (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
           C11153 * C49197) *
              C867 -
          ((C11138 + C11139 + C11140 + C11141 + C11150 + C11151) * C49197 +
           (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
           (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
              C868 +
          (C11153 * C49230 +
           (C11151 + C11150 + C11141 + C11140 + C11139 + C11138) * C49219 +
           ((C9060 * C3649 + C48800 * C3652) * C7763 +
            (C9060 * C3655 + C48800 * C3658) * C7757 +
            (C9060 * C11128 + C48800 * C11130) * C7764 +
            (C9060 * C11131 + C48800 * C11134) * C7758 +
            (C9060 * C11129 + C48800 * C11132) * C7765 +
            (C9060 * C11133 + C48800 * C11135) * C49194) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C118 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C48905) *
               C15279 +
           ((C15623 + C15624 + C15625) * C118 +
            (C15626 + C15627 + C15628) * C48905) *
               C15280 +
           C16493 * C49197) *
              C867 -
          (((C16485 + C16486 + C16487) * C48905 +
            (C16488 + C16489 + C16490) * C118) *
               C49197 +
           ((C15634 + C15633 + C15632) * C48905 +
            (C15631 + C15630 + C15629) * C118) *
               C15280 +
           ((C15628 + C15627 + C15626) * C48905 +
            (C15625 + C15624 + C15623) * C118) *
               C15279) *
              C868 +
          (C16493 * C15279 +
           ((C16490 + C16489 + C16488) * C118 +
            (C16487 + C16486 + C16485) * C48905) *
               C15280 +
           ((C7760 * C3649 + C49226 * C3652 + C7761 * C3650 + C49213 * C3653 +
             C7762 * C3651 + C49181 * C3654) *
                C118 +
            (C7760 * C3655 + C49226 * C3658 + C7761 * C3656 + C49213 * C3659 +
             C7762 * C3657 + C49181 * C3660) *
                C48905) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C1009 +
            (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
            C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
               C15279 +
           (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
           C17746 * C49197) *
              C867 -
          ((C17737 + C17738 + C17739 + C17740 + C17741 + C17742) * C49197 +
           (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
           (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
              C868 +
          (C17746 * C15279 +
           (C17742 + C17741 + C17740 + C17739 + C17738 + C17737) * C15280 +
           ((C9060 * C3649 + C48800 * C3652) * C1009 +
            (C9060 * C3655 + C48800 * C3658) * C49229 +
            (C9060 * C11128 + C48800 * C11130) * C1010 +
            (C9060 * C11131 + C48800 * C11134) * C49217 +
            (C9060 * C11129 + C48800 * C11132) * C1011 +
            (C9060 * C11133 + C48800 * C11135) * C49194) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C118 +
            (C9060 * C131 + C48800 * C140) * C48905) *
               C17808 +
           (C17990 + C17991) * C17809 + C18498 * C17810 + C18499 * C17811 +
           C18500 * C17812) *
              C867 -
          ((C18507 + C18508) * C17812 + (C18019 + C18018) * C17811 +
           (C17995 + C17994) * C17810 + (C17993 + C17992) * C17809 +
           (C17991 + C17990) * C17808) *
              C868 +
          (C18498 * C17808 + C18499 * C17809 + C18500 * C17810 +
           (C18508 + C18507) * C17811 +
           ((C9060 * C18493 + C48800 * C18494) * C118 +
            (C9060 * C18495 + C48800 * C18496) * C48905) *
               C17812) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C47907 * C345 + C49139 * C356 + C47888 * C344 + C48810 * C355) *
                C7763 +
            (C47907 * C351 + C49139 * C363 + C47888 * C350 + C48810 * C362) *
                C7757 +
            (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
            (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C47888 * C1396 + C48810 * C1404 + C47907 * C1397 +
             C49139 * C1405) *
                C49194 +
            (C47888 * C1392 + C48810 * C1399 + C47907 * C1393 +
             C49139 * C1400) *
                C7765 +
            (C47888 * C631 + C48810 * C636 + C47907 * C630 + C49139 * C635) *
                C7758 +
            (C47888 * C621 + C48810 * C626 + C47907 * C620 + C49139 * C625) *
                C7764 +
            (C47888 * C349 + C48810 * C361 + C47907 * C350 + C49139 * C362) *
                C7757 +
            (C47888 * C343 + C48810 * C354 + C47907 * C344 + C49139 * C355) *
                C7763) *
               C49004 +
           ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
            (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C7757 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C7763) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C7763 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C7757 +
            (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
                C7764 +
            (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
                C7758 +
            (C47907 * C519 + C49139 * C524 + C47888 * C520 + C48810 * C525) *
                C7765 +
            (C47907 * C529 + C49139 * C534 + C47888 * C530 + C48810 * C535) *
                C49194) *
               C49162 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C7763 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C7757 +
            (C47907 * C621 + C49139 * C626 + C47888 * C622 + C48810 * C627) *
                C7764 +
            (C47907 * C631 + C49139 * C636 + C47888 * C632 + C48810 * C637) *
                C7758 +
            (C47907 * C1392 + C49139 * C1399 + C47888 * C1395 +
             C48810 * C1402) *
                C7765 +
            (C47907 * C1396 + C49139 * C1404 + C47888 * C1403 +
             C48810 * C1407) *
                C49194) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
             C3792 * C343 + C3786 * C354 + C3793 * C342 + C49198 * C353) *
                C118 +
            (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
             C3792 * C349 + C3786 * C361 + C3793 * C348 + C49198 * C360) *
                C48905) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C3793 * C347 + C49198 * C359 + C3792 * C348 + C3786 * C360 +
             C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                C48905 +
            (C3793 * C341 + C49198 * C352 + C3792 * C342 + C3786 * C353 +
             C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                C118) *
               C49004 +
           ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C48905 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C118) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
             C3792 * C123 + C3786 * C130 + C3793 * C124 + C49198 * C137) *
                C118 +
            (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
             C3792 * C135 + C3786 * C144 + C3793 * C136 + C49198 * C145) *
                C48905) *
               C49162 +
           ((C3790 * C343 + C3784 * C354 + C3791 * C342 + C3785 * C353 +
             C3792 * C341 + C3786 * C352 + C3793 * C346 + C49198 * C357) *
                C118 +
            (C3790 * C349 + C3784 * C361 + C3791 * C348 + C3785 * C360 +
             C3792 * C347 + C3786 * C359 + C3793 * C358 + C49198 * C364) *
                C48905) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C118 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48905) *
               C20269 +
           ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
           (C20151 * C118 + C20152 * C48905) * C20271 +
           ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
              C48888 * C48871 * C110 -
          (((C47888 * C2731 + C48810 * C2739 + C47907 * C2732 +
             C49139 * C2740) *
                C48905 +
            (C47888 * C2727 + C48810 * C2734 + C47907 * C2728 +
             C49139 * C2735) *
                C118) *
               C49210 +
           ((C19066 + C19065) * C48905 + (C19064 + C19063) * C118) * C20271 +
           ((C12945 + C12944) * C48905 + (C12943 + C12942) * C118) * C20270 +
           ((C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C48905 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C118) *
               C20269) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C118 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C48905) *
               C20269 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C118 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C48905) *
               C20270 +
           ((C47907 * C872 + C49139 * C877 + C47888 * C873 + C48810 * C878) *
                C118 +
            (C47907 * C882 + C49139 * C887 + C47888 * C883 + C48810 * C888) *
                C48905) *
               C20271 +
           ((C47907 * C2727 + C49139 * C2734 + C47888 * C2730 +
             C48810 * C2737) *
                C118 +
            (C47907 * C2731 + C49139 * C2739 + C47888 * C2738 +
             C48810 * C2742) *
                C48905) *
               C49210) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C47907 * C345 + C49139 * C356 + C47888 * C344 + C48810 * C355) *
                 C7763 +
             (C47907 * C351 + C49139 * C363 + C47888 * C350 + C48810 * C362) *
                 C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C48888 * C229 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
             (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C7763 + (C11456 + C11457) * C7757 +
             (C11458 + C11459) * C7764 + (C11460 + C11461) * C7758 +
             (C11462 + C11463) * C7765 + (C11464 + C11465) * C49194) *
                C49162 +
            ((C12720 + C12721) * C7763 + (C12722 + C12723) * C7757 +
             (C12724 + C12725) * C7764 + (C12726 + C12727) * C7758 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C7765 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C47888 * C349 + C48810 * C361 + C47907 * C350 + C49139 * C362) *
                 C7757 +
             (C47888 * C343 + C48810 * C354 + C47907 * C344 + C49139 * C355) *
                 C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
              C3792 * C343 + C3786 * C354 + C3793 * C342 + C49198 * C353) *
                 C118 +
             (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
              C3792 * C349 + C3786 * C361 + C3793 * C348 + C49198 * C360) *
                 C48905) *
                C49004) *
               C48888 * C229 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C3967 + C3968 + C3969 + C3970) * C118 +
             (C3971 + C3972 + C3973 + C3974) * C48905) *
                C49162 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C3793 * C347 + C49198 * C359 + C3792 * C348 + C3786 * C360 +
              C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                 C48905 +
             (C3793 * C341 + C49198 * C352 + C3792 * C342 + C3786 * C353 +
              C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                 C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C48888 * C229 -
           (((C19613 + C19614) * C48905 + (C19615 + C19616) * C118) * C49210 +
            (C19611 * C48905 + C19612 * C118) * C20271 +
            (C13502 * C48905 + C13503 * C118) * C20270 +
            ((C11445 + C11444) * C48905 + (C11443 + C11442) * C118) * C20269) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C118 + (C11456 + C11457) * C48905) * C20269 +
            ((C12720 + C12721) * C118 + (C12722 + C12723) * C48905) * C20270 +
            ((C18857 + C18858) * C118 + (C18859 + C18860) * C48905) * C20271 +
            ((C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C118 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48905) *
                C49210) *
               C48888 * C49189 -
           (((C47888 * C2731 + C48810 * C2739 + C47907 * C2732 +
              C49139 * C2740) *
                 C48905 +
             (C47888 * C2727 + C48810 * C2734 + C47907 * C2728 +
              C49139 * C2735) *
                 C118) *
                C49210 +
            ((C19066 + C19065) * C48905 + (C19064 + C19063) * C118) * C20271 +
            ((C12945 + C12944) * C48905 + (C12943 + C12942) * C118) * C20270 +
            ((C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48905 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C118) *
                C20269) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C339 -
           (((C47888 * C2310 + C48810 * C2316 + C47907 * C2309 +
              C49139 * C2315) *
                 C49194 +
             (C47888 * C2298 + C48810 * C2307 + C47907 * C2297 +
              C49139 * C2306) *
                 C7765 +
             (C47888 * C2304 + C48810 * C2313 + C47907 * C2303 +
              C49139 * C2312) *
                 C7758 +
             (C47888 * C2295 + C48810 * C2301 + C47907 * C2294 +
              C49139 * C2300) *
                 C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            ((C11998 + C11999) * C49194 + (C12000 + C12001) * C7765 +
             (C12002 + C12003) * C7758 + (C12004 + C12005) * C7764 +
             (C12941 + C12940) * C7757 + (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C7763 + (C12944 + C12945) * C7757 +
             (C12720 + C12721) * C7764 + (C12722 + C12723) * C7758 +
             (C12724 + C12725) * C7765 + (C12726 + C12727) * C49194) *
                C49162 +
            ((C47907 * C871 + C49139 * C876 + C47888 * C872 + C48810 * C877) *
                 C7763 +
             (C47907 * C881 + C49139 * C886 + C47888 * C882 + C48810 * C887) *
                 C7757 +
             (C47907 * C2295 + C49139 * C2301 + C47888 * C2296 +
              C48810 * C2302) *
                 C7764 +
             (C47907 * C2304 + C49139 * C2313 + C47888 * C2305 +
              C48810 * C2314) *
                 C7758 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C7765 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C339 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C48871 * C231 +
          ((((C5269 + C5270 + C5271 + C5272) * C118 +
             (C5273 + C5274 + C5275 + C5276) * C48905) *
                C49162 +
            ((C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
              C3792 * C873 + C3786 * C878 + C3793 * C874 + C49198 * C879) *
                 C118 +
             (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
              C3792 * C883 + C3786 * C888 + C3793 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C339 -
           (((C47888 * C3656 + C48810 * C3659 + C47907 * C3655 +
              C49139 * C3658) *
                 C48905 +
             (C47888 * C3650 + C48810 * C3653 + C47907 * C3649 +
              C49139 * C3652) *
                 C118) *
                C49210 +
            ((C20165 + C20166) * C48905 + (C20167 + C20168) * C118) * C20271 +
            ((C14054 + C14055) * C48905 + (C14056 + C14057) * C118) * C20270 +
            ((C12941 + C12940) * C48905 + (C12939 + C12938) * C118) * C20269) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C118 + (C12944 + C12945) * C48905) * C20269 +
            ((C19063 + C19064) * C118 + (C19065 + C19066) * C48905) * C20270 +
            ((C20542 + C20543) * C118 + (C20544 + C20545) * C48905) * C20271 +
            ((C47907 * C3650 + C49139 * C3653 + C47888 * C3651 +
              C48810 * C3654) *
                 C118 +
             (C47907 * C3656 + C49139 * C3659 + C47888 * C3657 +
              C48810 * C3660) *
                 C48905) *
                C49210) *
               C49191 -
           (((C20545 + C20544) * C48905 + (C20543 + C20542) * C118) * C49210 +
            ((C19066 + C19065) * C48905 + (C19064 + C19063) * C118) * C20271 +
            ((C12945 + C12944) * C48905 + (C12943 + C12942) * C118) * C20270 +
            ((C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48905 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C118) *
                C20269) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C48888 * C447 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
             (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C7763 + (C11456 + C11457) * C7757 +
             (C11458 + C11459) * C7764 + (C11460 + C11461) * C7758 +
             (C11462 + C11463) * C7765 + (C11464 + C11465) * C49194) *
                C49162 +
            ((C12720 + C12721) * C7763 + (C12722 + C12723) * C7757 +
             (C12724 + C12725) * C7764 + (C12726 + C12727) * C7758 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C7765 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C48888 * C447 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C3967 + C3968 + C3969 + C3970) * C118 +
             (C3971 + C3972 + C3973 + C3974) * C48905) *
                C49162 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C48888 * C447 -
           (((C19613 + C19614) * C48905 + (C19615 + C19616) * C118) * C49210 +
            (C19611 * C48905 + C19612 * C118) * C20271 +
            (C13502 * C48905 + C13503 * C118) * C20270 +
            ((C11445 + C11444) * C48905 + (C11443 + C11442) * C118) * C20269) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C118 + (C11456 + C11457) * C48905) * C20269 +
            ((C12720 + C12721) * C118 + (C12722 + C12723) * C48905) * C20270 +
            ((C18857 + C18858) * C118 + (C18859 + C18860) * C48905) * C20271 +
            ((C47907 * C3218 + C49139 * C3221 + C47888 * C3219 +
              C48810 * C3222) *
                 C118 +
             (C47907 * C3224 + C49139 * C3227 + C47888 * C3225 +
              C48810 * C3228) *
                 C48905) *
                C49210) *
               C48888 * C49189 -
           (((C20545 + C20544) * C48905 + (C20543 + C20542) * C118) * C49210 +
            ((C19066 + C19065) * C48905 + (C19064 + C19063) * C118) * C20271 +
            ((C12945 + C12944) * C48905 + (C12943 + C12942) * C118) * C20270 +
            ((C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48905 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C118) *
                C20269) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
            (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
            C13286 * C7765 + C13287 * C49194) *
               C49004) *
              C48888 * C513 -
          (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
            (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
            (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
               C49004 +
           ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
            (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
            (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
               C49162) *
              C48888 * C514 +
          ((C11824 * C7763 + C11825 * C7757 + C11826 * C7764 + C11827 * C7758 +
            (C11839 + C11838) * C7765 + (C11837 + C11836) * C49194) *
               C49162 +
           (C13286 * C7763 + C13287 * C7757 + (C11997 + C11996) * C7764 +
            (C11995 + C11994) * C7758 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C7765 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49194) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C5261 + C5262 + C5263 + C5264) * C118 +
            (C5265 + C5266 + C5267 + C5268) * C48905) *
               C49004) *
              C48888 * C513 -
          (((C4503 + C4504 + C4505 + C4506) * C48905 +
            (C4507 + C4508 + C4509 + C4510) * C118) *
               C49004 +
           ((C3966 + C3965 + C3964 + C3963) * C48905 +
            (C3962 + C3961 + C3960 + C3959) * C118) *
               C49162) *
              C48888 * C514 +
          (((C4356 + C4355 + C4354 + C4353) * C118 +
            (C4352 + C4351 + C4350 + C4349) * C48905) *
               C49162 +
           ((C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C118 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48905) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C118 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48905) *
               C20269 +
           ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
           (C20151 * C118 + C20152 * C48905) * C20271 +
           ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
              C48888 * C513 -
          (((C19613 + C19614) * C48905 + (C19615 + C19616) * C118) * C49210 +
           (C19611 * C48905 + C19612 * C118) * C20271 +
           (C13502 * C48905 + C13503 * C118) * C20270 +
           ((C11445 + C11444) * C48905 + (C11443 + C11442) * C118) * C20269) *
              C48888 * C514 +
          ((C11824 * C118 + C11825 * C48905) * C20269 +
           (C13286 * C118 + C13287 * C48905) * C20270 +
           ((C13507 + C13506) * C118 + (C13505 + C13504) * C48905) * C20271 +
           ((C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
             C48810 * C10238) *
                C118 +
            (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
             C48810 * C10241) *
                C48905) *
               C49210) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C339 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C447 +
          (((C13482 * C7763 + C13483 * C7757 + C13286 * C7764 + C13287 * C7758 +
             (C11997 + C11996) * C7765 + (C11995 + C11994) * C49194) *
                C49162 +
            ((C13511 + C13510) * C7763 + (C13509 + C13508) * C7757 +
             (C13507 + C13506) * C7764 + (C13505 + C13504) * C7758 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C7765 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             C13500 * C7758 + C13501 * C7764 + C13502 * C7757 +
             C13503 * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C339 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C447 +
          ((((C4510 + C4509 + C4508 + C4507) * C118 +
             (C4506 + C4505 + C4504 + C4503) * C48905) *
                C49162 +
            ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
              C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
                 C118 +
             (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
              C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C339 -
           (((C47888 * C3656 + C48810 * C3659 + C47907 * C3655 +
              C49139 * C3658) *
                 C48905 +
             (C47888 * C3650 + C48810 * C3653 + C47907 * C3649 +
              C49139 * C3652) *
                 C118) *
                C49210 +
            ((C20165 + C20166) * C48905 + (C20167 + C20168) * C118) * C20271 +
            ((C14054 + C14055) * C48905 + (C14056 + C14057) * C118) * C20270 +
            ((C12941 + C12940) * C48905 + (C12939 + C12938) * C118) * C20269) *
               C49191) *
              C447 +
          (((C13482 * C118 + C13483 * C48905) * C20269 +
            (C19601 * C118 + C19602 * C48905) * C20270 +
            ((C19616 + C19615) * C118 + (C19614 + C19613) * C48905) * C20271 +
            ((C47907 * C11128 + C49139 * C11130 + C47888 * C17895 +
              C48810 * C17896) *
                 C118 +
             (C47907 * C11131 + C49139 * C11134 + C47888 * C17897 +
              C48810 * C17898) *
                 C48905) *
                C49210) *
               C49191 -
           (((C19613 + C19614) * C48905 + (C19615 + C19616) * C118) * C49210 +
            (C19611 * C48905 + C19612 * C118) * C20271 +
            (C13502 * C48905 + C13503 * C118) * C20270 +
            ((C11445 + C11444) * C48905 + (C11443 + C11442) * C118) * C20269) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C7763 + (C12944 + C12945) * C7757 +
             (C12720 + C12721) * C7764 + (C12722 + C12723) * C7758 +
             (C12724 + C12725) * C7765 + (C12726 + C12727) * C49194) *
                C49162 +
            ((C47907 * C871 + C49139 * C876 + C47888 * C872 + C48810 * C877) *
                 C7763 +
             (C47907 * C881 + C49139 * C886 + C47888 * C882 + C48810 * C887) *
                 C7757 +
             (C47907 * C2295 + C49139 * C2301 + C47888 * C2296 +
              C48810 * C2302) *
                 C7764 +
             (C47907 * C2304 + C49139 * C2313 + C47888 * C2305 +
              C48810 * C2314) *
                 C7758 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C7765 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C721 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C5269 + C5270 + C5271 + C5272) * C118 +
             (C5273 + C5274 + C5275 + C5276) * C48905) *
                C49162 +
            ((C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
              C3792 * C873 + C3786 * C878 + C3793 * C874 + C49198 * C879) *
                 C118 +
             (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
              C3792 * C883 + C3786 * C888 + C3793 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C721 -
           (((C47888 * C3656 + C48810 * C3659 + C47907 * C3655 +
              C49139 * C3658) *
                 C48905 +
             (C47888 * C3650 + C48810 * C3653 + C47907 * C3649 +
              C49139 * C3652) *
                 C118) *
                C49210 +
            ((C20165 + C20166) * C48905 + (C20167 + C20168) * C118) * C20271 +
            ((C14054 + C14055) * C48905 + (C14056 + C14057) * C118) * C20270 +
            ((C12941 + C12940) * C48905 + (C12939 + C12938) * C118) * C20269) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C118 + (C12944 + C12945) * C48905) * C20269 +
            ((C19063 + C19064) * C118 + (C19065 + C19066) * C48905) * C20270 +
            ((C20542 + C20543) * C118 + (C20544 + C20545) * C48905) * C20271 +
            ((C47907 * C3650 + C49139 * C3653 + C47888 * C3651 +
              C48810 * C3654) *
                 C118 +
             (C47907 * C3656 + C49139 * C3659 + C47888 * C3657 +
              C48810 * C3660) *
                 C48905) *
                C49210) *
               C49191 -
           (((C20545 + C20544) * C48905 + (C20543 + C20542) * C118) * C49210 +
            ((C19066 + C19065) * C48905 + (C19064 + C19063) * C118) * C20271 +
            ((C12945 + C12944) * C48905 + (C12943 + C12942) * C118) * C20270 +
            ((C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C48905 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C118) *
                C20269) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C229 +
          (((C13482 * C7763 + C13483 * C7757 + C13286 * C7764 + C13287 * C7758 +
             (C11997 + C11996) * C7765 + (C11995 + C11994) * C49194) *
                C49162 +
            ((C13511 + C13510) * C7763 + (C13509 + C13508) * C7757 +
             (C13507 + C13506) * C7764 + (C13505 + C13504) * C7758 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C7765 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             C13500 * C7758 + C13501 * C7764 + C13502 * C7757 +
             C13503 * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C721 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C229 +
          ((((C4510 + C4509 + C4508 + C4507) * C118 +
             (C4506 + C4505 + C4504 + C4503) * C48905) *
                C49162 +
            ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
              C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
                 C118 +
             (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
              C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C118 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C48905) *
                C20269 +
            ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
            (C20151 * C118 + C20152 * C48905) * C20271 +
            ((C20168 + C20167) * C118 + (C20166 + C20165) * C48905) * C49210) *
               C721 -
           (((C47888 * C3656 + C48810 * C3659 + C47907 * C3655 +
              C49139 * C3658) *
                 C48905 +
             (C47888 * C3650 + C48810 * C3653 + C47907 * C3649 +
              C49139 * C3652) *
                 C118) *
                C49210 +
            ((C20165 + C20166) * C48905 + (C20167 + C20168) * C118) * C20271 +
            ((C14054 + C14055) * C48905 + (C14056 + C14057) * C118) * C20270 +
            ((C12941 + C12940) * C48905 + (C12939 + C12938) * C118) * C20269) *
               C49191) *
              C229 +
          (((C13482 * C118 + C13483 * C48905) * C20269 +
            (C19601 * C118 + C19602 * C48905) * C20270 +
            ((C19616 + C19615) * C118 + (C19614 + C19613) * C48905) * C20271 +
            ((C47907 * C11128 + C49139 * C11130 + C47888 * C17895 +
              C48810 * C17896) *
                 C118 +
             (C47907 * C11131 + C49139 * C11134 + C47888 * C17897 +
              C48810 * C17898) *
                 C48905) *
                C49210) *
               C49191 -
           (((C19613 + C19614) * C48905 + (C19615 + C19616) * C118) * C49210 +
            (C19611 * C48905 + C19612 * C118) * C20271 +
            (C13502 * C48905 + C13503 * C118) * C20270 +
            ((C11445 + C11444) * C48905 + (C11443 + C11442) * C118) * C20269) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
            C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
            C13287 * C49194) *
               C49004) *
              C867 -
          (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
            (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
            (C14054 + C14055) * C7757 + (C14056 + C14057) * C7763) *
               C49004 +
           (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 + C13503 * C7764 +
            (C12941 + C12940) * C7757 + (C12939 + C12938) * C7763) *
               C49162) *
              C868 +
          (((C14057 + C14056) * C7763 + (C14055 + C14054) * C7757 +
            (C13511 + C13510) * C7764 + (C13509 + C13508) * C7758 +
            (C13507 + C13506) * C7765 + (C13505 + C13504) * C49194) *
               C49162 +
           ((C47907 * C2729 + C49139 * C2736 + C47888 * C2728 +
             C48810 * C2735) *
                C7763 +
            (C47907 * C2733 + C49139 * C2741 + C47888 * C2732 +
             C48810 * C2740) *
                C7757 +
            (C47907 * C3217 + C49139 * C3220 + C47888 * C3218 +
             C48810 * C3221) *
                C7764 +
            (C47907 * C3223 + C49139 * C3226 + C47888 * C3224 +
             C48810 * C3227) *
                C7758 +
            (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
             C48810 * C10238) *
                C7765 +
            (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
             C48810 * C10241) *
                C49194) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C5261 + C5262 + C5263 + C5264) * C118 +
            (C5265 + C5266 + C5267 + C5268) * C48905) *
               C49004) *
              C867 -
          (((C6009 + C6010 + C6011 + C6012) * C48905 +
            (C6013 + C6014 + C6015 + C6016) * C118) *
               C49004 +
           ((C5268 + C5267 + C5266 + C5265) * C48905 +
            (C5264 + C5263 + C5262 + C5261) * C118) *
               C49162) *
              C868 +
          (((C6016 + C6015 + C6014 + C6013) * C118 +
            (C6012 + C6011 + C6010 + C6009) * C48905) *
               C49162 +
           ((C3790 * C2729 + C3784 * C2736 + C3791 * C2728 + C3785 * C2735 +
             C3792 * C2727 + C3786 * C2734 + C3793 * C2730 + C49198 * C2737) *
                C118 +
            (C3790 * C2733 + C3784 * C2741 + C3791 * C2732 + C3785 * C2740 +
             C3792 * C2731 + C3786 * C2739 + C3793 * C2738 + C49198 * C2742) *
                C48905) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C118 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C48905) *
               C20269 +
           ((C12938 + C12939) * C118 + (C12940 + C12941) * C48905) * C20270 +
           C21274 * C20271 + C21281 * C49210) *
              C867 -
          (((C21277 + C21278) * C48905 + (C21279 + C21280) * C118) * C49210 +
           ((C20165 + C20166) * C48905 + (C20167 + C20168) * C118) * C20271 +
           ((C14054 + C14055) * C48905 + (C14056 + C14057) * C118) * C20270 +
           ((C12941 + C12940) * C48905 + (C12939 + C12938) * C118) * C20269) *
              C868 +
          (C21274 * C20269 + C21281 * C20270 +
           ((C21280 + C21279) * C118 + (C21278 + C21277) * C48905) * C20271 +
           ((C47907 * C17981 + C49139 * C17984 + C47888 * C17982 +
             C48810 * C17985) *
                C118 +
            (C47907 * C17983 + C49139 * C17987 + C47888 * C17986 +
             C48810 * C17988) *
                C48905) *
               C49210) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                     C1008 * C121 + C49181 * C128) *
                        C1009 +
                    (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                     C1008 * C133 + C49181 * C142) *
                        C49229 +
                    (C1006 * C237 + C1000 * C248 + C1007 * C236 + C1001 * C247 +
                     C1008 * C235 + C49181 * C246) *
                        C1010 +
                    (C1006 * C243 + C1000 * C255 + C1007 * C242 + C1001 * C254 +
                     C1008 * C241 + C49181 * C253) *
                        C49217 +
                    (C1006 * C517 + C1000 * C522 + C1007 * C518 + C1001 * C523 +
                     C1008 * C519 + C49181 * C524) *
                        C1011 +
                    (C1006 * C527 + C1000 * C532 + C1007 * C528 + C1001 * C533 +
                     C1008 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C1008 * C530 + C49181 * C535 + C1007 * C529 +
                     C1001 * C534 + C1006 * C528 + C1000 * C533) *
                        C49194 +
                    (C1008 * C520 + C49181 * C525 + C1007 * C519 +
                     C1001 * C524 + C1006 * C518 + C1000 * C523) *
                        C1011 +
                    (C1008 * C240 + C49181 * C252 + C1007 * C241 +
                     C1001 * C253 + C1006 * C242 + C1000 * C254) *
                        C49217 +
                    (C1008 * C234 + C49181 * C245 + C1007 * C235 +
                     C1001 * C246 + C1006 * C236 + C1000 * C247) *
                        C1010 +
                    (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                     C1001 * C142 + C1006 * C132 + C1000 * C141) *
                        C49229 +
                    (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                     C1001 * C128 + C1006 * C120 + C1000 * C127) *
                        C1009) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                     C1008 * C123 + C49181 * C130) *
                        C1009 +
                    (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                     C1008 * C135 + C49181 * C144) *
                        C49229 +
                    (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
                     C1008 * C233 + C49181 * C244) *
                        C1010 +
                    (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
                     C1008 * C239 + C49181 * C251) *
                        C49217 +
                    (C1006 * C519 + C1000 * C524 + C1007 * C520 + C1001 * C525 +
                     C1008 * C521 + C49181 * C526) *
                        C1011 +
                    (C1006 * C529 + C1000 * C534 + C1007 * C530 + C1001 * C535 +
                     C1008 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C48905) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C48905 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C48905) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C7763 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C7757 +
                    (C7760 * C237 + C49226 * C248 + C7761 * C236 +
                     C49213 * C247 + C7762 * C235 + C49181 * C246) *
                        C7764 +
                    (C7760 * C243 + C49226 * C255 + C7761 * C242 +
                     C49213 * C254 + C7762 * C241 + C49181 * C253) *
                        C7758 +
                    (C7760 * C517 + C49226 * C522 + C7761 * C518 +
                     C49213 * C523 + C7762 * C519 + C49181 * C524) *
                        C7765 +
                    (C7760 * C527 + C49226 * C532 + C7761 * C528 +
                     C49213 * C533 + C7762 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C7762 * C530 + C49181 * C535 + C7761 * C529 +
                     C49213 * C534 + C7760 * C528 + C49226 * C533) *
                        C49194 +
                    (C7762 * C520 + C49181 * C525 + C7761 * C519 +
                     C49213 * C524 + C7760 * C518 + C49226 * C523) *
                        C7765 +
                    (C7762 * C240 + C49181 * C252 + C7761 * C241 +
                     C49213 * C253 + C7760 * C242 + C49226 * C254) *
                        C7758 +
                    (C7762 * C234 + C49181 * C245 + C7761 * C235 +
                     C49213 * C246 + C7760 * C236 + C49226 * C247) *
                        C7764 +
                    (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                     C49213 * C142 + C7760 * C132 + C49226 * C141) *
                        C7757 +
                    (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                     C49213 * C128 + C7760 * C120 + C49226 * C127) *
                        C7763) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                     C49213 * C129 + C7762 * C123 + C49181 * C130) *
                        C7763 +
                    (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                     C49213 * C143 + C7762 * C135 + C49181 * C144) *
                        C7757 +
                    (C7760 * C235 + C49226 * C246 + C7761 * C234 +
                     C49213 * C245 + C7762 * C233 + C49181 * C244) *
                        C7764 +
                    (C7760 * C241 + C49226 * C253 + C7761 * C240 +
                     C49213 * C252 + C7762 * C239 + C49181 * C251) *
                        C7758 +
                    (C7760 * C519 + C49226 * C524 + C7761 * C520 +
                     C49213 * C525 + C7762 * C521 + C49181 * C526) *
                        C7765 +
                    (C7760 * C529 + C49226 * C534 + C7761 * C530 +
                     C49213 * C535 + C7762 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C9060 * C119 + C48800 * C126) * C9061 +
                    (C9060 * C131 + C48800 * C140) * C9055 +
                    (C9060 * C237 + C48800 * C248) * C9062 +
                    (C9060 * C243 + C48800 * C255) * C9056 +
                    (C9060 * C517 + C48800 * C522) * C9063 +
                    (C9060 * C527 + C48800 * C532) * C9057 +
                    (C9060 * C1160 + C48800 * C1167) * C9064 +
                    (C9060 * C1164 + C48800 * C1172) * C9058 +
                    (C9060 * C1664 + C48800 * C1667) * C9065 +
                    (C9060 * C1670 + C48800 * C1673) * C9059) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C9060 * C1671 + C48800 * C1674) * C9059 +
                    (C9060 * C1665 + C48800 * C1668) * C9065 +
                    (C9060 * C1163 + C48800 * C1171) * C9058 +
                    (C9060 * C1159 + C48800 * C1166) * C9064 +
                    (C9060 * C528 + C48800 * C533) * C9057 +
                    (C9060 * C518 + C48800 * C523) * C9063 +
                    (C9060 * C242 + C48800 * C254) * C9056 +
                    (C9060 * C236 + C48800 * C247) * C9062 +
                    (C9060 * C132 + C48800 * C141) * C9055 +
                    (C9060 * C120 + C48800 * C127) * C9061) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C9060 * C121 + C48800 * C128) * C9061 +
                    (C9060 * C133 + C48800 * C142) * C9055 +
                    (C9060 * C235 + C48800 * C246) * C9062 +
                    (C9060 * C241 + C48800 * C253) * C9056 +
                    (C9060 * C519 + C48800 * C524) * C9063 +
                    (C9060 * C529 + C48800 * C534) * C9057 +
                    (C9060 * C1158 + C48800 * C1165) * C9064 +
                    (C9060 * C1162 + C48800 * C1170) * C9058 +
                    (C9060 * C1666 + C48800 * C1669) * C9065 +
                    (C9060 * C1672 + C48800 * C1675) * C9059) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                      C49213 * C127 + C7762 * C121 + C49181 * C128) *
                         C118 +
                     (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                      C49213 * C141 + C7762 * C133 + C49181 * C142) *
                         C48905) *
                        C15279 +
                    ((C7760 * C345 + C49226 * C356 + C7761 * C344 +
                      C49213 * C355 + C7762 * C343 + C49181 * C354) *
                         C118 +
                     (C7760 * C351 + C49226 * C363 + C7761 * C350 +
                      C49213 * C362 + C7762 * C349 + C49181 * C361) *
                         C48905) *
                        C15280 +
                    ((C7760 * C870 + C49226 * C875 + C7761 * C871 +
                      C49213 * C876 + C7762 * C872 + C49181 * C877) *
                         C118 +
                     (C7760 * C880 + C49226 * C885 + C7761 * C881 +
                      C49213 * C886 + C7762 * C882 + C49181 * C887) *
                         C48905) *
                        C49197) *
                       C48888 * C48871 * C110 -
                   (((C7762 * C883 + C49181 * C888 + C7761 * C882 +
                      C49213 * C887 + C7760 * C881 + C49226 * C886) *
                         C48905 +
                     (C7762 * C873 + C49181 * C878 + C7761 * C872 +
                      C49213 * C877 + C7760 * C871 + C49226 * C876) *
                         C118) *
                        C49197 +
                    ((C7762 * C348 + C49181 * C360 + C7761 * C349 +
                      C49213 * C361 + C7760 * C350 + C49226 * C362) *
                         C48905 +
                     (C7762 * C342 + C49181 * C353 + C7761 * C343 +
                      C49213 * C354 + C7760 * C344 + C49226 * C355) *
                         C118) *
                        C15280 +
                    ((C7762 * C134 + C49181 * C143 + C7761 * C133 +
                      C49213 * C142 + C7760 * C132 + C49226 * C141) *
                         C48905 +
                     (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                      C49213 * C128 + C7760 * C120 + C49226 * C127) *
                         C118) *
                        C15279) *
                       C48888 * C48871 * C111 +
                   (((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                      C49213 * C129 + C7762 * C123 + C49181 * C130) *
                         C118 +
                     (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                      C49213 * C143 + C7762 * C135 + C49181 * C144) *
                         C48905) *
                        C15279 +
                    ((C7760 * C343 + C49226 * C354 + C7761 * C342 +
                      C49213 * C353 + C7762 * C341 + C49181 * C352) *
                         C118 +
                     (C7760 * C349 + C49226 * C361 + C7761 * C348 +
                      C49213 * C360 + C7762 * C347 + C49181 * C359) *
                         C48905) *
                        C15280 +
                    ((C7760 * C872 + C49226 * C877 + C7761 * C873 +
                      C49213 * C878 + C7762 * C874 + C49181 * C879) *
                         C118 +
                     (C7760 * C882 + C49226 * C887 + C7761 * C883 +
                      C49213 * C888 + C7762 * C884 + C49181 * C889) *
                         C48905) *
                        C49197) *
                       C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48800 * C126) * C1009 +
                     (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
                     C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                        C15279 +
                    (C10275 * C1009 + C10276 * C49229 + C9558 * C1010 +
                     C9557 * C49217 + C9556 * C1011 + C9555 * C49194) *
                        C15280 +
                    (C10277 * C1009 + C10278 * C49229 + C10077 * C1010 +
                     C10078 * C49217 + C10079 * C1011 + C10080 * C49194) *
                        C49197) *
                       C48888 * C48871 * C110 -
                   ((C10088 * C49194 + C10087 * C1011 + C10086 * C49217 +
                     C10085 * C1010 + C10282 * C49229 + C10281 * C1009) *
                        C49197 +
                    (C10084 * C49194 + C10083 * C1011 + C10082 * C49217 +
                     C10081 * C1010 + C10280 * C49229 + C10279 * C1009) *
                        C15280 +
                    (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 +
                     C9197 * C1010 + (C9060 * C132 + C48800 * C141) * C49229 +
                     (C9060 * C120 + C48800 * C127) * C1009) *
                        C15279) *
                       C48888 * C48871 * C111 +
                   (((C9060 * C121 + C48800 * C128) * C1009 +
                     (C9060 * C133 + C48800 * C142) * C49229 +
                     (C9060 * C235 + C48800 * C246) * C1010 +
                     (C9060 * C241 + C48800 * C253) * C49217 +
                     (C9060 * C519 + C48800 * C524) * C1011 +
                     (C9060 * C529 + C48800 * C534) * C49194) *
                        C15279 +
                    ((C9060 * C343 + C48800 * C354) * C1009 +
                     (C9060 * C349 + C48800 * C361) * C49229 +
                     (C9060 * C621 + C48800 * C626) * C1010 +
                     (C9060 * C631 + C48800 * C636) * C49217 +
                     (C9060 * C1392 + C48800 * C1399) * C1011 +
                     (C9060 * C1396 + C48800 * C1404) * C49194) *
                        C15280 +
                    ((C9060 * C872 + C48800 * C877) * C1009 +
                     (C9060 * C882 + C48800 * C887) * C49229 +
                     (C9060 * C2296 + C48800 * C2302) * C1010 +
                     (C9060 * C2305 + C48800 * C2314) * C49217 +
                     (C9060 * C2299 + C48800 * C2308) * C1011 +
                     (C9060 * C2311 + C48800 * C2317) * C49194) *
                        C49197) *
                       C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C229 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C229 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C229 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C229 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C231 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C7760 * C345 + C49226 * C356 + C7761 * C344 + C49213 * C355 +
              C7762 * C343 + C49181 * C354) *
                 C118 +
             (C7760 * C351 + C49226 * C363 + C7761 * C350 + C49213 * C362 +
              C7762 * C349 + C49181 * C361) *
                 C48905) *
                C15280 +
            ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
              C7762 * C872 + C49181 * C877) *
                 C118 +
             (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
              C7762 * C882 + C49181 * C887) *
                 C48905) *
                C49197) *
               C48888 * C229 -
           (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
              C7760 * C2303 + C49226 * C2312) *
                 C48905 +
             (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
              C7760 * C2294 + C49226 * C2300) *
                 C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C48888 * C49189) *
              C231 +
          ((((C7973 + C7974 + C7975) * C118 +
             (C7976 + C7977 + C7978) * C48905) *
                C15279 +
            ((C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
              C7762 * C622 + C49181 * C627) *
                 C118 +
             (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
              C7762 * C632 + C49181 * C637) *
                 C48905) *
                C15280 +
            ((C7760 * C2295 + C49226 * C2301 + C7761 * C2296 + C49213 * C2302 +
              C7762 * C2577 + C49181 * C2578) *
                 C118 +
             (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 + C49213 * C2314 +
              C7762 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C7762 * C883 + C49181 * C888 + C7761 * C882 + C49213 * C887 +
              C7760 * C881 + C49226 * C886) *
                 C48905 +
             (C7762 * C873 + C49181 * C878 + C7761 * C872 + C49213 * C877 +
              C7760 * C871 + C49226 * C876) *
                 C118) *
                C49197 +
            ((C7762 * C348 + C49181 * C360 + C7761 * C349 + C49213 * C361 +
              C7760 * C350 + C49226 * C362) *
                 C48905 +
             (C7762 * C342 + C49181 * C353 + C7761 * C343 + C49213 * C354 +
              C7760 * C344 + C49226 * C355) *
                 C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C10275 * C1009 + C10276 * C49229 + C9558 * C1010 + C9557 * C49217 +
             C9556 * C1011 + C9555 * C49194) *
                C15280 +
            (C10277 * C1009 + C10278 * C49229 + C10077 * C1010 +
             C10078 * C49217 + C10079 * C1011 + C10080 * C49194) *
                C49197) *
               C48888 * C229 -
           ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
             C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
                C49197 +
            (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
             C9557 * C49229 + C9558 * C1009) *
                C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C1009 + C9198 * C49229 + C9199 * C1010 + C9200 * C49217 +
             C9201 * C1011 + C9202 * C49194) *
                C15279 +
            (C10081 * C1009 + C10082 * C49229 + C10083 * C1010 +
             C10084 * C49217 + C14290 * C1011 + C14291 * C49194) *
                C15280 +
            (C10085 * C1009 + C10086 * C49229 + C10087 * C1010 +
             C10088 * C49217 + (C9060 * C10048 + C48800 * C10049) * C1011 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10088 * C49194 + C10087 * C1011 + C10086 * C49217 +
             C10085 * C1010 + C10282 * C49229 + C10281 * C1009) *
                C49197 +
            (C10084 * C49194 + C10083 * C1011 + C10082 * C49217 +
             C10081 * C1010 + C10280 * C49229 + C10279 * C1009) *
                C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C339 -
           ((C1008 * C1396 + C49181 * C1404 + C1007 * C1397 + C1001 * C1405 +
             C1006 * C1398 + C1000 * C1406) *
                C49194 +
            (C1008 * C1392 + C49181 * C1399 + C1007 * C1393 + C1001 * C1400 +
             C1006 * C1394 + C1000 * C1401) *
                C1011 +
            (C1008 * C631 + C49181 * C636 + C1007 * C630 + C1001 * C635 +
             C1006 * C629 + C1000 * C634) *
                C49217 +
            (C1008 * C621 + C49181 * C626 + C1007 * C620 + C1001 * C625 +
             C1006 * C619 + C1000 * C624) *
                C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C339 -
           ((C7762 * C1396 + C49181 * C1404 + C7761 * C1397 + C49213 * C1405 +
             C7760 * C1398 + C49226 * C1406) *
                C49194 +
            (C7762 * C1392 + C49181 * C1399 + C7761 * C1393 + C49213 * C1400 +
             C7760 * C1394 + C49226 * C1401) *
                C7765 +
            (C7762 * C631 + C49181 * C636 + C7761 * C630 + C49213 * C635 +
             C7760 * C629 + C49226 * C634) *
                C7758 +
            (C7762 * C621 + C49181 * C626 + C7761 * C620 + C49213 * C625 +
             C7760 * C619 + C49226 * C624) *
                C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           ((C9060 * C9288 + C48800 * C9292) * C9059 +
            (C9060 * C9286 + C48800 * C9289) * C9065 +
            (C9060 * C1850 + C48800 * C1853) * C9058 +
            (C9060 * C1844 + C48800 * C1847) * C9064 +
            (C9060 * C1398 + C48800 * C1406) * C9057 +
            (C9060 * C1394 + C48800 * C1401) * C9063 +
            (C9060 * C629 + C48800 * C634) * C9056 +
            (C9060 * C619 + C48800 * C624) * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C339 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C48871 * C231 +
          ((((C15635 + C15636 + C15637) * C118 +
             (C15638 + C15639 + C15640) * C48905) *
                C15279 +
            ((C15641 + C15642 + C15643) * C118 +
             (C15644 + C15645 + C15646) * C48905) *
                C15280 +
            ((C7760 * C2728 + C49226 * C2735 + C7761 * C2727 + C49213 * C2734 +
              C7762 * C2730 + C49181 * C2737) *
                 C118 +
             (C7760 * C2732 + C49226 * C2740 + C7761 * C2731 + C49213 * C2739 +
              C7762 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C48871 * C231 +
          (((C16908 + C16909 + C16910 + C16911 + C16912 + C16913) * C15279 +
            (C16914 + C16915 + C16916 + C16917 + C16918 + C16919) * C15280 +
            ((C9060 * C2728 + C48800 * C2735) * C1009 +
             (C9060 * C2732 + C48800 * C2740) * C49229 +
             (C9060 * C3218 + C48800 * C3221) * C1010 +
             (C9060 * C3224 + C48800 * C3227) * C49217 +
             (C9060 * C10235 + C48800 * C10238) * C1011 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C447 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C447 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C447 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C447 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C449 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C48888 * C447 -
           (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
              C7760 * C2303 + C49226 * C2312) *
                 C48905 +
             (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
              C7760 * C2294 + C49226 * C2300) *
                 C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C48888 * C49189) *
              C449 +
          ((((C7973 + C7974 + C7975) * C118 +
             (C7976 + C7977 + C7978) * C48905) *
                C15279 +
            ((C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
              C7762 * C622 + C49181 * C627) *
                 C118 +
             (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
              C7762 * C632 + C49181 * C637) *
                 C48905) *
                C15280 +
            ((C7760 * C2295 + C49226 * C2301 + C7761 * C2296 + C49213 * C2302 +
              C7762 * C2577 + C49181 * C2578) *
                 C118 +
             (C7760 * C2304 + C49226 * C2313 + C7761 * C2305 + C49213 * C2314 +
              C7762 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C48888 * C447 -
           ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
             C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
                C49197 +
            (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
             C9557 * C49229 + C9558 * C1009) *
                C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C1009 + C9198 * C49229 + C9199 * C1010 + C9200 * C49217 +
             C9201 * C1011 + C9202 * C49194) *
                C15279 +
            (C10081 * C1009 + C10082 * C49229 + C10083 * C1010 +
             C10084 * C49217 + C14290 * C1011 + C14291 * C49194) *
                C15280 +
            (C10085 * C1009 + C10086 * C49229 + C10087 * C1010 +
             C10088 * C49217 + (C9060 * C10048 + C48800 * C10049) * C1011 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C48888 * C513 -
          ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
           (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
           (C1228 + C1227 + C1226) * C49229 + (C1225 + C1224 + C1223) * C1009) *
              C48917 * C48888 * C514 +
          (C1691 * C1009 + C1692 * C49229 + (C1698 + C1697 + C1696) * C1010 +
           (C1695 + C1694 + C1693) * C49217 +
           (C1006 * C1664 + C1000 * C1667 + C1007 * C1665 + C1001 * C1668 +
            C1008 * C1666 + C49181 * C1669) *
               C1011 +
           (C1006 * C1670 + C1000 * C1673 + C1007 * C1671 + C1001 * C1674 +
            C1008 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C48888 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C48905 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48917 * C48888 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C48905) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C48888 * C513 -
          ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
           (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
           (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
              C48917 * C48888 * C514 +
          (C8401 * C7763 + C8402 * C7757 + (C8408 + C8407 + C8406) * C7764 +
           (C8405 + C8404 + C8403) * C7758 +
           (C7760 * C1664 + C49226 * C1667 + C7761 * C1665 + C49213 * C1668 +
            C7762 * C1666 + C49181 * C1669) *
               C7765 +
           (C7760 * C1670 + C49226 * C1673 + C7761 * C1671 + C49213 * C1674 +
            C7762 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C48888 * C513 -
          (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
           C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
           C9190 * C9055 + C9189 * C9061) *
              C48917 * C48888 * C514 +
          (C9191 * C9061 + C9192 * C9055 + C9193 * C9062 + C9194 * C9056 +
           C9195 * C9063 + C9196 * C9057 + C9448 * C9064 + C9447 * C9058 +
           (C9060 * C9438 + C48800 * C9439) * C9065 +
           (C9060 * C9440 + C48800 * C9441) * C9059) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C118 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C48905) *
               C15279 +
           ((C15623 + C15624 + C15625) * C118 +
            (C15626 + C15627 + C15628) * C48905) *
               C15280 +
           ((C15629 + C15630 + C15631) * C118 +
            (C15632 + C15633 + C15634) * C48905) *
               C49197) *
              C48888 * C513 -
          (((C7762 * C2305 + C49181 * C2314 + C7761 * C2304 + C49213 * C2313 +
             C7760 * C2303 + C49226 * C2312) *
                C48905 +
            (C7762 * C2296 + C49181 * C2302 + C7761 * C2295 + C49213 * C2301 +
             C7760 * C2294 + C49226 * C2300) *
                C118) *
               C49197 +
           ((C8585 + C8586 + C8587) * C48905 + (C8588 + C8589 + C8590) * C118) *
               C15280 +
           ((C7966 + C7965 + C7964) * C48905 + (C7963 + C7962 + C7961) * C118) *
               C15279) *
              C48888 * C514 +
          ((C8401 * C118 + C8402 * C48905) * C15279 +
           ((C8584 + C8583 + C8582) * C118 + (C8581 + C8580 + C8579) * C48905) *
               C15280 +
           ((C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
             C7762 * C2299 + C49181 * C2308) *
                C118 +
            (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
             C7762 * C2311 + C49181 * C2317) *
                C48905) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C1009 +
            (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
            C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
               C15279 +
           (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
           (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
              C48888 * C513 -
          ((C10551 * C49194 + C10552 * C1011 + C10080 * C49217 +
            C10079 * C1010 + C10078 * C49229 + C10077 * C1009) *
               C49197 +
           (C9553 * C49194 + C9554 * C1011 + C9555 * C49217 + C9556 * C1010 +
            C9557 * C49229 + C9558 * C1009) *
               C15280 +
           (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
            C9190 * C49229 + C9189 * C1009) *
               C15279) *
              C48888 * C514 +
          ((C9191 * C1009 + C9192 * C49229 + C9193 * C1010 + C9194 * C49217 +
            C9195 * C1011 + C9196 * C49194) *
               C15279 +
           (C9556 * C1009 + C9555 * C49229 + C9554 * C1010 + C9553 * C49217 +
            C9552 * C1011 + C9551 * C49194) *
               C15280 +
           (C10079 * C1009 + C10080 * C49229 + C10552 * C1010 +
            C10551 * C49217 + (C9060 * C9785 + C48800 * C9788) * C1011 +
            (C9060 * C9789 + C48800 * C9791) * C49194) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C339 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C447 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C447 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C339 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C447 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C447 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C339 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C447 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C48905) *
                C15279 +
            ((C16061 + C16062 + C16063) * C118 +
             (C16064 + C16065 + C16066) * C48905) *
                C15280 +
            ((C7760 * C3217 + C49226 * C3220 + C7761 * C3218 + C49213 * C3221 +
              C7762 * C3219 + C49181 * C3222) *
                 C118 +
             (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 + C49213 * C3227 +
              C7762 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C16066 + C16065 + C16064) * C48905 +
             (C16063 + C16062 + C16061) * C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C447 +
          (((C17322 + C17323 + C17324 + C17325 + C17326 + C17327) * C15279 +
            (C17328 + C17329 + C17330 + C17331 + C17332 + C17333) * C15280 +
            (C10726 * C1009 + C10725 * C49229 + C10724 * C1010 +
             C10723 * C49217 + (C9060 * C10698 + C48800 * C10699) * C1011 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C17333 + C17332 + C17331 + C17330 + C17329 + C17328) * C49197 +
            (C17327 + C17326 + C17325 + C17324 + C17323 + C17322) * C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C721 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C48871 * C449 +
          ((((C15635 + C15636 + C15637) * C118 +
             (C15638 + C15639 + C15640) * C48905) *
                C15279 +
            ((C15641 + C15642 + C15643) * C118 +
             (C15644 + C15645 + C15646) * C48905) *
                C15280 +
            ((C7760 * C2728 + C49226 * C2735 + C7761 * C2727 + C49213 * C2734 +
              C7762 * C2730 + C49181 * C2737) *
                 C118 +
             (C7760 * C2732 + C49226 * C2740 + C7761 * C2731 + C49213 * C2739 +
              C7762 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C15646 + C15645 + C15644) * C48905 +
             (C15643 + C15642 + C15641) * C118) *
                C49197 +
            ((C15640 + C15639 + C15638) * C48905 +
             (C15637 + C15636 + C15635) * C118) *
                C15280 +
            ((C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
              C7760 * C132 + C49226 * C141) *
                 C48905 +
             (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
              C7760 * C120 + C49226 * C127) *
                 C118) *
                C15279) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C48871 * C449 +
          (((C16908 + C16909 + C16910 + C16911 + C16912 + C16913) * C15279 +
            (C16914 + C16915 + C16916 + C16917 + C16918 + C16919) * C15280 +
            ((C9060 * C2728 + C48800 * C2735) * C1009 +
             (C9060 * C2732 + C48800 * C2740) * C49229 +
             (C9060 * C3218 + C48800 * C3221) * C1010 +
             (C9060 * C3224 + C48800 * C3227) * C49217 +
             (C9060 * C10235 + C48800 * C10238) * C1011 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C16919 + C16918 + C16917 + C16916 + C16915 + C16914) * C49197 +
            (C16913 + C16912 + C16911 + C16910 + C16909 + C16908) * C15280 +
            (C9200 * C49194 + C9199 * C1011 + C9198 * C49217 + C9197 * C1010 +
             (C9060 * C132 + C48800 * C141) * C49229 +
             (C9060 * C120 + C48800 * C127) * C1009) *
                C15279) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C229 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C229 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C229 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C229 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
              C7762 * C121 + C49181 * C128) *
                 C118 +
             (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
              C7762 * C133 + C49181 * C142) *
                 C48905) *
                C15279 +
            ((C15623 + C15624 + C15625) * C118 +
             (C15626 + C15627 + C15628) * C48905) *
                C15280 +
            ((C15629 + C15630 + C15631) * C118 +
             (C15632 + C15633 + C15634) * C48905) *
                C49197) *
               C721 -
           (((C7762 * C2731 + C49181 * C2739 + C7761 * C2732 + C49213 * C2740 +
              C7760 * C2733 + C49226 * C2741) *
                 C48905 +
             (C7762 * C2727 + C49181 * C2734 + C7761 * C2728 + C49213 * C2735 +
              C7760 * C2729 + C49226 * C2736) *
                 C118) *
                C49197 +
            ((C15634 + C15633 + C15632) * C48905 +
             (C15631 + C15630 + C15629) * C118) *
                C15280 +
            ((C15628 + C15627 + C15626) * C48905 +
             (C15625 + C15624 + C15623) * C118) *
                C15279) *
               C49191) *
              C229 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C48905) *
                C15279 +
            ((C16061 + C16062 + C16063) * C118 +
             (C16064 + C16065 + C16066) * C48905) *
                C15280 +
            ((C7760 * C3217 + C49226 * C3220 + C7761 * C3218 + C49213 * C3221 +
              C7762 * C3219 + C49181 * C3222) *
                 C118 +
             (C7760 * C3223 + C49226 * C3226 + C7761 * C3224 + C49213 * C3227 +
              C7762 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C16066 + C16065 + C16064) * C48905 +
             (C16063 + C16062 + C16061) * C118) *
                C49197 +
            ((C8585 + C8586 + C8587) * C48905 +
             (C8588 + C8589 + C8590) * C118) *
                C15280 +
            ((C7966 + C7965 + C7964) * C48905 +
             (C7963 + C7962 + C7961) * C118) *
                C15279) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C1009 +
             (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
             C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
                C15279 +
            (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
            (C16902 + C16903 + C16904 + C16905 + C16906 + C16907) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C1011 + C10725 * C49217 +
             C10726 * C1010 + C11147 * C49229 + C11148 * C1009) *
                C49197 +
            (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
            (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
               C49191) *
              C229 +
          (((C17322 + C17323 + C17324 + C17325 + C17326 + C17327) * C15279 +
            (C17328 + C17329 + C17330 + C17331 + C17332 + C17333) * C15280 +
            (C10726 * C1009 + C10725 * C49229 + C10724 * C1010 +
             C10723 * C49217 + (C9060 * C10698 + C48800 * C10699) * C1011 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C17333 + C17332 + C17331 + C17330 + C17329 + C17328) * C49197 +
            (C17327 + C17326 + C17325 + C17324 + C17323 + C17322) * C15280 +
            (C9194 * C49194 + C9193 * C1011 + C9192 * C49217 + C9191 * C1010 +
             C9190 * C49229 + C9189 * C1009) *
                C15279) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C867 -
          ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
           (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
           (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
            C1006 * C351 + C1000 * C363) *
               C49229 +
           (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
            C1006 * C345 + C1000 * C356) *
               C1009) *
              C48917 * C868 +
          ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
            C1008 * C872 + C49181 * C877) *
               C1009 +
           (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
            C1008 * C882 + C49181 * C887) *
               C49229 +
           (C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
            C1008 * C2296 + C49181 * C2302) *
               C1010 +
           (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
            C1008 * C2305 + C49181 * C2314) *
               C49217 +
           (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
            C1008 * C2299 + C49181 * C2308) *
               C1011 +
           (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
            C1008 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C48905 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48917 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C48905) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C867 -
          ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
           (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
           (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
            C7760 * C351 + C49226 * C363) *
               C7757 +
           (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
            C7760 * C345 + C49226 * C356) *
               C7763) *
              C48917 * C868 +
          ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
            C7762 * C872 + C49181 * C877) *
               C7763 +
           (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
            C7762 * C882 + C49181 * C887) *
               C7757 +
           (C7760 * C2294 + C49226 * C2300 + C7761 * C2295 + C49213 * C2301 +
            C7762 * C2296 + C49181 * C2302) *
               C7764 +
           (C7760 * C2303 + C49226 * C2312 + C7761 * C2304 + C49213 * C2313 +
            C7762 * C2305 + C49181 * C2314) *
               C7758 +
           (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
            C7762 * C2299 + C49181 * C2308) *
               C7765 +
           (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
            C7762 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C867 -
          (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
           C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
           (C9060 * C351 + C48800 * C363) * C9055 +
           (C9060 * C345 + C48800 * C356) * C9061) *
              C48917 * C868 +
          ((C9060 * C870 + C48800 * C875) * C9061 +
           (C9060 * C880 + C48800 * C885) * C9055 +
           (C9060 * C2294 + C48800 * C2300) * C9062 +
           (C9060 * C2303 + C48800 * C2312) * C9056 +
           (C9060 * C2297 + C48800 * C2306) * C9063 +
           (C9060 * C2309 + C48800 * C2315) * C9057 +
           (C9060 * C9784 + C48800 * C9786) * C9064 +
           (C9060 * C9787 + C48800 * C9790) * C9058 +
           (C9060 * C9785 + C48800 * C9788) * C9065 +
           (C9060 * C9789 + C48800 * C9791) * C9059) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C118 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C48905) *
               C15279 +
           ((C15623 + C15624 + C15625) * C118 +
            (C15626 + C15627 + C15628) * C48905) *
               C15280 +
           C16493 * C49197) *
              C867 -
          (((C16485 + C16486 + C16487) * C48905 +
            (C16488 + C16489 + C16490) * C118) *
               C49197 +
           ((C15634 + C15633 + C15632) * C48905 +
            (C15631 + C15630 + C15629) * C118) *
               C15280 +
           ((C15628 + C15627 + C15626) * C48905 +
            (C15625 + C15624 + C15623) * C118) *
               C15279) *
              C868 +
          (C16493 * C15279 +
           ((C16490 + C16489 + C16488) * C118 +
            (C16487 + C16486 + C16485) * C48905) *
               C15280 +
           ((C7760 * C3649 + C49226 * C3652 + C7761 * C3650 + C49213 * C3653 +
             C7762 * C3651 + C49181 * C3654) *
                C118 +
            (C7760 * C3655 + C49226 * C3658 + C7761 * C3656 + C49213 * C3659 +
             C7762 * C3657 + C49181 * C3660) *
                C48905) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C1009 +
            (C9060 * C131 + C48800 * C140) * C49229 + C9189 * C1010 +
            C9190 * C49217 + C9191 * C1011 + C9192 * C49194) *
               C15279 +
           (C16896 + C16897 + C16898 + C16899 + C16900 + C16901) * C15280 +
           C17746 * C49197) *
              C867 -
          ((C17737 + C17738 + C17739 + C17740 + C17741 + C17742) * C49197 +
           (C16907 + C16906 + C16905 + C16904 + C16903 + C16902) * C15280 +
           (C16901 + C16900 + C16899 + C16898 + C16897 + C16896) * C15279) *
              C868 +
          (C17746 * C15279 +
           (C17742 + C17741 + C17740 + C17739 + C17738 + C17737) * C15280 +
           ((C9060 * C3649 + C48800 * C3652) * C1009 +
            (C9060 * C3655 + C48800 * C3658) * C49229 +
            (C9060 * C11128 + C48800 * C11130) * C1010 +
            (C9060 * C11131 + C48800 * C11134) * C49217 +
            (C9060 * C11129 + C48800 * C11132) * C1011 +
            (C9060 * C11133 + C48800 * C11135) * C49194) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[135] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C3794 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C49161 +
                     (C26855 + C26856 + C26857) * C3795 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C31302 +
                    ((C28463 + C28464 + C28465) * C3794 +
                     (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                     C29026 * C48964) *
                        C49004) *
                       C48888 * C48871 * C110 -
                   (((C28244 + C28243 + C28242) * C48964 +
                     (C28241 + C28240 + C28239) * C3795 +
                     (C28474 + C28473 + C28472) * C49161 +
                     (C28471 + C28470 + C28469) * C3794) *
                        C49004 +
                    ((C26872 + C26871 + C26870) * C48964 +
                     (C26869 + C26868 + C26867) * C3795 +
                     (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C49161 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C3794) *
                        C31302) *
                       C48888 * C48871 * C111 +
                   (((C47917 * C121 + C48805 * C128 + C47913 * C122 +
                      C48813 * C129 + C47923 * C123 + C26650 * C130) *
                         C3794 +
                     (C47917 * C133 + C48805 * C142 + C47913 * C134 +
                      C48813 * C143 + C47923 * C135 + C26650 * C144) *
                         C49161 +
                     (C47917 * C235 + C48805 * C246 + C47913 * C234 +
                      C48813 * C245 + C47923 * C233 + C26650 * C244) *
                         C3795 +
                     (C47917 * C241 + C48805 * C253 + C47913 * C240 +
                      C48813 * C252 + C47923 * C239 + C26650 * C251) *
                         C48964) *
                        C31302 +
                    ((C47917 * C343 + C48805 * C354 + C47913 * C342 +
                      C48813 * C353 + C47923 * C341 + C26650 * C352) *
                         C3794 +
                     (C47917 * C349 + C48805 * C361 + C47913 * C348 +
                      C48813 * C360 + C47923 * C347 + C26650 * C359) *
                         C49161 +
                     (C47917 * C621 + C48805 * C626 + C47913 * C622 +
                      C48813 * C627 + C47923 * C623 + C26650 * C628) *
                         C3795 +
                     (C47917 * C631 + C48805 * C636 + C47913 * C632 +
                      C48813 * C637 + C47923 * C633 + C26650 * C638) *
                         C48964) *
                        C49004) *
                       C48888 * C48871 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[136] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C48888 * C229 -
                    (((C27473 + C27474 + C27475) * C48964 +
                      (C27476 + C27477 + C27478) * C3795 + C29033 * C49161 +
                      C29034 * C3794) *
                         C49004 +
                     ((C26866 + C26865 + C26864) * C48964 +
                      (C26863 + C26862 + C26861) * C3795 +
                      (C26860 + C26859 + C26858) * C49161 +
                      (C26857 + C26856 + C26855) * C3794) *
                         C31302) *
                        C48888 * C49189) *
                       C231 +
                   ((((C26867 + C26868 + C26869) * C3794 +
                      (C26870 + C26871 + C26872) * C49161 +
                      (C26873 + C26874 + C26875) * C3795 +
                      (C26876 + C26877 + C26878) * C48964) *
                         C31302 +
                     ((C28239 + C28240 + C28241) * C3794 +
                      (C28242 + C28243 + C28244) * C49161 +
                      (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                       C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                          C3795 +
                      (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                       C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                          C48964) *
                         C49004) *
                        C48888 * C49189 -
                    (((C28244 + C28243 + C28242) * C48964 +
                      (C28241 + C28240 + C28239) * C3795 +
                      (C28474 + C28473 + C28472) * C49161 +
                      (C28471 + C28470 + C28469) * C3794) *
                         C49004 +
                     ((C26872 + C26871 + C26870) * C48964 +
                      (C26869 + C26868 + C26867) * C3795 +
                      (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C49161 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C3794) *
                         C31302) *
                        C48888 * C229) *
                       C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[137] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C339 -
                    (((C29027 + C29028 + C29029) * C48964 +
                      (C29030 + C29031 + C29032) * C3795 +
                      (C29581 + C29582 + C29583) * C49161 +
                      (C29584 + C29585 + C29586) * C3794) *
                         C49004 +
                     (C29033 * C48964 + C29034 * C3795 +
                      (C28468 + C28467 + C28466) * C49161 +
                      (C28465 + C28464 + C28463) * C3794) *
                         C31302) *
                        C49191) *
                       C48871 * C231 +
                   ((((C28469 + C28470 + C28471) * C3794 +
                      (C28472 + C28473 + C28474) * C49161 +
                      (C28239 + C28240 + C28241) * C3795 +
                      (C28242 + C28243 + C28244) * C48964) *
                         C31302 +
                     ((C47917 * C871 + C48805 * C876 + C47913 * C872 +
                       C48813 * C877 + C47923 * C873 + C26650 * C878) *
                          C3794 +
                      (C47917 * C881 + C48805 * C886 + C47913 * C882 +
                       C48813 * C887 + C47923 * C883 + C26650 * C888) *
                          C49161 +
                      (C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                       C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                          C3795 +
                      (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                       C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C28244 + C28243 + C28242) * C48964 +
                      (C28241 + C28240 + C28239) * C3795 +
                      (C28474 + C28473 + C28472) * C49161 +
                      (C28471 + C28470 + C28469) * C3794) *
                         C49004 +
                     ((C26872 + C26871 + C26870) * C48964 +
                      (C26869 + C26868 + C26867) * C3795 +
                      (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C49161 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C3794) *
                         C31302) *
                        C339) *
                       C48871 * C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[138] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C48888 * C447 -
                    (((C27473 + C27474 + C27475) * C48964 +
                      (C27476 + C27477 + C27478) * C3795 + C29033 * C49161 +
                      C29034 * C3794) *
                         C49004 +
                     ((C26866 + C26865 + C26864) * C48964 +
                      (C26863 + C26862 + C26861) * C3795 +
                      (C26860 + C26859 + C26858) * C49161 +
                      (C26857 + C26856 + C26855) * C3794) *
                         C31302) *
                        C48888 * C49189) *
                       C449 +
                   ((((C26867 + C26868 + C26869) * C3794 +
                      (C26870 + C26871 + C26872) * C49161 +
                      (C26873 + C26874 + C26875) * C3795 +
                      (C26876 + C26877 + C26878) * C48964) *
                         C31302 +
                     ((C28239 + C28240 + C28241) * C3794 +
                      (C28242 + C28243 + C28244) * C49161 +
                      (C47917 * C1393 + C48805 * C1400 + C47913 * C1392 +
                       C48813 * C1399 + C47923 * C1395 + C26650 * C1402) *
                          C3795 +
                      (C47917 * C1397 + C48805 * C1405 + C47913 * C1396 +
                       C48813 * C1404 + C47923 * C1403 + C26650 * C1407) *
                          C48964) *
                         C49004) *
                        C48888 * C49189 -
                    (((C28244 + C28243 + C28242) * C48964 +
                      (C28241 + C28240 + C28239) * C3795 +
                      (C28474 + C28473 + C28472) * C49161 +
                      (C28471 + C28470 + C28469) * C3794) *
                         C49004 +
                     ((C26872 + C26871 + C26870) * C48964 +
                      (C26869 + C26868 + C26867) * C3795 +
                      (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C49161 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C3794) *
                         C31302) *
                        C48888 * C447) *
                       C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C3794 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C49161 +
                     (C26855 + C26856 + C26857) * C3795 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C31302 +
                    ((C28463 + C28464 + C28465) * C3794 +
                     (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                     C29026 * C48964) *
                        C49004) *
                       C48888 * C513 -
                   (((C27473 + C27474 + C27475) * C48964 +
                     (C27476 + C27477 + C27478) * C3795 + C29033 * C49161 +
                     C29034 * C3794) *
                        C49004 +
                    ((C26866 + C26865 + C26864) * C48964 +
                     (C26863 + C26862 + C26861) * C3795 +
                     (C26860 + C26859 + C26858) * C49161 +
                     (C26857 + C26856 + C26855) * C3794) *
                        C31302) *
                       C48888 * C514 +
                   ((C27295 * C3794 + C27296 * C49161 +
                     (C27302 + C27301 + C27300) * C3795 +
                     (C27299 + C27298 + C27297) * C48964) *
                        C31302 +
                    ((C27478 + C27477 + C27476) * C3794 +
                     (C27475 + C27474 + C27473) * C49161 +
                     (C47917 * C1844 + C48805 * C1847 + C47913 * C1845 +
                      C48813 * C1848 + C47923 * C1846 + C26650 * C1849) *
                         C3795 +
                     (C47917 * C1850 + C48805 * C1853 + C47913 * C1851 +
                      C48813 * C1854 + C47923 * C1852 + C26650 * C1855) *
                         C48964) *
                        C49004) *
                       C48888 * C515) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C339 -
                    (((C29027 + C29028 + C29029) * C48964 +
                      (C29030 + C29031 + C29032) * C3795 +
                      (C29581 + C29582 + C29583) * C49161 +
                      (C29584 + C29585 + C29586) * C3794) *
                         C49004 +
                     (C29033 * C48964 + C29034 * C3795 +
                      (C28468 + C28467 + C28466) * C49161 +
                      (C28465 + C28464 + C28463) * C3794) *
                         C31302) *
                        C49191) *
                       C447 +
                   (((C29025 * C3794 + C29026 * C49161 +
                      (C27478 + C27477 + C27476) * C3795 +
                      (C27475 + C27474 + C27473) * C48964) *
                         C31302 +
                     ((C29032 + C29031 + C29030) * C3794 +
                      (C29029 + C29028 + C29027) * C49161 +
                      (C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                       C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                          C3795 +
                      (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                       C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C27473 + C27474 + C27475) * C48964 +
                      (C27476 + C27477 + C27478) * C3795 + C29033 * C49161 +
                      C29034 * C3794) *
                         C49004 +
                     ((C26866 + C26865 + C26864) * C48964 +
                      (C26863 + C26862 + C26861) * C3795 +
                      (C26860 + C26859 + C26858) * C49161 +
                      (C26857 + C26856 + C26855) * C3794) *
                         C31302) *
                        C339) *
                       C49189) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C721 -
                    (((C29027 + C29028 + C29029) * C48964 +
                      (C29030 + C29031 + C29032) * C3795 +
                      (C29581 + C29582 + C29583) * C49161 +
                      (C29584 + C29585 + C29586) * C3794) *
                         C49004 +
                     (C29033 * C48964 + C29034 * C3795 +
                      (C28468 + C28467 + C28466) * C49161 +
                      (C28465 + C28464 + C28463) * C3794) *
                         C31302) *
                        C49191) *
                       C48871 * C449 +
                   ((((C28469 + C28470 + C28471) * C3794 +
                      (C28472 + C28473 + C28474) * C49161 +
                      (C28239 + C28240 + C28241) * C3795 +
                      (C28242 + C28243 + C28244) * C48964) *
                         C31302 +
                     ((C47917 * C871 + C48805 * C876 + C47913 * C872 +
                       C48813 * C877 + C47923 * C873 + C26650 * C878) *
                          C3794 +
                      (C47917 * C881 + C48805 * C886 + C47913 * C882 +
                       C48813 * C887 + C47923 * C883 + C26650 * C888) *
                          C49161 +
                      (C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                       C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                          C3795 +
                      (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                       C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C28244 + C28243 + C28242) * C48964 +
                      (C28241 + C28240 + C28239) * C3795 +
                      (C28474 + C28473 + C28472) * C49161 +
                      (C28471 + C28470 + C28469) * C3794) *
                         C49004 +
                     ((C26872 + C26871 + C26870) * C48964 +
                      (C26869 + C26868 + C26867) * C3795 +
                      (C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C49161 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C3794) *
                         C31302) *
                        C721) *
                       C48871 * C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C3794 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C49161 +
                      (C26855 + C26856 + C26857) * C3795 +
                      (C26858 + C26859 + C26860) * C48964) *
                         C31302 +
                     ((C28463 + C28464 + C28465) * C3794 +
                      (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                      C29026 * C48964) *
                         C49004) *
                        C721 -
                    (((C29027 + C29028 + C29029) * C48964 +
                      (C29030 + C29031 + C29032) * C3795 +
                      (C29581 + C29582 + C29583) * C49161 +
                      (C29584 + C29585 + C29586) * C3794) *
                         C49004 +
                     (C29033 * C48964 + C29034 * C3795 +
                      (C28468 + C28467 + C28466) * C49161 +
                      (C28465 + C28464 + C28463) * C3794) *
                         C31302) *
                        C49191) *
                       C229 +
                   (((C29025 * C3794 + C29026 * C49161 +
                      (C27478 + C27477 + C27476) * C3795 +
                      (C27475 + C27474 + C27473) * C48964) *
                         C31302 +
                     ((C29032 + C29031 + C29030) * C3794 +
                      (C29029 + C29028 + C29027) * C49161 +
                      (C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                       C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                          C3795 +
                      (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                       C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C27473 + C27474 + C27475) * C48964 +
                      (C27476 + C27477 + C27478) * C3795 + C29033 * C49161 +
                      C29034 * C3794) *
                         C49004 +
                     ((C26866 + C26865 + C26864) * C48964 +
                      (C26863 + C26862 + C26861) * C3795 +
                      (C26860 + C26859 + C26858) * C49161 +
                      (C26857 + C26856 + C26855) * C3794) *
                         C31302) *
                        C721) *
                       C49189) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C3794 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C49161 +
                     (C26855 + C26856 + C26857) * C3795 +
                     (C26858 + C26859 + C26860) * C48964) *
                        C31302 +
                    ((C28463 + C28464 + C28465) * C3794 +
                     (C28466 + C28467 + C28468) * C49161 + C29025 * C3795 +
                     C29026 * C48964) *
                        C49004) *
                       C867 -
                   (((C29027 + C29028 + C29029) * C48964 +
                     (C29030 + C29031 + C29032) * C3795 +
                     (C29581 + C29582 + C29583) * C49161 +
                     (C29584 + C29585 + C29586) * C3794) *
                        C49004 +
                    (C29033 * C48964 + C29034 * C3795 +
                     (C28468 + C28467 + C28466) * C49161 +
                     (C28465 + C28464 + C28463) * C3794) *
                        C31302) *
                       C868 +
                   (((C29586 + C29585 + C29584) * C3794 +
                     (C29583 + C29582 + C29581) * C49161 +
                     (C29032 + C29031 + C29030) * C3795 +
                     (C29029 + C29028 + C29027) * C48964) *
                        C31302 +
                    ((C47917 * C2729 + C48805 * C2736 + C47913 * C2728 +
                      C48813 * C2735 + C47923 * C2727 + C26650 * C2734) *
                         C3794 +
                     (C47917 * C2733 + C48805 * C2741 + C47913 * C2732 +
                      C48813 * C2740 + C47923 * C2731 + C26650 * C2739) *
                         C49161 +
                     (C47917 * C3217 + C48805 * C3220 + C47913 * C3218 +
                      C48813 * C3221 + C47923 * C3219 + C26650 * C3222) *
                         C3795 +
                     (C47917 * C3223 + C48805 * C3226 + C47913 * C3224 +
                      C48813 * C3227 + C47923 * C3225 + C26650 * C3228) *
                         C48964) *
                        C49004) *
                       C869) *
                  C48871 * C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C3794 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49161 +
            (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
               C49000 +
           ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
            C25964 * C3795 + C25965 * C48964) *
               C49007 +
           (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
            C25967 * C48964) *
               C36778) *
              C48888 * C48871 * C110 -
          (((C25175 + C25174) * C48964 + (C25173 + C25172) * C3795 +
            (C25417 + C25416) * C49161 + (C25415 + C25414) * C3794) *
               C36778 +
           ((C25171 + C25170) * C48964 + (C25169 + C25168) * C3795 +
            (C25413 + C25412) * C49161 + (C25411 + C25410) * C3794) *
               C49007 +
           ((C23893 + C23892) * C48964 + (C23891 + C23890) * C3795 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49161 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C3794) *
               C49000) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C3794 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C49161 +
            (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
                C3795 +
            (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
                C48964) *
               C49000 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C3794 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C49161 +
            (C23693 * C621 + C23687 * C626 + C23694 * C622 + C48810 * C627) *
                C3795 +
            (C23693 * C631 + C23687 * C636 + C23694 * C632 + C48810 * C637) *
                C48964) *
               C49007 +
           ((C23693 * C872 + C23687 * C877 + C23694 * C873 + C48810 * C878) *
                C3794 +
            (C23693 * C882 + C23687 * C887 + C23694 * C883 + C48810 * C888) *
                C49161 +
            (C23693 * C2296 + C23687 * C2302 + C23694 * C2577 +
             C48810 * C2578) *
                C3795 +
            (C23693 * C2305 + C23687 * C2314 + C23694 * C2579 +
             C48810 * C2580) *
                C48964) *
               C36778) *
              C48888 * C48871 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C48888 * C229 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C3795 +
             C25976 * C49161 + C25977 * C3794) *
                C36778 +
            (C30669 * C48964 + C30670 * C3795 + C25978 * C49161 +
             C25979 * C3794) *
                C49007 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C3795 +
             (C23881 + C23880) * C49161 + (C23879 + C23878) * C3794) *
                C49000) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C3794 + (C23892 + C23893) * C49161 +
             (C23894 + C23895) * C3795 + (C23896 + C23897) * C48964) *
                C49000 +
            ((C25168 + C25169) * C3794 + (C25170 + C25171) * C49161 +
             (C29935 + C29936) * C3795 + (C29937 + C29938) * C48964) *
                C49007 +
            ((C25172 + C25173) * C3794 + (C25174 + C25175) * C49161 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C3795 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C36778) *
               C48888 * C49189 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C3795 +
             (C25417 + C25416) * C49161 + (C25415 + C25414) * C3794) *
                C36778 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C3795 +
             (C25413 + C25412) * C49161 + (C25411 + C25410) * C3794) *
                C49007 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C3795 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49161 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C3794) *
                C49000) *
               C48888 * C229) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C339 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C3795 +
             (C26532 + C26533) * C49161 + (C26534 + C26535) * C3794) *
                C36778 +
            (C25976 * C48964 + C25977 * C3795 + (C25409 + C25408) * C49161 +
             (C25407 + C25406) * C3794) *
                C49007 +
            (C25978 * C48964 + C25979 * C3795 + (C25405 + C25404) * C49161 +
             (C25403 + C25402) * C3794) *
                C49000) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C3794 + (C25412 + C25413) * C49161 +
             (C25168 + C25169) * C3795 + (C25170 + C25171) * C48964) *
                C49000 +
            ((C25414 + C25415) * C3794 + (C25416 + C25417) * C49161 +
             (C25172 + C25173) * C3795 + (C25174 + C25175) * C48964) *
                C49007 +
            ((C34325 + C34326) * C3794 + (C34327 + C34328) * C49161 +
             (C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C3795 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C36778) *
               C49191 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C3795 +
             (C25417 + C25416) * C49161 + (C25415 + C25414) * C3794) *
                C36778 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C3795 +
             (C25413 + C25412) * C49161 + (C25411 + C25410) * C3794) *
                C49007 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C3795 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49161 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C3794) *
                C49000) *
               C339) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C48888 * C447 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C3795 +
             C25976 * C49161 + C25977 * C3794) *
                C36778 +
            (C30669 * C48964 + C30670 * C3795 + C25978 * C49161 +
             C25979 * C3794) *
                C49007 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C3795 +
             (C23881 + C23880) * C49161 + (C23879 + C23878) * C3794) *
                C49000) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C3794 + (C23892 + C23893) * C49161 +
             (C23894 + C23895) * C3795 + (C23896 + C23897) * C48964) *
                C49000 +
            ((C25168 + C25169) * C3794 + (C25170 + C25171) * C49161 +
             (C29935 + C29936) * C3795 + (C29937 + C29938) * C48964) *
                C49007 +
            ((C25172 + C25173) * C3794 + (C25174 + C25175) * C49161 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C3795 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C48964) *
                C36778) *
               C48888 * C49189 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C3795 +
             (C25417 + C25416) * C49161 + (C25415 + C25414) * C3794) *
                C36778 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C3795 +
             (C25413 + C25412) * C49161 + (C25411 + C25410) * C3794) *
                C49007 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C3795 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49161 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C3794) *
                C49000) *
               C48888 * C447) *
              C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C3794 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49161 +
            (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
               C49000 +
           ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
            C25964 * C3795 + C25965 * C48964) *
               C49007 +
           (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
            C25967 * C48964) *
               C36778) *
              C48888 * C513 -
          (((C25766 + C25767) * C48964 + (C25768 + C25769) * C3795 +
            C25976 * C49161 + C25977 * C3794) *
               C36778 +
           (C30669 * C48964 + C30670 * C3795 + C25978 * C49161 +
            C25979 * C3794) *
               C49007 +
           ((C23885 + C23884) * C48964 + (C23883 + C23882) * C3795 +
            (C23881 + C23880) * C49161 + (C23879 + C23878) * C3794) *
               C49000) *
              C48888 * C514 +
          ((C24260 * C3794 + C24261 * C49161 + C24262 * C3795 +
            C24263 * C48964) *
               C49000 +
           (C30473 * C3794 + C30474 * C49161 + (C24433 + C24432) * C3795 +
            (C24431 + C24430) * C48964) *
               C49007 +
           ((C25769 + C25768) * C3794 + (C25767 + C25766) * C49161 +
            (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
             C48810 * C10049) *
                C3795 +
            (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
             C48810 * C10051) *
                C48964) *
               C36778) *
              C48888 * C515) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C339 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C3795 +
             (C26532 + C26533) * C49161 + (C26534 + C26535) * C3794) *
                C36778 +
            (C25976 * C48964 + C25977 * C3795 + (C25409 + C25408) * C49161 +
             (C25407 + C25406) * C3794) *
                C49007 +
            (C25978 * C48964 + C25979 * C3795 + (C25405 + C25404) * C49161 +
             (C25403 + C25402) * C3794) *
                C49000) *
               C49191) *
              C447 +
          (((C25964 * C3794 + C25965 * C49161 + C30473 * C3795 +
             C30474 * C48964) *
                C49000 +
            (C25966 * C3794 + C25967 * C49161 + (C25769 + C25768) * C3795 +
             (C25767 + C25766) * C48964) *
                C49007 +
            ((C25983 + C25982) * C3794 + (C25981 + C25980) * C49161 +
             (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
              C48810 * C10238) *
                 C3795 +
             (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C36778) *
               C49191 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C3795 +
             C25976 * C49161 + C25977 * C3794) *
                C36778 +
            (C30669 * C48964 + C30670 * C3795 + C25978 * C49161 +
             C25979 * C3794) *
                C49007 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C3795 +
             (C23881 + C23880) * C49161 + (C23879 + C23878) * C3794) *
                C49000) *
               C339) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C721 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C3795 +
             (C26532 + C26533) * C49161 + (C26534 + C26535) * C3794) *
                C36778 +
            (C25976 * C48964 + C25977 * C3795 + (C25409 + C25408) * C49161 +
             (C25407 + C25406) * C3794) *
                C49007 +
            (C25978 * C48964 + C25979 * C3795 + (C25405 + C25404) * C49161 +
             (C25403 + C25402) * C3794) *
                C49000) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C3794 + (C25412 + C25413) * C49161 +
             (C25168 + C25169) * C3795 + (C25170 + C25171) * C48964) *
                C49000 +
            ((C25414 + C25415) * C3794 + (C25416 + C25417) * C49161 +
             (C25172 + C25173) * C3795 + (C25174 + C25175) * C48964) *
                C49007 +
            ((C34325 + C34326) * C3794 + (C34327 + C34328) * C49161 +
             (C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C3795 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48964) *
                C36778) *
               C49191 -
           (((C25175 + C25174) * C48964 + (C25173 + C25172) * C3795 +
             (C25417 + C25416) * C49161 + (C25415 + C25414) * C3794) *
                C36778 +
            ((C25171 + C25170) * C48964 + (C25169 + C25168) * C3795 +
             (C25413 + C25412) * C49161 + (C25411 + C25410) * C3794) *
                C49007 +
            ((C23893 + C23892) * C48964 + (C23891 + C23890) * C3795 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49161 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C3794) *
                C49000) *
               C721) *
              C48871 * C49187)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C3794 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49161 +
             (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
                C49000 +
            ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
             C25964 * C3795 + C25965 * C48964) *
                C49007 +
            (C26518 * C3794 + C26519 * C49161 + C25966 * C3795 +
             C25967 * C48964) *
                C36778) *
               C721 -
           (((C25980 + C25981) * C48964 + (C25982 + C25983) * C3795 +
             (C26532 + C26533) * C49161 + (C26534 + C26535) * C3794) *
                C36778 +
            (C25976 * C48964 + C25977 * C3795 + (C25409 + C25408) * C49161 +
             (C25407 + C25406) * C3794) *
                C49007 +
            (C25978 * C48964 + C25979 * C3795 + (C25405 + C25404) * C49161 +
             (C25403 + C25402) * C3794) *
                C49000) *
               C49191) *
              C229 +
          (((C25964 * C3794 + C25965 * C49161 + C30473 * C3795 +
             C30474 * C48964) *
                C49000 +
            (C25966 * C3794 + C25967 * C49161 + (C25769 + C25768) * C3795 +
             (C25767 + C25766) * C48964) *
                C49007 +
            ((C25983 + C25982) * C3794 + (C25981 + C25980) * C49161 +
             (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
              C48810 * C10238) *
                 C3795 +
             (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
              C48810 * C10241) *
                 C48964) *
                C36778) *
               C49191 -
           (((C25766 + C25767) * C48964 + (C25768 + C25769) * C3795 +
             C25976 * C49161 + C25977 * C3794) *
                C36778 +
            (C30669 * C48964 + C30670 * C3795 + C25978 * C49161 +
             C25979 * C3794) *
                C49007 +
            ((C23885 + C23884) * C48964 + (C23883 + C23882) * C3795 +
             (C23881 + C23880) * C49161 + (C23879 + C23878) * C3794) *
                C49000) *
               C721) *
              C49189) *
         C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C3794 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49161 +
            (C23878 + C23879) * C3795 + (C23880 + C23881) * C48964) *
               C49000 +
           ((C25402 + C25403) * C3794 + (C25404 + C25405) * C49161 +
            C25964 * C3795 + C25965 * C48964) *
               C49007 +
           C39527 * C36778) *
              C867 -
          (((C25980 + C25981) * C48964 + (C25982 + C25983) * C3795 +
            (C26532 + C26533) * C49161 + (C26534 + C26535) * C3794) *
               C36778 +
           (C25976 * C48964 + C25977 * C3795 + (C25409 + C25408) * C49161 +
            (C25407 + C25406) * C3794) *
               C49007 +
           (C25978 * C48964 + C25979 * C3795 + (C25405 + C25404) * C49161 +
            (C25403 + C25402) * C3794) *
               C49000) *
              C868 +
          (C39527 * C49000 +
           (C35047 * C3794 + C35048 * C49161 + (C25983 + C25982) * C3795 +
            (C25981 + C25980) * C48964) *
               C49007 +
           ((C35063 + C35062) * C3794 + (C35061 + C35060) * C49161 +
            (C23693 * C11128 + C23687 * C11130 + C23694 * C17895 +
             C48810 * C17896) *
                C3795 +
            (C23693 * C11131 + C23687 * C11134 + C23694 * C17897 +
             C48810 * C17898) *
                C48964) *
               C36778) *
              C869) *
         C48871 * C48837) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
            (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
            (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
               C49004 +
           ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
            (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49229 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C1009) *
               C31302) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C1009 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C49229 +
            (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
                C1010 +
            (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
                C49217 +
            (C23693 * C519 + C23687 * C524 + C23694 * C520 + C48810 * C525) *
                C1011 +
            (C23693 * C529 + C23687 * C534 + C23694 * C530 + C48810 * C535) *
                C49194) *
               C31302 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C1009 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C49229 +
            (C23693 * C621 + C23687 * C626 + C23694 * C622 + C48810 * C627) *
                C1010 +
            (C23693 * C631 + C23687 * C636 + C23694 * C632 + C48810 * C637) *
                C49217 +
            (C23693 * C1392 + C23687 * C1399 + C23694 * C1395 +
             C48810 * C1402) *
                C1011 +
            (C23693 * C1396 + C23687 * C1404 + C23694 * C1403 +
             C48810 * C1407) *
                C49194) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C22511 * C345 + C49235 * C356 + C22512 * C344 + C49228 * C355 +
             C22513 * C343 + C49215 * C354 + C22514 * C342 + C49198 * C353) *
                C118 +
            (C22511 * C351 + C49235 * C363 + C22512 * C350 + C49228 * C362 +
             C22513 * C349 + C49215 * C361 + C22514 * C348 + C49198 * C360) *
                C48905) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C22514 * C347 + C49198 * C359 + C22513 * C348 + C49215 * C360 +
             C22512 * C349 + C49228 * C361 + C22511 * C350 + C49235 * C362) *
                C48905 +
            (C22514 * C341 + C49198 * C352 + C22513 * C342 + C49215 * C353 +
             C22512 * C343 + C49228 * C354 + C22511 * C344 + C49235 * C355) *
                C118) *
               C49004 +
           ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C48905 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C118) *
               C31302) *
              C48888 * C48871 * C111 +
          (((C22511 * C121 + C49235 * C128 + C22512 * C122 + C49228 * C129 +
             C22513 * C123 + C49215 * C130 + C22514 * C124 + C49198 * C137) *
                C118 +
            (C22511 * C133 + C49235 * C142 + C22512 * C134 + C49228 * C143 +
             C22513 * C135 + C49215 * C144 + C22514 * C136 + C49198 * C145) *
                C48905) *
               C31302 +
           ((C22511 * C343 + C49235 * C354 + C22512 * C342 + C49228 * C353 +
             C22513 * C341 + C49215 * C352 + C22514 * C346 + C49198 * C357) *
                C118 +
            (C22511 * C349 + C49235 * C361 + C22512 * C348 + C49228 * C360 +
             C22513 * C347 + C49215 * C359 + C22514 * C358 + C49198 * C364) *
                C48905) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C118 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48905) *
               C49237 +
           ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
           (C26518 * C118 + C26519 * C48905) * C49225 +
           ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
              C48888 * C48871 * C110 -
          (((C23694 * C2731 + C48810 * C2739 + C23693 * C2732 +
             C23687 * C2740) *
                C48905 +
            (C23694 * C2727 + C48810 * C2734 + C23693 * C2728 +
             C23687 * C2735) *
                C118) *
               C49210 +
           ((C25417 + C25416) * C48905 + (C25415 + C25414) * C118) * C49225 +
           ((C25413 + C25412) * C48905 + (C25411 + C25410) * C118) * C49234 +
           ((C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C48905 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C118) *
               C49237) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C118 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C48905) *
               C49237 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C118 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C48905) *
               C49234 +
           ((C23693 * C872 + C23687 * C877 + C23694 * C873 + C48810 * C878) *
                C118 +
            (C23693 * C882 + C23687 * C887 + C23694 * C883 + C48810 * C888) *
                C48905) *
               C49225 +
           ((C23693 * C2727 + C23687 * C2734 + C23694 * C2730 +
             C48810 * C2737) *
                C118 +
            (C23693 * C2731 + C23687 * C2739 + C23694 * C2738 +
             C48810 * C2742) *
                C48905) *
               C49210) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C48888 * C229 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C1009 + (C23892 + C23893) * C49229 +
             (C23894 + C23895) * C1010 + (C23896 + C23897) * C49217 +
             (C23898 + C23899) * C1011 + (C23900 + C23901) * C49194) *
                C31302 +
            ((C25168 + C25169) * C1009 + (C25170 + C25171) * C49229 +
             (C29935 + C29936) * C1010 + (C29937 + C29938) * C49217 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C1011 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C22511 * C345 + C49235 * C356 + C22512 * C344 + C49228 * C355 +
              C22513 * C343 + C49215 * C354 + C22514 * C342 + C49198 * C353) *
                 C118 +
             (C22511 * C351 + C49235 * C363 + C22512 * C350 + C49228 * C362 +
              C22513 * C349 + C49215 * C361 + C22514 * C348 + C49198 * C360) *
                 C48905) *
                C49004) *
               C48888 * C229 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C48888 * C49189) *
              C231 +
          ((((C22688 + C22689 + C22690 + C22691) * C118 +
             (C22692 + C22693 + C22694 + C22695) * C48905) *
                C31302 +
            ((C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
              C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                 C118 +
             (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
              C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C22514 * C347 + C49198 * C359 + C22513 * C348 + C49215 * C360 +
              C22512 * C349 + C49228 * C361 + C22511 * C350 + C49235 * C362) *
                 C48905 +
             (C22514 * C341 + C49198 * C352 + C22513 * C342 + C49215 * C353 +
              C22512 * C343 + C49228 * C354 + C22511 * C344 + C49235 * C355) *
                 C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C48888 * C229 -
           (((C25980 + C25981) * C48905 + (C25982 + C25983) * C118) * C49210 +
            (C25976 * C48905 + C25977 * C118) * C49225 +
            (C25978 * C48905 + C25979 * C118) * C49234 +
            ((C23881 + C23880) * C48905 + (C23879 + C23878) * C118) * C49237) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C118 + (C23892 + C23893) * C48905) * C49237 +
            ((C25168 + C25169) * C118 + (C25170 + C25171) * C48905) * C49234 +
            ((C25172 + C25173) * C118 + (C25174 + C25175) * C48905) * C49225 +
            ((C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C118 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48905) *
                C49210) *
               C48888 * C49189 -
           (((C23694 * C2731 + C48810 * C2739 + C23693 * C2732 +
              C23687 * C2740) *
                 C48905 +
             (C23694 * C2727 + C48810 * C2734 + C23693 * C2728 +
              C23687 * C2735) *
                 C118) *
                C49210 +
            ((C25417 + C25416) * C48905 + (C25415 + C25414) * C118) * C49225 +
            ((C25413 + C25412) * C48905 + (C25411 + C25410) * C118) * C49234 +
            ((C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48905 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C118) *
                C49237) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C1009 + (C25412 + C25413) * C49229 +
             (C25168 + C25169) * C1010 + (C25170 + C25171) * C49217 +
             (C29935 + C29936) * C1011 + (C29937 + C29938) * C49194) *
                C31302 +
            ((C25414 + C25415) * C1009 + (C25416 + C25417) * C49229 +
             (C25172 + C25173) * C1010 + (C25174 + C25175) * C49217 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C1011 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C339 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C48871 * C231 +
          ((((C31605 + C31606 + C31607 + C31608) * C118 +
             (C31609 + C31610 + C31611 + C31612) * C48905) *
                C31302 +
            ((C22511 * C871 + C49235 * C876 + C22512 * C872 + C49228 * C877 +
              C22513 * C873 + C49215 * C878 + C22514 * C874 + C49198 * C879) *
                 C118 +
             (C22511 * C881 + C49235 * C886 + C22512 * C882 + C49228 * C887 +
              C22513 * C883 + C49215 * C888 + C22514 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C339 -
           (((C23694 * C3656 + C48810 * C3659 + C23693 * C3655 +
              C23687 * C3658) *
                 C48905 +
             (C23694 * C3650 + C48810 * C3653 + C23693 * C3649 +
              C23687 * C3652) *
                 C118) *
                C49210 +
            ((C26532 + C26533) * C48905 + (C26534 + C26535) * C118) * C49225 +
            ((C25409 + C25408) * C48905 + (C25407 + C25406) * C118) * C49234 +
            ((C25405 + C25404) * C48905 + (C25403 + C25402) * C118) * C49237) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C118 + (C25412 + C25413) * C48905) * C49237 +
            ((C25414 + C25415) * C118 + (C25416 + C25417) * C48905) * C49234 +
            ((C34325 + C34326) * C118 + (C34327 + C34328) * C48905) * C49225 +
            ((C23693 * C3650 + C23687 * C3653 + C23694 * C3651 +
              C48810 * C3654) *
                 C118 +
             (C23693 * C3656 + C23687 * C3659 + C23694 * C3657 +
              C48810 * C3660) *
                 C48905) *
                C49210) *
               C49191 -
           (((C34328 + C34327) * C48905 + (C34326 + C34325) * C118) * C49210 +
            ((C25417 + C25416) * C48905 + (C25415 + C25414) * C118) * C49225 +
            ((C25413 + C25412) * C48905 + (C25411 + C25410) * C118) * C49234 +
            ((C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48905 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C118) *
                C49237) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C48888 * C447 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C1009 + (C23892 + C23893) * C49229 +
             (C23894 + C23895) * C1010 + (C23896 + C23897) * C49217 +
             (C23898 + C23899) * C1011 + (C23900 + C23901) * C49194) *
                C31302 +
            ((C25168 + C25169) * C1009 + (C25170 + C25171) * C49229 +
             (C29935 + C29936) * C1010 + (C29937 + C29938) * C49217 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C1011 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C48888 * C447 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C48888 * C49189) *
              C449 +
          ((((C22688 + C22689 + C22690 + C22691) * C118 +
             (C22692 + C22693 + C22694 + C22695) * C48905) *
                C31302 +
            ((C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
              C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                 C118 +
             (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
              C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C48888 * C447 -
           (((C25980 + C25981) * C48905 + (C25982 + C25983) * C118) * C49210 +
            (C25976 * C48905 + C25977 * C118) * C49225 +
            (C25978 * C48905 + C25979 * C118) * C49234 +
            ((C23881 + C23880) * C48905 + (C23879 + C23878) * C118) * C49237) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C118 + (C23892 + C23893) * C48905) * C49237 +
            ((C25168 + C25169) * C118 + (C25170 + C25171) * C48905) * C49234 +
            ((C25172 + C25173) * C118 + (C25174 + C25175) * C48905) * C49225 +
            ((C23693 * C3218 + C23687 * C3221 + C23694 * C3219 +
              C48810 * C3222) *
                 C118 +
             (C23693 * C3224 + C23687 * C3227 + C23694 * C3225 +
              C48810 * C3228) *
                 C48905) *
                C49210) *
               C48888 * C49189 -
           (((C34328 + C34327) * C48905 + (C34326 + C34325) * C118) * C49210 +
            ((C25417 + C25416) * C48905 + (C25415 + C25414) * C118) * C49225 +
            ((C25413 + C25412) * C48905 + (C25411 + C25410) * C118) * C49234 +
            ((C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48905 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C118) *
                C49237) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C48888 * C513 -
          (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
            C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
            C25979 * C1009) *
               C49004 +
           ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
            (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
            (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
               C31302) *
              C48888 * C514 +
          ((C24260 * C1009 + C24261 * C49229 + C24262 * C1010 +
            C24263 * C49217 + (C24275 + C24274) * C1011 +
            (C24273 + C24272) * C49194) *
               C31302 +
           (C30473 * C1009 + C30474 * C49229 + (C24433 + C24432) * C1010 +
            (C24431 + C24430) * C49217 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C1011 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49194) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C31597 + C31598 + C31599 + C31600) * C118 +
            (C31601 + C31602 + C31603 + C31604) * C48905) *
               C49004) *
              C48888 * C513 -
          (((C23224 + C23225 + C23226 + C23227) * C48905 +
            (C23228 + C23229 + C23230 + C23231) * C118) *
               C49004 +
           ((C22687 + C22686 + C22685 + C22684) * C48905 +
            (C22683 + C22682 + C22681 + C22680) * C118) *
               C31302) *
              C48888 * C514 +
          (((C23077 + C23076 + C23075 + C23074) * C118 +
            (C23073 + C23072 + C23071 + C23070) * C48905) *
               C31302 +
           ((C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C118 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48905) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C118 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48905) *
               C49237 +
           ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
           (C26518 * C118 + C26519 * C48905) * C49225 +
           ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
              C48888 * C513 -
          (((C25980 + C25981) * C48905 + (C25982 + C25983) * C118) * C49210 +
           (C25976 * C48905 + C25977 * C118) * C49225 +
           (C25978 * C48905 + C25979 * C118) * C49234 +
           ((C23881 + C23880) * C48905 + (C23879 + C23878) * C118) * C49237) *
              C48888 * C514 +
          ((C24260 * C118 + C24261 * C48905) * C49237 +
           (C30473 * C118 + C30474 * C48905) * C49234 +
           ((C25769 + C25768) * C118 + (C25767 + C25766) * C48905) * C49225 +
           ((C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
             C48810 * C10238) *
                C118 +
            (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
             C48810 * C10241) *
                C48905) *
               C49210) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C447 +
          (((C25964 * C1009 + C25965 * C49229 + C30473 * C1010 +
             C30474 * C49217 + (C24433 + C24432) * C1011 +
             (C24431 + C24430) * C49194) *
                C31302 +
            (C25966 * C1009 + C25967 * C49229 + (C25769 + C25768) * C1010 +
             (C25767 + C25766) * C49217 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C1011 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C339 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C447 +
          ((((C23231 + C23230 + C23229 + C23228) * C118 +
             (C23227 + C23226 + C23225 + C23224) * C48905) *
                C31302 +
            ((C22511 * C2294 + C49235 * C2300 + C22512 * C2295 +
              C49228 * C2301 + C22513 * C2296 + C49215 * C2302 +
              C22514 * C2577 + C49198 * C2578) *
                 C118 +
             (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 +
              C49228 * C2313 + C22513 * C2305 + C49215 * C2314 +
              C22514 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C339 -
           (((C23694 * C3656 + C48810 * C3659 + C23693 * C3655 +
              C23687 * C3658) *
                 C48905 +
             (C23694 * C3650 + C48810 * C3653 + C23693 * C3649 +
              C23687 * C3652) *
                 C118) *
                C49210 +
            ((C26532 + C26533) * C48905 + (C26534 + C26535) * C118) * C49225 +
            ((C25409 + C25408) * C48905 + (C25407 + C25406) * C118) * C49234 +
            ((C25405 + C25404) * C48905 + (C25403 + C25402) * C118) * C49237) *
               C49191) *
              C447 +
          (((C25964 * C118 + C25965 * C48905) * C49237 +
            (C25966 * C118 + C25967 * C48905) * C49234 +
            ((C25983 + C25982) * C118 + (C25981 + C25980) * C48905) * C49225 +
            ((C23693 * C11128 + C23687 * C11130 + C23694 * C17895 +
              C48810 * C17896) *
                 C118 +
             (C23693 * C11131 + C23687 * C11134 + C23694 * C17897 +
              C48810 * C17898) *
                 C48905) *
                C49210) *
               C49191 -
           (((C25980 + C25981) * C48905 + (C25982 + C25983) * C118) * C49210 +
            (C25976 * C48905 + C25977 * C118) * C49225 +
            (C25978 * C48905 + C25979 * C118) * C49234 +
            ((C23881 + C23880) * C48905 + (C23879 + C23878) * C118) * C49237) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C1009 + (C25412 + C25413) * C49229 +
             (C25168 + C25169) * C1010 + (C25170 + C25171) * C49217 +
             (C29935 + C29936) * C1011 + (C29937 + C29938) * C49194) *
                C31302 +
            ((C25414 + C25415) * C1009 + (C25416 + C25417) * C49229 +
             (C25172 + C25173) * C1010 + (C25174 + C25175) * C49217 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C1011 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C721 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C48871 * C449 +
          ((((C31605 + C31606 + C31607 + C31608) * C118 +
             (C31609 + C31610 + C31611 + C31612) * C48905) *
                C31302 +
            ((C22511 * C871 + C49235 * C876 + C22512 * C872 + C49228 * C877 +
              C22513 * C873 + C49215 * C878 + C22514 * C874 + C49198 * C879) *
                 C118 +
             (C22511 * C881 + C49235 * C886 + C22512 * C882 + C49228 * C887 +
              C22513 * C883 + C49215 * C888 + C22514 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C721 -
           (((C23694 * C3656 + C48810 * C3659 + C23693 * C3655 +
              C23687 * C3658) *
                 C48905 +
             (C23694 * C3650 + C48810 * C3653 + C23693 * C3649 +
              C23687 * C3652) *
                 C118) *
                C49210 +
            ((C26532 + C26533) * C48905 + (C26534 + C26535) * C118) * C49225 +
            ((C25409 + C25408) * C48905 + (C25407 + C25406) * C118) * C49234 +
            ((C25405 + C25404) * C48905 + (C25403 + C25402) * C118) * C49237) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C118 + (C25412 + C25413) * C48905) * C49237 +
            ((C25414 + C25415) * C118 + (C25416 + C25417) * C48905) * C49234 +
            ((C34325 + C34326) * C118 + (C34327 + C34328) * C48905) * C49225 +
            ((C23693 * C3650 + C23687 * C3653 + C23694 * C3651 +
              C48810 * C3654) *
                 C118 +
             (C23693 * C3656 + C23687 * C3659 + C23694 * C3657 +
              C48810 * C3660) *
                 C48905) *
                C49210) *
               C49191 -
           (((C34328 + C34327) * C48905 + (C34326 + C34325) * C118) * C49210 +
            ((C25417 + C25416) * C48905 + (C25415 + C25414) * C118) * C49225 +
            ((C25413 + C25412) * C48905 + (C25411 + C25410) * C118) * C49234 +
            ((C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C48905 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C118) *
                C49237) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C229 +
          (((C25964 * C1009 + C25965 * C49229 + C30473 * C1010 +
             C30474 * C49217 + (C24433 + C24432) * C1011 +
             (C24431 + C24430) * C49194) *
                C31302 +
            (C25966 * C1009 + C25967 * C49229 + (C25769 + C25768) * C1010 +
             (C25767 + C25766) * C49217 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C1011 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C721 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C229 +
          ((((C23231 + C23230 + C23229 + C23228) * C118 +
             (C23227 + C23226 + C23225 + C23224) * C48905) *
                C31302 +
            ((C22511 * C2294 + C49235 * C2300 + C22512 * C2295 +
              C49228 * C2301 + C22513 * C2296 + C49215 * C2302 +
              C22514 * C2577 + C49198 * C2578) *
                 C118 +
             (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 +
              C49228 * C2313 + C22513 * C2305 + C49215 * C2314 +
              C22514 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C118 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C48905) *
                C49237 +
            ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
            (C26518 * C118 + C26519 * C48905) * C49225 +
            ((C26535 + C26534) * C118 + (C26533 + C26532) * C48905) * C49210) *
               C721 -
           (((C23694 * C3656 + C48810 * C3659 + C23693 * C3655 +
              C23687 * C3658) *
                 C48905 +
             (C23694 * C3650 + C48810 * C3653 + C23693 * C3649 +
              C23687 * C3652) *
                 C118) *
                C49210 +
            ((C26532 + C26533) * C48905 + (C26534 + C26535) * C118) * C49225 +
            ((C25409 + C25408) * C48905 + (C25407 + C25406) * C118) * C49234 +
            ((C25405 + C25404) * C48905 + (C25403 + C25402) * C118) * C49237) *
               C49191) *
              C229 +
          (((C25964 * C118 + C25965 * C48905) * C49237 +
            (C25966 * C118 + C25967 * C48905) * C49234 +
            ((C25983 + C25982) * C118 + (C25981 + C25980) * C48905) * C49225 +
            ((C23693 * C11128 + C23687 * C11130 + C23694 * C17895 +
              C48810 * C17896) *
                 C118 +
             (C23693 * C11131 + C23687 * C11134 + C23694 * C17897 +
              C48810 * C17898) *
                 C48905) *
                C49210) *
               C49191 -
           (((C25980 + C25981) * C48905 + (C25982 + C25983) * C118) * C49210 +
            (C25976 * C48905 + C25977 * C118) * C49225 +
            (C25978 * C48905 + C25979 * C118) * C49234 +
            ((C23881 + C23880) * C48905 + (C23879 + C23878) * C118) * C49237) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C867 -
          (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
            C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
            (C25407 + C25406) * C1009) *
               C49004 +
           (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
            C25979 * C1010 + (C25405 + C25404) * C49229 +
            (C25403 + C25402) * C1009) *
               C31302) *
              C868 +
          ((C26518 * C1009 + C26519 * C49229 + C25966 * C1010 +
            C25967 * C49217 + (C25769 + C25768) * C1011 +
            (C25767 + C25766) * C49194) *
               C31302 +
           ((C26535 + C26534) * C1009 + (C26533 + C26532) * C49229 +
            (C25983 + C25982) * C1010 + (C25981 + C25980) * C49217 +
            (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
             C48810 * C10238) *
                C1011 +
            (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
             C48810 * C10241) *
                C49194) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C31597 + C31598 + C31599 + C31600) * C118 +
            (C31601 + C31602 + C31603 + C31604) * C48905) *
               C49004) *
              C867 -
          (((C32345 + C32346 + C32347 + C32348) * C48905 +
            (C32349 + C32350 + C32351 + C32352) * C118) *
               C49004 +
           ((C31604 + C31603 + C31602 + C31601) * C48905 +
            (C31600 + C31599 + C31598 + C31597) * C118) *
               C31302) *
              C868 +
          (((C32352 + C32351 + C32350 + C32349) * C118 +
            (C32348 + C32347 + C32346 + C32345) * C48905) *
               C31302 +
           ((C22511 * C2729 + C49235 * C2736 + C22512 * C2728 + C49228 * C2735 +
             C22513 * C2727 + C49215 * C2734 + C22514 * C2730 +
             C49198 * C2737) *
                C118 +
            (C22511 * C2733 + C49235 * C2741 + C22512 * C2732 + C49228 * C2740 +
             C22513 * C2731 + C49215 * C2739 + C22514 * C2738 +
             C49198 * C2742) *
                C48905) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C118 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C48905) *
               C49237 +
           ((C25402 + C25403) * C118 + (C25404 + C25405) * C48905) * C49234 +
           C35057 * C49225 + C35064 * C49210) *
              C867 -
          (((C35060 + C35061) * C48905 + (C35062 + C35063) * C118) * C49210 +
           ((C26532 + C26533) * C48905 + (C26534 + C26535) * C118) * C49225 +
           ((C25409 + C25408) * C48905 + (C25407 + C25406) * C118) * C49234 +
           ((C25405 + C25404) * C48905 + (C25403 + C25402) * C118) * C49237) *
              C868 +
          (C35057 * C49237 + C35064 * C49234 +
           ((C35063 + C35062) * C118 + (C35061 + C35060) * C48905) * C49225 +
           ((C23693 * C17981 + C23687 * C17984 + C23694 * C17982 +
             C48810 * C17985) *
                C118 +
            (C23693 * C17983 + C23687 * C17987 + C23694 * C17986 +
             C48810 * C17988) *
                C48905) *
               C49210) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C118 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C48905) *
                        C49000 +
                    ((C28463 + C28464 + C28465) * C118 +
                     (C28466 + C28467 + C28468) * C48905) *
                        C49007 +
                    ((C29586 + C29585 + C29584) * C118 +
                     (C29583 + C29582 + C29581) * C48905) *
                        C36778) *
                       C48888 * C48871 * C110 -
                   (((C47923 * C883 + C26650 * C888 + C47913 * C882 +
                      C48813 * C887 + C47917 * C881 + C48805 * C886) *
                         C48905 +
                     (C47923 * C873 + C26650 * C878 + C47913 * C872 +
                      C48813 * C877 + C47917 * C871 + C48805 * C876) *
                         C118) *
                        C36778 +
                    ((C28474 + C28473 + C28472) * C48905 +
                     (C28471 + C28470 + C28469) * C118) *
                        C49007 +
                    ((C47923 * C134 + C26650 * C143 + C47913 * C133 +
                      C48813 * C142 + C47917 * C132 + C48805 * C141) *
                         C48905 +
                     (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                      C48813 * C128 + C47917 * C120 + C48805 * C127) *
                         C118) *
                        C49000) *
                       C48888 * C48871 * C111 +
                   (((C47917 * C121 + C48805 * C128 + C47913 * C122 +
                      C48813 * C129 + C47923 * C123 + C26650 * C130) *
                         C118 +
                     (C47917 * C133 + C48805 * C142 + C47913 * C134 +
                      C48813 * C143 + C47923 * C135 + C26650 * C144) *
                         C48905) *
                        C49000 +
                    ((C47917 * C343 + C48805 * C354 + C47913 * C342 +
                      C48813 * C353 + C47923 * C341 + C26650 * C352) *
                         C118 +
                     (C47917 * C349 + C48805 * C361 + C47913 * C348 +
                      C48813 * C360 + C47923 * C347 + C26650 * C359) *
                         C48905) *
                        C49007 +
                    ((C47917 * C872 + C48805 * C877 + C47913 * C873 +
                      C48813 * C878 + C47923 * C874 + C26650 * C879) *
                         C118 +
                     (C47917 * C882 + C48805 * C887 + C47913 * C883 +
                      C48813 * C888 + C47923 * C884 + C26650 * C889) *
                         C48905) *
                        C36778) *
                       C48888 * C48871 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C48888 * C229 -
                    (((C29027 + C29028 + C29029) * C48905 +
                      (C29030 + C29031 + C29032) * C118) *
                         C36778 +
                     (C29033 * C48905 + C29034 * C118) * C49007 +
                     ((C26860 + C26859 + C26858) * C48905 +
                      (C26857 + C26856 + C26855) * C118) *
                         C49000) *
                        C48888 * C49189) *
                       C231 +
                   ((((C26867 + C26868 + C26869) * C118 +
                      (C26870 + C26871 + C26872) * C48905) *
                         C49000 +
                     ((C28239 + C28240 + C28241) * C118 +
                      (C28242 + C28243 + C28244) * C48905) *
                         C49007 +
                     ((C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                       C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                          C118 +
                      (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                       C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                          C48905) *
                         C36778) *
                        C48888 * C49189 -
                    (((C47923 * C883 + C26650 * C888 + C47913 * C882 +
                       C48813 * C887 + C47917 * C881 + C48805 * C886) *
                          C48905 +
                      (C47923 * C873 + C26650 * C878 + C47913 * C872 +
                       C48813 * C877 + C47917 * C871 + C48805 * C876) *
                          C118) *
                         C36778 +
                     ((C28474 + C28473 + C28472) * C48905 +
                      (C28471 + C28470 + C28469) * C118) *
                         C49007 +
                     ((C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C48905 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C118) *
                         C49000) *
                        C48888 * C229) *
                       C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C339 -
                    (((C47923 * C2731 + C26650 * C2739 + C47913 * C2732 +
                       C48813 * C2740 + C47917 * C2733 + C48805 * C2741) *
                          C48905 +
                      (C47923 * C2727 + C26650 * C2734 + C47913 * C2728 +
                       C48813 * C2735 + C47917 * C2729 + C48805 * C2736) *
                          C118) *
                         C36778 +
                     ((C29581 + C29582 + C29583) * C48905 +
                      (C29584 + C29585 + C29586) * C118) *
                         C49007 +
                     ((C28468 + C28467 + C28466) * C48905 +
                      (C28465 + C28464 + C28463) * C118) *
                         C49000) *
                        C49191) *
                       C48871 * C231 +
                   ((((C28469 + C28470 + C28471) * C118 +
                      (C28472 + C28473 + C28474) * C48905) *
                         C49000 +
                     ((C37084 + C37085 + C37086) * C118 +
                      (C37087 + C37088 + C37089) * C48905) *
                         C49007 +
                     ((C47917 * C2728 + C48805 * C2735 + C47913 * C2727 +
                       C48813 * C2734 + C47923 * C2730 + C26650 * C2737) *
                          C118 +
                      (C47917 * C2732 + C48805 * C2740 + C47913 * C2731 +
                       C48813 * C2739 + C47923 * C2738 + C26650 * C2742) *
                          C48905) *
                         C36778) *
                        C49191 -
                    (((C37089 + C37088 + C37087) * C48905 +
                      (C37086 + C37085 + C37084) * C118) *
                         C36778 +
                     ((C28474 + C28473 + C28472) * C48905 +
                      (C28471 + C28470 + C28469) * C118) *
                         C49007 +
                     ((C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C48905 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C118) *
                         C49000) *
                        C339) *
                       C48871 * C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C48888 * C447 -
                    (((C29027 + C29028 + C29029) * C48905 +
                      (C29030 + C29031 + C29032) * C118) *
                         C36778 +
                     (C29033 * C48905 + C29034 * C118) * C49007 +
                     ((C26860 + C26859 + C26858) * C48905 +
                      (C26857 + C26856 + C26855) * C118) *
                         C49000) *
                        C48888 * C49189) *
                       C449 +
                   ((((C26867 + C26868 + C26869) * C118 +
                      (C26870 + C26871 + C26872) * C48905) *
                         C49000 +
                     ((C28239 + C28240 + C28241) * C118 +
                      (C28242 + C28243 + C28244) * C48905) *
                         C49007 +
                     ((C47917 * C2295 + C48805 * C2301 + C47913 * C2296 +
                       C48813 * C2302 + C47923 * C2577 + C26650 * C2578) *
                          C118 +
                      (C47917 * C2304 + C48805 * C2313 + C47913 * C2305 +
                       C48813 * C2314 + C47923 * C2579 + C26650 * C2580) *
                          C48905) *
                         C36778) *
                        C48888 * C49189 -
                    (((C37089 + C37088 + C37087) * C48905 +
                      (C37086 + C37085 + C37084) * C118) *
                         C36778 +
                     ((C28474 + C28473 + C28472) * C48905 +
                      (C28471 + C28470 + C28469) * C118) *
                         C49007 +
                     ((C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C48905 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C118) *
                         C49000) *
                        C48888 * C447) *
                       C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C118 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C48905) *
                        C49000 +
                    ((C28463 + C28464 + C28465) * C118 +
                     (C28466 + C28467 + C28468) * C48905) *
                        C49007 +
                    ((C29586 + C29585 + C29584) * C118 +
                     (C29583 + C29582 + C29581) * C48905) *
                        C36778) *
                       C48888 * C513 -
                   (((C29027 + C29028 + C29029) * C48905 +
                     (C29030 + C29031 + C29032) * C118) *
                        C36778 +
                    (C29033 * C48905 + C29034 * C118) * C49007 +
                    ((C26860 + C26859 + C26858) * C48905 +
                     (C26857 + C26856 + C26855) * C118) *
                        C49000) *
                       C48888 * C514 +
                   ((C27295 * C118 + C27296 * C48905) * C49000 +
                    ((C27478 + C27477 + C27476) * C118 +
                     (C27475 + C27474 + C27473) * C48905) *
                        C49007 +
                    ((C47917 * C2297 + C48805 * C2306 + C47913 * C2298 +
                      C48813 * C2307 + C47923 * C2299 + C26650 * C2308) *
                         C118 +
                     (C47917 * C2309 + C48805 * C2315 + C47913 * C2310 +
                      C48813 * C2316 + C47923 * C2311 + C26650 * C2317) *
                         C48905) *
                        C36778) *
                       C48888 * C515) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C339 -
                    (((C47923 * C2731 + C26650 * C2739 + C47913 * C2732 +
                       C48813 * C2740 + C47917 * C2733 + C48805 * C2741) *
                          C48905 +
                      (C47923 * C2727 + C26650 * C2734 + C47913 * C2728 +
                       C48813 * C2735 + C47917 * C2729 + C48805 * C2736) *
                          C118) *
                         C36778 +
                     ((C29581 + C29582 + C29583) * C48905 +
                      (C29584 + C29585 + C29586) * C118) *
                         C49007 +
                     ((C28468 + C28467 + C28466) * C48905 +
                      (C28465 + C28464 + C28463) * C118) *
                         C49000) *
                        C49191) *
                       C447 +
                   (((C29025 * C118 + C29026 * C48905) * C49000 +
                     ((C29032 + C29031 + C29030) * C118 +
                      (C29029 + C29028 + C29027) * C48905) *
                         C49007 +
                     ((C47917 * C3217 + C48805 * C3220 + C47913 * C3218 +
                       C48813 * C3221 + C47923 * C3219 + C26650 * C3222) *
                          C118 +
                      (C47917 * C3223 + C48805 * C3226 + C47913 * C3224 +
                       C48813 * C3227 + C47923 * C3225 + C26650 * C3228) *
                          C48905) *
                         C36778) *
                        C49191 -
                    (((C29027 + C29028 + C29029) * C48905 +
                      (C29030 + C29031 + C29032) * C118) *
                         C36778 +
                     (C29033 * C48905 + C29034 * C118) * C49007 +
                     ((C26860 + C26859 + C26858) * C48905 +
                      (C26857 + C26856 + C26855) * C118) *
                         C49000) *
                        C339) *
                       C49189) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C721 -
                    (((C47923 * C2731 + C26650 * C2739 + C47913 * C2732 +
                       C48813 * C2740 + C47917 * C2733 + C48805 * C2741) *
                          C48905 +
                      (C47923 * C2727 + C26650 * C2734 + C47913 * C2728 +
                       C48813 * C2735 + C47917 * C2729 + C48805 * C2736) *
                          C118) *
                         C36778 +
                     ((C29581 + C29582 + C29583) * C48905 +
                      (C29584 + C29585 + C29586) * C118) *
                         C49007 +
                     ((C28468 + C28467 + C28466) * C48905 +
                      (C28465 + C28464 + C28463) * C118) *
                         C49000) *
                        C49191) *
                       C48871 * C449 +
                   ((((C28469 + C28470 + C28471) * C118 +
                      (C28472 + C28473 + C28474) * C48905) *
                         C49000 +
                     ((C37084 + C37085 + C37086) * C118 +
                      (C37087 + C37088 + C37089) * C48905) *
                         C49007 +
                     ((C47917 * C2728 + C48805 * C2735 + C47913 * C2727 +
                       C48813 * C2734 + C47923 * C2730 + C26650 * C2737) *
                          C118 +
                      (C47917 * C2732 + C48805 * C2740 + C47913 * C2731 +
                       C48813 * C2739 + C47923 * C2738 + C26650 * C2742) *
                          C48905) *
                         C36778) *
                        C49191 -
                    (((C37089 + C37088 + C37087) * C48905 +
                      (C37086 + C37085 + C37084) * C118) *
                         C36778 +
                     ((C28474 + C28473 + C28472) * C48905 +
                      (C28471 + C28470 + C28469) * C118) *
                         C49007 +
                     ((C47923 * C134 + C26650 * C143 + C47913 * C133 +
                       C48813 * C142 + C47917 * C132 + C48805 * C141) *
                          C48905 +
                      (C47923 * C122 + C26650 * C129 + C47913 * C121 +
                       C48813 * C128 + C47917 * C120 + C48805 * C127) *
                          C118) *
                         C49000) *
                        C721) *
                       C48871 * C49187)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                       C48813 * C127 + C47923 * C121 + C26650 * C128) *
                          C118 +
                      (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                       C48813 * C141 + C47923 * C133 + C26650 * C142) *
                          C48905) *
                         C49000 +
                     ((C28463 + C28464 + C28465) * C118 +
                      (C28466 + C28467 + C28468) * C48905) *
                         C49007 +
                     ((C29586 + C29585 + C29584) * C118 +
                      (C29583 + C29582 + C29581) * C48905) *
                         C36778) *
                        C721 -
                    (((C47923 * C2731 + C26650 * C2739 + C47913 * C2732 +
                       C48813 * C2740 + C47917 * C2733 + C48805 * C2741) *
                          C48905 +
                      (C47923 * C2727 + C26650 * C2734 + C47913 * C2728 +
                       C48813 * C2735 + C47917 * C2729 + C48805 * C2736) *
                          C118) *
                         C36778 +
                     ((C29581 + C29582 + C29583) * C48905 +
                      (C29584 + C29585 + C29586) * C118) *
                         C49007 +
                     ((C28468 + C28467 + C28466) * C48905 +
                      (C28465 + C28464 + C28463) * C118) *
                         C49000) *
                        C49191) *
                       C229 +
                   (((C29025 * C118 + C29026 * C48905) * C49000 +
                     ((C29032 + C29031 + C29030) * C118 +
                      (C29029 + C29028 + C29027) * C48905) *
                         C49007 +
                     ((C47917 * C3217 + C48805 * C3220 + C47913 * C3218 +
                       C48813 * C3221 + C47923 * C3219 + C26650 * C3222) *
                          C118 +
                      (C47917 * C3223 + C48805 * C3226 + C47913 * C3224 +
                       C48813 * C3227 + C47923 * C3225 + C26650 * C3228) *
                          C48905) *
                         C36778) *
                        C49191 -
                    (((C29027 + C29028 + C29029) * C48905 +
                      (C29030 + C29031 + C29032) * C118) *
                         C36778 +
                     (C29033 * C48905 + C29034 * C118) * C49007 +
                     ((C26860 + C26859 + C26858) * C48905 +
                      (C26857 + C26856 + C26855) * C118) *
                         C49000) *
                        C721) *
                       C49189) *
                  C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48805 * C126 + C47913 * C120 +
                      C48813 * C127 + C47923 * C121 + C26650 * C128) *
                         C118 +
                     (C47917 * C131 + C48805 * C140 + C47913 * C132 +
                      C48813 * C141 + C47923 * C133 + C26650 * C142) *
                         C48905) *
                        C49000 +
                    ((C28463 + C28464 + C28465) * C118 +
                     (C28466 + C28467 + C28468) * C48905) *
                        C49007 +
                    C37918 * C36778) *
                       C867 -
                   (((C37910 + C37911 + C37912) * C48905 +
                     (C37913 + C37914 + C37915) * C118) *
                        C36778 +
                    ((C29581 + C29582 + C29583) * C48905 +
                     (C29584 + C29585 + C29586) * C118) *
                        C49007 +
                    ((C28468 + C28467 + C28466) * C48905 +
                     (C28465 + C28464 + C28463) * C118) *
                        C49000) *
                       C868 +
                   (C37918 * C49000 +
                    ((C37915 + C37914 + C37913) * C118 +
                     (C37912 + C37911 + C37910) * C48905) *
                        C49007 +
                    ((C47917 * C3649 + C48805 * C3652 + C47913 * C3650 +
                      C48813 * C3653 + C47923 * C3651 + C26650 * C3654) *
                         C118 +
                     (C47917 * C3655 + C48805 * C3658 + C47913 * C3656 +
                      C48813 * C3659 + C47923 * C3657 + C26650 * C3660) *
                         C48905) *
                        C36778) *
                       C869) *
                  C48871 * C48837) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C22511 * C345 + C49235 * C356 + C22512 * C344 + C49228 * C355 +
             C22513 * C343 + C49215 * C354 + C22514 * C342 + C49198 * C353) *
                C118 +
            (C22511 * C351 + C49235 * C363 + C22512 * C350 + C49228 * C362 +
             C22513 * C349 + C49215 * C361 + C22514 * C348 + C49198 * C360) *
                C48905) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C22514 * C347 + C49198 * C359 + C22513 * C348 + C49215 * C360 +
             C22512 * C349 + C49228 * C361 + C22511 * C350 + C49235 * C362) *
                C48905 +
            (C22514 * C341 + C49198 * C352 + C22513 * C342 + C49215 * C353 +
             C22512 * C343 + C49228 * C354 + C22511 * C344 + C49235 * C355) *
                C118) *
               C49004 +
           ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
             C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                C48905 +
            (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
             C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                C118) *
               C31302) *
              C48888 * C48871 * C111 +
          (((C22511 * C121 + C49235 * C128 + C22512 * C122 + C49228 * C129 +
             C22513 * C123 + C49215 * C130 + C22514 * C124 + C49198 * C137) *
                C118 +
            (C22511 * C133 + C49235 * C142 + C22512 * C134 + C49228 * C143 +
             C22513 * C135 + C49215 * C144 + C22514 * C136 + C49198 * C145) *
                C48905) *
               C31302 +
           ((C22511 * C343 + C49235 * C354 + C22512 * C342 + C49228 * C353 +
             C22513 * C341 + C49215 * C352 + C22514 * C346 + C49198 * C357) *
                C118 +
            (C22511 * C349 + C49235 * C361 + C22512 * C348 + C49228 * C360 +
             C22513 * C347 + C49215 * C359 + C22514 * C358 + C49198 * C364) *
                C48905) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
            (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
            (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
               C49004 +
           ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
            (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
            (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                C49229 +
            (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                C1009) *
               C31302) *
              C48888 * C48871 * C111 +
          (((C23693 * C121 + C23687 * C128 + C23694 * C122 + C48810 * C129) *
                C1009 +
            (C23693 * C133 + C23687 * C142 + C23694 * C134 + C48810 * C143) *
                C49229 +
            (C23693 * C235 + C23687 * C246 + C23694 * C234 + C48810 * C245) *
                C1010 +
            (C23693 * C241 + C23687 * C253 + C23694 * C240 + C48810 * C252) *
                C49217 +
            (C23693 * C519 + C23687 * C524 + C23694 * C520 + C48810 * C525) *
                C1011 +
            (C23693 * C529 + C23687 * C534 + C23694 * C530 + C48810 * C535) *
                C49194) *
               C31302 +
           ((C23693 * C343 + C23687 * C354 + C23694 * C342 + C48810 * C353) *
                C1009 +
            (C23693 * C349 + C23687 * C361 + C23694 * C348 + C48810 * C360) *
                C49229 +
            (C23693 * C621 + C23687 * C626 + C23694 * C622 + C48810 * C627) *
                C1010 +
            (C23693 * C631 + C23687 * C636 + C23694 * C632 + C48810 * C637) *
                C49217 +
            (C23693 * C1392 + C23687 * C1399 + C23694 * C1395 +
             C48810 * C1402) *
                C1011 +
            (C23693 * C1396 + C23687 * C1404 + C23694 * C1403 +
             C48810 * C1407) *
                C49194) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C22511 * C345 + C49235 * C356 + C22512 * C344 + C49228 * C355 +
              C22513 * C343 + C49215 * C354 + C22514 * C342 + C49198 * C353) *
                 C118 +
             (C22511 * C351 + C49235 * C363 + C22512 * C350 + C49228 * C362 +
              C22513 * C349 + C49215 * C361 + C22514 * C348 + C49198 * C360) *
                 C48905) *
                C49004) *
               C48888 * C229 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C48888 * C49189) *
              C231 +
          ((((C22688 + C22689 + C22690 + C22691) * C118 +
             (C22692 + C22693 + C22694 + C22695) * C48905) *
                C31302 +
            ((C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
              C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                 C118 +
             (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
              C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C22514 * C347 + C49198 * C359 + C22513 * C348 + C49215 * C360 +
              C22512 * C349 + C49228 * C361 + C22511 * C350 + C49235 * C362) *
                 C48905 +
             (C22514 * C341 + C49198 * C352 + C22513 * C342 + C49215 * C353 +
              C22512 * C343 + C49228 * C354 + C22511 * C344 + C49235 * C355) *
                 C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C48888 * C229 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C48888 * C49189) *
              C231 +
          ((((C23890 + C23891) * C1009 + (C23892 + C23893) * C49229 +
             (C23894 + C23895) * C1010 + (C23896 + C23897) * C49217 +
             (C23898 + C23899) * C1011 + (C23900 + C23901) * C49194) *
                C31302 +
            ((C25168 + C25169) * C1009 + (C25170 + C25171) * C49229 +
             (C29935 + C29936) * C1010 + (C29937 + C29938) * C49217 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C1011 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C339 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C48871 * C231 +
          ((((C31605 + C31606 + C31607 + C31608) * C118 +
             (C31609 + C31610 + C31611 + C31612) * C48905) *
                C31302 +
            ((C22511 * C871 + C49235 * C876 + C22512 * C872 + C49228 * C877 +
              C22513 * C873 + C49215 * C878 + C22514 * C874 + C49198 * C879) *
                 C118 +
             (C22511 * C881 + C49235 * C886 + C22512 * C882 + C49228 * C887 +
              C22513 * C883 + C49215 * C888 + C22514 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C48871 * C231 +
          ((((C25410 + C25411) * C1009 + (C25412 + C25413) * C49229 +
             (C25168 + C25169) * C1010 + (C25170 + C25171) * C49217 +
             (C29935 + C29936) * C1011 + (C29937 + C29938) * C49194) *
                C31302 +
            ((C25414 + C25415) * C1009 + (C25416 + C25417) * C49229 +
             (C25172 + C25173) * C1010 + (C25174 + C25175) * C49217 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C1011 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C48888 * C447 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C48888 * C49189) *
              C449 +
          ((((C22688 + C22689 + C22690 + C22691) * C118 +
             (C22692 + C22693 + C22694 + C22695) * C48905) *
                C31302 +
            ((C22511 * C620 + C49235 * C625 + C22512 * C621 + C49228 * C626 +
              C22513 * C622 + C49215 * C627 + C22514 * C623 + C49198 * C628) *
                 C118 +
             (C22511 * C630 + C49235 * C635 + C22512 * C631 + C49228 * C636 +
              C22513 * C632 + C49215 * C637 + C22514 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C48888 * C447 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C48888 * C49189) *
              C449 +
          ((((C23890 + C23891) * C1009 + (C23892 + C23893) * C49229 +
             (C23894 + C23895) * C1010 + (C23896 + C23897) * C49217 +
             (C23898 + C23899) * C1011 + (C23900 + C23901) * C49194) *
                C31302 +
            ((C25168 + C25169) * C1009 + (C25170 + C25171) * C49229 +
             (C29935 + C29936) * C1010 + (C29937 + C29938) * C49217 +
             (C23693 * C1845 + C23687 * C1848 + C23694 * C1846 +
              C48810 * C1849) *
                 C1011 +
             (C23693 * C1851 + C23687 * C1854 + C23694 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C31597 + C31598 + C31599 + C31600) * C118 +
            (C31601 + C31602 + C31603 + C31604) * C48905) *
               C49004) *
              C48888 * C513 -
          (((C23224 + C23225 + C23226 + C23227) * C48905 +
            (C23228 + C23229 + C23230 + C23231) * C118) *
               C49004 +
           ((C22687 + C22686 + C22685 + C22684) * C48905 +
            (C22683 + C22682 + C22681 + C22680) * C118) *
               C31302) *
              C48888 * C514 +
          (((C23077 + C23076 + C23075 + C23074) * C118 +
            (C23073 + C23072 + C23071 + C23070) * C48905) *
               C31302 +
           ((C22511 * C1394 + C49235 * C1401 + C22512 * C1393 + C49228 * C1400 +
             C22513 * C1392 + C49215 * C1399 + C22514 * C1395 +
             C49198 * C1402) *
                C118 +
            (C22511 * C1398 + C49235 * C1406 + C22512 * C1397 + C49228 * C1405 +
             C22513 * C1396 + C49215 * C1404 + C22514 * C1403 +
             C49198 * C1407) *
                C48905) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C48888 * C513 -
          (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
            C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
            C25979 * C1009) *
               C49004 +
           ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
            (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
            (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
               C31302) *
              C48888 * C514 +
          ((C24260 * C1009 + C24261 * C49229 + C24262 * C1010 +
            C24263 * C49217 + (C24275 + C24274) * C1011 +
            (C24273 + C24272) * C49194) *
               C31302 +
           (C30473 * C1009 + C30474 * C49229 + (C24433 + C24432) * C1010 +
            (C24431 + C24430) * C49217 +
            (C23693 * C9286 + C23687 * C9289 + C23694 * C9287 +
             C48810 * C9290) *
                C1011 +
            (C23693 * C9288 + C23687 * C9292 + C23694 * C9291 +
             C48810 * C9293) *
                C49194) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C339 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C447 +
          ((((C23231 + C23230 + C23229 + C23228) * C118 +
             (C23227 + C23226 + C23225 + C23224) * C48905) *
                C31302 +
            ((C22511 * C2294 + C49235 * C2300 + C22512 * C2295 +
              C49228 * C2301 + C22513 * C2296 + C49215 * C2302 +
              C22514 * C2577 + C49198 * C2578) *
                 C118 +
             (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 +
              C49228 * C2313 + C22513 * C2305 + C49215 * C2314 +
              C22514 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C339 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C447 +
          (((C25964 * C1009 + C25965 * C49229 + C30473 * C1010 +
             C30474 * C49217 + (C24433 + C24432) * C1011 +
             (C24431 + C24430) * C49194) *
                C31302 +
            (C25966 * C1009 + C25967 * C49229 + (C25769 + C25768) * C1010 +
             (C25767 + C25766) * C49217 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C1011 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C721 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C48871 * C449 +
          ((((C31605 + C31606 + C31607 + C31608) * C118 +
             (C31609 + C31610 + C31611 + C31612) * C48905) *
                C31302 +
            ((C22511 * C871 + C49235 * C876 + C22512 * C872 + C49228 * C877 +
              C22513 * C873 + C49215 * C878 + C22514 * C874 + C49198 * C879) *
                 C118 +
             (C22511 * C881 + C49235 * C886 + C22512 * C882 + C49228 * C887 +
              C22513 * C883 + C49215 * C888 + C22514 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C31612 + C31611 + C31610 + C31609) * C48905 +
             (C31608 + C31607 + C31606 + C31605) * C118) *
                C49004 +
            ((C22514 * C135 + C49198 * C144 + C22513 * C134 + C49215 * C143 +
              C22512 * C133 + C49228 * C142 + C22511 * C132 + C49235 * C141) *
                 C48905 +
             (C22514 * C123 + C49198 * C130 + C22513 * C122 + C49215 * C129 +
              C22512 * C121 + C49228 * C128 + C22511 * C120 + C49235 * C127) *
                 C118) *
                C31302) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C48871 * C449 +
          ((((C25410 + C25411) * C1009 + (C25412 + C25413) * C49229 +
             (C25168 + C25169) * C1010 + (C25170 + C25171) * C49217 +
             (C29935 + C29936) * C1011 + (C29937 + C29938) * C49194) *
                C31302 +
            ((C25414 + C25415) * C1009 + (C25416 + C25417) * C49229 +
             (C25172 + C25173) * C1010 + (C25174 + C25175) * C49217 +
             (C23693 * C2298 + C23687 * C2307 + C23694 * C2299 +
              C48810 * C2308) *
                 C1011 +
             (C23693 * C2310 + C23687 * C2316 + C23694 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C29938 + C29937) * C49194 + (C29936 + C29935) * C1011 +
             (C25171 + C25170) * C49217 + (C25169 + C25168) * C1010 +
             (C25413 + C25412) * C49229 + (C25411 + C25410) * C1009) *
                C49004 +
            ((C23897 + C23896) * C49194 + (C23895 + C23894) * C1011 +
             (C23893 + C23892) * C49217 + (C23891 + C23890) * C1010 +
             (C23694 * C133 + C48810 * C142 + C23693 * C132 + C23687 * C141) *
                 C49229 +
             (C23694 * C121 + C48810 * C128 + C23693 * C120 + C23687 * C127) *
                 C1009) *
                C31302) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
              C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                 C118 +
             (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
              C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                 C48905) *
                C31302 +
            ((C31597 + C31598 + C31599 + C31600) * C118 +
             (C31601 + C31602 + C31603 + C31604) * C48905) *
                C49004) *
               C721 -
           (((C22514 * C883 + C49198 * C888 + C22513 * C882 + C49215 * C887 +
              C22512 * C881 + C49228 * C886 + C22511 * C880 + C49235 * C885) *
                 C48905 +
             (C22514 * C873 + C49198 * C878 + C22513 * C872 + C49215 * C877 +
              C22512 * C871 + C49228 * C876 + C22511 * C870 + C49235 * C875) *
                 C118) *
                C49004 +
            ((C31604 + C31603 + C31602 + C31601) * C48905 +
             (C31600 + C31599 + C31598 + C31597) * C118) *
                C31302) *
               C49191) *
              C229 +
          ((((C23231 + C23230 + C23229 + C23228) * C118 +
             (C23227 + C23226 + C23225 + C23224) * C48905) *
                C31302 +
            ((C22511 * C2294 + C49235 * C2300 + C22512 * C2295 +
              C49228 * C2301 + C22513 * C2296 + C49215 * C2302 +
              C22514 * C2577 + C49198 * C2578) *
                 C118 +
             (C22511 * C2303 + C49235 * C2312 + C22512 * C2304 +
              C49228 * C2313 + C22513 * C2305 + C49215 * C2314 +
              C22514 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C23224 + C23225 + C23226 + C23227) * C48905 +
             (C23228 + C23229 + C23230 + C23231) * C118) *
                C49004 +
            ((C22687 + C22686 + C22685 + C22684) * C48905 +
             (C22683 + C22682 + C22681 + C22680) * C118) *
                C31302) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                 C1009 +
             (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                 C49229 +
             (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
             C24260 * C1011 + C24261 * C49194) *
                C31302 +
            ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
             C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
             C30474 * C49194) *
                C49004) *
               C721 -
           (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
             C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
             (C25407 + C25406) * C1009) *
                C49004 +
            (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
             C25979 * C1010 + (C25405 + C25404) * C49229 +
             (C25403 + C25402) * C1009) *
                C31302) *
               C49191) *
              C229 +
          (((C25964 * C1009 + C25965 * C49229 + C30473 * C1010 +
             C30474 * C49217 + (C24433 + C24432) * C1011 +
             (C24431 + C24430) * C49194) *
                C31302 +
            (C25966 * C1009 + C25967 * C49229 + (C25769 + C25768) * C1010 +
             (C25767 + C25766) * C49217 +
             (C23693 * C9784 + C23687 * C9786 + C23694 * C10048 +
              C48810 * C10049) *
                 C1011 +
             (C23693 * C9787 + C23687 * C9790 + C23694 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C24430 + C24431) * C49194 + (C24432 + C24433) * C1011 +
             C30669 * C49217 + C30670 * C1010 + C25978 * C49229 +
             C25979 * C1009) *
                C49004 +
            ((C23889 + C23888) * C49194 + (C23887 + C23886) * C1011 +
             (C23885 + C23884) * C49217 + (C23883 + C23882) * C1010 +
             (C23881 + C23880) * C49229 + (C23879 + C23878) * C1009) *
                C31302) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49235 * C126 + C22512 * C120 + C49228 * C127 +
             C22513 * C121 + C49215 * C128 + C22514 * C122 + C49198 * C129) *
                C118 +
            (C22511 * C131 + C49235 * C140 + C22512 * C132 + C49228 * C141 +
             C22513 * C133 + C49215 * C142 + C22514 * C134 + C49198 * C143) *
                C48905) *
               C31302 +
           ((C31597 + C31598 + C31599 + C31600) * C118 +
            (C31601 + C31602 + C31603 + C31604) * C48905) *
               C49004) *
              C867 -
          (((C32345 + C32346 + C32347 + C32348) * C48905 +
            (C32349 + C32350 + C32351 + C32352) * C118) *
               C49004 +
           ((C31604 + C31603 + C31602 + C31601) * C48905 +
            (C31600 + C31599 + C31598 + C31597) * C118) *
               C31302) *
              C868 +
          (((C32352 + C32351 + C32350 + C32349) * C118 +
            (C32348 + C32347 + C32346 + C32345) * C48905) *
               C31302 +
           ((C22511 * C2729 + C49235 * C2736 + C22512 * C2728 + C49228 * C2735 +
             C22513 * C2727 + C49215 * C2734 + C22514 * C2730 +
             C49198 * C2737) *
                C118 +
            (C22511 * C2733 + C49235 * C2741 + C22512 * C2732 + C49228 * C2740 +
             C22513 * C2731 + C49215 * C2739 + C22514 * C2738 +
             C49198 * C2742) *
                C48905) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23693 * C119 + C23687 * C126 + C23694 * C120 + C48810 * C127) *
                C1009 +
            (C23693 * C131 + C23687 * C140 + C23694 * C132 + C48810 * C141) *
                C49229 +
            (C23878 + C23879) * C1010 + (C23880 + C23881) * C49217 +
            C24260 * C1011 + C24261 * C49194) *
               C31302 +
           ((C25402 + C25403) * C1009 + (C25404 + C25405) * C49229 +
            C25964 * C1010 + C25965 * C49217 + C30473 * C1011 +
            C30474 * C49194) *
               C49004) *
              C867 -
          (((C25766 + C25767) * C49194 + (C25768 + C25769) * C1011 +
            C25976 * C49217 + C25977 * C1010 + (C25409 + C25408) * C49229 +
            (C25407 + C25406) * C1009) *
               C49004 +
           (C30669 * C49194 + C30670 * C1011 + C25978 * C49217 +
            C25979 * C1010 + (C25405 + C25404) * C49229 +
            (C25403 + C25402) * C1009) *
               C31302) *
              C868 +
          ((C26518 * C1009 + C26519 * C49229 + C25966 * C1010 +
            C25967 * C49217 + (C25769 + C25768) * C1011 +
            (C25767 + C25766) * C49194) *
               C31302 +
           ((C26535 + C26534) * C1009 + (C26533 + C26532) * C49229 +
            (C25983 + C25982) * C1010 + (C25981 + C25980) * C49217 +
            (C23693 * C10234 + C23687 * C10237 + C23694 * C10235 +
             C48810 * C10238) *
                C1011 +
            (C23693 * C10236 + C23687 * C10240 + C23694 * C10239 +
             C48810 * C10241) *
                C49194) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3790 * C237 + C3784 * C248 + C3791 * C236 + C3785 * C247 +
            C3792 * C235 + C3786 * C246 + C3793 * C234 + C49198 * C245) *
               C3795 +
           (C3790 * C243 + C3784 * C255 + C3791 * C242 + C3785 * C254 +
            C3792 * C241 + C3786 * C253 + C3793 * C240 + C49198 * C252) *
               C48964) *
              C48917 * C48888 * C48871 * C110 -
          ((C3793 * C239 + C49198 * C251 + C3792 * C240 + C3786 * C252 +
            C3791 * C241 + C3785 * C253 + C3790 * C242 + C3784 * C254) *
               C48964 +
           (C3793 * C233 + C49198 * C244 + C3792 * C234 + C3786 * C245 +
            C3791 * C235 + C3785 * C246 + C3790 * C236 + C3784 * C247) *
               C3795 +
           (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
            C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
               C49161 +
           (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
            C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
               C3794) *
              C48917 * C48888 * C48871 * C111 +
          ((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
            C3792 * C123 + C3786 * C130 + C3793 * C124 + C49198 * C137) *
               C3794 +
           (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
            C3792 * C135 + C3786 * C144 + C3793 * C136 + C49198 * C145) *
               C49161 +
           (C3790 * C235 + C3784 * C246 + C3791 * C234 + C3785 * C245 +
            C3792 * C233 + C3786 * C244 + C3793 * C238 + C49198 * C249) *
               C3795 +
           (C3790 * C241 + C3784 * C253 + C3791 * C240 + C3785 * C252 +
            C3792 * C239 + C3786 * C251 + C3793 * C250 + C49198 * C256) *
               C48964) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C47907 * C237 + C49139 * C248 + C47888 * C236 + C48810 * C247) *
               C11260 +
           (C47907 * C243 + C49139 * C255 + C47888 * C242 + C48810 * C254) *
               C11254 +
           (C47907 * C517 + C49139 * C522 + C47888 * C518 + C48810 * C523) *
               C11261 +
           (C47907 * C527 + C49139 * C532 + C47888 * C528 + C48810 * C533) *
               C11255 +
           (C47907 * C1160 + C49139 * C1167 + C47888 * C1159 + C48810 * C1166) *
               C11262 +
           (C47907 * C1164 + C49139 * C1172 + C47888 * C1163 + C48810 * C1171) *
               C49204) *
              C48917 * C48888 * C48871 * C110 -
          ((C47888 * C1162 + C48810 * C1170 + C47907 * C1163 + C49139 * C1171) *
               C49204 +
           (C47888 * C1158 + C48810 * C1165 + C47907 * C1159 + C49139 * C1166) *
               C11262 +
           (C47888 * C529 + C48810 * C534 + C47907 * C528 + C49139 * C533) *
               C11255 +
           (C47888 * C519 + C48810 * C524 + C47907 * C518 + C49139 * C523) *
               C11261 +
           (C47888 * C241 + C48810 * C253 + C47907 * C242 + C49139 * C254) *
               C11254 +
           (C47888 * C235 + C48810 * C246 + C47907 * C236 + C49139 * C247) *
               C11260 +
           (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
               C11253 +
           (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
               C11259) *
              C48917 * C48888 * C48871 * C111 +
          ((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
               C11259 +
           (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
               C11253 +
           (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
               C11260 +
           (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
               C11254 +
           (C47907 * C519 + C49139 * C524 + C47888 * C520 + C48810 * C525) *
               C11261 +
           (C47907 * C529 + C49139 * C534 + C47888 * C530 + C48810 * C535) *
               C11255 +
           (C47907 * C1158 + C49139 * C1165 + C47888 * C1161 + C48810 * C1168) *
               C11262 +
           (C47907 * C1162 + C49139 * C1170 + C47888 * C1169 + C48810 * C1173) *
               C49204) *
              C48917 * C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C48888 * C229 -
           ((C3793 * C530 + C49198 * C535 + C3792 * C529 + C3786 * C534 +
             C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                C48964 +
            (C3793 * C520 + C49198 * C525 + C3792 * C519 + C3786 * C524 +
             C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C3967 + C3968 + C3969 + C3970) * C3794 +
            (C3971 + C3972 + C3973 + C3974) * C49161 +
            (C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
             C3792 * C520 + C3786 * C525 + C3793 * C521 + C49198 * C526) *
                C3795 +
            (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
             C3792 * C530 + C3786 * C535 + C3793 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C48888 * C229 -
           ((C47888 * C1671 + C48810 * C1674 + C47907 * C1670 +
             C49139 * C1673) *
                C49204 +
            (C47888 * C1665 + C48810 * C1668 + C47907 * C1664 +
             C49139 * C1667) *
                C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C11454 + C11455) * C11259 + (C11456 + C11457) * C11253 +
            (C11458 + C11459) * C11260 + (C11460 + C11461) * C11254 +
            (C11462 + C11463) * C11261 + (C11464 + C11465) * C11255 +
            (C47907 * C1665 + C49139 * C1668 + C47888 * C1666 +
             C48810 * C1669) *
                C11262 +
            (C47907 * C1671 + C49139 * C1674 + C47888 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C339 -
           ((C3793 * C632 + C49198 * C637 + C3792 * C631 + C3786 * C636 +
             C3791 * C630 + C3785 * C635 + C3790 * C629 + C3784 * C634) *
                C48964 +
            (C3793 * C622 + C49198 * C627 + C3792 * C621 + C3786 * C626 +
             C3791 * C620 + C3785 * C625 + C3790 * C619 + C3784 * C624) *
                C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
             C3792 * C342 + C3786 * C353 + C3793 * C341 + C49198 * C352) *
                C3794 +
            (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
             C3792 * C348 + C3786 * C360 + C3793 * C347 + C49198 * C359) *
                C49161 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                C3795 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C339 -
           ((C47888 * C1851 + C48810 * C1854 + C47907 * C1850 +
             C49139 * C1853) *
                C49204 +
            (C47888 * C1845 + C48810 * C1848 + C47907 * C1844 +
             C49139 * C1847) *
                C11262 +
            (C47888 * C1397 + C48810 * C1405 + C47907 * C1398 +
             C49139 * C1406) *
                C11255 +
            (C47888 * C1393 + C48810 * C1400 + C47907 * C1394 +
             C49139 * C1401) *
                C11261 +
            (C47888 * C630 + C48810 * C635 + C47907 * C629 + C49139 * C634) *
                C11254 +
            (C47888 * C620 + C48810 * C625 + C47907 * C619 + C49139 * C624) *
                C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C47907 * C344 + C49139 * C355 + C47888 * C343 + C48810 * C354) *
                C11259 +
            (C47907 * C350 + C49139 * C362 + C47888 * C349 + C48810 * C361) *
                C11253 +
            (C47907 * C620 + C49139 * C625 + C47888 * C621 + C48810 * C626) *
                C11260 +
            (C47907 * C630 + C49139 * C635 + C47888 * C631 + C48810 * C636) *
                C11254 +
            (C47907 * C1393 + C49139 * C1400 + C47888 * C1392 +
             C48810 * C1399) *
                C11261 +
            (C47907 * C1397 + C49139 * C1405 + C47888 * C1396 +
             C48810 * C1404) *
                C11255 +
            (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
             C48810 * C1849) *
                C11262 +
            (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C48888 * C447 -
           ((C3793 * C530 + C49198 * C535 + C3792 * C529 + C3786 * C534 +
             C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                C48964 +
            (C3793 * C520 + C49198 * C525 + C3792 * C519 + C3786 * C524 +
             C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C3967 + C3968 + C3969 + C3970) * C3794 +
            (C3971 + C3972 + C3973 + C3974) * C49161 +
            (C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
             C3792 * C520 + C3786 * C525 + C3793 * C521 + C49198 * C526) *
                C3795 +
            (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
             C3792 * C530 + C3786 * C535 + C3793 * C531 + C49198 * C536) *
                C48964) *
               C48917 * C48888 * C49189 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            (C11446 + C11447) * C11261 + (C11448 + C11449) * C11255 +
            (C11450 + C11451) * C11262 + (C11452 + C11453) * C49204) *
               C48917 * C48888 * C447 -
           ((C47888 * C1671 + C48810 * C1674 + C47907 * C1670 +
             C49139 * C1673) *
                C49204 +
            (C47888 * C1665 + C48810 * C1668 + C47907 * C1664 +
             C49139 * C1667) *
                C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C11454 + C11455) * C11259 + (C11456 + C11457) * C11253 +
            (C11458 + C11459) * C11260 + (C11460 + C11461) * C11254 +
            (C11462 + C11463) * C11261 + (C11464 + C11465) * C11255 +
            (C47907 * C1665 + C49139 * C1668 + C47888 * C1666 +
             C48810 * C1669) *
                C11262 +
            (C47907 * C1671 + C49139 * C1674 + C47888 * C1672 +
             C48810 * C1675) *
                C49204) *
               C48917 * C48888 * C49189 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3959 + C3960 + C3961 + C3962) * C3795 +
           (C3963 + C3964 + C3965 + C3966) * C48964) *
              C48917 * C48888 * C513 -
          ((C4349 + C4350 + C4351 + C4352) * C48964 +
           (C4353 + C4354 + C4355 + C4356) * C3795 +
           (C3966 + C3965 + C3964 + C3963) * C49161 +
           (C3962 + C3961 + C3960 + C3959) * C3794) *
              C48917 * C48888 * C514 +
          ((C4356 + C4355 + C4354 + C4353) * C3794 +
           (C4352 + C4351 + C4350 + C4349) * C49161 +
           (C3790 * C1160 + C3784 * C1167 + C3791 * C1159 + C3785 * C1166 +
            C3792 * C1158 + C3786 * C1165 + C3793 * C1161 + C49198 * C1168) *
               C3795 +
           (C3790 * C1164 + C3784 * C1172 + C3791 * C1163 + C3785 * C1171 +
            C3792 * C1162 + C3786 * C1170 + C3793 * C1169 + C49198 * C1173) *
               C48964) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
           C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
           C11827 * C49204) *
              C48917 * C48888 * C513 -
          ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
           (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
           (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
           (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
              C48917 * C48888 * C514 +
          (C11824 * C11259 + C11825 * C11253 + C11826 * C11260 +
           C11827 * C11254 + (C11839 + C11838) * C11261 +
           (C11837 + C11836) * C11255 +
           (C47907 * C9148 + C49139 * C9151 + C47888 * C9149 + C48810 * C9152) *
               C11262 +
           (C47907 * C9150 + C49139 * C9154 + C47888 * C9153 + C48810 * C9155) *
               C49204) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C339 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C447 +
          (((C4510 + C4509 + C4508 + C4507) * C3794 +
            (C4506 + C4505 + C4504 + C4503) * C49161 +
            (C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C3795 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C4349 + C4350 + C4351 + C4352) * C48964 +
            (C4353 + C4354 + C4355 + C4356) * C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C339 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C447 +
          (((C12005 + C12004) * C11259 + (C12003 + C12002) * C11253 +
            (C12001 + C12000) * C11260 + (C11999 + C11998) * C11254 +
            (C11997 + C11996) * C11261 + (C11995 + C11994) * C11255 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C11262 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C721 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
             C3792 * C342 + C3786 * C353 + C3793 * C341 + C49198 * C352) *
                C3794 +
            (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
             C3792 * C348 + C3786 * C360 + C3793 * C347 + C49198 * C359) *
                C49161 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                C3795 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                C48964) *
               C48917 * C49191 -
           ((C3974 + C3973 + C3972 + C3971) * C48964 +
            (C3970 + C3969 + C3968 + C3967) * C3795 +
            (C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49161 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C3794) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C721 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C47907 * C344 + C49139 * C355 + C47888 * C343 + C48810 * C354) *
                C11259 +
            (C47907 * C350 + C49139 * C362 + C47888 * C349 + C48810 * C361) *
                C11253 +
            (C47907 * C620 + C49139 * C625 + C47888 * C621 + C48810 * C626) *
                C11260 +
            (C47907 * C630 + C49139 * C635 + C47888 * C631 + C48810 * C636) *
                C11254 +
            (C47907 * C1393 + C49139 * C1400 + C47888 * C1392 +
             C48810 * C1399) *
                C11261 +
            (C47907 * C1397 + C49139 * C1405 + C47888 * C1396 +
             C48810 * C1404) *
                C11255 +
            (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
             C48810 * C1849) *
                C11262 +
            (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
             C48810 * C1855) *
                C49204) *
               C48917 * C49191 -
           ((C11465 + C11464) * C49204 + (C11463 + C11462) * C11262 +
            (C11461 + C11460) * C11255 + (C11459 + C11458) * C11261 +
            (C11457 + C11456) * C11254 + (C11455 + C11454) * C11260 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C11253 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C11259) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C3794 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C49161 +
            (C3959 + C3960 + C3961 + C3962) * C3795 +
            (C3963 + C3964 + C3965 + C3966) * C48964) *
               C48917 * C721 -
           ((C4503 + C4504 + C4505 + C4506) * C48964 +
            (C4507 + C4508 + C4509 + C4510) * C3795 +
            (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49161 +
            (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C3794) *
               C48917 * C49191) *
              C229 +
          (((C4510 + C4509 + C4508 + C4507) * C3794 +
            (C4506 + C4505 + C4504 + C4503) * C49161 +
            (C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C3795 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48964) *
               C48917 * C49191 -
           ((C4349 + C4350 + C4351 + C4352) * C48964 +
            (C4353 + C4354 + C4355 + C4356) * C3795 +
            (C3966 + C3965 + C3964 + C3963) * C49161 +
            (C3962 + C3961 + C3960 + C3959) * C3794) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C11259 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C11253 +
            (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
            C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
            C11827 * C49204) *
               C48917 * C721 -
           ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
            (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
            (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
            (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
                C11253 +
            (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
                C11259) *
               C48917 * C49191) *
              C229 +
          (((C12005 + C12004) * C11259 + (C12003 + C12002) * C11253 +
            (C12001 + C12000) * C11260 + (C11999 + C11998) * C11254 +
            (C11997 + C11996) * C11261 + (C11995 + C11994) * C11255 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C11262 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49204) *
               C48917 * C49191 -
           ((C11836 + C11837) * C49204 + (C11838 + C11839) * C11262 +
            (C11453 + C11452) * C11255 + (C11451 + C11450) * C11261 +
            (C11449 + C11448) * C11254 + (C11447 + C11446) * C11260 +
            (C11445 + C11444) * C11253 + (C11443 + C11442) * C11259) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
               C3794 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
               C49161 +
           (C3959 + C3960 + C3961 + C3962) * C3795 +
           (C3963 + C3964 + C3965 + C3966) * C48964) *
              C48917 * C867 -
          ((C4503 + C4504 + C4505 + C4506) * C48964 +
           (C4507 + C4508 + C4509 + C4510) * C3795 +
           (C3793 * C348 + C49198 * C360 + C3792 * C349 + C3786 * C361 +
            C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
               C49161 +
           (C3793 * C342 + C49198 * C353 + C3792 * C343 + C3786 * C354 +
            C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
               C3794) *
              C48917 * C868 +
          ((C3790 * C870 + C3784 * C875 + C3791 * C871 + C3785 * C876 +
            C3792 * C872 + C3786 * C877 + C3793 * C873 + C49198 * C878) *
               C3794 +
           (C3790 * C880 + C3784 * C885 + C3791 * C881 + C3785 * C886 +
            C3792 * C882 + C3786 * C887 + C3793 * C883 + C49198 * C888) *
               C49161 +
           (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
            C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
               C3795 +
           (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
            C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
               C48964) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
               C11259 +
           (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
               C11253 +
           (C11442 + C11443) * C11260 + (C11444 + C11445) * C11254 +
           C11824 * C11261 + C11825 * C11255 + C11826 * C11262 +
           C11827 * C49204) *
              C48917 * C867 -
          ((C11994 + C11995) * C49204 + (C11996 + C11997) * C11262 +
           (C11998 + C11999) * C11255 + (C12000 + C12001) * C11261 +
           (C12002 + C12003) * C11254 + (C12004 + C12005) * C11260 +
           (C47888 * C350 + C48810 * C362 + C47907 * C351 + C49139 * C363) *
               C11253 +
           (C47888 * C344 + C48810 * C355 + C47907 * C345 + C49139 * C356) *
               C11259) *
              C48917 * C868 +
          ((C47907 * C870 + C49139 * C875 + C47888 * C871 + C48810 * C876) *
               C11259 +
           (C47907 * C880 + C49139 * C885 + C47888 * C881 + C48810 * C886) *
               C11253 +
           (C47907 * C2294 + C49139 * C2300 + C47888 * C2295 + C48810 * C2301) *
               C11260 +
           (C47907 * C2303 + C49139 * C2312 + C47888 * C2304 + C48810 * C2313) *
               C11254 +
           (C47907 * C2297 + C49139 * C2306 + C47888 * C2298 + C48810 * C2307) *
               C11261 +
           (C47907 * C2309 + C49139 * C2315 + C47888 * C2310 + C48810 * C2316) *
               C11255 +
           (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
            C48810 * C10049) *
               C11262 +
           (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
            C48810 * C10051) *
               C49204) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            (C1892 + C1891 + C1890) * C3795 +
            (C1889 + C1888 + C1887) * C48964) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C1008 * C632 + C49181 * C637 + C1007 * C631 + C1001 * C636 +
             C1006 * C630 + C1000 * C635) *
                C48964 +
            (C1008 * C622 + C49181 * C627 + C1007 * C621 + C1001 * C626 +
             C1006 * C620 + C1000 * C625) *
                C3795 +
            (C2809 + C2808 + C2807) * C49161 +
            (C2806 + C2805 + C2804) * C3794) *
               C49004 +
           ((C1240 + C1239 + C1238) * C48964 + (C1237 + C1236 + C1235) * C3795 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49161 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C3794) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
             C1008 * C123 + C49181 * C130) *
                C3794 +
            (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
             C1008 * C135 + C49181 * C144) *
                C49161 +
            (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
             C1008 * C233 + C49181 * C244) *
                C3795 +
            (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
             C1008 * C239 + C49181 * C251) *
                C48964) *
               C49162 +
           ((C1006 * C343 + C1000 * C354 + C1007 * C342 + C1001 * C353 +
             C1008 * C341 + C49181 * C352) *
                C3794 +
            (C1006 * C349 + C1000 * C361 + C1007 * C348 + C1001 * C360 +
             C1008 * C347 + C49181 * C359) *
                C49161 +
            (C1006 * C621 + C1000 * C626 + C1007 * C622 + C1001 * C627 +
             C1008 * C623 + C49181 * C628) *
                C3795 +
            (C1006 * C631 + C1000 * C636 + C1007 * C632 + C1001 * C637 +
             C1008 * C633 + C49181 * C638) *
                C48964) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C10275 * C11259 + C10276 * C11253 + C9558 * C11260 +
            C9557 * C11254 + C9556 * C11261 + C9555 * C11255 + C9554 * C11262 +
            C9553 * C49204) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C9060 * C1851 + C48800 * C1854) * C49204 +
            (C9060 * C1845 + C48800 * C1848) * C11262 + C10084 * C11255 +
            C10083 * C11261 + C10082 * C11254 + C10081 * C11260 +
            C10280 * C11253 + C10279 * C11259) *
               C49004 +
           (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
            C9198 * C11254 + C9197 * C11260 +
            (C9060 * C132 + C48800 * C141) * C11253 +
            (C9060 * C120 + C48800 * C127) * C11259) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C9060 * C121 + C48800 * C128) * C11259 +
            (C9060 * C133 + C48800 * C142) * C11253 +
            (C9060 * C235 + C48800 * C246) * C11260 +
            (C9060 * C241 + C48800 * C253) * C11254 +
            (C9060 * C519 + C48800 * C524) * C11261 +
            (C9060 * C529 + C48800 * C534) * C11255 +
            (C9060 * C1158 + C48800 * C1165) * C11262 +
            (C9060 * C1162 + C48800 * C1170) * C49204) *
               C49162 +
           ((C9060 * C343 + C48800 * C354) * C11259 +
            (C9060 * C349 + C48800 * C361) * C11253 +
            (C9060 * C621 + C48800 * C626) * C11260 +
            (C9060 * C631 + C48800 * C636) * C11254 +
            (C9060 * C1392 + C48800 * C1399) * C11261 +
            (C9060 * C1396 + C48800 * C1404) * C11255 +
            (C9060 * C1846 + C48800 * C1849) * C11262 +
            (C9060 * C1852 + C48800 * C1855) * C49204) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49181 * C128) *
                          C3794 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49181 * C142) *
                          C49161 +
                      (C1223 + C1224 + C1225) * C3795 +
                      (C1226 + C1227 + C1228) * C48964) *
                         C49162 +
                     ((C2792 + C2793 + C2794) * C3794 +
                      (C2795 + C2796 + C2797) * C49161 +
                      (C1892 + C1891 + C1890) * C3795 +
                      (C1889 + C1888 + C1887) * C48964) *
                         C49004) *
                        C48888 * C229 -
                    (((C1881 + C1882 + C1883) * C48964 +
                      (C1884 + C1885 + C1886) * C3795 +
                      (C1887 + C1888 + C1889) * C49161 +
                      (C1890 + C1891 + C1892) * C3794) *
                         C49004 +
                     ((C1234 + C1233 + C1232) * C48964 +
                      (C1231 + C1230 + C1229) * C3795 +
                      (C1228 + C1227 + C1226) * C49161 +
                      (C1225 + C1224 + C1223) * C3794) *
                         C49162) *
                        C48888 * C49189) *
                       C231 +
                   ((((C1235 + C1236 + C1237) * C3794 +
                      (C1238 + C1239 + C1240) * C49161 +
                      (C1241 + C1242 + C1243) * C3795 +
                      (C1244 + C1245 + C1246) * C48964) *
                         C49162 +
                     ((C6369 + C6370 + C6371) * C3794 +
                      (C6372 + C6373 + C6374) * C49161 +
                      (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 +
                       C1001 * C1399 + C1008 * C1395 + C49181 * C1402) *
                          C3795 +
                      (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 +
                       C1001 * C1404 + C1008 * C1403 + C49181 * C1407) *
                          C48964) *
                         C49004) *
                        C48888 * C49189 -
                    (((C6374 + C6373 + C6372) * C48964 +
                      (C6371 + C6370 + C6369) * C3795 +
                      (C2809 + C2808 + C2807) * C49161 +
                      (C2806 + C2805 + C2804) * C3794) *
                         C49004 +
                     ((C1240 + C1239 + C1238) * C48964 +
                      (C1237 + C1236 + C1235) * C3795 +
                      (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49161 +
                      (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C3794) *
                         C49162) *
                        C48888 * C229) *
                       C49187)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48800 * C126) * C11259 +
                      (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
                      C9190 * C11254 + C9191 * C11261 + C9192 * C11255 +
                      C9193 * C11262 + C9194 * C49204) *
                         C49162 +
                     (C10275 * C11259 + C10276 * C11253 + C9558 * C11260 +
                      C9557 * C11254 + C9556 * C11261 + C9555 * C11255 +
                      C9554 * C11262 + C9553 * C49204) *
                         C49004) *
                        C48888 * C229 -
                    ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 +
                      C9554 * C11261 + C9555 * C11254 + C9556 * C11260 +
                      C9557 * C11253 + C9558 * C11259) *
                         C49004 +
                     (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 +
                      C9193 * C11261 + C9192 * C11254 + C9191 * C11260 +
                      C9190 * C11253 + C9189 * C11259) *
                         C49162) *
                        C48888 * C49189) *
                       C231 +
                   (((C9197 * C11259 + C9198 * C11253 + C9199 * C11260 +
                      C9200 * C11254 + C9201 * C11261 + C9202 * C11255 +
                      C9203 * C11262 + C9204 * C49204) *
                         C49162 +
                     (C10081 * C11259 + C10082 * C11253 + C10083 * C11260 +
                      C10084 * C11254 + C14290 * C11261 + C14291 * C11255 +
                      (C9060 * C9287 + C48800 * C9290) * C11262 +
                      (C9060 * C9291 + C48800 * C9293) * C49204) *
                         C49004) *
                        C48888 * C49189 -
                    ((C14291 * C49204 + C14290 * C11262 + C10084 * C11255 +
                      C10083 * C11261 + C10082 * C11254 + C10081 * C11260 +
                      C10280 * C11253 + C10279 * C11259) *
                         C49004 +
                     (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 +
                      C9199 * C11261 + C9198 * C11254 + C9197 * C11260 +
                      (C9060 * C132 + C48800 * C141) * C11253 +
                      (C9060 * C120 + C48800 * C127) * C11259) *
                         C49162) *
                        C48888 * C229) *
                       C49187)) /
                     (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49181 * C128) *
                          C3794 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49181 * C142) *
                          C49161 +
                      (C1223 + C1224 + C1225) * C3795 +
                      (C1226 + C1227 + C1228) * C48964) *
                         C49162 +
                     ((C2792 + C2793 + C2794) * C3794 +
                      (C2795 + C2796 + C2797) * C49161 +
                      (C1892 + C1891 + C1890) * C3795 +
                      (C1889 + C1888 + C1887) * C48964) *
                         C49004) *
                        C339 -
                    (((C3247 + C3246 + C3245) * C48964 +
                      (C3244 + C3243 + C3242) * C3795 +
                      (C2803 + C2802 + C2801) * C49161 +
                      (C2800 + C2799 + C2798) * C3794) *
                         C49004 +
                     ((C1887 + C1888 + C1889) * C48964 +
                      (C1890 + C1891 + C1892) * C3795 +
                      (C2797 + C2796 + C2795) * C49161 +
                      (C2794 + C2793 + C2792) * C3794) *
                         C49162) *
                        C49191) *
                       C48871 * C231 +
                   ((((C2804 + C2805 + C2806) * C3794 +
                      (C2807 + C2808 + C2809) * C49161 +
                      (C6369 + C6370 + C6371) * C3795 +
                      (C6372 + C6373 + C6374) * C48964) *
                         C49162 +
                     ((C2810 + C2811 + C2812) * C3794 +
                      (C2813 + C2814 + C2815) * C49161 +
                      (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 +
                       C1001 * C2302 + C1008 * C2577 + C49181 * C2578) *
                          C3795 +
                      (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 +
                       C1001 * C2314 + C1008 * C2579 + C49181 * C2580) *
                          C48964) *
                         C49004) *
                        C49191 -
                    (((C6374 + C6373 + C6372) * C48964 +
                      (C6371 + C6370 + C6369) * C3795 +
                      (C2809 + C2808 + C2807) * C49161 +
                      (C2806 + C2805 + C2804) * C3794) *
                         C49004 +
                     ((C1240 + C1239 + C1238) * C48964 +
                      (C1237 + C1236 + C1235) * C3795 +
                      (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49161 +
                      (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C3794) *
                         C49162) *
                        C339) *
                       C48871 * C49187)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48800 * C126) * C11259 +
                      (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
                      C9190 * C11254 + C9191 * C11261 + C9192 * C11255 +
                      C9193 * C11262 + C9194 * C49204) *
                         C49162 +
                     (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 +
                      C14428 + C14429) *
                         C49004) *
                        C339 -
                    ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
                      C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
                      C10278 * C11253 + C10277 * C11259) *
                         C49004 +
                     (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 +
                      C14423 + C14422) *
                         C49162) *
                        C49191) *
                       C48871 * C231 +
                   (((C14430 + C14431 + C14432 + C14433 + C14434 + C14435 +
                      C14436 + C14437) *
                         C49162 +
                     (C10281 * C11259 + C10282 * C11253 + C10085 * C11260 +
                      C10086 * C11254 + C10087 * C11261 + C10088 * C11255 +
                      (C9060 * C10048 + C48800 * C10049) * C11262 +
                      (C9060 * C10050 + C48800 * C10051) * C49204) *
                         C49004) *
                        C49191 -
                    ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 +
                      C14431 + C14430) *
                         C49004 +
                     (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 +
                      C9199 * C11261 + C9198 * C11254 + C9197 * C11260 +
                      (C9060 * C132 + C48800 * C141) * C11253 +
                      (C9060 * C120 + C48800 * C127) * C11259) *
                         C49162) *
                        C339) *
                       C48871 * C49187)) /
                     (p * q * std::sqrt(p + q));
    d2ee[192] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49181 * C128) *
                          C3794 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49181 * C142) *
                          C49161 +
                      (C1223 + C1224 + C1225) * C3795 +
                      (C1226 + C1227 + C1228) * C48964) *
                         C49162 +
                     ((C2792 + C2793 + C2794) * C3794 +
                      (C2795 + C2796 + C2797) * C49161 +
                      (C1892 + C1891 + C1890) * C3795 +
                      (C1889 + C1888 + C1887) * C48964) *
                         C49004) *
                        C48888 * C447 -
                    (((C1881 + C1882 + C1883) * C48964 +
                      (C1884 + C1885 + C1886) * C3795 +
                      (C1887 + C1888 + C1889) * C49161 +
                      (C1890 + C1891 + C1892) * C3794) *
                         C49004 +
                     ((C1234 + C1233 + C1232) * C48964 +
                      (C1231 + C1230 + C1229) * C3795 +
                      (C1228 + C1227 + C1226) * C49161 +
                      (C1225 + C1224 + C1223) * C3794) *
                         C49162) *
                        C48888 * C49189) *
                       C449 +
                   ((((C1235 + C1236 + C1237) * C3794 +
                      (C1238 + C1239 + C1240) * C49161 +
                      (C1241 + C1242 + C1243) * C3795 +
                      (C1244 + C1245 + C1246) * C48964) *
                         C49162 +
                     ((C6369 + C6370 + C6371) * C3794 +
                      (C6372 + C6373 + C6374) * C49161 +
                      (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 +
                       C1001 * C1399 + C1008 * C1395 + C49181 * C1402) *
                          C3795 +
                      (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 +
                       C1001 * C1404 + C1008 * C1403 + C49181 * C1407) *
                          C48964) *
                         C49004) *
                        C48888 * C49189 -
                    (((C6374 + C6373 + C6372) * C48964 +
                      (C6371 + C6370 + C6369) * C3795 +
                      (C2809 + C2808 + C2807) * C49161 +
                      (C2806 + C2805 + C2804) * C3794) *
                         C49004 +
                     ((C1240 + C1239 + C1238) * C48964 +
                      (C1237 + C1236 + C1235) * C3795 +
                      (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49161 +
                      (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C3794) *
                         C49162) *
                        C48888 * C447) *
                       C49187)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48800 * C126) * C11259 +
                      (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
                      C9190 * C11254 + C9191 * C11261 + C9192 * C11255 +
                      C9193 * C11262 + C9194 * C49204) *
                         C49162 +
                     (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 +
                      C14428 + C14429) *
                         C49004) *
                        C48888 * C447 -
                    ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 +
                      C9554 * C11261 + C9555 * C11254 + C9556 * C11260 +
                      C9557 * C11253 + C9558 * C11259) *
                         C49004 +
                     (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 +
                      C9193 * C11261 + C9192 * C11254 + C9191 * C11260 +
                      C9190 * C11253 + C9189 * C11259) *
                         C49162) *
                        C48888 * C49189) *
                       C449 +
                   (((C9197 * C11259 + C9198 * C11253 + C9199 * C11260 +
                      C9200 * C11254 + C9201 * C11261 + C9202 * C11255 +
                      C9203 * C11262 + C9204 * C49204) *
                         C49162 +
                     (C10081 * C11259 + C10082 * C11253 + C10083 * C11260 +
                      C10084 * C11254 + C14290 * C11261 + C14291 * C11255 +
                      (C9060 * C9287 + C48800 * C9290) * C11262 +
                      (C9060 * C9291 + C48800 * C9293) * C49204) *
                         C49004) *
                        C48888 * C49189 -
                    ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 +
                      C14431 + C14430) *
                         C49004 +
                     (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 +
                      C9199 * C11261 + C9198 * C11254 + C9197 * C11260 +
                      (C9060 * C132 + C48800 * C141) * C11253 +
                      (C9060 * C120 + C48800 * C127) * C11259) *
                         C49162) *
                        C48888 * C447) *
                       C49187)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            (C1892 + C1891 + C1890) * C3795 +
            (C1889 + C1888 + C1887) * C48964) *
               C49004) *
              C48888 * C513 -
          (((C1881 + C1882 + C1883) * C48964 + (C1884 + C1885 + C1886) * C3795 +
            (C1887 + C1888 + C1889) * C49161 +
            (C1890 + C1891 + C1892) * C3794) *
               C49004 +
           ((C1234 + C1233 + C1232) * C48964 + (C1231 + C1230 + C1229) * C3795 +
            (C1228 + C1227 + C1226) * C49161 +
            (C1225 + C1224 + C1223) * C3794) *
               C49162) *
              C48888 * C514 +
          ((C1691 * C3794 + C1692 * C49161 + (C1698 + C1697 + C1696) * C3795 +
            (C1695 + C1694 + C1693) * C48964) *
               C49162 +
           ((C1886 + C1885 + C1884) * C3794 + (C1883 + C1882 + C1881) * C49161 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C3795 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C48964) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
            C14429) *
               C49004) *
              C48888 * C513 -
          ((C9551 * C49204 + C9552 * C11262 + C9553 * C11255 + C9554 * C11261 +
            C9555 * C11254 + C9556 * C11260 + C9557 * C11253 + C9558 * C11259) *
               C49004 +
           (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
            C9192 * C11254 + C9191 * C11260 + C9190 * C11253 + C9189 * C11259) *
               C49162) *
              C48888 * C514 +
          ((C9191 * C11259 + C9192 * C11253 + C9193 * C11260 + C9194 * C11254 +
            C9195 * C11261 + C9196 * C11255 + C9448 * C11262 + C9447 * C49204) *
               C49162 +
           (C9556 * C11259 + C9555 * C11253 + C9554 * C11260 + C9553 * C11254 +
            C9552 * C11261 + C9551 * C11255 +
            (C9060 * C9530 + C48800 * C9531) * C11262 +
            (C9060 * C9532 + C48800 * C9533) * C49204) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C339 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C447 +
          (((C7107 * C3794 + C7108 * C49161 + (C1886 + C1885 + C1884) * C3795 +
             (C1883 + C1882 + C1881) * C48964) *
                C49162 +
            ((C3242 + C3243 + C3244) * C3794 +
             (C3245 + C3246 + C3247) * C49161 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49181 * C2308) *
                 C3795 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49181 * C2317) *
                 C48964) *
                C49004) *
               C49191 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 + C7109 * C49161 + C7110 * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C339 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C447 +
          (((C14796 + C14797 + C14798 + C14799 + C14800 + C14801 + C14802 +
             C14803) *
                C49162 +
            (C10077 * C11259 + C10078 * C11253 + C10079 * C11260 +
             C10080 * C11254 + C10552 * C11261 + C10551 * C11255 +
             (C9060 * C9785 + C48800 * C9788) * C11262 +
             (C9060 * C9789 + C48800 * C9791) * C49204) *
                C49004) *
               C49191 -
           ((C14803 + C14802 + C14801 + C14800 + C14799 + C14798 + C14797 +
             C14796) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C721 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C2804 + C2805 + C2806) * C3794 +
             (C2807 + C2808 + C2809) * C49161 +
             (C6369 + C6370 + C6371) * C3795 +
             (C6372 + C6373 + C6374) * C48964) *
                C49162 +
            ((C2810 + C2811 + C2812) * C3794 +
             (C2813 + C2814 + C2815) * C49161 +
             (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C3795 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48964) *
                C49004) *
               C49191 -
           (((C6374 + C6373 + C6372) * C48964 +
             (C6371 + C6370 + C6369) * C3795 +
             (C2809 + C2808 + C2807) * C49161 +
             (C2806 + C2805 + C2804) * C3794) *
                C49004 +
            ((C1240 + C1239 + C1238) * C48964 +
             (C1237 + C1236 + C1235) * C3795 +
             (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49161 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C3794) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C721 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C48871 * C449 +
          (((C14430 + C14431 + C14432 + C14433 + C14434 + C14435 + C14436 +
             C14437) *
                C49162 +
            (C10281 * C11259 + C10282 * C11253 + C10085 * C11260 +
             C10086 * C11254 + C10087 * C11261 + C10088 * C11255 +
             (C9060 * C10048 + C48800 * C10049) * C11262 +
             (C9060 * C10050 + C48800 * C10051) * C49204) *
                C49004) *
               C49191 -
           ((C14437 + C14436 + C14435 + C14434 + C14433 + C14432 + C14431 +
             C14430) *
                C49004 +
            (C9202 * C49204 + C9201 * C11262 + C9200 * C11255 + C9199 * C11261 +
             C9198 * C11254 + C9197 * C11260 +
             (C9060 * C132 + C48800 * C141) * C11253 +
             (C9060 * C120 + C48800 * C127) * C11259) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C3794 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C49161 +
             (C1223 + C1224 + C1225) * C3795 +
             (C1226 + C1227 + C1228) * C48964) *
                C49162 +
            ((C2792 + C2793 + C2794) * C3794 +
             (C2795 + C2796 + C2797) * C49161 + C7107 * C3795 +
             C7108 * C48964) *
                C49004) *
               C721 -
           (((C3247 + C3246 + C3245) * C48964 +
             (C3244 + C3243 + C3242) * C3795 +
             (C2803 + C2802 + C2801) * C49161 +
             (C2800 + C2799 + C2798) * C3794) *
                C49004 +
            (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
             (C2794 + C2793 + C2792) * C3794) *
                C49162) *
               C49191) *
              C229 +
          (((C7107 * C3794 + C7108 * C49161 + (C1886 + C1885 + C1884) * C3795 +
             (C1883 + C1882 + C1881) * C48964) *
                C49162 +
            ((C3242 + C3243 + C3244) * C3794 +
             (C3245 + C3246 + C3247) * C49161 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49181 * C2308) *
                 C3795 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49181 * C2317) *
                 C48964) *
                C49004) *
               C49191 -
           (((C1881 + C1882 + C1883) * C48964 +
             (C1884 + C1885 + C1886) * C3795 + C7109 * C49161 + C7110 * C3794) *
                C49004 +
            ((C1234 + C1233 + C1232) * C48964 +
             (C1231 + C1230 + C1229) * C3795 +
             (C1228 + C1227 + C1226) * C49161 +
             (C1225 + C1224 + C1223) * C3794) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C11259 +
             (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
             C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
             C9194 * C49204) *
                C49162 +
            (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
             C14429) *
                C49004) *
               C721 -
           ((C10551 * C49204 + C10552 * C11262 + C10080 * C11255 +
             C10079 * C11261 + C10078 * C11254 + C10077 * C11260 +
             C10278 * C11253 + C10277 * C11259) *
                C49004 +
            (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
             C14422) *
                C49162) *
               C49191) *
              C229 +
          (((C14796 + C14797 + C14798 + C14799 + C14800 + C14801 + C14802 +
             C14803) *
                C49162 +
            (C10077 * C11259 + C10078 * C11253 + C10079 * C11260 +
             C10080 * C11254 + C10552 * C11261 + C10551 * C11255 +
             (C9060 * C9785 + C48800 * C9788) * C11262 +
             (C9060 * C9789 + C48800 * C9791) * C49204) *
                C49004) *
               C49191 -
           ((C14803 + C14802 + C14801 + C14800 + C14799 + C14798 + C14797 +
             C14796) *
                C49004 +
            (C9196 * C49204 + C9195 * C11262 + C9194 * C11255 + C9193 * C11261 +
             C9192 * C11254 + C9191 * C11260 + C9190 * C11253 +
             C9189 * C11259) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C3794 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49161 +
            (C1223 + C1224 + C1225) * C3795 +
            (C1226 + C1227 + C1228) * C48964) *
               C49162 +
           ((C2792 + C2793 + C2794) * C3794 + (C2795 + C2796 + C2797) * C49161 +
            C7107 * C3795 + C7108 * C48964) *
               C49004) *
              C867 -
          (((C3247 + C3246 + C3245) * C48964 + (C3244 + C3243 + C3242) * C3795 +
            (C2803 + C2802 + C2801) * C49161 +
            (C2800 + C2799 + C2798) * C3794) *
               C49004 +
           (C7109 * C48964 + C7110 * C3795 + (C2797 + C2796 + C2795) * C49161 +
            (C2794 + C2793 + C2792) * C3794) *
               C49162) *
              C868 +
          ((C3676 * C3794 + C3677 * C49161 + (C3242 + C3243 + C3244) * C3795 +
            (C3245 + C3246 + C3247) * C48964) *
               C49162 +
           ((C3683 + C3682 + C3681) * C3794 + (C3680 + C3679 + C3678) * C49161 +
            (C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
             C1008 * C3219 + C49181 * C3222) *
                C3795 +
            (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
             C1008 * C3225 + C49181 * C3228) *
                C48964) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C11259 +
            (C9060 * C131 + C48800 * C140) * C11253 + C9189 * C11260 +
            C9190 * C11254 + C9191 * C11261 + C9192 * C11255 + C9193 * C11262 +
            C9194 * C49204) *
               C49162 +
           (C14422 + C14423 + C14424 + C14425 + C14426 + C14427 + C14428 +
            C14429) *
               C49004) *
              C867 -
          ((C15162 + C15163 + C15164 + C15165 + C15166 + C15167 + C15168 +
            C15169) *
               C49004 +
           (C14429 + C14428 + C14427 + C14426 + C14425 + C14424 + C14423 +
            C14422) *
               C49162) *
              C868 +
          ((C15169 + C15168 + C15167 + C15166 + C15165 + C15164 + C15163 +
            C15162) *
               C49162 +
           (C11148 * C11259 + C11147 * C11253 + C10726 * C11260 +
            C10725 * C11254 + C10724 * C11261 + C10723 * C11255 +
            (C9060 * C10698 + C48800 * C10699) * C11262 +
            (C9060 * C10700 + C48800 * C10701) * C49204) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[198] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                     C1008 * C121 + C49181 * C128) *
                        C1009 +
                    (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                     C1008 * C133 + C49181 * C142) *
                        C49229 +
                    (C1006 * C237 + C1000 * C248 + C1007 * C236 + C1001 * C247 +
                     C1008 * C235 + C49181 * C246) *
                        C1010 +
                    (C1006 * C243 + C1000 * C255 + C1007 * C242 + C1001 * C254 +
                     C1008 * C241 + C49181 * C253) *
                        C49217 +
                    (C1006 * C517 + C1000 * C522 + C1007 * C518 + C1001 * C523 +
                     C1008 * C519 + C49181 * C524) *
                        C1011 +
                    (C1006 * C527 + C1000 * C532 + C1007 * C528 + C1001 * C533 +
                     C1008 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C1008 * C530 + C49181 * C535 + C1007 * C529 +
                     C1001 * C534 + C1006 * C528 + C1000 * C533) *
                        C49194 +
                    (C1008 * C520 + C49181 * C525 + C1007 * C519 +
                     C1001 * C524 + C1006 * C518 + C1000 * C523) *
                        C1011 +
                    (C1008 * C240 + C49181 * C252 + C1007 * C241 +
                     C1001 * C253 + C1006 * C242 + C1000 * C254) *
                        C49217 +
                    (C1008 * C234 + C49181 * C245 + C1007 * C235 +
                     C1001 * C246 + C1006 * C236 + C1000 * C247) *
                        C1010 +
                    (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                     C1001 * C142 + C1006 * C132 + C1000 * C141) *
                        C49229 +
                    (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                     C1001 * C128 + C1006 * C120 + C1000 * C127) *
                        C1009) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                     C1008 * C123 + C49181 * C130) *
                        C1009 +
                    (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                     C1008 * C135 + C49181 * C144) *
                        C49229 +
                    (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
                     C1008 * C233 + C49181 * C244) *
                        C1010 +
                    (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
                     C1008 * C239 + C49181 * C251) *
                        C49217 +
                    (C1006 * C519 + C1000 * C524 + C1007 * C520 + C1001 * C525 +
                     C1008 * C521 + C49181 * C526) *
                        C1011 +
                    (C1006 * C529 + C1000 * C534 + C1007 * C530 + C1001 * C535 +
                     C1008 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C48905) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C48905 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C48905) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                      C1001 * C127 + C1008 * C121 + C49181 * C128) *
                         C118 +
                     (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                      C1001 * C141 + C1008 * C133 + C49181 * C142) *
                         C48905) *
                        C49230 +
                    ((C1006 * C345 + C1000 * C356 + C1007 * C344 +
                      C1001 * C355 + C1008 * C343 + C49181 * C354) *
                         C118 +
                     (C1006 * C351 + C1000 * C363 + C1007 * C350 +
                      C1001 * C362 + C1008 * C349 + C49181 * C361) *
                         C48905) *
                        C49219 +
                    ((C1006 * C870 + C1000 * C875 + C1007 * C871 +
                      C1001 * C876 + C1008 * C872 + C49181 * C877) *
                         C118 +
                     (C1006 * C880 + C1000 * C885 + C1007 * C881 +
                      C1001 * C886 + C1008 * C882 + C49181 * C887) *
                         C48905) *
                        C49197) *
                       C48888 * C48871 * C110 -
                   (((C1008 * C883 + C49181 * C888 + C1007 * C882 +
                      C1001 * C887 + C1006 * C881 + C1000 * C886) *
                         C48905 +
                     (C1008 * C873 + C49181 * C878 + C1007 * C872 +
                      C1001 * C877 + C1006 * C871 + C1000 * C876) *
                         C118) *
                        C49197 +
                    ((C1008 * C348 + C49181 * C360 + C1007 * C349 +
                      C1001 * C361 + C1006 * C350 + C1000 * C362) *
                         C48905 +
                     (C1008 * C342 + C49181 * C353 + C1007 * C343 +
                      C1001 * C354 + C1006 * C344 + C1000 * C355) *
                         C118) *
                        C49219 +
                    ((C1008 * C134 + C49181 * C143 + C1007 * C133 +
                      C1001 * C142 + C1006 * C132 + C1000 * C141) *
                         C48905 +
                     (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                      C1001 * C128 + C1006 * C120 + C1000 * C127) *
                         C118) *
                        C49230) *
                       C48888 * C48871 * C111 +
                   (((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                      C1001 * C129 + C1008 * C123 + C49181 * C130) *
                         C118 +
                     (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                      C1001 * C143 + C1008 * C135 + C49181 * C144) *
                         C48905) *
                        C49230 +
                    ((C1006 * C343 + C1000 * C354 + C1007 * C342 +
                      C1001 * C353 + C1008 * C341 + C49181 * C352) *
                         C118 +
                     (C1006 * C349 + C1000 * C361 + C1007 * C348 +
                      C1001 * C360 + C1008 * C347 + C49181 * C359) *
                         C48905) *
                        C49219 +
                    ((C1006 * C872 + C1000 * C877 + C1007 * C873 +
                      C1001 * C878 + C1008 * C874 + C49181 * C879) *
                         C118 +
                     (C1006 * C882 + C1000 * C887 + C1007 * C883 +
                      C1001 * C888 + C1008 * C884 + C49181 * C889) *
                         C48905) *
                        C49197) *
                       C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C7763 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C7757 +
                    (C7760 * C237 + C49226 * C248 + C7761 * C236 +
                     C49213 * C247 + C7762 * C235 + C49181 * C246) *
                        C7764 +
                    (C7760 * C243 + C49226 * C255 + C7761 * C242 +
                     C49213 * C254 + C7762 * C241 + C49181 * C253) *
                        C7758 +
                    (C7760 * C517 + C49226 * C522 + C7761 * C518 +
                     C49213 * C523 + C7762 * C519 + C49181 * C524) *
                        C7765 +
                    (C7760 * C527 + C49226 * C532 + C7761 * C528 +
                     C49213 * C533 + C7762 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C7762 * C530 + C49181 * C535 + C7761 * C529 +
                     C49213 * C534 + C7760 * C528 + C49226 * C533) *
                        C49194 +
                    (C7762 * C520 + C49181 * C525 + C7761 * C519 +
                     C49213 * C524 + C7760 * C518 + C49226 * C523) *
                        C7765 +
                    (C7762 * C240 + C49181 * C252 + C7761 * C241 +
                     C49213 * C253 + C7760 * C242 + C49226 * C254) *
                        C7758 +
                    (C7762 * C234 + C49181 * C245 + C7761 * C235 +
                     C49213 * C246 + C7760 * C236 + C49226 * C247) *
                        C7764 +
                    (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                     C49213 * C142 + C7760 * C132 + C49226 * C141) *
                        C7757 +
                    (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                     C49213 * C128 + C7760 * C120 + C49226 * C127) *
                        C7763) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                     C49213 * C129 + C7762 * C123 + C49181 * C130) *
                        C7763 +
                    (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                     C49213 * C143 + C7762 * C135 + C49181 * C144) *
                        C7757 +
                    (C7760 * C235 + C49226 * C246 + C7761 * C234 +
                     C49213 * C245 + C7762 * C233 + C49181 * C244) *
                        C7764 +
                    (C7760 * C241 + C49226 * C253 + C7761 * C240 +
                     C49213 * C252 + C7762 * C239 + C49181 * C251) *
                        C7758 +
                    (C7760 * C519 + C49226 * C524 + C7761 * C520 +
                     C49213 * C525 + C7762 * C521 + C49181 * C526) *
                        C7765 +
                    (C7760 * C529 + C49226 * C534 + C7761 * C530 +
                     C49213 * C535 + C7762 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C9060 * C119 + C48800 * C126) * C9061 +
                    (C9060 * C131 + C48800 * C140) * C9055 +
                    (C9060 * C237 + C48800 * C248) * C9062 +
                    (C9060 * C243 + C48800 * C255) * C9056 +
                    (C9060 * C517 + C48800 * C522) * C9063 +
                    (C9060 * C527 + C48800 * C532) * C9057 +
                    (C9060 * C1160 + C48800 * C1167) * C9064 +
                    (C9060 * C1164 + C48800 * C1172) * C9058 +
                    (C9060 * C1664 + C48800 * C1667) * C9065 +
                    (C9060 * C1670 + C48800 * C1673) * C9059) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C9060 * C1671 + C48800 * C1674) * C9059 +
                    (C9060 * C1665 + C48800 * C1668) * C9065 +
                    (C9060 * C1163 + C48800 * C1171) * C9058 +
                    (C9060 * C1159 + C48800 * C1166) * C9064 +
                    (C9060 * C528 + C48800 * C533) * C9057 +
                    (C9060 * C518 + C48800 * C523) * C9063 +
                    (C9060 * C242 + C48800 * C254) * C9056 +
                    (C9060 * C236 + C48800 * C247) * C9062 +
                    (C9060 * C132 + C48800 * C141) * C9055 +
                    (C9060 * C120 + C48800 * C127) * C9061) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C9060 * C121 + C48800 * C128) * C9061 +
                    (C9060 * C133 + C48800 * C142) * C9055 +
                    (C9060 * C235 + C48800 * C246) * C9062 +
                    (C9060 * C241 + C48800 * C253) * C9056 +
                    (C9060 * C519 + C48800 * C524) * C9063 +
                    (C9060 * C529 + C48800 * C534) * C9057 +
                    (C9060 * C1158 + C48800 * C1165) * C9064 +
                    (C9060 * C1162 + C48800 * C1170) * C9058 +
                    (C9060 * C1666 + C48800 * C1669) * C9065 +
                    (C9060 * C1672 + C48800 * C1675) * C9059) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48800 * C126) * C7763 +
                     (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
                     C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                        C49230 +
                    ((C9060 * C345 + C48800 * C356) * C7763 +
                     (C9060 * C351 + C48800 * C363) * C7757 + C9558 * C7764 +
                     C9557 * C7758 + C9556 * C7765 + C9555 * C49194) *
                        C49219 +
                    ((C9060 * C870 + C48800 * C875) * C7763 +
                     (C9060 * C880 + C48800 * C885) * C7757 +
                     (C9060 * C2294 + C48800 * C2300) * C7764 +
                     (C9060 * C2303 + C48800 * C2312) * C7758 +
                     (C9060 * C2297 + C48800 * C2306) * C7765 +
                     (C9060 * C2309 + C48800 * C2315) * C49194) *
                        C49197) *
                       C48888 * C48871 * C110 -
                   (((C9060 * C2310 + C48800 * C2316) * C49194 +
                     (C9060 * C2298 + C48800 * C2307) * C7765 +
                     (C9060 * C2304 + C48800 * C2313) * C7758 +
                     (C9060 * C2295 + C48800 * C2301) * C7764 +
                     (C9060 * C881 + C48800 * C886) * C7757 +
                     (C9060 * C871 + C48800 * C876) * C7763) *
                        C49197 +
                    ((C9060 * C1397 + C48800 * C1405) * C49194 +
                     (C9060 * C1393 + C48800 * C1400) * C7765 +
                     (C9060 * C630 + C48800 * C635) * C7758 +
                     (C9060 * C620 + C48800 * C625) * C7764 +
                     (C9060 * C350 + C48800 * C362) * C7757 +
                     (C9060 * C344 + C48800 * C355) * C7763) *
                        C49219 +
                    (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 +
                     C9197 * C7764 + (C9060 * C132 + C48800 * C141) * C7757 +
                     (C9060 * C120 + C48800 * C127) * C7763) *
                        C49230) *
                       C48888 * C48871 * C111 +
                   (((C9060 * C121 + C48800 * C128) * C7763 +
                     (C9060 * C133 + C48800 * C142) * C7757 +
                     (C9060 * C235 + C48800 * C246) * C7764 +
                     (C9060 * C241 + C48800 * C253) * C7758 +
                     (C9060 * C519 + C48800 * C524) * C7765 +
                     (C9060 * C529 + C48800 * C534) * C49194) *
                        C49230 +
                    ((C9060 * C343 + C48800 * C354) * C7763 +
                     (C9060 * C349 + C48800 * C361) * C7757 +
                     (C9060 * C621 + C48800 * C626) * C7764 +
                     (C9060 * C631 + C48800 * C636) * C7758 +
                     (C9060 * C1392 + C48800 * C1399) * C7765 +
                     (C9060 * C1396 + C48800 * C1404) * C49194) *
                        C49219 +
                    ((C9060 * C872 + C48800 * C877) * C7763 +
                     (C9060 * C882 + C48800 * C887) * C7757 +
                     (C9060 * C2296 + C48800 * C2302) * C7764 +
                     (C9060 * C2305 + C48800 * C2314) * C7758 +
                     (C9060 * C2299 + C48800 * C2308) * C7765 +
                     (C9060 * C2311 + C48800 * C2317) * C49194) *
                        C49197) *
                       C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C229 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C229 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C1006 * C345 + C1000 * C356 + C1007 * C344 + C1001 * C355 +
              C1008 * C343 + C49181 * C354) *
                 C118 +
             (C1006 * C351 + C1000 * C363 + C1007 * C350 + C1001 * C362 +
              C1008 * C349 + C49181 * C361) *
                 C48905) *
                C49219 +
            ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
              C1008 * C872 + C49181 * C877) *
                 C118 +
             (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
              C1008 * C882 + C49181 * C887) *
                 C48905) *
                C49197) *
               C48888 * C229 -
           (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
              C1006 * C2303 + C1000 * C2312) *
                 C48905 +
             (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
              C1006 * C2294 + C1000 * C2300) *
                 C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C48888 * C49189) *
              C231 +
          ((((C1235 + C1236 + C1237) * C118 +
             (C1238 + C1239 + C1240) * C48905) *
                C49230 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49181 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49181 * C637) *
                 C48905) *
                C49219 +
            ((C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C118 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C1008 * C883 + C49181 * C888 + C1007 * C882 + C1001 * C887 +
              C1006 * C881 + C1000 * C886) *
                 C48905 +
             (C1008 * C873 + C49181 * C878 + C1007 * C872 + C1001 * C877 +
              C1006 * C871 + C1000 * C876) *
                 C118) *
                C49197 +
            ((C1008 * C348 + C49181 * C360 + C1007 * C349 + C1001 * C361 +
              C1006 * C350 + C1000 * C362) *
                 C48905 +
             (C1008 * C342 + C49181 * C353 + C1007 * C343 + C1001 * C354 +
              C1006 * C344 + C1000 * C355) *
                 C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C229 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C229 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C231 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            ((C9060 * C345 + C48800 * C356) * C7763 +
             (C9060 * C351 + C48800 * C363) * C7757 + C9558 * C7764 +
             C9557 * C7758 + C9556 * C7765 + C9555 * C49194) *
                C49219 +
            ((C9060 * C870 + C48800 * C875) * C7763 +
             (C9060 * C880 + C48800 * C885) * C7757 + C10077 * C7764 +
             C10078 * C7758 + C10079 * C7765 + C10080 * C49194) *
                C49197) *
               C48888 * C229 -
           (((C9060 * C9787 + C48800 * C9790) * C49194 +
             (C9060 * C9784 + C48800 * C9786) * C7765 + C10080 * C7758 +
             C10079 * C7764 + C10078 * C7757 + C10077 * C7763) *
                C49197 +
            (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
             C9557 * C7757 + C9558 * C7763) *
                C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C48888 * C49189) *
              C231 +
          (((C9197 * C7763 + C9198 * C7757 + C9199 * C7764 + C9200 * C7758 +
             C9201 * C7765 + C9202 * C49194) *
                C49230 +
            (C10081 * C7763 + C10082 * C7757 + C10083 * C7764 + C10084 * C7758 +
             (C9060 * C1845 + C48800 * C1848) * C7765 +
             (C9060 * C1851 + C48800 * C1854) * C49194) *
                C49219 +
            (C10085 * C7763 + C10086 * C7757 + C10087 * C7764 + C10088 * C7758 +
             (C9060 * C10048 + C48800 * C10049) * C7765 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10088 * C49194 + C10087 * C7765 + C10086 * C7758 +
             C10085 * C7764 + (C9060 * C881 + C48800 * C886) * C7757 +
             (C9060 * C871 + C48800 * C876) * C7763) *
                C49197 +
            (C10084 * C49194 + C10083 * C7765 + C10082 * C7758 +
             C10081 * C7764 + (C9060 * C350 + C48800 * C362) * C7757 +
             (C9060 * C344 + C48800 * C355) * C7763) *
                C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C339 -
           ((C1008 * C1396 + C49181 * C1404 + C1007 * C1397 + C1001 * C1405 +
             C1006 * C1398 + C1000 * C1406) *
                C49194 +
            (C1008 * C1392 + C49181 * C1399 + C1007 * C1393 + C1001 * C1400 +
             C1006 * C1394 + C1000 * C1401) *
                C1011 +
            (C1008 * C631 + C49181 * C636 + C1007 * C630 + C1001 * C635 +
             C1006 * C629 + C1000 * C634) *
                C49217 +
            (C1008 * C621 + C49181 * C626 + C1007 * C620 + C1001 * C625 +
             C1006 * C619 + C1000 * C624) *
                C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C339 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C48871 * C231 +
          ((((C2804 + C2805 + C2806) * C118 +
             (C2807 + C2808 + C2809) * C48905) *
                C49230 +
            ((C2810 + C2811 + C2812) * C118 +
             (C2813 + C2814 + C2815) * C48905) *
                C49219 +
            ((C1006 * C2728 + C1000 * C2735 + C1007 * C2727 + C1001 * C2734 +
              C1008 * C2730 + C49181 * C2737) *
                 C118 +
             (C1006 * C2732 + C1000 * C2740 + C1007 * C2731 + C1001 * C2739 +
              C1008 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C339 -
           ((C7762 * C1396 + C49181 * C1404 + C7761 * C1397 + C49213 * C1405 +
             C7760 * C1398 + C49226 * C1406) *
                C49194 +
            (C7762 * C1392 + C49181 * C1399 + C7761 * C1393 + C49213 * C1400 +
             C7760 * C1394 + C49226 * C1401) *
                C7765 +
            (C7762 * C631 + C49181 * C636 + C7761 * C630 + C49213 * C635 +
             C7760 * C629 + C49226 * C634) *
                C7758 +
            (C7762 * C621 + C49181 * C626 + C7761 * C620 + C49213 * C625 +
             C7760 * C619 + C49226 * C624) *
                C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           ((C9060 * C9288 + C48800 * C9292) * C9059 +
            (C9060 * C9286 + C48800 * C9289) * C9065 +
            (C9060 * C1850 + C48800 * C1853) * C9058 +
            (C9060 * C1844 + C48800 * C1847) * C9064 +
            (C9060 * C1398 + C48800 * C1406) * C9057 +
            (C9060 * C1394 + C48800 * C1401) * C9063 +
            (C9060 * C629 + C48800 * C634) * C9056 +
            (C9060 * C619 + C48800 * C624) * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C339 -
           (((C9060 * C10236 + C48800 * C10240) * C49194 +
             (C9060 * C10234 + C48800 * C10237) * C7765 +
             (C9060 * C3223 + C48800 * C3226) * C7758 +
             (C9060 * C3217 + C48800 * C3220) * C7764 +
             (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C48871 * C231 +
          (((C10287 + C10288 + C10263 + C10264 + C10265 + C10266) * C49230 +
            (C10289 + C10290 + C10271 + C10272 + C10273 + C10274) * C49219 +
            ((C9060 * C2728 + C48800 * C2735) * C7763 +
             (C9060 * C2732 + C48800 * C2740) * C7757 +
             (C9060 * C3218 + C48800 * C3221) * C7764 +
             (C9060 * C3224 + C48800 * C3227) * C7758 +
             (C9060 * C10235 + C48800 * C10238) * C7765 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C447 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C447 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C48888 * C447 -
           (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
              C1006 * C2303 + C1000 * C2312) *
                 C48905 +
             (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
              C1006 * C2294 + C1000 * C2300) *
                 C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C48888 * C49189) *
              C449 +
          ((((C1235 + C1236 + C1237) * C118 +
             (C1238 + C1239 + C1240) * C48905) *
                C49230 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49181 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49181 * C637) *
                 C48905) *
                C49219 +
            ((C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2577 + C49181 * C2578) *
                 C118 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2579 + C49181 * C2580) *
                 C48905) *
                C49197) *
               C48888 * C49189 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C447 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C447 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C449 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C48888 * C447 -
           (((C9060 * C9787 + C48800 * C9790) * C49194 +
             (C9060 * C9784 + C48800 * C9786) * C7765 + C10080 * C7758 +
             C10079 * C7764 + C10078 * C7757 + C10077 * C7763) *
                C49197 +
            (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
             C9557 * C7757 + C9558 * C7763) *
                C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C48888 * C49189) *
              C449 +
          (((C9197 * C7763 + C9198 * C7757 + C9199 * C7764 + C9200 * C7758 +
             C9201 * C7765 + C9202 * C49194) *
                C49230 +
            (C10081 * C7763 + C10082 * C7757 + C10083 * C7764 + C10084 * C7758 +
             (C9060 * C1845 + C48800 * C1848) * C7765 +
             (C9060 * C1851 + C48800 * C1854) * C49194) *
                C49219 +
            (C10085 * C7763 + C10086 * C7757 + C10087 * C7764 + C10088 * C7758 +
             (C9060 * C10048 + C48800 * C10049) * C7765 +
             (C9060 * C10050 + C48800 * C10051) * C49194) *
                C49197) *
               C48888 * C49189 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C48888 * C513 -
          ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
           (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
           (C1228 + C1227 + C1226) * C49229 + (C1225 + C1224 + C1223) * C1009) *
              C48917 * C48888 * C514 +
          (C1691 * C1009 + C1692 * C49229 + (C1698 + C1697 + C1696) * C1010 +
           (C1695 + C1694 + C1693) * C49217 +
           (C1006 * C1664 + C1000 * C1667 + C1007 * C1665 + C1001 * C1668 +
            C1008 * C1666 + C49181 * C1669) *
               C1011 +
           (C1006 * C1670 + C1000 * C1673 + C1007 * C1671 + C1001 * C1674 +
            C1008 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C48888 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C48905 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48917 * C48888 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C48905) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C48905) *
               C49230 +
           ((C2792 + C2793 + C2794) * C118 + (C2795 + C2796 + C2797) * C48905) *
               C49219 +
           ((C2798 + C2799 + C2800) * C118 + (C2801 + C2802 + C2803) * C48905) *
               C49197) *
              C48888 * C513 -
          (((C1008 * C2305 + C49181 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C48905 +
            (C1008 * C2296 + C49181 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C118) *
               C49197 +
           ((C1887 + C1888 + C1889) * C48905 + (C1890 + C1891 + C1892) * C118) *
               C49219 +
           ((C1228 + C1227 + C1226) * C48905 + (C1225 + C1224 + C1223) * C118) *
               C49230) *
              C48888 * C514 +
          ((C1691 * C118 + C1692 * C48905) * C49230 +
           ((C1886 + C1885 + C1884) * C118 + (C1883 + C1882 + C1881) * C48905) *
               C49219 +
           ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
             C1008 * C2299 + C49181 * C2308) *
                C118 +
            (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
             C1008 * C2311 + C49181 * C2317) *
                C48905) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C48888 * C513 -
          ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
           (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
           (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
              C48917 * C48888 * C514 +
          (C8401 * C7763 + C8402 * C7757 + (C8408 + C8407 + C8406) * C7764 +
           (C8405 + C8404 + C8403) * C7758 +
           (C7760 * C1664 + C49226 * C1667 + C7761 * C1665 + C49213 * C1668 +
            C7762 * C1666 + C49181 * C1669) *
               C7765 +
           (C7760 * C1670 + C49226 * C1673 + C7761 * C1671 + C49213 * C1674 +
            C7762 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C48888 * C513 -
          (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
           C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
           C9190 * C9055 + C9189 * C9061) *
              C48917 * C48888 * C514 +
          (C9191 * C9061 + C9192 * C9055 + C9193 * C9062 + C9194 * C9056 +
           C9195 * C9063 + C9196 * C9057 + C9448 * C9064 + C9447 * C9058 +
           (C9060 * C9438 + C48800 * C9439) * C9065 +
           (C9060 * C9440 + C48800 * C9441) * C9059) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C7763 +
            (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
            C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
               C49230 +
           (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
           (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
              C48888 * C513 -
          ((C10551 * C49194 + C10552 * C7765 + C10080 * C7758 + C10079 * C7764 +
            C10078 * C7757 + C10077 * C7763) *
               C49197 +
           (C9553 * C49194 + C9554 * C7765 + C9555 * C7758 + C9556 * C7764 +
            C9557 * C7757 + C9558 * C7763) *
               C49219 +
           (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
            C9190 * C7757 + C9189 * C7763) *
               C49230) *
              C48888 * C514 +
          ((C9191 * C7763 + C9192 * C7757 + C9193 * C7764 + C9194 * C7758 +
            C9195 * C7765 + C9196 * C49194) *
               C49230 +
           (C9556 * C7763 + C9555 * C7757 + C9554 * C7764 + C9553 * C7758 +
            C9552 * C7765 + C9551 * C49194) *
               C49219 +
           (C10079 * C7763 + C10080 * C7757 + C10552 * C7764 + C10551 * C7758 +
            (C9060 * C9785 + C48800 * C9788) * C7765 +
            (C9060 * C9789 + C48800 * C9791) * C49194) *
               C49197) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C339 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C447 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C447 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C339 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C447 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C48905) *
                C49230 +
            ((C3242 + C3243 + C3244) * C118 +
             (C3245 + C3246 + C3247) * C48905) *
                C49219 +
            ((C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
              C1008 * C3219 + C49181 * C3222) *
                 C118 +
             (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
              C1008 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C3247 + C3246 + C3245) * C48905 +
             (C3244 + C3243 + C3242) * C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C339 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C447 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C447 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C339 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C447 +
          (((C10711 + C10712 + C10713 + C10714 + C10715 + C10716) * C49230 +
            (C10717 + C10718 + C10719 + C10720 + C10721 + C10722) * C49219 +
            (C10726 * C7763 + C10725 * C7757 + C10724 * C7764 + C10723 * C7758 +
             (C9060 * C10698 + C48800 * C10699) * C7765 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C10722 + C10721 + C10720 + C10719 + C10718 + C10717) * C49197 +
            (C10716 + C10715 + C10714 + C10713 + C10712 + C10711) * C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C721 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C48871 * C449 +
          ((((C2804 + C2805 + C2806) * C118 +
             (C2807 + C2808 + C2809) * C48905) *
                C49230 +
            ((C2810 + C2811 + C2812) * C118 +
             (C2813 + C2814 + C2815) * C48905) *
                C49219 +
            ((C1006 * C2728 + C1000 * C2735 + C1007 * C2727 + C1001 * C2734 +
              C1008 * C2730 + C49181 * C2737) *
                 C118 +
             (C1006 * C2732 + C1000 * C2740 + C1007 * C2731 + C1001 * C2739 +
              C1008 * C2738 + C49181 * C2742) *
                 C48905) *
                C49197) *
               C49191 -
           (((C2815 + C2814 + C2813) * C48905 +
             (C2812 + C2811 + C2810) * C118) *
                C49197 +
            ((C2809 + C2808 + C2807) * C48905 +
             (C2806 + C2805 + C2804) * C118) *
                C49219 +
            ((C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C48905 +
             (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49230) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C48871 * C449 +
          (((C10287 + C10288 + C10263 + C10264 + C10265 + C10266) * C49230 +
            (C10289 + C10290 + C10271 + C10272 + C10273 + C10274) * C49219 +
            ((C9060 * C2728 + C48800 * C2735) * C7763 +
             (C9060 * C2732 + C48800 * C2740) * C7757 +
             (C9060 * C3218 + C48800 * C3221) * C7764 +
             (C9060 * C3224 + C48800 * C3227) * C7758 +
             (C9060 * C10235 + C48800 * C10238) * C7765 +
             (C9060 * C10239 + C48800 * C10241) * C49194) *
                C49197) *
               C49191 -
           ((C10274 + C10273 + C10272 + C10271 + C10290 + C10289) * C49197 +
            (C10266 + C10265 + C10264 + C10263 + C10288 + C10287) * C49219 +
            (C9200 * C49194 + C9199 * C7765 + C9198 * C7758 + C9197 * C7764 +
             (C9060 * C132 + C48800 * C141) * C7757 +
             (C9060 * C120 + C48800 * C127) * C7763) *
                C49230) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C229 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C229 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49181 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49181 * C142) *
                 C48905) *
                C49230 +
            ((C2792 + C2793 + C2794) * C118 +
             (C2795 + C2796 + C2797) * C48905) *
                C49219 +
            ((C2798 + C2799 + C2800) * C118 +
             (C2801 + C2802 + C2803) * C48905) *
                C49197) *
               C721 -
           (((C1008 * C2731 + C49181 * C2739 + C1007 * C2732 + C1001 * C2740 +
              C1006 * C2733 + C1000 * C2741) *
                 C48905 +
             (C1008 * C2727 + C49181 * C2734 + C1007 * C2728 + C1001 * C2735 +
              C1006 * C2729 + C1000 * C2736) *
                 C118) *
                C49197 +
            ((C2803 + C2802 + C2801) * C48905 +
             (C2800 + C2799 + C2798) * C118) *
                C49219 +
            ((C2797 + C2796 + C2795) * C48905 +
             (C2794 + C2793 + C2792) * C118) *
                C49230) *
               C49191) *
              C229 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C48905) *
                C49230 +
            ((C3242 + C3243 + C3244) * C118 +
             (C3245 + C3246 + C3247) * C48905) *
                C49219 +
            ((C1006 * C3217 + C1000 * C3220 + C1007 * C3218 + C1001 * C3221 +
              C1008 * C3219 + C49181 * C3222) *
                 C118 +
             (C1006 * C3223 + C1000 * C3226 + C1007 * C3224 + C1001 * C3227 +
              C1008 * C3225 + C49181 * C3228) *
                 C48905) *
                C49197) *
               C49191 -
           (((C3247 + C3246 + C3245) * C48905 +
             (C3244 + C3243 + C3242) * C118) *
                C49197 +
            ((C1887 + C1888 + C1889) * C48905 +
             (C1890 + C1891 + C1892) * C118) *
                C49219 +
            ((C1228 + C1227 + C1226) * C48905 +
             (C1225 + C1224 + C1223) * C118) *
                C49230) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C229 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C229 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48800 * C126) * C7763 +
             (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
             C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
                C49230 +
            (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
            (C10285 + C10286 + C10255 + C10256 + C10257 + C10258) * C49197) *
               C721 -
           ((C10723 * C49194 + C10724 * C7765 + C10725 * C7758 +
             C10726 * C7764 + (C9060 * C2733 + C48800 * C2741) * C7757 +
             (C9060 * C2729 + C48800 * C2736) * C7763) *
                C49197 +
            (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
            (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
               C49191) *
              C229 +
          (((C10711 + C10712 + C10713 + C10714 + C10715 + C10716) * C49230 +
            (C10717 + C10718 + C10719 + C10720 + C10721 + C10722) * C49219 +
            (C10726 * C7763 + C10725 * C7757 + C10724 * C7764 + C10723 * C7758 +
             (C9060 * C10698 + C48800 * C10699) * C7765 +
             (C9060 * C10700 + C48800 * C10701) * C49194) *
                C49197) *
               C49191 -
           ((C10722 + C10721 + C10720 + C10719 + C10718 + C10717) * C49197 +
            (C10716 + C10715 + C10714 + C10713 + C10712 + C10711) * C49219 +
            (C9194 * C49194 + C9193 * C7765 + C9192 * C7758 + C9191 * C7764 +
             C9190 * C7757 + C9189 * C7763) *
                C49230) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C867 -
          ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
           (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
           (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
            C1006 * C351 + C1000 * C363) *
               C49229 +
           (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
            C1006 * C345 + C1000 * C356) *
               C1009) *
              C48917 * C868 +
          ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
            C1008 * C872 + C49181 * C877) *
               C1009 +
           (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
            C1008 * C882 + C49181 * C887) *
               C49229 +
           (C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
            C1008 * C2296 + C49181 * C2302) *
               C1010 +
           (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
            C1008 * C2305 + C49181 * C2314) *
               C49217 +
           (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
            C1008 * C2299 + C49181 * C2308) *
               C1011 +
           (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
            C1008 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C48905 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48917 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C48905) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C48905) *
               C49230 +
           ((C2792 + C2793 + C2794) * C118 + (C2795 + C2796 + C2797) * C48905) *
               C49219 +
           C3686 * C49197) *
              C867 -
          (((C3678 + C3679 + C3680) * C48905 + (C3681 + C3682 + C3683) * C118) *
               C49197 +
           ((C2803 + C2802 + C2801) * C48905 + (C2800 + C2799 + C2798) * C118) *
               C49219 +
           ((C2797 + C2796 + C2795) * C48905 + (C2794 + C2793 + C2792) * C118) *
               C49230) *
              C868 +
          (C3686 * C49230 +
           ((C3683 + C3682 + C3681) * C118 + (C3680 + C3679 + C3678) * C48905) *
               C49219 +
           ((C1006 * C3649 + C1000 * C3652 + C1007 * C3650 + C1001 * C3653 +
             C1008 * C3651 + C49181 * C3654) *
                C118 +
            (C1006 * C3655 + C1000 * C3658 + C1007 * C3656 + C1001 * C3659 +
             C1008 * C3657 + C49181 * C3660) *
                C48905) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C867 -
          ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
           (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
           (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
            C7760 * C351 + C49226 * C363) *
               C7757 +
           (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
            C7760 * C345 + C49226 * C356) *
               C7763) *
              C48917 * C868 +
          ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
            C7762 * C872 + C49181 * C877) *
               C7763 +
           (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
            C7762 * C882 + C49181 * C887) *
               C7757 +
           (C7760 * C2294 + C49226 * C2300 + C7761 * C2295 + C49213 * C2301 +
            C7762 * C2296 + C49181 * C2302) *
               C7764 +
           (C7760 * C2303 + C49226 * C2312 + C7761 * C2304 + C49213 * C2313 +
            C7762 * C2305 + C49181 * C2314) *
               C7758 +
           (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
            C7762 * C2299 + C49181 * C2308) *
               C7765 +
           (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
            C7762 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C867 -
          (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
           C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
           (C9060 * C351 + C48800 * C363) * C9055 +
           (C9060 * C345 + C48800 * C356) * C9061) *
              C48917 * C868 +
          ((C9060 * C870 + C48800 * C875) * C9061 +
           (C9060 * C880 + C48800 * C885) * C9055 +
           (C9060 * C2294 + C48800 * C2300) * C9062 +
           (C9060 * C2303 + C48800 * C2312) * C9056 +
           (C9060 * C2297 + C48800 * C2306) * C9063 +
           (C9060 * C2309 + C48800 * C2315) * C9057 +
           (C9060 * C9784 + C48800 * C9786) * C9064 +
           (C9060 * C9787 + C48800 * C9790) * C9058 +
           (C9060 * C9785 + C48800 * C9788) * C9065 +
           (C9060 * C9789 + C48800 * C9791) * C9059) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C7763 +
            (C9060 * C131 + C48800 * C140) * C7757 + C9189 * C7764 +
            C9190 * C7758 + C9191 * C7765 + C9192 * C49194) *
               C49230 +
           (C10283 + C10284 + C10247 + C10248 + C10249 + C10250) * C49219 +
           C11153 * C49197) *
              C867 -
          ((C11138 + C11139 + C11140 + C11141 + C11150 + C11151) * C49197 +
           (C10258 + C10257 + C10256 + C10255 + C10286 + C10285) * C49219 +
           (C10250 + C10249 + C10248 + C10247 + C10284 + C10283) * C49230) *
              C868 +
          (C11153 * C49230 +
           (C11151 + C11150 + C11141 + C11140 + C11139 + C11138) * C49219 +
           ((C9060 * C3649 + C48800 * C3652) * C7763 +
            (C9060 * C3655 + C48800 * C3658) * C7757 +
            (C9060 * C11128 + C48800 * C11130) * C7764 +
            (C9060 * C11131 + C48800 * C11134) * C7758 +
            (C9060 * C11129 + C48800 * C11132) * C7765 +
            (C9060 * C11133 + C48800 * C11135) * C49194) *
               C49197) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
             C3792 * C343 + C3786 * C354 + C3793 * C342 + C49198 * C353) *
                C118 +
            (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
             C3792 * C349 + C3786 * C361 + C3793 * C348 + C49198 * C360) *
                C48905) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C3793 * C347 + C49198 * C359 + C3792 * C348 + C3786 * C360 +
             C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                C48905 +
            (C3793 * C341 + C49198 * C352 + C3792 * C342 + C3786 * C353 +
             C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                C118) *
               C49004 +
           ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C48905 +
            (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C118) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
             C3792 * C123 + C3786 * C130 + C3793 * C124 + C49198 * C137) *
                C118 +
            (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
             C3792 * C135 + C3786 * C144 + C3793 * C136 + C49198 * C145) *
                C48905) *
               C49162 +
           ((C3790 * C343 + C3784 * C354 + C3791 * C342 + C3785 * C353 +
             C3792 * C341 + C3786 * C352 + C3793 * C346 + C49198 * C357) *
                C118 +
            (C3790 * C349 + C3784 * C361 + C3791 * C348 + C3785 * C360 +
             C3792 * C347 + C3786 * C359 + C3793 * C358 + C49198 * C364) *
                C48905) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C47907 * C345 + C49139 * C356 + C47888 * C344 + C48810 * C355) *
                C7763 +
            (C47907 * C351 + C49139 * C363 + C47888 * C350 + C48810 * C362) *
                C7757 +
            (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
            (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
               C49004) *
              C48888 * C48871 * C110 -
          (((C47888 * C1396 + C48810 * C1404 + C47907 * C1397 +
             C49139 * C1405) *
                C49194 +
            (C47888 * C1392 + C48810 * C1399 + C47907 * C1393 +
             C49139 * C1400) *
                C7765 +
            (C47888 * C631 + C48810 * C636 + C47907 * C630 + C49139 * C635) *
                C7758 +
            (C47888 * C621 + C48810 * C626 + C47907 * C620 + C49139 * C625) *
                C7764 +
            (C47888 * C349 + C48810 * C361 + C47907 * C350 + C49139 * C362) *
                C7757 +
            (C47888 * C343 + C48810 * C354 + C47907 * C344 + C49139 * C355) *
                C7763) *
               C49004 +
           ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
            (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
            (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                C7757 +
            (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                C7763) *
               C49162) *
              C48888 * C48871 * C111 +
          (((C47907 * C121 + C49139 * C128 + C47888 * C122 + C48810 * C129) *
                C7763 +
            (C47907 * C133 + C49139 * C142 + C47888 * C134 + C48810 * C143) *
                C7757 +
            (C47907 * C235 + C49139 * C246 + C47888 * C234 + C48810 * C245) *
                C7764 +
            (C47907 * C241 + C49139 * C253 + C47888 * C240 + C48810 * C252) *
                C7758 +
            (C47907 * C519 + C49139 * C524 + C47888 * C520 + C48810 * C525) *
                C7765 +
            (C47907 * C529 + C49139 * C534 + C47888 * C530 + C48810 * C535) *
                C49194) *
               C49162 +
           ((C47907 * C343 + C49139 * C354 + C47888 * C342 + C48810 * C353) *
                C7763 +
            (C47907 * C349 + C49139 * C361 + C47888 * C348 + C48810 * C360) *
                C7757 +
            (C47907 * C621 + C49139 * C626 + C47888 * C622 + C48810 * C627) *
                C7764 +
            (C47907 * C631 + C49139 * C636 + C47888 * C632 + C48810 * C637) *
                C7758 +
            (C47907 * C1392 + C49139 * C1399 + C47888 * C1395 +
             C48810 * C1402) *
                C7765 +
            (C47907 * C1396 + C49139 * C1404 + C47888 * C1403 +
             C48810 * C1407) *
                C49194) *
               C49004) *
              C48888 * C48871 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
              C3792 * C343 + C3786 * C354 + C3793 * C342 + C49198 * C353) *
                 C118 +
             (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
              C3792 * C349 + C3786 * C361 + C3793 * C348 + C49198 * C360) *
                 C48905) *
                C49004) *
               C48888 * C229 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C3967 + C3968 + C3969 + C3970) * C118 +
             (C3971 + C3972 + C3973 + C3974) * C48905) *
                C49162 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C3793 * C347 + C49198 * C359 + C3792 * C348 + C3786 * C360 +
              C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                 C48905 +
             (C3793 * C341 + C49198 * C352 + C3792 * C342 + C3786 * C353 +
              C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                 C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C47907 * C345 + C49139 * C356 + C47888 * C344 + C48810 * C355) *
                 C7763 +
             (C47907 * C351 + C49139 * C363 + C47888 * C350 + C48810 * C362) *
                 C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C48888 * C229 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
             (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C48888 * C49189) *
              C231 +
          ((((C11454 + C11455) * C7763 + (C11456 + C11457) * C7757 +
             (C11458 + C11459) * C7764 + (C11460 + C11461) * C7758 +
             (C11462 + C11463) * C7765 + (C11464 + C11465) * C49194) *
                C49162 +
            ((C12720 + C12721) * C7763 + (C12722 + C12723) * C7757 +
             (C12724 + C12725) * C7764 + (C12726 + C12727) * C7758 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C7765 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C47888 * C349 + C48810 * C361 + C47907 * C350 + C49139 * C362) *
                 C7757 +
             (C47888 * C343 + C48810 * C354 + C47907 * C344 + C49139 * C355) *
                 C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C339 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C48871 * C231 +
          ((((C5269 + C5270 + C5271 + C5272) * C118 +
             (C5273 + C5274 + C5275 + C5276) * C48905) *
                C49162 +
            ((C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
              C3792 * C873 + C3786 * C878 + C3793 * C874 + C49198 * C879) *
                 C118 +
             (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
              C3792 * C883 + C3786 * C888 + C3793 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C339 -
           (((C47888 * C2310 + C48810 * C2316 + C47907 * C2309 +
              C49139 * C2315) *
                 C49194 +
             (C47888 * C2298 + C48810 * C2307 + C47907 * C2297 +
              C49139 * C2306) *
                 C7765 +
             (C47888 * C2304 + C48810 * C2313 + C47907 * C2303 +
              C49139 * C2312) *
                 C7758 +
             (C47888 * C2295 + C48810 * C2301 + C47907 * C2294 +
              C49139 * C2300) *
                 C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            ((C11998 + C11999) * C49194 + (C12000 + C12001) * C7765 +
             (C12002 + C12003) * C7758 + (C12004 + C12005) * C7764 +
             (C12941 + C12940) * C7757 + (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C48871 * C231 +
          ((((C12942 + C12943) * C7763 + (C12944 + C12945) * C7757 +
             (C12720 + C12721) * C7764 + (C12722 + C12723) * C7758 +
             (C12724 + C12725) * C7765 + (C12726 + C12727) * C49194) *
                C49162 +
            ((C47907 * C871 + C49139 * C876 + C47888 * C872 + C48810 * C877) *
                 C7763 +
             (C47907 * C881 + C49139 * C886 + C47888 * C882 + C48810 * C887) *
                 C7757 +
             (C47907 * C2295 + C49139 * C2301 + C47888 * C2296 +
              C48810 * C2302) *
                 C7764 +
             (C47907 * C2304 + C49139 * C2313 + C47888 * C2305 +
              C48810 * C2314) *
                 C7758 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C7765 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C48888 * C447 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C3967 + C3968 + C3969 + C3970) * C118 +
             (C3971 + C3972 + C3973 + C3974) * C48905) *
                C49162 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49198 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49198 * C638) *
                 C48905) *
                C49004) *
               C48888 * C49189 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
             (C12001 + C12000) * C7765 + (C11999 + C11998) * C49194) *
                C49004) *
               C48888 * C447 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
             (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C48888 * C49189) *
              C449 +
          ((((C11454 + C11455) * C7763 + (C11456 + C11457) * C7757 +
             (C11458 + C11459) * C7764 + (C11460 + C11461) * C7758 +
             (C11462 + C11463) * C7765 + (C11464 + C11465) * C49194) *
                C49162 +
            ((C12720 + C12721) * C7763 + (C12722 + C12723) * C7757 +
             (C12724 + C12725) * C7764 + (C12726 + C12727) * C7758 +
             (C47907 * C1845 + C49139 * C1848 + C47888 * C1846 +
              C48810 * C1849) *
                 C7765 +
             (C47907 * C1851 + C49139 * C1854 + C47888 * C1852 +
              C48810 * C1855) *
                 C49194) *
                C49004) *
               C48888 * C49189 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C5261 + C5262 + C5263 + C5264) * C118 +
            (C5265 + C5266 + C5267 + C5268) * C48905) *
               C49004) *
              C48888 * C513 -
          (((C4503 + C4504 + C4505 + C4506) * C48905 +
            (C4507 + C4508 + C4509 + C4510) * C118) *
               C49004 +
           ((C3966 + C3965 + C3964 + C3963) * C48905 +
            (C3962 + C3961 + C3960 + C3959) * C118) *
               C49162) *
              C48888 * C514 +
          (((C4356 + C4355 + C4354 + C4353) * C118 +
            (C4352 + C4351 + C4350 + C4349) * C48905) *
               C49162 +
           ((C3790 * C1394 + C3784 * C1401 + C3791 * C1393 + C3785 * C1400 +
             C3792 * C1392 + C3786 * C1399 + C3793 * C1395 + C49198 * C1402) *
                C118 +
            (C3790 * C1398 + C3784 * C1406 + C3791 * C1397 + C3785 * C1405 +
             C3792 * C1396 + C3786 * C1404 + C3793 * C1403 + C49198 * C1407) *
                C48905) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
            (C12005 + C12004) * C7764 + (C12003 + C12002) * C7758 +
            C13286 * C7765 + C13287 * C49194) *
               C49004) *
              C48888 * C513 -
          (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
            (C11998 + C11999) * C7758 + (C12000 + C12001) * C7764 +
            (C12002 + C12003) * C7757 + (C12004 + C12005) * C7763) *
               C49004 +
           ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
            (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
            (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
               C49162) *
              C48888 * C514 +
          ((C11824 * C7763 + C11825 * C7757 + C11826 * C7764 + C11827 * C7758 +
            (C11839 + C11838) * C7765 + (C11837 + C11836) * C49194) *
               C49162 +
           (C13286 * C7763 + C13287 * C7757 + (C11997 + C11996) * C7764 +
            (C11995 + C11994) * C7758 +
            (C47907 * C9286 + C49139 * C9289 + C47888 * C9287 +
             C48810 * C9290) *
                C7765 +
            (C47907 * C9288 + C49139 * C9292 + C47888 * C9291 +
             C48810 * C9293) *
                C49194) *
               C49004) *
              C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C339 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C447 +
          ((((C4510 + C4509 + C4508 + C4507) * C118 +
             (C4506 + C4505 + C4504 + C4503) * C48905) *
                C49162 +
            ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
              C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
                 C118 +
             (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
              C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C339 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C447 +
          (((C13482 * C7763 + C13483 * C7757 + C13286 * C7764 + C13287 * C7758 +
             (C11997 + C11996) * C7765 + (C11995 + C11994) * C49194) *
                C49162 +
            ((C13511 + C13510) * C7763 + (C13509 + C13508) * C7757 +
             (C13507 + C13506) * C7764 + (C13505 + C13504) * C7758 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C7765 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             C13500 * C7758 + C13501 * C7764 + C13502 * C7757 +
             C13503 * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C721 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C5269 + C5270 + C5271 + C5272) * C118 +
             (C5273 + C5274 + C5275 + C5276) * C48905) *
                C49162 +
            ((C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
              C3792 * C873 + C3786 * C878 + C3793 * C874 + C49198 * C879) *
                 C118 +
             (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
              C3792 * C883 + C3786 * C888 + C3793 * C884 + C49198 * C889) *
                 C48905) *
                C49004) *
               C49191 -
           (((C5276 + C5275 + C5274 + C5273) * C48905 +
             (C5272 + C5271 + C5270 + C5269) * C118) *
                C49004 +
            ((C3793 * C135 + C49198 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C48905 +
             (C3793 * C123 + C49198 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C48871 * C449 +
          ((((C12942 + C12943) * C7763 + (C12944 + C12945) * C7757 +
             (C12720 + C12721) * C7764 + (C12722 + C12723) * C7758 +
             (C12724 + C12725) * C7765 + (C12726 + C12727) * C49194) *
                C49162 +
            ((C47907 * C871 + C49139 * C876 + C47888 * C872 + C48810 * C877) *
                 C7763 +
             (C47907 * C881 + C49139 * C886 + C47888 * C882 + C48810 * C887) *
                 C7757 +
             (C47907 * C2295 + C49139 * C2301 + C47888 * C2296 +
              C48810 * C2302) *
                 C7764 +
             (C47907 * C2304 + C49139 * C2313 + C47888 * C2305 +
              C48810 * C2314) *
                 C7758 +
             (C47907 * C2298 + C49139 * C2307 + C47888 * C2299 +
              C48810 * C2308) *
                 C7765 +
             (C47907 * C2310 + C49139 * C2316 + C47888 * C2311 +
              C48810 * C2317) *
                 C49194) *
                C49004) *
               C49191 -
           (((C12727 + C12726) * C49194 + (C12725 + C12724) * C7765 +
             (C12723 + C12722) * C7758 + (C12721 + C12720) * C7764 +
             (C12945 + C12944) * C7757 + (C12943 + C12942) * C7763) *
                C49004 +
            ((C11461 + C11460) * C49194 + (C11459 + C11458) * C7765 +
             (C11457 + C11456) * C7758 + (C11455 + C11454) * C7764 +
             (C47888 * C133 + C48810 * C142 + C47907 * C132 + C49139 * C141) *
                 C7757 +
             (C47888 * C121 + C48810 * C128 + C47907 * C120 + C49139 * C127) *
                 C7763) *
                C49162) *
               C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                 C48905) *
                C49162 +
            ((C5261 + C5262 + C5263 + C5264) * C118 +
             (C5265 + C5266 + C5267 + C5268) * C48905) *
                C49004) *
               C721 -
           (((C3793 * C883 + C49198 * C888 + C3792 * C882 + C3786 * C887 +
              C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                 C48905 +
             (C3793 * C873 + C49198 * C878 + C3792 * C872 + C3786 * C877 +
              C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                 C118) *
                C49004 +
            ((C5268 + C5267 + C5266 + C5265) * C48905 +
             (C5264 + C5263 + C5262 + C5261) * C118) *
                C49162) *
               C49191) *
              C229 +
          ((((C4510 + C4509 + C4508 + C4507) * C118 +
             (C4506 + C4505 + C4504 + C4503) * C48905) *
                C49162 +
            ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
              C3792 * C2296 + C3786 * C2302 + C3793 * C2577 + C49198 * C2578) *
                 C118 +
             (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
              C3792 * C2305 + C3786 * C2314 + C3793 * C2579 + C49198 * C2580) *
                 C48905) *
                C49004) *
               C49191 -
           (((C4503 + C4504 + C4505 + C4506) * C48905 +
             (C4507 + C4508 + C4509 + C4510) * C118) *
                C49004 +
            ((C3966 + C3965 + C3964 + C3963) * C48905 +
             (C3962 + C3961 + C3960 + C3959) * C118) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                 C7763 +
             (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                 C7757 +
             (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
             C11824 * C7765 + C11825 * C49194) *
                C49162 +
            ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
             C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
             C13287 * C49194) *
                C49004) *
               C721 -
           (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
             (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
             (C47888 * C881 + C48810 * C886 + C47907 * C880 + C49139 * C885) *
                 C7757 +
             (C47888 * C871 + C48810 * C876 + C47907 * C870 + C49139 * C875) *
                 C7763) *
                C49004 +
            (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 +
             C13503 * C7764 + (C12941 + C12940) * C7757 +
             (C12939 + C12938) * C7763) *
                C49162) *
               C49191) *
              C229 +
          (((C13482 * C7763 + C13483 * C7757 + C13286 * C7764 + C13287 * C7758 +
             (C11997 + C11996) * C7765 + (C11995 + C11994) * C49194) *
                C49162 +
            ((C13511 + C13510) * C7763 + (C13509 + C13508) * C7757 +
             (C13507 + C13506) * C7764 + (C13505 + C13504) * C7758 +
             (C47907 * C9784 + C49139 * C9786 + C47888 * C10048 +
              C48810 * C10049) *
                 C7765 +
             (C47907 * C9787 + C49139 * C9790 + C47888 * C10050 +
              C48810 * C10051) *
                 C49194) *
                C49004) *
               C49191 -
           (((C11994 + C11995) * C49194 + (C11996 + C11997) * C7765 +
             C13500 * C7758 + C13501 * C7764 + C13502 * C7757 +
             C13503 * C7763) *
                C49004 +
            ((C11453 + C11452) * C49194 + (C11451 + C11450) * C7765 +
             (C11449 + C11448) * C7758 + (C11447 + C11446) * C7764 +
             (C11445 + C11444) * C7757 + (C11443 + C11442) * C7763) *
                C49162) *
               C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49198 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49198 * C143) *
                C48905) *
               C49162 +
           ((C5261 + C5262 + C5263 + C5264) * C118 +
            (C5265 + C5266 + C5267 + C5268) * C48905) *
               C49004) *
              C867 -
          (((C6009 + C6010 + C6011 + C6012) * C48905 +
            (C6013 + C6014 + C6015 + C6016) * C118) *
               C49004 +
           ((C5268 + C5267 + C5266 + C5265) * C48905 +
            (C5264 + C5263 + C5262 + C5261) * C118) *
               C49162) *
              C868 +
          (((C6016 + C6015 + C6014 + C6013) * C118 +
            (C6012 + C6011 + C6010 + C6009) * C48905) *
               C49162 +
           ((C3790 * C2729 + C3784 * C2736 + C3791 * C2728 + C3785 * C2735 +
             C3792 * C2727 + C3786 * C2734 + C3793 * C2730 + C49198 * C2737) *
                C118 +
            (C3790 * C2733 + C3784 * C2741 + C3791 * C2732 + C3785 * C2740 +
             C3792 * C2731 + C3786 * C2739 + C3793 * C2738 + C49198 * C2742) *
                C48905) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49139 * C126 + C47888 * C120 + C48810 * C127) *
                C7763 +
            (C47907 * C131 + C49139 * C140 + C47888 * C132 + C48810 * C141) *
                C7757 +
            (C11442 + C11443) * C7764 + (C11444 + C11445) * C7758 +
            C11824 * C7765 + C11825 * C49194) *
               C49162 +
           ((C12938 + C12939) * C7763 + (C12940 + C12941) * C7757 +
            C13482 * C7764 + C13483 * C7758 + C13286 * C7765 +
            C13287 * C49194) *
               C49004) *
              C867 -
          (((C13504 + C13505) * C49194 + (C13506 + C13507) * C7765 +
            (C13508 + C13509) * C7758 + (C13510 + C13511) * C7764 +
            (C14054 + C14055) * C7757 + (C14056 + C14057) * C7763) *
               C49004 +
           (C13500 * C49194 + C13501 * C7765 + C13502 * C7758 + C13503 * C7764 +
            (C12941 + C12940) * C7757 + (C12939 + C12938) * C7763) *
               C49162) *
              C868 +
          (((C14057 + C14056) * C7763 + (C14055 + C14054) * C7757 +
            (C13511 + C13510) * C7764 + (C13509 + C13508) * C7758 +
            (C13507 + C13506) * C7765 + (C13505 + C13504) * C49194) *
               C49162 +
           ((C47907 * C2729 + C49139 * C2736 + C47888 * C2728 +
             C48810 * C2735) *
                C7763 +
            (C47907 * C2733 + C49139 * C2741 + C47888 * C2732 +
             C48810 * C2740) *
                C7757 +
            (C47907 * C3217 + C49139 * C3220 + C47888 * C3218 +
             C48810 * C3221) *
                C7764 +
            (C47907 * C3223 + C49139 * C3226 + C47888 * C3224 +
             C48810 * C3227) *
                C7758 +
            (C47907 * C10234 + C49139 * C10237 + C47888 * C10235 +
             C48810 * C10238) *
                C7765 +
            (C47907 * C10236 + C49139 * C10240 + C47888 * C10239 +
             C48810 * C10241) *
                C49194) *
               C49004) *
              C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C48905) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C48905 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C48905) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                     C1008 * C121 + C49181 * C128) *
                        C1009 +
                    (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                     C1008 * C133 + C49181 * C142) *
                        C49229 +
                    (C1006 * C237 + C1000 * C248 + C1007 * C236 + C1001 * C247 +
                     C1008 * C235 + C49181 * C246) *
                        C1010 +
                    (C1006 * C243 + C1000 * C255 + C1007 * C242 + C1001 * C254 +
                     C1008 * C241 + C49181 * C253) *
                        C49217 +
                    (C1006 * C517 + C1000 * C522 + C1007 * C518 + C1001 * C523 +
                     C1008 * C519 + C49181 * C524) *
                        C1011 +
                    (C1006 * C527 + C1000 * C532 + C1007 * C528 + C1001 * C533 +
                     C1008 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C1008 * C530 + C49181 * C535 + C1007 * C529 +
                     C1001 * C534 + C1006 * C528 + C1000 * C533) *
                        C49194 +
                    (C1008 * C520 + C49181 * C525 + C1007 * C519 +
                     C1001 * C524 + C1006 * C518 + C1000 * C523) *
                        C1011 +
                    (C1008 * C240 + C49181 * C252 + C1007 * C241 +
                     C1001 * C253 + C1006 * C242 + C1000 * C254) *
                        C49217 +
                    (C1008 * C234 + C49181 * C245 + C1007 * C235 +
                     C1001 * C246 + C1006 * C236 + C1000 * C247) *
                        C1010 +
                    (C1008 * C134 + C49181 * C143 + C1007 * C133 +
                     C1001 * C142 + C1006 * C132 + C1000 * C141) *
                        C49229 +
                    (C1008 * C122 + C49181 * C129 + C1007 * C121 +
                     C1001 * C128 + C1006 * C120 + C1000 * C127) *
                        C1009) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                     C1008 * C123 + C49181 * C130) *
                        C1009 +
                    (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                     C1008 * C135 + C49181 * C144) *
                        C49229 +
                    (C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
                     C1008 * C233 + C49181 * C244) *
                        C1010 +
                    (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
                     C1008 * C239 + C49181 * C251) *
                        C49217 +
                    (C1006 * C519 + C1000 * C524 + C1007 * C520 + C1001 * C525 +
                     C1008 * C521 + C49181 * C526) *
                        C1011 +
                    (C1006 * C529 + C1000 * C534 + C1007 * C530 + C1001 * C535 +
                     C1008 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C7760 * C119 + C49226 * C126 + C7761 * C120 +
                     C49213 * C127 + C7762 * C121 + C49181 * C128) *
                        C7763 +
                    (C7760 * C131 + C49226 * C140 + C7761 * C132 +
                     C49213 * C141 + C7762 * C133 + C49181 * C142) *
                        C7757 +
                    (C7760 * C237 + C49226 * C248 + C7761 * C236 +
                     C49213 * C247 + C7762 * C235 + C49181 * C246) *
                        C7764 +
                    (C7760 * C243 + C49226 * C255 + C7761 * C242 +
                     C49213 * C254 + C7762 * C241 + C49181 * C253) *
                        C7758 +
                    (C7760 * C517 + C49226 * C522 + C7761 * C518 +
                     C49213 * C523 + C7762 * C519 + C49181 * C524) *
                        C7765 +
                    (C7760 * C527 + C49226 * C532 + C7761 * C528 +
                     C49213 * C533 + C7762 * C529 + C49181 * C534) *
                        C49194) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C7762 * C530 + C49181 * C535 + C7761 * C529 +
                     C49213 * C534 + C7760 * C528 + C49226 * C533) *
                        C49194 +
                    (C7762 * C520 + C49181 * C525 + C7761 * C519 +
                     C49213 * C524 + C7760 * C518 + C49226 * C523) *
                        C7765 +
                    (C7762 * C240 + C49181 * C252 + C7761 * C241 +
                     C49213 * C253 + C7760 * C242 + C49226 * C254) *
                        C7758 +
                    (C7762 * C234 + C49181 * C245 + C7761 * C235 +
                     C49213 * C246 + C7760 * C236 + C49226 * C247) *
                        C7764 +
                    (C7762 * C134 + C49181 * C143 + C7761 * C133 +
                     C49213 * C142 + C7760 * C132 + C49226 * C141) *
                        C7757 +
                    (C7762 * C122 + C49181 * C129 + C7761 * C121 +
                     C49213 * C128 + C7760 * C120 + C49226 * C127) *
                        C7763) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C7760 * C121 + C49226 * C128 + C7761 * C122 +
                     C49213 * C129 + C7762 * C123 + C49181 * C130) *
                        C7763 +
                    (C7760 * C133 + C49226 * C142 + C7761 * C134 +
                     C49213 * C143 + C7762 * C135 + C49181 * C144) *
                        C7757 +
                    (C7760 * C235 + C49226 * C246 + C7761 * C234 +
                     C49213 * C245 + C7762 * C233 + C49181 * C244) *
                        C7764 +
                    (C7760 * C241 + C49226 * C253 + C7761 * C240 +
                     C49213 * C252 + C7762 * C239 + C49181 * C251) *
                        C7758 +
                    (C7760 * C519 + C49226 * C524 + C7761 * C520 +
                     C49213 * C525 + C7762 * C521 + C49181 * C526) *
                        C7765 +
                    (C7760 * C529 + C49226 * C534 + C7761 * C530 +
                     C49213 * C535 + C7762 * C531 + C49181 * C536) *
                        C49194) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C9060 * C119 + C48800 * C126) * C9061 +
                    (C9060 * C131 + C48800 * C140) * C9055 +
                    (C9060 * C237 + C48800 * C248) * C9062 +
                    (C9060 * C243 + C48800 * C255) * C9056 +
                    (C9060 * C517 + C48800 * C522) * C9063 +
                    (C9060 * C527 + C48800 * C532) * C9057 +
                    (C9060 * C1160 + C48800 * C1167) * C9064 +
                    (C9060 * C1164 + C48800 * C1172) * C9058 +
                    (C9060 * C1664 + C48800 * C1667) * C9065 +
                    (C9060 * C1670 + C48800 * C1673) * C9059) *
                       C48917 * C48888 * C48871 * C110 -
                   ((C9060 * C1671 + C48800 * C1674) * C9059 +
                    (C9060 * C1665 + C48800 * C1668) * C9065 +
                    (C9060 * C1163 + C48800 * C1171) * C9058 +
                    (C9060 * C1159 + C48800 * C1166) * C9064 +
                    (C9060 * C528 + C48800 * C533) * C9057 +
                    (C9060 * C518 + C48800 * C523) * C9063 +
                    (C9060 * C242 + C48800 * C254) * C9056 +
                    (C9060 * C236 + C48800 * C247) * C9062 +
                    (C9060 * C132 + C48800 * C141) * C9055 +
                    (C9060 * C120 + C48800 * C127) * C9061) *
                       C48917 * C48888 * C48871 * C111 +
                   ((C9060 * C121 + C48800 * C128) * C9061 +
                    (C9060 * C133 + C48800 * C142) * C9055 +
                    (C9060 * C235 + C48800 * C246) * C9062 +
                    (C9060 * C241 + C48800 * C253) * C9056 +
                    (C9060 * C519 + C48800 * C524) * C9063 +
                    (C9060 * C529 + C48800 * C534) * C9057 +
                    (C9060 * C1158 + C48800 * C1165) * C9064 +
                    (C9060 * C1162 + C48800 * C1170) * C9058 +
                    (C9060 * C1666 + C48800 * C1669) * C9065 +
                    (C9060 * C1672 + C48800 * C1675) * C9059) *
                       C48917 * C48888 * C48871 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C229 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C229 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C229 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C231 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C229 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C231 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C229) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C339 -
           ((C1008 * C1396 + C49181 * C1404 + C1007 * C1397 + C1001 * C1405 +
             C1006 * C1398 + C1000 * C1406) *
                C49194 +
            (C1008 * C1392 + C49181 * C1399 + C1007 * C1393 + C1001 * C1400 +
             C1006 * C1394 + C1000 * C1401) *
                C1011 +
            (C1008 * C631 + C49181 * C636 + C1007 * C630 + C1001 * C635 +
             C1006 * C629 + C1000 * C634) *
                C49217 +
            (C1008 * C621 + C49181 * C626 + C1007 * C620 + C1001 * C625 +
             C1006 * C619 + C1000 * C624) *
                C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C339 -
           ((C7762 * C1396 + C49181 * C1404 + C7761 * C1397 + C49213 * C1405 +
             C7760 * C1398 + C49226 * C1406) *
                C49194 +
            (C7762 * C1392 + C49181 * C1399 + C7761 * C1393 + C49213 * C1400 +
             C7760 * C1394 + C49226 * C1401) *
                C7765 +
            (C7762 * C631 + C49181 * C636 + C7761 * C630 + C49213 * C635 +
             C7760 * C629 + C49226 * C634) *
                C7758 +
            (C7762 * C621 + C49181 * C626 + C7761 * C620 + C49213 * C625 +
             C7760 * C619 + C49226 * C624) *
                C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           ((C9060 * C9288 + C48800 * C9292) * C9059 +
            (C9060 * C9286 + C48800 * C9289) * C9065 +
            (C9060 * C1850 + C48800 * C1853) * C9058 +
            (C9060 * C1844 + C48800 * C1847) * C9064 +
            (C9060 * C1398 + C48800 * C1406) * C9057 +
            (C9060 * C1394 + C48800 * C1401) * C9063 +
            (C9060 * C629 + C48800 * C634) * C9056 +
            (C9060 * C619 + C48800 * C624) * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C231 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C339) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C48888 * C447 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C48905) *
               C48917 * C48888 * C49189 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            (C1229 + C1230 + C1231) * C1011 +
            (C1232 + C1233 + C1234) * C49194) *
               C48917 * C48888 * C447 -
           ((C1008 * C1162 + C49181 * C1170 + C1007 * C1163 + C1001 * C1171 +
             C1006 * C1164 + C1000 * C1172) *
                C49194 +
            (C1008 * C1158 + C49181 * C1165 + C1007 * C1159 + C1001 * C1166 +
             C1006 * C1160 + C1000 * C1167) *
                C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C1235 + C1236 + C1237) * C1009 + (C1238 + C1239 + C1240) * C49229 +
            (C1241 + C1242 + C1243) * C1010 + (C1244 + C1245 + C1246) * C49217 +
            (C1006 * C1159 + C1000 * C1166 + C1007 * C1158 + C1001 * C1165 +
             C1008 * C1161 + C49181 * C1168) *
                C1011 +
            (C1006 * C1163 + C1000 * C1171 + C1007 * C1162 + C1001 * C1170 +
             C1008 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            (C7967 + C7968 + C7969) * C7765 +
            (C7970 + C7971 + C7972) * C49194) *
               C48917 * C48888 * C447 -
           ((C7762 * C1162 + C49181 * C1170 + C7761 * C1163 + C49213 * C1171 +
             C7760 * C1164 + C49226 * C1172) *
                C49194 +
            (C7762 * C1158 + C49181 * C1165 + C7761 * C1159 + C49213 * C1166 +
             C7760 * C1160 + C49226 * C1167) *
                C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C48888 * C49189) *
              C449 +
          (((C7973 + C7974 + C7975) * C7763 + (C7976 + C7977 + C7978) * C7757 +
            (C7979 + C7980 + C7981) * C7764 + (C7982 + C7983 + C7984) * C7758 +
            (C7760 * C1159 + C49226 * C1166 + C7761 * C1158 + C49213 * C1165 +
             C7762 * C1161 + C49181 * C1168) *
                C7765 +
            (C7760 * C1163 + C49226 * C1171 + C7761 * C1162 + C49213 * C1170 +
             C7762 * C1169 + C49181 * C1173) *
                C49194) *
               C48917 * C48888 * C49189 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C48888 * C447 -
           ((C9060 * C9150 + C48800 * C9154) * C9059 +
            (C9060 * C9148 + C48800 * C9151) * C9065 + C9196 * C9058 +
            C9195 * C9064 + C9194 * C9057 + C9193 * C9063 + C9192 * C9056 +
            C9191 * C9062 + C9190 * C9055 + C9189 * C9061) *
               C48917 * C48888 * C49189) *
              C449 +
          ((C9197 * C9061 + C9198 * C9055 + C9199 * C9062 + C9200 * C9056 +
            C9201 * C9063 + C9202 * C9057 + C9203 * C9064 + C9204 * C9058 +
            (C9060 * C9149 + C48800 * C9152) * C9065 +
            (C9060 * C9153 + C48800 * C9155) * C9059) *
               C48917 * C48888 * C49189 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C48888 * C447) *
              C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C48888 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C48905 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48917 * C48888 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C48905) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C48888 * C513 -
          ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
           (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
           (C1228 + C1227 + C1226) * C49229 + (C1225 + C1224 + C1223) * C1009) *
              C48917 * C48888 * C514 +
          (C1691 * C1009 + C1692 * C49229 + (C1698 + C1697 + C1696) * C1010 +
           (C1695 + C1694 + C1693) * C49217 +
           (C1006 * C1664 + C1000 * C1667 + C1007 * C1665 + C1001 * C1668 +
            C1008 * C1666 + C49181 * C1669) *
               C1011 +
           (C1006 * C1670 + C1000 * C1673 + C1007 * C1671 + C1001 * C1674 +
            C1008 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C48888 * C513 -
          ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
           (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
           (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
              C48917 * C48888 * C514 +
          (C8401 * C7763 + C8402 * C7757 + (C8408 + C8407 + C8406) * C7764 +
           (C8405 + C8404 + C8403) * C7758 +
           (C7760 * C1664 + C49226 * C1667 + C7761 * C1665 + C49213 * C1668 +
            C7762 * C1666 + C49181 * C1669) *
               C7765 +
           (C7760 * C1670 + C49226 * C1673 + C7761 * C1671 + C49213 * C1674 +
            C7762 * C1672 + C49181 * C1675) *
               C49194) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C48888 * C513 -
          (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
           C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
           C9190 * C9055 + C9189 * C9061) *
              C48917 * C48888 * C514 +
          (C9191 * C9061 + C9192 * C9055 + C9193 * C9062 + C9194 * C9056 +
           C9195 * C9063 + C9196 * C9057 + C9448 * C9064 + C9447 * C9058 +
           (C9060 * C9438 + C48800 * C9439) * C9065 +
           (C9060 * C9440 + C48800 * C9441) * C9059) *
              C48917 * C48888 * C515) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C447 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C339 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C447 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C339 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C447 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C339 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C447 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C339) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C48905 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
             C1008 * C342 + C49181 * C353) *
                C1009 +
            (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
             C1008 * C348 + C49181 * C360) *
                C49229 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49181 * C627) *
                C1010 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49181 * C637) *
                C49217 +
            (C1006 * C1393 + C1000 * C1400 + C1007 * C1392 + C1001 * C1399 +
             C1008 * C1395 + C49181 * C1402) *
                C1011 +
            (C1006 * C1397 + C1000 * C1405 + C1007 * C1396 + C1001 * C1404 +
             C1008 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C1246 + C1245 + C1244) * C49194 + (C1243 + C1242 + C1241) * C1011 +
            (C1240 + C1239 + C1238) * C49217 + (C1237 + C1236 + C1235) * C1010 +
            (C1008 * C134 + C49181 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49229 +
            (C1008 * C122 + C49181 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C1009) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C7760 * C344 + C49226 * C355 + C7761 * C343 + C49213 * C354 +
             C7762 * C342 + C49181 * C353) *
                C7763 +
            (C7760 * C350 + C49226 * C362 + C7761 * C349 + C49213 * C361 +
             C7762 * C348 + C49181 * C360) *
                C7757 +
            (C7760 * C620 + C49226 * C625 + C7761 * C621 + C49213 * C626 +
             C7762 * C622 + C49181 * C627) *
                C7764 +
            (C7760 * C630 + C49226 * C635 + C7761 * C631 + C49213 * C636 +
             C7762 * C632 + C49181 * C637) *
                C7758 +
            (C7760 * C1393 + C49226 * C1400 + C7761 * C1392 + C49213 * C1399 +
             C7762 * C1395 + C49181 * C1402) *
                C7765 +
            (C7760 * C1397 + C49226 * C1405 + C7761 * C1396 + C49213 * C1404 +
             C7762 * C1403 + C49181 * C1407) *
                C49194) *
               C48917 * C49191 -
           ((C7984 + C7983 + C7982) * C49194 + (C7981 + C7980 + C7979) * C7765 +
            (C7978 + C7977 + C7976) * C7758 + (C7975 + C7974 + C7973) * C7764 +
            (C7762 * C134 + C49181 * C143 + C7761 * C133 + C49213 * C142 +
             C7760 * C132 + C49226 * C141) *
                C7757 +
            (C7762 * C122 + C49181 * C129 + C7761 * C121 + C49213 * C128 +
             C7760 * C120 + C49226 * C127) *
                C7763) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C48871 * C449 +
          (((C9060 * C344 + C48800 * C355) * C9061 +
            (C9060 * C350 + C48800 * C362) * C9055 +
            (C9060 * C620 + C48800 * C625) * C9062 +
            (C9060 * C630 + C48800 * C635) * C9056 +
            (C9060 * C1393 + C48800 * C1400) * C9063 +
            (C9060 * C1397 + C48800 * C1405) * C9057 +
            (C9060 * C1845 + C48800 * C1848) * C9064 +
            (C9060 * C1851 + C48800 * C1854) * C9058 +
            (C9060 * C9287 + C48800 * C9290) * C9065 +
            (C9060 * C9291 + C48800 * C9293) * C9059) *
               C48917 * C49191 -
           (C9204 * C9059 + C9203 * C9065 + C9202 * C9058 + C9201 * C9064 +
            C9200 * C9057 + C9199 * C9063 + C9198 * C9056 + C9197 * C9062 +
            (C9060 * C132 + C48800 * C141) * C9055 +
            (C9060 * C120 + C48800 * C127) * C9061) *
               C48917 * C721) *
              C48871 * C49187)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C48905) *
               C48917 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C48905 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48917 * C49191) *
              C229 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C48905) *
               C48917 * C49191 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C48905 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49181 * C128) *
                C1009 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49181 * C142) *
                C49229 +
            (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
            C1691 * C1011 + C1692 * C49194) *
               C48917 * C721 -
           ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
            (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
            (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49229 +
            (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C1009) *
               C48917 * C49191) *
              C229 +
          (((C1892 + C1891 + C1890) * C1009 + (C1889 + C1888 + C1887) * C49229 +
            (C1886 + C1885 + C1884) * C1010 + (C1883 + C1882 + C1881) * C49217 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49181 * C1849) *
                C1011 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C1693 + C1694 + C1695) * C49194 + (C1696 + C1697 + C1698) * C1011 +
            (C1234 + C1233 + C1232) * C49217 + (C1231 + C1230 + C1229) * C1010 +
            (C1228 + C1227 + C1226) * C49229 +
            (C1225 + C1224 + C1223) * C1009) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
             C7762 * C121 + C49181 * C128) *
                C7763 +
            (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
             C7762 * C133 + C49181 * C142) *
                C7757 +
            (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
            C8401 * C7765 + C8402 * C49194) *
               C48917 * C721 -
           ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
            (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
            (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
             C7760 * C351 + C49226 * C363) *
                C7757 +
            (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
             C7760 * C345 + C49226 * C356) *
                C7763) *
               C48917 * C49191) *
              C229 +
          (((C8590 + C8589 + C8588) * C7763 + (C8587 + C8586 + C8585) * C7757 +
            (C8584 + C8583 + C8582) * C7764 + (C8581 + C8580 + C8579) * C7758 +
            (C7760 * C1844 + C49226 * C1847 + C7761 * C1845 + C49213 * C1848 +
             C7762 * C1846 + C49181 * C1849) *
                C7765 +
            (C7760 * C1850 + C49226 * C1853 + C7761 * C1851 + C49213 * C1854 +
             C7762 * C1852 + C49181 * C1855) *
                C49194) *
               C48917 * C49191 -
           ((C8403 + C8404 + C8405) * C49194 + (C8406 + C8407 + C8408) * C7765 +
            (C7972 + C7971 + C7970) * C7758 + (C7969 + C7968 + C7967) * C7764 +
            (C7966 + C7965 + C7964) * C7757 + (C7963 + C7962 + C7961) * C7763) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48800 * C126) * C9061 +
            (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
            C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
            C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
               C48917 * C721 -
           (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
            C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
            (C9060 * C351 + C48800 * C363) * C9055 +
            (C9060 * C345 + C48800 * C356) * C9061) *
               C48917 * C49191) *
              C229 +
          ((C9558 * C9061 + C9557 * C9055 + C9556 * C9062 + C9555 * C9056 +
            C9554 * C9063 + C9553 * C9057 + C9552 * C9064 + C9551 * C9058 +
            (C9060 * C9530 + C48800 * C9531) * C9065 +
            (C9060 * C9532 + C48800 * C9533) * C9059) *
               C48917 * C49191 -
           (C9447 * C9059 + C9448 * C9065 + C9196 * C9058 + C9195 * C9064 +
            C9194 * C9057 + C9193 * C9063 + C9192 * C9056 + C9191 * C9062 +
            C9190 * C9055 + C9189 * C9061) *
               C48917 * C721) *
              C49189) *
         C48837) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C48905) *
              C48917 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C48905 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48917 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C48905) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49181 * C128) *
               C1009 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49181 * C142) *
               C49229 +
           (C1223 + C1224 + C1225) * C1010 + (C1226 + C1227 + C1228) * C49217 +
           C1691 * C1011 + C1692 * C49194) *
              C48917 * C867 -
          ((C1881 + C1882 + C1883) * C49194 + (C1884 + C1885 + C1886) * C1011 +
           (C1887 + C1888 + C1889) * C49217 + (C1890 + C1891 + C1892) * C1010 +
           (C1008 * C349 + C49181 * C361 + C1007 * C350 + C1001 * C362 +
            C1006 * C351 + C1000 * C363) *
               C49229 +
           (C1008 * C343 + C49181 * C354 + C1007 * C344 + C1001 * C355 +
            C1006 * C345 + C1000 * C356) *
               C1009) *
              C48917 * C868 +
          ((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
            C1008 * C872 + C49181 * C877) *
               C1009 +
           (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
            C1008 * C882 + C49181 * C887) *
               C49229 +
           (C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
            C1008 * C2296 + C49181 * C2302) *
               C1010 +
           (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
            C1008 * C2305 + C49181 * C2314) *
               C49217 +
           (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
            C1008 * C2299 + C49181 * C2308) *
               C1011 +
           (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
            C1008 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49226 * C126 + C7761 * C120 + C49213 * C127 +
            C7762 * C121 + C49181 * C128) *
               C7763 +
           (C7760 * C131 + C49226 * C140 + C7761 * C132 + C49213 * C141 +
            C7762 * C133 + C49181 * C142) *
               C7757 +
           (C7961 + C7962 + C7963) * C7764 + (C7964 + C7965 + C7966) * C7758 +
           C8401 * C7765 + C8402 * C49194) *
              C48917 * C867 -
          ((C8579 + C8580 + C8581) * C49194 + (C8582 + C8583 + C8584) * C7765 +
           (C8585 + C8586 + C8587) * C7758 + (C8588 + C8589 + C8590) * C7764 +
           (C7762 * C349 + C49181 * C361 + C7761 * C350 + C49213 * C362 +
            C7760 * C351 + C49226 * C363) *
               C7757 +
           (C7762 * C343 + C49181 * C354 + C7761 * C344 + C49213 * C355 +
            C7760 * C345 + C49226 * C356) *
               C7763) *
              C48917 * C868 +
          ((C7760 * C870 + C49226 * C875 + C7761 * C871 + C49213 * C876 +
            C7762 * C872 + C49181 * C877) *
               C7763 +
           (C7760 * C880 + C49226 * C885 + C7761 * C881 + C49213 * C886 +
            C7762 * C882 + C49181 * C887) *
               C7757 +
           (C7760 * C2294 + C49226 * C2300 + C7761 * C2295 + C49213 * C2301 +
            C7762 * C2296 + C49181 * C2302) *
               C7764 +
           (C7760 * C2303 + C49226 * C2312 + C7761 * C2304 + C49213 * C2313 +
            C7762 * C2305 + C49181 * C2314) *
               C7758 +
           (C7760 * C2297 + C49226 * C2306 + C7761 * C2298 + C49213 * C2307 +
            C7762 * C2299 + C49181 * C2308) *
               C7765 +
           (C7760 * C2309 + C49226 * C2315 + C7761 * C2310 + C49213 * C2316 +
            C7762 * C2311 + C49181 * C2317) *
               C49194) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48800 * C126) * C9061 +
           (C9060 * C131 + C48800 * C140) * C9055 + C9189 * C9062 +
           C9190 * C9056 + C9191 * C9063 + C9192 * C9057 + C9193 * C9064 +
           C9194 * C9058 + C9195 * C9065 + C9196 * C9059) *
              C48917 * C867 -
          (C9551 * C9059 + C9552 * C9065 + C9553 * C9058 + C9554 * C9064 +
           C9555 * C9057 + C9556 * C9063 + C9557 * C9056 + C9558 * C9062 +
           (C9060 * C351 + C48800 * C363) * C9055 +
           (C9060 * C345 + C48800 * C356) * C9061) *
              C48917 * C868 +
          ((C9060 * C870 + C48800 * C875) * C9061 +
           (C9060 * C880 + C48800 * C885) * C9055 +
           (C9060 * C2294 + C48800 * C2300) * C9062 +
           (C9060 * C2303 + C48800 * C2312) * C9056 +
           (C9060 * C2297 + C48800 * C2306) * C9063 +
           (C9060 * C2309 + C48800 * C2315) * C9057 +
           (C9060 * C9784 + C48800 * C9786) * C9064 +
           (C9060 * C9787 + C48800 * C9790) * C9058 +
           (C9060 * C9785 + C48800 * C9788) * C9065 +
           (C9060 * C9789 + C48800 * C9791) * C9059) *
              C48917 * C869) *
         C48871 * C48837) /
            (p * q * std::sqrt(p + q));
}
