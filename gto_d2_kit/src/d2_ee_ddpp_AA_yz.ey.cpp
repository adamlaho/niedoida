/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47859 = ae * be;
    const double C47858 = ae + be;
    const double C47857 = 0 * be;
    const double C47856 = yA - yB;
    const double C47876 = 0 * be;
    const double C47875 = zA - zB;
    const double C47916 = 0 * ae;
    const double C47911 = 0 * be;
    const double C47910 = 0 * be;
    const double C47961 = 0 * be;
    const double C48003 = 0 * ae;
    const double C47998 = 0 * be;
    const double C47997 = 0 * be;
    const double C48048 = 0 * be;
    const double C48110 = std::pow(ae, 2);
    const double C48109 = zP - zQ;
    const double C48108 = yP - yQ;
    const double C48107 = p + q;
    const double C48106 = p * q;
    const double C48118 = bs[4];
    const double C48116 = xP - xQ;
    const double C48123 = bs[5];
    const double C48130 = bs[6];
    const double C48138 = bs[7];
    const double C48178 = bs[3];
    const double C48536 = bs[2];
    const double C115 = bs[0];
    const double C48876 = xA - xB;
    const double C48911 = ce + de;
    const double C48910 = ce * de;
    const double C48909 = xC - xD;
    const double C48924 = yC - yD;
    const double C48933 = zC - zD;
    const double C47860 = std::pow(C47858, 2);
    const double C47894 = 2 * C47858;
    const double C47912 = C47857 / C47858;
    const double C47861 = C47859 * C47856;
    const double C47913 = C47856 * C47857;
    const double C48974 = std::pow(C47856, 2);
    const double C49032 = C47856 * be;
    const double C49030 = C47856 * ae;
    const double C47999 = C47876 / C47858;
    const double C47877 = C47859 * C47875;
    const double C48000 = C47875 * C47876;
    const double C48991 = std::pow(C47875, 2);
    const double C49074 = C47875 * be;
    const double C49072 = C47875 * ae;
    const double C47923 = C47916 / C47858;
    const double C47918 = C47856 * C47911;
    const double C47962 = C47961 / C47858;
    const double C48010 = C48003 / C47858;
    const double C48005 = C47875 * C47998;
    const double C48049 = C48048 / C47858;
    const double C48147 = C48109 * ae;
    const double C48304 = std::pow(C48109, 2);
    const double C48112 = C48108 * C48109;
    const double C48162 = C48108 * ae;
    const double C48259 = std::pow(C48108, 2);
    const double C48111 = 2 * C48106;
    const double C48124 = std::pow(C48116, 2);
    const double C48879 = C48876 * be;
    const double C48878 = C48876 * ae;
    const double C48877 = std::pow(C48876, 2);
    const double C48921 = 2 * C48911;
    const double C49229 = std::pow(C48911, 2);
    const double C48912 = std::pow(C48909, 2);
    const double C49228 = C48909 * de;
    const double C49227 = C48909 * ce;
    const double C48946 = std::pow(C48924, 2);
    const double C49233 = C48924 * de;
    const double C49231 = C48924 * ce;
    const double C48963 = std::pow(C48933, 2);
    const double C49234 = C48933 * de;
    const double C49232 = C48933 * ce;
    const double C47862 = 2 * C47860;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C47860;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C47860;
    const double C49225 = 4 * C47860;
    const double C48891 = std::pow(C47894, -1);
    const double C49226 = C47860 * C47894;
    const double C49222 = std::pow(C47894, -2);
    const double C47921 = C47913 / C47858;
    const double C48975 = C48974 * C47859;
    const double C49235 = std::pow(C49030, 2);
    const double C48008 = C48000 / C47858;
    const double C48992 = C48991 * C47859;
    const double C49237 = std::pow(C49072, 2);
    const double C47924 = C47918 / C47858;
    const double C48011 = C48005 / C47858;
    const double C48148 = C48123 * C48147;
    const double C48151 = C48118 * C48147;
    const double C48157 = C48130 * C48147;
    const double C48179 = C48178 * C48147;
    const double C48194 = C48138 * C48147;
    const double C48114 = C48112 * C48110;
    const double C48163 = C48123 * C48162;
    const double C48166 = C48118 * C48162;
    const double C48172 = C48130 * C48162;
    const double C48211 = C48178 * C48162;
    const double C48226 = C48138 * C48162;
    const double C48113 = C48111 / C48107;
    const double C122 = (-(bs[1] * C48147 * C48111) / C48107) / C47858;
    const double C123 = (-(bs[1] * C48162 * C48111) / C48107) / C47858;
    const double C116 = -(C48116 * bs[1] * C48111) / C48107;
    const double C276 = -(C48108 * bs[1] * C48111) / C48107;
    const double C416 = -(C48109 * bs[1] * C48111) / C48107;
    const double C49215 = std::pow(C48878, 2);
    const double C48880 = C48877 * C47859;
    const double C49230 = std::pow(C48921, -1);
    const double C49264 = 2 * C49229;
    const double C48913 = C48912 * C48910;
    const double C48947 = C48946 * C48910;
    const double C48964 = C48963 * C48910;
    const double C47915 = C47857 / C47862;
    const double C47920 = C47911 / C47862;
    const double C47919 = C47910 / C47862;
    const double C48002 = C47876 / C47862;
    const double C48007 = C47998 / C47862;
    const double C48006 = C47997 / C47862;
    const double C49261 = C47858 * C49225;
    const double C49262 = 4 * C49226;
    const double C47925 = 0 - C47921;
    const double C48976 = C48975 / C47858;
    const double C48012 = 0 - C48008;
    const double C48993 = C48992 / C47858;
    const double C47928 = 0 - C47924;
    const double C48015 = 0 - C48011;
    const double C48119 = C48118 * C48114;
    const double C48126 = C48123 * C48114;
    const double C48131 = C48130 * C48114;
    const double C48140 = C48138 * C48114;
    const double C48117 = std::pow(C48113, 4);
    const double C48122 = -C48113;
    const double C48129 = std::pow(C48113, 6);
    const double C138 =
        (std::pow(-C48113, 3) * bs[3] * C48114 +
         std::pow(C48113, 4) * bs[4] * C48114 * std::pow(xP - xQ, 2)) /
        C47860;
    const double C48535 = std::pow(C48113, 2);
    const double C124 =
        (C48116 * std::pow(C48113, 2) * bs[2] * C48147) / C47858;
    const double C125 =
        (C48116 * std::pow(C48113, 2) * bs[2] * C48162) / C47858;
    const double C286 =
        (C48108 * std::pow(C48113, 2) * bs[2] * C48162) / C47858 -
        (ae * bs[1] * C48111) / (C48107 * C47858);
    const double C287 =
        (C48108 * std::pow(C48113, 2) * bs[2] * C48147) / C47858;
    const double C426 =
        (C48109 * std::pow(C48113, 2) * bs[2] * C48162) / C47858;
    const double C427 =
        (C48109 * std::pow(C48113, 2) * bs[2] * C48147) / C47858 -
        (ae * bs[1] * C48111) / (C48107 * C47858);
    const double C48881 = C48880 / C47858;
    const double C48914 = C48913 / C48911;
    const double C48948 = C48947 / C48911;
    const double C48965 = C48964 / C48911;
    const double C47929 = C47925 * ae;
    const double C48977 = -C48976;
    const double C48016 = C48012 * ae;
    const double C48994 = -C48993;
    const double C47932 = C47928 * ae;
    const double C48019 = C48015 * ae;
    const double C48120 = C48117 * C48119;
    const double C48152 = C48117 * C48151;
    const double C48167 = C48117 * C48166;
    const double C48207 = C48118 * C48117;
    const double C48125 = std::pow(C48122, 5);
    const double C48137 = std::pow(C48122, 7);
    const double C48177 = std::pow(C48122, 3);
    const double C294 = (ae * std::pow(C48113, 2) * bs[2] * C48147 +
                         C48108 * std::pow(C48122, 3) * bs[3] * C48114) /
                        C47860;
    const double C434 = (ae * std::pow(C48113, 2) * bs[2] * C48162 +
                         C48109 * std::pow(C48122, 3) * bs[3] * C48114) /
                        C47860;
    const double C48132 = C48129 * C48131;
    const double C48158 = C48129 * C48157;
    const double C48173 = C48129 * C48172;
    const double C48249 = C48130 * C48129;
    const double C48537 = C48536 * C48535;
    const double C48882 = -C48881;
    const double C48915 = -C48914;
    const double C48949 = -C48948;
    const double C48966 = -C48965;
    const double C47933 = C47929 / C47858;
    const double C48978 = std::exp(C48977);
    const double C48020 = C48016 / C47858;
    const double C48995 = std::exp(C48994);
    const double C47936 = C47932 / C47858;
    const double C48023 = C48019 / C47858;
    const double C139 = (2 * C48116 * C48120 +
                         C48116 * (C48120 + std::pow(-C48113, 5) * bs[5] *
                                                C48114 * std::pow(C48116, 2))) /
                        C47860;
    const double C293 = (ae * C48116 * std::pow(C48122, 3) * bs[3] * C48147 +
                         C48108 * C48116 * C48120) /
                        C47860;
    const double C433 = (ae * C48116 * std::pow(C48122, 3) * bs[3] * C48162 +
                         C48109 * C48116 * C48120) /
                        C47860;
    const double C48182 = C48116 * C48152;
    const double C48257 = ae * C48152;
    const double C48256 = C48108 * C48152;
    const double C48651 = C48109 * C48152;
    const double C48214 = C48116 * C48167;
    const double C48278 = ae * C48167;
    const double C48308 = C48109 * C48167;
    const double C48593 = C48108 * C48167;
    const double C48244 = C48116 * C48207;
    const double C48291 = C48108 * C48207;
    const double C48351 = C48207 * ae;
    const double C48459 = C48109 * C48207;
    const double C48543 = C48207 * C48124;
    const double C48596 = C48207 * C48259;
    const double C48653 = C48207 * C48304;
    const double C48127 = C48125 * C48126;
    const double C48149 = C48125 * C48148;
    const double C48164 = C48125 * C48163;
    const double C48209 = C48123 * C48125;
    const double C48141 = C48137 * C48140;
    const double C48196 = C48137 * C48194;
    const double C48228 = C48137 * C48226;
    const double C48180 = C48177 * C48179;
    const double C48212 = C48177 * C48211;
    const double C48246 = C48178 * C48177;
    const double C48133 = C48132 * C48124;
    const double C48136 = C48116 * C48132;
    const double C48322 = C48108 * C48132;
    const double C48353 = C48109 * C48132;
    const double C48159 = C48158 * C48124;
    const double C48193 = C48116 * C48158;
    const double C48323 = C48158 * C48259;
    const double C48378 = ae * C48158;
    const double C48377 = C48108 * C48158;
    const double C48399 = C48109 * C48158;
    const double C48174 = C48173 * C48124;
    const double C48225 = C48116 * C48173;
    const double C48401 = ae * C48173;
    const double C48428 = C48109 * C48173;
    const double C48452 = C48173 * C48304;
    const double C48700 = C48108 * C48173;
    const double C48251 = C48249 * C48124;
    const double C48366 = C48116 * C48249;
    const double C48403 = C48249 * C48259;
    const double C48430 = C48108 * C48249;
    const double C48465 = C48249 * C48304;
    const double C117 = C48537 * C48124 - (bs[1] * C48111) / C48107;
    const double C275 = C48108 * C48116 * C48537;
    const double C415 = C48109 * C48116 * C48537;
    const double C620 = C48537 * C48259 - (bs[1] * C48111) / C48107;
    const double C722 = C48109 * C48108 * C48537;
    const double C973 = C48537 * C48304 - (bs[1] * C48111) / C48107;
    const double C48883 = std::exp(C48882);
    const double C48916 = std::exp(C48915);
    const double C48950 = std::exp(C48949);
    const double C48967 = std::exp(C48966);
    const double C47937 = C47933 - C47920;
    const double C47863 = C47861 * C48978;
    const double C114 = -(2 * ae * be * (yA - yB) * C48978) / (ae + be);
    const double C49031 = C48978 / C47894;
    const double C49033 = C48978 * C49030;
    const double C49040 = C48891 * C48978;
    const double C49241 = C48978 * C49032;
    const double C49272 = C49222 * C48978;
    const double C49270 = C48978 * C49235;
    const double C48024 = C48020 - C48007;
    const double C151 = C48995 * C138;
    const double C147 = C48995 * C137;
    const double C145 = C48995 * C124;
    const double C1319 = C48995 * C294;
    const double C1317 = C48995 * C287;
    const double C47878 = C47877 * C48995;
    const double C113 = -(2 * ae * be * (zA - zB) * C48995) / (ae + be);
    const double C49073 = C48995 / C47894;
    const double C49075 = C48995 * C49072;
    const double C49082 = C48891 * C48995;
    const double C49247 = C48995 * C49074;
    const double C49275 = C49222 * C48995;
    const double C49273 = C48995 * C49237;
    const double C47940 = C47936 - C47919;
    const double C48027 = C48023 - C48006;
    const double C155 = C48995 * C139;
    const double C310 = C48995 * C293;
    const double C450 = C48995 * C433;
    const double C48547 = 2 * C48244;
    const double C48603 = C48108 * C48244;
    const double C48602 = C48244 * ae;
    const double C48659 = C48109 * C48244;
    const double C48674 = 2 * C48291;
    const double C48673 = C48291 * ae;
    const double C48728 = C48109 * C48291;
    const double C48751 = 2 * C48459;
    const double C48750 = C48459 * ae;
    const double C48237 = C48116 * C48127;
    const double C48258 = C48108 * C48127;
    const double C48279 = C48109 * C48127;
    const double C140 =
        (3 * (C48120 + C48127 * C48124) +
         C48116 * (2 * C48116 * C48127 +
                   C48116 * (C48127 +
                             std::pow(C48113, 6) * bs[6] * C48114 * C48124))) /
        C47860;
    const double C292 =
        (ae * (std::pow(C48122, 3) * bs[3] * C48147 + C48152 * C48124) +
         C48108 * (C48120 + C48127 * C48124)) /
        C47860;
    const double C432 =
        (ae * (std::pow(C48122, 3) * bs[3] * C48162 + C48167 * C48124) +
         C48109 * (C48120 + C48127 * C48124)) /
        C47860;
    const double C636 = (C48116 * C48120 + ae * C48108 * C48182 +
                         C48108 * (ae * C48182 + C48108 * C48116 * C48127)) /
                        C47860;
    const double C738 =
        (ae * (C48109 * C48182 + C48116 * C48178 * C48177 * ae) +
         C48108 * (ae * C48116 * C48167 + C48109 * C48116 * C48127)) /
        C47860;
    const double C989 = (C48116 * C48120 + ae * C48109 * C48214 +
                         C48109 * (ae * C48214 + C48109 * C48116 * C48127)) /
                        C47860;
    const double C48184 = C48149 * C48124;
    const double C48187 = C48116 * C48149;
    const double C48261 = C48149 * C48259;
    const double C48321 = ae * C48149;
    const double C48320 = C48108 * C48149;
    const double C48350 = C48109 * C48149;
    const double C48216 = C48164 * C48124;
    const double C48219 = C48116 * C48164;
    const double C48309 = C48164 * C48304;
    const double C48352 = ae * C48164;
    const double C48420 = C48109 * C48164;
    const double C48672 = C48108 * C48164;
    const double C48241 = C48209 * C48124;
    const double C48248 = C48116 * C48209;
    const double C48354 = C48209 * C48259;
    const double C48400 = C48209 * ae;
    const double C48398 = C48108 * C48209;
    const double C48427 = C48109 * C48209;
    const double C48460 = C48209 * C48304;
    const double C48142 = C48141 * C48124;
    const double C48336 = C48116 * C48141;
    const double C48379 = C48108 * C48141;
    const double C48402 = C48109 * C48141;
    const double C48197 = C48196 * C48124;
    const double C48337 = C48116 * C48196;
    const double C48381 = C48196 * C48259;
    const double C48229 = C48228 * C48124;
    const double C48444 = C48116 * C48228;
    const double C48466 = C48228 * C48304;
    const double C635 = (C48177 * C48178 * C48114 + ae * C48108 * C48180 +
                         C48108 * (ae * C48180 + C48108 * C48120)) /
                        C47860;
    const double C737 =
        (ae * (C48109 * C48180 + bs[2] * std::pow(C48113, 2) * ae) +
         C48108 * (ae * C48177 * C48178 * C48162 + C48109 * C48120)) /
        C47860;
    const double C1313 = (2 * (ae * C48180 + C48108 * C48120) +
                          ae * (C48180 + C48152 * std::pow(C48108, 2)) +
                          C48108 * (C48120 + ae * C48108 * C48152 +
                                    C48108 * (ae * C48152 + C48108 * C48127))) /
                         C47860;
    const double C126 =
        (std::pow(C48113, 2) * bs[2] * C48147 + C48180 * C48124) / C47858;
    const double C128 =
        (2 * C48116 * C48180 + C48116 * (C48180 + C48152 * C48124)) / C47858;
    const double C283 = (C48108 * (C48180 + C48152 * C48124)) / C47858;
    const double C285 = (C48108 * C48116 * C48180) / C47858;
    const double C425 =
        (C48109 * C48116 * C48180 + C48116 * bs[2] * std::pow(C48113, 2) * ae) /
        C47858;
    const double C625 =
        (std::pow(C48113, 2) * bs[2] * C48147 + C48180 * C48259) / C47858;
    const double C627 = (C48116 * C48180 + C48182 * C48259) / C47858;
    const double C727 =
        (C48109 * C48108 * C48180 + C48108 * C48537 * ae) / C47858;
    const double C978 =
        (C48535 * C48536 * C48147 + C48109 * (C48109 * C48180 + C48537 * ae) +
         C48109 * C48537 * ae) /
        C47858;
    const double C1308 =
        (2 * C48108 * C48180 + C48108 * (C48180 + C48152 * C48259)) / C47858;
    const double C988 = (C48177 * C48178 * C48114 + ae * C48109 * C48212 +
                         C48109 * (ae * C48212 + C48109 * C48120)) /
                        C47860;
    const double C127 =
        (std::pow(C48113, 2) * bs[2] * C48162 + C48212 * C48124) / C47858;
    const double C129 =
        (2 * C48116 * C48212 + C48116 * (C48212 + C48167 * C48124)) / C47858;
    const double C284 =
        (C48108 * C48116 * C48212 + C48116 * bs[2] * std::pow(C48113, 2) * ae) /
        C47858;
    const double C422 = (C48109 * (C48212 + C48167 * C48124)) / C47858;
    const double C424 = (C48109 * C48116 * C48212) / C47858;
    const double C626 =
        (C48535 * C48536 * C48162 + C48108 * (C48108 * C48212 + C48537 * ae) +
         C48108 * C48537 * ae) /
        C47858;
    const double C728 = (C48109 * (C48108 * C48212 + C48537 * ae)) / C47858;
    const double C979 = (C48535 * C48536 * C48162 + C48212 * C48304) / C47858;
    const double C981 = (C48116 * C48212 + C48214 * C48304) / C47858;
    const double C2936 =
        (2 * C48109 * C48212 + C48109 * (C48212 + C48167 * C48304)) / C47858;
    const double C1511 =
        (ae * C48212 + C48109 * C48120 +
         ae * (C48109 * C48108 * C48152 + C48108 * C48246 * ae) +
         C48108 * (ae * (C48109 * C48152 + C48246 * ae) +
                   C48108 * (ae * C48167 + C48109 * C48127))) /
        C47860;
    const double C48540 = C48116 * C48246;
    const double C48544 = C48246 + C48543;
    const double C48595 = C48108 * C48246;
    const double C48594 = C48246 * ae;
    const double C48598 = C48246 + C48596;
    const double C48652 = C48109 * C48246;
    const double C48655 = C48246 + C48653;
    const double C282 = (C48108 * (C48212 + C48167 * C48124) +
                         (bs[2] * std::pow(C48113, 2) + C48246 * C48124) * ae) /
                        C47858;
    const double C423 = (C48109 * (C48180 + C48152 * C48124) +
                         (bs[2] * std::pow(C48113, 2) + C48246 * C48124) * ae) /
                        C47858;
    const double C1307 =
        (2 * (C48108 * C48212 + C48537 * ae) +
         C48108 * (C48212 + C48108 * (C48108 * C48167 + C48246 * ae) +
                   C48108 * C48246 * ae) +
         (C48537 + C48246 * C48259) * ae) /
        C47858;
    const double C1505 =
        (C48109 * (C48212 + C48108 * (C48108 * C48167 + C48246 * ae) +
                   C48108 * C48246 * ae)) /
        C47858;
    const double C1506 = (C48109 * (C48180 + C48152 * C48259) +
                          (C48537 + C48246 * C48259) * ae) /
                         C47858;
    const double C118 =
        2 * C48116 * C48537 + C48116 * (C48537 + C48246 * C48124);
    const double C274 = C48108 * (C48537 + C48246 * C48124);
    const double C414 = C48109 * (C48537 + C48246 * C48124);
    const double C1301 =
        2 * C48108 * C48537 + C48108 * (C48537 + C48246 * C48259);
    const double C1499 = C48109 * (C48537 + C48246 * C48259);
    const double C2930 =
        2 * C48109 * C48537 + C48109 * (C48537 + C48246 * C48304);
    const double C48134 = C48127 + C48133;
    const double C48139 = 2 * C48136;
    const double C48266 = C48108 * C48136;
    const double C48283 = C48109 * C48136;
    const double C48160 = C48149 + C48159;
    const double C48195 = 2 * C48193;
    const double C48267 = C48193 * C48259;
    const double C48335 = ae * C48193;
    const double C48334 = C48108 * C48193;
    const double C48362 = C48109 * C48193;
    const double C48327 = C48149 + C48323;
    const double C48385 = 2 * C48377;
    const double C48383 = ae * C48377;
    const double C48397 = C48109 * C48377;
    const double C48175 = C48164 + C48174;
    const double C48227 = 2 * C48225;
    const double C48313 = C48225 * C48304;
    const double C48364 = ae * C48225;
    const double C48441 = C48109 * C48225;
    const double C48684 = C48108 * C48225;
    const double C48433 = ae * C48428;
    const double C48487 = 2 * C48428;
    const double C48454 = C48164 + C48452;
    const double C48252 = C48209 + C48251;
    const double C48369 = C48366 * C48259;
    const double C48443 = C48108 * C48366;
    const double C48472 = C48366 * C48304;
    const double C48408 = C48209 + C48403;
    const double C48464 = C48430 * C48304;
    const double C48468 = C48209 + C48465;
    const double C48885 = C48883 * C48878;
    const double C48884 = C48883 / C47894;
    const double C48893 = C48891 * C48883;
    const double C49218 = C48883 * C48879;
    const double C49259 = C49222 * C48883;
    const double C49253 = C48883 * C49215;
    const double C49265 = C49230 * C48916;
    const double C49263 = C48916 * C49227;
    const double C270 = -(C48916 * C49228) / C48911;
    const double C49267 = C49230 * C48950;
    const double C49266 = C48950 * C49231;
    const double C550 = -(C48950 * C49233) / C48911;
    const double C49269 = C49230 * C48967;
    const double C49268 = C48967 * C49232;
    const double C824 = -(C48967 * C49234) / C48911;
    const double C47942 = C47937 / C47894;
    const double C47941 = C47856 * C47937;
    const double C47895 = 2 * C47863;
    const double C47917 = C47863 / C47860;
    const double C1111 = ((0 * ae) / C47858 - C47863 / C47860) / (2 * C47858) +
                         (0 * ae) / C47858;
    const double C3912 =
        ((C48978 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
        C47857 / C47862;
    const double C3913 = (0 * ae) / C47858 - C47863 / C47860;
    const double C7961 = (C48978 * std::pow(C49032, 2)) / C47860 + C49031;
    const double C49034 = C49033 * C49032;
    const double C49039 = C49033 / C47862;
    const double C49239 = C49033 / C47858;
    const double C49236 = C48891 * C49033;
    const double C1110 =
        (((C48978 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
         C47857 / C47862) /
            (2 * C47858) +
        ((C47856 * ((0 * ae) / C47858 - C47863 / C47860) + C49040) * ae) /
            C47858;
    const double C49041 = C49040 * C49032;
    const double C49245 = C49030 * C49040;
    const double C49244 = 2 * C49040;
    const double C49282 = C49040 / C49225;
    const double C9179 = C49040 / C49262;
    const double C26391 = C49040 / C47894;
    const double C49278 = C49241 / C47858;
    const double C7962 = (-2 * C48891 * C49241) / C47858;
    const double C49294 = C49270 / C47860;
    const double C48029 = C48024 / C47894;
    const double C48028 = C47875 * C48024;
    const double C47982 = 2 * C47878;
    const double C48004 = C47878 / C47860;
    const double C2534 = ((0 * ae) / C47858 - C47878 / C47860) / (2 * C47858) +
                         (0 * ae) / C47858;
    const double C5042 =
        ((C48995 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
        C47876 / C47862;
    const double C5043 = (0 * ae) / C47858 - C47878 / C47860;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C311 = C113 * C275;
    const double C451 = C113 * C415;
    const double C1320 = C113 * C620;
    const double C1318 = C113 * C286;
    const double C1316 = C113 * C276;
    const double C1988 = C113 * C722;
    const double C15194 = (C48995 * std::pow(C49074, 2)) / C47860 + C49073;
    const double C49076 = C49075 * C49074;
    const double C49081 = C49075 / C47862;
    const double C49240 = C49075 / C47858;
    const double C49238 = C48891 * C49075;
    const double C5052 = C49082 * C433;
    const double C30862 = C49082 * C433;
    const double C2533 =
        (((C48995 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
         C47876 / C47862) /
            (2 * C47858) +
        ((C47875 * ((0 * ae) / C47858 - C47878 / C47860) + C49082) * ae) /
            C47858;
    const double C49083 = C49082 * C49074;
    const double C49251 = C49072 * C49082;
    const double C49250 = 2 * C49082;
    const double C49288 = C49082 / C49225;
    const double C17813 = C49082 / C49262;
    const double C36607 = C49082 / C47894;
    const double C49284 = C49247 / C47858;
    const double C15195 = (-2 * C48891 * C49247) / C47858;
    const double C49296 = C49273 / C47860;
    const double C47946 = C47940 + C47912;
    const double C48033 = C48027 + C47999;
    const double C48260 = C48257 + C48258;
    const double C48280 = C48278 + C48279;
    const double C159 = C48995 * C140;
    const double C306 = C48995 * C292;
    const double C446 = C48995 * C432;
    const double C5060 = C49082 * C432;
    const double C30870 = C49082 * C432;
    const double C1120 = C48995 * C636;
    const double C1529 = C48995 * C738;
    const double C5250 = C49082 * C738;
    const double C31060 = C49082 * C738;
    const double C2547 = C49275 * C989;
    const double C5416 = C49082 * C989;
    const double C15212 = C49275 * C989;
    const double C31226 = C49082 * C989;
    const double C48185 = C48152 + C48184;
    const double C48189 = 2 * C48187;
    const double C48265 = ae * C48187;
    const double C48264 = C48108 * C48187;
    const double C1312 = (2 * (ae * C48182 + C48108 * C48237) +
                          ae * (C48182 + C48187 * std::pow(C48108, 2)) +
                          C48108 * (C48237 + ae * C48108 * C48187 +
                                    C48108 * (ae * C48187 + C48108 * C48136))) /
                         C47860;
    const double C48658 = C48109 * C48187;
    const double C1306 =
        (2 * C48108 * C48182 + C48108 * (C48182 + C48187 * C48259)) / C47858;
    const double C48262 = C48152 + C48261;
    const double C48325 = C48321 + C48322;
    const double C48326 = 2 * C48320;
    const double C48324 = ae * C48320;
    const double C48727 = C48109 * C48320;
    const double C48355 = C48350 + C48351;
    const double C48217 = C48167 + C48216;
    const double C48221 = 2 * C48219;
    const double C48282 = ae * C48219;
    const double C48312 = C48109 * C48219;
    const double C1510 =
        (ae * C48214 + C48109 * C48237 +
         ae * (C48109 * C48108 * C48187 + C48108 * C48244 * ae) +
         C48108 * (ae * (C48109 * C48187 + C48244 * ae) +
                   C48108 * (ae * C48219 + C48109 * C48136))) /
        C47860;
    const double C48601 = C48108 * C48219;
    const double C1503 =
        (C48109 * (C48214 + C48108 * (C48108 * C48219 + C48244 * ae) +
                   C48108 * C48244 * ae)) /
        C47858;
    const double C2934 =
        (2 * C48109 * C48214 + C48109 * (C48214 + C48219 * C48304)) / C47858;
    const double C48310 = C48167 + C48309;
    const double C48356 = C48352 + C48353;
    const double C48422 = ae * C48420;
    const double C48477 = 2 * C48420;
    const double C48676 = C48672 + C48351;
    const double C48242 = C48207 + C48241;
    const double C48250 = 2 * C48248;
    const double C48294 = C48108 * C48248;
    const double C48363 = C48248 * ae;
    const double C48471 = C48109 * C48248;
    const double C48604 = C48248 * C48259;
    const double C48660 = C48248 * C48304;
    const double C48357 = C48207 + C48354;
    const double C48405 = C48399 + C48400;
    const double C48704 = C48700 + C48400;
    const double C48407 = 2 * C48398;
    const double C48404 = C48398 * ae;
    const double C48463 = C48109 * C48398;
    const double C48729 = C48398 * C48304;
    const double C48432 = C48427 * ae;
    const double C48485 = 2 * C48427;
    const double C48461 = C48207 + C48460;
    const double C48143 = C48132 + C48142;
    const double C48339 = C48108 * C48336;
    const double C48365 = C48109 * C48336;
    const double C48384 = C48378 + C48379;
    const double C48406 = C48401 + C48402;
    const double C48198 = C48158 + C48197;
    const double C48341 = C48337 * C48259;
    const double C48386 = C48158 + C48381;
    const double C48230 = C48173 + C48229;
    const double C48473 = C48444 * C48304;
    const double C48469 = C48173 + C48466;
    const double C1323 = C48995 * C635;
    const double C1987 = C48995 * C737;
    const double C6507 = C49082 * C737;
    const double C32332 = C49082 * C737;
    const double C1819 = C48995 * C1313;
    const double C149 = C48995 * C126;
    const double C153 = C48995 * C128;
    const double C308 = C48995 * C283;
    const double C312 = C48995 * C285;
    const double C452 = C48995 * C425;
    const double C5048 = C49082 * C425;
    const double C30858 = C49082 * C425;
    const double C1321 = C48995 * C625;
    const double C1118 = C48995 * C627;
    const double C1989 = C48995 * C727;
    const double C6503 = C49082 * C727;
    const double C32328 = C49082 * C727;
    const double C1821 = C48995 * C1308;
    const double C150 = C113 * C127;
    const double C154 = C113 * C129;
    const double C309 = C113 * C284;
    const double C445 = C113 * C422;
    const double C449 = C113 * C424;
    const double C1322 = C113 * C626;
    const double C1986 = C113 * C728;
    const double C1983 = C48995 * C1511;
    const double C7101 = C49082 * C1511;
    const double C32340 = C49082 * C1511;
    const double C628 =
        (C48116 * C48212 + C48108 * (C48108 * C48214 + C48540 * ae) +
         C48108 * C48540 * ae) /
        C47858;
    const double C729 =
        (C48109 * C48108 * C48182 + C48108 * C48540 * ae) / C47858;
    const double C730 = (C48109 * (C48108 * C48214 + C48540 * ae)) / C47858;
    const double C980 =
        (C48116 * C48180 + C48109 * (C48109 * C48182 + C48540 * ae) +
         C48109 * C48540 * ae) /
        C47858;
    const double C1305 =
        (2 * (C48108 * C48214 + C48540 * ae) +
         C48108 * (C48214 + C48108 * (C48108 * C48219 + C48244 * ae) +
                   C48108 * C48244 * ae) +
         (C48540 + C48244 * C48259) * ae) /
        C47858;
    const double C1504 = (C48109 * (C48182 + C48187 * C48259) +
                          (C48540 + C48244 * C48259) * ae) /
                         C47858;
    const double C2935 =
        (2 * (C48109 * C48182 + C48540 * ae) +
         C48109 * (C48182 + C48109 * (C48109 * C48187 + C48602) +
                   C48109 * C48244 * ae) +
         (C48540 + C48244 * C48304) * ae) /
        C47858;
    const double C621 = C48116 * C48537 + C48540 * C48259;
    const double C723 = C48109 * C48108 * C48540;
    const double C974 = C48116 * C48537 + C48540 * C48304;
    const double C1300 =
        2 * C48108 * C48540 + C48108 * (C48540 + C48244 * C48259);
    const double C1498 = C48109 * (C48540 + C48244 * C48259);
    const double C2397 = C48108 * C48540 + C48603 * C48304;
    const double C2929 =
        2 * C48109 * C48540 + C48109 * (C48540 + C48244 * C48304);
    const double C119 = 3 * (C48537 + C48246 * C48124) +
                        C48116 * (2 * C48540 + C48116 * C48544);
    const double C273 = C48108 * (2 * C48540 + C48116 * C48544);
    const double C413 = C48109 * (2 * C48540 + C48116 * C48544);
    const double C622 = C48537 + C48246 * C48124 + C48544 * C48259;
    const double C724 = C48109 * C48108 * C48544;
    const double C975 = C48537 + C48246 * C48124 + C48544 * C48304;
    const double C2401 =
        (C48108 * C48180 + C48109 * (C48109 * C48256 + C48595 * ae) +
         C48109 * C48595 * ae) /
        C47858;
    const double C3385 =
        (2 * (C48109 * C48256 + C48595 * ae) +
         C48109 * (C48256 + C48109 * (C48109 * C48320 + C48291 * ae) +
                   C48109 * C48291 * ae) +
         (C48595 + C48291 * C48304) * ae) /
        C47858;
    const double C2395 = C48108 * C48537 + C48595 * C48304;
    const double C3382 =
        2 * C48109 * C48595 + C48109 * (C48595 + C48291 * C48304);
    const double C48597 = C48593 + C48594;
    const double C48654 = C48651 + C48594;
    const double C2937 =
        (2 * (C48109 * C48180 + C48537 * ae) +
         C48109 * (C48180 + C48109 * (C48109 * C48152 + C48594) +
                   C48109 * C48246 * ae) +
         (C48537 + C48246 * C48304) * ae) /
        C47858;
    const double C1805 = 3 * (C48537 + C48246 * C48259) +
                         C48108 * (2 * C48595 + C48108 * C48598);
    const double C1969 = C48109 * (2 * C48595 + C48108 * C48598);
    const double C2396 = C48537 + C48246 * C48259 + C48598 * C48304;
    const double C3796 = 3 * (C48537 + C48246 * C48304) +
                         C48109 * (2 * C48652 + C48109 * C48655);
    const double C305 = C113 * C282;
    const double C448 = C48995 * C423;
    const double C5056 = C49082 * C423;
    const double C30866 = C49082 * C423;
    const double C1818 = C113 * C1307;
    const double C1982 = C113 * C1505;
    const double C1985 = C48995 * C1506;
    const double C7105 = C49082 * C1506;
    const double C32336 = C49082 * C1506;
    const double C152 = C113 * C118;
    const double C307 = C113 * C274;
    const double C447 = C113 * C414;
    const double C1820 = C113 * C1301;
    const double C1984 = C113 * C1499;
    const double C141 =
        (4 * (2 * C48116 * C48127 + C48116 * C48134) +
         C48116 * (3 * C48134 +
                   C48116 * (2 * C48116 * C48132 +
                             C48116 * (C48132 + std::pow(C48122, 7) * bs[7] *
                                                    C48114 * C48124)))) /
        C47860;
    const double C291 =
        (ae * (2 * C48116 * C48152 + C48116 * (C48152 + C48149 * C48124)) +
         C48108 * (2 * C48116 * C48127 + C48116 * C48134)) /
        C47860;
    const double C431 =
        (ae * (2 * C48116 * C48167 + C48116 * (C48167 + C48164 * C48124)) +
         C48109 * (2 * C48116 * C48127 + C48116 * C48134)) /
        C47860;
    const double C48188 = C48116 * C48160;
    const double C48192 = 3 * C48160;
    const double C48272 = ae * C48160;
    const double C48271 = C48108 * C48160;
    const double C48665 = C48109 * C48160;
    const double C48269 = C48187 + C48267;
    const double C48340 = 2 * C48334;
    const double C48338 = ae * C48334;
    const double C48741 = C48109 * C48334;
    const double C48330 = C48108 * C48327;
    const double C48380 = 3 * C48327;
    const double C48376 = ae * C48327;
    const double C48734 = C48109 * C48327;
    const double C48387 = C48132 + C48383;
    const double C48220 = C48116 * C48175;
    const double C48224 = 3 * C48175;
    const double C48286 = ae * C48175;
    const double C48316 = C48109 * C48175;
    const double C48609 = C48108 * C48175;
    const double C48314 = C48219 + C48313;
    const double C48445 = ae * C48441;
    const double C48481 = 2 * C48441;
    const double C48435 = C48132 + C48433;
    const double C48455 = ae * C48454;
    const double C48478 = C48109 * C48454;
    const double C48492 = 3 * C48454;
    const double C48253 = C48116 * C48252;
    const double C48297 = C48108 * C48252;
    const double C48612 = C48252 * C48259;
    const double C48667 = C48252 * C48304;
    const double C48372 = C48248 + C48369;
    const double C48743 = C48443 * C48304;
    const double C48474 = C48248 + C48472;
    const double C48412 = C48108 * C48408;
    const double C48736 = C48408 * C48304;
    const double C48467 = C48398 + C48464;
    const double C48486 = C48109 * C48468;
    const double C48886 = C48885 * C48879;
    const double C48892 = C48885 / C47862;
    const double C49219 = C48891 * C48885;
    const double C49217 = C48885 / C47858;
    const double C1106 = (C48883 * std::pow(C48879, 2)) / C47860 + C48884;
    const double C48894 = C48893 * C48879;
    const double C49223 = C48878 * C48893;
    const double C49221 = 2 * C48893;
    const double C49276 = C48893 / C49225;
    const double C107 = C48893 / C49262;
    const double C26394 = C48893 / C47894;
    const double C49255 = C49218 / C47858;
    const double C1107 = (-2 * C48891 * C49218) / C47858;
    const double C49289 = C49253 / C47860;
    const double C112 = C49265 / C48921;
    const double C110 = C48916 / C48921 - (C49263 * C49228) / C49229;
    const double C111 = C49263 / C49264 - (C49265 * C49228) / C48911;
    const double C552 = C49263 / C48911;
    const double C618 = C49267 / C48921;
    const double C268 = C49266 / C48911;
    const double C616 = C48950 / C48921 - (C49266 * C49233) / C49229;
    const double C617 = C49266 / C49264 - (C49267 * C49233) / C48911;
    const double C972 = C49269 / C48921;
    const double C410 = C49268 / C48911;
    const double C970 = C48967 / C48921 - (C49268 * C49234) / C49229;
    const double C971 = C49268 / C49264 - (C49269 * C49234) / C48911;
    const double C47947 = C47941 + 0;
    const double C47914 = C47856 * C47895;
    const double C7968 =
        ((-C47857 / C47858) / C47894 -
         ((C48978 - (C47856 * C47895) / C47858) * be) / C47858) /
            C47894 -
        ((C47856 * ((-C47895 / C47858) / C47894 - (0 * be) / C47858) + C49040) *
         be) /
            C47858;
    const double C7969 =
        ((-C47895 / C47858) / C47894 - (0 * be) / C47858) / C47894 -
        (0 * be) / C47858;
    const double C22512 = (-C47895 / C47858) / C47894 - (0 * be) / C47858;
    const double C47927 = C47923 - C47917;
    const double C49035 = C49034 / C47860;
    const double C1109 =
        (((0 - (C47856 * C47857) / C47858) * ae) / C47858 - (0 * be) / C47862) /
            (2 * C47858) +
        ((C47856 * (((C48978 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
                    C47857 / C47862) +
          C49239) *
         ae) /
            C47858 +
        (0 * ae) / C47858 - C47863 / C47860;
    const double C49271 = 2 * C49236;
    const double C49042 = C49041 / C47858;
    const double C49281 = C49245 / C47862;
    const double C49298 = C49239 - C49278;
    const double C22505 = -C49278;
    const double C49307 = C49294 + C49031;
    const double C48034 = C48028 + 0;
    const double C48001 = C47875 * C47982;
    const double C15198 =
        ((-C47876 / C47858) / C47894 -
         ((C48995 - (C47875 * C47982) / C47858) * be) / C47858) /
            C47894 -
        ((C47875 * ((-C47982 / C47858) / C47894 - (0 * be) / C47858) + C49082) *
         be) /
            C47858;
    const double C15199 =
        ((-C47982 / C47858) / C47894 - (0 * be) / C47858) / C47894 -
        (0 * be) / C47858;
    const double C30853 = (-C47982 / C47858) / C47894 - (0 * be) / C47858;
    const double C48014 = C48010 - C48004;
    const double C2546 = C2534 * C981;
    const double C5065 = C5042 * C129;
    const double C5061 = C5042 * C118;
    const double C5057 = C5042 * C127;
    const double C5053 = C5042 * C117;
    const double C5049 = C5042 * C125;
    const double C5045 = C5042 * C116;
    const double C5255 = C5042 * C275;
    const double C5251 = C5042 * C284;
    const double C5247 = C5042 * C274;
    const double C5243 = C5042 * C282;
    const double C5421 = C5042 * C415;
    const double C5417 = C5042 * C424;
    const double C5413 = C5042 * C414;
    const double C5409 = C5042 * C422;
    const double C6504 = C5042 * C286;
    const double C6500 = C5042 * C276;
    const double C7106 = C5042 * C620;
    const double C7102 = C5042 * C626;
    const double C7312 = C5042 * C722;
    const double C7308 = C5042 * C728;
    const double C13239 = C5042 * C1301;
    const double C13235 = C5042 * C1307;
    const double C13445 = C5042 * C1499;
    const double C13441 = C5042 * C1505;
    const double C5059 = C5043 * C422;
    const double C5055 = C5043 * C414;
    const double C5051 = C5043 * C424;
    const double C5047 = C5043 * C415;
    const double C5415 = C5043 * C981;
    const double C6506 = C5043 * C728;
    const double C6502 = C5043 * C722;
    const double C7104 = C5043 * C1499;
    const double C7100 = C5043 * C1505;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C1341 = C1318 + C1319;
    const double C1340 = C1316 + C1317;
    const double C15236 = C15194 * C128;
    const double C15230 = C15194 * C139;
    const double C15220 = C15194 * C138;
    const double C15214 = C15194 * C126;
    const double C15208 = C15194 * C137;
    const double C15202 = C15194 * C124;
    const double C15431 = C15194 * C285;
    const double C15425 = C15194 * C293;
    const double C15419 = C15194 * C283;
    const double C15413 = C15194 * C292;
    const double C15613 = C15194 * C425;
    const double C15607 = C15194 * C433;
    const double C15601 = C15194 * C423;
    const double C15595 = C15194 * C432;
    const double C16717 = C15194 * C636;
    const double C16711 = C15194 * C627;
    const double C16705 = C15194 * C635;
    const double C16699 = C15194 * C625;
    const double C16693 = C15194 * C294;
    const double C16687 = C15194 * C287;
    const double C17155 = C15194 * C1308;
    const double C17149 = C15194 * C1313;
    const double C17333 = C15194 * C727;
    const double C17327 = C15194 * C737;
    const double C17321 = C15194 * C1506;
    const double C17315 = C15194 * C1511;
    const double C19003 = C15194 * C738;
    const double C49077 = C49076 / C47860;
    const double C5072 = C49240 * C140;
    const double C5066 = C49240 * C139;
    const double C5062 = C49240 * C128;
    const double C5058 = C49240 * C138;
    const double C5054 = C49240 * C126;
    const double C5050 = C49240 * C137;
    const double C5046 = C49240 * C124;
    const double C5256 = C49240 * C285;
    const double C5252 = C49240 * C293;
    const double C5248 = C49240 * C283;
    const double C5244 = C49240 * C292;
    const double C5422 = C49240 * C425;
    const double C5418 = C49240 * C433;
    const double C5414 = C49240 * C423;
    const double C5410 = C49240 * C432;
    const double C6527 = C49240 * C627;
    const double C6523 = C49240 * C636;
    const double C6505 = C49240 * C294;
    const double C6501 = C49240 * C287;
    const double C6747 = C49240 * C738;
    const double C7107 = C49240 * C625;
    const double C7103 = C49240 * C635;
    const double C7313 = C49240 * C727;
    const double C7309 = C49240 * C737;
    const double C13240 = C49240 * C1308;
    const double C13236 = C49240 * C1313;
    const double C13446 = C49240 * C1506;
    const double C13442 = C49240 * C1511;
    const double C2532 =
        (((0 - (C47875 * C47876) / C47858) * ae) / C47858 - (0 * be) / C47862) /
            (2 * C47858) +
        ((C47875 * (((C48995 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
                    C47876 / C47862) +
          C49240) *
         ae) /
            C47858 +
        (0 * ae) / C47858 - C47878 / C47860;
    const double C49274 = 2 * C49238;
    const double C2556 = C2533 * C422;
    const double C2550 = C2533 * C414;
    const double C2544 = C2533 * C424;
    const double C2538 = C2533 * C415;
    const double C2959 = C2533 * C981;
    const double C10145 = C2533 * C1505;
    const double C10139 = C2533 * C1499;
    const double C10133 = C2533 * C728;
    const double C10127 = C2533 * C722;
    const double C49084 = C49083 / C47858;
    const double C49287 = C49251 / C47862;
    const double C36623 = C36607 * C989;
    const double C49301 = C49240 - C49284;
    const double C30850 = -C49284;
    const double C15222 = C15195 * C432;
    const double C15216 = C15195 * C423;
    const double C15210 = C15195 * C433;
    const double C15204 = C15195 * C425;
    const double C15423 = C15195 * C738;
    const double C15605 = C15195 * C989;
    const double C16707 = C15195 * C1511;
    const double C16701 = C15195 * C1506;
    const double C16695 = C15195 * C737;
    const double C16689 = C15195 * C727;
    const double C49308 = C49296 + C49073;
    const double C47950 = C47946 / C47894;
    const double C48037 = C48033 / C47894;
    const double C2413 =
        (ae * (C48180 + C48109 * (C48109 * C48152 + C48246 * ae) +
               C48109 * C48246 * ae) +
         C48108 * (C48120 + ae * C48109 * C48167 + C48109 * C48280)) /
        C47860;
    const double C2414 =
        (C48120 + ae * C48109 * C48167 + C48109 * C48280 +
         ae * (C48256 + C48109 * (C48109 * C48108 * C48149 + C48291 * ae) +
               C48109 * C48291 * ae) +
         C48108 * (ae * (C48152 + C48109 * (C48109 * C48149 + C48207 * ae) +
                         C48109 * C48207 * ae) +
                   C48108 * (C48127 + ae * C48109 * C48164 +
                             C48109 * (ae * C48164 + C48109 * C48132)))) /
        C47860;
    const double C2942 =
        (2 * (ae * C48212 + C48109 * C48120) +
         ae * (C48212 + C48167 * std::pow(C48109, 2)) +
         C48109 * (C48120 + ae * C48109 * C48167 + C48109 * C48280)) /
        C47860;
    const double C3391 =
        (ae * (2 * (C48109 * C48152 + C48246 * ae) +
               C48109 * (C48152 + C48109 * (C48109 * C48149 + C48207 * ae) +
                         C48109 * C48207 * ae) +
               (C48246 + C48207 * C48304) * ae) +
         C48108 * (2 * C48280 + ae * (C48167 + C48164 * C48304) +
                   C48109 * (C48127 + ae * C48109 * C48164 +
                             C48109 * (ae * C48164 + C48109 * C48132)))) /
        C47860;
    const double C637 = (C48120 + C48127 * C48124 + ae * C48108 * C48185 +
                         C48108 * (ae * C48185 + C48108 * C48134)) /
                        C47860;
    const double C739 =
        (ae * (C48109 * C48185 +
               (C48178 * C48177 + C48118 * C48117 * C48124) * ae) +
         C48108 * (ae * (C48167 + C48164 * C48124) + C48109 * C48134)) /
        C47860;
    const double C130 = (3 * (C48180 + C48152 * C48124) +
                         C48116 * (2 * C48182 + C48116 * C48185)) /
                        C47858;
    const double C281 = (C48108 * (2 * C48182 + C48116 * C48185)) / C47858;
    const double C421 =
        (C48109 * (2 * C48182 + C48116 * C48185) +
         (2 * C48116 * C48246 + C48116 * (C48246 + C48207 * C48124)) * ae) /
        C47858;
    const double C629 = (C48180 + C48152 * C48124 + C48185 * C48259) / C47858;
    const double C731 =
        (C48109 * C48108 * C48185 + C48108 * C48544 * ae) / C47858;
    const double C982 =
        (C48180 + C48152 * C48124 + C48109 * (C48109 * C48185 + C48544 * ae) +
         C48109 * C48544 * ae) /
        C47858;
    const double C1304 =
        (2 * C48108 * C48185 + C48108 * (C48185 + C48160 * C48259)) / C47858;
    const double C48268 = C48265 + C48266;
    const double C2405 =
        (C48108 * C48182 + C48109 * (C48109 * C48264 + C48603 * ae) +
         C48109 * C48603 * ae) /
        C47858;
    const double C1333 = C48995 * C1312;
    const double C12674 = C49240 * C1312;
    const double C48661 = C48658 + C48602;
    const double C1335 = C48995 * C1306;
    const double C12678 = C49240 * C1306;
    const double C1814 =
        (3 * (C48120 + ae * C48256 + C48108 * C48260) +
         ae * (2 * C48256 + C48108 * C48262) +
         C48108 * (2 * C48260 + ae * C48262 +
                   C48108 * (C48127 + ae * C48108 * C48149 +
                             C48108 * (ae * C48149 + C48108 * C48132)))) /
        C47860;
    const double C1978 =
        (2 * (ae * (C48109 * C48152 + C48246 * ae) + C48108 * C48280) +
         ae * (C48109 * C48262 + (C48246 + C48207 * C48259) * ae) +
         C48108 *
             (C48280 + ae * (C48109 * C48108 * C48149 + C48108 * C48207 * ae) +
              C48108 * (ae * (C48109 * C48149 + C48207 * ae) +
                        C48108 * (ae * C48164 + C48109 * C48132)))) /
        C47860;
    const double C1808 = (3 * (C48180 + C48152 * C48259) +
                          C48108 * (2 * C48256 + C48108 * C48262)) /
                         C47858;
    const double C1972 = (C48109 * (2 * C48256 + C48108 * C48262) +
                          (2 * C48595 + C48108 * C48598) * ae) /
                         C47858;
    const double C2403 =
        (C48180 + C48152 * C48259 + C48109 * (C48109 * C48262 + C48598 * ae) +
         C48109 * C48598 * ae) /
        C47858;
    const double C48329 = C48108 * C48325;
    const double C48375 = 2 * C48325;
    const double C48328 = C48127 + C48324;
    const double C48730 = C48727 + C48673;
    const double C48358 = ae * C48355;
    const double C48749 = C48109 * C48355;
    const double C48777 = 2 * C48355;
    const double C990 = (C48120 + C48127 * C48124 + ae * C48109 * C48217 +
                         C48109 * (ae * C48217 + C48109 * C48134)) /
                        C47860;
    const double C131 = (3 * (C48212 + C48167 * C48124) +
                         C48116 * (2 * C48214 + C48116 * C48217)) /
                        C47858;
    const double C280 =
        (C48108 * (2 * C48214 + C48116 * C48217) +
         (2 * C48116 * C48246 + C48116 * (C48246 + C48207 * C48124)) * ae) /
        C47858;
    const double C420 = (C48109 * (2 * C48214 + C48116 * C48217)) / C47858;
    const double C630 =
        (C48212 + C48167 * C48124 + C48108 * (C48108 * C48217 + C48544 * ae) +
         C48108 * C48544 * ae) /
        C47858;
    const double C732 = (C48109 * (C48108 * C48217 + C48544 * ae)) / C47858;
    const double C983 = (C48212 + C48167 * C48124 + C48217 * C48304) / C47858;
    const double C2932 =
        (2 * C48109 * C48217 + C48109 * (C48217 + C48175 * C48304)) / C47858;
    const double C48284 = C48282 + C48283;
    const double C1525 = C48995 * C1510;
    const double C6521 = C49082 * C1510;
    const double C12882 = C49240 * C1510;
    const double C16719 = C15195 * C1510;
    const double C32114 = C49082 * C1510;
    const double C48605 = C48601 + C48602;
    const double C1524 = C113 * C1503;
    const double C6520 = C5043 * C1503;
    const double C10157 = C2533 * C1503;
    const double C12881 = C5042 * C1503;
    const double C2957 = C2534 * C2934;
    const double C3805 =
        (3 * (C48120 + ae * C48308 + C48109 * C48280) +
         ae * (2 * C48308 + C48109 * C48310) +
         C48109 * (2 * C48280 + ae * C48310 +
                   C48109 * (C48127 + ae * C48109 * C48164 +
                             C48109 * (ae * C48164 + C48109 * C48132)))) /
        C47860;
    const double C3800 = (3 * (C48212 + C48167 * C48304) +
                          C48109 * (2 * C48308 + C48109 * C48310)) /
                         C47858;
    const double C48359 = C48108 * C48356;
    const double C48421 = C48109 * C48356;
    const double C48451 = 2 * C48356;
    const double C48423 = C48127 + C48422;
    const double C48678 = C48108 * C48676;
    const double C48699 = 2 * C48676;
    const double C48548 = C48116 * C48242;
    const double C48552 = 3 * C48242;
    const double C48611 = C48108 * C48242;
    const double C48610 = C48242 * ae;
    const double C48666 = C48109 * C48242;
    const double C1303 =
        (2 * (C48108 * C48217 + C48544 * ae) +
         C48108 * (C48217 + C48108 * (C48108 * C48175 + C48242 * ae) +
                   C48108 * C48242 * ae) +
         (C48544 + C48242 * C48259) * ae) /
        C47858;
    const double C1501 =
        (C48109 * (C48217 + C48108 * (C48108 * C48175 + C48242 * ae) +
                   C48108 * C48242 * ae)) /
        C47858;
    const double C1502 = (C48109 * (C48185 + C48160 * C48259) +
                          (C48544 + C48242 * C48259) * ae) /
                         C47858;
    const double C1299 =
        2 * C48108 * C48544 + C48108 * (C48544 + C48242 * C48259);
    const double C1497 = C48109 * (C48544 + C48242 * C48259);
    const double C2928 =
        2 * C48109 * C48544 + C48109 * (C48544 + C48242 * C48304);
    const double C48686 = 2 * C48294;
    const double C48685 = C48294 * ae;
    const double C48742 = C48109 * C48294;
    const double C3387 =
        (2 * (C48109 * C48264 + C48603 * ae) +
         C48109 * (C48264 + C48109 * (C48109 * C48334 + C48294 * ae) +
                   C48109 * C48294 * ae) +
         (C48603 + C48294 * C48304) * ae) /
        C47858;
    const double C3383 =
        2 * C48109 * C48603 + C48109 * (C48603 + C48294 * C48304);
    const double C48367 = C48362 + C48363;
    const double C48688 = C48684 + C48363;
    const double C48759 = 2 * C48471;
    const double C48758 = C48471 * ae;
    const double C48606 = C48244 + C48604;
    const double C48662 = C48244 + C48660;
    const double C48675 = C48108 * C48357;
    const double C48702 = 3 * C48357;
    const double C48701 = C48357 * ae;
    const double C48735 = C48109 * C48357;
    const double C10324 =
        2 * C48109 * C48598 + C48109 * (C48598 + C48357 * C48304);
    const double C48410 = ae * C48405;
    const double C48426 = C48109 * C48405;
    const double C48706 = C48108 * C48704;
    const double C48774 = C48704 * C48304;
    const double C48409 = C48397 + C48404;
    const double C48768 = 2 * C48463;
    const double C48767 = C48463 * ae;
    const double C48731 = C48291 + C48729;
    const double C48752 = C48109 * C48461;
    const double C48780 = 3 * C48461;
    const double C48779 = C48461 * ae;
    const double C48144 = C48116 * C48143;
    const double C48273 = C48108 * C48143;
    const double C48287 = C48109 * C48143;
    const double C1311 = (2 * (ae * C48185 + C48108 * C48134) +
                          ae * (C48185 + C48160 * std::pow(C48108, 2)) +
                          C48108 * (C48134 + ae * C48108 * C48160 +
                                    C48108 * (ae * C48160 + C48108 * C48143))) /
                         C47860;
    const double C1509 =
        (ae * C48217 + C48109 * C48134 +
         ae * (C48109 * C48108 * C48160 + C48108 * C48242 * ae) +
         C48108 * (ae * (C48109 * C48160 + C48242 * ae) +
                   C48108 * (ae * C48175 + C48109 * C48143))) /
        C47860;
    const double C48343 = C48335 + C48339;
    const double C48368 = C48364 + C48365;
    const double C48388 = C48108 * C48384;
    const double C48411 = C48108 * C48406;
    const double C48429 = C48109 * C48406;
    const double C48199 = C48116 * C48198;
    const double C48274 = C48198 * C48259;
    const double C48344 = C48193 + C48341;
    const double C48389 = C48108 * C48386;
    const double C48231 = C48116 * C48230;
    const double C48317 = C48230 * C48304;
    const double C48475 = C48225 + C48473;
    const double C48488 = C48109 * C48469;
    const double C166 = C148 + C149;
    const double C320 = C311 + C312;
    const double C460 = C451 + C452;
    const double C1342 = C1320 + C1321;
    const double C1993 = C1988 + C1989;
    const double C167 = C150 + C151;
    const double C169 = C154 + C155;
    const double C319 = C309 + C310;
    const double C457 = C445 + C446;
    const double C459 = C449 + C450;
    const double C1343 = C1322 + C1323;
    const double C1992 = C1986 + C1987;
    const double C1119 = C113 * C628;
    const double C6522 = C5042 * C628;
    const double C1531 = C48995 * C729;
    const double C5254 = C49082 * C729;
    const double C6751 = C49240 * C729;
    const double C15429 = C15195 * C729;
    const double C19009 = C15194 * C729;
    const double C31064 = C49082 * C729;
    const double C1528 = C113 * C730;
    const double C2761 = C2533 * C730;
    const double C5249 = C5043 * C730;
    const double C6746 = C5042 * C730;
    const double C2541 = C49275 * C980;
    const double C5420 = C49082 * C980;
    const double C15206 = C49275 * C980;
    const double C15611 = C15195 * C980;
    const double C31230 = C49082 * C980;
    const double C36617 = C36607 * C980;
    const double C1332 = C113 * C1305;
    const double C12673 = C5042 * C1305;
    const double C1527 = C48995 * C1504;
    const double C6525 = C49082 * C1504;
    const double C12886 = C49240 * C1504;
    const double C16713 = C15195 * C1504;
    const double C32110 = C49082 * C1504;
    const double C2964 = C49275 * C2935;
    const double C15609 = C49275 * C2935;
    const double C20197 = C49288 * C2935;
    const double C33806 = C49288 * C2935;
    const double C37020 = C36607 * C2935;
    const double C1117 = C113 * C621;
    const double C6526 = C5042 * C621;
    const double C1530 = C113 * C723;
    const double C2767 = C2533 * C723;
    const double C5253 = C5043 * C723;
    const double C6750 = C5042 * C723;
    const double C2540 = C2534 * C974;
    const double C2965 = C2533 * C974;
    const double C5419 = C5043 * C974;
    const double C1334 = C113 * C1300;
    const double C12677 = C5042 * C1300;
    const double C1526 = C113 * C1498;
    const double C6524 = C5043 * C1498;
    const double C10151 = C2533 * C1498;
    const double C12885 = C5042 * C1498;
    const double C2765 = C2534 * C2397;
    const double C6748 = C5043 * C2397;
    const double C25202 = C2533 * C2397;
    const double C2963 = C2534 * C2929;
    const double C156 = C113 * C119;
    const double C5075 = C5042 * C119;
    const double C303 = C113 * C273;
    const double C5239 = C5042 * C273;
    const double C443 = C113 * C413;
    const double C2568 = C2533 * C413;
    const double C5063 = C5043 * C413;
    const double C5405 = C5042 * C413;
    const double C1125 = C113 * C622;
    const double C6516 = C5042 * C622;
    const double C1520 = C113 * C724;
    const double C2755 = C2533 * C724;
    const double C5245 = C5043 * C724;
    const double C6742 = C5042 * C724;
    const double C2552 = C2534 * C975;
    const double C2953 = C2533 * C975;
    const double C5411 = C5043 * C975;
    const double C7311 = C49082 * C2401;
    const double C10130 = C49275 * C2401;
    const double C16691 = C49275 * C2401;
    const double C17331 = C15195 * C2401;
    const double C33148 = C49082 * C2401;
    const double C38186 = C36607 * C2401;
    const double C10780 = C49275 * C3385;
    const double C17329 = C49275 * C3385;
    const double C21497 = C49288 * C3385;
    const double C38996 = C36607 * C3385;
    const double C42485 = C49288 * C3385;
    const double C7310 = C5043 * C2395;
    const double C10129 = C2534 * C2395;
    const double C10781 = C2533 * C2395;
    const double C10779 = C2534 * C3382;
    const double C1809 =
        (3 * (C48212 + C48108 * C48597 + C48595 * ae) +
         C48108 * (2 * C48597 +
                   C48108 * (C48167 + C48108 * (C48108 * C48164 + C48351) +
                             C48291 * ae) +
                   C48598 * ae) +
         (2 * C48595 + C48108 * C48598) * ae) /
        C47858;
    const double C1973 =
        (C48109 * (2 * C48597 +
                   C48108 * (C48167 + C48108 * (C48108 * C48164 + C48351) +
                             C48291 * ae) +
                   C48598 * ae)) /
        C47858;
    const double C2402 =
        (C48108 * C48212 + C48537 * ae + C48597 * C48304) / C47858;
    const double C2404 =
        (C48212 + C48108 * C48597 + C48595 * ae +
         (C48167 + C48108 * (C48108 * C48164 + C48351) + C48291 * ae) *
             C48304) /
        C47858;
    const double C3386 =
        (2 * C48109 * C48597 +
         C48109 * (C48597 + (C48108 * C48164 + C48351) * C48304)) /
        C47858;
    const double C11201 =
        (3 * (C48597 + C48676 * C48304) +
         C48109 * (2 * C48109 * C48676 + C48109 * (C48676 + C48704 * C48304))) /
        C47858;
    const double C3799 =
        (3 * (C48180 + C48109 * C48654 + C48652 * ae) +
         C48109 *
             (2 * C48654 + C48109 * (C48152 + C48109 * C48355 + C48459 * ae) +
              C48655 * ae) +
         (2 * C48652 + C48109 * C48655) * ae) /
        C47858;
    const double C9277 = C113 * C1805;
    const double C14579 = C5042 * C1805;
    const double C9625 = C113 * C1969;
    const double C10599 = C2533 * C1969;
    const double C13237 = C5043 * C1969;
    const double C14721 = C5042 * C1969;
    const double C10141 = C2534 * C2396;
    const double C10769 = C2533 * C2396;
    const double C13443 = C5043 * C2396;
    const double C317 = C305 + C306;
    const double C1822 = C1818 + C1819;
    const double C1990 = C1982 + C1983;
    const double C168 = C152 + C153;
    const double C318 = C307 + C308;
    const double C458 = C447 + C448;
    const double C1823 = C1820 + C1821;
    const double C1991 = C1984 + C1985;
    const double C161 = C48995 * C141;
    const double C302 = C48995 * C291;
    const double C5236 = C49240 * C291;
    const double C442 = C48995 * C431;
    const double C5068 = C49082 * C431;
    const double C5402 = C49240 * C431;
    const double C15228 = C15195 * C431;
    const double C30878 = C49082 * C431;
    const double C48190 = C48189 + C48188;
    const double C1810 = (3 * (C48182 + C48187 * C48259) +
                          C48108 * (2 * C48264 + C48108 * C48269)) /
                         C47858;
    const double C48342 = C48136 + C48338;
    const double C48332 = C48326 + C48330;
    const double C48222 = C48221 + C48220;
    const double C3802 = (3 * (C48214 + C48219 * C48304) +
                          C48109 * (2 * C48312 + C48109 * C48314)) /
                         C47858;
    const double C48446 = C48136 + C48445;
    const double C48479 = C48477 + C48478;
    const double C48254 = C48250 + C48253;
    const double C48614 = C48242 + C48612;
    const double C48669 = C48242 + C48667;
    const double C48687 = C48108 * C48372;
    const double C48745 = C48294 + C48743;
    const double C48760 = C48109 * C48474;
    const double C48415 = C48407 + C48412;
    const double C48738 = C48357 + C48736;
    const double C48769 = C48109 * C48467;
    const double C48489 = C48485 + C48486;
    const double C48887 = C48886 / C47860;
    const double C49256 = 2 * C49219;
    const double C48895 = C48894 / C47858;
    const double C49260 = C49223 / C47862;
    const double C49290 = C49217 - C49255;
    const double C23637 = -C49255;
    const double C49304 = C49289 + C48884;
    const double C47951 = C47947 * be;
    const double C47922 = C47914 / C47858;
    const double C47931 = C47856 * C47927;
    const double C47960 = C47927 / C47894;
    const double C49036 = C49031 - C49035;
    const double C49295 = C49271 / C47858;
    const double C49043 = C49039 - C49042;
    const double C49309 = C49298 / C47894;
    const double C7967 =
        ((-(0 * be) / C47858) / C47894 -
         ((0 - (C47856 * C47857) / C47858) * be) / C47858) /
            C47894 -
        ((C47856 * ((-C47857 / C47858) / C47894 -
                    ((C48978 - (C47856 * C47895) / C47858) * be) / C47858) +
          C22505) *
         be) /
            C47858 +
        (-C47895 / C47858) / C47894 - (0 * be) / C47858;
    const double C48038 = C48034 * be;
    const double C48009 = C48001 / C47858;
    const double C15233 = C15198 * C413;
    const double C15221 = C15198 * C422;
    const double C15215 = C15198 * C414;
    const double C15209 = C15198 * C424;
    const double C15203 = C15198 * C415;
    const double C15428 = C15198 * C723;
    const double C15422 = C15198 * C730;
    const double C15416 = C15198 * C724;
    const double C15610 = C15198 * C974;
    const double C15604 = C15198 * C981;
    const double C15598 = C15198 * C975;
    const double C16718 = C15198 * C1503;
    const double C16712 = C15198 * C1498;
    const double C16706 = C15198 * C1505;
    const double C16700 = C15198 * C1499;
    const double C16694 = C15198 * C728;
    const double C16688 = C15198 * C722;
    const double C17152 = C15198 * C1969;
    const double C17330 = C15198 * C2395;
    const double C17318 = C15198 * C2396;
    const double C19006 = C15198 * C2397;
    const double C15217 = C15199 * C975;
    const double C15211 = C15199 * C981;
    const double C15205 = C15199 * C974;
    const double C15426 = C15199 * C2397;
    const double C15608 = C15199 * C2929;
    const double C15602 = C15199 * C2934;
    const double C16702 = C15199 * C2396;
    const double C16690 = C15199 * C2395;
    const double C17328 = C15199 * C3382;
    const double C30873 = C30853 * C413;
    const double C30869 = C30853 * C422;
    const double C30865 = C30853 * C414;
    const double C30861 = C30853 * C424;
    const double C30857 = C30853 * C415;
    const double C31063 = C30853 * C723;
    const double C31059 = C30853 * C730;
    const double C31055 = C30853 * C724;
    const double C31229 = C30853 * C974;
    const double C31225 = C30853 * C981;
    const double C31221 = C30853 * C975;
    const double C32113 = C30853 * C1503;
    const double C32109 = C30853 * C1498;
    const double C32339 = C30853 * C1505;
    const double C32335 = C30853 * C1499;
    const double C32331 = C30853 * C728;
    const double C32327 = C30853 * C722;
    const double C32575 = C30853 * C2397;
    const double C32933 = C30853 * C1969;
    const double C33147 = C30853 * C2395;
    const double C33139 = C30853 * C2396;
    const double C48018 = C47875 * C48014;
    const double C48047 = C48014 / C47894;
    const double C2577 = C2546 + C2547;
    const double C5084 = C5059 + C5060;
    const double C5082 = C5055 + C5056;
    const double C5080 = C5051 + C5052;
    const double C5078 = C5047 + C5048;
    const double C5431 = C5415 + C5416;
    const double C6533 = C6506 + C6507;
    const double C6531 = C6502 + C6503;
    const double C7110 = C7104 + C7105;
    const double C7108 = C7100 + C7101;
    const double C175 = C165 * C48978;
    const double C1114 = C165 * C49307;
    const double C3916 = C165 * C49239;
    const double C7972 = C165 * C7961;
    const double C22515 = C165 * C22505;
    const double C174 = C164 * C114;
    const double C1113 = C164 * C1109;
    const double C3915 = C164 * C3912;
    const double C49078 = C49073 - C49077;
    const double C5087 = C5065 + C5066;
    const double C5085 = C5061 + C5062;
    const double C5083 = C5057 + C5058;
    const double C5081 = C5053 + C5054;
    const double C5079 = C5049 + C5050;
    const double C5077 = C5045 + C5046;
    const double C5268 = C5255 + C5256;
    const double C5266 = C5251 + C5252;
    const double C5264 = C5247 + C5248;
    const double C5262 = C5243 + C5244;
    const double C5434 = C5421 + C5422;
    const double C5432 = C5417 + C5418;
    const double C5430 = C5413 + C5414;
    const double C5428 = C5409 + C5410;
    const double C6532 = C6504 + C6505;
    const double C6530 = C6500 + C6501;
    const double C7111 = C7106 + C7107;
    const double C7109 = C7102 + C7103;
    const double C7317 = C7312 + C7313;
    const double C7315 = C7308 + C7309;
    const double C13244 = C13239 + C13240;
    const double C13242 = C13235 + C13236;
    const double C13450 = C13445 + C13446;
    const double C13448 = C13441 + C13442;
    const double C2570 = C2532 * C118;
    const double C2564 = C2532 * C129;
    const double C2554 = C2532 * C127;
    const double C2548 = C2532 * C117;
    const double C2542 = C2532 * C125;
    const double C2536 = C2532 * C116;
    const double C2769 = C2532 * C275;
    const double C2763 = C2532 * C284;
    const double C2757 = C2532 * C274;
    const double C2751 = C2532 * C282;
    const double C2967 = C2532 * C415;
    const double C2961 = C2532 * C424;
    const double C2955 = C2532 * C414;
    const double C2949 = C2532 * C422;
    const double C10155 = C2532 * C628;
    const double C10149 = C2532 * C621;
    const double C10143 = C2532 * C626;
    const double C10137 = C2532 * C620;
    const double C10131 = C2532 * C286;
    const double C10125 = C2532 * C276;
    const double C10601 = C2532 * C1301;
    const double C10595 = C2532 * C1307;
    const double C10783 = C2532 * C722;
    const double C10777 = C2532 * C728;
    const double C10771 = C2532 * C1499;
    const double C10765 = C2532 * C1505;
    const double C25204 = C2532 * C723;
    const double C25198 = C2532 * C730;
    const double C49297 = C49274 / C47858;
    const double C49085 = C49081 - C49084;
    const double C49311 = C49301 / C47894;
    const double C30882 = C30850 * C140;
    const double C30876 = C30850 * C139;
    const double C30872 = C30850 * C128;
    const double C30868 = C30850 * C138;
    const double C30864 = C30850 * C126;
    const double C30860 = C30850 * C137;
    const double C30856 = C30850 * C124;
    const double C31066 = C30850 * C285;
    const double C31062 = C30850 * C293;
    const double C31058 = C30850 * C283;
    const double C31054 = C30850 * C292;
    const double C31046 = C30850 * C291;
    const double C31232 = C30850 * C425;
    const double C31228 = C30850 * C433;
    const double C31224 = C30850 * C423;
    const double C31220 = C30850 * C432;
    const double C31212 = C30850 * C431;
    const double C32112 = C30850 * C636;
    const double C32108 = C30850 * C627;
    const double C32352 = C30850 * C1306;
    const double C32348 = C30850 * C1312;
    const double C32338 = C30850 * C635;
    const double C32334 = C30850 * C625;
    const double C32330 = C30850 * C294;
    const double C32326 = C30850 * C287;
    const double C32578 = C30850 * C729;
    const double C32574 = C30850 * C738;
    const double C32570 = C30850 * C1504;
    const double C32566 = C30850 * C1510;
    const double C32936 = C30850 * C1308;
    const double C32932 = C30850 * C1313;
    const double C33150 = C30850 * C727;
    const double C33146 = C30850 * C737;
    const double C33142 = C30850 * C1506;
    const double C33138 = C30850 * C1511;
    const double C15197 =
        ((-(0 * be) / C47858) / C47894 -
         ((0 - (C47875 * C47876) / C47858) * be) / C47858) /
            C47894 -
        ((C47875 * ((-C47876 / C47858) / C47894 -
                    ((C48995 - (C47875 * C47982) / C47858) * be) / C47858) +
          C30850) *
         be) /
            C47858 +
        (-C47982 / C47858) / C47894 - (0 * be) / C47858;
    const double C2571 = C49308 * C128;
    const double C2565 = C49308 * C139;
    const double C2555 = C49308 * C138;
    const double C2549 = C49308 * C126;
    const double C2543 = C49308 * C137;
    const double C2537 = C49308 * C124;
    const double C2770 = C49308 * C285;
    const double C2764 = C49308 * C293;
    const double C2758 = C49308 * C283;
    const double C2752 = C49308 * C292;
    const double C2968 = C49308 * C425;
    const double C2962 = C49308 * C433;
    const double C2956 = C49308 * C423;
    const double C2950 = C49308 * C432;
    const double C10156 = C49308 * C636;
    const double C10150 = C49308 * C627;
    const double C10144 = C49308 * C635;
    const double C10138 = C49308 * C625;
    const double C10132 = C49308 * C294;
    const double C10126 = C49308 * C287;
    const double C10602 = C49308 * C1308;
    const double C10596 = C49308 * C1313;
    const double C10784 = C49308 * C727;
    const double C10778 = C49308 * C737;
    const double C10772 = C49308 * C1506;
    const double C10766 = C49308 * C1511;
    const double C25205 = C49308 * C729;
    const double C25199 = C49308 * C738;
    const double C7307 = C49082 * C2413;
    const double C10136 = C49275 * C2413;
    const double C16697 = C49275 * C2413;
    const double C17325 = C15195 * C2413;
    const double C33144 = C49082 * C2413;
    const double C38192 = C36607 * C2413;
    const double C10148 = C49275 * C2414;
    const double C13440 = C49082 * C2414;
    const double C16709 = C49275 * C2414;
    const double C17313 = C15195 * C2414;
    const double C33136 = C49082 * C2414;
    const double C38778 = C36607 * C2414;
    const double C10774 = C49275 * C3391;
    const double C17323 = C49275 * C3391;
    const double C21505 = C49288 * C3391;
    const double C38990 = C36607 * C3391;
    const double C42493 = C49288 * C3391;
    const double C1128 = C48995 * C637;
    const double C6513 = C49240 * C637;
    const double C32118 = C30850 * C637;
    const double C1519 = C48995 * C739;
    const double C5242 = C49082 * C739;
    const double C6739 = C49240 * C739;
    const double C15411 = C15195 * C739;
    const double C31052 = C49082 * C739;
    const double C35419 = C30850 * C739;
    const double C157 = C48995 * C130;
    const double C5076 = C49240 * C130;
    const double C30886 = C30850 * C130;
    const double C304 = C48995 * C281;
    const double C5240 = C49240 * C281;
    const double C31050 = C30850 * C281;
    const double C444 = C48995 * C421;
    const double C5064 = C49082 * C421;
    const double C5406 = C49240 * C421;
    const double C15234 = C15195 * C421;
    const double C30874 = C49082 * C421;
    const double C31216 = C30850 * C421;
    const double C1126 = C48995 * C629;
    const double C6517 = C49240 * C629;
    const double C32122 = C30850 * C629;
    const double C1521 = C48995 * C731;
    const double C5246 = C49082 * C731;
    const double C6743 = C49240 * C731;
    const double C15417 = C15195 * C731;
    const double C31056 = C49082 * C731;
    const double C35423 = C30850 * C731;
    const double C2553 = C49275 * C982;
    const double C5412 = C49082 * C982;
    const double C15218 = C49275 * C982;
    const double C15599 = C15195 * C982;
    const double C31222 = C49082 * C982;
    const double C36629 = C36607 * C982;
    const double C1327 = C48995 * C1304;
    const double C1815 =
        (3 * (C48237 + ae * C48264 + C48108 * C48268) +
         ae * (2 * C48264 + C48108 * C48269) +
         C48108 *
             (2 * C48268 + ae * C48269 +
              C48108 * (C48136 + ae * C48108 * C48193 +
                        C48108 * (ae * C48193 + C48108 * C48116 * C48141)))) /
        C47860;
    const double C2766 = C49275 * C2405;
    const double C6749 = C49082 * C2405;
    const double C15427 = C49275 * C2405;
    const double C19007 = C15195 * C2405;
    const double C32576 = C49082 * C2405;
    const double C36838 = C36607 * C2405;
    const double C9280 = C48995 * C1814;
    const double C14576 = C49240 * C1814;
    const double C41741 = C30850 * C1814;
    const double C9624 = C48995 * C1978;
    const double C13234 = C49082 * C1978;
    const double C14718 = C49240 * C1978;
    const double C17147 = C15195 * C1978;
    const double C32930 = C49082 * C1978;
    const double C41883 = C30850 * C1978;
    const double C9278 = C48995 * C1808;
    const double C14580 = C49240 * C1808;
    const double C41745 = C30850 * C1808;
    const double C9626 = C48995 * C1972;
    const double C13238 = C49082 * C1972;
    const double C14722 = C49240 * C1972;
    const double C17153 = C15195 * C1972;
    const double C32934 = C49082 * C1972;
    const double C41887 = C30850 * C1972;
    const double C10142 = C49275 * C2403;
    const double C13444 = C49082 * C2403;
    const double C16703 = C49275 * C2403;
    const double C17319 = C15195 * C2403;
    const double C33140 = C49082 * C2403;
    const double C38784 = C36607 * C2403;
    const double C48382 = C48375 + C48376;
    const double C48331 = C48328 + C48329;
    const double C48753 = C48152 + C48749;
    const double C2559 = C49275 * C990;
    const double C5408 = C49082 * C990;
    const double C15224 = C49275 * C990;
    const double C15593 = C15195 * C990;
    const double C31218 = C49082 * C990;
    const double C36635 = C36607 * C990;
    const double C158 = C113 * C131;
    const double C5071 = C5042 * C131;
    const double C301 = C113 * C280;
    const double C5235 = C5042 * C280;
    const double C441 = C113 * C420;
    const double C2562 = C2533 * C420;
    const double C5067 = C5043 * C420;
    const double C5401 = C5042 * C420;
    const double C15227 = C15198 * C420;
    const double C30877 = C30853 * C420;
    const double C1127 = C113 * C630;
    const double C6512 = C5042 * C630;
    const double C1518 = C113 * C732;
    const double C2749 = C2533 * C732;
    const double C5241 = C5043 * C732;
    const double C6738 = C5042 * C732;
    const double C15410 = C15198 * C732;
    const double C31051 = C30853 * C732;
    const double C2558 = C2534 * C983;
    const double C2947 = C2533 * C983;
    const double C5407 = C5043 * C983;
    const double C15223 = C15199 * C983;
    const double C15592 = C15198 * C983;
    const double C31217 = C30853 * C983;
    const double C2945 = C2534 * C2932;
    const double C15590 = C15199 * C2932;
    const double C1979 =
        (2 * (ae * (C48109 * C48187 + C48244 * ae) + C48108 * C48284) +
         ae * (C48109 * C48269 + (C48244 + C48248 * C48259) * ae) +
         C48108 *
             (C48284 + ae * (C48109 * C48108 * C48193 + C48108 * C48248 * ae) +
              C48108 * (ae * (C48109 * C48193 + C48248 * ae) +
                        C48108 * (ae * C48225 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C2415 =
        (ae * (C48182 + C48109 * (C48109 * C48187 + C48244 * ae) +
               C48109 * C48244 * ae) +
         C48108 * (C48237 + ae * C48109 * C48219 + C48109 * C48284)) /
        C47860;
    const double C2416 =
        (C48237 + ae * C48109 * C48219 + C48109 * C48284 +
         ae * (C48264 + C48109 * (C48109 * C48108 * C48193 + C48294 * ae) +
               C48109 * C48294 * ae) +
         C48108 *
             (ae * (C48187 + C48109 * (C48109 * C48193 + C48248 * ae) +
                    C48109 * C48248 * ae) +
              C48108 * (C48136 + ae * C48109 * C48225 +
                        C48109 * (ae * C48225 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C2941 =
        (2 * (ae * C48214 + C48109 * C48237) +
         ae * (C48214 + C48219 * std::pow(C48109, 2)) +
         C48109 * (C48237 + ae * C48109 * C48219 + C48109 * C48284)) /
        C47860;
    const double C3392 =
        (ae * (2 * (C48109 * C48187 + C48244 * ae) +
               C48109 * (C48187 + C48109 * (C48109 * C48193 + C48248 * ae) +
                         C48109 * C48248 * ae) +
               (C48244 + C48248 * C48304) * ae) +
         C48108 *
             (2 * C48284 + ae * (C48219 + C48225 * C48304) +
              C48109 * (C48136 + ae * C48109 * C48225 +
                        C48109 * (ae * C48225 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C3806 =
        (3 * (C48237 + ae * C48312 + C48109 * C48284) +
         ae * (2 * C48312 + C48109 * C48314) +
         C48109 *
             (2 * C48284 + ae * C48314 +
              C48109 * (C48136 + ae * C48109 * C48225 +
                        C48109 * (ae * C48225 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C2406 =
        (C48108 * C48214 + C48540 * ae + C48605 * C48304) / C47858;
    const double C2408 =
        (C48214 + C48108 * C48605 + C48603 * ae +
         (C48219 + C48108 * (C48108 * C48225 + C48363) + C48294 * ae) *
             C48304) /
        C47858;
    const double C3388 =
        (2 * C48109 * C48605 +
         C48109 * (C48605 + (C48108 * C48225 + C48363) * C48304)) /
        C47858;
    const double C1538 = C1524 + C1525;
    const double C6538 = C6520 + C6521;
    const double C12888 = C12881 + C12882;
    const double C48360 = C48358 + C48359;
    const double C48456 = C48451 + C48455;
    const double C48424 = C48423 + C48421;
    const double C48679 = C48167 + C48678;
    const double C48549 = C48547 + C48548;
    const double C2409 =
        (C48108 * C48185 + C48109 * (C48109 * C48271 + C48611 * ae) +
         C48109 * C48611 * ae) /
        C47858;
    const double C3389 =
        (2 * (C48109 * C48271 + C48611 * ae) +
         C48109 * (C48271 + C48109 * (C48109 * C48108 * C48198 + C48297 * ae) +
                   C48109 * C48297 * ae) +
         (C48611 + C48297 * C48304) * ae) /
        C47858;
    const double C2399 = C48108 * C48544 + C48611 * C48304;
    const double C3384 =
        2 * C48109 * C48611 + C48109 * (C48611 + C48297 * C48304);
    const double C48613 = C48609 + C48610;
    const double C48668 = C48665 + C48610;
    const double C2933 =
        (2 * (C48109 * C48185 + C48544 * ae) +
         C48109 * (C48185 + C48109 * (C48109 * C48160 + C48610) +
                   C48109 * C48242 * ae) +
         (C48544 + C48242 * C48304) * ae) /
        C47858;
    const double C1324 = C113 * C1303;
    const double C1514 = C113 * C1501;
    const double C6510 = C5043 * C1501;
    const double C32115 = C30853 * C1501;
    const double C1517 = C48995 * C1502;
    const double C6515 = C49082 * C1502;
    const double C32120 = C49082 * C1502;
    const double C1326 = C113 * C1299;
    const double C1516 = C113 * C1497;
    const double C6514 = C5043 * C1497;
    const double C32119 = C30853 * C1497;
    const double C2951 = C2534 * C2928;
    const double C15596 = C15199 * C2928;
    const double C48744 = C48741 + C48685;
    const double C19005 = C49275 * C3387;
    const double C20377 = C49288 * C3387;
    const double C25201 = C49275 * C3387;
    const double C33986 = C49288 * C3387;
    const double C38426 = C36607 * C3387;
    const double C19004 = C15199 * C3383;
    const double C25200 = C2534 * C3383;
    const double C48370 = ae * C48367;
    const double C48757 = C48109 * C48367;
    const double C48690 = C48108 * C48688;
    const double C17903 =
        (3 * (C48605 + C48688 * C48304) +
         C48109 *
             (2 * C48109 * C48688 +
              C48109 * (C48688 + (C48108 * C48444 + C48366 * ae) * C48304))) /
        C47858;
    const double C1811 =
        (3 * (C48214 + C48108 * C48605 + C48603 * ae) +
         C48108 * (2 * C48605 +
                   C48108 * (C48219 + C48108 * (C48108 * C48225 + C48363) +
                             C48294 * ae) +
                   C48606 * ae) +
         (2 * C48603 + C48108 * C48606) * ae) /
        C47858;
    const double C1974 = (C48109 * (2 * C48264 + C48108 * C48269) +
                          (2 * C48603 + C48108 * C48606) * ae) /
                         C47858;
    const double C1975 =
        (C48109 * (2 * C48605 +
                   C48108 * (C48219 + C48108 * (C48108 * C48225 + C48363) +
                             C48294 * ae) +
                   C48606 * ae)) /
        C47858;
    const double C2407 =
        (C48182 + C48187 * C48259 + C48109 * (C48109 * C48269 + C48606 * ae) +
         C48109 * C48606 * ae) /
        C47858;
    const double C1806 = 3 * (C48540 + C48244 * C48259) +
                         C48108 * (2 * C48603 + C48108 * C48606);
    const double C1970 = C48109 * (2 * C48603 + C48108 * C48606);
    const double C2398 = C48540 + C48244 * C48259 + C48606 * C48304;
    const double C10325 =
        2 * C48109 * C48606 + C48109 * (C48606 + C48372 * C48304);
    const double C3801 =
        (3 * (C48182 + C48109 * C48661 + C48659 * ae) +
         C48109 *
             (2 * C48661 + C48109 * (C48187 + C48109 * C48367 + C48471 * ae) +
              C48662 * ae) +
         (2 * C48659 + C48109 * C48662) * ae) /
        C47858;
    const double C3797 = 3 * (C48540 + C48244 * C48304) +
                         C48109 * (2 * C48659 + C48109 * C48662);
    const double C48677 = C48674 + C48675;
    const double C48737 = C48734 + C48701;
    const double C10327 =
        (2 * (C48109 * C48262 + C48598 * ae) +
         C48109 * (C48262 + C48109 * (C48109 * C48327 + C48701) +
                   C48109 * C48357 * ae) +
         (C48598 + C48357 * C48304) * ae) /
        C47858;
    const double C10767 = C2534 * C10324;
    const double C17316 = C15199 * C10324;
    const double C48431 = C48149 + C48426;
    const double C48707 = C48164 + C48706;
    const double C48775 = C48676 + C48774;
    const double C48413 = ae * C48409;
    const double C48766 = C48109 * C48409;
    const double C11200 =
        (3 * (C48256 + C48109 * C48730 + C48728 * ae) +
         C48109 *
             (2 * C48730 + C48109 * (C48320 + C48109 * C48409 + C48463 * ae) +
              C48731 * ae) +
         (2 * C48728 + C48109 * C48731) * ae) /
        C47858;
    const double C11198 = 3 * (C48595 + C48291 * C48304) +
                          C48109 * (2 * C48728 + C48109 * C48731);
    const double C48754 = C48751 + C48752;
    const double C48145 = C48139 + C48144;
    const double C48275 = C48272 + C48273;
    const double C48288 = C48286 + C48287;
    const double C1325 = C48995 * C1311;
    const double C1515 = C48995 * C1509;
    const double C6511 = C49082 * C1509;
    const double C32116 = C49082 * C1509;
    const double C48345 = C48108 * C48343;
    const double C48371 = C48108 * C48368;
    const double C48442 = C48109 * C48368;
    const double C48390 = C48387 + C48388;
    const double C48414 = C48410 + C48411;
    const double C48437 = C48435 + C48429;
    const double C48200 = C48195 + C48199;
    const double C48276 = C48160 + C48274;
    const double C48346 = C48108 * C48344;
    const double C10328 =
        (2 * (C48109 * C48269 + C48606 * ae) +
         C48109 * (C48269 + C48109 * (C48109 * C48344 + C48372 * ae) +
                   C48109 * C48372 * ae) +
         (C48606 + C48372 * C48304) * ae) /
        C47858;
    const double C48391 = C48385 + C48389;
    const double C48232 = C48227 + C48231;
    const double C48318 = C48175 + C48317;
    const double C48482 = C48109 * C48475;
    const double C48490 = C48487 + C48488;
    const double C176 = C166 * C114;
    const double C1121 = C166 * C1109;
    const double C3919 = C166 * C3912;
    const double C328 = C320 * C114;
    const double C1115 = C320 * C1110;
    const double C1339 = C320 * C1109;
    const double C3917 = C320 * C3913;
    const double C4078 = C320 * C3912;
    const double C7973 = C320 * C7968;
    const double C22516 = C320 * C22512;
    const double C468 = C460 * C114;
    const double C1533 = C460 * C1109;
    const double C4222 = C460 * C3912;
    const double C177 = C167 * C48978;
    const double C1122 = C167 * C49307;
    const double C3920 = C167 * C49239;
    const double C7978 = C167 * C7961;
    const double C22519 = C167 * C22505;
    const double C179 = C169 * C48978;
    const double C1135 = C169 * C49307;
    const double C3924 = C169 * C49239;
    const double C7987 = C169 * C7961;
    const double C22523 = C169 * C22505;
    const double C327 = C319 * C48978;
    const double C1338 = C319 * C49307;
    const double C3918 = C319 * C49040;
    const double C4077 = C319 * C49239;
    const double C7974 = C319 * C7962;
    const double C8150 = C319 * C7961;
    const double C22517 = C319 * C49040;
    const double C22676 = C319 * C22505;
    const double C465 = C457 * C48978;
    const double C1522 = C457 * C49307;
    const double C4217 = C457 * C49239;
    const double C8302 = C457 * C7961;
    const double C22814 = C457 * C22505;
    const double C467 = C459 * C48978;
    const double C1532 = C459 * C49307;
    const double C4221 = C459 * C49239;
    const double C8308 = C459 * C7961;
    const double C22818 = C459 * C22505;
    const double C1138 = C1119 + C1120;
    const double C6539 = C6522 + C6523;
    const double C1540 = C1528 + C1529;
    const double C5265 = C5249 + C5250;
    const double C6757 = C6746 + C6747;
    const double C1346 = C1332 + C1333;
    const double C12682 = C12673 + C12674;
    const double C1137 = C1117 + C1118;
    const double C6541 = C6526 + C6527;
    const double C1541 = C1530 + C1531;
    const double C5267 = C5253 + C5254;
    const double C6759 = C6750 + C6751;
    const double C2574 = C2540 + C2541;
    const double C5433 = C5419 + C5420;
    const double C1347 = C1334 + C1335;
    const double C12684 = C12677 + C12678;
    const double C1539 = C1526 + C1527;
    const double C6540 = C6524 + C6525;
    const double C12890 = C12885 + C12886;
    const double C2978 = C2963 + C2964;
    const double C7316 = C7310 + C7311;
    const double C10163 = C10129 + C10130;
    const double C10794 = C10779 + C10780;
    const double C9279 = C113 * C1809;
    const double C14575 = C5042 * C1809;
    const double C9623 = C113 * C1973;
    const double C10593 = C2533 * C1973;
    const double C13233 = C5043 * C1973;
    const double C14717 = C5042 * C1973;
    const double C17146 = C15198 * C1973;
    const double C32929 = C30853 * C1973;
    const double C7306 = C5043 * C2402;
    const double C10135 = C2534 * C2402;
    const double C10775 = C2533 * C2402;
    const double C16696 = C15199 * C2402;
    const double C17324 = C15198 * C2402;
    const double C33143 = C30853 * C2402;
    const double C10147 = C2534 * C2404;
    const double C10763 = C2533 * C2404;
    const double C13439 = C5043 * C2404;
    const double C16708 = C15199 * C2404;
    const double C17312 = C15198 * C2404;
    const double C33135 = C30853 * C2404;
    const double C10773 = C2534 * C3386;
    const double C17322 = C15199 * C3386;
    const double C325 = C317 * C48978;
    const double C1330 = C317 * C49307;
    const double C3922 = C317 * C49040;
    const double C4073 = C317 * C49239;
    const double C7980 = C317 * C7962;
    const double C8144 = C317 * C7961;
    const double C22521 = C317 * C49040;
    const double C22672 = C317 * C22505;
    const double C178 = C168 * C114;
    const double C1136 = C168 * C1109;
    const double C3923 = C168 * C3912;
    const double C326 = C318 * C114;
    const double C1123 = C318 * C1110;
    const double C1331 = C318 * C1109;
    const double C3921 = C318 * C3913;
    const double C4074 = C318 * C3912;
    const double C7979 = C318 * C7968;
    const double C22520 = C318 * C22512;
    const double C466 = C458 * C114;
    const double C1523 = C458 * C1109;
    const double C4218 = C458 * C3912;
    const double C133 = (4 * (2 * C48182 + C48116 * C48185) +
                         C48116 * (3 * C48185 + C48116 * C48190)) /
                        C47858;
    const double C279 = (C48108 * (3 * C48185 + C48116 * C48190)) / C47858;
    const double C419 = (C48109 * (3 * C48185 + C48116 * C48190) +
                         (3 * (C48246 + C48207 * C48124) +
                          C48116 * (2 * C48244 + C48116 * C48242)) *
                             ae) /
                        C47858;
    const double C631 =
        (2 * C48182 + C48116 * C48185 + C48190 * C48259) / C47858;
    const double C9282 = C48995 * C1810;
    const double C9271 = (4 * (2 * C48256 + C48108 * C48262) +
                          C48108 * (3 * C48262 + C48108 * C48332)) /
                         C47858;
    const double C132 = (4 * (2 * C48214 + C48116 * C48217) +
                         C48116 * (3 * C48217 + C48116 * C48222)) /
                        C47858;
    const double C278 = (C48108 * (3 * C48217 + C48116 * C48222) +
                         (3 * (C48246 + C48207 * C48124) +
                          C48116 * (2 * C48244 + C48116 * C48242)) *
                             ae) /
                        C47858;
    const double C418 = (C48109 * (3 * C48217 + C48116 * C48222)) / C47858;
    const double C985 =
        (2 * C48214 + C48116 * C48217 + C48222 * C48304) / C47858;
    const double C17989 = (4 * (2 * C48308 + C48109 * C48310) +
                           C48109 * (3 * C48310 + C48109 * C48479)) /
                          C47858;
    const double C48553 = C48116 * C48254;
    const double C48634 = C48108 * C48254;
    const double C1807 = 3 * (C48544 + C48242 * C48259) +
                         C48108 * (2 * C48611 + C48108 * C48614);
    const double C1971 = C48109 * (2 * C48611 + C48108 * C48614);
    const double C2400 = C48544 + C48242 * C48259 + C48614 * C48304;
    const double C3798 = 3 * (C48544 + C48242 * C48304) +
                         C48109 * (2 * C48666 + C48109 * C48669);
    const double C48689 = C48686 + C48687;
    const double C17901 = 3 * (C48603 + C48294 * C48304) +
                          C48109 * (2 * C48742 + C48109 * C48745);
    const double C48762 = C48759 + C48760;
    const double C48703 = C48108 * C48415;
    const double C11199 = 3 * (C48598 + C48357 * C48304) +
                          C48109 * (2 * C48735 + C48109 * C48738);
    const double C48771 = C48768 + C48769;
    const double C48781 = C48109 * C48489;
    const double C48888 = C48884 - C48887;
    const double C49291 = C49256 / C47858;
    const double C48896 = C48892 - C48895;
    const double C49305 = C49290 / C47894;
    const double C47953 = C47951 / C47858;
    const double C47926 = C48978 - C47922;
    const double C47935 = C47931 + C49040;
    const double C47963 = C47960 - C47962;
    const double C26415 = C169 * C49036;
    const double C26406 = C167 * C49036;
    const double C26400 = C165 * C49036;
    const double C26578 = C319 * C49036;
    const double C26572 = C317 * C49036;
    const double C26736 = C459 * C49036;
    const double C26730 = C457 * C49036;
    const double C49242 = C49036 * C49030;
    const double C49280 = C49244 + C49036;
    const double C1124 = C317 * C49295;
    const double C1116 = C319 * C49295;
    const double C26408 = C317 * C49043;
    const double C26402 = C319 * C49043;
    const double C49246 = C49043 / C47894;
    const double C49243 = C49043 * C49030;
    const double C11304 = C49309 - (C49036 * C49032) / C47858;
    const double C7988 = C168 * C7967;
    const double C7977 = C166 * C7967;
    const double C7971 = C164 * C7967;
    const double C8151 = C320 * C7967;
    const double C8145 = C318 * C7967;
    const double C8309 = C460 * C7967;
    const double C8303 = C458 * C7967;
    const double C48040 = C48038 / C47858;
    const double C48013 = C48995 - C48009;
    const double C15247 = C15221 + C15222;
    const double C15244 = C15215 + C15216;
    const double C15241 = C15209 + C15210;
    const double C15238 = C15203 + C15204;
    const double C15442 = C15428 + C15429;
    const double C15439 = C15422 + C15423;
    const double C15624 = C15610 + C15611;
    const double C15621 = C15604 + C15605;
    const double C16738 = C16718 + C16719;
    const double C16735 = C16712 + C16713;
    const double C16732 = C16706 + C16707;
    const double C16729 = C16700 + C16701;
    const double C16726 = C16694 + C16695;
    const double C16723 = C16688 + C16689;
    const double C17344 = C17330 + C17331;
    const double C15242 = C15211 + C15212;
    const double C15239 = C15205 + C15206;
    const double C15623 = C15608 + C15609;
    const double C16724 = C16690 + C16691;
    const double C17343 = C17328 + C17329;
    const double C30894 = C30869 + C30870;
    const double C30892 = C30865 + C30866;
    const double C30890 = C30861 + C30862;
    const double C30888 = C30857 + C30858;
    const double C31077 = C31063 + C31064;
    const double C31075 = C31059 + C31060;
    const double C31243 = C31229 + C31230;
    const double C31241 = C31225 + C31226;
    const double C32126 = C32113 + C32114;
    const double C32124 = C32109 + C32110;
    const double C32364 = C32339 + C32340;
    const double C32362 = C32335 + C32336;
    const double C32360 = C32331 + C32332;
    const double C32358 = C32327 + C32328;
    const double C33157 = C33147 + C33148;
    const double C48022 = C48018 + C49082;
    const double C48050 = C48047 - C48049;
    const double C36647 = C49078 * C128;
    const double C36641 = C49078 * C139;
    const double C36631 = C49078 * C138;
    const double C36625 = C49078 * C126;
    const double C36619 = C49078 * C137;
    const double C36613 = C49078 * C124;
    const double C36842 = C49078 * C285;
    const double C36836 = C49078 * C293;
    const double C36830 = C49078 * C283;
    const double C36824 = C49078 * C292;
    const double C37024 = C49078 * C425;
    const double C37018 = C49078 * C433;
    const double C37012 = C49078 * C423;
    const double C37006 = C49078 * C432;
    const double C38206 = C49078 * C627;
    const double C38200 = C49078 * C636;
    const double C38188 = C49078 * C294;
    const double C38182 = C49078 * C287;
    const double C38430 = C49078 * C729;
    const double C38424 = C49078 * C738;
    const double C38788 = C49078 * C625;
    const double C38782 = C49078 * C635;
    const double C39000 = C49078 * C727;
    const double C38994 = C49078 * C737;
    const double C47271 = C49078 * C1308;
    const double C47265 = C49078 * C1313;
    const double C47437 = C49078 * C1506;
    const double C47431 = C49078 * C1511;
    const double C49248 = C49078 * C49072;
    const double C49286 = C49250 + C49078;
    const double C5094 = C5083 + C5084;
    const double C5093 = C5081 + C5082;
    const double C13231 = C7111 + C7110;
    const double C13232 = C7109 + C7108;
    const double C2569 = C49297 * C421;
    const double C2563 = C49297 * C431;
    const double C2557 = C49297 * C432;
    const double C2551 = C49297 * C423;
    const double C2545 = C49297 * C433;
    const double C2539 = C49297 * C425;
    const double C2768 = C49297 * C729;
    const double C2762 = C49297 * C738;
    const double C2756 = C49297 * C731;
    const double C2750 = C49297 * C739;
    const double C2966 = C49297 * C980;
    const double C2960 = C49297 * C989;
    const double C2954 = C49297 * C982;
    const double C2948 = C49297 * C990;
    const double C10158 = C49297 * C1510;
    const double C10152 = C49297 * C1504;
    const double C10146 = C49297 * C1511;
    const double C10140 = C49297 * C1506;
    const double C10134 = C49297 * C737;
    const double C10128 = C49297 * C727;
    const double C10600 = C49297 * C1972;
    const double C10594 = C49297 * C1978;
    const double C10782 = C49297 * C2401;
    const double C10776 = C49297 * C2413;
    const double C10770 = C49297 * C2403;
    const double C10764 = C49297 * C2414;
    const double C25203 = C49297 * C2405;
    const double C36645 = C49085 * C421;
    const double C36639 = C49085 * C431;
    const double C36633 = C49085 * C432;
    const double C36627 = C49085 * C423;
    const double C36621 = C49085 * C433;
    const double C36615 = C49085 * C425;
    const double C36840 = C49085 * C729;
    const double C36834 = C49085 * C738;
    const double C36828 = C49085 * C731;
    const double C36822 = C49085 * C739;
    const double C37022 = C49085 * C980;
    const double C37016 = C49085 * C989;
    const double C37010 = C49085 * C982;
    const double C37004 = C49085 * C990;
    const double C38204 = C49085 * C1504;
    const double C38198 = C49085 * C1510;
    const double C38190 = C49085 * C737;
    const double C38184 = C49085 * C727;
    const double C38428 = C49085 * C2405;
    const double C38786 = C49085 * C1506;
    const double C38780 = C49085 * C1511;
    const double C38998 = C49085 * C2401;
    const double C38992 = C49085 * C2413;
    const double C47269 = C49085 * C1972;
    const double C47263 = C49085 * C1978;
    const double C47435 = C49085 * C2403;
    const double C47429 = C49085 * C2414;
    const double C49252 = C49085 / C47894;
    const double C49249 = C49085 * C49072;
    const double C20181 = C49311 - (C49078 * C49074) / C47858;
    const double C15235 = C15197 * C118;
    const double C15229 = C15197 * C129;
    const double C15219 = C15197 * C127;
    const double C15213 = C15197 * C117;
    const double C15207 = C15197 * C125;
    const double C15201 = C15197 * C116;
    const double C15430 = C15197 * C275;
    const double C15424 = C15197 * C284;
    const double C15418 = C15197 * C274;
    const double C15412 = C15197 * C282;
    const double C15612 = C15197 * C415;
    const double C15606 = C15197 * C424;
    const double C15600 = C15197 * C414;
    const double C15594 = C15197 * C422;
    const double C16716 = C15197 * C628;
    const double C16710 = C15197 * C621;
    const double C16704 = C15197 * C626;
    const double C16698 = C15197 * C620;
    const double C16692 = C15197 * C286;
    const double C16686 = C15197 * C276;
    const double C17154 = C15197 * C1301;
    const double C17148 = C15197 * C1307;
    const double C17332 = C15197 * C722;
    const double C17326 = C15197 * C728;
    const double C17320 = C15197 * C1499;
    const double C17314 = C15197 * C1505;
    const double C19008 = C15197 * C723;
    const double C19002 = C15197 * C730;
    const double C2589 = C2570 + C2571;
    const double C2586 = C2564 + C2565;
    const double C2581 = C2554 + C2555;
    const double C2578 = C2548 + C2549;
    const double C2575 = C2542 + C2543;
    const double C2572 = C2536 + C2537;
    const double C2782 = C2769 + C2770;
    const double C2779 = C2763 + C2764;
    const double C2776 = C2757 + C2758;
    const double C2773 = C2751 + C2752;
    const double C2980 = C2967 + C2968;
    const double C2977 = C2961 + C2962;
    const double C2974 = C2955 + C2956;
    const double C2971 = C2949 + C2950;
    const double C10176 = C10155 + C10156;
    const double C10173 = C10149 + C10150;
    const double C10170 = C10143 + C10144;
    const double C10167 = C10137 + C10138;
    const double C10164 = C10131 + C10132;
    const double C10161 = C10125 + C10126;
    const double C10610 = C10601 + C10602;
    const double C10607 = C10595 + C10596;
    const double C10796 = C10783 + C10784;
    const double C10793 = C10777 + C10778;
    const double C10790 = C10771 + C10772;
    const double C10787 = C10765 + C10766;
    const double C25211 = C25204 + C25205;
    const double C25208 = C25198 + C25199;
    const double C170 = C156 + C157;
    const double C5092 = C5075 + C5076;
    const double C316 = C303 + C304;
    const double C5260 = C5239 + C5240;
    const double C456 = C443 + C444;
    const double C5086 = C5063 + C5064;
    const double C5426 = C5405 + C5406;
    const double C15253 = C15233 + C15234;
    const double C30896 = C30873 + C30874;
    const double C1140 = C1125 + C1126;
    const double C6537 = C6516 + C6517;
    const double C1537 = C1520 + C1521;
    const double C5263 = C5245 + C5246;
    const double C6755 = C6742 + C6743;
    const double C15436 = C15416 + C15417;
    const double C31073 = C31055 + C31056;
    const double C2580 = C2552 + C2553;
    const double C5429 = C5411 + C5412;
    const double C15245 = C15217 + C15218;
    const double C15618 = C15598 + C15599;
    const double C31239 = C31221 + C31222;
    const double C9284 = C48995 * C1815;
    const double C2780 = C2765 + C2766;
    const double C6758 = C6748 + C6749;
    const double C15441 = C15426 + C15427;
    const double C19014 = C19006 + C19007;
    const double C32585 = C32575 + C32576;
    const double C9285 = C9277 + C9278;
    const double C14584 = C14579 + C14580;
    const double C9630 = C9625 + C9626;
    const double C13243 = C13237 + C13238;
    const double C14726 = C14721 + C14722;
    const double C17162 = C17152 + C17153;
    const double C32939 = C32933 + C32934;
    const double C10169 = C10141 + C10142;
    const double C13449 = C13443 + C13444;
    const double C16730 = C16702 + C16703;
    const double C17338 = C17318 + C17319;
    const double C33153 = C33139 + C33140;
    const double C9274 =
        (4 * (2 * C48260 + ae * C48262 + C48108 * C48331) +
         ae * (3 * C48262 + C48108 * C48332) +
         C48108 *
             (3 * C48331 + ae * C48332 +
              C48108 * (2 * C48325 + ae * C48327 +
                        C48108 * (C48132 + ae * C48108 * C48158 +
                                  C48108 * (ae * C48158 + C48108 * C48141))))) /
        C47860;
    const double C48755 = C48753 + C48750;
    const double C171 = C158 + C159;
    const double C5090 = C5071 + C5072;
    const double C315 = C301 + C302;
    const double C5258 = C5235 + C5236;
    const double C455 = C441 + C442;
    const double C5088 = C5067 + C5068;
    const double C5424 = C5401 + C5402;
    const double C15250 = C15227 + C15228;
    const double C30898 = C30877 + C30878;
    const double C1141 = C1127 + C1128;
    const double C6535 = C6512 + C6513;
    const double C1536 = C1518 + C1519;
    const double C5261 = C5241 + C5242;
    const double C6753 = C6738 + C6739;
    const double C15433 = C15410 + C15411;
    const double C31071 = C31051 + C31052;
    const double C2583 = C2558 + C2559;
    const double C5427 = C5407 + C5408;
    const double C15248 = C15223 + C15224;
    const double C15615 = C15592 + C15593;
    const double C31237 = C31217 + C31218;
    const double C11600 = C48995 * C1979;
    const double C12672 = C49082 * C1979;
    const double C32346 = C49082 * C1979;
    const double C2760 = C49275 * C2415;
    const double C6745 = C49082 * C2415;
    const double C15421 = C49275 * C2415;
    const double C19001 = C15195 * C2415;
    const double C25197 = C49297 * C2415;
    const double C32572 = C49082 * C2415;
    const double C36832 = C36607 * C2415;
    const double C38422 = C49085 * C2415;
    const double C10160 = C49275 * C2416;
    const double C12880 = C49082 * C2416;
    const double C16721 = C49275 * C2416;
    const double C32564 = C49082 * C2416;
    const double C38196 = C36607 * C2416;
    const double C2958 = C49275 * C2941;
    const double C15603 = C49275 * C2941;
    const double C20205 = C49288 * C2941;
    const double C33814 = C49288 * C2941;
    const double C37014 = C36607 * C2941;
    const double C18999 = C49275 * C3392;
    const double C20369 = C49288 * C3392;
    const double C25195 = C49275 * C3392;
    const double C33978 = C49288 * C3392;
    const double C38420 = C36607 * C3392;
    const double C20523 = C49288 * C3806;
    const double C34132 = C49288 * C3806;
    const double C2759 = C2534 * C2406;
    const double C6744 = C5043 * C2406;
    const double C15420 = C15199 * C2406;
    const double C19000 = C15198 * C2406;
    const double C25196 = C2533 * C2406;
    const double C32571 = C30853 * C2406;
    const double C10159 = C2534 * C2408;
    const double C12879 = C5043 * C2408;
    const double C16720 = C15199 * C2408;
    const double C32563 = C30853 * C2408;
    const double C18998 = C15199 * C3388;
    const double C25194 = C2534 * C3388;
    const double C1546 = C1538 * C49272;
    const double C8304 = C1538 * C49272;
    const double C26732 = C1538 * C26391;
    const double C9376 =
        (3 * (C48280 + ae * (C48109 * C48320 + C48291 * ae) + C48108 * C48360) +
         ae * (C48109 * C48332 + (2 * C48291 + C48108 * C48357) * ae) +
         C48108 *
             (2 * C48360 + ae * (C48109 * C48327 + C48357 * ae) +
              C48108 * (C48356 +
                        ae * (C48109 * C48108 * C48158 + C48108 * C48209 * ae) +
                        C48108 * (ae * (C48109 * C48158 + C48209 * ae) +
                                  C48108 * (ae * C48173 + C48109 * C48141))))) /
        C47860;
    const double C9862 =
        (2 * (ae * (C48152 + C48109 * C48355 + C48109 * C48207 * ae) +
              C48108 * C48424) +
         ae * (C48262 + C48109 * (C48109 * C48327 + C48357 * ae) +
               C48109 * C48357 * ae) +
         C48108 *
             (C48424 + ae * (C48320 + C48109 * C48409 + C48109 * C48398 * ae) +
              C48108 * (ae * (C48149 + C48109 * C48405 + C48109 * C48209 * ae) +
                        C48108 * (C48132 + ae * C48109 * C48173 +
                                  C48109 * C48406)))) /
        C47860;
    const double C48680 = C48679 + C48673;
    const double C632 =
        (2 * C48214 + C48116 * C48217 +
         C48108 * (C48108 * C48222 + C48549 * ae) + C48108 * C48549 * ae) /
        C47858;
    const double C733 =
        (C48109 * C48108 * C48190 + C48108 * C48549 * ae) / C47858;
    const double C734 = (C48109 * (C48108 * C48222 + C48549 * ae)) / C47858;
    const double C984 =
        (2 * C48182 + C48116 * C48185 +
         C48109 * (C48109 * C48190 + C48549 * ae) + C48109 * C48549 * ae) /
        C47858;
    const double C120 = 4 * (2 * C48540 + C48116 * C48544) +
                        C48116 * (3 * C48544 + C48116 * C48549);
    const double C272 = C48108 * (3 * C48544 + C48116 * C48549);
    const double C412 = C48109 * (3 * C48544 + C48116 * C48549);
    const double C623 = 2 * C48540 + C48116 * C48544 + C48549 * C48259;
    const double C725 = C48109 * C48108 * C48549;
    const double C976 = 2 * C48540 + C48116 * C48544 + C48549 * C48304;
    const double C1302 =
        2 * C48108 * C48549 + C48108 * (C48549 + C48254 * C48259);
    const double C1500 = C48109 * (C48549 + C48254 * C48259);
    const double C2931 =
        2 * C48109 * C48549 + C48109 * (C48549 + C48254 * C48304);
    const double C2754 = C49275 * C2409;
    const double C6741 = C49082 * C2409;
    const double C15415 = C49275 * C2409;
    const double C35421 = C49082 * C2409;
    const double C36826 = C36607 * C2409;
    const double C2753 = C2534 * C2399;
    const double C6740 = C5043 * C2399;
    const double C15414 = C15199 * C2399;
    const double C35420 = C30853 * C2399;
    const double C1813 =
        (3 * (C48217 + C48108 * C48613 + C48611 * ae) +
         C48108 * (2 * C48613 +
                   C48108 * (C48175 + C48108 * (C48108 * C48230 + C48252 * ae) +
                             C48297 * ae) +
                   C48614 * ae) +
         (2 * C48611 + C48108 * C48614) * ae) /
        C47858;
    const double C1977 =
        (C48109 * (2 * C48613 +
                   C48108 * (C48175 + C48108 * (C48108 * C48230 + C48252 * ae) +
                             C48297 * ae) +
                   C48614 * ae)) /
        C47858;
    const double C2410 =
        (C48108 * C48217 + C48544 * ae + C48613 * C48304) / C47858;
    const double C2412 =
        (C48217 + C48108 * C48613 + C48611 * ae +
         (C48175 + C48108 * (C48108 * C48230 + C48252 * ae) + C48297 * ae) *
             C48304) /
        C47858;
    const double C3390 =
        (2 * C48109 * C48613 +
         C48109 * (C48613 + (C48108 * C48230 + C48252 * ae) * C48304)) /
        C47858;
    const double C3803 =
        (3 * (C48185 + C48109 * C48668 + C48666 * ae) +
         C48109 * (2 * C48668 +
                   C48109 * (C48160 + C48109 * (C48109 * C48198 + C48252 * ae) +
                             C48109 * C48252 * ae) +
                   C48669 * ae) +
         (2 * C48666 + C48109 * C48669) * ae) /
        C47858;
    const double C2952 = C49275 * C2933;
    const double C15597 = C49275 * C2933;
    const double C20215 = C49288 * C2933;
    const double C33824 = C49288 * C2933;
    const double C37008 = C36607 * C2933;
    const double C1345 = C1326 + C1327;
    const double C1535 = C1516 + C1517;
    const double C6536 = C6514 + C6515;
    const double C32129 = C32119 + C32120;
    const double C17902 =
        (3 * (C48264 + C48109 * C48744 + C48742 * ae) +
         C48109 * (2 * C48744 +
                   C48109 * (C48334 +
                             C48109 * (C48109 * C48108 * C48337 + C48443 * ae) +
                             C48109 * C48443 * ae) +
                   C48745 * ae) +
         (2 * C48742 + C48109 * C48745) * ae) /
        C47858;
    const double C19013 = C19004 + C19005;
    const double C25209 = C25200 + C25201;
    const double C48761 = C48187 + C48757;
    const double C48691 = C48219 + C48690;
    const double C9283 = C113 * C1811;
    const double C11602 = C48995 * C1974;
    const double C12676 = C49082 * C1974;
    const double C32350 = C49082 * C1974;
    const double C11599 = C113 * C1975;
    const double C12671 = C5043 * C1975;
    const double C32345 = C30853 * C1975;
    const double C10154 = C49275 * C2407;
    const double C12884 = C49082 * C2407;
    const double C16715 = C49275 * C2407;
    const double C32568 = C49082 * C2407;
    const double C38202 = C36607 * C2407;
    const double C9281 = C113 * C1806;
    const double C11601 = C113 * C1970;
    const double C12675 = C5043 * C1970;
    const double C32349 = C30853 * C1970;
    const double C10153 = C2534 * C2398;
    const double C12883 = C5043 * C2398;
    const double C16714 = C15199 * C2398;
    const double C32567 = C30853 * C2398;
    const double C20531 = C49288 * C3801;
    const double C34140 = C49288 * C3801;
    const double C9373 = (C48109 * (3 * C48262 + C48108 * C48332) +
                          (3 * C48598 + C48108 * C48677) * ae) /
                         C47858;
    const double C9858 =
        (2 * C48256 + C48108 * C48262 +
         C48109 * (C48109 * C48332 + C48677 * ae) + C48109 * C48677 * ae) /
        C47858;
    const double C9268 = 4 * (2 * C48595 + C48108 * C48598) +
                         C48108 * (3 * C48598 + C48108 * C48677);
    const double C9370 = C48109 * (3 * C48598 + C48108 * C48677);
    const double C9856 = 2 * C48595 + C48108 * C48598 + C48677 * C48304;
    const double C10756 =
        2 * C48109 * C48677 + C48109 * (C48677 + C48415 * C48304);
    const double C11202 =
        (3 * (C48262 + C48109 * C48737 + C48735 * ae) +
         C48109 * (2 * C48737 +
                   C48109 * (C48327 + C48109 * (C48109 * C48386 + C48408 * ae) +
                             C48109 * C48408 * ae) +
                   C48738 * ae) +
         (2 * C48735 + C48109 * C48738) * ae) /
        C47858;
    const double C10768 = C49275 * C10327;
    const double C17317 = C49275 * C10327;
    const double C21881 = C49288 * C10327;
    const double C42869 = C49288 * C10327;
    const double C47433 = C36607 * C10327;
    const double C48434 = C48431 + C48432;
    const double C48708 = C48707 + C48404;
    const double C18223 =
        (4 * (2 * C48109 * C48676 + C48109 * C48775) +
         C48109 * (3 * C48775 + C48109 * (2 * C48109 * C48704 +
                                          C48109 * (C48704 + (C48108 * C48228 +
                                                              C48249 * ae) *
                                                                 C48304)))) /
        C47858;
    const double C48416 = C48356 + C48413;
    const double C48770 = C48320 + C48766;
    const double C22035 = C49288 * C11200;
    const double C43023 = C49288 * C11200;
    const double C17987 = 4 * (2 * C48652 + C48109 * C48655) +
                          C48109 * (3 * C48655 + C48109 * C48754);
    const double C142 =
        (5 * (3 * C48134 + C48116 * C48145) +
         C48116 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C290 =
        (ae * (3 * (C48117 * C48118 * C48147 + C48149 * C48124) +
               C48116 *
                   (2 * C48116 * C48149 +
                    C48116 * (C48149 + C48129 * C48130 * C48147 * C48124))) +
         C48108 * (3 * C48134 + C48116 * C48145)) /
        C47860;
    const double C295 =
        (ae * (4 * (2 * C48116 * C48149 + C48116 * C48160) +
               C48116 * (3 * C48160 +
                         C48116 * (2 * C48116 * C48158 +
                                   C48116 * (C48158 + C48137 * C48138 * C48147 *
                                                          C48124)))) +
         C48108 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C430 =
        (ae * (3 * (C48117 * C48118 * C48162 + C48164 * C48124) +
               C48116 *
                   (2 * C48116 * C48164 +
                    C48116 * (C48164 + C48129 * C48130 * C48162 * C48124))) +
         C48109 * (3 * C48134 + C48116 * C48145)) /
        C47860;
    const double C435 =
        (ae * (4 * (2 * C48116 * C48164 + C48116 * C48175) +
               C48116 * (3 * C48175 +
                         C48116 * (2 * C48116 * C48173 +
                                   C48116 * (C48173 + C48137 * C48138 * C48162 *
                                                          C48124)))) +
         C48109 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C638 =
        (2 * C48116 * C48127 + C48116 * C48134 + ae * C48108 * C48190 +
         C48108 * (ae * C48190 + C48108 * C48145)) /
        C47860;
    const double C740 =
        (ae *
             (C48109 * C48190 + (2 * C48116 * C48207 +
                                 C48116 * (C48207 + C48123 * C48125 * C48124)) *
                                    ae) +
         C48108 *
             (ae * (2 * C48116 * C48164 + C48116 * C48175) + C48109 * C48145)) /
        C47860;
    const double C991 =
        (2 * C48116 * C48127 + C48116 * C48134 + ae * C48109 * C48222 +
         C48109 * (ae * C48222 + C48109 * C48145)) /
        C47860;
    const double C2417 =
        (ae * (C48185 + C48109 * (C48109 * C48160 + C48242 * ae) +
               C48109 * C48242 * ae) +
         C48108 * (C48134 + ae * C48109 * C48175 + C48109 * C48288)) /
        C47860;
    const double C2418 =
        (C48134 + ae * C48109 * C48175 + C48109 * C48288 +
         ae * (C48271 + C48109 * (C48109 * C48108 * C48198 + C48297 * ae) +
               C48109 * C48297 * ae) +
         C48108 * (ae * (C48160 + C48109 * (C48109 * C48198 + C48252 * ae) +
                         C48109 * C48252 * ae) +
                   C48108 * (C48143 + ae * C48109 * C48230 +
                             C48109 * (ae * C48230 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C2940 =
        (2 * (ae * C48217 + C48109 * C48134) +
         ae * (C48217 + C48175 * std::pow(C48109, 2)) +
         C48109 * (C48134 + ae * C48109 * C48175 + C48109 * C48288)) /
        C47860;
    const double C3393 =
        (ae * (2 * (C48109 * C48160 + C48242 * ae) +
               C48109 * (C48160 + C48109 * (C48109 * C48198 + C48252 * ae) +
                         C48109 * C48252 * ae) +
               (C48242 + C48252 * C48304) * ae) +
         C48108 * (2 * C48288 + ae * (C48175 + C48230 * C48304) +
                   C48109 * (C48143 + ae * C48109 * C48230 +
                             C48109 * (ae * C48230 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1344 = C1324 + C1325;
    const double C1534 = C1514 + C1515;
    const double C6534 = C6510 + C6511;
    const double C32127 = C32115 + C32116;
    const double C48347 = C48342 + C48345;
    const double C48373 = C48370 + C48371;
    const double C48447 = C48446 + C48442;
    const double C48392 = C48108 * C48390;
    const double C48417 = C48108 * C48414;
    const double C48438 = C48108 * C48437;
    const double C48453 = C48109 * C48437;
    const double C48201 = C48116 * C48200;
    const double C1314 =
        (2 * (ae * C48190 + C48108 * C48145) +
         ae * (C48190 + C48200 * std::pow(C48108, 2)) +
         C48108 * (C48145 + ae * C48108 * C48200 +
                   C48108 * (ae * C48200 +
                             C48108 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1309 =
        (2 * C48108 * C48190 + C48108 * (C48190 + C48200 * C48259)) / C47858;
    const double C1507 = (C48109 * (C48190 + C48200 * C48259) +
                          (C48549 + C48254 * C48259) * ae) /
                         C47858;
    const double C2938 =
        (2 * (C48109 * C48190 + C48549 * ae) +
         C48109 * (C48190 + C48109 * (C48109 * C48200 + C48254 * ae) +
                   C48109 * C48254 * ae) +
         (C48549 + C48254 * C48304) * ae) /
        C47858;
    const double C1816 =
        (3 * (C48134 + ae * C48271 + C48108 * C48275) +
         ae * (2 * C48271 + C48108 * C48276) +
         C48108 * (2 * C48275 + ae * C48276 +
                   C48108 * (C48143 + ae * C48108 * C48198 +
                             C48108 * (ae * C48198 +
                                       C48108 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1980 =
        (2 * (ae * (C48109 * C48160 + C48242 * ae) + C48108 * C48288) +
         ae * (C48109 * C48276 + (C48242 + C48252 * C48259) * ae) +
         C48108 *
             (C48288 + ae * (C48109 * C48108 * C48198 + C48108 * C48252 * ae) +
              C48108 *
                  (ae * (C48109 * C48198 + C48252 * ae) +
                   C48108 * (ae * C48230 +
                             C48109 * (C48141 + std::pow(C48113, 8) * bs[8] *
                                                    C48114 * C48124))))) /
        C47860;
    const double C1812 = (3 * (C48185 + C48160 * C48259) +
                          C48108 * (2 * C48271 + C48108 * C48276)) /
                         C47858;
    const double C1976 = (C48109 * (2 * C48271 + C48108 * C48276) +
                          (2 * C48611 + C48108 * C48614) * ae) /
                         C47858;
    const double C2411 =
        (C48185 + C48160 * C48259 + C48109 * (C48109 * C48276 + C48614 * ae) +
         C48109 * C48614 * ae) /
        C47858;
    const double C48348 = C48340 + C48346;
    const double C48393 = C48108 * C48391;
    const double C10757 =
        (2 * (C48109 * C48332 + C48677 * ae) +
         C48109 * (C48332 + C48109 * (C48109 * C48391 + C48415 * ae) +
                   C48109 * C48415 * ae) +
         (C48677 + C48415 * C48304) * ae) /
        C47858;
    const double C48233 = C48116 * C48232;
    const double C1512 =
        (ae * C48222 + C48109 * C48145 +
         ae * (C48109 * C48108 * C48200 + C48108 * C48254 * ae) +
         C48108 * (ae * (C48109 * C48200 + C48254 * ae) +
                   C48108 * (ae * C48232 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C2745 =
        (ae * (C48190 + C48109 * (C48109 * C48200 + C48254 * ae) +
               C48109 * C48254 * ae) +
         C48108 * (C48145 + ae * C48109 * C48232 +
                   C48109 * (ae * C48232 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C2943 =
        (2 * (ae * C48222 + C48109 * C48145) +
         ae * (C48222 + C48232 * std::pow(C48109, 2)) +
         C48109 * (C48145 + ae * C48109 * C48232 +
                   C48109 * (ae * C48232 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1310 =
        (2 * (C48108 * C48222 + C48549 * ae) +
         C48108 * (C48222 + C48108 * (C48108 * C48232 + C48254 * ae) +
                   C48108 * C48254 * ae) +
         (C48549 + C48254 * C48259) * ae) /
        C47858;
    const double C1508 =
        (C48109 * (C48222 + C48108 * (C48108 * C48232 + C48254 * ae) +
                   C48108 * C48254 * ae)) /
        C47858;
    const double C2744 = (C48108 * C48222 + C48549 * ae +
                          (C48108 * C48232 + C48254 * ae) * C48304) /
                         C47858;
    const double C2939 =
        (2 * C48109 * C48222 + C48109 * (C48222 + C48232 * C48304)) / C47858;
    const double C3807 =
        (3 * (C48134 + ae * C48316 + C48109 * C48288) +
         ae * (2 * C48316 + C48109 * C48318) +
         C48109 * (2 * C48288 + ae * C48318 +
                   C48109 * (C48143 + ae * C48109 * C48230 +
                             C48109 * (ae * C48230 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C3804 = (3 * (C48217 + C48175 * C48304) +
                          C48109 * (2 * C48316 + C48109 * C48318)) /
                         C47858;
    const double C48483 = C48481 + C48482;
    const double C48493 = C48109 * C48490;
    const double C184 = C176 + C177;
    const double C1139 = C1121 + C1122;
    const double C3931 = C3919 + C3920;
    const double C1145 = C1138 * C49272;
    const double C1336 = C1138 * C49295;
    const double C4075 = C1138 * C49040;
    const double C7976 = C1138 * C49272;
    const double C8148 = C1138 * C7962;
    const double C22674 = C1138 * C49040;
    const double C26404 = C1138 * C26391;
    const double C26576 = C1138 * C49043;
    const double C12679 = C6538 + C6539;
    const double C12670 = C6539 + C6538;
    const double C1548 = C1540 * C49295;
    const double C4219 = C1540 * C49040;
    const double C8306 = C1540 * C7962;
    const double C22816 = C1540 * C49040;
    const double C26734 = C1540 * C49043;
    const double C6528 = C5265 + C5266;
    const double C6509 = C5266 + C5265;
    const double C1350 = C1346 * C49272;
    const double C8146 = C1346 * C49272;
    const double C11322 = C1346 * C49282;
    const double C23651 = C1346 * C49282;
    const double C26574 = C1346 * C26391;
    const double C1144 = C1137 * C1111;
    const double C1337 = C1137 * C1110;
    const double C4076 = C1137 * C3913;
    const double C7975 = C1137 * C7969;
    const double C8149 = C1137 * C7968;
    const double C22675 = C1137 * C22512;
    const double C1549 = C1541 * C1110;
    const double C4220 = C1541 * C3913;
    const double C8307 = C1541 * C7968;
    const double C22817 = C1541 * C22512;
    const double C6529 = C5267 + C5268;
    const double C6508 = C5268 + C5267;
    const double C1351 = C1347 * C1111;
    const double C8147 = C1347 * C7969;
    const double C1547 = C1539 * C1111;
    const double C8305 = C1539 * C7969;
    const double C12680 = C6540 + C6541;
    const double C12669 = C6541 + C6540;
    const double C9286 = C9279 + C9280;
    const double C14582 = C14575 + C14576;
    const double C9629 = C9623 + C9624;
    const double C13241 = C13233 + C13234;
    const double C14724 = C14717 + C14718;
    const double C17159 = C17146 + C17147;
    const double C32937 = C32929 + C32930;
    const double C7314 = C7306 + C7307;
    const double C10166 = C10135 + C10136;
    const double C16727 = C16696 + C16697;
    const double C17341 = C17324 + C17325;
    const double C33155 = C33143 + C33144;
    const double C10172 = C10147 + C10148;
    const double C13447 = C13439 + C13440;
    const double C16733 = C16708 + C16709;
    const double C17335 = C17312 + C17313;
    const double C33151 = C33135 + C33136;
    const double C10791 = C10773 + C10774;
    const double C17340 = C17322 + C17323;
    const double C185 = C178 + C179;
    const double C3932 = C3923 + C3924;
    const double C163 = C48995 * C133;
    const double C300 = C48995 * C279;
    const double C440 = C48995 * C419;
    const double C5074 = C49082 * C419;
    const double C30884 = C49082 * C419;
    const double C1132 = C48995 * C631;
    const double C9530 = C48995 * C9271;
    const double C160 = C113 * C132;
    const double C297 = C113 * C278;
    const double C437 = C113 * C418;
    const double C5069 = C5043 * C418;
    const double C30879 = C30853 * C418;
    const double C2560 = C2534 * C985;
    const double C5399 = C5043 * C985;
    const double C15225 = C15199 * C985;
    const double C31209 = C30853 * C985;
    const double C48554 = C48552 + C48553;
    const double C2743 =
        (C48108 * C48190 + C48109 * (C48109 * C48108 * C48200 + C48634 * ae) +
         C48109 * C48634 * ae) /
        C47858;
    const double C2742 = C48108 * C48549 + C48634 * C48304;
    const double C9269 = 4 * (2 * C48603 + C48108 * C48606) +
                         C48108 * (3 * C48606 + C48108 * C48689);
    const double C9371 = C48109 * (3 * C48606 + C48108 * C48689);
    const double C10120 = 2 * C48603 + C48108 * C48606 + C48689 * C48304;
    const double C17988 = 4 * (2 * C48659 + C48109 * C48662) +
                          C48109 * (3 * C48662 + C48109 * C48762);
    const double C48705 = C48702 + C48703;
    const double C18221 = 4 * (2 * C48728 + C48109 * C48731) +
                          C48109 * (3 * C48731 + C48109 * C48771);
    const double C48783 = C48780 + C48781;
    const double C49216 = C48888 * C48878;
    const double C49258 = C49221 + C48888;
    const double C49224 = C48896 / C47894;
    const double C49220 = C48896 * C48878;
    const double C3908 = C49305 - (C48888 * C48879) / C47858;
    const double C47955 = C47950 - C47953;
    const double C47930 = C47926 * ae;
    const double C22511 = (-C47912) / C47894 - (C47926 * be) / C47858;
    const double C47939 = C47935 * be;
    const double C26403 = C1137 * C47963;
    const double C26575 = C1347 * C47963;
    const double C26733 = C1539 * C47963;
    const double C9185 =
        (C47963 / C47894 + (0 * ae) / C47858) / C47894 - (0 * be) / C47858;
    const double C11313 = C47963 / C47894 - (0 * be) / C47858;
    const double C23642 = C47963 / C47894 + (0 * ae) / C47858;
    const double C49277 = C49242 / C47858;
    const double C49299 = C49280 / C47894;
    const double C49300 = C49281 + C49246;
    const double C11306 = C49246 - C49041 / C47862;
    const double C49279 = C49243 / C47858;
    const double C11329 = C167 * C11304;
    const double C11316 = C165 * C11304;
    const double C11467 = C319 * C11304;
    const double C11607 = C459 * C11304;
    const double C7989 = C7977 + C7978;
    const double C48042 = C48037 - C48040;
    const double C48017 = C48013 * ae;
    const double C30852 = (-C47999) / C47894 - (C48013 * be) / C47858;
    const double C48026 = C48022 * be;
    const double C36636 = C48050 * C985;
    const double C36634 = C48050 * C983;
    const double C36628 = C48050 * C975;
    const double C36622 = C48050 * C981;
    const double C36616 = C48050 * C974;
    const double C36837 = C48050 * C2397;
    const double C36831 = C48050 * C2406;
    const double C36825 = C48050 * C2399;
    const double C37019 = C48050 * C2929;
    const double C37013 = C48050 * C2934;
    const double C37007 = C48050 * C2928;
    const double C37001 = C48050 * C2932;
    const double C38201 = C48050 * C2398;
    const double C38195 = C48050 * C2408;
    const double C38191 = C48050 * C2402;
    const double C38185 = C48050 * C2395;
    const double C38425 = C48050 * C3383;
    const double C38419 = C48050 * C3388;
    const double C38783 = C48050 * C2396;
    const double C38777 = C48050 * C2404;
    const double C38995 = C48050 * C3382;
    const double C38989 = C48050 * C3386;
    const double C47432 = C48050 * C10324;
    const double C17818 =
        (C48050 / C47894 + (0 * ae) / C47858) / C47894 - (0 * be) / C47858;
    const double C20188 = C48050 / C47894 - (0 * be) / C47858;
    const double C33797 = C48050 / C47894 + (0 * ae) / C47858;
    const double C49283 = C49248 / C47858;
    const double C49302 = C49286 / C47894;
    const double C5098 = C5094 * C48978;
    const double C6298 = C5094 * C49239;
    const double C27689 = C5094 * C22505;
    const double C5097 = C5093 * C114;
    const double C6297 = C5093 * C3912;
    const double C2588 = C2568 + C2569;
    const double C2585 = C2562 + C2563;
    const double C2582 = C2556 + C2557;
    const double C2579 = C2550 + C2551;
    const double C2576 = C2544 + C2545;
    const double C2573 = C2538 + C2539;
    const double C2781 = C2767 + C2768;
    const double C2778 = C2761 + C2762;
    const double C2775 = C2755 + C2756;
    const double C2772 = C2749 + C2750;
    const double C2979 = C2965 + C2966;
    const double C2976 = C2959 + C2960;
    const double C2973 = C2953 + C2954;
    const double C2970 = C2947 + C2948;
    const double C10177 = C10157 + C10158;
    const double C10174 = C10151 + C10152;
    const double C10171 = C10145 + C10146;
    const double C10168 = C10139 + C10140;
    const double C10165 = C10133 + C10134;
    const double C10162 = C10127 + C10128;
    const double C10609 = C10599 + C10600;
    const double C10606 = C10593 + C10594;
    const double C10795 = C10781 + C10782;
    const double C10792 = C10775 + C10776;
    const double C10789 = C10769 + C10770;
    const double C10786 = C10763 + C10764;
    const double C25210 = C25202 + C25203;
    const double C49303 = C49287 + C49252;
    const double C20183 = C49252 - C49083 / C47862;
    const double C49285 = C49249 / C47858;
    const double C20221 = C20181 * C126;
    const double C20213 = C20181 * C138;
    const double C20199 = C20181 * C137;
    const double C20191 = C20181 * C124;
    const double C20383 = C20181 * C285;
    const double C20375 = C20181 * C293;
    const double C20537 = C20181 * C425;
    const double C20529 = C20181 * C433;
    const double C21499 = C20181 * C294;
    const double C21491 = C20181 * C287;
    const double C21887 = C20181 * C625;
    const double C21879 = C20181 * C635;
    const double C22041 = C20181 * C727;
    const double C22033 = C20181 * C737;
    const double C15254 = C15235 + C15236;
    const double C15251 = C15229 + C15230;
    const double C15246 = C15219 + C15220;
    const double C15243 = C15213 + C15214;
    const double C15240 = C15207 + C15208;
    const double C15237 = C15201 + C15202;
    const double C15443 = C15430 + C15431;
    const double C15440 = C15424 + C15425;
    const double C15437 = C15418 + C15419;
    const double C15434 = C15412 + C15413;
    const double C15625 = C15612 + C15613;
    const double C15622 = C15606 + C15607;
    const double C15619 = C15600 + C15601;
    const double C15616 = C15594 + C15595;
    const double C16737 = C16716 + C16717;
    const double C16734 = C16710 + C16711;
    const double C16731 = C16704 + C16705;
    const double C16728 = C16698 + C16699;
    const double C16725 = C16692 + C16693;
    const double C16722 = C16686 + C16687;
    const double C17163 = C17154 + C17155;
    const double C17160 = C17148 + C17149;
    const double C17345 = C17332 + C17333;
    const double C17342 = C17326 + C17327;
    const double C17339 = C17320 + C17321;
    const double C17336 = C17314 + C17315;
    const double C19015 = C19008 + C19009;
    const double C19012 = C19002 + C19003;
    const double C180 = C170 * C114;
    const double C3930 = C170 * C3912;
    const double C324 = C316 * C114;
    const double C1134 = C316 * C1110;
    const double C3925 = C316 * C3913;
    const double C4070 = C316 * C3912;
    const double C7986 = C316 * C7968;
    const double C22524 = C316 * C22512;
    const double C464 = C456 * C114;
    const double C4214 = C456 * C3912;
    const double C5095 = C5085 + C5086;
    const double C1147 = C1140 * C1111;
    const double C1329 = C1140 * C1110;
    const double C4072 = C1140 * C3913;
    const double C7981 = C1140 * C7969;
    const double C8143 = C1140 * C7968;
    const double C22671 = C1140 * C22512;
    const double C26409 = C1140 * C47963;
    const double C1545 = C1537 * C1110;
    const double C4216 = C1537 * C3913;
    const double C8301 = C1537 * C7968;
    const double C22813 = C1537 * C22512;
    const double C6299 = C5264 + C5263;
    const double C6519 = C5263 + C5264;
    const double C14571 = C13244 + C13243;
    const double C9528 = C48995 * C9274;
    const double C181 = C171 * C48978;
    const double C3929 = C171 * C49239;
    const double C22528 = C171 * C22505;
    const double C323 = C315 * C48978;
    const double C1133 = C315 * C49295;
    const double C3926 = C315 * C49040;
    const double C4069 = C315 * C49239;
    const double C7985 = C315 * C7962;
    const double C22525 = C315 * C49040;
    const double C22668 = C315 * C22505;
    const double C26413 = C315 * C49043;
    const double C463 = C455 * C48978;
    const double C4213 = C455 * C49239;
    const double C22810 = C455 * C22505;
    const double C5096 = C5087 + C5088;
    const double C1148 = C1141 * C49272;
    const double C1328 = C1141 * C49295;
    const double C4071 = C1141 * C49040;
    const double C7982 = C1141 * C49272;
    const double C8142 = C1141 * C7962;
    const double C22670 = C1141 * C49040;
    const double C26410 = C1141 * C26391;
    const double C26570 = C1141 * C49043;
    const double C1544 = C1536 * C49295;
    const double C4215 = C1536 * C49040;
    const double C8300 = C1536 * C7962;
    const double C22812 = C1536 * C49040;
    const double C26728 = C1536 * C49043;
    const double C6300 = C5262 + C5261;
    const double C6518 = C5261 + C5262;
    const double C2975 = C2957 + C2958;
    const double C15620 = C15602 + C15603;
    const double C2777 = C2759 + C2760;
    const double C6756 = C6744 + C6745;
    const double C15438 = C15420 + C15421;
    const double C19011 = C19000 + C19001;
    const double C25207 = C25196 + C25197;
    const double C32583 = C32571 + C32572;
    const double C10178 = C10159 + C10160;
    const double C12887 = C12879 + C12880;
    const double C16739 = C16720 + C16721;
    const double C32579 = C32563 + C32564;
    const double C19010 = C18998 + C18999;
    const double C25206 = C25194 + C25195;
    const double C9620 = C48995 * C9376;
    const double C14574 = C49082 * C9376;
    const double C41739 = C49082 * C9376;
    const double C10592 = C49275 * C9862;
    const double C14716 = C49082 * C9862;
    const double C17145 = C49275 * C9862;
    const double C41881 = C49082 * C9862;
    const double C47261 = C36607 * C9862;
    const double C9270 =
        (4 * (2 * C48597 + C48108 * C48680 + C48598 * ae) +
         C48108 *
             (3 * C48680 +
              C48108 * (2 * C48676 +
                        C48108 * (C48164 + C48108 * (C48108 * C48173 + C48400) +
                                  C48404) +
                        C48357 * ae) +
              C48677 * ae) +
         (3 * C48598 + C48108 * C48677) * ae) /
        C47858;
    const double C9372 =
        (C48109 *
         (3 * C48680 +
          C48108 * (2 * C48676 +
                    C48108 * (C48164 + C48108 * (C48108 * C48173 + C48400) +
                              C48404) +
                    C48357 * ae) +
          C48677 * ae)) /
        C47858;
    const double C1129 = C113 * C632;
    const double C4212 = C48995 * C733;
    const double C5238 = C49082 * C733;
    const double C31048 = C49082 * C733;
    const double C4209 = C113 * C734;
    const double C5233 = C5043 * C734;
    const double C31043 = C30853 * C734;
    const double C2567 = C49275 * C984;
    const double C5404 = C49082 * C984;
    const double C15232 = C49275 * C984;
    const double C31214 = C49082 * C984;
    const double C36643 = C36607 * C984;
    const double C162 = C113 * C120;
    const double C299 = C113 * C272;
    const double C439 = C113 * C412;
    const double C5073 = C5043 * C412;
    const double C30883 = C30853 * C412;
    const double C1131 = C113 * C623;
    const double C4211 = C113 * C725;
    const double C5237 = C5043 * C725;
    const double C31047 = C30853 * C725;
    const double C2566 = C2534 * C976;
    const double C5403 = C5043 * C976;
    const double C15231 = C15199 * C976;
    const double C31213 = C30853 * C976;
    const double C36642 = C48050 * C976;
    const double C2774 = C2753 + C2754;
    const double C6754 = C6740 + C6741;
    const double C15435 = C15414 + C15415;
    const double C35426 = C35420 + C35421;
    const double C2747 = C2534 * C2410;
    const double C6736 = C5043 * C2410;
    const double C15408 = C15199 * C2410;
    const double C35416 = C30853 * C2410;
    const double C36819 = C48050 * C2410;
    const double C2972 = C2951 + C2952;
    const double C15617 = C15596 + C15597;
    const double C1349 = C1345 * C1111;
    const double C8141 = C1345 * C7969;
    const double C26569 = C1345 * C47963;
    const double C1543 = C1535 * C1111;
    const double C8299 = C1535 * C7969;
    const double C26727 = C1535 * C47963;
    const double C48763 = C48761 + C48758;
    const double C48692 = C48691 + C48685;
    const double C9288 = C9283 + C9284;
    const double C11609 = C11599 + C11600;
    const double C12681 = C12671 + C12672;
    const double C32365 = C32345 + C32346;
    const double C9287 = C9281 + C9282;
    const double C11610 = C11601 + C11602;
    const double C12683 = C12675 + C12676;
    const double C32367 = C32349 + C32350;
    const double C10175 = C10153 + C10154;
    const double C12889 = C12883 + C12884;
    const double C16736 = C16714 + C16715;
    const double C32581 = C32567 + C32568;
    const double C9622 = C48995 * C9373;
    const double C14578 = C49082 * C9373;
    const double C41743 = C49082 * C9373;
    const double C10598 = C49275 * C9858;
    const double C14720 = C49082 * C9858;
    const double C17151 = C49275 * C9858;
    const double C41885 = C49082 * C9858;
    const double C47267 = C36607 * C9858;
    const double C9529 = C113 * C9268;
    const double C9621 = C113 * C9370;
    const double C14577 = C5043 * C9370;
    const double C41742 = C30853 * C9370;
    const double C10597 = C2534 * C9856;
    const double C14719 = C5043 * C9856;
    const double C17150 = C15199 * C9856;
    const double C41884 = C30853 * C9856;
    const double C47266 = C48050 * C9856;
    const double C10788 = C10767 + C10768;
    const double C17337 = C17316 + C17317;
    const double C48436 = ae * C48434;
    const double C10330 =
        (2 * C48280 + ae * C48310 + C48109 * C48424 +
         ae * (2 * (C48109 * C48320 + C48291 * ae) +
               C48109 * (C48320 + C48109 * C48409 + C48109 * C48398 * ae) +
               (C48291 + C48398 * C48304) * ae) +
         C48108 * (ae * (2 * C48355 + C48109 * C48434 +
                         (C48207 + C48209 * C48304) * ae) +
                   C48108 * (2 * C48356 + ae * (C48164 + C48173 * C48304) +
                             C48109 * C48437))) /
        C47860;
    const double C48778 = C48109 * C48434;
    const double C17990 =
        (4 * (2 * C48654 + C48109 * C48755 + C48655 * ae) +
         C48109 * (3 * C48755 +
                   C48109 * (2 * C48355 + C48109 * C48434 + C48461 * ae) +
                   C48754 * ae) +
         (3 * C48655 + C48109 * C48754) * ae) /
        C47858;
    const double C48709 = C48108 * C48708;
    const double C10326 =
        (2 * C48109 * C48680 + C48109 * (C48680 + C48708 * C48304)) / C47858;
    const double C11203 =
        (3 * (C48680 + C48708 * C48304) +
         C48109 *
             (2 * C48109 * C48708 +
              C48109 *
                  (C48708 + (C48173 + C48108 * (C48108 * C48228 + C48249 * ae) +
                             C48430 * ae) *
                                C48304))) /
        C47858;
    const double C48772 = C48770 + C48767;
    const double C298 = C48995 * C290;
    const double C438 = C48995 * C430;
    const double C5070 = C49082 * C430;
    const double C30880 = C49082 * C430;
    const double C1130 = C48995 * C638;
    const double C4210 = C48995 * C740;
    const double C5234 = C49082 * C740;
    const double C31044 = C49082 * C740;
    const double C2561 = C49275 * C991;
    const double C5400 = C49082 * C991;
    const double C15226 = C49275 * C991;
    const double C31210 = C49082 * C991;
    const double C36637 = C36607 * C991;
    const double C2748 = C49275 * C2417;
    const double C6737 = C49082 * C2417;
    const double C15409 = C49275 * C2417;
    const double C35417 = C49082 * C2417;
    const double C36820 = C36607 * C2417;
    const double C2946 = C49275 * C2940;
    const double C15591 = C49275 * C2940;
    const double C20207 = C49288 * C2940;
    const double C33816 = C49288 * C2940;
    const double C37002 = C36607 * C2940;
    const double C1348 = C1344 * C49272;
    const double C8140 = C1344 * C49272;
    const double C11323 = C1344 * C49282;
    const double C23652 = C1344 * C49282;
    const double C26568 = C1344 * C26391;
    const double C1542 = C1534 * C49272;
    const double C8298 = C1534 * C49272;
    const double C26726 = C1534 * C26391;
    const double C10123 =
        (2 * (ae * (C48187 + C48109 * C48367 + C48109 * C48248 * ae) +
              C48108 * C48447) +
         ae * (C48269 + C48109 * (C48109 * C48344 + C48372 * ae) +
               C48109 * C48372 * ae) +
         C48108 *
             (C48447 +
              ae * (C48334 + C48109 * (C48109 * C48108 * C48337 + C48443 * ae) +
                    C48109 * C48443 * ae) +
              C48108 *
                  (ae * (C48193 + C48109 * (C48109 * C48337 + C48366 * ae) +
                         C48109 * C48366 * ae) +
                   C48108 * (C48336 + ae * C48109 * C48444 +
                             C48109 * (ae * C48444 + C48109 * C48116 *
                                                         std::pow(C48113, 8) *
                                                         bs[8] * C48114))))) /
        C47860;
    const double C10331 =
        (2 * C48284 + ae * C48314 + C48109 * C48447 +
         ae * (2 * (C48109 * C48334 + C48294 * ae) +
               C48109 *
                   (C48334 + C48109 * (C48109 * C48108 * C48337 + C48443 * ae) +
                    C48109 * C48443 * ae) +
               (C48294 + C48443 * C48304) * ae) +
         C48108 *
             (ae *
                  (2 * C48367 +
                   C48109 * (C48193 + C48109 * (C48109 * C48337 + C48366 * ae) +
                             C48109 * C48366 * ae) +
                   (C48248 + C48366 * C48304) * ae) +
              C48108 *
                  (2 * C48368 + ae * (C48225 + C48444 * C48304) +
                   C48109 * (C48336 + ae * C48109 * C48444 +
                             C48109 * (ae * C48444 + C48109 * C48116 *
                                                         std::pow(C48113, 8) *
                                                         bs[8] * C48114))))) /
        C47860;
    const double C17904 =
        (ae * (3 * (C48187 + C48109 * C48367 + C48471 * ae) +
               C48109 * (2 * C48367 +
                         C48109 * (C48193 +
                                   C48109 * (C48109 * C48337 + C48366 * ae) +
                                   C48109 * C48366 * ae) +
                         C48474 * ae) +
               (2 * C48471 + C48109 * C48474) * ae) +
         C48108 * (3 * C48447 + ae * (2 * C48441 + C48109 * C48475) +
                   C48109 * (2 * C48368 + ae * C48475 +
                             C48109 * (C48336 + ae * C48109 * C48444 +
                                       C48109 * (ae * C48444 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C48394 = C48382 + C48392;
    const double C48418 = C48416 + C48417;
    const double C48457 = C48456 + C48453;
    const double C48202 = C48192 + C48201;
    const double C9275 =
        (4 * (2 * C48268 + ae * C48269 + C48108 * C48347) +
         ae * (3 * C48269 + C48108 * C48348) +
         C48108 * (3 * C48347 + ae * C48348 +
                   C48108 * (2 * C48343 + ae * C48344 +
                             C48108 * (C48336 + ae * C48108 * C48337 +
                                       C48108 * (ae * C48337 +
                                                 C48108 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C9377 =
        (3 * (C48284 + ae * (C48109 * C48334 + C48294 * ae) + C48108 * C48373) +
         ae * (C48109 * C48348 + (2 * C48294 + C48108 * C48372) * ae) +
         C48108 *
             (2 * C48373 + ae * (C48109 * C48344 + C48372 * ae) +
              C48108 *
                  (C48368 +
                   ae * (C48109 * C48108 * C48337 + C48108 * C48366 * ae) +
                   C48108 * (ae * (C48109 * C48337 + C48366 * ae) +
                             C48108 * (ae * C48116 * C48228 +
                                       C48109 * C48116 * std::pow(C48113, 8) *
                                           bs[8] * C48114))))) /
        C47860;
    const double C9272 = (4 * (2 * C48264 + C48108 * C48269) +
                          C48108 * (3 * C48269 + C48108 * C48348)) /
                         C47858;
    const double C9374 = (C48109 * (3 * C48269 + C48108 * C48348) +
                          (3 * C48606 + C48108 * C48689) * ae) /
                         C47858;
    const double C10121 =
        (2 * C48264 + C48108 * C48269 +
         C48109 * (C48109 * C48348 + C48689 * ae) + C48109 * C48689 * ae) /
        C47858;
    const double C48395 = C48380 + C48393;
    const double C48234 = C48224 + C48233;
    const double C17994 =
        (4 * (2 * C48284 + ae * C48314 + C48109 * C48447) +
         ae * (3 * C48314 + C48109 * C48483) +
         C48109 * (3 * C48447 + ae * C48483 +
                   C48109 * (2 * C48368 + ae * C48475 +
                             C48109 * (C48336 + ae * C48109 * C48444 +
                                       C48109 * (ae * C48444 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C17992 = (4 * (2 * C48312 + C48109 * C48314) +
                           C48109 * (3 * C48314 + C48109 * C48483)) /
                          C47858;
    const double C48494 = C48492 + C48493;
    const double C1146 = C1139 + C1123;
    const double C3933 = C3931 + C3921;
    const double C14572 = C13242 + C13241;
    const double C172 = C160 + C161;
    const double C121 = 5 * (3 * C48544 + C48116 * C48549) +
                        C48116 * (4 * C48549 + C48116 * C48554);
    const double C277 = C48108 * (4 * C48549 + C48116 * C48554);
    const double C417 = C48109 * (4 * C48549 + C48116 * C48554);
    const double C624 = 3 * C48544 + C48116 * C48549 + C48554 * C48259;
    const double C726 = C48109 * C48108 * C48554;
    const double C977 = 3 * C48544 + C48116 * C48549 + C48554 * C48304;
    const double C9522 = 5 * (3 * C48598 + C48108 * C48677) +
                         C48108 * (4 * C48677 + C48108 * C48705);
    const double C9614 = C48109 * (4 * C48677 + C48108 * C48705);
    const double C9857 = 3 * C48598 + C48108 * C48677 + C48705 * C48304;
    const double C18451 = 5 * (3 * C48655 + C48109 * C48754) +
                          C48109 * (4 * C48754 + C48109 * C48783);
    const double C49254 = C49216 / C47858;
    const double C49292 = C49258 / C47894;
    const double C49293 = C49260 + C49224;
    const double C3910 = C49224 - C48894 / C47862;
    const double C49257 = C49220 / C47858;
    const double C47934 = C47930 / C47858;
    const double C22529 = C170 * C22511;
    const double C22522 = C168 * C22511;
    const double C22518 = C166 * C22511;
    const double C22514 = C164 * C22511;
    const double C22677 = C320 * C22511;
    const double C22673 = C318 * C22511;
    const double C22669 = C316 * C22511;
    const double C22819 = C460 * C22511;
    const double C22815 = C458 * C22511;
    const double C22811 = C456 * C22511;
    const double C27688 = C5093 * C22511;
    const double C47945 = C47939 / C47858;
    const double C11324 = C1345 * C11313;
    const double C11321 = C1347 * C11313;
    const double C23653 = C1345 * C23642;
    const double C23650 = C1347 * C23642;
    const double C49314 = C49277 + C49309;
    const double C11305 = C49299 - (C49043 * C49032) / C47858;
    const double C23654 = C1141 * C49300;
    const double C23649 = C1138 * C49300;
    const double C23792 = C1346 * C49300;
    const double C23930 = C1538 * C49300;
    const double C9178 = C49300 / C47894 - C49041 / C49261;
    const double C11325 = C1141 * C11306;
    const double C11320 = C1138 * C11306;
    const double C11463 = C1346 * C11306;
    const double C11603 = C1538 * C11306;
    const double C49310 = C49279 + C49299;
    const double C7990 = C7989 + C7979;
    const double C48021 = C48017 / C47858;
    const double C30885 = C30852 * C119;
    const double C30881 = C30852 * C131;
    const double C30875 = C30852 * C129;
    const double C30871 = C30852 * C118;
    const double C30867 = C30852 * C127;
    const double C30863 = C30852 * C117;
    const double C30859 = C30852 * C125;
    const double C30855 = C30852 * C116;
    const double C31065 = C30852 * C275;
    const double C31061 = C30852 * C284;
    const double C31057 = C30852 * C274;
    const double C31053 = C30852 * C282;
    const double C31049 = C30852 * C273;
    const double C31045 = C30852 * C280;
    const double C31231 = C30852 * C415;
    const double C31227 = C30852 * C424;
    const double C31223 = C30852 * C414;
    const double C31219 = C30852 * C422;
    const double C31215 = C30852 * C413;
    const double C31211 = C30852 * C420;
    const double C32121 = C30852 * C622;
    const double C32117 = C30852 * C630;
    const double C32111 = C30852 * C628;
    const double C32107 = C30852 * C621;
    const double C32351 = C30852 * C1300;
    const double C32347 = C30852 * C1305;
    const double C32337 = C30852 * C626;
    const double C32333 = C30852 * C620;
    const double C32329 = C30852 * C286;
    const double C32325 = C30852 * C276;
    const double C32577 = C30852 * C723;
    const double C32573 = C30852 * C730;
    const double C32569 = C30852 * C1498;
    const double C32565 = C30852 * C1503;
    const double C32935 = C30852 * C1301;
    const double C32931 = C30852 * C1307;
    const double C33149 = C30852 * C722;
    const double C33145 = C30852 * C728;
    const double C33141 = C30852 * C1499;
    const double C33137 = C30852 * C1505;
    const double C35422 = C30852 * C724;
    const double C35418 = C30852 * C732;
    const double C41744 = C30852 * C1805;
    const double C41740 = C30852 * C1809;
    const double C41886 = C30852 * C1969;
    const double C41882 = C30852 * C1973;
    const double C48032 = C48026 / C47858;
    const double C36659 = C36634 + C36635;
    const double C36656 = C36628 + C36629;
    const double C36653 = C36622 + C36623;
    const double C36650 = C36616 + C36617;
    const double C36852 = C36837 + C36838;
    const double C36849 = C36831 + C36832;
    const double C36846 = C36825 + C36826;
    const double C37034 = C37019 + C37020;
    const double C37031 = C37013 + C37014;
    const double C37028 = C37007 + C37008;
    const double C38220 = C38201 + C38202;
    const double C38217 = C38195 + C38196;
    const double C38214 = C38191 + C38192;
    const double C38211 = C38185 + C38186;
    const double C38434 = C38425 + C38426;
    const double C38431 = C38419 + C38420;
    const double C38792 = C38783 + C38784;
    const double C38789 = C38777 + C38778;
    const double C39004 = C38995 + C38996;
    const double C39001 = C38989 + C38990;
    const double C47441 = C47432 + C47433;
    const double C20214 = C20188 * C2928;
    const double C20206 = C20188 * C2932;
    const double C20204 = C20188 * C2934;
    const double C20196 = C20188 * C2929;
    const double C20376 = C20188 * C3383;
    const double C20368 = C20188 * C3388;
    const double C20530 = C20188 * C3797;
    const double C20522 = C20188 * C3802;
    const double C21504 = C20188 * C3386;
    const double C21496 = C20188 * C3382;
    const double C21880 = C20188 * C10324;
    const double C22034 = C20188 * C11198;
    const double C22026 = C20188 * C11201;
    const double C33823 = C33797 * C2928;
    const double C33815 = C33797 * C2932;
    const double C33813 = C33797 * C2934;
    const double C33805 = C33797 * C2929;
    const double C33985 = C33797 * C3383;
    const double C33977 = C33797 * C3388;
    const double C34139 = C33797 * C3797;
    const double C34131 = C33797 * C3802;
    const double C42492 = C33797 * C3386;
    const double C42484 = C33797 * C3382;
    const double C42868 = C33797 * C10324;
    const double C43022 = C33797 * C11198;
    const double C43014 = C33797 * C11201;
    const double C49315 = C49283 + C49311;
    const double C20182 = C49302 - (C49085 * C49074) / C47858;
    const double C5101 = C5097 + C5098;
    const double C6301 = C6297 + C6298;
    const double C2591 = C2581 + C2582;
    const double C2590 = C2578 + C2579;
    const double C24995 = C2781 + C2782;
    const double C24992 = C2782 + C2781;
    const double C24994 = C2778 + C2779;
    const double C24993 = C2779 + C2778;
    const double C10590 = C10170 + C10171;
    const double C10589 = C10167 + C10168;
    const double C33826 = C49303 * C982;
    const double C33818 = C49303 * C990;
    const double C33812 = C49303 * C989;
    const double C33804 = C49303 * C980;
    const double C33988 = C49303 * C2405;
    const double C33980 = C49303 * C2415;
    const double C34142 = C49303 * C2935;
    const double C34134 = C49303 * C2941;
    const double C42491 = C49303 * C2413;
    const double C42483 = C49303 * C2401;
    const double C42871 = C49303 * C2403;
    const double C42863 = C49303 * C2414;
    const double C43025 = C49303 * C3385;
    const double C43017 = C49303 * C3391;
    const double C17812 = C49303 / C47894 - C49083 / C49261;
    const double C20217 = C20183 * C982;
    const double C20209 = C20183 * C990;
    const double C20203 = C20183 * C989;
    const double C20195 = C20183 * C980;
    const double C20379 = C20183 * C2405;
    const double C20371 = C20183 * C2415;
    const double C20533 = C20183 * C2935;
    const double C20525 = C20183 * C2941;
    const double C21503 = C20183 * C2413;
    const double C21495 = C20183 * C2401;
    const double C21883 = C20183 * C2403;
    const double C21875 = C20183 * C2414;
    const double C22037 = C20183 * C3385;
    const double C22029 = C20183 * C3391;
    const double C49312 = C49285 + C49302;
    const double C15256 = C15246 + C15247;
    const double C15255 = C15243 + C15244;
    const double C18799 = C15442 + C15443;
    const double C18796 = C15443 + C15442;
    const double C18798 = C15439 + C15440;
    const double C18797 = C15440 + C15439;
    const double C17143 = C16731 + C16732;
    const double C17142 = C16728 + C16729;
    const double C3934 = C3932 + C3925;
    const double C5099 = C5095 * C114;
    const double C6302 = C6299 * C3913;
    const double C27690 = C6299 * C22512;
    const double C186 = C180 + C181;
    const double C5100 = C5096 * C48978;
    const double C6303 = C6300 * C49040;
    const double C27691 = C6300 * C49040;
    const double C9527 = C113 * C9270;
    const double C9619 = C113 * C9372;
    const double C14573 = C5043 * C9372;
    const double C41738 = C30853 * C9372;
    const double C173 = C162 + C163;
    const double C314 = C299 + C300;
    const double C454 = C439 + C440;
    const double C5091 = C5073 + C5074;
    const double C30901 = C30883 + C30884;
    const double C1143 = C1131 + C1132;
    const double C4224 = C4211 + C4212;
    const double C5259 = C5237 + C5238;
    const double C31069 = C31047 + C31048;
    const double C2587 = C2566 + C2567;
    const double C5425 = C5403 + C5404;
    const double C15252 = C15231 + C15232;
    const double C31235 = C31213 + C31214;
    const double C36663 = C36642 + C36643;
    const double C17991 =
        (4 * (2 * C48661 + C48109 * C48763 + C48662 * ae) +
         C48109 *
             (3 * C48763 +
              C48109 *
                  (2 * C48367 +
                   C48109 * (C48193 + C48109 * (C48109 * C48337 + C48366 * ae) +
                             C48109 * C48366 * ae) +
                   C48474 * ae) +
              C48762 * ae) +
         (3 * C48662 + C48109 * C48762) * ae) /
        C47858;
    const double C9273 =
        (4 * (2 * C48605 + C48108 * C48692 + C48606 * ae) +
         C48108 *
             (3 * C48692 +
              C48108 *
                  (2 * C48688 +
                   C48108 * (C48225 + C48108 * (C48108 * C48444 + C48366 * ae) +
                             C48443 * ae) +
                   C48372 * ae) +
              C48689 * ae) +
         (3 * C48606 + C48108 * C48689) * ae) /
        C47858;
    const double C9375 =
        (C48109 *
         (3 * C48692 +
          C48108 *
              (2 * C48688 +
               C48108 * (C48225 + C48108 * (C48108 * C48444 + C48366 * ae) +
                         C48443 * ae) +
               C48372 * ae) +
          C48689 * ae)) /
        C47858;
    const double C10122 =
        (2 * C48605 + C48108 * C48692 + C48606 * ae +
         (2 * C48688 +
          C48108 * (C48225 + C48108 * (C48108 * C48444 + C48366 * ae) +
                    C48443 * ae) +
          C48372 * ae) *
             C48304) /
        C47858;
    const double C10329 =
        (2 * C48109 * C48692 +
         C48109 * (C48692 + (C48225 + C48108 * (C48108 * C48444 + C48366 * ae) +
                             C48443 * ae) *
                                C48304)) /
        C47858;
    const double C11461 = C9288 * C49282;
    const double C23790 = C9288 * C49282;
    const double C11611 = C11609 * C49282;
    const double C23928 = C11609 * C49282;
    const double C11462 = C9287 * C11313;
    const double C23791 = C9287 * C23642;
    const double C11612 = C11610 * C11313;
    const double C23929 = C11610 * C23642;
    const double C9532 = C9529 + C9530;
    const double C9628 = C9621 + C9622;
    const double C14583 = C14577 + C14578;
    const double C41748 = C41742 + C41743;
    const double C10608 = C10597 + C10598;
    const double C14725 = C14719 + C14720;
    const double C17161 = C17150 + C17151;
    const double C41890 = C41884 + C41885;
    const double C47277 = C47266 + C47267;
    const double C48439 = C48436 + C48438;
    const double C10762 = C49275 * C10330;
    const double C17311 = C49275 * C10330;
    const double C21873 = C49288 * C10330;
    const double C42861 = C49288 * C10330;
    const double C47427 = C36607 * C10330;
    const double C48782 = C48777 + C48778;
    const double C48710 = C48699 + C48709;
    const double C10761 = C2534 * C10326;
    const double C17310 = C15199 * C10326;
    const double C21872 = C20188 * C10326;
    const double C42860 = C33797 * C10326;
    const double C47426 = C48050 * C10326;
    const double C18222 =
        (4 * (2 * C48730 + C48109 * C48772 + C48731 * ae) +
         C48109 * (3 * C48772 +
                   C48109 * (2 * C48409 +
                             C48109 * (C48377 +
                                       C48109 * (C48109 * C48108 * C48196 +
                                                 C48430 * ae) +
                                       C48109 * C48430 * ae) +
                             C48467 * ae) +
                   C48771 * ae) +
         (3 * C48731 + C48109 * C48771) * ae) /
        C47858;
    const double C313 = C297 + C298;
    const double C453 = C437 + C438;
    const double C5089 = C5069 + C5070;
    const double C30899 = C30879 + C30880;
    const double C1142 = C1129 + C1130;
    const double C4223 = C4209 + C4210;
    const double C5257 = C5233 + C5234;
    const double C31067 = C31043 + C31044;
    const double C2584 = C2560 + C2561;
    const double C5423 = C5399 + C5400;
    const double C15249 = C15225 + C15226;
    const double C31233 = C31209 + C31210;
    const double C36660 = C36636 + C36637;
    const double C2771 = C2747 + C2748;
    const double C6752 = C6736 + C6737;
    const double C15432 = C15408 + C15409;
    const double C35424 = C35416 + C35417;
    const double C36843 = C36819 + C36820;
    const double C2969 = C2945 + C2946;
    const double C15614 = C15590 + C15591;
    const double C37025 = C37001 + C37002;
    const double C10759 =
        (2 * (ae * (2 * C48355 + C48109 * C48434 +
                    (C48207 + C48209 * C48304) * ae) +
              C48108 * C48457) +
         ae * (2 * (C48109 * C48327 + C48357 * ae) +
               C48109 * (C48327 + C48109 * (C48109 * C48386 + C48408 * ae) +
                         C48109 * C48408 * ae) +
               (C48357 + C48408 * C48304) * ae) +
         C48108 *
             (C48457 +
              ae *
                  (2 * C48409 +
                   C48109 * (C48377 +
                             C48109 * (C48109 * C48108 * C48196 + C48430 * ae) +
                             C48109 * C48430 * ae) +
                   (C48398 + C48430 * C48304) * ae) +
              C48108 *
                  (ae * (2 * C48405 +
                         C48109 * (C48158 +
                                   C48109 * (C48109 * C48196 + C48249 * ae) +
                                   C48109 * C48249 * ae) +
                         (C48209 + C48249 * C48304) * ae) +
                   C48108 * (2 * C48406 + ae * (C48173 + C48228 * C48304) +
                             C48109 * (C48141 + ae * C48109 * C48228 +
                                       C48109 * (ae * C48228 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C11204 =
        (ae * (3 * (C48152 + C48109 * C48355 + C48459 * ae) +
               C48109 * (2 * C48355 + C48109 * C48434 + C48461 * ae) +
               (2 * C48459 + C48109 * C48461) * ae) +
         C48108 * (3 * C48424 + ae * (2 * C48420 + C48109 * C48454) +
                   C48109 * C48457)) /
        C47860;
    const double C11205 =
        (3 * C48424 + ae * (2 * C48420 + C48109 * C48454) + C48109 * C48457 +
         ae * (3 * (C48320 + C48109 * C48409 + C48463 * ae) +
               C48109 * (2 * C48409 +
                         C48109 * (C48377 +
                                   C48109 * (C48109 * C48108 * C48196 +
                                             C48430 * ae) +
                                   C48109 * C48430 * ae) +
                         C48467 * ae) +
               (2 * C48463 + C48109 * C48467) * ae) +
         C48108 *
             (ae * (3 * C48434 +
                    C48109 *
                        (2 * C48405 +
                         C48109 * (C48158 +
                                   C48109 * (C48109 * C48196 + C48249 * ae) +
                                   C48109 * C48249 * ae) +
                         C48468 * ae) +
                    (2 * C48427 + C48109 * C48468) * ae) +
              C48108 *
                  (3 * C48437 + ae * (2 * C48428 + C48109 * C48469) +
                   C48109 * (2 * C48406 + ae * C48469 +
                             C48109 * (C48141 + ae * C48109 * C48228 +
                                       C48109 * (ae * C48228 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C17993 =
        (4 * (2 * C48280 + ae * C48310 + C48109 * C48424) +
         ae * (3 * C48310 + C48109 * C48479) +
         C48109 * (3 * C48424 + ae * C48479 + C48109 * C48457)) /
        C47860;
    const double C18224 =
        (ae * (4 * (2 * C48355 + C48109 * C48434 + C48461 * ae) +
               C48109 * (3 * C48434 +
                         C48109 * (2 * C48405 +
                                   C48109 * (C48158 +
                                             C48109 * (C48109 * C48196 +
                                                       C48249 * ae) +
                                             C48109 * C48249 * ae) +
                                   C48468 * ae) +
                         C48489 * ae) +
               (3 * C48461 + C48109 * C48489) * ae) +
         C48108 *
             (4 * C48457 + ae * (3 * C48454 + C48109 * C48490) +
              C48109 *
                  (3 * C48437 + ae * C48490 +
                   C48109 * (2 * C48406 + ae * C48469 +
                             C48109 * (C48141 + ae * C48109 * C48228 +
                                       C48109 * (ae * C48228 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C639 =
        (3 * C48134 + C48116 * C48145 + ae * C48108 * C48202 +
         C48108 * (ae * C48202 +
                   C48108 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C741 =
        (ae * (C48109 * C48202 +
               (3 * (C48207 + C48209 * C48124) +
                C48116 * (2 * C48116 * C48209 +
                          C48116 * (C48209 + C48130 * C48129 * C48124))) *
                   ae) +
         C48108 * (ae * (3 * C48175 +
                         C48116 * (2 * C48116 * C48173 +
                                   C48116 * (C48173 + C48137 * C48138 * C48162 *
                                                          C48124))) +
                   C48109 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C134 = (5 * (3 * C48185 + C48116 * C48190) +
                         C48116 * (4 * C48190 + C48116 * C48202)) /
                        C47858;
    const double C288 = (C48108 * (4 * C48190 + C48116 * C48202)) / C47858;
    const double C428 = (C48109 * (4 * C48190 + C48116 * C48202) +
                         (4 * (2 * C48244 + C48116 * C48242) +
                          C48116 * (3 * C48242 + C48116 * C48254)) *
                             ae) /
                        C47858;
    const double C633 =
        (3 * C48185 + C48116 * C48190 + C48202 * C48259) / C47858;
    const double C735 =
        (C48109 * C48108 * C48202 + C48108 * C48554 * ae) / C47858;
    const double C986 =
        (3 * C48185 + C48116 * C48190 +
         C48109 * (C48109 * C48202 + C48554 * ae) + C48109 * C48554 * ae) /
        C47858;
    const double C9525 =
        (5 * (3 * C48331 + ae * C48332 + C48108 * C48394) +
         ae * (4 * C48332 + C48108 * C48395) +
         C48108 *
             (4 * C48394 + ae * C48395 +
              C48108 *
                  (3 * C48390 + ae * C48391 +
                   C48108 * (2 * C48384 + ae * C48386 +
                             C48108 * (C48141 + ae * C48108 * C48196 +
                                       C48108 * (ae * C48196 +
                                                 C48108 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C9617 =
        (4 * (2 * C48360 + ae * (C48109 * C48327 + C48357 * ae) +
              C48108 * C48418) +
         ae * (C48109 * C48395 + (3 * C48357 + C48108 * C48415) * ae) +
         C48108 *
             (3 * C48418 + ae * (C48109 * C48391 + C48415 * ae) +
              C48108 *
                  (2 * C48414 + ae * (C48109 * C48386 + C48408 * ae) +
                   C48108 *
                       (C48406 +
                        ae * (C48109 * C48108 * C48196 + C48108 * C48249 * ae) +
                        C48108 * (ae * (C48109 * C48196 + C48249 * ae) +
                                  C48108 * (ae * C48228 +
                                            C48109 * std::pow(C48113, 8) *
                                                bs[8] * C48114)))))) /
        C47860;
    const double C9523 = (5 * (3 * C48262 + C48108 * C48332) +
                          C48108 * (4 * C48332 + C48108 * C48395)) /
                         C47858;
    const double C9615 = (C48109 * (4 * C48332 + C48108 * C48395) +
                          (4 * C48677 + C48108 * C48705) * ae) /
                         C47858;
    const double C9860 =
        (3 * C48262 + C48108 * C48332 +
         C48109 * (C48109 * C48395 + C48705 * ae) + C48109 * C48705 * ae) /
        C47858;
    const double C992 =
        (3 * C48134 + C48116 * C48145 + ae * C48109 * C48234 +
         C48109 * (ae * C48234 +
                   C48109 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C135 = (5 * (3 * C48217 + C48116 * C48222) +
                         C48116 * (4 * C48222 + C48116 * C48234)) /
                        C47858;
    const double C289 = (C48108 * (4 * C48222 + C48116 * C48234) +
                         (4 * (2 * C48244 + C48116 * C48242) +
                          C48116 * (3 * C48242 + C48116 * C48254)) *
                             ae) /
                        C47858;
    const double C429 = (C48109 * (4 * C48222 + C48116 * C48234)) / C47858;
    const double C634 =
        (3 * C48217 + C48116 * C48222 +
         C48108 * (C48108 * C48234 + C48554 * ae) + C48108 * C48554 * ae) /
        C47858;
    const double C736 = (C48109 * (C48108 * C48234 + C48554 * ae)) / C47858;
    const double C987 =
        (3 * C48217 + C48116 * C48222 + C48234 * C48304) / C47858;
    const double C18454 =
        (5 * (3 * C48424 + ae * C48479 + C48109 * C48457) +
         ae * (4 * C48479 + C48109 * C48494) +
         C48109 *
             (4 * C48457 + ae * C48494 +
              C48109 *
                  (3 * C48437 + ae * C48490 +
                   C48109 * (2 * C48406 + ae * C48469 +
                             C48109 * (C48141 + ae * C48109 * C48228 +
                                       C48109 * (ae * C48228 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C18453 = (5 * (3 * C48310 + C48109 * C48479) +
                           C48109 * (4 * C48479 + C48109 * C48494)) /
                          C47858;
    const double C1151 = C1146 + C1124;
    const double C3935 = C3933 + C3922;
    const double C182 = C172 * C48978;
    const double C49313 = C49254 + C49305;
    const double C3909 = C49292 - (C48896 * C48879) / C47858;
    const double C106 = C49293 / C47894 - C48894 / C49261;
    const double C49306 = C49257 + C49292;
    const double C47938 = C47934 - C47915;
    const double C22531 = C22522 + C22523;
    const double C22530 = C22518 + C22519;
    const double C27692 = C27688 + C27689;
    const double C23658 = C167 * C49314;
    const double C23645 = C165 * C49314;
    const double C23796 = C319 * C49314;
    const double C23934 = C459 * C49314;
    const double C9175 =
        (C49307 + 2 * C49036) / C47894 - (C49314 * C49032) / C47858;
    const double C11327 = C317 * C11305;
    const double C11318 = C319 * C11305;
    const double C11465 = C1138 * C11305;
    const double C11605 = C1540 * C11305;
    const double C23656 = C317 * C49310;
    const double C23647 = C319 * C49310;
    const double C23794 = C1138 * C49310;
    const double C23932 = C1540 * C49310;
    const double C9176 =
        (C49295 + 2 * C49043 + C49314) / C47894 - (C49310 * C49032) / C47858;
    const double C9177 = (C49272 + C49040 / C47858 + C49310) / C47894 -
                         (C49300 * C49032) / C47858;
    const double C7991 = C7990 + C7980;
    const double C48025 = C48021 - C48002;
    const double C30902 = C30885 + C30886;
    const double C30900 = C30881 + C30882;
    const double C30897 = C30875 + C30876;
    const double C30895 = C30871 + C30872;
    const double C30893 = C30867 + C30868;
    const double C30891 = C30863 + C30864;
    const double C30889 = C30859 + C30860;
    const double C30887 = C30855 + C30856;
    const double C31078 = C31065 + C31066;
    const double C31076 = C31061 + C31062;
    const double C31074 = C31057 + C31058;
    const double C31072 = C31053 + C31054;
    const double C31070 = C31049 + C31050;
    const double C31068 = C31045 + C31046;
    const double C31244 = C31231 + C31232;
    const double C31242 = C31227 + C31228;
    const double C31240 = C31223 + C31224;
    const double C31238 = C31219 + C31220;
    const double C31236 = C31215 + C31216;
    const double C31234 = C31211 + C31212;
    const double C32130 = C32121 + C32122;
    const double C32128 = C32117 + C32118;
    const double C32125 = C32111 + C32112;
    const double C32123 = C32107 + C32108;
    const double C32368 = C32351 + C32352;
    const double C32366 = C32347 + C32348;
    const double C32363 = C32337 + C32338;
    const double C32361 = C32333 + C32334;
    const double C32359 = C32329 + C32330;
    const double C32357 = C32325 + C32326;
    const double C32586 = C32577 + C32578;
    const double C32584 = C32573 + C32574;
    const double C32582 = C32569 + C32570;
    const double C32580 = C32565 + C32566;
    const double C32940 = C32935 + C32936;
    const double C32938 = C32931 + C32932;
    const double C33158 = C33149 + C33150;
    const double C33156 = C33145 + C33146;
    const double C33154 = C33141 + C33142;
    const double C33152 = C33137 + C33138;
    const double C35427 = C35422 + C35423;
    const double C35425 = C35418 + C35419;
    const double C41749 = C41744 + C41745;
    const double C41747 = C41740 + C41741;
    const double C41891 = C41886 + C41887;
    const double C41889 = C41882 + C41883;
    const double C20234 = C20214 + C20215;
    const double C20230 = C20206 + C20207;
    const double C20229 = C20204 + C20205;
    const double C20225 = C20196 + C20197;
    const double C20388 = C20376 + C20377;
    const double C20384 = C20368 + C20369;
    const double C20542 = C20530 + C20531;
    const double C20538 = C20522 + C20523;
    const double C21513 = C21504 + C21505;
    const double C21509 = C21496 + C21497;
    const double C21892 = C21880 + C21881;
    const double C22046 = C22034 + C22035;
    const double C33843 = C33823 + C33824;
    const double C33839 = C33815 + C33816;
    const double C33838 = C33813 + C33814;
    const double C33834 = C33805 + C33806;
    const double C33997 = C33985 + C33986;
    const double C33993 = C33977 + C33978;
    const double C34151 = C34139 + C34140;
    const double C34147 = C34131 + C34132;
    const double C42501 = C42492 + C42493;
    const double C42497 = C42484 + C42485;
    const double C42880 = C42868 + C42869;
    const double C43034 = C43022 + C43023;
    const double C33830 = C49315 * C126;
    const double C33822 = C49315 * C138;
    const double C33808 = C49315 * C137;
    const double C33800 = C49315 * C124;
    const double C33992 = C49315 * C285;
    const double C33984 = C49315 * C293;
    const double C34146 = C49315 * C425;
    const double C34138 = C49315 * C433;
    const double C42487 = C49315 * C294;
    const double C42479 = C49315 * C287;
    const double C42875 = C49315 * C625;
    const double C42867 = C49315 * C635;
    const double C43029 = C49315 * C727;
    const double C43021 = C49315 * C737;
    const double C17809 =
        (C49308 + 2 * C49078) / C47894 - (C49315 * C49074) / C47858;
    const double C20219 = C20182 * C423;
    const double C20211 = C20182 * C432;
    const double C20201 = C20182 * C433;
    const double C20193 = C20182 * C425;
    const double C20381 = C20182 * C729;
    const double C20373 = C20182 * C738;
    const double C20535 = C20182 * C980;
    const double C20527 = C20182 * C989;
    const double C21501 = C20182 * C737;
    const double C21493 = C20182 * C727;
    const double C21885 = C20182 * C1506;
    const double C21877 = C20182 * C1511;
    const double C22039 = C20182 * C2401;
    const double C22031 = C20182 * C2413;
    const double C2593 = C2591 + C2583;
    const double C2592 = C2590 + C2580;
    const double C24999 = C2780 + C24995;
    const double C24996 = C24992 + C2780;
    const double C24998 = C2777 + C24994;
    const double C24997 = C24993 + C2777;
    const double C10604 = C10590 + C10172;
    const double C10603 = C10589 + C10169;
    const double C33828 = C49312 * C423;
    const double C33820 = C49312 * C432;
    const double C33810 = C49312 * C433;
    const double C33802 = C49312 * C425;
    const double C33990 = C49312 * C729;
    const double C33982 = C49312 * C738;
    const double C34144 = C49312 * C980;
    const double C34136 = C49312 * C989;
    const double C42489 = C49312 * C737;
    const double C42481 = C49312 * C727;
    const double C42873 = C49312 * C1506;
    const double C42865 = C49312 * C1511;
    const double C43027 = C49312 * C2401;
    const double C43019 = C49312 * C2413;
    const double C17810 =
        (C49297 + 2 * C49085 + C49315) / C47894 - (C49312 * C49074) / C47858;
    const double C17811 = (C49275 + C49082 / C47858 + C49312) / C47894 -
                          (C49303 * C49074) / C47858;
    const double C15258 = C15256 + C15248;
    const double C15257 = C15255 + C15245;
    const double C18803 = C15441 + C18799;
    const double C18800 = C18796 + C15441;
    const double C18802 = C15438 + C18798;
    const double C18801 = C18797 + C15438;
    const double C17157 = C17143 + C16733;
    const double C17156 = C17142 + C16730;
    const double C3936 = C3934 + C3926;
    const double C6304 = C6301 + C6302;
    const double C5102 = C5099 + C5100;
    const double C9531 = C9527 + C9528;
    const double C9627 = C9619 + C9620;
    const double C14581 = C14573 + C14574;
    const double C41746 = C41738 + C41739;
    const double C183 = C173 * C114;
    const double C322 = C314 * C114;
    const double C3928 = C314 * C3913;
    const double C22527 = C314 * C22512;
    const double C462 = C454 * C114;
    const double C1150 = C1143 * C1111;
    const double C4068 = C1143 * C3913;
    const double C7984 = C1143 * C7969;
    const double C22667 = C1143 * C22512;
    const double C26412 = C1143 * C47963;
    const double C4226 = C4224 * C3913;
    const double C22809 = C4224 * C22512;
    const double C9863 =
        (3 * (C48424 + ae * (C48320 + C48109 * C48409 + C48109 * C48398 * ae) +
              C48108 * C48439) +
         ae * (C48332 + C48109 * (C48109 * C48391 + C48415 * ae) +
               C48109 * C48415 * ae) +
         C48108 *
             (2 * C48439 +
              ae * (C48327 + C48109 * (C48109 * C48386 + C48408 * ae) +
                    C48109 * C48408 * ae) +
              C48108 *
                  (C48437 +
                   ae * (C48377 +
                         C48109 * (C48109 * C48108 * C48196 + C48430 * ae) +
                         C48109 * C48430 * ae) +
                   C48108 * (ae * (C48158 +
                                   C48109 * (C48109 * C48196 + C48249 * ae) +
                                   C48109 * C48249 * ae) +
                             C48108 * (C48141 + ae * C48109 * C48228 +
                                       C48109 * (ae * C48228 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C48784 = C48782 + C48779;
    const double C48711 = C48710 + C48701;
    const double C10785 = C10761 + C10762;
    const double C17334 = C17310 + C17311;
    const double C21888 = C21872 + C21873;
    const double C42876 = C42860 + C42861;
    const double C47438 = C47426 + C47427;
    const double C321 = C313 * C48978;
    const double C3927 = C313 * C49040;
    const double C22526 = C313 * C49040;
    const double C461 = C453 * C48978;
    const double C1149 = C1142 * C49272;
    const double C4067 = C1142 * C49040;
    const double C7983 = C1142 * C49272;
    const double C22666 = C1142 * C49040;
    const double C26411 = C1142 * C26391;
    const double C4225 = C4223 * C49040;
    const double C22808 = C4223 * C49040;
    const double C22027 = C49288 * C11204;
    const double C43015 = C49288 * C11204;
    const double C1152 = C1151 + C1147;
    const double C103 =
        (C49304 + 2 * C48888) / C47894 - (C49313 * C48879) / C47858;
    const double C104 =
        (C49291 + 2 * C48896 + C49313) / C47894 - (C49306 * C48879) / C47858;
    const double C105 = (C49259 + C48893 / C47858 + C49306) / C47894 -
                        (C49293 * C48879) / C47858;
    const double C47944 = C47938 / C47894;
    const double C47943 = C47856 * C47938;
    const double C22533 = C22531 + C22524;
    const double C22532 = C22530 + C22520;
    const double C27693 = C27692 + C27690;
    const double C7992 = C7991 + C7981;
    const double C48031 = C48025 / C47894;
    const double C48030 = C47875 * C48025;
    const double C30906 = C30897 + C30898;
    const double C30905 = C30895 + C30896;
    const double C30904 = C30893 + C30894;
    const double C30903 = C30891 + C30892;
    const double C32356 = C31077 + C31078;
    const double C32341 = C31078 + C31077;
    const double C32355 = C31075 + C31076;
    const double C32342 = C31076 + C31075;
    const double C35019 = C31074 + C31073;
    const double C35221 = C31073 + C31074;
    const double C35020 = C31072 + C31071;
    const double C35220 = C31071 + C31072;
    const double C32353 = C32126 + C32125;
    const double C32344 = C32125 + C32126;
    const double C32354 = C32124 + C32123;
    const double C32343 = C32123 + C32124;
    const double C32928 = C32363 + C32364;
    const double C32927 = C32361 + C32362;
    const double C41736 = C32940 + C32939;
    const double C41737 = C32938 + C32937;
    const double C2595 = C2593 * C48978;
    const double C2594 = C2592 * C114;
    const double C15260 = C15258 * C48978;
    const double C15259 = C15257 * C114;
    const double C6305 = C6304 + C6303;
    const double C18452 =
        (5 * (3 * C48755 + C48109 * C48784 + C48754 * ae) +
         C48109 * (4 * C48784 +
                   C48109 * (3 * C48434 +
                             C48109 * (2 * C48405 +
                                       C48109 * (C48158 +
                                                 C48109 * (C48109 * C48196 +
                                                           C48249 * ae) +
                                                 C48109 * C48249 * ae) +
                                       C48468 * ae) +
                             C48489 * ae) +
                   C48783 * ae) +
         (4 * C48754 + C48109 * C48783) * ae) /
        C47858;
    const double C9524 =
        (5 * (3 * C48680 + C48108 * C48711 + C48677 * ae) +
         C48108 * (4 * C48711 +
                   C48108 * (3 * C48708 +
                             C48108 * (2 * C48704 +
                                       C48108 * (C48173 +
                                                 C48108 * (C48108 * C48228 +
                                                           C48249 * ae) +
                                                 C48430 * ae) +
                                       C48408 * ae) +
                             C48415 * ae) +
                   C48705 * ae) +
         (4 * C48677 + C48108 * C48705) * ae) /
        C47858;
    const double C9616 =
        (C48109 *
         (4 * C48711 +
          C48108 *
              (3 * C48708 +
               C48108 * (2 * C48704 +
                         C48108 * (C48173 +
                                   C48108 * (C48108 * C48228 + C48249 * ae) +
                                   C48430 * ae) +
                         C48408 * ae) +
               C48415 * ae) +
          C48705 * ae)) /
        C47858;
    const double C9859 =
        (2 * C48597 + C48108 * C48680 + C48598 * ae + C48711 * C48304) / C47858;
    const double C9861 =
        (3 * C48680 + C48108 * C48711 + C48677 * ae +
         (3 * C48708 +
          C48108 *
              (2 * C48704 +
               C48108 * (C48173 + C48108 * (C48108 * C48228 + C48249 * ae) +
                         C48430 * ae) +
               C48408 * ae) +
          C48415 * ae) *
             C48304) /
        C47858;
    const double C10758 =
        (2 * C48109 * C48711 +
         C48109 *
             (C48711 +
              (2 * C48704 +
               C48108 * (C48173 + C48108 * (C48108 * C48228 + C48249 * ae) +
                         C48430 * ae) +
               C48408 * ae) *
                  C48304)) /
        C47858;
    const double C22042 = C22026 + C22027;
    const double C43030 = C43014 + C43015;
    const double C1153 = C1152 + C1148;
    const double C47949 = C47944 - C47945;
    const double C47948 = C47943 + C49239;
    const double C22535 = C22533 + C22525;
    const double C22534 = C22532 + C22521;
    const double C27694 = C27693 + C27691;
    const double C7993 = C7992 + C7982;
    const double C48036 = C48031 - C48032;
    const double C48035 = C48030 + C49240;
    const double C30910 = C30906 * C48978;
    const double C30909 = C30905 * C114;
    const double C30908 = C30904 * C48978;
    const double C35018 = C30904 * C49239;
    const double C39688 = C30904 * C22505;
    const double C30907 = C30903 * C114;
    const double C35017 = C30903 * C3912;
    const double C39687 = C30903 * C22511;
    const double C35022 = C35019 * C3913;
    const double C39689 = C35019 * C22512;
    const double C35023 = C35020 * C49040;
    const double C39690 = C35020 * C49040;
    const double C2596 = C2594 + C2595;
    const double C15261 = C15259 + C15260;
    const double C10591 = C2534 * C9859;
    const double C14715 = C5043 * C9859;
    const double C17144 = C15199 * C9859;
    const double C41880 = C30853 * C9859;
    const double C47260 = C48050 * C9859;
    const double C26414 = C316 * C47949;
    const double C26407 = C318 * C47949;
    const double C26401 = C320 * C47949;
    const double C26577 = C1137 * C47949;
    const double C26571 = C1140 * C47949;
    const double C26735 = C1541 * C47949;
    const double C26729 = C1537 * C47949;
    const double C9184 =
        (C47949 / C47894 + ((C47856 * C47963 + C26391) * ae) / C47858) /
            C47894 -
        ((C47856 * (C47963 / C47894 + (0 * ae) / C47858) + C49282) * be) /
            C47858;
    const double C11312 =
        C47949 / C47894 - ((C47856 * C47963 + C26391) * be) / C47858;
    const double C23641 =
        C47949 / C47894 + ((C47856 * C47963 + C26391) * ae) / C47858;
    const double C47952 = C47948 * be;
    const double C36644 = C48036 * C413;
    const double C36638 = C48036 * C420;
    const double C36632 = C48036 * C422;
    const double C36626 = C48036 * C414;
    const double C36620 = C48036 * C424;
    const double C36614 = C48036 * C415;
    const double C36839 = C48036 * C723;
    const double C36833 = C48036 * C730;
    const double C36827 = C48036 * C724;
    const double C36821 = C48036 * C732;
    const double C37021 = C48036 * C974;
    const double C37015 = C48036 * C981;
    const double C37009 = C48036 * C975;
    const double C37003 = C48036 * C983;
    const double C38203 = C48036 * C1498;
    const double C38197 = C48036 * C1503;
    const double C38189 = C48036 * C728;
    const double C38183 = C48036 * C722;
    const double C38427 = C48036 * C2397;
    const double C38421 = C48036 * C2406;
    const double C38785 = C48036 * C1499;
    const double C38779 = C48036 * C1505;
    const double C38997 = C48036 * C2395;
    const double C38991 = C48036 * C2402;
    const double C47268 = C48036 * C1969;
    const double C47262 = C48036 * C1973;
    const double C47434 = C48036 * C2396;
    const double C47428 = C48036 * C2404;
    const double C17817 =
        (C48036 / C47894 + ((C47875 * C48050 + C36607) * ae) / C47858) /
            C47894 -
        ((C47875 * (C48050 / C47894 + (0 * ae) / C47858) + C49288) * be) /
            C47858;
    const double C20187 =
        C48036 / C47894 - ((C47875 * C48050 + C36607) * be) / C47858;
    const double C33796 =
        C48036 / C47894 + ((C47875 * C48050 + C36607) * ae) / C47858;
    const double C48039 = C48035 * be;
    const double C30912 = C30909 + C30910;
    const double C30911 = C30907 + C30908;
    const double C35021 = C35017 + C35018;
    const double C39691 = C39687 + C39688;
    const double C10605 = C10591 + C10592;
    const double C14723 = C14715 + C14716;
    const double C17158 = C17144 + C17145;
    const double C41888 = C41880 + C41881;
    const double C47274 = C47260 + C47261;
    const double C11326 = C1140 * C11312;
    const double C11319 = C1137 * C11312;
    const double C11464 = C1347 * C11312;
    const double C11604 = C1539 * C11312;
    const double C23655 = C1140 * C23641;
    const double C23648 = C1137 * C23641;
    const double C23793 = C1347 * C23641;
    const double C23931 = C1539 * C23641;
    const double C47954 = C47952 / C47858;
    const double C36664 = C36644 + C36645;
    const double C36661 = C36638 + C36639;
    const double C36658 = C36632 + C36633;
    const double C36655 = C36626 + C36627;
    const double C36652 = C36620 + C36621;
    const double C36649 = C36614 + C36615;
    const double C36853 = C36839 + C36840;
    const double C36850 = C36833 + C36834;
    const double C36847 = C36827 + C36828;
    const double C36844 = C36821 + C36822;
    const double C37035 = C37021 + C37022;
    const double C37032 = C37015 + C37016;
    const double C37029 = C37009 + C37010;
    const double C37026 = C37003 + C37004;
    const double C38221 = C38203 + C38204;
    const double C38218 = C38197 + C38198;
    const double C38213 = C38189 + C38190;
    const double C38210 = C38183 + C38184;
    const double C38435 = C38427 + C38428;
    const double C38432 = C38421 + C38422;
    const double C38793 = C38785 + C38786;
    const double C38790 = C38779 + C38780;
    const double C39005 = C38997 + C38998;
    const double C39002 = C38991 + C38992;
    const double C47278 = C47268 + C47269;
    const double C47275 = C47262 + C47263;
    const double C47442 = C47434 + C47435;
    const double C47439 = C47428 + C47429;
    const double C20216 = C20187 * C975;
    const double C20208 = C20187 * C983;
    const double C20202 = C20187 * C981;
    const double C20194 = C20187 * C974;
    const double C20378 = C20187 * C2397;
    const double C20370 = C20187 * C2406;
    const double C20532 = C20187 * C2929;
    const double C20524 = C20187 * C2934;
    const double C21502 = C20187 * C2402;
    const double C21494 = C20187 * C2395;
    const double C21882 = C20187 * C2396;
    const double C21874 = C20187 * C2404;
    const double C22036 = C20187 * C3382;
    const double C22028 = C20187 * C3386;
    const double C33825 = C33796 * C975;
    const double C33817 = C33796 * C983;
    const double C33811 = C33796 * C981;
    const double C33803 = C33796 * C974;
    const double C33987 = C33796 * C2397;
    const double C33979 = C33796 * C2406;
    const double C34141 = C33796 * C2929;
    const double C34133 = C33796 * C2934;
    const double C42490 = C33796 * C2402;
    const double C42482 = C33796 * C2395;
    const double C42870 = C33796 * C2396;
    const double C42862 = C33796 * C2404;
    const double C43024 = C33796 * C3382;
    const double C43016 = C33796 * C3386;
    const double C48041 = C48039 / C47858;
    const double C35024 = C35021 + C35022;
    const double C39692 = C39691 + C39689;
    const double C47956 = C47942 - C47954;
    const double C20235 = C20216 + C20217;
    const double C20231 = C20208 + C20209;
    const double C20228 = C20202 + C20203;
    const double C20224 = C20194 + C20195;
    const double C20389 = C20378 + C20379;
    const double C20385 = C20370 + C20371;
    const double C20543 = C20532 + C20533;
    const double C20539 = C20524 + C20525;
    const double C21512 = C21502 + C21503;
    const double C21508 = C21494 + C21495;
    const double C21893 = C21882 + C21883;
    const double C21889 = C21874 + C21875;
    const double C22047 = C22036 + C22037;
    const double C22043 = C22028 + C22029;
    const double C33844 = C33825 + C33826;
    const double C33840 = C33817 + C33818;
    const double C33837 = C33811 + C33812;
    const double C33833 = C33803 + C33804;
    const double C33998 = C33987 + C33988;
    const double C33994 = C33979 + C33980;
    const double C34152 = C34141 + C34142;
    const double C34148 = C34133 + C34134;
    const double C42500 = C42490 + C42491;
    const double C42496 = C42482 + C42483;
    const double C42881 = C42870 + C42871;
    const double C42877 = C42862 + C42863;
    const double C43035 = C43024 + C43025;
    const double C43031 = C43016 + C43017;
    const double C48043 = C48029 - C48041;
    const double C35025 = C35024 + C35023;
    const double C39693 = C39692 + C39690;
    const double C47957 = C47956 + C47927;
    const double C48044 = C48043 + C48014;
    const double C26416 = C168 * C47957;
    const double C26405 = C166 * C47957;
    const double C26399 = C164 * C47957;
    const double C26579 = C320 * C47957;
    const double C26573 = C318 * C47957;
    const double C26737 = C460 * C47957;
    const double C26731 = C458 * C47957;
    const double C9181 =
        (((((0 - (C47856 * C47910) / C47858) * ae) / C47858 -
           (0 * be) / C47862 + (2 * C47911) / C47858) /
              C47894 -
          ((C47856 * C47946 + 0) * be) / C47858 + C47920 - C47933) /
             C47894 +
         ((C47856 * C47955 + 0) * ae) / C47858) /
            C47894 -
        ((C47856 * (C47955 / C47894 +
                    ((C47856 * C47957 + C49036) * ae) / C47858 + C47949) +
          C49314) *
         be) /
            C47858 +
        C47957 / C47894 + ((C47856 * C47949 + C49043) * ae) / C47858 +
        2 * (C47927 / C47894 - (0 * be) / C47858);
    const double C9182 =
        (C47955 / C47894 + ((C47856 * C47957 + C49036) * ae) / C47858 +
         C47949) /
            C47894 -
        ((C47856 * (C47957 / C47894 +
                    ((C47856 * C47949 + C49043) * ae) / C47858 + 2 * C47963) +
          C49310) *
         be) /
            C47858 +
        2 * (C47949 / C47894 + ((C47856 * C47963 + C26391) * ae) / C47858);
    const double C9183 =
        (C47957 / C47894 + ((C47856 * C47949 + C49043) * ae) / C47858 +
         2 * C47963) /
            C47894 -
        ((C47856 *
              (C47949 / C47894 + ((C47856 * C47963 + C26391) * ae) / C47858) +
          C49300) *
         be) /
            C47858 +
        3 * (C47963 / C47894 + (0 * ae) / C47858);
    const double C11310 =
        C47955 / C47894 - ((C47856 * C47957 + C49036) * be) / C47858 + C47949;
    const double C11311 = C47957 / C47894 -
                          ((C47856 * C47949 + C49043) * be) / C47858 +
                          2 * C47963;
    const double C23639 =
        C47955 / C47894 + ((C47856 * C47957 + C49036) * ae) / C47858 + C47949;
    const double C23640 = C47957 / C47894 +
                          ((C47856 * C47949 + C49043) * ae) / C47858 +
                          2 * C47963;
    const double C36646 = C48044 * C118;
    const double C36640 = C48044 * C129;
    const double C36630 = C48044 * C127;
    const double C36624 = C48044 * C117;
    const double C36618 = C48044 * C125;
    const double C36612 = C48044 * C116;
    const double C36841 = C48044 * C275;
    const double C36835 = C48044 * C284;
    const double C36829 = C48044 * C274;
    const double C36823 = C48044 * C282;
    const double C37023 = C48044 * C415;
    const double C37017 = C48044 * C424;
    const double C37011 = C48044 * C414;
    const double C37005 = C48044 * C422;
    const double C38205 = C48044 * C621;
    const double C38199 = C48044 * C628;
    const double C38187 = C48044 * C286;
    const double C38181 = C48044 * C276;
    const double C38429 = C48044 * C723;
    const double C38423 = C48044 * C730;
    const double C38787 = C48044 * C620;
    const double C38781 = C48044 * C626;
    const double C38999 = C48044 * C722;
    const double C38993 = C48044 * C728;
    const double C47270 = C48044 * C1301;
    const double C47264 = C48044 * C1307;
    const double C47436 = C48044 * C1499;
    const double C47430 = C48044 * C1505;
    const double C17814 =
        (((((0 - (C47875 * C47997) / C47858) * ae) / C47858 -
           (0 * be) / C47862 + (2 * C47998) / C47858) /
              C47894 -
          ((C47875 * C48033 + 0) * be) / C47858 + C48007 - C48020) /
             C47894 +
         ((C47875 * C48042 + 0) * ae) / C47858) /
            C47894 -
        ((C47875 * (C48042 / C47894 +
                    ((C47875 * C48044 + C49078) * ae) / C47858 + C48036) +
          C49315) *
         be) /
            C47858 +
        C48044 / C47894 + ((C47875 * C48036 + C49085) * ae) / C47858 +
        2 * (C48014 / C47894 - (0 * be) / C47858);
    const double C17815 =
        (C48042 / C47894 + ((C47875 * C48044 + C49078) * ae) / C47858 +
         C48036) /
            C47894 -
        ((C47875 * (C48044 / C47894 +
                    ((C47875 * C48036 + C49085) * ae) / C47858 + 2 * C48050) +
          C49312) *
         be) /
            C47858 +
        2 * (C48036 / C47894 + ((C47875 * C48050 + C36607) * ae) / C47858);
    const double C17816 =
        (C48044 / C47894 + ((C47875 * C48036 + C49085) * ae) / C47858 +
         2 * C48050) /
            C47894 -
        ((C47875 *
              (C48036 / C47894 + ((C47875 * C48050 + C36607) * ae) / C47858) +
          C49303) *
         be) /
            C47858 +
        3 * (C48050 / C47894 + (0 * ae) / C47858);
    const double C20185 =
        C48042 / C47894 - ((C47875 * C48044 + C49078) * be) / C47858 + C48036;
    const double C20186 = C48044 / C47894 -
                          ((C47875 * C48036 + C49085) * be) / C47858 +
                          2 * C48050;
    const double C33794 =
        C48042 / C47894 + ((C47875 * C48044 + C49078) * ae) / C47858 + C48036;
    const double C33795 = C48044 / C47894 +
                          ((C47875 * C48036 + C49085) * ae) / C47858 +
                          2 * C48050;
    const double C26417 = C26405 + C26406;
    const double C11330 = C166 * C11310;
    const double C11315 = C164 * C11310;
    const double C11468 = C320 * C11310;
    const double C11608 = C460 * C11310;
    const double C11328 = C318 * C11311;
    const double C11317 = C320 * C11311;
    const double C11466 = C1137 * C11311;
    const double C11606 = C1541 * C11311;
    const double C23659 = C166 * C23639;
    const double C23644 = C164 * C23639;
    const double C23797 = C320 * C23639;
    const double C23935 = C460 * C23639;
    const double C23657 = C318 * C23640;
    const double C23646 = C320 * C23640;
    const double C23795 = C1137 * C23640;
    const double C23933 = C1541 * C23640;
    const double C36665 = C36646 + C36647;
    const double C36662 = C36640 + C36641;
    const double C36657 = C36630 + C36631;
    const double C36654 = C36624 + C36625;
    const double C36651 = C36618 + C36619;
    const double C36648 = C36612 + C36613;
    const double C36854 = C36841 + C36842;
    const double C36851 = C36835 + C36836;
    const double C36848 = C36829 + C36830;
    const double C36845 = C36823 + C36824;
    const double C37036 = C37023 + C37024;
    const double C37033 = C37017 + C37018;
    const double C37030 = C37011 + C37012;
    const double C37027 = C37005 + C37006;
    const double C38222 = C38205 + C38206;
    const double C38219 = C38199 + C38200;
    const double C38212 = C38187 + C38188;
    const double C38209 = C38181 + C38182;
    const double C38436 = C38429 + C38430;
    const double C38433 = C38423 + C38424;
    const double C38794 = C38787 + C38788;
    const double C38791 = C38781 + C38782;
    const double C39006 = C38999 + C39000;
    const double C39003 = C38993 + C38994;
    const double C47279 = C47270 + C47271;
    const double C47276 = C47264 + C47265;
    const double C47443 = C47436 + C47437;
    const double C47440 = C47430 + C47431;
    const double C20220 = C20185 * C117;
    const double C20212 = C20185 * C127;
    const double C20198 = C20185 * C125;
    const double C20190 = C20185 * C116;
    const double C20382 = C20185 * C275;
    const double C20374 = C20185 * C284;
    const double C20536 = C20185 * C415;
    const double C20528 = C20185 * C424;
    const double C21498 = C20185 * C286;
    const double C21490 = C20185 * C276;
    const double C21886 = C20185 * C620;
    const double C21878 = C20185 * C626;
    const double C22040 = C20185 * C722;
    const double C22032 = C20185 * C728;
    const double C20218 = C20186 * C414;
    const double C20210 = C20186 * C422;
    const double C20200 = C20186 * C424;
    const double C20192 = C20186 * C415;
    const double C20380 = C20186 * C723;
    const double C20372 = C20186 * C730;
    const double C20534 = C20186 * C974;
    const double C20526 = C20186 * C981;
    const double C21500 = C20186 * C728;
    const double C21492 = C20186 * C722;
    const double C21884 = C20186 * C1499;
    const double C21876 = C20186 * C1505;
    const double C22038 = C20186 * C2395;
    const double C22030 = C20186 * C2402;
    const double C33829 = C33794 * C117;
    const double C33821 = C33794 * C127;
    const double C33807 = C33794 * C125;
    const double C33799 = C33794 * C116;
    const double C33991 = C33794 * C275;
    const double C33983 = C33794 * C284;
    const double C34145 = C33794 * C415;
    const double C34137 = C33794 * C424;
    const double C42486 = C33794 * C286;
    const double C42478 = C33794 * C276;
    const double C42874 = C33794 * C620;
    const double C42866 = C33794 * C626;
    const double C43028 = C33794 * C722;
    const double C43020 = C33794 * C728;
    const double C33827 = C33795 * C414;
    const double C33819 = C33795 * C422;
    const double C33809 = C33795 * C424;
    const double C33801 = C33795 * C415;
    const double C33989 = C33795 * C723;
    const double C33981 = C33795 * C730;
    const double C34143 = C33795 * C974;
    const double C34135 = C33795 * C981;
    const double C42488 = C33795 * C728;
    const double C42480 = C33795 * C722;
    const double C42872 = C33795 * C1499;
    const double C42864 = C33795 * C1505;
    const double C43026 = C33795 * C2395;
    const double C43018 = C33795 * C2402;
    const double C26418 = C26417 + C26407;
    const double C36667 = C36657 + C36658;
    const double C36666 = C36654 + C36655;
    const double C38208 = C36853 + C36854;
    const double C38193 = C36854 + C36853;
    const double C38207 = C36850 + C36851;
    const double C38194 = C36851 + C36850;
    const double C47258 = C38794 + C38793;
    const double C47259 = C38791 + C38790;
    const double C20237 = C20220 + C20221;
    const double C20233 = C20212 + C20213;
    const double C20226 = C20198 + C20199;
    const double C20222 = C20190 + C20191;
    const double C20391 = C20382 + C20383;
    const double C20387 = C20374 + C20375;
    const double C20545 = C20536 + C20537;
    const double C20541 = C20528 + C20529;
    const double C21510 = C21498 + C21499;
    const double C21506 = C21490 + C21491;
    const double C21895 = C21886 + C21887;
    const double C21891 = C21878 + C21879;
    const double C22049 = C22040 + C22041;
    const double C22045 = C22032 + C22033;
    const double C20236 = C20218 + C20219;
    const double C20232 = C20210 + C20211;
    const double C20227 = C20200 + C20201;
    const double C20223 = C20192 + C20193;
    const double C20390 = C20380 + C20381;
    const double C20386 = C20372 + C20373;
    const double C20544 = C20534 + C20535;
    const double C20540 = C20526 + C20527;
    const double C21511 = C21500 + C21501;
    const double C21507 = C21492 + C21493;
    const double C21894 = C21884 + C21885;
    const double C21890 = C21876 + C21877;
    const double C22048 = C22038 + C22039;
    const double C22044 = C22030 + C22031;
    const double C33846 = C33829 + C33830;
    const double C33842 = C33821 + C33822;
    const double C33835 = C33807 + C33808;
    const double C33831 = C33799 + C33800;
    const double C34000 = C33991 + C33992;
    const double C33996 = C33983 + C33984;
    const double C34154 = C34145 + C34146;
    const double C34150 = C34137 + C34138;
    const double C42498 = C42486 + C42487;
    const double C42494 = C42478 + C42479;
    const double C42883 = C42874 + C42875;
    const double C42879 = C42866 + C42867;
    const double C43037 = C43028 + C43029;
    const double C43033 = C43020 + C43021;
    const double C33845 = C33827 + C33828;
    const double C33841 = C33819 + C33820;
    const double C33836 = C33809 + C33810;
    const double C33832 = C33801 + C33802;
    const double C33999 = C33989 + C33990;
    const double C33995 = C33981 + C33982;
    const double C34153 = C34143 + C34144;
    const double C34149 = C34135 + C34136;
    const double C42499 = C42488 + C42489;
    const double C42495 = C42480 + C42481;
    const double C42882 = C42872 + C42873;
    const double C42878 = C42864 + C42865;
    const double C43036 = C43026 + C43027;
    const double C43032 = C43018 + C43019;
    const double C26419 = C26418 + C26408;
    const double C36669 = C36667 + C36659;
    const double C36668 = C36666 + C36656;
    const double C38224 = C36852 + C38208;
    const double C38215 = C38193 + C36852;
    const double C38223 = C36849 + C38207;
    const double C38216 = C38194 + C36849;
    const double C47272 = C47258 + C38792;
    const double C47273 = C47259 + C38789;
    const double C26420 = C26419 + C26409;
    const double C36671 = C36669 * C48978;
    const double C36670 = C36668 * C114;
    const double C26421 = C26420 + C26410;
    const double C36672 = C36670 + C36671;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C47957 +
            (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
            C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
               C48888 +
           (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
           C26421 * C26394) *
              C48967 * C48950 * C110 -
          ((C26411 + C26412 + C26413 + C26414 + C26415 + C26416) * C26394 +
           (C26410 + C26409 + C26408 + C26407 + C26406 + C26405) * C48896 +
           (C26404 + C26403 + C26402 + C26401 + C26400 + C26399) * C48888) *
              C48967 * C48950 * C111 +
          (C26421 * C48888 +
           (C26416 + C26415 + C26414 + C26413 + C26412 + C26411) * C48896 +
           (C170 * C47957 + C171 * C49036 + C314 * C47949 + C313 * C49043 +
            (C113 * C624 + C48995 * C633) * C47963 +
            (C113 * C634 + C48995 * C639) * C26391) *
               C26394) *
              C48967 * C48950 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C48967 * C268 -
           ((C26568 + C26569 + C26570 + C26571 + C26572 + C26573) * C26394 +
            (C26574 + C26575 + C26576 + C26577 + C26578 + C26579) * C48896 +
            (C1822 * C26391 + C1823 * C47963 + C1343 * C49043 + C1342 * C47949 +
             C1341 * C49036 + C1340 * C47957) *
                C48888) *
               C48967 * C49267) *
              C270 +
          (((C26579 + C26578 + C26577 + C26576 + C26575 + C26574) * C48888 +
            (C26573 + C26572 + C26571 + C26570 + C26569 + C26568) * C48896 +
            (C316 * C47957 + C315 * C49036 + C1143 * C47949 + C1142 * C49043 +
             (C113 * C1302 + C48995 * C1309) * C47963 +
             (C113 * C1310 + C48995 * C1314) * C26391) *
                C26394) *
               C48967 * C49267 -
           ((C26411 + C26412 + C26413 + C26414 + C26415 + C26416) * C26394 +
            (C26410 + C26409 + C26408 + C26407 + C26406 + C26405) * C48896 +
            (C26404 + C26403 + C26402 + C26401 + C26400 + C26399) * C48888) *
               C48967 * C268) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C410 -
           ((C26726 + C26727 + C26728 + C26729 + C26730 + C26731) * C26394 +
            (C26732 + C26733 + C26734 + C26735 + C26736 + C26737) * C48896 +
            (C1990 * C26391 + C1991 * C47963 + C1992 * C49043 + C1993 * C47949 +
             (C113 * C426 + C48995 * C434) * C49036 +
             (C113 * C416 + C48995 * C427) * C47957) *
                C48888) *
               C49269) *
              C48950 * C270 +
          (((C26737 + C26736 + C26735 + C26734 + C26733 + C26732) * C48888 +
            (C26731 + C26730 + C26729 + C26728 + C26727 + C26726) * C48896 +
            (C456 * C47957 + C455 * C49036 + C4224 * C47949 + C4223 * C49043 +
             (C113 * C1500 + C48995 * C1507) * C47963 +
             (C113 * C1508 + C48995 * C1512) * C26391) *
                C26394) *
               C49269 -
           ((C26411 + C26412 + C26413 + C26414 + C26415 + C26416) * C26394 +
            (C26410 + C26409 + C26408 + C26407 + C26406 + C26405) * C48896 +
            (C26404 + C26403 + C26402 + C26401 + C26400 + C26399) * C48888) *
               C410) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C48967 * C550 -
           ((C26568 + C26569 + C26570 + C26571 + C26572 + C26573) * C26394 +
            (C26574 + C26575 + C26576 + C26577 + C26578 + C26579) * C48896 +
            (C1822 * C26391 + C1823 * C47963 + C1343 * C49043 + C1342 * C47949 +
             C1341 * C49036 + C1340 * C47957) *
                C48888) *
               C48967 * C49267) *
              C552 +
          (((C26579 + C26578 + C26577 + C26576 + C26575 + C26574) * C48888 +
            (C26573 + C26572 + C26571 + C26570 + C26569 + C26568) * C48896 +
            (C316 * C47957 + C315 * C49036 + C1143 * C47949 + C1142 * C49043 +
             (C113 * C1302 + C48995 * C1309) * C47963 +
             (C113 * C1310 + C48995 * C1314) * C26391) *
                C26394) *
               C48967 * C49267 -
           ((C26411 + C26412 + C26413 + C26414 + C26415 + C26416) * C26394 +
            (C26410 + C26409 + C26408 + C26407 + C26406 + C26405) * C48896 +
            (C26404 + C26403 + C26402 + C26401 + C26400 + C26399) * C48888) *
               C48967 * C550) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C47957 +
            (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
            C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
               C48888 +
           (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
           C26421 * C26394) *
              C48967 * C616 -
          ((C26568 + C26569 + C26570 + C26571 + C26572 + C26573) * C26394 +
           (C26574 + C26575 + C26576 + C26577 + C26578 + C26579) * C48896 +
           (C1822 * C26391 + C1823 * C47963 + C1343 * C49043 + C1342 * C47949 +
            C1341 * C49036 + C1340 * C47957) *
               C48888) *
              C48967 * C617 +
          ((C1342 * C47957 + C1343 * C49036 + C1823 * C47949 + C1822 * C49043 +
            C9285 * C47963 + C9286 * C26391) *
               C48888 +
           (C1137 * C47957 + C1138 * C49036 + C1347 * C47949 + C1346 * C49043 +
            C9287 * C47963 + C9288 * C26391) *
               C48896 +
           (C1140 * C47957 + C1141 * C49036 + C1345 * C47949 + C1344 * C49043 +
            (C113 * C1807 + C48995 * C1812) * C47963 +
            (C113 * C1813 + C48995 * C1816) * C26391) *
               C26394) *
              C48967 * C618) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C410 -
           ((C26726 + C26727 + C26728 + C26729 + C26730 + C26731) * C26394 +
            (C26732 + C26733 + C26734 + C26735 + C26736 + C26737) * C48896 +
            (C1990 * C26391 + C1991 * C47963 + C1992 * C49043 + C1993 * C47949 +
             (C113 * C426 + C48995 * C434) * C49036 +
             (C113 * C416 + C48995 * C427) * C47957) *
                C48888) *
               C49269) *
              C550 +
          (((C1993 * C47957 + C1992 * C49036 + C1991 * C47949 + C1990 * C49043 +
             C9630 * C47963 + C9629 * C26391) *
                C48888 +
            (C1541 * C47957 + C1540 * C49036 + C1539 * C47949 + C1538 * C49043 +
             C11610 * C47963 + C11609 * C26391) *
                C48896 +
            (C1537 * C47957 + C1536 * C49036 + C1535 * C47949 + C1534 * C49043 +
             (C113 * C1971 + C48995 * C1976) * C47963 +
             (C113 * C1977 + C48995 * C1980) * C26391) *
                C26394) *
               C49269 -
           ((C26568 + C26569 + C26570 + C26571 + C26572 + C26573) * C26394 +
            (C26574 + C26575 + C26576 + C26577 + C26578 + C26579) * C48896 +
            (C1822 * C26391 + C1823 * C47963 + C1343 * C49043 + C1342 * C47949 +
             C1341 * C49036 + C1340 * C47957) *
                C48888) *
               C410) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C824 -
           ((C26726 + C26727 + C26728 + C26729 + C26730 + C26731) * C26394 +
            (C26732 + C26733 + C26734 + C26735 + C26736 + C26737) * C48896 +
            (C1990 * C26391 + C1991 * C47963 + C1992 * C49043 + C1993 * C47949 +
             (C113 * C426 + C48995 * C434) * C49036 +
             (C113 * C416 + C48995 * C427) * C47957) *
                C48888) *
               C49269) *
              C48950 * C552 +
          (((C26737 + C26736 + C26735 + C26734 + C26733 + C26732) * C48888 +
            (C26731 + C26730 + C26729 + C26728 + C26727 + C26726) * C48896 +
            (C456 * C47957 + C455 * C49036 + C4224 * C47949 + C4223 * C49043 +
             (C113 * C1500 + C48995 * C1507) * C47963 +
             (C113 * C1508 + C48995 * C1512) * C26391) *
                C26394) *
               C49269 -
           ((C26411 + C26412 + C26413 + C26414 + C26415 + C26416) * C26394 +
            (C26410 + C26409 + C26408 + C26407 + C26406 + C26405) * C48896 +
            (C26404 + C26403 + C26402 + C26401 + C26400 + C26399) * C48888) *
               C824) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C47957 +
             (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
             C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
                C48888 +
            (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
            C26421 * C26394) *
               C824 -
           ((C26726 + C26727 + C26728 + C26729 + C26730 + C26731) * C26394 +
            (C26732 + C26733 + C26734 + C26735 + C26736 + C26737) * C48896 +
            (C1990 * C26391 + C1991 * C47963 + C1992 * C49043 + C1993 * C47949 +
             (C113 * C426 + C48995 * C434) * C49036 +
             (C113 * C416 + C48995 * C427) * C47957) *
                C48888) *
               C49269) *
              C268 +
          (((C1993 * C47957 + C1992 * C49036 + C1991 * C47949 + C1990 * C49043 +
             C9630 * C47963 + C9629 * C26391) *
                C48888 +
            (C1541 * C47957 + C1540 * C49036 + C1539 * C47949 + C1538 * C49043 +
             C11610 * C47963 + C11609 * C26391) *
                C48896 +
            (C1537 * C47957 + C1536 * C49036 + C1535 * C47949 + C1534 * C49043 +
             (C113 * C1971 + C48995 * C1976) * C47963 +
             (C113 * C1977 + C48995 * C1980) * C26391) *
                C26394) *
               C49269 -
           ((C26568 + C26569 + C26570 + C26571 + C26572 + C26573) * C26394 +
            (C26574 + C26575 + C26576 + C26577 + C26578 + C26579) * C48896 +
            (C1822 * C26391 + C1823 * C47963 + C1343 * C49043 + C1342 * C47949 +
             C1341 * C49036 + C1340 * C47957) *
                C48888) *
               C824) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C47957 +
            (C113 * C123 + C48995 * C136) * C49036 + C1340 * C47949 +
            C1341 * C49043 + C1342 * C47963 + C1343 * C26391) *
               C48888 +
           (C26399 + C26400 + C26401 + C26402 + C26403 + C26404) * C48896 +
           C26421 * C26394) *
              C970 -
          ((C26726 + C26727 + C26728 + C26729 + C26730 + C26731) * C26394 +
           (C26732 + C26733 + C26734 + C26735 + C26736 + C26737) * C48896 +
           (C1990 * C26391 + C1991 * C47963 + C1992 * C49043 + C1993 * C47949 +
            (C113 * C426 + C48995 * C434) * C49036 +
            (C113 * C416 + C48995 * C427) * C47957) *
               C48888) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C47957 +
            (C113 * C979 + C48995 * C988) * C49036 +
            (C113 * C2395 + C48995 * C2401) * C47949 +
            (C113 * C2402 + C48995 * C2413) * C49043 +
            (C113 * C2396 + C48995 * C2403) * C47963 +
            (C113 * C2404 + C48995 * C2414) * C26391) *
               C48888 +
           ((C113 * C974 + C48995 * C980) * C47957 +
            (C113 * C981 + C48995 * C989) * C49036 +
            (C113 * C2397 + C48995 * C2405) * C47949 +
            (C113 * C2406 + C48995 * C2415) * C49043 +
            (C113 * C2398 + C48995 * C2407) * C47963 +
            (C113 * C2408 + C48995 * C2416) * C26391) *
               C48896 +
           ((C113 * C975 + C48995 * C982) * C47957 +
            (C113 * C983 + C48995 * C990) * C49036 +
            (C113 * C2399 + C48995 * C2409) * C47949 +
            (C113 * C2410 + C48995 * C2417) * C49043 +
            (C113 * C2400 + C48995 * C2411) * C47963 +
            (C113 * C2412 + C48995 * C2418) * C26391) *
               C26394) *
              C972) *
         C48950 * C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C47957 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49036 +
            (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
            C13231 * C47963 + C13232 * C26391) *
               C23637 +
           ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
            C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
            C12670 * C26391) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C6534 + C6535) * C26391 + (C6536 + C6537) * C47963 +
            C6518 * C49043 + C6519 * C47949 + (C5084 + C5083) * C49036 +
            (C5082 + C5081) * C47957) *
               C48893 +
           (C12679 * C26391 + C12680 * C47963 + C6528 * C49043 +
            C6529 * C47949 + (C5080 + C5079) * C49036 +
            (C5078 + C5077) * C47957) *
               C23637) *
              C48967 * C48950 * C111 +
          ((C5093 * C47957 + C5094 * C49036 + C6299 * C47949 + C6300 * C49043 +
            (C6537 + C6536) * C47963 + (C6535 + C6534) * C26391) *
               C23637 +
           (C5095 * C47957 + C5096 * C49036 + (C5260 + C5259) * C47949 +
            (C5258 + C5257) * C49043 +
            (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                C47963 +
            (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                C26391) *
               C48893) *
              C48967 * C48950 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C48967 * C268 -
           (((C12681 + C12682) * C26391 + (C12683 + C12684) * C47963 +
             C12679 * C49043 + C12680 * C47949 + C6528 * C49036 +
             C6529 * C47957) *
                C48893 +
            ((C13241 + C13242) * C26391 + (C13243 + C13244) * C47963 +
             (C7108 + C7109) * C49043 + (C7110 + C7111) * C47949 +
             (C6533 + C6532) * C49036 + (C6531 + C6530) * C47957) *
                C23637) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C47957 + C6509 * C49036 + C12669 * C47949 +
             C12670 * C49043 + (C12684 + C12683) * C47963 +
             (C12682 + C12681) * C26391) *
                C23637 +
            (C6299 * C47957 + C6300 * C49036 + (C6537 + C6536) * C47949 +
             (C6535 + C6534) * C49043 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C47963 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C26391) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C26391 + (C6536 + C6537) * C47963 +
             C6518 * C49043 + C6519 * C47949 + (C5084 + C5083) * C49036 +
             (C5082 + C5081) * C47957) *
                C48893 +
            (C12679 * C26391 + C12680 * C47963 + C6528 * C49043 +
             C6529 * C47949 + (C5080 + C5079) * C49036 +
             (C5078 + C5077) * C47957) *
                C23637) *
               C48967 * C268) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C26391 + (C12889 + C12890) * C47963 +
             (C6756 + C6757) * C49043 + (C6758 + C6759) * C47949 +
             (C5431 + C5432) * C49036 + (C5433 + C5434) * C47957) *
                C48893 +
            ((C13447 + C13448) * C26391 + (C13449 + C13450) * C47963 +
             (C7314 + C7315) * C49043 + (C7316 + C7317) * C47949 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49036 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C47957) *
                C23637) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C47957 + (C5432 + C5431) * C49036 +
             (C6759 + C6758) * C47949 + (C6757 + C6756) * C49043 +
             (C12890 + C12889) * C47963 + (C12888 + C12887) * C26391) *
                C23637 +
            ((C5430 + C5429) * C47957 + (C5428 + C5427) * C49036 +
             (C6755 + C6754) * C47949 + (C6753 + C6752) * C49043 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C47963 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C26391) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C26391 + (C6536 + C6537) * C47963 +
             C6518 * C49043 + C6519 * C47949 + (C5084 + C5083) * C49036 +
             (C5082 + C5081) * C47957) *
                C48893 +
            (C12679 * C26391 + C12680 * C47963 + C6528 * C49043 +
             C6529 * C47949 + (C5080 + C5079) * C49036 +
             (C5078 + C5077) * C47957) *
                C23637) *
               C410) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C48967 * C550 -
           (((C12681 + C12682) * C26391 + (C12683 + C12684) * C47963 +
             C12679 * C49043 + C12680 * C47949 + C6528 * C49036 +
             C6529 * C47957) *
                C48893 +
            ((C13241 + C13242) * C26391 + (C13243 + C13244) * C47963 +
             (C7108 + C7109) * C49043 + (C7110 + C7111) * C47949 +
             (C6533 + C6532) * C49036 + (C6531 + C6530) * C47957) *
                C23637) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C47957 + C6509 * C49036 + C12669 * C47949 +
             C12670 * C49043 + (C12684 + C12683) * C47963 +
             (C12682 + C12681) * C26391) *
                C23637 +
            (C6299 * C47957 + C6300 * C49036 + (C6537 + C6536) * C47949 +
             (C6535 + C6534) * C49043 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C47963 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C26391) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C26391 + (C6536 + C6537) * C47963 +
             C6518 * C49043 + C6519 * C47949 + (C5084 + C5083) * C49036 +
             (C5082 + C5081) * C47957) *
                C48893 +
            (C12679 * C26391 + C12680 * C47963 + C6528 * C49043 +
             C6529 * C47949 + (C5080 + C5079) * C49036 +
             (C5078 + C5077) * C47957) *
                C23637) *
               C48967 * C550) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C47957 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49036 +
            (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
            C13231 * C47963 + C13232 * C26391) *
               C23637 +
           ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
            C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
            C12670 * C26391) *
               C48893) *
              C48967 * C616 -
          (((C12681 + C12682) * C26391 + (C12683 + C12684) * C47963 +
            C12679 * C49043 + C12680 * C47949 + C6528 * C49036 +
            C6529 * C47957) *
               C48893 +
           ((C13241 + C13242) * C26391 + (C13243 + C13244) * C47963 +
            (C7108 + C7109) * C49043 + (C7110 + C7111) * C47949 +
            (C6533 + C6532) * C49036 + (C6531 + C6530) * C47957) *
               C23637) *
              C48967 * C617 +
          ((C13231 * C47957 + C13232 * C49036 + C14571 * C47949 +
            C14572 * C49043 + (C14584 + C14583) * C47963 +
            (C14582 + C14581) * C26391) *
               C23637 +
           (C12669 * C47957 + C12670 * C49036 + (C12684 + C12683) * C47949 +
            (C12682 + C12681) * C49043 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C47963 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C26391) *
               C48893) *
              C48967 * C618) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C26391 + (C12889 + C12890) * C47963 +
             (C6756 + C6757) * C49043 + (C6758 + C6759) * C47949 +
             (C5431 + C5432) * C49036 + (C5433 + C5434) * C47957) *
                C48893 +
            ((C13447 + C13448) * C26391 + (C13449 + C13450) * C47963 +
             (C7314 + C7315) * C49043 + (C7316 + C7317) * C47949 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49036 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C47957) *
                C23637) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C47957 + (C7315 + C7314) * C49036 +
             (C13450 + C13449) * C47949 + (C13448 + C13447) * C49043 +
             (C14726 + C14725) * C47963 + (C14724 + C14723) * C26391) *
                C23637 +
            ((C6759 + C6758) * C47957 + (C6757 + C6756) * C49036 +
             (C12890 + C12889) * C47949 + (C12888 + C12887) * C49043 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C47963 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C26391) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C26391 + (C12683 + C12684) * C47963 +
             C12679 * C49043 + C12680 * C47949 + C6528 * C49036 +
             C6529 * C47957) *
                C48893 +
            ((C13241 + C13242) * C26391 + (C13243 + C13244) * C47963 +
             (C7108 + C7109) * C49043 + (C7110 + C7111) * C47949 +
             (C6533 + C6532) * C49036 + (C6531 + C6530) * C47957) *
                C23637) *
               C410) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C26391 + (C12889 + C12890) * C47963 +
             (C6756 + C6757) * C49043 + (C6758 + C6759) * C47949 +
             (C5431 + C5432) * C49036 + (C5433 + C5434) * C47957) *
                C48893 +
            ((C13447 + C13448) * C26391 + (C13449 + C13450) * C47963 +
             (C7314 + C7315) * C49043 + (C7316 + C7317) * C47949 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49036 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C47957) *
                C23637) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C47957 + (C5432 + C5431) * C49036 +
             (C6759 + C6758) * C47949 + (C6757 + C6756) * C49043 +
             (C12890 + C12889) * C47963 + (C12888 + C12887) * C26391) *
                C23637 +
            ((C5430 + C5429) * C47957 + (C5428 + C5427) * C49036 +
             (C6755 + C6754) * C47949 + (C6753 + C6752) * C49043 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C47963 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C26391) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C26391 + (C6536 + C6537) * C47963 +
             C6518 * C49043 + C6519 * C47949 + (C5084 + C5083) * C49036 +
             (C5082 + C5081) * C47957) *
                C48893 +
            (C12679 * C26391 + C12680 * C47963 + C6528 * C49043 +
             C6529 * C47949 + (C5080 + C5079) * C49036 +
             (C5078 + C5077) * C47957) *
                C23637) *
               C824) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C47957 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49036 +
             (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
             C13231 * C47963 + C13232 * C26391) *
                C23637 +
            ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
             C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
             C12670 * C26391) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C26391 + (C12889 + C12890) * C47963 +
             (C6756 + C6757) * C49043 + (C6758 + C6759) * C47949 +
             (C5431 + C5432) * C49036 + (C5433 + C5434) * C47957) *
                C48893 +
            ((C13447 + C13448) * C26391 + (C13449 + C13450) * C47963 +
             (C7314 + C7315) * C49043 + (C7316 + C7317) * C47949 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49036 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C47957) *
                C23637) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C47957 + (C7315 + C7314) * C49036 +
             (C13450 + C13449) * C47949 + (C13448 + C13447) * C49043 +
             (C14726 + C14725) * C47963 + (C14724 + C14723) * C26391) *
                C23637 +
            ((C6759 + C6758) * C47957 + (C6757 + C6756) * C49036 +
             (C12890 + C12889) * C47949 + (C12888 + C12887) * C49043 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C47963 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C26391) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C26391 + (C12683 + C12684) * C47963 +
             C12679 * C49043 + C12680 * C47949 + C6528 * C49036 +
             C6529 * C47957) *
                C48893 +
            ((C13241 + C13242) * C26391 + (C13243 + C13244) * C47963 +
             (C7108 + C7109) * C49043 + (C7110 + C7111) * C47949 +
             (C6533 + C6532) * C49036 + (C6531 + C6530) * C47957) *
                C23637) *
               C824) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C47957 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49036 +
            (C6530 + C6531) * C47949 + (C6532 + C6533) * C49043 +
            C13231 * C47963 + C13232 * C26391) *
               C23637 +
           ((C5077 + C5078) * C47957 + (C5079 + C5080) * C49036 +
            C6508 * C47949 + C6509 * C49043 + C12669 * C47963 +
            C12670 * C26391) *
               C48893) *
              C970 -
          (((C12887 + C12888) * C26391 + (C12889 + C12890) * C47963 +
            (C6756 + C6757) * C49043 + (C6758 + C6759) * C47949 +
            (C5431 + C5432) * C49036 + (C5433 + C5434) * C47957) *
               C48893 +
           ((C13447 + C13448) * C26391 + (C13449 + C13450) * C47963 +
            (C7314 + C7315) * C49043 + (C7316 + C7317) * C47949 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C49036 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C47957) *
               C23637) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C47957 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C49036 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C47949 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C49043 +
            (C5042 * C2396 + C49240 * C2403 + C5043 * C10324 +
             C49082 * C10327) *
                C47963 +
            (C5042 * C2404 + C49240 * C2414 + C5043 * C10326 +
             C49082 * C10330) *
                C26391) *
               C23637 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C47957 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C49036 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C47949 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C49043 +
            (C5042 * C2398 + C49240 * C2407 + C5043 * C10325 +
             C49082 * C10328) *
                C47963 +
            (C5042 * C2408 + C49240 * C2416 + C5043 * C10329 +
             C49082 * C10331) *
                C26391) *
               C48893) *
              C972) *
         C48950 * C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C23639 +
            (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
            C1341 * C49310 + C1342 * C23641 + C1343 * C49300 + C1823 * C23642 +
            C1822 * C49282) *
               C23637 +
           (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 + C23650 +
            C23651) *
               C48893) *
              C48967 * C48950 * C110 -
          ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 + C23658 +
            C23659) *
               C48893 +
           (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 + C23645 +
            C23644) *
               C23637) *
              C48967 * C48950 * C111 +
          ((C23659 + C23658 + C23657 + C23656 + C23655 + C23654 + C23653 +
            C23652) *
               C23637 +
           (C168 * C23639 + C169 * C49314 + C316 * C23640 + C315 * C49310 +
            C1143 * C23641 + C1142 * C49300 +
            (C113 * C1302 + C48995 * C1309) * C23642 +
            (C113 * C1310 + C48995 * C1314) * C49282) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C22511 +
            (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
            C1341 * C49040) *
               C49313 +
           (C22514 + C22515 + C22516 + C22517) * C49306 + C22534 * C49293 +
           C22535 * C49276) *
              C48967 * C48950 * C110 -
          ((C22526 + C22527 + C22528 + C22529) * C49276 +
           (C22525 + C22524 + C22523 + C22522) * C49293 +
           (C22521 + C22520 + C22519 + C22518) * C49306 +
           (C22517 + C22516 + C22515 + C22514) * C49313) *
              C48967 * C48950 * C111 +
          (C22534 * C49313 + C22535 * C49306 +
           (C22529 + C22528 + C22527 + C22526) * C49293 +
           (C173 * C22511 + C172 * C22505 +
            (C113 * C277 + C48995 * C288) * C22512 +
            (C113 * C289 + C48995 * C295) * C49040) *
               C49276) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C22511 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C22505 +
            (C10161 + C10162 + C10163) * C22512 +
            (C10164 + C10165 + C10166) * C49040) *
               C23637 +
           ((C2572 + C2573 + C2574) * C22511 +
            (C2575 + C2576 + C2577) * C22505 +
            (C2782 + C2781 + C2780) * C22512 +
            (C2779 + C2778 + C2777) * C49040) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C2771 + C2772 + C2773) * C49040 +
            (C2774 + C2775 + C2776) * C22512 +
            (C2583 + C2582 + C2581) * C22505 +
            (C2580 + C2579 + C2578) * C22511) *
               C48893 +
           ((C2777 + C2778 + C2779) * C49040 +
            (C2780 + C2781 + C2782) * C22512 +
            (C2577 + C2576 + C2575) * C22505 +
            (C2574 + C2573 + C2572) * C22511) *
               C23637) *
              C48967 * C48950 * C111 +
          ((C2592 * C22511 + C2593 * C22505 + (C2776 + C2775 + C2774) * C22512 +
            (C2773 + C2772 + C2771) * C49040) *
               C23637 +
           ((C2589 + C2588 + C2587) * C22511 +
            (C2586 + C2585 + C2584) * C22505 +
            (C2532 * C273 + C49308 * C281 + C2533 * C725 + C49297 * C733 +
             C2534 * C2742 + C49275 * C2743) *
                C22512 +
            (C2532 * C280 + C49308 * C291 + C2533 * C734 + C49297 * C740 +
             C2534 * C2744 + C49275 * C2745) *
                C49040) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C48967 * C268 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C48967 * C49267) *
                      C270 +
                  (((C23797 + C23796 + C23795 + C23794 + C23793 + C23792 +
                     C23791 + C23790) *
                        C23637 +
                    (C318 * C23639 + C317 * C49314 + C1140 * C23640 +
                     C1141 * C49310 + C1345 * C23641 + C1344 * C49300 +
                     (C113 * C1807 + C48995 * C1812) * C23642 +
                     (C113 * C1813 + C48995 * C1816) * C49282) *
                        C48893) *
                       C48967 * C49267 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C48967 * C268) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C48967 * C268 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C48967 * C49267) *
                      C270 +
                  (((C22677 + C22676 + C22675 + C22674) * C49313 +
                    (C22673 + C22672 + C22671 + C22670) * C49306 +
                    (C22669 + C22668 + C22667 + C22666) * C49293 +
                    (C314 * C22511 + C313 * C22505 +
                     (C113 * C624 + C48995 * C633) * C22512 +
                     (C113 * C634 + C48995 * C639) * C49040) *
                        C49276) *
                       C48967 * C49267 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C48967 * C268) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C48967 * C268 -
                   (((C10178 + C10177 + C10176) * C49040 +
                     (C10175 + C10174 + C10173) * C22512 + C24998 * C22505 +
                     C24999 * C22511) *
                        C48893 +
                    ((C10172 + C10171 + C10170) * C49040 +
                     (C10169 + C10168 + C10167) * C22512 +
                     (C10166 + C10165 + C10164) * C22505 +
                     (C10163 + C10162 + C10161) * C22511) *
                        C23637) *
                       C48967 * C49267) *
                      C270 +
                  (((C24996 * C22511 + C24997 * C22505 +
                     (C10173 + C10174 + C10175) * C22512 +
                     (C10176 + C10177 + C10178) * C49040) *
                        C23637 +
                    ((C2776 + C2775 + C2774) * C22511 +
                     (C2773 + C2772 + C2771) * C22505 +
                     (C2532 * C622 + C49308 * C629 + C2533 * C1497 +
                      C49297 * C1502 + C2534 * C2400 + C49275 * C2411) *
                         C22512 +
                     (C2532 * C630 + C49308 * C637 + C2533 * C1501 +
                      C49297 * C1509 + C2534 * C2412 + C49275 * C2418) *
                         C49040) *
                        C48893) *
                       C48967 * C49267 -
                   (((C2771 + C2772 + C2773) * C49040 +
                     (C2774 + C2775 + C2776) * C22512 +
                     (C2583 + C2582 + C2581) * C22505 +
                     (C2580 + C2579 + C2578) * C22511) *
                        C48893 +
                    (C24998 * C49040 + C24999 * C22512 +
                     (C2577 + C2576 + C2575) * C22505 +
                     (C2574 + C2573 + C2572) * C22511) *
                        C23637) *
                       C48967 * C268) *
                      C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C410 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C48950 * C270 +
                  (((C23935 + C23934 + C23933 + C23932 + C23931 + C23930 +
                     C23929 + C23928) *
                        C23637 +
                    (C458 * C23639 + C457 * C49314 + C1537 * C23640 +
                     C1536 * C49310 + C1535 * C23641 + C1534 * C49300 +
                     (C113 * C1971 + C48995 * C1976) * C23642 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C410 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C48950 * C270 +
                  (((C22819 + C22818 + C22817 + C22816) * C49313 +
                    (C22815 + C22814 + C22813 + C22812) * C49306 +
                    (C22811 + C22810 + C22809 + C22808) * C49293 +
                    (C454 * C22511 + C453 * C22505 +
                     (C113 * C726 + C48995 * C735) * C22512 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C410 -
                   (((C25206 + C25207 + C25208) * C49040 +
                     (C25209 + C25210 + C25211) * C22512 +
                     (C2975 + C2976 + C2977) * C22505 +
                     (C2978 + C2979 + C2980) * C22511) *
                        C48893 +
                    ((C10791 + C10792 + C10793) * C49040 +
                     (C10794 + C10795 + C10796) * C22512 +
                     (C2534 * C2936 + C49275 * C2942 + C2533 * C979 +
                      C49297 * C988 + C2532 * C426 + C49308 * C434) *
                         C22505 +
                     (C2534 * C2930 + C49275 * C2937 + C2533 * C973 +
                      C49297 * C978 + C2532 * C416 + C49308 * C427) *
                         C22511) *
                        C23637) *
                       C49269) *
                      C48950 * C270 +
                  ((((C2980 + C2979 + C2978) * C22511 +
                     (C2977 + C2976 + C2975) * C22505 +
                     (C25211 + C25210 + C25209) * C22512 +
                     (C25208 + C25207 + C25206) * C49040) *
                        C23637 +
                    ((C2974 + C2973 + C2972) * C22511 +
                     (C2971 + C2970 + C2969) * C22505 +
                     (C2532 * C724 + C49308 * C731 + C2533 * C2399 +
                      C49297 * C2409 + C2534 * C3384 + C49275 * C3389) *
                         C22512 +
                     (C2532 * C732 + C49308 * C739 + C2533 * C2410 +
                      C49297 * C2417 + C2534 * C3390 + C49275 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C2771 + C2772 + C2773) * C49040 +
                     (C2774 + C2775 + C2776) * C22512 +
                     (C2583 + C2582 + C2581) * C22505 +
                     (C2580 + C2579 + C2578) * C22511) *
                        C48893 +
                    (C24998 * C49040 + C24999 * C22512 +
                     (C2577 + C2576 + C2575) * C22505 +
                     (C2574 + C2573 + C2572) * C22511) *
                        C23637) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C48967 * C550 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C48967 * C49267) *
                      C552 +
                  (((C23797 + C23796 + C23795 + C23794 + C23793 + C23792 +
                     C23791 + C23790) *
                        C23637 +
                    (C318 * C23639 + C317 * C49314 + C1140 * C23640 +
                     C1141 * C49310 + C1345 * C23641 + C1344 * C49300 +
                     (C113 * C1807 + C48995 * C1812) * C23642 +
                     (C113 * C1813 + C48995 * C1816) * C49282) *
                        C48893) *
                       C48967 * C49267 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C48967 * C550) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C48967 * C550 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C48967 * C49267) *
                      C552 +
                  (((C22677 + C22676 + C22675 + C22674) * C49313 +
                    (C22673 + C22672 + C22671 + C22670) * C49306 +
                    (C22669 + C22668 + C22667 + C22666) * C49293 +
                    (C314 * C22511 + C313 * C22505 +
                     (C113 * C624 + C48995 * C633) * C22512 +
                     (C113 * C634 + C48995 * C639) * C49040) *
                        C49276) *
                       C48967 * C49267 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C48967 * C550) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C48967 * C550 -
                   (((C10178 + C10177 + C10176) * C49040 +
                     (C10175 + C10174 + C10173) * C22512 + C24998 * C22505 +
                     C24999 * C22511) *
                        C48893 +
                    ((C10172 + C10171 + C10170) * C49040 +
                     (C10169 + C10168 + C10167) * C22512 +
                     (C10166 + C10165 + C10164) * C22505 +
                     (C10163 + C10162 + C10161) * C22511) *
                        C23637) *
                       C48967 * C49267) *
                      C552 +
                  (((C24996 * C22511 + C24997 * C22505 +
                     (C10173 + C10174 + C10175) * C22512 +
                     (C10176 + C10177 + C10178) * C49040) *
                        C23637 +
                    ((C2776 + C2775 + C2774) * C22511 +
                     (C2773 + C2772 + C2771) * C22505 +
                     (C2532 * C622 + C49308 * C629 + C2533 * C1497 +
                      C49297 * C1502 + C2534 * C2400 + C49275 * C2411) *
                         C22512 +
                     (C2532 * C630 + C49308 * C637 + C2533 * C1501 +
                      C49297 * C1509 + C2534 * C2412 + C49275 * C2418) *
                         C49040) *
                        C48893) *
                       C48967 * C49267 -
                   (((C2771 + C2772 + C2773) * C49040 +
                     (C2774 + C2775 + C2776) * C22512 +
                     (C2583 + C2582 + C2581) * C22505 +
                     (C2580 + C2579 + C2578) * C22511) *
                        C48893 +
                    (C24998 * C49040 + C24999 * C22512 +
                     (C2577 + C2576 + C2575) * C22505 +
                     (C2574 + C2573 + C2572) * C22511) *
                        C23637) *
                       C48967 * C550) *
                      C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C23639 +
            (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
            C1341 * C49310 + C1342 * C23641 + C1343 * C49300 + C1823 * C23642 +
            C1822 * C49282) *
               C23637 +
           (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 + C23650 +
            C23651) *
               C48893) *
              C48967 * C616 -
          ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 + C23796 +
            C23797) *
               C48893 +
           (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 + C1823 * C23641 +
            C1343 * C49310 + C1342 * C23640 + C1341 * C49314 + C1340 * C23639) *
               C23637) *
              C48967 * C617 +
          ((C1342 * C23639 + C1343 * C49314 + C1823 * C23640 + C1822 * C49310 +
            C9285 * C23641 + C9286 * C49300 + C9532 * C23642 + C9531 * C49282) *
               C23637 +
           (C1137 * C23639 + C1138 * C49314 + C1347 * C23640 + C1346 * C49310 +
            C9287 * C23641 + C9288 * C49300 +
            (C113 * C9269 + C48995 * C9272) * C23642 +
            (C113 * C9273 + C48995 * C9275) * C49282) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C22511 +
            (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
            C1341 * C49040) *
               C49313 +
           (C22514 + C22515 + C22516 + C22517) * C49306 + C22534 * C49293 +
           C22535 * C49276) *
              C48967 * C616 -
          ((C22666 + C22667 + C22668 + C22669) * C49276 +
           (C22670 + C22671 + C22672 + C22673) * C49293 +
           (C22674 + C22675 + C22676 + C22677) * C49306 +
           (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 + C1340 * C22511) *
               C49313) *
              C48967 * C617 +
          ((C1342 * C22511 + C1343 * C22505 + C1823 * C22512 + C1822 * C49040) *
               C49313 +
           (C1137 * C22511 + C1138 * C22505 + C1347 * C22512 + C1346 * C49040) *
               C49306 +
           (C1140 * C22511 + C1141 * C22505 + C1345 * C22512 + C1344 * C49040) *
               C49293 +
           (C1143 * C22511 + C1142 * C22505 +
            (C113 * C1302 + C48995 * C1309) * C22512 +
            (C113 * C1310 + C48995 * C1314) * C49040) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C22511 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C22505 +
            (C10161 + C10162 + C10163) * C22512 +
            (C10164 + C10165 + C10166) * C49040) *
               C23637 +
           ((C2572 + C2573 + C2574) * C22511 +
            (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
            C24997 * C49040) *
               C48893) *
              C48967 * C616 -
          (((C10178 + C10177 + C10176) * C49040 +
            (C10175 + C10174 + C10173) * C22512 + C24998 * C22505 +
            C24999 * C22511) *
               C48893 +
           ((C10172 + C10171 + C10170) * C49040 +
            (C10169 + C10168 + C10167) * C22512 +
            (C10166 + C10165 + C10164) * C22505 +
            (C10163 + C10162 + C10161) * C22511) *
               C23637) *
              C48967 * C617 +
          ((C10603 * C22511 + C10604 * C22505 +
            (C10610 + C10609 + C10608) * C22512 +
            (C10607 + C10606 + C10605) * C49040) *
               C23637 +
           ((C10173 + C10174 + C10175) * C22511 +
            (C10176 + C10177 + C10178) * C22505 +
            (C2532 * C1300 + C49308 * C1306 + C2533 * C1970 + C49297 * C1974 +
             C2534 * C10120 + C49275 * C10121) *
                C22512 +
            (C2532 * C1305 + C49308 * C1312 + C2533 * C1975 + C49297 * C1979 +
             C2534 * C10122 + C49275 * C10123) *
                C49040) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C410 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C550 +
                  (((C1993 * C23639 + C1992 * C49314 + C1991 * C23640 +
                     C1990 * C49310 + C9630 * C23641 + C9629 * C49300 +
                     C9628 * C23642 + C9627 * C49282) *
                        C23637 +
                    (C1541 * C23639 + C1540 * C49314 + C1539 * C23640 +
                     C1538 * C49310 + C11610 * C23641 + C11609 * C49300 +
                     (C113 * C9371 + C48995 * C9374) * C23642 +
                     (C113 * C9375 + C48995 * C9377) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C410) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C410 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C550 +
                  (((C1993 * C22511 + C1992 * C22505 + C1991 * C22512 +
                     C1990 * C49040) *
                        C49313 +
                    (C1541 * C22511 + C1540 * C22505 + C1539 * C22512 +
                     C1538 * C49040) *
                        C49306 +
                    (C1537 * C22511 + C1536 * C22505 + C1535 * C22512 +
                     C1534 * C49040) *
                        C49293 +
                    (C4224 * C22511 + C4223 * C22505 +
                     (C113 * C1500 + C48995 * C1507) * C22512 +
                     (C113 * C1508 + C48995 * C1512) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C410) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C410 -
                   (((C25206 + C25207 + C25208) * C49040 +
                     (C25209 + C25210 + C25211) * C22512 +
                     (C2975 + C2976 + C2977) * C22505 +
                     (C2978 + C2979 + C2980) * C22511) *
                        C48893 +
                    ((C10791 + C10792 + C10793) * C49040 +
                     (C10794 + C10795 + C10796) * C22512 +
                     (C2534 * C2936 + C49275 * C2942 + C2533 * C979 +
                      C49297 * C988 + C2532 * C426 + C49308 * C434) *
                         C22505 +
                     (C2534 * C2930 + C49275 * C2937 + C2533 * C973 +
                      C49297 * C978 + C2532 * C416 + C49308 * C427) *
                         C22511) *
                        C23637) *
                       C49269) *
                      C550 +
                  ((((C10796 + C10795 + C10794) * C22511 +
                     (C10793 + C10792 + C10791) * C22505 +
                     (C10790 + C10789 + C10788) * C22512 +
                     (C10787 + C10786 + C10785) * C49040) *
                        C23637 +
                    ((C25211 + C25210 + C25209) * C22511 +
                     (C25208 + C25207 + C25206) * C22505 +
                     (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 +
                      C49297 * C2407 + C2534 * C10325 + C49275 * C10328) *
                         C22512 +
                     (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 +
                      C49297 * C2416 + C2534 * C10329 + C49275 * C10331) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C10178 + C10177 + C10176) * C49040 +
                     (C10175 + C10174 + C10173) * C22512 + C24998 * C22505 +
                     C24999 * C22511) *
                        C48893 +
                    ((C10172 + C10171 + C10170) * C49040 +
                     (C10169 + C10168 + C10167) * C22512 +
                     (C10166 + C10165 + C10164) * C22505 +
                     (C10163 + C10162 + C10161) * C22511) *
                        C23637) *
                       C410) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C824 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C48950 * C552 +
                  (((C23935 + C23934 + C23933 + C23932 + C23931 + C23930 +
                     C23929 + C23928) *
                        C23637 +
                    (C458 * C23639 + C457 * C49314 + C1537 * C23640 +
                     C1536 * C49310 + C1535 * C23641 + C1534 * C49300 +
                     (C113 * C1971 + C48995 * C1976) * C23642 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C824 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C48950 * C552 +
                  (((C22819 + C22818 + C22817 + C22816) * C49313 +
                    (C22815 + C22814 + C22813 + C22812) * C49306 +
                    (C22811 + C22810 + C22809 + C22808) * C49293 +
                    (C454 * C22511 + C453 * C22505 +
                     (C113 * C726 + C48995 * C735) * C22512 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C824 -
                   (((C25206 + C25207 + C25208) * C49040 +
                     (C25209 + C25210 + C25211) * C22512 +
                     (C2975 + C2976 + C2977) * C22505 +
                     (C2978 + C2979 + C2980) * C22511) *
                        C48893 +
                    ((C10791 + C10792 + C10793) * C49040 +
                     (C10794 + C10795 + C10796) * C22512 +
                     (C2534 * C2936 + C49275 * C2942 + C2533 * C979 +
                      C49297 * C988 + C2532 * C426 + C49308 * C434) *
                         C22505 +
                     (C2534 * C2930 + C49275 * C2937 + C2533 * C973 +
                      C49297 * C978 + C2532 * C416 + C49308 * C427) *
                         C22511) *
                        C23637) *
                       C49269) *
                      C48950 * C552 +
                  ((((C2980 + C2979 + C2978) * C22511 +
                     (C2977 + C2976 + C2975) * C22505 +
                     (C25211 + C25210 + C25209) * C22512 +
                     (C25208 + C25207 + C25206) * C49040) *
                        C23637 +
                    ((C2974 + C2973 + C2972) * C22511 +
                     (C2971 + C2970 + C2969) * C22505 +
                     (C2532 * C724 + C49308 * C731 + C2533 * C2399 +
                      C49297 * C2409 + C2534 * C3384 + C49275 * C3389) *
                         C22512 +
                     (C2532 * C732 + C49308 * C739 + C2533 * C2410 +
                      C49297 * C2417 + C2534 * C3390 + C49275 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C2771 + C2772 + C2773) * C49040 +
                     (C2774 + C2775 + C2776) * C22512 +
                     (C2583 + C2582 + C2581) * C22505 +
                     (C2580 + C2579 + C2578) * C22511) *
                        C48893 +
                    (C24998 * C49040 + C24999 * C22512 +
                     (C2577 + C2576 + C2575) * C22505 +
                     (C2574 + C2573 + C2572) * C22511) *
                        C23637) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C824 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C268 +
                  (((C1993 * C23639 + C1992 * C49314 + C1991 * C23640 +
                     C1990 * C49310 + C9630 * C23641 + C9629 * C49300 +
                     C9628 * C23642 + C9627 * C49282) *
                        C23637 +
                    (C1541 * C23639 + C1540 * C49314 + C1539 * C23640 +
                     C1538 * C49310 + C11610 * C23641 + C11609 * C49300 +
                     (C113 * C9371 + C48995 * C9374) * C23642 +
                     (C113 * C9375 + C48995 * C9377) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C824) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C824 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C268 +
                  (((C1993 * C22511 + C1992 * C22505 + C1991 * C22512 +
                     C1990 * C49040) *
                        C49313 +
                    (C1541 * C22511 + C1540 * C22505 + C1539 * C22512 +
                     C1538 * C49040) *
                        C49306 +
                    (C1537 * C22511 + C1536 * C22505 + C1535 * C22512 +
                     C1534 * C49040) *
                        C49293 +
                    (C4224 * C22511 + C4223 * C22505 +
                     (C113 * C1500 + C48995 * C1507) * C22512 +
                     (C113 * C1508 + C48995 * C1512) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C824) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                      C49297 * C427 + C2534 * C973 + C49275 * C978) *
                         C22511 +
                     (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                      C49297 * C434 + C2534 * C979 + C49275 * C988) *
                         C22505 +
                     (C10161 + C10162 + C10163) * C22512 +
                     (C10164 + C10165 + C10166) * C49040) *
                        C23637 +
                    ((C2572 + C2573 + C2574) * C22511 +
                     (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                     C24997 * C49040) *
                        C48893) *
                       C824 -
                   (((C25206 + C25207 + C25208) * C49040 +
                     (C25209 + C25210 + C25211) * C22512 +
                     (C2975 + C2976 + C2977) * C22505 +
                     (C2978 + C2979 + C2980) * C22511) *
                        C48893 +
                    ((C10791 + C10792 + C10793) * C49040 +
                     (C10794 + C10795 + C10796) * C22512 +
                     (C2534 * C2936 + C49275 * C2942 + C2533 * C979 +
                      C49297 * C988 + C2532 * C426 + C49308 * C434) *
                         C22505 +
                     (C2534 * C2930 + C49275 * C2937 + C2533 * C973 +
                      C49297 * C978 + C2532 * C416 + C49308 * C427) *
                         C22511) *
                        C23637) *
                       C49269) *
                      C268 +
                  ((((C10796 + C10795 + C10794) * C22511 +
                     (C10793 + C10792 + C10791) * C22505 +
                     (C10790 + C10789 + C10788) * C22512 +
                     (C10787 + C10786 + C10785) * C49040) *
                        C23637 +
                    ((C25211 + C25210 + C25209) * C22511 +
                     (C25208 + C25207 + C25206) * C22505 +
                     (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 +
                      C49297 * C2407 + C2534 * C10325 + C49275 * C10328) *
                         C22512 +
                     (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 +
                      C49297 * C2416 + C2534 * C10329 + C49275 * C10331) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C10178 + C10177 + C10176) * C49040 +
                     (C10175 + C10174 + C10173) * C22512 + C24998 * C22505 +
                     C24999 * C22511) *
                        C48893 +
                    ((C10172 + C10171 + C10170) * C49040 +
                     (C10169 + C10168 + C10167) * C22512 +
                     (C10166 + C10165 + C10164) * C22505 +
                     (C10163 + C10162 + C10161) * C22511) *
                        C23637) *
                       C824) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[26] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C23639 +
                    (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                    C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                    C1823 * C23642 + C1822 * C49282) *
                       C23637 +
                   (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                    C23650 + C23651) *
                       C48893) *
                      C970 -
                  ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                    C23934 + C23935) *
                       C48893 +
                   (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                    C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                    (C113 * C426 + C48995 * C434) * C49314 +
                    (C113 * C416 + C48995 * C427) * C23639) *
                       C23637) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C23639 +
                    (C113 * C979 + C48995 * C988) * C49314 +
                    (C113 * C2395 + C48995 * C2401) * C23640 +
                    (C113 * C2402 + C48995 * C2413) * C49310 +
                    (C113 * C2396 + C48995 * C2403) * C23641 +
                    (C113 * C2404 + C48995 * C2414) * C49300 +
                    (C113 * C9856 + C48995 * C9858) * C23642 +
                    (C113 * C9859 + C48995 * C9862) * C49282) *
                       C23637 +
                   ((C113 * C974 + C48995 * C980) * C23639 +
                    (C113 * C981 + C48995 * C989) * C49314 +
                    (C113 * C2397 + C48995 * C2405) * C23640 +
                    (C113 * C2406 + C48995 * C2415) * C49310 +
                    (C113 * C2398 + C48995 * C2407) * C23641 +
                    (C113 * C2408 + C48995 * C2416) * C49300 +
                    (C113 * C10120 + C48995 * C10121) * C23642 +
                    (C113 * C10122 + C48995 * C10123) * C49282) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C22511 +
                    (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                    C1341 * C49040) *
                       C49313 +
                   (C22514 + C22515 + C22516 + C22517) * C49306 +
                   C22534 * C49293 + C22535 * C49276) *
                      C970 -
                  ((C22808 + C22809 + C22810 + C22811) * C49276 +
                   (C22812 + C22813 + C22814 + C22815) * C49293 +
                   (C22816 + C22817 + C22818 + C22819) * C49306 +
                   (C1992 * C49040 + C1993 * C22512 +
                    (C113 * C426 + C48995 * C434) * C22505 +
                    (C113 * C416 + C48995 * C427) * C22511) *
                       C49313) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C22511 +
                    (C113 * C979 + C48995 * C988) * C22505 +
                    (C113 * C2395 + C48995 * C2401) * C22512 +
                    (C113 * C2402 + C48995 * C2413) * C49040) *
                       C49313 +
                   ((C113 * C974 + C48995 * C980) * C22511 +
                    (C113 * C981 + C48995 * C989) * C22505 +
                    (C113 * C2397 + C48995 * C2405) * C22512 +
                    (C113 * C2406 + C48995 * C2415) * C49040) *
                       C49306 +
                   ((C113 * C975 + C48995 * C982) * C22511 +
                    (C113 * C983 + C48995 * C990) * C22505 +
                    (C113 * C2399 + C48995 * C2409) * C22512 +
                    (C113 * C2410 + C48995 * C2417) * C49040) *
                       C49293 +
                   ((C113 * C976 + C48995 * C984) * C22511 +
                    (C113 * C985 + C48995 * C991) * C22505 +
                    (C113 * C2742 + C48995 * C2743) * C22512 +
                    (C113 * C2744 + C48995 * C2745) * C49040) *
                       C49276) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C2532 * C115 + C49308 * C122 + C2533 * C416 +
                     C49297 * C427 + C2534 * C973 + C49275 * C978) *
                        C22511 +
                    (C2532 * C123 + C49308 * C136 + C2533 * C426 +
                     C49297 * C434 + C2534 * C979 + C49275 * C988) *
                        C22505 +
                    (C10161 + C10162 + C10163) * C22512 +
                    (C10164 + C10165 + C10166) * C49040) *
                       C23637 +
                   ((C2572 + C2573 + C2574) * C22511 +
                    (C2575 + C2576 + C2577) * C22505 + C24996 * C22512 +
                    C24997 * C49040) *
                       C48893) *
                      C970 -
                  (((C25206 + C25207 + C25208) * C49040 +
                    (C25209 + C25210 + C25211) * C22512 +
                    (C2975 + C2976 + C2977) * C22505 +
                    (C2978 + C2979 + C2980) * C22511) *
                       C48893 +
                   ((C10791 + C10792 + C10793) * C49040 +
                    (C10794 + C10795 + C10796) * C22512 +
                    (C2534 * C2936 + C49275 * C2942 + C2533 * C979 +
                     C49297 * C988 + C2532 * C426 + C49308 * C434) *
                        C22505 +
                    (C2534 * C2930 + C49275 * C2937 + C2533 * C973 +
                     C49297 * C978 + C2532 * C416 + C49308 * C427) *
                        C22511) *
                       C23637) *
                      C971 +
                  (((C2532 * C973 + C49308 * C978 + C2533 * C2930 +
                     C49297 * C2937 + C2534 * C3796 + C49275 * C3799) *
                        C22511 +
                    (C2532 * C979 + C49308 * C988 + C2533 * C2936 +
                     C49297 * C2942 + C2534 * C3800 + C49275 * C3805) *
                        C22505 +
                    (C2532 * C2395 + C49308 * C2401 + C2533 * C3382 +
                     C49297 * C3385 + C2534 * C11198 + C49275 * C11200) *
                        C22512 +
                    (C2532 * C2402 + C49308 * C2413 + C2533 * C3386 +
                     C49297 * C3391 + C2534 * C11201 + C49275 * C11204) *
                        C49040) *
                       C23637 +
                   ((C2532 * C974 + C49308 * C980 + C2533 * C2929 +
                     C49297 * C2935 + C2534 * C3797 + C49275 * C3801) *
                        C22511 +
                    (C2532 * C981 + C49308 * C989 + C2533 * C2934 +
                     C49297 * C2941 + C2534 * C3802 + C49275 * C3806) *
                        C22505 +
                    (C2532 * C2397 + C49308 * C2405 + C2533 * C3383 +
                     C49297 * C3387 + C2534 * C17901 + C49275 * C17902) *
                        C22512 +
                    (C2532 * C2406 + C49308 * C2415 + C2533 * C3388 +
                     C49297 * C3392 + C2534 * C17903 + C49275 * C17904) *
                        C49040) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C22511 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C22505 +
            (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
               C48888 +
           ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
            C6508 * C22512 + C6509 * C49040) *
               C48896 +
           C27694 * C26394) *
              C48967 * C48950 * C110 -
          (((C5257 + C5258) * C49040 + (C5259 + C5260) * C22512 +
            (C5088 + C5087) * C22505 + (C5086 + C5085) * C22511) *
               C26394 +
           (C6518 * C49040 + C6519 * C22512 + (C5084 + C5083) * C22505 +
            (C5082 + C5081) * C22511) *
               C48896 +
           (C6528 * C49040 + C6529 * C22512 + (C5080 + C5079) * C22505 +
            (C5078 + C5077) * C22511) *
               C48888) *
              C48967 * C48950 * C111 +
          (C27694 * C48888 +
           (C5095 * C22511 + C5096 * C22505 + (C5260 + C5259) * C22512 +
            (C5258 + C5257) * C49040) *
               C48896 +
           ((C5092 + C5091) * C22511 + (C5090 + C5089) * C22505 +
            (C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                C22512 +
            (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                C49040) *
               C26394) *
              C48967 * C48950 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C48967 * C268 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C22512 +
             C6518 * C22505 + C6519 * C22511) *
                C26394 +
            (C12679 * C49040 + C12680 * C22512 + C6528 * C22505 +
             C6529 * C22511) *
                C48896 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C22512 +
             (C6533 + C6532) * C22505 + (C6531 + C6530) * C22511) *
                C48888) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C22511 + C6509 * C22505 + C12669 * C22512 +
             C12670 * C49040) *
                C48888 +
            (C6299 * C22511 + C6300 * C22505 + (C6537 + C6536) * C22512 +
             (C6535 + C6534) * C49040) *
                C48896 +
            ((C5260 + C5259) * C22511 + (C5258 + C5257) * C22505 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C22512 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C26394) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C22512 +
             (C5088 + C5087) * C22505 + (C5086 + C5085) * C22511) *
                C26394 +
            (C6518 * C49040 + C6519 * C22512 + (C5084 + C5083) * C22505 +
             (C5082 + C5081) * C22511) *
                C48896 +
            (C6528 * C49040 + C6529 * C22512 + (C5080 + C5079) * C22505 +
             (C5078 + C5077) * C22511) *
                C48888) *
               C48967 * C268) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C22512 +
             (C5427 + C5428) * C22505 + (C5429 + C5430) * C22511) *
                C26394 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C22512 +
             (C5431 + C5432) * C22505 + (C5433 + C5434) * C22511) *
                C48896 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C22512 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C22505 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C22511) *
                C48888) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C22511 + (C5432 + C5431) * C22505 +
             (C6759 + C6758) * C22512 + (C6757 + C6756) * C49040) *
                C48888 +
            ((C5430 + C5429) * C22511 + (C5428 + C5427) * C22505 +
             (C6755 + C6754) * C22512 + (C6753 + C6752) * C49040) *
                C48896 +
            ((C5426 + C5425) * C22511 + (C5424 + C5423) * C22505 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C22512 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C26394) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C22512 +
             (C5088 + C5087) * C22505 + (C5086 + C5085) * C22511) *
                C26394 +
            (C6518 * C49040 + C6519 * C22512 + (C5084 + C5083) * C22505 +
             (C5082 + C5081) * C22511) *
                C48896 +
            (C6528 * C49040 + C6529 * C22512 + (C5080 + C5079) * C22505 +
             (C5078 + C5077) * C22511) *
                C48888) *
               C410) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C48967 * C550 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C22512 +
             C6518 * C22505 + C6519 * C22511) *
                C26394 +
            (C12679 * C49040 + C12680 * C22512 + C6528 * C22505 +
             C6529 * C22511) *
                C48896 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C22512 +
             (C6533 + C6532) * C22505 + (C6531 + C6530) * C22511) *
                C48888) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C22511 + C6509 * C22505 + C12669 * C22512 +
             C12670 * C49040) *
                C48888 +
            (C6299 * C22511 + C6300 * C22505 + (C6537 + C6536) * C22512 +
             (C6535 + C6534) * C49040) *
                C48896 +
            ((C5260 + C5259) * C22511 + (C5258 + C5257) * C22505 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C22512 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C26394) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C22512 +
             (C5088 + C5087) * C22505 + (C5086 + C5085) * C22511) *
                C26394 +
            (C6518 * C49040 + C6519 * C22512 + (C5084 + C5083) * C22505 +
             (C5082 + C5081) * C22511) *
                C48896 +
            (C6528 * C49040 + C6529 * C22512 + (C5080 + C5079) * C22505 +
             (C5078 + C5077) * C22511) *
                C48888) *
               C48967 * C550) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C22511 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C22505 +
            (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
               C48888 +
           ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
            C6508 * C22512 + C6509 * C49040) *
               C48896 +
           C27694 * C26394) *
              C48967 * C616 -
          (((C6534 + C6535) * C49040 + (C6536 + C6537) * C22512 +
            C6518 * C22505 + C6519 * C22511) *
               C26394 +
           (C12679 * C49040 + C12680 * C22512 + C6528 * C22505 +
            C6529 * C22511) *
               C48896 +
           ((C7108 + C7109) * C49040 + (C7110 + C7111) * C22512 +
            (C6533 + C6532) * C22505 + (C6531 + C6530) * C22511) *
               C48888) *
              C48967 * C617 +
          ((C13231 * C22511 + C13232 * C22505 + C14571 * C22512 +
            C14572 * C49040) *
               C48888 +
           (C12669 * C22511 + C12670 * C22505 + (C12684 + C12683) * C22512 +
            (C12682 + C12681) * C49040) *
               C48896 +
           ((C6537 + C6536) * C22511 + (C6535 + C6534) * C22505 +
            (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                C22512 +
            (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                C49040) *
               C26394) *
              C48967 * C618) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C22512 +
             (C5427 + C5428) * C22505 + (C5429 + C5430) * C22511) *
                C26394 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C22512 +
             (C5431 + C5432) * C22505 + (C5433 + C5434) * C22511) *
                C48896 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C22512 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C22505 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C22511) *
                C48888) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C22511 + (C7315 + C7314) * C22505 +
             (C13450 + C13449) * C22512 + (C13448 + C13447) * C49040) *
                C48888 +
            ((C6759 + C6758) * C22511 + (C6757 + C6756) * C22505 +
             (C12890 + C12889) * C22512 + (C12888 + C12887) * C49040) *
                C48896 +
            ((C6755 + C6754) * C22511 + (C6753 + C6752) * C22505 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C22512 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C26394) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C22512 +
             C6518 * C22505 + C6519 * C22511) *
                C26394 +
            (C12679 * C49040 + C12680 * C22512 + C6528 * C22505 +
             C6529 * C22511) *
                C48896 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C22512 +
             (C6533 + C6532) * C22505 + (C6531 + C6530) * C22511) *
                C48888) *
               C410) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C22512 +
             (C5427 + C5428) * C22505 + (C5429 + C5430) * C22511) *
                C26394 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C22512 +
             (C5431 + C5432) * C22505 + (C5433 + C5434) * C22511) *
                C48896 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C22512 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C22505 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C22511) *
                C48888) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C22511 + (C5432 + C5431) * C22505 +
             (C6759 + C6758) * C22512 + (C6757 + C6756) * C49040) *
                C48888 +
            ((C5430 + C5429) * C22511 + (C5428 + C5427) * C22505 +
             (C6755 + C6754) * C22512 + (C6753 + C6752) * C49040) *
                C48896 +
            ((C5426 + C5425) * C22511 + (C5424 + C5423) * C22505 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C22512 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C26394) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C22512 +
             (C5088 + C5087) * C22505 + (C5086 + C5085) * C22511) *
                C26394 +
            (C6518 * C49040 + C6519 * C22512 + (C5084 + C5083) * C22505 +
             (C5082 + C5081) * C22511) *
                C48896 +
            (C6528 * C49040 + C6529 * C22512 + (C5080 + C5079) * C22505 +
             (C5078 + C5077) * C22511) *
                C48888) *
               C824) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C22511 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C22505 +
             (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
                C48888 +
            ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
             C6508 * C22512 + C6509 * C49040) *
                C48896 +
            C27694 * C26394) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C22512 +
             (C5427 + C5428) * C22505 + (C5429 + C5430) * C22511) *
                C26394 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C22512 +
             (C5431 + C5432) * C22505 + (C5433 + C5434) * C22511) *
                C48896 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C22512 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C22505 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C22511) *
                C48888) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C22511 + (C7315 + C7314) * C22505 +
             (C13450 + C13449) * C22512 + (C13448 + C13447) * C49040) *
                C48888 +
            ((C6759 + C6758) * C22511 + (C6757 + C6756) * C22505 +
             (C12890 + C12889) * C22512 + (C12888 + C12887) * C49040) *
                C48896 +
            ((C6755 + C6754) * C22511 + (C6753 + C6752) * C22505 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C22512 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C26394) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C22512 +
             C6518 * C22505 + C6519 * C22511) *
                C26394 +
            (C12679 * C49040 + C12680 * C22512 + C6528 * C22505 +
             C6529 * C22511) *
                C48896 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C22512 +
             (C6533 + C6532) * C22505 + (C6531 + C6530) * C22511) *
                C48888) *
               C824) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C22511 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C22505 +
            (C6530 + C6531) * C22512 + (C6532 + C6533) * C49040) *
               C48888 +
           ((C5077 + C5078) * C22511 + (C5079 + C5080) * C22505 +
            C6508 * C22512 + C6509 * C49040) *
               C48896 +
           C27694 * C26394) *
              C970 -
          (((C6752 + C6753) * C49040 + (C6754 + C6755) * C22512 +
            (C5427 + C5428) * C22505 + (C5429 + C5430) * C22511) *
               C26394 +
           ((C6756 + C6757) * C49040 + (C6758 + C6759) * C22512 +
            (C5431 + C5432) * C22505 + (C5433 + C5434) * C22511) *
               C48896 +
           ((C7314 + C7315) * C49040 + (C7316 + C7317) * C22512 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C22505 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C22511) *
               C48888) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C22511 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C22505 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C22512 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C49040) *
               C48888 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C22511 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C22505 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C22512 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C49040) *
               C48896 +
           ((C5042 * C975 + C49240 * C982 + C5043 * C2928 + C49082 * C2933) *
                C22511 +
            (C5042 * C983 + C49240 * C990 + C5043 * C2932 + C49082 * C2940) *
                C22505 +
            (C5042 * C2399 + C49240 * C2409 + C5043 * C3384 + C49082 * C3389) *
                C22512 +
            (C5042 * C2410 + C49240 * C2417 + C5043 * C3390 + C49082 * C3393) *
                C49040) *
               C26394) *
              C972) *
         C48950 * C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[36] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C22511 +
                    (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                    C1341 * C49040) *
                       C49313 +
                   (C22514 + C22515 + C22516 + C22517) * C49306 +
                   C22534 * C49293 + C22535 * C49276) *
                      C48967 * C48950 * C110 -
                  ((C22526 + C22527 + C22528 + C22529) * C49276 +
                   (C22525 + C22524 + C22523 + C22522) * C49293 +
                   (C22521 + C22520 + C22519 + C22518) * C49306 +
                   (C22517 + C22516 + C22515 + C22514) * C49313) *
                      C48967 * C48950 * C111 +
                  (C22534 * C49313 + C22535 * C49306 +
                   (C22529 + C22528 + C22527 + C22526) * C49293 +
                   (C173 * C22511 + C172 * C22505 +
                    (C113 * C277 + C48995 * C288) * C22512 +
                    (C113 * C289 + C48995 * C295) * C49040) *
                       C49276) *
                      C48967 * C48950 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C23639 +
                    (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                    C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                    C1823 * C23642 + C1822 * C49282) *
                       C23637 +
                   (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                    C23650 + C23651) *
                       C48893) *
                      C48967 * C48950 * C110 -
                  ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                    C23658 + C23659) *
                       C48893 +
                   (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                    C23645 + C23644) *
                       C23637) *
                      C48967 * C48950 * C111 +
                  ((C23659 + C23658 + C23657 + C23656 + C23655 + C23654 +
                    C23653 + C23652) *
                       C23637 +
                   (C168 * C23639 + C169 * C49314 + C316 * C23640 +
                    C315 * C49310 + C1143 * C23641 + C1142 * C49300 +
                    (C113 * C1302 + C48995 * C1309) * C23642 +
                    (C113 * C1310 + C48995 * C1314) * C49282) *
                       C48893) *
                      C48967 * C48950 * C112)) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C48967 * C268 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C48967 * C49267) *
                      C270 +
                  (((C22677 + C22676 + C22675 + C22674) * C49313 +
                    (C22673 + C22672 + C22671 + C22670) * C49306 +
                    (C22669 + C22668 + C22667 + C22666) * C49293 +
                    (C314 * C22511 + C313 * C22505 +
                     (C113 * C624 + C48995 * C633) * C22512 +
                     (C113 * C634 + C48995 * C639) * C49040) *
                        C49276) *
                       C48967 * C49267 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C48967 * C268) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C48967 * C268 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C48967 * C49267) *
                      C270 +
                  (((C23797 + C23796 + C23795 + C23794 + C23793 + C23792 +
                     C23791 + C23790) *
                        C23637 +
                    (C318 * C23639 + C317 * C49314 + C1140 * C23640 +
                     C1141 * C49310 + C1345 * C23641 + C1344 * C49300 +
                     (C113 * C1807 + C48995 * C1812) * C23642 +
                     (C113 * C1813 + C48995 * C1816) * C49282) *
                        C48893) *
                       C48967 * C49267 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C48967 * C268) *
                      C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[38] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C410 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C48950 * C270 +
                  (((C22819 + C22818 + C22817 + C22816) * C49313 +
                    (C22815 + C22814 + C22813 + C22812) * C49306 +
                    (C22811 + C22810 + C22809 + C22808) * C49293 +
                    (C454 * C22511 + C453 * C22505 +
                     (C113 * C726 + C48995 * C735) * C22512 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C410 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C48950 * C270 +
                  (((C23935 + C23934 + C23933 + C23932 + C23931 + C23930 +
                     C23929 + C23928) *
                        C23637 +
                    (C458 * C23639 + C457 * C49314 + C1537 * C23640 +
                     C1536 * C49310 + C1535 * C23641 + C1534 * C49300 +
                     (C113 * C1971 + C48995 * C1976) * C23642 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C48967 * C550 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C48967 * C49267) *
                      C552 +
                  (((C22677 + C22676 + C22675 + C22674) * C49313 +
                    (C22673 + C22672 + C22671 + C22670) * C49306 +
                    (C22669 + C22668 + C22667 + C22666) * C49293 +
                    (C314 * C22511 + C313 * C22505 +
                     (C113 * C624 + C48995 * C633) * C22512 +
                     (C113 * C634 + C48995 * C639) * C49040) *
                        C49276) *
                       C48967 * C49267 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C48967 * C550) *
                      C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C48967 * C550 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C48967 * C49267) *
                      C552 +
                  (((C23797 + C23796 + C23795 + C23794 + C23793 + C23792 +
                     C23791 + C23790) *
                        C23637 +
                    (C318 * C23639 + C317 * C49314 + C1140 * C23640 +
                     C1141 * C49310 + C1345 * C23641 + C1344 * C49300 +
                     (C113 * C1807 + C48995 * C1812) * C23642 +
                     (C113 * C1813 + C48995 * C1816) * C49282) *
                        C48893) *
                       C48967 * C49267 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C48967 * C550) *
                      C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C22511 +
            (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
            C1341 * C49040) *
               C49313 +
           (C22514 + C22515 + C22516 + C22517) * C49306 + C22534 * C49293 +
           C22535 * C49276) *
              C48967 * C616 -
          ((C22666 + C22667 + C22668 + C22669) * C49276 +
           (C22670 + C22671 + C22672 + C22673) * C49293 +
           (C22674 + C22675 + C22676 + C22677) * C49306 +
           (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 + C1340 * C22511) *
               C49313) *
              C48967 * C617 +
          ((C1342 * C22511 + C1343 * C22505 + C1823 * C22512 + C1822 * C49040) *
               C49313 +
           (C1137 * C22511 + C1138 * C22505 + C1347 * C22512 + C1346 * C49040) *
               C49306 +
           (C1140 * C22511 + C1141 * C22505 + C1345 * C22512 + C1344 * C49040) *
               C49293 +
           (C1143 * C22511 + C1142 * C22505 +
            (C113 * C1302 + C48995 * C1309) * C22512 +
            (C113 * C1310 + C48995 * C1314) * C49040) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C23639 +
            (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
            C1341 * C49310 + C1342 * C23641 + C1343 * C49300 + C1823 * C23642 +
            C1822 * C49282) *
               C23637 +
           (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 + C23650 +
            C23651) *
               C48893) *
              C48967 * C616 -
          ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 + C23796 +
            C23797) *
               C48893 +
           (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 + C1823 * C23641 +
            C1343 * C49310 + C1342 * C23640 + C1341 * C49314 + C1340 * C23639) *
               C23637) *
              C48967 * C617 +
          ((C1342 * C23639 + C1343 * C49314 + C1823 * C23640 + C1822 * C49310 +
            C9285 * C23641 + C9286 * C49300 + C9532 * C23642 + C9531 * C49282) *
               C23637 +
           (C1137 * C23639 + C1138 * C49314 + C1347 * C23640 + C1346 * C49310 +
            C9287 * C23641 + C9288 * C49300 +
            (C113 * C9269 + C48995 * C9272) * C23642 +
            (C113 * C9273 + C48995 * C9275) * C49282) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C410 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C550 +
                  (((C1993 * C22511 + C1992 * C22505 + C1991 * C22512 +
                     C1990 * C49040) *
                        C49313 +
                    (C1541 * C22511 + C1540 * C22505 + C1539 * C22512 +
                     C1538 * C49040) *
                        C49306 +
                    (C1537 * C22511 + C1536 * C22505 + C1535 * C22512 +
                     C1534 * C49040) *
                        C49293 +
                    (C4224 * C22511 + C4223 * C22505 +
                     (C113 * C1500 + C48995 * C1507) * C22512 +
                     (C113 * C1508 + C48995 * C1512) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C410) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C410 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C550 +
                  (((C1993 * C23639 + C1992 * C49314 + C1991 * C23640 +
                     C1990 * C49310 + C9630 * C23641 + C9629 * C49300 +
                     C9628 * C23642 + C9627 * C49282) *
                        C23637 +
                    (C1541 * C23639 + C1540 * C49314 + C1539 * C23640 +
                     C1538 * C49310 + C11610 * C23641 + C11609 * C49300 +
                     (C113 * C9371 + C48995 * C9374) * C23642 +
                     (C113 * C9375 + C48995 * C9377) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C410) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[42] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C824 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C48950 * C552 +
                  (((C22819 + C22818 + C22817 + C22816) * C49313 +
                    (C22815 + C22814 + C22813 + C22812) * C49306 +
                    (C22811 + C22810 + C22809 + C22808) * C49293 +
                    (C454 * C22511 + C453 * C22505 +
                     (C113 * C726 + C48995 * C735) * C22512 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22526 + C22527 + C22528 + C22529) * C49276 +
                    (C22525 + C22524 + C22523 + C22522) * C49293 +
                    (C22521 + C22520 + C22519 + C22518) * C49306 +
                    (C22517 + C22516 + C22515 + C22514) * C49313) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C824 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C48950 * C552 +
                  (((C23935 + C23934 + C23933 + C23932 + C23931 + C23930 +
                     C23929 + C23928) *
                        C23637 +
                    (C458 * C23639 + C457 * C49314 + C1537 * C23640 +
                     C1536 * C49310 + C1535 * C23641 + C1534 * C49300 +
                     (C113 * C1971 + C48995 * C1976) * C23642 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23652 + C23653 + C23654 + C23655 + C23656 + C23657 +
                     C23658 + C23659) *
                        C48893 +
                    (C23651 + C23650 + C23649 + C23648 + C23647 + C23646 +
                     C23645 + C23644) *
                        C23637) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C22511 +
                     (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                     C1341 * C49040) *
                        C49313 +
                    (C22514 + C22515 + C22516 + C22517) * C49306 +
                    C22534 * C49293 + C22535 * C49276) *
                       C824 -
                   ((C22808 + C22809 + C22810 + C22811) * C49276 +
                    (C22812 + C22813 + C22814 + C22815) * C49293 +
                    (C22816 + C22817 + C22818 + C22819) * C49306 +
                    (C1992 * C49040 + C1993 * C22512 +
                     (C113 * C426 + C48995 * C434) * C22505 +
                     (C113 * C416 + C48995 * C427) * C22511) *
                        C49313) *
                       C49269) *
                      C268 +
                  (((C1993 * C22511 + C1992 * C22505 + C1991 * C22512 +
                     C1990 * C49040) *
                        C49313 +
                    (C1541 * C22511 + C1540 * C22505 + C1539 * C22512 +
                     C1538 * C49040) *
                        C49306 +
                    (C1537 * C22511 + C1536 * C22505 + C1535 * C22512 +
                     C1534 * C49040) *
                        C49293 +
                    (C4224 * C22511 + C4223 * C22505 +
                     (C113 * C1500 + C48995 * C1507) * C22512 +
                     (C113 * C1508 + C48995 * C1512) * C49040) *
                        C49276) *
                       C49269 -
                   ((C22666 + C22667 + C22668 + C22669) * C49276 +
                    (C22670 + C22671 + C22672 + C22673) * C49293 +
                    (C22674 + C22675 + C22676 + C22677) * C49306 +
                    (C1343 * C49040 + C1342 * C22512 + C1341 * C22505 +
                     C1340 * C22511) *
                        C49313) *
                       C824) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C23639 +
                     (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                     C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                     C1823 * C23642 + C1822 * C49282) *
                        C23637 +
                    (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                     C23650 + C23651) *
                        C48893) *
                       C824 -
                   ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                     C23934 + C23935) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                     C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                     (C113 * C426 + C48995 * C434) * C49314 +
                     (C113 * C416 + C48995 * C427) * C23639) *
                        C23637) *
                       C49269) *
                      C268 +
                  (((C1993 * C23639 + C1992 * C49314 + C1991 * C23640 +
                     C1990 * C49310 + C9630 * C23641 + C9629 * C49300 +
                     C9628 * C23642 + C9627 * C49282) *
                        C23637 +
                    (C1541 * C23639 + C1540 * C49314 + C1539 * C23640 +
                     C1538 * C49310 + C11610 * C23641 + C11609 * C49300 +
                     (C113 * C9371 + C48995 * C9374) * C23642 +
                     (C113 * C9375 + C48995 * C9377) * C49282) *
                        C48893) *
                       C49269 -
                   ((C23790 + C23791 + C23792 + C23793 + C23794 + C23795 +
                     C23796 + C23797) *
                        C48893 +
                    (C9286 * C49282 + C9285 * C23642 + C1822 * C49300 +
                     C1823 * C23641 + C1343 * C49310 + C1342 * C23640 +
                     C1341 * C49314 + C1340 * C23639) *
                        C23637) *
                       C824) *
                      C49267) *
                 C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C22511 +
                    (C113 * C123 + C48995 * C136) * C22505 + C1340 * C22512 +
                    C1341 * C49040) *
                       C49313 +
                   (C22514 + C22515 + C22516 + C22517) * C49306 +
                   C22534 * C49293 + C22535 * C49276) *
                      C970 -
                  ((C22808 + C22809 + C22810 + C22811) * C49276 +
                   (C22812 + C22813 + C22814 + C22815) * C49293 +
                   (C22816 + C22817 + C22818 + C22819) * C49306 +
                   (C1992 * C49040 + C1993 * C22512 +
                    (C113 * C426 + C48995 * C434) * C22505 +
                    (C113 * C416 + C48995 * C427) * C22511) *
                       C49313) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C22511 +
                    (C113 * C979 + C48995 * C988) * C22505 +
                    (C113 * C2395 + C48995 * C2401) * C22512 +
                    (C113 * C2402 + C48995 * C2413) * C49040) *
                       C49313 +
                   ((C113 * C974 + C48995 * C980) * C22511 +
                    (C113 * C981 + C48995 * C989) * C22505 +
                    (C113 * C2397 + C48995 * C2405) * C22512 +
                    (C113 * C2406 + C48995 * C2415) * C49040) *
                       C49306 +
                   ((C113 * C975 + C48995 * C982) * C22511 +
                    (C113 * C983 + C48995 * C990) * C22505 +
                    (C113 * C2399 + C48995 * C2409) * C22512 +
                    (C113 * C2410 + C48995 * C2417) * C49040) *
                       C49293 +
                   ((C113 * C976 + C48995 * C984) * C22511 +
                    (C113 * C985 + C48995 * C991) * C22505 +
                    (C113 * C2742 + C48995 * C2743) * C22512 +
                    (C113 * C2744 + C48995 * C2745) * C49040) *
                       C49276) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C23639 +
                    (C113 * C123 + C48995 * C136) * C49314 + C1340 * C23640 +
                    C1341 * C49310 + C1342 * C23641 + C1343 * C49300 +
                    C1823 * C23642 + C1822 * C49282) *
                       C23637 +
                   (C23644 + C23645 + C23646 + C23647 + C23648 + C23649 +
                    C23650 + C23651) *
                       C48893) *
                      C970 -
                  ((C23928 + C23929 + C23930 + C23931 + C23932 + C23933 +
                    C23934 + C23935) *
                       C48893 +
                   (C9629 * C49282 + C9630 * C23642 + C1990 * C49300 +
                    C1991 * C23641 + C1992 * C49310 + C1993 * C23640 +
                    (C113 * C426 + C48995 * C434) * C49314 +
                    (C113 * C416 + C48995 * C427) * C23639) *
                       C23637) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C23639 +
                    (C113 * C979 + C48995 * C988) * C49314 +
                    (C113 * C2395 + C48995 * C2401) * C23640 +
                    (C113 * C2402 + C48995 * C2413) * C49310 +
                    (C113 * C2396 + C48995 * C2403) * C23641 +
                    (C113 * C2404 + C48995 * C2414) * C49300 +
                    (C113 * C9856 + C48995 * C9858) * C23642 +
                    (C113 * C9859 + C48995 * C9862) * C49282) *
                       C23637 +
                   ((C113 * C974 + C48995 * C980) * C23639 +
                    (C113 * C981 + C48995 * C989) * C49314 +
                    (C113 * C2397 + C48995 * C2405) * C23640 +
                    (C113 * C2406 + C48995 * C2415) * C49310 +
                    (C113 * C2398 + C48995 * C2407) * C23641 +
                    (C113 * C2408 + C48995 * C2416) * C49300 +
                    (C113 * C10120 + C48995 * C10121) * C23642 +
                    (C113 * C10122 + C48995 * C10123) * C49282) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C47957 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49036 +
            (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
            C32927 * C47963 + C32928 * C26391) *
               C49217 +
           ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
            C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
            C32344 * C26391) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C32127 + C32128) * C26391 + (C32129 + C32130) * C47963 +
            C35220 * C49043 + C35221 * C47949 + (C30894 + C30893) * C49036 +
            (C30892 + C30891) * C47957) *
               C48893 +
           (C32353 * C26391 + C32354 * C47963 + C32355 * C49043 +
            C32356 * C47949 + (C30890 + C30889) * C49036 +
            (C30888 + C30887) * C47957) *
               C49217) *
              C48967 * C48950 * C111 +
          ((C30903 * C47957 + C30904 * C49036 + C35019 * C47949 +
            C35020 * C49043 + (C32130 + C32129) * C47963 +
            (C32128 + C32127) * C26391) *
               C49217 +
           (C30905 * C47957 + C30906 * C49036 + (C31070 + C31069) * C47949 +
            (C31068 + C31067) * C49043 +
            (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                C47963 +
            (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                C26391) *
               C48893) *
              C48967 * C48950 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C48967 * C268 -
           (((C32365 + C32366) * C26391 + (C32367 + C32368) * C47963 +
             C32353 * C49043 + C32354 * C47949 + C32355 * C49036 +
             C32356 * C47957) *
                C48893 +
            ((C32937 + C32938) * C26391 + (C32939 + C32940) * C47963 +
             (C32364 + C32363) * C49043 + (C32362 + C32361) * C47949 +
             (C32360 + C32359) * C49036 + (C32358 + C32357) * C47957) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C47957 + C32342 * C49036 + C32343 * C47949 +
             C32344 * C49043 + (C32368 + C32367) * C47963 +
             (C32366 + C32365) * C26391) *
                C49217 +
            (C35019 * C47957 + C35020 * C49036 + (C32130 + C32129) * C47949 +
             (C32128 + C32127) * C49043 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C47963 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C26391) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C26391 + (C32129 + C32130) * C47963 +
             C35220 * C49043 + C35221 * C47949 + (C30894 + C30893) * C49036 +
             (C30892 + C30891) * C47957) *
                C48893 +
            (C32353 * C26391 + C32354 * C47963 + C32355 * C49043 +
             C32356 * C47949 + (C30890 + C30889) * C49036 +
             (C30888 + C30887) * C47957) *
                C49217) *
               C48967 * C268) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C26391 + (C32581 + C32582) * C47963 +
             (C32583 + C32584) * C49043 + (C32585 + C32586) * C47949 +
             (C31241 + C31242) * C49036 + (C31243 + C31244) * C47957) *
                C48893 +
            ((C33151 + C33152) * C26391 + (C33153 + C33154) * C47963 +
             (C33155 + C33156) * C49043 + (C33157 + C33158) * C47949 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49036 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C47957) *
                C49217) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C47957 + (C31242 + C31241) * C49036 +
             (C32586 + C32585) * C47949 + (C32584 + C32583) * C49043 +
             (C32582 + C32581) * C47963 + (C32580 + C32579) * C26391) *
                C49217 +
            ((C31240 + C31239) * C47957 + (C31238 + C31237) * C49036 +
             (C35427 + C35426) * C47949 + (C35425 + C35424) * C49043 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C47963 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C26391) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C26391 + (C32129 + C32130) * C47963 +
             C35220 * C49043 + C35221 * C47949 + (C30894 + C30893) * C49036 +
             (C30892 + C30891) * C47957) *
                C48893 +
            (C32353 * C26391 + C32354 * C47963 + C32355 * C49043 +
             C32356 * C47949 + (C30890 + C30889) * C49036 +
             (C30888 + C30887) * C47957) *
                C49217) *
               C410) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C48967 * C550 -
           (((C32365 + C32366) * C26391 + (C32367 + C32368) * C47963 +
             C32353 * C49043 + C32354 * C47949 + C32355 * C49036 +
             C32356 * C47957) *
                C48893 +
            ((C32937 + C32938) * C26391 + (C32939 + C32940) * C47963 +
             (C32364 + C32363) * C49043 + (C32362 + C32361) * C47949 +
             (C32360 + C32359) * C49036 + (C32358 + C32357) * C47957) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C47957 + C32342 * C49036 + C32343 * C47949 +
             C32344 * C49043 + (C32368 + C32367) * C47963 +
             (C32366 + C32365) * C26391) *
                C49217 +
            (C35019 * C47957 + C35020 * C49036 + (C32130 + C32129) * C47949 +
             (C32128 + C32127) * C49043 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C47963 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C26391) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C26391 + (C32129 + C32130) * C47963 +
             C35220 * C49043 + C35221 * C47949 + (C30894 + C30893) * C49036 +
             (C30892 + C30891) * C47957) *
                C48893 +
            (C32353 * C26391 + C32354 * C47963 + C32355 * C49043 +
             C32356 * C47949 + (C30890 + C30889) * C49036 +
             (C30888 + C30887) * C47957) *
                C49217) *
               C48967 * C550) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C47957 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49036 +
            (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
            C32927 * C47963 + C32928 * C26391) *
               C49217 +
           ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
            C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
            C32344 * C26391) *
               C48893) *
              C48967 * C616 -
          (((C32365 + C32366) * C26391 + (C32367 + C32368) * C47963 +
            C32353 * C49043 + C32354 * C47949 + C32355 * C49036 +
            C32356 * C47957) *
               C48893 +
           ((C32937 + C32938) * C26391 + (C32939 + C32940) * C47963 +
            (C32364 + C32363) * C49043 + (C32362 + C32361) * C47949 +
            (C32360 + C32359) * C49036 + (C32358 + C32357) * C47957) *
               C49217) *
              C48967 * C617 +
          ((C32927 * C47957 + C32928 * C49036 + C41736 * C47949 +
            C41737 * C49043 + (C41749 + C41748) * C47963 +
            (C41747 + C41746) * C26391) *
               C49217 +
           (C32343 * C47957 + C32344 * C49036 + (C32368 + C32367) * C47949 +
            (C32366 + C32365) * C49043 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C47963 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C26391) *
               C48893) *
              C48967 * C618) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C26391 + (C32581 + C32582) * C47963 +
             (C32583 + C32584) * C49043 + (C32585 + C32586) * C47949 +
             (C31241 + C31242) * C49036 + (C31243 + C31244) * C47957) *
                C48893 +
            ((C33151 + C33152) * C26391 + (C33153 + C33154) * C47963 +
             (C33155 + C33156) * C49043 + (C33157 + C33158) * C47949 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49036 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C47957) *
                C49217) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C47957 + (C33156 + C33155) * C49036 +
             (C33154 + C33153) * C47949 + (C33152 + C33151) * C49043 +
             (C41891 + C41890) * C47963 + (C41889 + C41888) * C26391) *
                C49217 +
            ((C32586 + C32585) * C47957 + (C32584 + C32583) * C49036 +
             (C32582 + C32581) * C47949 + (C32580 + C32579) * C49043 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C47963 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C26391) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C26391 + (C32367 + C32368) * C47963 +
             C32353 * C49043 + C32354 * C47949 + C32355 * C49036 +
             C32356 * C47957) *
                C48893 +
            ((C32937 + C32938) * C26391 + (C32939 + C32940) * C47963 +
             (C32364 + C32363) * C49043 + (C32362 + C32361) * C47949 +
             (C32360 + C32359) * C49036 + (C32358 + C32357) * C47957) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C26391 + (C32581 + C32582) * C47963 +
             (C32583 + C32584) * C49043 + (C32585 + C32586) * C47949 +
             (C31241 + C31242) * C49036 + (C31243 + C31244) * C47957) *
                C48893 +
            ((C33151 + C33152) * C26391 + (C33153 + C33154) * C47963 +
             (C33155 + C33156) * C49043 + (C33157 + C33158) * C47949 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49036 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C47957) *
                C49217) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C47957 + (C31242 + C31241) * C49036 +
             (C32586 + C32585) * C47949 + (C32584 + C32583) * C49043 +
             (C32582 + C32581) * C47963 + (C32580 + C32579) * C26391) *
                C49217 +
            ((C31240 + C31239) * C47957 + (C31238 + C31237) * C49036 +
             (C35427 + C35426) * C47949 + (C35425 + C35424) * C49043 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C47963 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C26391) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C26391 + (C32129 + C32130) * C47963 +
             C35220 * C49043 + C35221 * C47949 + (C30894 + C30893) * C49036 +
             (C30892 + C30891) * C47957) *
                C48893 +
            (C32353 * C26391 + C32354 * C47963 + C32355 * C49043 +
             C32356 * C47949 + (C30890 + C30889) * C49036 +
             (C30888 + C30887) * C47957) *
                C49217) *
               C824) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C47957 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49036 +
             (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
             C32927 * C47963 + C32928 * C26391) *
                C49217 +
            ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
             C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
             C32344 * C26391) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C26391 + (C32581 + C32582) * C47963 +
             (C32583 + C32584) * C49043 + (C32585 + C32586) * C47949 +
             (C31241 + C31242) * C49036 + (C31243 + C31244) * C47957) *
                C48893 +
            ((C33151 + C33152) * C26391 + (C33153 + C33154) * C47963 +
             (C33155 + C33156) * C49043 + (C33157 + C33158) * C47949 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49036 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C47957) *
                C49217) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C47957 + (C33156 + C33155) * C49036 +
             (C33154 + C33153) * C47949 + (C33152 + C33151) * C49043 +
             (C41891 + C41890) * C47963 + (C41889 + C41888) * C26391) *
                C49217 +
            ((C32586 + C32585) * C47957 + (C32584 + C32583) * C49036 +
             (C32582 + C32581) * C47949 + (C32580 + C32579) * C49043 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C47963 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C26391) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C26391 + (C32367 + C32368) * C47963 +
             C32353 * C49043 + C32354 * C47949 + C32355 * C49036 +
             C32356 * C47957) *
                C48893 +
            ((C32937 + C32938) * C26391 + (C32939 + C32940) * C47963 +
             (C32364 + C32363) * C49043 + (C32362 + C32361) * C47949 +
             (C32360 + C32359) * C49036 + (C32358 + C32357) * C47957) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C47957 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49036 +
            (C32357 + C32358) * C47949 + (C32359 + C32360) * C49043 +
            C32927 * C47963 + C32928 * C26391) *
               C49217 +
           ((C30887 + C30888) * C47957 + (C30889 + C30890) * C49036 +
            C32341 * C47949 + C32342 * C49043 + C32343 * C47963 +
            C32344 * C26391) *
               C48893) *
              C970 -
          (((C32579 + C32580) * C26391 + (C32581 + C32582) * C47963 +
            (C32583 + C32584) * C49043 + (C32585 + C32586) * C47949 +
            (C31241 + C31242) * C49036 + (C31243 + C31244) * C47957) *
               C48893 +
           ((C33151 + C33152) * C26391 + (C33153 + C33154) * C47963 +
            (C33155 + C33156) * C49043 + (C33157 + C33158) * C47949 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49036 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C47957) *
               C49217) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C47957 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C49036 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C47949 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49043 +
            (C30852 * C2396 + C30850 * C2403 + C30853 * C10324 +
             C49082 * C10327) *
                C47963 +
            (C30852 * C2404 + C30850 * C2414 + C30853 * C10326 +
             C49082 * C10330) *
                C26391) *
               C49217 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C47957 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C49036 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C47949 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49043 +
            (C30852 * C2398 + C30850 * C2407 + C30853 * C10325 +
             C49082 * C10328) *
                C47963 +
            (C30852 * C2408 + C30850 * C2416 + C30853 * C10329 +
             C49082 * C10331) *
                C26391) *
               C48893) *
              C972) *
         C48950 * C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                    C49085 * C427 + C48050 * C973 + C36607 * C978) *
                       C47957 +
                   (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                    C49085 * C434 + C48050 * C979 + C36607 * C988) *
                       C49036 +
                   (C38209 + C38210 + C38211) * C47949 +
                   (C38212 + C38213 + C38214) * C49043 +
                   (C38794 + C38793 + C38792) * C47963 +
                   (C38791 + C38790 + C38789) * C26391) *
                      C48883 * C48967 * C48950 * C110 -
                  ((C38217 + C38218 + C38219) * C26391 +
                   (C38220 + C38221 + C38222) * C47963 + C38223 * C49043 +
                   C38224 * C47949 + (C36653 + C36652 + C36651) * C49036 +
                   (C36650 + C36649 + C36648) * C47957) *
                      C48883 * C48967 * C48950 * C111 +
                  (C36668 * C47957 + C36669 * C49036 +
                   (C36848 + C36847 + C36846) * C47949 +
                   (C36845 + C36844 + C36843) * C49043 +
                   (C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                    C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                       C47963 +
                   (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                    C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                       C26391) *
                      C48883 * C48967 * C48950 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 +
                    (C38794 + C38793 + C38792) * C47963 +
                    (C38791 + C38790 + C38789) * C26391) *
                       C48883 * C48967 * C268 -
                   ((C48050 * C9859 + C36607 * C9862 + C48036 * C1973 +
                     C49085 * C1978 + C48044 * C1307 + C49078 * C1313) *
                        C26391 +
                    (C48050 * C9856 + C36607 * C9858 + C48036 * C1969 +
                     C49085 * C1972 + C48044 * C1301 + C49078 * C1308) *
                        C47963 +
                    (C38789 + C38790 + C38791) * C49043 +
                    (C38792 + C38793 + C38794) * C47949 +
                    (C38214 + C38213 + C38212) * C49036 +
                    (C38211 + C38210 + C38209) * C47957) *
                       C48883 * C48967 * C49267) *
                      C270 +
                  ((C38215 * C47957 + C38216 * C49036 +
                    (C38222 + C38221 + C38220) * C47949 +
                    (C38219 + C38218 + C38217) * C49043 +
                    (C48044 * C1300 + C49078 * C1306 + C48036 * C1970 +
                     C49085 * C1974 + C48050 * C10120 + C36607 * C10121) *
                        C47963 +
                    (C48044 * C1305 + C49078 * C1312 + C48036 * C1975 +
                     C49085 * C1979 + C48050 * C10122 + C36607 * C10123) *
                        C26391) *
                       C48883 * C48967 * C49267 -
                   ((C38217 + C38218 + C38219) * C26391 +
                    (C38220 + C38221 + C38222) * C47963 + C38223 * C49043 +
                    C38224 * C47949 + (C36653 + C36652 + C36651) * C49036 +
                    (C36650 + C36649 + C36648) * C47957) *
                       C48883 * C48967 * C268) *
                      C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 +
                    (C38794 + C38793 + C38792) * C47963 +
                    (C38791 + C38790 + C38789) * C26391) *
                       C48883 * C410 -
                   ((C48050 * C10326 + C36607 * C10330 + C48036 * C2404 +
                     C49085 * C2414 + C48044 * C1505 + C49078 * C1511) *
                        C26391 +
                    (C48050 * C10324 + C36607 * C10327 + C48036 * C2396 +
                     C49085 * C2403 + C48044 * C1499 + C49078 * C1506) *
                        C47963 +
                    (C39001 + C39002 + C39003) * C49043 +
                    (C39004 + C39005 + C39006) * C47949 +
                    (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                     C49085 * C988 + C48044 * C426 + C49078 * C434) *
                        C49036 +
                    (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                     C49085 * C978 + C48044 * C416 + C49078 * C427) *
                        C47957) *
                       C48883 * C49269) *
                      C48950 * C270 +
                  (((C37036 + C37035 + C37034) * C47957 +
                    (C37033 + C37032 + C37031) * C49036 +
                    (C38436 + C38435 + C38434) * C47949 +
                    (C38433 + C38432 + C38431) * C49043 +
                    (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                     C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                        C47963 +
                    (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                     C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                        C26391) *
                       C48883 * C49269 -
                   ((C38217 + C38218 + C38219) * C26391 +
                    (C38220 + C38221 + C38222) * C47963 + C38223 * C49043 +
                    C38224 * C47949 + (C36653 + C36652 + C36651) * C49036 +
                    (C36650 + C36649 + C36648) * C47957) *
                       C48883 * C410) *
                      C48950 * C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 +
                    (C38794 + C38793 + C38792) * C47963 +
                    (C38791 + C38790 + C38789) * C26391) *
                       C48883 * C48967 * C550 -
                   ((C48050 * C9859 + C36607 * C9862 + C48036 * C1973 +
                     C49085 * C1978 + C48044 * C1307 + C49078 * C1313) *
                        C26391 +
                    (C48050 * C9856 + C36607 * C9858 + C48036 * C1969 +
                     C49085 * C1972 + C48044 * C1301 + C49078 * C1308) *
                        C47963 +
                    (C38789 + C38790 + C38791) * C49043 +
                    (C38792 + C38793 + C38794) * C47949 +
                    (C38214 + C38213 + C38212) * C49036 +
                    (C38211 + C38210 + C38209) * C47957) *
                       C48883 * C48967 * C49267) *
                      C552 +
                  ((C38215 * C47957 + C38216 * C49036 +
                    (C38222 + C38221 + C38220) * C47949 +
                    (C38219 + C38218 + C38217) * C49043 +
                    (C48044 * C1300 + C49078 * C1306 + C48036 * C1970 +
                     C49085 * C1974 + C48050 * C10120 + C36607 * C10121) *
                        C47963 +
                    (C48044 * C1305 + C49078 * C1312 + C48036 * C1975 +
                     C49085 * C1979 + C48050 * C10122 + C36607 * C10123) *
                        C26391) *
                       C48883 * C48967 * C49267 -
                   ((C38217 + C38218 + C38219) * C26391 +
                    (C38220 + C38221 + C38222) * C47963 + C38223 * C49043 +
                    C38224 * C47949 + (C36653 + C36652 + C36651) * C49036 +
                    (C36650 + C36649 + C36648) * C47957) *
                       C48883 * C48967 * C550) *
                      C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                    C49085 * C427 + C48050 * C973 + C36607 * C978) *
                       C47957 +
                   (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                    C49085 * C434 + C48050 * C979 + C36607 * C988) *
                       C49036 +
                   (C38209 + C38210 + C38211) * C47949 +
                   (C38212 + C38213 + C38214) * C49043 + C47272 * C47963 +
                   C47273 * C26391) *
                      C48883 * C48967 * C616 -
                  ((C47274 + C47275 + C47276) * C26391 +
                   (C47277 + C47278 + C47279) * C47963 +
                   (C38789 + C38790 + C38791) * C49043 +
                   (C38792 + C38793 + C38794) * C47949 +
                   (C38214 + C38213 + C38212) * C49036 +
                   (C38211 + C38210 + C38209) * C47957) *
                      C48883 * C48967 * C617 +
                  (C47272 * C47957 + C47273 * C49036 +
                   (C47279 + C47278 + C47277) * C47949 +
                   (C47276 + C47275 + C47274) * C49043 +
                   (C48044 * C1805 + C49078 * C1808 + C48036 * C9370 +
                    C49085 * C9373 + C48050 * C9857 + C36607 * C9860) *
                       C47963 +
                   (C48044 * C1809 + C49078 * C1814 + C48036 * C9372 +
                    C49085 * C9376 + C48050 * C9861 + C36607 * C9863) *
                       C26391) *
                      C48883 * C48967 * C618) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 + C47272 * C47963 +
                    C47273 * C26391) *
                       C48883 * C410 -
                   ((C47438 + C47439 + C47440) * C26391 +
                    (C47441 + C47442 + C47443) * C47963 +
                    (C39001 + C39002 + C39003) * C49043 +
                    (C39004 + C39005 + C39006) * C47949 +
                    (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                     C49085 * C988 + C48044 * C426 + C49078 * C434) *
                        C49036 +
                    (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                     C49085 * C978 + C48044 * C416 + C49078 * C427) *
                        C47957) *
                       C48883 * C49269) *
                      C550 +
                  (((C39006 + C39005 + C39004) * C47957 +
                    (C39003 + C39002 + C39001) * C49036 +
                    (C47443 + C47442 + C47441) * C47949 +
                    (C47440 + C47439 + C47438) * C49043 +
                    (C48044 * C1969 + C49078 * C1972 + C48036 * C9856 +
                     C49085 * C9858 + C48050 * C10756 + C36607 * C10757) *
                        C47963 +
                    (C48044 * C1973 + C49078 * C1978 + C48036 * C9859 +
                     C49085 * C9862 + C48050 * C10758 + C36607 * C10759) *
                        C26391) *
                       C48883 * C49269 -
                   ((C47274 + C47275 + C47276) * C26391 +
                    (C47277 + C47278 + C47279) * C47963 +
                    (C38789 + C38790 + C38791) * C49043 +
                    (C38792 + C38793 + C38794) * C47949 +
                    (C38214 + C38213 + C38212) * C49036 +
                    (C38211 + C38210 + C38209) * C47957) *
                       C48883 * C410) *
                      C49267) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 + C47272 * C47963 +
                    C47273 * C26391) *
                       C48883 * C824 -
                   ((C47438 + C47439 + C47440) * C26391 +
                    (C47441 + C47442 + C47443) * C47963 +
                    (C39001 + C39002 + C39003) * C49043 +
                    (C39004 + C39005 + C39006) * C47949 +
                    (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                     C49085 * C988 + C48044 * C426 + C49078 * C434) *
                        C49036 +
                    (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                     C49085 * C978 + C48044 * C416 + C49078 * C427) *
                        C47957) *
                       C48883 * C49269) *
                      C48950 * C552 +
                  (((C37036 + C37035 + C37034) * C47957 +
                    (C37033 + C37032 + C37031) * C49036 +
                    (C38436 + C38435 + C38434) * C47949 +
                    (C38433 + C38432 + C38431) * C49043 +
                    (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                     C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                        C47963 +
                    (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                     C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                        C26391) *
                       C48883 * C49269 -
                   ((C38217 + C38218 + C38219) * C26391 +
                    (C38220 + C38221 + C38222) * C47963 + C38223 * C49043 +
                    C38224 * C47949 + (C36653 + C36652 + C36651) * C49036 +
                    (C36650 + C36649 + C36648) * C47957) *
                       C48883 * C824) *
                      C48950 * C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C47957 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C49036 +
                    (C38209 + C38210 + C38211) * C47949 +
                    (C38212 + C38213 + C38214) * C49043 + C47272 * C47963 +
                    C47273 * C26391) *
                       C48883 * C824 -
                   ((C47438 + C47439 + C47440) * C26391 +
                    (C47441 + C47442 + C47443) * C47963 +
                    (C39001 + C39002 + C39003) * C49043 +
                    (C39004 + C39005 + C39006) * C47949 +
                    (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                     C49085 * C988 + C48044 * C426 + C49078 * C434) *
                        C49036 +
                    (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                     C49085 * C978 + C48044 * C416 + C49078 * C427) *
                        C47957) *
                       C48883 * C49269) *
                      C268 +
                  (((C39006 + C39005 + C39004) * C47957 +
                    (C39003 + C39002 + C39001) * C49036 +
                    (C47443 + C47442 + C47441) * C47949 +
                    (C47440 + C47439 + C47438) * C49043 +
                    (C48044 * C1969 + C49078 * C1972 + C48036 * C9856 +
                     C49085 * C9858 + C48050 * C10756 + C36607 * C10757) *
                        C47963 +
                    (C48044 * C1973 + C49078 * C1978 + C48036 * C9859 +
                     C49085 * C9862 + C48050 * C10758 + C36607 * C10759) *
                        C26391) *
                       C48883 * C49269 -
                   ((C47274 + C47275 + C47276) * C26391 +
                    (C47277 + C47278 + C47279) * C47963 +
                    (C38789 + C38790 + C38791) * C49043 +
                    (C38792 + C38793 + C38794) * C47949 +
                    (C38214 + C38213 + C38212) * C49036 +
                    (C38211 + C38210 + C38209) * C47957) *
                       C48883 * C824) *
                      C49267) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                    C49085 * C427 + C48050 * C973 + C36607 * C978) *
                       C47957 +
                   (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                    C49085 * C434 + C48050 * C979 + C36607 * C988) *
                       C49036 +
                   (C38209 + C38210 + C38211) * C47949 +
                   (C38212 + C38213 + C38214) * C49043 + C47272 * C47963 +
                   C47273 * C26391) *
                      C48883 * C970 -
                  ((C47438 + C47439 + C47440) * C26391 +
                   (C47441 + C47442 + C47443) * C47963 +
                   (C39001 + C39002 + C39003) * C49043 +
                   (C39004 + C39005 + C39006) * C47949 +
                   (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                    C49085 * C988 + C48044 * C426 + C49078 * C434) *
                       C49036 +
                   (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                    C49085 * C978 + C48044 * C416 + C49078 * C427) *
                       C47957) *
                      C48883 * C971 +
                  ((C48044 * C973 + C49078 * C978 + C48036 * C2930 +
                    C49085 * C2937 + C48050 * C3796 + C36607 * C3799) *
                       C47957 +
                   (C48044 * C979 + C49078 * C988 + C48036 * C2936 +
                    C49085 * C2942 + C48050 * C3800 + C36607 * C3805) *
                       C49036 +
                   (C48044 * C2395 + C49078 * C2401 + C48036 * C3382 +
                    C49085 * C3385 + C48050 * C11198 + C36607 * C11200) *
                       C47949 +
                   (C48044 * C2402 + C49078 * C2413 + C48036 * C3386 +
                    C49085 * C3391 + C48050 * C11201 + C36607 * C11204) *
                       C49043 +
                   (C48044 * C2396 + C49078 * C2403 + C48036 * C10324 +
                    C49085 * C10327 + C48050 * C11199 + C36607 * C11202) *
                       C47963 +
                   (C48044 * C2404 + C49078 * C2414 + C48036 * C10326 +
                    C49085 * C10330 + C48050 * C11203 + C36607 * C11205) *
                       C26391) *
                      C48883 * C972) *
                 C48950 * C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
           (C32938 + C32937) * C49282) *
              C48883 * C48967 * C48950 * C110 -
          ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
           C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
           C32356 * C23640 + (C30890 + C30889) * C49314 +
           (C30888 + C30887) * C23639) *
              C48883 * C48967 * C48950 * C111 +
          (C30903 * C23639 + C30904 * C49314 + C35019 * C23640 +
           C35020 * C49310 + (C32130 + C32129) * C23641 +
           (C32128 + C32127) * C49300 +
           (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 + C49082 * C1976) *
               C23642 +
           (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 + C49082 * C1980) *
               C49282) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C48967 * C48950 * C110 -
          (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
            (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
               C49259 +
           (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
            (C30892 + C30891) * C22511) *
               C49291 +
           (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
            (C30888 + C30887) * C22511) *
               C49304) *
              C48967 * C48950 * C111 +
          (C39693 * C49304 +
           (C30905 * C22511 + C30906 * C22505 + (C31070 + C31069) * C22512 +
            (C31068 + C31067) * C49040) *
               C49291 +
           ((C30902 + C30901) * C22511 + (C30900 + C30899) * C22505 +
            (C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                C22512 +
            (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                C49040) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
            C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
               C22511 +
           (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
            C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
               C22505 +
           (C33794 * C276 + C49315 * C287 + C33795 * C722 + C49312 * C727 +
            C33796 * C2395 + C49303 * C2401 + C33797 * C3382 + C49288 * C3385) *
               C22512 +
           (C33794 * C286 + C49315 * C294 + C33795 * C728 + C49312 * C737 +
            C33796 * C2402 + C49303 * C2413 + C33797 * C3386 + C49288 * C3391) *
               C49040) *
              C48883 * C48967 * C48950 * C110 -
          ((C33993 + C33994 + C33995 + C33996) * C49040 +
           (C33997 + C33998 + C33999 + C34000) * C22512 +
           (C33838 + C33837 + C33836 + C33835) * C22505 +
           (C33834 + C33833 + C33832 + C33831) * C22511) *
              C48883 * C48967 * C48950 * C111 +
          ((C33846 + C33845 + C33844 + C33843) * C22511 +
           (C33842 + C33841 + C33840 + C33839) * C22505 +
           (C33794 * C274 + C49315 * C283 + C33795 * C724 + C49312 * C731 +
            C33796 * C2399 + C49303 * C2409 + C33797 * C3384 + C49288 * C3389) *
               C22512 +
           (C33794 * C282 + C49315 * C292 + C33795 * C732 + C49312 * C739 +
            C33796 * C2410 + C49303 * C2417 + C33797 * C3390 + C49288 * C3393) *
               C49040) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C48967 * C268 -
           ((C30853 * C9372 + C49082 * C9376 + C30852 * C1809 +
             C30850 * C1814) *
                C49282 +
            (C30853 * C9370 + C49082 * C9373 + C30852 * C1805 +
             C30850 * C1808) *
                C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C32341 * C23639 + C32342 * C49314 + C32343 * C23640 +
            C32344 * C49310 + (C32368 + C32367) * C23641 +
            (C32366 + C32365) * C49300 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C23642 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C48967 * C268 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C22511 + C32342 * C22505 + C32343 * C22512 +
             C32344 * C49040) *
                C49304 +
            (C35019 * C22511 + C35020 * C22505 + (C32130 + C32129) * C22512 +
             (C32128 + C32127) * C49040) *
                C49291 +
            ((C31070 + C31069) * C22511 + (C31068 + C31067) * C22505 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C22512 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C48967 * C268 -
           ((C33797 * C10326 + C49288 * C10330 + C33796 * C2404 +
             C49303 * C2414 + C33795 * C1505 + C49312 * C1511 + C33794 * C626 +
             C49315 * C635) *
                C49040 +
            (C33797 * C10324 + C49288 * C10327 + C33796 * C2396 +
             C49303 * C2403 + C33795 * C1499 + C49312 * C1506 + C33794 * C620 +
             C49315 * C625) *
                C22512 +
            (C42501 + C42500 + C42499 + C42498) * C22505 +
            (C42497 + C42496 + C42495 + C42494) * C22511) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C34000 + C33999 + C33998 + C33997) * C22511 +
            (C33996 + C33995 + C33994 + C33993) * C22505 +
            (C33794 * C621 + C49315 * C627 + C33795 * C1498 + C49312 * C1504 +
             C33796 * C2398 + C49303 * C2407 + C33797 * C10325 +
             C49288 * C10328) *
                C22512 +
            (C33794 * C628 + C49315 * C636 + C33795 * C1503 + C49312 * C1510 +
             C33796 * C2408 + C49303 * C2416 + C33797 * C10329 +
             C49288 * C10331) *
                C49040) *
               C48883 * C48967 * C49267 -
           ((C33993 + C33994 + C33995 + C33996) * C49040 +
            (C33997 + C33998 + C33999 + C34000) * C22512 +
            (C33838 + C33837 + C33836 + C33835) * C22505 +
            (C33834 + C33833 + C33832 + C33831) * C22511) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C410 -
           ((C30853 * C9859 + C49082 * C9862 + C30852 * C1973 +
             C30850 * C1978) *
                C49282 +
            (C30853 * C9856 + C49082 * C9858 + C30852 * C1969 +
             C30850 * C1972) *
                C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C31244 + C31243) * C23639 + (C31242 + C31241) * C49314 +
            (C32586 + C32585) * C23640 + (C32584 + C32583) * C49310 +
            (C32582 + C32581) * C23641 + (C32580 + C32579) * C49300 +
            (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
             C49082 * C10121) *
                C23642 +
            (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C22511 + (C31242 + C31241) * C22505 +
             (C32586 + C32585) * C22512 + (C32584 + C32583) * C49040) *
                C49304 +
            ((C31240 + C31239) * C22511 + (C31238 + C31237) * C22505 +
             (C35427 + C35426) * C22512 + (C35425 + C35424) * C49040) *
                C49291 +
            ((C31236 + C31235) * C22511 + (C31234 + C31233) * C22505 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C22512 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C410 -
           ((C33797 * C11201 + C49288 * C11204 + C33796 * C3386 +
             C49303 * C3391 + C33795 * C2402 + C49312 * C2413 + C33794 * C728 +
             C49315 * C737) *
                C49040 +
            (C33797 * C11198 + C49288 * C11200 + C33796 * C3382 +
             C49303 * C3385 + C33795 * C2395 + C49312 * C2401 + C33794 * C722 +
             C49315 * C727) *
                C22512 +
            (C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
             C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
                C22505 +
            (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
             C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
                C22511) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C34154 + C34153 + C34152 + C34151) * C22511 +
            (C34150 + C34149 + C34148 + C34147) * C22505 +
            (C33794 * C723 + C49315 * C729 + C33795 * C2397 + C49312 * C2405 +
             C33796 * C3383 + C49303 * C3387 + C33797 * C17901 +
             C49288 * C17902) *
                C22512 +
            (C33794 * C730 + C49315 * C738 + C33795 * C2406 + C49312 * C2415 +
             C33796 * C3388 + C49303 * C3392 + C33797 * C17903 +
             C49288 * C17904) *
                C49040) *
               C48883 * C49269 -
           ((C33993 + C33994 + C33995 + C33996) * C49040 +
            (C33997 + C33998 + C33999 + C34000) * C22512 +
            (C33838 + C33837 + C33836 + C33835) * C22505 +
            (C33834 + C33833 + C33832 + C33831) * C22511) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C48967 * C550 -
           ((C30853 * C9372 + C49082 * C9376 + C30852 * C1809 +
             C30850 * C1814) *
                C49282 +
            (C30853 * C9370 + C49082 * C9373 + C30852 * C1805 +
             C30850 * C1808) *
                C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C32341 * C23639 + C32342 * C49314 + C32343 * C23640 +
            C32344 * C49310 + (C32368 + C32367) * C23641 +
            (C32366 + C32365) * C49300 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C23642 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C48967 * C550 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C22511 + C32342 * C22505 + C32343 * C22512 +
             C32344 * C49040) *
                C49304 +
            (C35019 * C22511 + C35020 * C22505 + (C32130 + C32129) * C22512 +
             (C32128 + C32127) * C49040) *
                C49291 +
            ((C31070 + C31069) * C22511 + (C31068 + C31067) * C22505 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C22512 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C48967 * C550 -
           ((C33797 * C10326 + C49288 * C10330 + C33796 * C2404 +
             C49303 * C2414 + C33795 * C1505 + C49312 * C1511 + C33794 * C626 +
             C49315 * C635) *
                C49040 +
            (C33797 * C10324 + C49288 * C10327 + C33796 * C2396 +
             C49303 * C2403 + C33795 * C1499 + C49312 * C1506 + C33794 * C620 +
             C49315 * C625) *
                C22512 +
            (C42501 + C42500 + C42499 + C42498) * C22505 +
            (C42497 + C42496 + C42495 + C42494) * C22511) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C34000 + C33999 + C33998 + C33997) * C22511 +
            (C33996 + C33995 + C33994 + C33993) * C22505 +
            (C33794 * C621 + C49315 * C627 + C33795 * C1498 + C49312 * C1504 +
             C33796 * C2398 + C49303 * C2407 + C33797 * C10325 +
             C49288 * C10328) *
                C22512 +
            (C33794 * C628 + C49315 * C636 + C33795 * C1503 + C49312 * C1510 +
             C33796 * C2408 + C49303 * C2416 + C33797 * C10329 +
             C49288 * C10331) *
                C49040) *
               C48883 * C48967 * C49267 -
           ((C33993 + C33994 + C33995 + C33996) * C49040 +
            (C33997 + C33998 + C33999 + C34000) * C22512 +
            (C33838 + C33837 + C33836 + C33835) * C22505 +
            (C33834 + C33833 + C33832 + C33831) * C22511) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
           C41737 * C49282) *
              C48883 * C48967 * C616 -
          ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
           (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
           (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
           (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
              C48883 * C48967 * C617 +
          (C32927 * C23639 + C32928 * C49314 + C41736 * C23640 +
           C41737 * C49310 + (C41749 + C41748) * C23641 +
           (C41747 + C41746) * C49300 +
           (C30852 * C9268 + C30850 * C9271 + C30853 * C9614 + C49082 * C9615) *
               C23642 +
           (C30852 * C9270 + C30850 * C9274 + C30853 * C9616 + C49082 * C9617) *
               C49282) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C48967 * C616 -
          (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
            C35220 * C22505 + C35221 * C22511) *
               C49259 +
           (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
            C32356 * C22511) *
               C49291 +
           ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
            (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
               C49304) *
              C48967 * C617 +
          ((C32927 * C22511 + C32928 * C22505 + (C32940 + C32939) * C22512 +
            (C32938 + C32937) * C49040) *
               C49304 +
           (C32343 * C22511 + C32344 * C22505 + (C32368 + C32367) * C22512 +
            (C32366 + C32365) * C49040) *
               C49291 +
           ((C32130 + C32129) * C22511 + (C32128 + C32127) * C22505 +
            (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
             C49082 * C1976) *
                C22512 +
            (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
             C49082 * C1980) *
                C49040) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
            C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
               C22511 +
           (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
            C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
               C22505 +
           (C42494 + C42495 + C42496 + C42497) * C22512 +
           (C42498 + C42499 + C42500 + C42501) * C49040) *
              C48883 * C48967 * C616 -
          ((C42876 + C42877 + C42878 + C42879) * C49040 +
           (C42880 + C42881 + C42882 + C42883) * C22512 +
           (C42501 + C42500 + C42499 + C42498) * C22505 +
           (C42497 + C42496 + C42495 + C42494) * C22511) *
              C48883 * C48967 * C617 +
          ((C42883 + C42882 + C42881 + C42880) * C22511 +
           (C42879 + C42878 + C42877 + C42876) * C22505 +
           (C33794 * C1301 + C49315 * C1308 + C33795 * C1969 + C49312 * C1972 +
            C33796 * C9856 + C49303 * C9858 + C33797 * C10756 +
            C49288 * C10757) *
               C22512 +
           (C33794 * C1307 + C49315 * C1313 + C33795 * C1973 + C49312 * C1978 +
            C33796 * C9859 + C49303 * C9862 + C33797 * C10758 +
            C49288 * C10759) *
               C49040) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C410 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C550 +
          (((C33158 + C33157) * C23639 + (C33156 + C33155) * C49314 +
            (C33154 + C33153) * C23640 + (C33152 + C33151) * C49310 +
            (C41891 + C41890) * C23641 + (C41889 + C41888) * C49300 +
            (C30852 * C9370 + C30850 * C9373 + C30853 * C9857 +
             C49082 * C9860) *
                C23642 +
            (C30852 * C9372 + C30850 * C9376 + C30853 * C9861 +
             C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C22511 + (C33156 + C33155) * C22505 +
             (C33154 + C33153) * C22512 + (C33152 + C33151) * C49040) *
                C49304 +
            ((C32586 + C32585) * C22511 + (C32584 + C32583) * C22505 +
             (C32582 + C32581) * C22512 + (C32580 + C32579) * C49040) *
                C49291 +
            ((C35427 + C35426) * C22511 + (C35425 + C35424) * C22505 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C22512 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C410 -
           ((C43030 + C43031 + C43032 + C43033) * C49040 +
            (C43034 + C43035 + C43036 + C43037) * C22512 +
            (C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
             C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
                C22505 +
            (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
             C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
                C22511) *
               C48883 * C49269) *
              C550 +
          (((C43037 + C43036 + C43035 + C43034) * C22511 +
            (C43033 + C43032 + C43031 + C43030) * C22505 +
            (C33794 * C1499 + C49315 * C1506 + C33795 * C2396 + C49312 * C2403 +
             C33796 * C10324 + C49303 * C10327 + C33797 * C11199 +
             C49288 * C11202) *
                C22512 +
            (C33794 * C1505 + C49315 * C1511 + C33795 * C2404 + C49312 * C2414 +
             C33796 * C10326 + C49303 * C10330 + C33797 * C11203 +
             C49288 * C11205) *
                C49040) *
               C48883 * C49269 -
           ((C42876 + C42877 + C42878 + C42879) * C49040 +
            (C42880 + C42881 + C42882 + C42883) * C22512 +
            (C42501 + C42500 + C42499 + C42498) * C22505 +
            (C42497 + C42496 + C42495 + C42494) * C22511) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C824 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C31244 + C31243) * C23639 + (C31242 + C31241) * C49314 +
            (C32586 + C32585) * C23640 + (C32584 + C32583) * C49310 +
            (C32582 + C32581) * C23641 + (C32580 + C32579) * C49300 +
            (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
             C49082 * C10121) *
                C23642 +
            (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C22511 + (C31242 + C31241) * C22505 +
             (C32586 + C32585) * C22512 + (C32584 + C32583) * C49040) *
                C49304 +
            ((C31240 + C31239) * C22511 + (C31238 + C31237) * C22505 +
             (C35427 + C35426) * C22512 + (C35425 + C35424) * C49040) *
                C49291 +
            ((C31236 + C31235) * C22511 + (C31234 + C31233) * C22505 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C22512 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C824 -
           ((C43030 + C43031 + C43032 + C43033) * C49040 +
            (C43034 + C43035 + C43036 + C43037) * C22512 +
            (C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
             C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
                C22505 +
            (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
             C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
                C22511) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C34154 + C34153 + C34152 + C34151) * C22511 +
            (C34150 + C34149 + C34148 + C34147) * C22505 +
            (C33794 * C723 + C49315 * C729 + C33795 * C2397 + C49312 * C2405 +
             C33796 * C3383 + C49303 * C3387 + C33797 * C17901 +
             C49288 * C17902) *
                C22512 +
            (C33794 * C730 + C49315 * C738 + C33795 * C2406 + C49312 * C2415 +
             C33796 * C3388 + C49303 * C3392 + C33797 * C17903 +
             C49288 * C17904) *
                C49040) *
               C48883 * C49269 -
           ((C33993 + C33994 + C33995 + C33996) * C49040 +
            (C33997 + C33998 + C33999 + C34000) * C22512 +
            (C33838 + C33837 + C33836 + C33835) * C22505 +
            (C33834 + C33833 + C33832 + C33831) * C22511) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C824 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C268 +
          (((C33158 + C33157) * C23639 + (C33156 + C33155) * C49314 +
            (C33154 + C33153) * C23640 + (C33152 + C33151) * C49310 +
            (C41891 + C41890) * C23641 + (C41889 + C41888) * C49300 +
            (C30852 * C9370 + C30850 * C9373 + C30853 * C9857 +
             C49082 * C9860) *
                C23642 +
            (C30852 * C9372 + C30850 * C9376 + C30853 * C9861 +
             C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C22511 + (C33156 + C33155) * C22505 +
             (C33154 + C33153) * C22512 + (C33152 + C33151) * C49040) *
                C49304 +
            ((C32586 + C32585) * C22511 + (C32584 + C32583) * C22505 +
             (C32582 + C32581) * C22512 + (C32580 + C32579) * C49040) *
                C49291 +
            ((C35427 + C35426) * C22511 + (C35425 + C35424) * C22505 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C22512 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C22511 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C22505 +
            (C42494 + C42495 + C42496 + C42497) * C22512 +
            (C42498 + C42499 + C42500 + C42501) * C49040) *
               C48883 * C824 -
           ((C43030 + C43031 + C43032 + C43033) * C49040 +
            (C43034 + C43035 + C43036 + C43037) * C22512 +
            (C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
             C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
                C22505 +
            (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
             C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
                C22511) *
               C48883 * C49269) *
              C268 +
          (((C43037 + C43036 + C43035 + C43034) * C22511 +
            (C43033 + C43032 + C43031 + C43030) * C22505 +
            (C33794 * C1499 + C49315 * C1506 + C33795 * C2396 + C49312 * C2403 +
             C33796 * C10324 + C49303 * C10327 + C33797 * C11199 +
             C49288 * C11202) *
                C22512 +
            (C33794 * C1505 + C49315 * C1511 + C33795 * C2404 + C49312 * C2414 +
             C33796 * C10326 + C49303 * C10330 + C33797 * C11203 +
             C49288 * C11205) *
                C49040) *
               C48883 * C49269 -
           ((C42876 + C42877 + C42878 + C42879) * C49040 +
            (C42880 + C42881 + C42882 + C42883) * C22512 +
            (C42501 + C42500 + C42499 + C42498) * C22505 +
            (C42497 + C42496 + C42495 + C42494) * C22511) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
           C41737 * C49282) *
              C48883 * C970 -
          ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
           (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
           (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
           (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
               C49314 +
           (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
               C23639) *
              C48883 * C971 +
          ((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
               C23639 +
           (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
               C49314 +
           (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 + C49082 * C3385) *
               C23640 +
           (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 + C49082 * C3391) *
               C49310 +
           (C30852 * C2396 + C30850 * C2403 + C30853 * C10324 +
            C49082 * C10327) *
               C23641 +
           (C30852 * C2404 + C30850 * C2414 + C30853 * C10326 +
            C49082 * C10330) *
               C49300 +
           (C30852 * C9856 + C30850 * C9858 + C30853 * C10756 +
            C49082 * C10757) *
               C23642 +
           (C30852 * C9859 + C30850 * C9862 + C30853 * C10758 +
            C49082 * C10759) *
               C49282) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C970 -
          (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
            (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
               C49259 +
           ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
            (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
               C49291 +
           ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C22505 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C22511) *
               C49304) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C22511 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C22505 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C22512 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49040) *
               C49304 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C22511 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C22505 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C22512 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49040) *
               C49291 +
           ((C30852 * C975 + C30850 * C982 + C30853 * C2928 + C49082 * C2933) *
                C22511 +
            (C30852 * C983 + C30850 * C990 + C30853 * C2932 + C49082 * C2940) *
                C22505 +
            (C30852 * C2399 + C30850 * C2409 + C30853 * C3384 +
             C49082 * C3389) *
                C22512 +
            (C30852 * C2410 + C30850 * C2417 + C30853 * C3390 +
             C49082 * C3393) *
                C49040) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
            C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
               C22511 +
           (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
            C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
               C22505 +
           (C42494 + C42495 + C42496 + C42497) * C22512 +
           (C42498 + C42499 + C42500 + C42501) * C49040) *
              C48883 * C970 -
          ((C43030 + C43031 + C43032 + C43033) * C49040 +
           (C43034 + C43035 + C43036 + C43037) * C22512 +
           (C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
            C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
               C22505 +
           (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
            C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
               C22511) *
              C48883 * C971 +
          ((C33794 * C973 + C49315 * C978 + C33795 * C2930 + C49312 * C2937 +
            C33796 * C3796 + C49303 * C3799 + C33797 * C17987 +
            C49288 * C17990) *
               C22511 +
           (C33794 * C979 + C49315 * C988 + C33795 * C2936 + C49312 * C2942 +
            C33796 * C3800 + C49303 * C3805 + C33797 * C17989 +
            C49288 * C17993) *
               C22505 +
           (C33794 * C2395 + C49315 * C2401 + C33795 * C3382 + C49312 * C3385 +
            C33796 * C11198 + C49303 * C11200 + C33797 * C18221 +
            C49288 * C18222) *
               C22512 +
           (C33794 * C2402 + C49315 * C2413 + C33795 * C3386 + C49312 * C3391 +
            C33796 * C11201 + C49303 * C11204 + C33797 * C18223 +
            C49288 * C18224) *
               C49040) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C22511 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C22505 +
                    (C38209 + C38210 + C38211) * C22512 +
                    (C38212 + C38213 + C38214) * C49040) *
                       C49217 +
                   ((C36648 + C36649 + C36650) * C22511 +
                    (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                    C38216 * C49040) *
                       C48893) *
                      C48967 * C48950 * C110 -
                  (((C36843 + C36844 + C36845) * C49040 +
                    (C36846 + C36847 + C36848) * C22512 +
                    (C36659 + C36658 + C36657) * C22505 +
                    (C36656 + C36655 + C36654) * C22511) *
                       C48893 +
                   (C38223 * C49040 + C38224 * C22512 +
                    (C36653 + C36652 + C36651) * C22505 +
                    (C36650 + C36649 + C36648) * C22511) *
                       C49217) *
                      C48967 * C48950 * C111 +
                  ((C36668 * C22511 + C36669 * C22505 +
                    (C36848 + C36847 + C36846) * C22512 +
                    (C36845 + C36844 + C36843) * C49040) *
                       C49217 +
                   ((C36665 + C36664 + C36663) * C22511 +
                    (C36662 + C36661 + C36660) * C22505 +
                    (C48044 * C273 + C49078 * C281 + C48036 * C725 +
                     C49085 * C733 + C48050 * C2742 + C36607 * C2743) *
                        C22512 +
                    (C48044 * C280 + C49078 * C291 + C48036 * C734 +
                     C49085 * C740 + C48050 * C2744 + C36607 * C2745) *
                        C49040) *
                       C48893) *
                      C48967 * C48950 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C48967 * C268 -
                   (((C38217 + C38218 + C38219) * C49040 +
                     (C38220 + C38221 + C38222) * C22512 + C38223 * C22505 +
                     C38224 * C22511) *
                        C48893 +
                    ((C38789 + C38790 + C38791) * C49040 +
                     (C38792 + C38793 + C38794) * C22512 +
                     (C38214 + C38213 + C38212) * C22505 +
                     (C38211 + C38210 + C38209) * C22511) *
                        C49217) *
                       C48967 * C49267) *
                      C270 +
                  (((C38215 * C22511 + C38216 * C22505 +
                     (C38222 + C38221 + C38220) * C22512 +
                     (C38219 + C38218 + C38217) * C49040) *
                        C49217 +
                    ((C36848 + C36847 + C36846) * C22511 +
                     (C36845 + C36844 + C36843) * C22505 +
                     (C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                      C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                         C22512 +
                     (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                      C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                         C49040) *
                        C48893) *
                       C48967 * C49267 -
                   (((C36843 + C36844 + C36845) * C49040 +
                     (C36846 + C36847 + C36848) * C22512 +
                     (C36659 + C36658 + C36657) * C22505 +
                     (C36656 + C36655 + C36654) * C22511) *
                        C48893 +
                    (C38223 * C49040 + C38224 * C22512 +
                     (C36653 + C36652 + C36651) * C22505 +
                     (C36650 + C36649 + C36648) * C22511) *
                        C49217) *
                       C48967 * C268) *
                      C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C410 -
                   (((C38431 + C38432 + C38433) * C49040 +
                     (C38434 + C38435 + C38436) * C22512 +
                     (C37031 + C37032 + C37033) * C22505 +
                     (C37034 + C37035 + C37036) * C22511) *
                        C48893 +
                    ((C39001 + C39002 + C39003) * C49040 +
                     (C39004 + C39005 + C39006) * C22512 +
                     (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C22505 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C22511) *
                        C49217) *
                       C49269) *
                      C48950 * C270 +
                  ((((C37036 + C37035 + C37034) * C22511 +
                     (C37033 + C37032 + C37031) * C22505 +
                     (C38436 + C38435 + C38434) * C22512 +
                     (C38433 + C38432 + C38431) * C49040) *
                        C49217 +
                    ((C37030 + C37029 + C37028) * C22511 +
                     (C37027 + C37026 + C37025) * C22505 +
                     (C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                      C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                         C22512 +
                     (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                      C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C36843 + C36844 + C36845) * C49040 +
                     (C36846 + C36847 + C36848) * C22512 +
                     (C36659 + C36658 + C36657) * C22505 +
                     (C36656 + C36655 + C36654) * C22511) *
                        C48893 +
                    (C38223 * C49040 + C38224 * C22512 +
                     (C36653 + C36652 + C36651) * C22505 +
                     (C36650 + C36649 + C36648) * C22511) *
                        C49217) *
                       C410) *
                      C48950 * C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C48967 * C550 -
                   (((C38217 + C38218 + C38219) * C49040 +
                     (C38220 + C38221 + C38222) * C22512 + C38223 * C22505 +
                     C38224 * C22511) *
                        C48893 +
                    ((C38789 + C38790 + C38791) * C49040 +
                     (C38792 + C38793 + C38794) * C22512 +
                     (C38214 + C38213 + C38212) * C22505 +
                     (C38211 + C38210 + C38209) * C22511) *
                        C49217) *
                       C48967 * C49267) *
                      C552 +
                  (((C38215 * C22511 + C38216 * C22505 +
                     (C38222 + C38221 + C38220) * C22512 +
                     (C38219 + C38218 + C38217) * C49040) *
                        C49217 +
                    ((C36848 + C36847 + C36846) * C22511 +
                     (C36845 + C36844 + C36843) * C22505 +
                     (C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                      C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                         C22512 +
                     (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                      C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                         C49040) *
                        C48893) *
                       C48967 * C49267 -
                   (((C36843 + C36844 + C36845) * C49040 +
                     (C36846 + C36847 + C36848) * C22512 +
                     (C36659 + C36658 + C36657) * C22505 +
                     (C36656 + C36655 + C36654) * C22511) *
                        C48893 +
                    (C38223 * C49040 + C38224 * C22512 +
                     (C36653 + C36652 + C36651) * C22505 +
                     (C36650 + C36649 + C36648) * C22511) *
                        C49217) *
                       C48967 * C550) *
                      C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C22511 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C22505 +
                    (C38209 + C38210 + C38211) * C22512 +
                    (C38212 + C38213 + C38214) * C49040) *
                       C49217 +
                   ((C36648 + C36649 + C36650) * C22511 +
                    (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                    C38216 * C49040) *
                       C48893) *
                      C48967 * C616 -
                  (((C38217 + C38218 + C38219) * C49040 +
                    (C38220 + C38221 + C38222) * C22512 + C38223 * C22505 +
                    C38224 * C22511) *
                       C48893 +
                   ((C38789 + C38790 + C38791) * C49040 +
                    (C38792 + C38793 + C38794) * C22512 +
                    (C38214 + C38213 + C38212) * C22505 +
                    (C38211 + C38210 + C38209) * C22511) *
                       C49217) *
                      C48967 * C617 +
                  (((C38794 + C38793 + C38792) * C22511 +
                    (C38791 + C38790 + C38789) * C22505 +
                    (C48044 * C1301 + C49078 * C1308 + C48036 * C1969 +
                     C49085 * C1972 + C48050 * C9856 + C36607 * C9858) *
                        C22512 +
                    (C48044 * C1307 + C49078 * C1313 + C48036 * C1973 +
                     C49085 * C1978 + C48050 * C9859 + C36607 * C9862) *
                        C49040) *
                       C49217 +
                   ((C38222 + C38221 + C38220) * C22511 +
                    (C38219 + C38218 + C38217) * C22505 +
                    (C48044 * C1300 + C49078 * C1306 + C48036 * C1970 +
                     C49085 * C1974 + C48050 * C10120 + C36607 * C10121) *
                        C22512 +
                    (C48044 * C1305 + C49078 * C1312 + C48036 * C1975 +
                     C49085 * C1979 + C48050 * C10122 + C36607 * C10123) *
                        C49040) *
                       C48893) *
                      C48967 * C618) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C410 -
                   (((C38431 + C38432 + C38433) * C49040 +
                     (C38434 + C38435 + C38436) * C22512 +
                     (C37031 + C37032 + C37033) * C22505 +
                     (C37034 + C37035 + C37036) * C22511) *
                        C48893 +
                    ((C39001 + C39002 + C39003) * C49040 +
                     (C39004 + C39005 + C39006) * C22512 +
                     (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C22505 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C22511) *
                        C49217) *
                       C49269) *
                      C550 +
                  ((((C39006 + C39005 + C39004) * C22511 +
                     (C39003 + C39002 + C39001) * C22505 +
                     (C48044 * C1499 + C49078 * C1506 + C48036 * C2396 +
                      C49085 * C2403 + C48050 * C10324 + C36607 * C10327) *
                         C22512 +
                     (C48044 * C1505 + C49078 * C1511 + C48036 * C2404 +
                      C49085 * C2414 + C48050 * C10326 + C36607 * C10330) *
                         C49040) *
                        C49217 +
                    ((C38436 + C38435 + C38434) * C22511 +
                     (C38433 + C38432 + C38431) * C22505 +
                     (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                      C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                         C22512 +
                     (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                      C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C38217 + C38218 + C38219) * C49040 +
                     (C38220 + C38221 + C38222) * C22512 + C38223 * C22505 +
                     C38224 * C22511) *
                        C48893 +
                    ((C38789 + C38790 + C38791) * C49040 +
                     (C38792 + C38793 + C38794) * C22512 +
                     (C38214 + C38213 + C38212) * C22505 +
                     (C38211 + C38210 + C38209) * C22511) *
                        C49217) *
                       C410) *
                      C49267) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C824 -
                   (((C38431 + C38432 + C38433) * C49040 +
                     (C38434 + C38435 + C38436) * C22512 +
                     (C37031 + C37032 + C37033) * C22505 +
                     (C37034 + C37035 + C37036) * C22511) *
                        C48893 +
                    ((C39001 + C39002 + C39003) * C49040 +
                     (C39004 + C39005 + C39006) * C22512 +
                     (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C22505 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C22511) *
                        C49217) *
                       C49269) *
                      C48950 * C552 +
                  ((((C37036 + C37035 + C37034) * C22511 +
                     (C37033 + C37032 + C37031) * C22505 +
                     (C38436 + C38435 + C38434) * C22512 +
                     (C38433 + C38432 + C38431) * C49040) *
                        C49217 +
                    ((C37030 + C37029 + C37028) * C22511 +
                     (C37027 + C37026 + C37025) * C22505 +
                     (C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                      C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                         C22512 +
                     (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                      C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C36843 + C36844 + C36845) * C49040 +
                     (C36846 + C36847 + C36848) * C22512 +
                     (C36659 + C36658 + C36657) * C22505 +
                     (C36656 + C36655 + C36654) * C22511) *
                        C48893 +
                    (C38223 * C49040 + C38224 * C22512 +
                     (C36653 + C36652 + C36651) * C22505 +
                     (C36650 + C36649 + C36648) * C22511) *
                        C49217) *
                       C824) *
                      C48950 * C49265)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C22511 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C22505 +
                     (C38209 + C38210 + C38211) * C22512 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C49217 +
                    ((C36648 + C36649 + C36650) * C22511 +
                     (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                     C38216 * C49040) *
                        C48893) *
                       C824 -
                   (((C38431 + C38432 + C38433) * C49040 +
                     (C38434 + C38435 + C38436) * C22512 +
                     (C37031 + C37032 + C37033) * C22505 +
                     (C37034 + C37035 + C37036) * C22511) *
                        C48893 +
                    ((C39001 + C39002 + C39003) * C49040 +
                     (C39004 + C39005 + C39006) * C22512 +
                     (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C22505 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C22511) *
                        C49217) *
                       C49269) *
                      C268 +
                  ((((C39006 + C39005 + C39004) * C22511 +
                     (C39003 + C39002 + C39001) * C22505 +
                     (C48044 * C1499 + C49078 * C1506 + C48036 * C2396 +
                      C49085 * C2403 + C48050 * C10324 + C36607 * C10327) *
                         C22512 +
                     (C48044 * C1505 + C49078 * C1511 + C48036 * C2404 +
                      C49085 * C2414 + C48050 * C10326 + C36607 * C10330) *
                         C49040) *
                        C49217 +
                    ((C38436 + C38435 + C38434) * C22511 +
                     (C38433 + C38432 + C38431) * C22505 +
                     (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                      C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                         C22512 +
                     (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                      C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C38217 + C38218 + C38219) * C49040 +
                     (C38220 + C38221 + C38222) * C22512 + C38223 * C22505 +
                     C38224 * C22511) *
                        C48893 +
                    ((C38789 + C38790 + C38791) * C49040 +
                     (C38792 + C38793 + C38794) * C22512 +
                     (C38214 + C38213 + C38212) * C22505 +
                     (C38211 + C38210 + C38209) * C22511) *
                        C49217) *
                       C824) *
                      C49267) *
                 C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                     C49085 * C427 + C48050 * C973 + C36607 * C978) *
                        C22511 +
                    (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                     C49085 * C434 + C48050 * C979 + C36607 * C988) *
                        C22505 +
                    (C38209 + C38210 + C38211) * C22512 +
                    (C38212 + C38213 + C38214) * C49040) *
                       C49217 +
                   ((C36648 + C36649 + C36650) * C22511 +
                    (C36651 + C36652 + C36653) * C22505 + C38215 * C22512 +
                    C38216 * C49040) *
                       C48893) *
                      C970 -
                  (((C38431 + C38432 + C38433) * C49040 +
                    (C38434 + C38435 + C38436) * C22512 +
                    (C37031 + C37032 + C37033) * C22505 +
                    (C37034 + C37035 + C37036) * C22511) *
                       C48893 +
                   ((C39001 + C39002 + C39003) * C49040 +
                    (C39004 + C39005 + C39006) * C22512 +
                    (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                     C49085 * C988 + C48044 * C426 + C49078 * C434) *
                        C22505 +
                    (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                     C49085 * C978 + C48044 * C416 + C49078 * C427) *
                        C22511) *
                       C49217) *
                      C971 +
                  (((C48044 * C973 + C49078 * C978 + C48036 * C2930 +
                     C49085 * C2937 + C48050 * C3796 + C36607 * C3799) *
                        C22511 +
                    (C48044 * C979 + C49078 * C988 + C48036 * C2936 +
                     C49085 * C2942 + C48050 * C3800 + C36607 * C3805) *
                        C22505 +
                    (C48044 * C2395 + C49078 * C2401 + C48036 * C3382 +
                     C49085 * C3385 + C48050 * C11198 + C36607 * C11200) *
                        C22512 +
                    (C48044 * C2402 + C49078 * C2413 + C48036 * C3386 +
                     C49085 * C3391 + C48050 * C11201 + C36607 * C11204) *
                        C49040) *
                       C49217 +
                   ((C48044 * C974 + C49078 * C980 + C48036 * C2929 +
                     C49085 * C2935 + C48050 * C3797 + C36607 * C3801) *
                        C22511 +
                    (C48044 * C981 + C49078 * C989 + C48036 * C2934 +
                     C49085 * C2941 + C48050 * C3802 + C36607 * C3806) *
                        C22505 +
                    (C48044 * C2397 + C49078 * C2405 + C48036 * C3383 +
                     C49085 * C3387 + C48050 * C17901 + C36607 * C17902) *
                        C22512 +
                    (C48044 * C2406 + C49078 * C2415 + C48036 * C3388 +
                     C49085 * C3392 + C48050 * C17903 + C36607 * C17904) *
                        C49040) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C48967 * C48950 * C110 -
          (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
            (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
               C49259 +
           (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
            (C30892 + C30891) * C22511) *
               C49291 +
           (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
            (C30888 + C30887) * C22511) *
               C49304) *
              C48967 * C48950 * C111 +
          (C39693 * C49304 +
           (C30905 * C22511 + C30906 * C22505 + (C31070 + C31069) * C22512 +
            (C31068 + C31067) * C49040) *
               C49291 +
           ((C30902 + C30901) * C22511 + (C30900 + C30899) * C22505 +
            (C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                C22512 +
            (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                C49040) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
           (C32938 + C32937) * C49282) *
              C48883 * C48967 * C48950 * C110 -
          ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
           C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
           C32356 * C23640 + (C30890 + C30889) * C49314 +
           (C30888 + C30887) * C23639) *
              C48883 * C48967 * C48950 * C111 +
          (C30903 * C23639 + C30904 * C49314 + C35019 * C23640 +
           C35020 * C49310 + (C32130 + C32129) * C23641 +
           (C32128 + C32127) * C49300 +
           (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 + C49082 * C1976) *
               C23642 +
           (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 + C49082 * C1980) *
               C49282) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C48967 * C268 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C22511 + C32342 * C22505 + C32343 * C22512 +
             C32344 * C49040) *
                C49304 +
            (C35019 * C22511 + C35020 * C22505 + (C32130 + C32129) * C22512 +
             (C32128 + C32127) * C49040) *
                C49291 +
            ((C31070 + C31069) * C22511 + (C31068 + C31067) * C22505 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C22512 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C48967 * C268 -
           ((C30853 * C9372 + C49082 * C9376 + C30852 * C1809 +
             C30850 * C1814) *
                C49282 +
            (C30853 * C9370 + C49082 * C9373 + C30852 * C1805 +
             C30850 * C1808) *
                C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C32341 * C23639 + C32342 * C49314 + C32343 * C23640 +
            C32344 * C49310 + (C32368 + C32367) * C23641 +
            (C32366 + C32365) * C49300 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C23642 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C22511 + (C31242 + C31241) * C22505 +
             (C32586 + C32585) * C22512 + (C32584 + C32583) * C49040) *
                C49304 +
            ((C31240 + C31239) * C22511 + (C31238 + C31237) * C22505 +
             (C35427 + C35426) * C22512 + (C35425 + C35424) * C49040) *
                C49291 +
            ((C31236 + C31235) * C22511 + (C31234 + C31233) * C22505 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C22512 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C410 -
           ((C30853 * C9859 + C49082 * C9862 + C30852 * C1973 +
             C30850 * C1978) *
                C49282 +
            (C30853 * C9856 + C49082 * C9858 + C30852 * C1969 +
             C30850 * C1972) *
                C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C31244 + C31243) * C23639 + (C31242 + C31241) * C49314 +
            (C32586 + C32585) * C23640 + (C32584 + C32583) * C49310 +
            (C32582 + C32581) * C23641 + (C32580 + C32579) * C49300 +
            (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
             C49082 * C10121) *
                C23642 +
            (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C48967 * C550 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C22511 + C32342 * C22505 + C32343 * C22512 +
             C32344 * C49040) *
                C49304 +
            (C35019 * C22511 + C35020 * C22505 + (C32130 + C32129) * C22512 +
             (C32128 + C32127) * C49040) *
                C49291 +
            ((C31070 + C31069) * C22511 + (C31068 + C31067) * C22505 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C22512 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + (C32940 + C32939) * C23642 +
            (C32938 + C32937) * C49282) *
               C48883 * C48967 * C550 -
           ((C30853 * C9372 + C49082 * C9376 + C30852 * C1809 +
             C30850 * C1814) *
                C49282 +
            (C30853 * C9370 + C49082 * C9373 + C30852 * C1805 +
             C30850 * C1808) *
                C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C32341 * C23639 + C32342 * C49314 + C32343 * C23640 +
            C32344 * C49310 + (C32368 + C32367) * C23641 +
            (C32366 + C32365) * C49300 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C23642 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C48967 * C616 -
          (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
            C35220 * C22505 + C35221 * C22511) *
               C49259 +
           (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
            C32356 * C22511) *
               C49291 +
           ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
            (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
               C49304) *
              C48967 * C617 +
          ((C32927 * C22511 + C32928 * C22505 + (C32940 + C32939) * C22512 +
            (C32938 + C32937) * C49040) *
               C49304 +
           (C32343 * C22511 + C32344 * C22505 + (C32368 + C32367) * C22512 +
            (C32366 + C32365) * C49040) *
               C49291 +
           ((C32130 + C32129) * C22511 + (C32128 + C32127) * C22505 +
            (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
             C49082 * C1976) *
                C22512 +
            (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
             C49082 * C1980) *
                C49040) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
           C41737 * C49282) *
              C48883 * C48967 * C616 -
          ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
           (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
           (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
           (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
              C48883 * C48967 * C617 +
          (C32927 * C23639 + C32928 * C49314 + C41736 * C23640 +
           C41737 * C49310 + (C41749 + C41748) * C23641 +
           (C41747 + C41746) * C49300 +
           (C30852 * C9268 + C30850 * C9271 + C30853 * C9614 + C49082 * C9615) *
               C23642 +
           (C30852 * C9270 + C30850 * C9274 + C30853 * C9616 + C49082 * C9617) *
               C49282) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C22511 + (C33156 + C33155) * C22505 +
             (C33154 + C33153) * C22512 + (C33152 + C33151) * C49040) *
                C49304 +
            ((C32586 + C32585) * C22511 + (C32584 + C32583) * C22505 +
             (C32582 + C32581) * C22512 + (C32580 + C32579) * C49040) *
                C49291 +
            ((C35427 + C35426) * C22511 + (C35425 + C35424) * C22505 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C22512 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C410 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C550 +
          (((C33158 + C33157) * C23639 + (C33156 + C33155) * C49314 +
            (C33154 + C33153) * C23640 + (C33152 + C33151) * C49310 +
            (C41891 + C41890) * C23641 + (C41889 + C41888) * C49300 +
            (C30852 * C9370 + C30850 * C9373 + C30853 * C9857 +
             C49082 * C9860) *
                C23642 +
            (C30852 * C9372 + C30850 * C9376 + C30853 * C9861 +
             C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C22511 + (C31242 + C31241) * C22505 +
             (C32586 + C32585) * C22512 + (C32584 + C32583) * C49040) *
                C49304 +
            ((C31240 + C31239) * C22511 + (C31238 + C31237) * C22505 +
             (C35427 + C35426) * C22512 + (C35425 + C35424) * C49040) *
                C49291 +
            ((C31236 + C31235) * C22511 + (C31234 + C31233) * C22505 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C22512 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C22512 +
             (C30898 + C30897) * C22505 + (C30896 + C30895) * C22511) *
                C49259 +
            (C35220 * C49040 + C35221 * C22512 + (C30894 + C30893) * C22505 +
             (C30892 + C30891) * C22511) *
                C49291 +
            (C32355 * C49040 + C32356 * C22512 + (C30890 + C30889) * C22505 +
             (C30888 + C30887) * C22511) *
                C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C824 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C31244 + C31243) * C23639 + (C31242 + C31241) * C49314 +
            (C32586 + C32585) * C23640 + (C32584 + C32583) * C49310 +
            (C32582 + C32581) * C23641 + (C32580 + C32579) * C49300 +
            (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
             C49082 * C10121) *
                C23642 +
            (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C32365 + C32366) * C49282 + (C32367 + C32368) * C23642 +
            C32353 * C49300 + C32354 * C23641 + C32355 * C49310 +
            C32356 * C23640 + (C30890 + C30889) * C49314 +
            (C30888 + C30887) * C23639) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C22511 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C22505 +
             (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
                C49304 +
            ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
             C32341 * C22512 + C32342 * C49040) *
                C49291 +
            C39693 * C49259) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
             (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
                C49259 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
             (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
                C49291 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C22505 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C22511) *
                C49304) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C22511 + (C33156 + C33155) * C22505 +
             (C33154 + C33153) * C22512 + (C33152 + C33151) * C49040) *
                C49304 +
            ((C32586 + C32585) * C22511 + (C32584 + C32583) * C22505 +
             (C32582 + C32581) * C22512 + (C32580 + C32579) * C49040) *
                C49291 +
            ((C35427 + C35426) * C22511 + (C35425 + C35424) * C22505 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C22512 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C22512 +
             C35220 * C22505 + C35221 * C22511) *
                C49259 +
            (C32353 * C49040 + C32354 * C22512 + C32355 * C22505 +
             C32356 * C22511) *
                C49291 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C22512 +
             (C32360 + C32359) * C22505 + (C32358 + C32357) * C22511) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C23639 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49314 +
            (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
            C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
            C41737 * C49282) *
               C48883 * C824 -
           ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
            (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
            (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49314 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C23639) *
               C48883 * C49269) *
              C268 +
          (((C33158 + C33157) * C23639 + (C33156 + C33155) * C49314 +
            (C33154 + C33153) * C23640 + (C33152 + C33151) * C49310 +
            (C41891 + C41890) * C23641 + (C41889 + C41888) * C49300 +
            (C30852 * C9370 + C30850 * C9373 + C30853 * C9857 +
             C49082 * C9860) *
                C23642 +
            (C30852 * C9372 + C30850 * C9376 + C30853 * C9861 +
             C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C41746 + C41747) * C49282 + (C41748 + C41749) * C23642 +
            (C32937 + C32938) * C49300 + (C32939 + C32940) * C23641 +
            (C32364 + C32363) * C49310 + (C32362 + C32361) * C23640 +
            (C32360 + C32359) * C49314 + (C32358 + C32357) * C23639) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C22511 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C22505 +
            (C32357 + C32358) * C22512 + (C32359 + C32360) * C49040) *
               C49304 +
           ((C30887 + C30888) * C22511 + (C30889 + C30890) * C22505 +
            C32341 * C22512 + C32342 * C49040) *
               C49291 +
           C39693 * C49259) *
              C970 -
          (((C35424 + C35425) * C49040 + (C35426 + C35427) * C22512 +
            (C31237 + C31238) * C22505 + (C31239 + C31240) * C22511) *
               C49259 +
           ((C32583 + C32584) * C49040 + (C32585 + C32586) * C22512 +
            (C31241 + C31242) * C22505 + (C31243 + C31244) * C22511) *
               C49291 +
           ((C33155 + C33156) * C49040 + (C33157 + C33158) * C22512 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C22505 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C22511) *
               C49304) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C22511 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C22505 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C22512 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49040) *
               C49304 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C22511 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C22505 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C22512 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49040) *
               C49291 +
           ((C30852 * C975 + C30850 * C982 + C30853 * C2928 + C49082 * C2933) *
                C22511 +
            (C30852 * C983 + C30850 * C990 + C30853 * C2932 + C49082 * C2940) *
                C22505 +
            (C30852 * C2399 + C30850 * C2409 + C30853 * C3384 +
             C49082 * C3389) *
                C22512 +
            (C30852 * C2410 + C30850 * C2417 + C30853 * C3390 +
             C49082 * C3393) *
                C49040) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
               C23639 +
           (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
               C49314 +
           (C32357 + C32358) * C23640 + (C32359 + C32360) * C49310 +
           C32927 * C23641 + C32928 * C49300 + C41736 * C23642 +
           C41737 * C49282) *
              C48883 * C970 -
          ((C41888 + C41889) * C49282 + (C41890 + C41891) * C23642 +
           (C33151 + C33152) * C49300 + (C33153 + C33154) * C23641 +
           (C33155 + C33156) * C49310 + (C33157 + C33158) * C23640 +
           (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
               C49314 +
           (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
               C23639) *
              C48883 * C971 +
          ((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
               C23639 +
           (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
               C49314 +
           (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 + C49082 * C3385) *
               C23640 +
           (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 + C49082 * C3391) *
               C49310 +
           (C30852 * C2396 + C30850 * C2403 + C30853 * C10324 +
            C49082 * C10327) *
               C23641 +
           (C30852 * C2404 + C30850 * C2414 + C30853 * C10326 +
            C49082 * C10330) *
               C49300 +
           (C30852 * C9856 + C30850 * C9858 + C30853 * C10756 +
            C49082 * C10757) *
               C23642 +
           (C30852 * C9859 + C30850 * C9862 + C30853 * C10758 +
            C49082 * C10759) *
               C49282) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[90] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C11310 +
                    (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                    C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                    C1823 * C11313 + C1822 * C49282) *
                       C49217 +
                   (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                    C11321 + C11322) *
                       C48893) *
                      C48967 * C48950 * C110 -
                  ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                    C11329 + C11330) *
                       C48893 +
                   (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                    C11316 + C11315) *
                       C49217) *
                      C48967 * C48950 * C111 +
                  ((C11330 + C11329 + C11328 + C11327 + C11326 + C11325 +
                    C11324 + C11323) *
                       C49217 +
                   (C168 * C11310 + C169 * C11304 + C316 * C11311 +
                    C315 * C11305 + C1143 * C11312 + C1142 * C11306 +
                    (C113 * C1302 + C48995 * C1309) * C11313 +
                    (C113 * C1310 + C48995 * C1314) * C49282) *
                       C48893) *
                      C48967 * C48950 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C3912 +
                    (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                    C1341 * C49040) *
                       C3908 +
                   (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                   C3936 * C49276) *
                      C48967 * C48950 * C110 -
                  ((C3927 + C3928 + C3929 + C3930) * C49276 +
                   (C3926 + C3925 + C3924 + C3923) * C3910 +
                   (C3922 + C3921 + C3920 + C3919) * C3909 +
                   (C3918 + C3917 + C3916 + C3915) * C3908) *
                      C48967 * C48950 * C111 +
                  (C3935 * C3908 + C3936 * C3909 +
                   (C3930 + C3929 + C3928 + C3927) * C3910 +
                   (C173 * C3912 + C172 * C49239 +
                    (C113 * C277 + C48995 * C288) * C3913 +
                    (C113 * C289 + C48995 * C295) * C49040) *
                       C49276) *
                      C48967 * C48950 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C15197 * C115 + C15194 * C122 + C15198 * C416 +
                     C15195 * C427 + C15199 * C973 + C49275 * C978) *
                        C3912 +
                    (C15197 * C123 + C15194 * C136 + C15198 * C426 +
                     C15195 * C434 + C15199 * C979 + C49275 * C988) *
                        C49239 +
                    (C16722 + C16723 + C16724) * C3913 +
                    (C16725 + C16726 + C16727) * C49040) *
                       C49217 +
                   ((C15237 + C15238 + C15239) * C3912 +
                    (C15240 + C15241 + C15242) * C49239 +
                    (C15443 + C15442 + C15441) * C3913 +
                    (C15440 + C15439 + C15438) * C49040) *
                       C48893) *
                      C48967 * C48950 * C110 -
                  (((C15432 + C15433 + C15434) * C49040 +
                    (C15435 + C15436 + C15437) * C3913 +
                    (C15248 + C15247 + C15246) * C49239 +
                    (C15245 + C15244 + C15243) * C3912) *
                       C48893 +
                   ((C15438 + C15439 + C15440) * C49040 +
                    (C15441 + C15442 + C15443) * C3913 +
                    (C15242 + C15241 + C15240) * C49239 +
                    (C15239 + C15238 + C15237) * C3912) *
                       C49217) *
                      C48967 * C48950 * C111 +
                  ((C15257 * C3912 + C15258 * C49239 +
                    (C15437 + C15436 + C15435) * C3913 +
                    (C15434 + C15433 + C15432) * C49040) *
                       C49217 +
                   ((C15254 + C15253 + C15252) * C3912 +
                    (C15251 + C15250 + C15249) * C49239 +
                    (C15197 * C273 + C15194 * C281 + C15198 * C725 +
                     C15195 * C733 + C15199 * C2742 + C49275 * C2743) *
                        C3913 +
                    (C15197 * C280 + C15194 * C291 + C15198 * C734 +
                     C15195 * C740 + C15199 * C2744 + C49275 * C2745) *
                        C49040) *
                       C48893) *
                      C48967 * C48950 * C112)) /
                    (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C48967 * C268 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C11468 + C11467 + C11466 + C11465 + C11464 + C11463 + C11462 +
             C11461) *
                C49217 +
            (C318 * C11310 + C317 * C11304 + C1140 * C11311 + C1141 * C11305 +
             C1345 * C11312 + C1344 * C11306 +
             (C113 * C1807 + C48995 * C1812) * C11313 +
             (C113 * C1813 + C48995 * C1816) * C49282) *
                C48893) *
               C48967 * C49267 -
           ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 + C11329 +
             C11330) *
                C48893 +
            (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 + C11316 +
             C11315) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C48967 * C268 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C48967 * C49267) *
              C270 +
          (((C4078 + C4077 + C4076 + C4075) * C3908 +
            (C4074 + C4073 + C4072 + C4071) * C3909 +
            (C4070 + C4069 + C4068 + C4067) * C3910 +
            (C314 * C3912 + C313 * C49239 +
             (C113 * C624 + C48995 * C633) * C3913 +
             (C113 * C634 + C48995 * C639) * C49040) *
                C49276) *
               C48967 * C49267 -
           ((C3927 + C3928 + C3929 + C3930) * C49276 +
            (C3926 + C3925 + C3924 + C3923) * C3910 +
            (C3922 + C3921 + C3920 + C3919) * C3909 +
            (C3918 + C3917 + C3916 + C3915) * C3908) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C3912 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C49239 +
             (C16722 + C16723 + C16724) * C3913 +
             (C16725 + C16726 + C16727) * C49040) *
                C49217 +
            ((C15237 + C15238 + C15239) * C3912 +
             (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
             C18801 * C49040) *
                C48893) *
               C48967 * C268 -
           (((C16739 + C16738 + C16737) * C49040 +
             (C16736 + C16735 + C16734) * C3913 + C18802 * C49239 +
             C18803 * C3912) *
                C48893 +
            ((C16733 + C16732 + C16731) * C49040 +
             (C16730 + C16729 + C16728) * C3913 +
             (C16727 + C16726 + C16725) * C49239 +
             (C16724 + C16723 + C16722) * C3912) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C18800 * C3912 + C18801 * C49239 +
             (C16734 + C16735 + C16736) * C3913 +
             (C16737 + C16738 + C16739) * C49040) *
                C49217 +
            ((C15437 + C15436 + C15435) * C3912 +
             (C15434 + C15433 + C15432) * C49239 +
             (C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
              C15199 * C2400 + C49275 * C2411) *
                 C3913 +
             (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
              C15199 * C2412 + C49275 * C2418) *
                 C49040) *
                C48893) *
               C48967 * C49267 -
           (((C15432 + C15433 + C15434) * C49040 +
             (C15435 + C15436 + C15437) * C3913 +
             (C15248 + C15247 + C15246) * C49239 +
             (C15245 + C15244 + C15243) * C3912) *
                C48893 +
            (C18802 * C49040 + C18803 * C3913 +
             (C15242 + C15241 + C15240) * C49239 +
             (C15239 + C15238 + C15237) * C3912) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C11310 +
                     (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                     C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                     C1823 * C11313 + C1822 * C49282) *
                        C49217 +
                    (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                     C11321 + C11322) *
                        C48893) *
                       C410 -
                   ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                     C11607 + C11608) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                     C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                     (C113 * C426 + C48995 * C434) * C11304 +
                     (C113 * C416 + C48995 * C427) * C11310) *
                        C49217) *
                       C49269) *
                      C48950 * C270 +
                  (((C11608 + C11607 + C11606 + C11605 + C11604 + C11603 +
                     C11612 + C11611) *
                        C49217 +
                    (C458 * C11310 + C457 * C11304 + C1537 * C11311 +
                     C1536 * C11305 + C1535 * C11312 + C1534 * C11306 +
                     (C113 * C1971 + C48995 * C1976) * C11313 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                     C11329 + C11330) *
                        C48893 +
                    (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                     C11316 + C11315) *
                        C49217) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C3912 +
                     (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                     C1341 * C49040) *
                        C3908 +
                    (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                    C3936 * C49276) *
                       C410 -
                   ((C4225 + C4226 + C4213 + C4214) * C49276 +
                    (C4215 + C4216 + C4217 + C4218) * C3910 +
                    (C4219 + C4220 + C4221 + C4222) * C3909 +
                    (C1992 * C49040 + C1993 * C3913 +
                     (C113 * C426 + C48995 * C434) * C49239 +
                     (C113 * C416 + C48995 * C427) * C3912) *
                        C3908) *
                       C49269) *
                      C48950 * C270 +
                  (((C4222 + C4221 + C4220 + C4219) * C3908 +
                    (C4218 + C4217 + C4216 + C4215) * C3909 +
                    (C4214 + C4213 + C4226 + C4225) * C3910 +
                    (C454 * C3912 + C453 * C49239 +
                     (C113 * C726 + C48995 * C735) * C3913 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C3927 + C3928 + C3929 + C3930) * C49276 +
                    (C3926 + C3925 + C3924 + C3923) * C3910 +
                    (C3922 + C3921 + C3920 + C3919) * C3909 +
                    (C3918 + C3917 + C3916 + C3915) * C3908) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C15197 * C115 + C15194 * C122 + C15198 * C416 +
                      C15195 * C427 + C15199 * C973 + C49275 * C978) *
                         C3912 +
                     (C15197 * C123 + C15194 * C136 + C15198 * C426 +
                      C15195 * C434 + C15199 * C979 + C49275 * C988) *
                         C49239 +
                     (C16722 + C16723 + C16724) * C3913 +
                     (C16725 + C16726 + C16727) * C49040) *
                        C49217 +
                    ((C15237 + C15238 + C15239) * C3912 +
                     (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
                     C18801 * C49040) *
                        C48893) *
                       C410 -
                   (((C19010 + C19011 + C19012) * C49040 +
                     (C19013 + C19014 + C19015) * C3913 +
                     (C15620 + C15621 + C15622) * C49239 +
                     (C15623 + C15624 + C15625) * C3912) *
                        C48893 +
                    ((C17340 + C17341 + C17342) * C49040 +
                     (C17343 + C17344 + C17345) * C3913 +
                     (C15199 * C2936 + C49275 * C2942 + C15198 * C979 +
                      C15195 * C988 + C15197 * C426 + C15194 * C434) *
                         C49239 +
                     (C15199 * C2930 + C49275 * C2937 + C15198 * C973 +
                      C15195 * C978 + C15197 * C416 + C15194 * C427) *
                         C3912) *
                        C49217) *
                       C49269) *
                      C48950 * C270 +
                  ((((C15625 + C15624 + C15623) * C3912 +
                     (C15622 + C15621 + C15620) * C49239 +
                     (C19015 + C19014 + C19013) * C3913 +
                     (C19012 + C19011 + C19010) * C49040) *
                        C49217 +
                    ((C15619 + C15618 + C15617) * C3912 +
                     (C15616 + C15615 + C15614) * C49239 +
                     (C15197 * C724 + C15194 * C731 + C15198 * C2399 +
                      C15195 * C2409 + C15199 * C3384 + C49275 * C3389) *
                         C3913 +
                     (C15197 * C732 + C15194 * C739 + C15198 * C2410 +
                      C15195 * C2417 + C15199 * C3390 + C49275 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C15432 + C15433 + C15434) * C49040 +
                     (C15435 + C15436 + C15437) * C3913 +
                     (C15248 + C15247 + C15246) * C49239 +
                     (C15245 + C15244 + C15243) * C3912) *
                        C48893 +
                    (C18802 * C49040 + C18803 * C3913 +
                     (C15242 + C15241 + C15240) * C49239 +
                     (C15239 + C15238 + C15237) * C3912) *
                        C49217) *
                       C410) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C48967 * C550 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C11468 + C11467 + C11466 + C11465 + C11464 + C11463 + C11462 +
             C11461) *
                C49217 +
            (C318 * C11310 + C317 * C11304 + C1140 * C11311 + C1141 * C11305 +
             C1345 * C11312 + C1344 * C11306 +
             (C113 * C1807 + C48995 * C1812) * C11313 +
             (C113 * C1813 + C48995 * C1816) * C49282) *
                C48893) *
               C48967 * C49267 -
           ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 + C11329 +
             C11330) *
                C48893 +
            (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 + C11316 +
             C11315) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C48967 * C550 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C48967 * C49267) *
              C552 +
          (((C4078 + C4077 + C4076 + C4075) * C3908 +
            (C4074 + C4073 + C4072 + C4071) * C3909 +
            (C4070 + C4069 + C4068 + C4067) * C3910 +
            (C314 * C3912 + C313 * C49239 +
             (C113 * C624 + C48995 * C633) * C3913 +
             (C113 * C634 + C48995 * C639) * C49040) *
                C49276) *
               C48967 * C49267 -
           ((C3927 + C3928 + C3929 + C3930) * C49276 +
            (C3926 + C3925 + C3924 + C3923) * C3910 +
            (C3922 + C3921 + C3920 + C3919) * C3909 +
            (C3918 + C3917 + C3916 + C3915) * C3908) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C3912 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C49239 +
             (C16722 + C16723 + C16724) * C3913 +
             (C16725 + C16726 + C16727) * C49040) *
                C49217 +
            ((C15237 + C15238 + C15239) * C3912 +
             (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
             C18801 * C49040) *
                C48893) *
               C48967 * C550 -
           (((C16739 + C16738 + C16737) * C49040 +
             (C16736 + C16735 + C16734) * C3913 + C18802 * C49239 +
             C18803 * C3912) *
                C48893 +
            ((C16733 + C16732 + C16731) * C49040 +
             (C16730 + C16729 + C16728) * C3913 +
             (C16727 + C16726 + C16725) * C49239 +
             (C16724 + C16723 + C16722) * C3912) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C18800 * C3912 + C18801 * C49239 +
             (C16734 + C16735 + C16736) * C3913 +
             (C16737 + C16738 + C16739) * C49040) *
                C49217 +
            ((C15437 + C15436 + C15435) * C3912 +
             (C15434 + C15433 + C15432) * C49239 +
             (C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
              C15199 * C2400 + C49275 * C2411) *
                 C3913 +
             (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
              C15199 * C2412 + C49275 * C2418) *
                 C49040) *
                C48893) *
               C48967 * C49267 -
           (((C15432 + C15433 + C15434) * C49040 +
             (C15435 + C15436 + C15437) * C3913 +
             (C15248 + C15247 + C15246) * C49239 +
             (C15245 + C15244 + C15243) * C3912) *
                C48893 +
            (C18802 * C49040 + C18803 * C3913 +
             (C15242 + C15241 + C15240) * C49239 +
             (C15239 + C15238 + C15237) * C3912) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C11310 +
            (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
            C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
            C1822 * C49282) *
               C49217 +
           (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
            C11322) *
               C48893) *
              C48967 * C616 -
          ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
            C11468) *
               C48893 +
           (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
            C1343 * C11305 + C1342 * C11311 + C1341 * C11304 + C1340 * C11310) *
               C49217) *
              C48967 * C617 +
          ((C1342 * C11310 + C1343 * C11304 + C1823 * C11311 + C1822 * C11305 +
            C9285 * C11312 + C9286 * C11306 + C9532 * C11313 + C9531 * C49282) *
               C49217 +
           (C1137 * C11310 + C1138 * C11304 + C1347 * C11311 + C1346 * C11305 +
            C9287 * C11312 + C9288 * C11306 +
            (C113 * C9269 + C48995 * C9272) * C11313 +
            (C113 * C9273 + C48995 * C9275) * C49282) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C3912 +
            (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
            C1341 * C49040) *
               C3908 +
           (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
           C3936 * C49276) *
              C48967 * C616 -
          ((C4067 + C4068 + C4069 + C4070) * C49276 +
           (C4071 + C4072 + C4073 + C4074) * C3910 +
           (C4075 + C4076 + C4077 + C4078) * C3909 +
           (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
               C3908) *
              C48967 * C617 +
          ((C1342 * C3912 + C1343 * C49239 + C1823 * C3913 + C1822 * C49040) *
               C3908 +
           (C1137 * C3912 + C1138 * C49239 + C1347 * C3913 + C1346 * C49040) *
               C3909 +
           (C1140 * C3912 + C1141 * C49239 + C1345 * C3913 + C1344 * C49040) *
               C3910 +
           (C1143 * C3912 + C1142 * C49239 +
            (C113 * C1302 + C48995 * C1309) * C3913 +
            (C113 * C1310 + C48995 * C1314) * C49040) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C3912 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49239 +
            (C16722 + C16723 + C16724) * C3913 +
            (C16725 + C16726 + C16727) * C49040) *
               C49217 +
           ((C15237 + C15238 + C15239) * C3912 +
            (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
            C18801 * C49040) *
               C48893) *
              C48967 * C616 -
          (((C16739 + C16738 + C16737) * C49040 +
            (C16736 + C16735 + C16734) * C3913 + C18802 * C49239 +
            C18803 * C3912) *
               C48893 +
           ((C16733 + C16732 + C16731) * C49040 +
            (C16730 + C16729 + C16728) * C3913 +
            (C16727 + C16726 + C16725) * C49239 +
            (C16724 + C16723 + C16722) * C3912) *
               C49217) *
              C48967 * C617 +
          ((C17156 * C3912 + C17157 * C49239 +
            (C17163 + C17162 + C17161) * C3913 +
            (C17160 + C17159 + C17158) * C49040) *
               C49217 +
           ((C16734 + C16735 + C16736) * C3912 +
            (C16737 + C16738 + C16739) * C49239 +
            (C15197 * C1300 + C15194 * C1306 + C15198 * C1970 + C15195 * C1974 +
             C15199 * C10120 + C49275 * C10121) *
                C3913 +
            (C15197 * C1305 + C15194 * C1312 + C15198 * C1975 + C15195 * C1979 +
             C15199 * C10122 + C49275 * C10123) *
                C49040) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C410 -
           ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 + C11607 +
             C11608) *
                C48893 +
            (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 + C1991 * C11312 +
             C1992 * C11305 + C1993 * C11311 +
             (C113 * C426 + C48995 * C434) * C11304 +
             (C113 * C416 + C48995 * C427) * C11310) *
                C49217) *
               C49269) *
              C550 +
          (((C1993 * C11310 + C1992 * C11304 + C1991 * C11311 + C1990 * C11305 +
             C9630 * C11312 + C9629 * C11306 + C9628 * C11313 +
             C9627 * C49282) *
                C49217 +
            (C1541 * C11310 + C1540 * C11304 + C1539 * C11311 + C1538 * C11305 +
             C11610 * C11312 + C11609 * C11306 +
             (C113 * C9371 + C48995 * C9374) * C11313 +
             (C113 * C9375 + C48995 * C9377) * C49282) *
                C48893) *
               C49269 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C410 -
           ((C4225 + C4226 + C4213 + C4214) * C49276 +
            (C4215 + C4216 + C4217 + C4218) * C3910 +
            (C4219 + C4220 + C4221 + C4222) * C3909 +
            (C1992 * C49040 + C1993 * C3913 +
             (C113 * C426 + C48995 * C434) * C49239 +
             (C113 * C416 + C48995 * C427) * C3912) *
                C3908) *
               C49269) *
              C550 +
          (((C1993 * C3912 + C1992 * C49239 + C1991 * C3913 + C1990 * C49040) *
                C3908 +
            (C1541 * C3912 + C1540 * C49239 + C1539 * C3913 + C1538 * C49040) *
                C3909 +
            (C1537 * C3912 + C1536 * C49239 + C1535 * C3913 + C1534 * C49040) *
                C3910 +
            (C4224 * C3912 + C4223 * C49239 +
             (C113 * C1500 + C48995 * C1507) * C3913 +
             (C113 * C1508 + C48995 * C1512) * C49040) *
                C49276) *
               C49269 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C3912 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C49239 +
             (C16722 + C16723 + C16724) * C3913 +
             (C16725 + C16726 + C16727) * C49040) *
                C49217 +
            ((C15237 + C15238 + C15239) * C3912 +
             (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
             C18801 * C49040) *
                C48893) *
               C410 -
           (((C19010 + C19011 + C19012) * C49040 +
             (C19013 + C19014 + C19015) * C3913 +
             (C15620 + C15621 + C15622) * C49239 +
             (C15623 + C15624 + C15625) * C3912) *
                C48893 +
            ((C17340 + C17341 + C17342) * C49040 +
             (C17343 + C17344 + C17345) * C3913 +
             (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C49239 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C3912) *
                C49217) *
               C49269) *
              C550 +
          ((((C17345 + C17344 + C17343) * C3912 +
             (C17342 + C17341 + C17340) * C49239 +
             (C17339 + C17338 + C17337) * C3913 +
             (C17336 + C17335 + C17334) * C49040) *
                C49217 +
            ((C19015 + C19014 + C19013) * C3912 +
             (C19012 + C19011 + C19010) * C49239 +
             (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 +
              C15195 * C2407 + C15199 * C10325 + C49275 * C10328) *
                 C3913 +
             (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 +
              C15195 * C2416 + C15199 * C10329 + C49275 * C10331) *
                 C49040) *
                C48893) *
               C49269 -
           (((C16739 + C16738 + C16737) * C49040 +
             (C16736 + C16735 + C16734) * C3913 + C18802 * C49239 +
             C18803 * C3912) *
                C48893 +
            ((C16733 + C16732 + C16731) * C49040 +
             (C16730 + C16729 + C16728) * C3913 +
             (C16727 + C16726 + C16725) * C49239 +
             (C16724 + C16723 + C16722) * C3912) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[96] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C11310 +
                     (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                     C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                     C1823 * C11313 + C1822 * C49282) *
                        C49217 +
                    (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                     C11321 + C11322) *
                        C48893) *
                       C824 -
                   ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                     C11607 + C11608) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                     C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                     (C113 * C426 + C48995 * C434) * C11304 +
                     (C113 * C416 + C48995 * C427) * C11310) *
                        C49217) *
                       C49269) *
                      C48950 * C552 +
                  (((C11608 + C11607 + C11606 + C11605 + C11604 + C11603 +
                     C11612 + C11611) *
                        C49217 +
                    (C458 * C11310 + C457 * C11304 + C1537 * C11311 +
                     C1536 * C11305 + C1535 * C11312 + C1534 * C11306 +
                     (C113 * C1971 + C48995 * C1976) * C11313 +
                     (C113 * C1977 + C48995 * C1980) * C49282) *
                        C48893) *
                       C49269 -
                   ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                     C11329 + C11330) *
                        C48893 +
                    (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                     C11316 + C11315) *
                        C49217) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48995 * C122) * C3912 +
                     (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                     C1341 * C49040) *
                        C3908 +
                    (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                    C3936 * C49276) *
                       C824 -
                   ((C4225 + C4226 + C4213 + C4214) * C49276 +
                    (C4215 + C4216 + C4217 + C4218) * C3910 +
                    (C4219 + C4220 + C4221 + C4222) * C3909 +
                    (C1992 * C49040 + C1993 * C3913 +
                     (C113 * C426 + C48995 * C434) * C49239 +
                     (C113 * C416 + C48995 * C427) * C3912) *
                        C3908) *
                       C49269) *
                      C48950 * C552 +
                  (((C4222 + C4221 + C4220 + C4219) * C3908 +
                    (C4218 + C4217 + C4216 + C4215) * C3909 +
                    (C4214 + C4213 + C4226 + C4225) * C3910 +
                    (C454 * C3912 + C453 * C49239 +
                     (C113 * C726 + C48995 * C735) * C3913 +
                     (C113 * C736 + C48995 * C741) * C49040) *
                        C49276) *
                       C49269 -
                   ((C3927 + C3928 + C3929 + C3930) * C49276 +
                    (C3926 + C3925 + C3924 + C3923) * C3910 +
                    (C3922 + C3921 + C3920 + C3919) * C3909 +
                    (C3918 + C3917 + C3916 + C3915) * C3908) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C15197 * C115 + C15194 * C122 + C15198 * C416 +
                      C15195 * C427 + C15199 * C973 + C49275 * C978) *
                         C3912 +
                     (C15197 * C123 + C15194 * C136 + C15198 * C426 +
                      C15195 * C434 + C15199 * C979 + C49275 * C988) *
                         C49239 +
                     (C16722 + C16723 + C16724) * C3913 +
                     (C16725 + C16726 + C16727) * C49040) *
                        C49217 +
                    ((C15237 + C15238 + C15239) * C3912 +
                     (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
                     C18801 * C49040) *
                        C48893) *
                       C824 -
                   (((C19010 + C19011 + C19012) * C49040 +
                     (C19013 + C19014 + C19015) * C3913 +
                     (C15620 + C15621 + C15622) * C49239 +
                     (C15623 + C15624 + C15625) * C3912) *
                        C48893 +
                    ((C17340 + C17341 + C17342) * C49040 +
                     (C17343 + C17344 + C17345) * C3913 +
                     (C15199 * C2936 + C49275 * C2942 + C15198 * C979 +
                      C15195 * C988 + C15197 * C426 + C15194 * C434) *
                         C49239 +
                     (C15199 * C2930 + C49275 * C2937 + C15198 * C973 +
                      C15195 * C978 + C15197 * C416 + C15194 * C427) *
                         C3912) *
                        C49217) *
                       C49269) *
                      C48950 * C552 +
                  ((((C15625 + C15624 + C15623) * C3912 +
                     (C15622 + C15621 + C15620) * C49239 +
                     (C19015 + C19014 + C19013) * C3913 +
                     (C19012 + C19011 + C19010) * C49040) *
                        C49217 +
                    ((C15619 + C15618 + C15617) * C3912 +
                     (C15616 + C15615 + C15614) * C49239 +
                     (C15197 * C724 + C15194 * C731 + C15198 * C2399 +
                      C15195 * C2409 + C15199 * C3384 + C49275 * C3389) *
                         C3913 +
                     (C15197 * C732 + C15194 * C739 + C15198 * C2410 +
                      C15195 * C2417 + C15199 * C3390 + C49275 * C3393) *
                         C49040) *
                        C48893) *
                       C49269 -
                   (((C15432 + C15433 + C15434) * C49040 +
                     (C15435 + C15436 + C15437) * C3913 +
                     (C15248 + C15247 + C15246) * C49239 +
                     (C15245 + C15244 + C15243) * C3912) *
                        C48893 +
                    (C18802 * C49040 + C18803 * C3913 +
                     (C15242 + C15241 + C15240) * C49239 +
                     (C15239 + C15238 + C15237) * C3912) *
                        C49217) *
                       C824) *
                      C48950 * C49265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C824 -
           ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 + C11607 +
             C11608) *
                C48893 +
            (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 + C1991 * C11312 +
             C1992 * C11305 + C1993 * C11311 +
             (C113 * C426 + C48995 * C434) * C11304 +
             (C113 * C416 + C48995 * C427) * C11310) *
                C49217) *
               C49269) *
              C268 +
          (((C1993 * C11310 + C1992 * C11304 + C1991 * C11311 + C1990 * C11305 +
             C9630 * C11312 + C9629 * C11306 + C9628 * C11313 +
             C9627 * C49282) *
                C49217 +
            (C1541 * C11310 + C1540 * C11304 + C1539 * C11311 + C1538 * C11305 +
             C11610 * C11312 + C11609 * C11306 +
             (C113 * C9371 + C48995 * C9374) * C11313 +
             (C113 * C9375 + C48995 * C9377) * C49282) *
                C48893) *
               C49269 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C824 -
           ((C4225 + C4226 + C4213 + C4214) * C49276 +
            (C4215 + C4216 + C4217 + C4218) * C3910 +
            (C4219 + C4220 + C4221 + C4222) * C3909 +
            (C1992 * C49040 + C1993 * C3913 +
             (C113 * C426 + C48995 * C434) * C49239 +
             (C113 * C416 + C48995 * C427) * C3912) *
                C3908) *
               C49269) *
              C268 +
          (((C1993 * C3912 + C1992 * C49239 + C1991 * C3913 + C1990 * C49040) *
                C3908 +
            (C1541 * C3912 + C1540 * C49239 + C1539 * C3913 + C1538 * C49040) *
                C3909 +
            (C1537 * C3912 + C1536 * C49239 + C1535 * C3913 + C1534 * C49040) *
                C3910 +
            (C4224 * C3912 + C4223 * C49239 +
             (C113 * C1500 + C48995 * C1507) * C3913 +
             (C113 * C1508 + C48995 * C1512) * C49040) *
                C49276) *
               C49269 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C3912 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C49239 +
             (C16722 + C16723 + C16724) * C3913 +
             (C16725 + C16726 + C16727) * C49040) *
                C49217 +
            ((C15237 + C15238 + C15239) * C3912 +
             (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
             C18801 * C49040) *
                C48893) *
               C824 -
           (((C19010 + C19011 + C19012) * C49040 +
             (C19013 + C19014 + C19015) * C3913 +
             (C15620 + C15621 + C15622) * C49239 +
             (C15623 + C15624 + C15625) * C3912) *
                C48893 +
            ((C17340 + C17341 + C17342) * C49040 +
             (C17343 + C17344 + C17345) * C3913 +
             (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C49239 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C3912) *
                C49217) *
               C49269) *
              C268 +
          ((((C17345 + C17344 + C17343) * C3912 +
             (C17342 + C17341 + C17340) * C49239 +
             (C17339 + C17338 + C17337) * C3913 +
             (C17336 + C17335 + C17334) * C49040) *
                C49217 +
            ((C19015 + C19014 + C19013) * C3912 +
             (C19012 + C19011 + C19010) * C49239 +
             (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 +
              C15195 * C2407 + C15199 * C10325 + C49275 * C10328) *
                 C3913 +
             (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 +
              C15195 * C2416 + C15199 * C10329 + C49275 * C10331) *
                 C49040) *
                C48893) *
               C49269 -
           (((C16739 + C16738 + C16737) * C49040 +
             (C16736 + C16735 + C16734) * C3913 + C18802 * C49239 +
             C18803 * C3912) *
                C48893 +
            ((C16733 + C16732 + C16731) * C49040 +
             (C16730 + C16729 + C16728) * C3913 +
             (C16727 + C16726 + C16725) * C49239 +
             (C16724 + C16723 + C16722) * C3912) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[98] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C11310 +
                    (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                    C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                    C1823 * C11313 + C1822 * C49282) *
                       C49217 +
                   (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                    C11321 + C11322) *
                       C48893) *
                      C970 -
                  ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                    C11607 + C11608) *
                       C48893 +
                   (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                    C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                    (C113 * C426 + C48995 * C434) * C11304 +
                    (C113 * C416 + C48995 * C427) * C11310) *
                       C49217) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C11310 +
                    (C113 * C979 + C48995 * C988) * C11304 +
                    (C113 * C2395 + C48995 * C2401) * C11311 +
                    (C113 * C2402 + C48995 * C2413) * C11305 +
                    (C113 * C2396 + C48995 * C2403) * C11312 +
                    (C113 * C2404 + C48995 * C2414) * C11306 +
                    (C113 * C9856 + C48995 * C9858) * C11313 +
                    (C113 * C9859 + C48995 * C9862) * C49282) *
                       C49217 +
                   ((C113 * C974 + C48995 * C980) * C11310 +
                    (C113 * C981 + C48995 * C989) * C11304 +
                    (C113 * C2397 + C48995 * C2405) * C11311 +
                    (C113 * C2406 + C48995 * C2415) * C11305 +
                    (C113 * C2398 + C48995 * C2407) * C11312 +
                    (C113 * C2408 + C48995 * C2416) * C11306 +
                    (C113 * C10120 + C48995 * C10121) * C11313 +
                    (C113 * C10122 + C48995 * C10123) * C49282) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48995 * C122) * C3912 +
                    (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                    C1341 * C49040) *
                       C3908 +
                   (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                   C3936 * C49276) *
                      C970 -
                  ((C4225 + C4226 + C4213 + C4214) * C49276 +
                   (C4215 + C4216 + C4217 + C4218) * C3910 +
                   (C4219 + C4220 + C4221 + C4222) * C3909 +
                   (C1992 * C49040 + C1993 * C3913 +
                    (C113 * C426 + C48995 * C434) * C49239 +
                    (C113 * C416 + C48995 * C427) * C3912) *
                       C3908) *
                      C971 +
                  (((C113 * C973 + C48995 * C978) * C3912 +
                    (C113 * C979 + C48995 * C988) * C49239 +
                    (C113 * C2395 + C48995 * C2401) * C3913 +
                    (C113 * C2402 + C48995 * C2413) * C49040) *
                       C3908 +
                   ((C113 * C974 + C48995 * C980) * C3912 +
                    (C113 * C981 + C48995 * C989) * C49239 +
                    (C113 * C2397 + C48995 * C2405) * C3913 +
                    (C113 * C2406 + C48995 * C2415) * C49040) *
                       C3909 +
                   ((C113 * C975 + C48995 * C982) * C3912 +
                    (C113 * C983 + C48995 * C990) * C49239 +
                    (C113 * C2399 + C48995 * C2409) * C3913 +
                    (C113 * C2410 + C48995 * C2417) * C49040) *
                       C3910 +
                   ((C113 * C976 + C48995 * C984) * C3912 +
                    (C113 * C985 + C48995 * C991) * C49239 +
                    (C113 * C2742 + C48995 * C2743) * C3913 +
                    (C113 * C2744 + C48995 * C2745) * C49040) *
                       C49276) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C15197 * C115 + C15194 * C122 + C15198 * C416 +
                     C15195 * C427 + C15199 * C973 + C49275 * C978) *
                        C3912 +
                    (C15197 * C123 + C15194 * C136 + C15198 * C426 +
                     C15195 * C434 + C15199 * C979 + C49275 * C988) *
                        C49239 +
                    (C16722 + C16723 + C16724) * C3913 +
                    (C16725 + C16726 + C16727) * C49040) *
                       C49217 +
                   ((C15237 + C15238 + C15239) * C3912 +
                    (C15240 + C15241 + C15242) * C49239 + C18800 * C3913 +
                    C18801 * C49040) *
                       C48893) *
                      C970 -
                  (((C19010 + C19011 + C19012) * C49040 +
                    (C19013 + C19014 + C19015) * C3913 +
                    (C15620 + C15621 + C15622) * C49239 +
                    (C15623 + C15624 + C15625) * C3912) *
                       C48893 +
                   ((C17340 + C17341 + C17342) * C49040 +
                    (C17343 + C17344 + C17345) * C3913 +
                    (C15199 * C2936 + C49275 * C2942 + C15198 * C979 +
                     C15195 * C988 + C15197 * C426 + C15194 * C434) *
                        C49239 +
                    (C15199 * C2930 + C49275 * C2937 + C15198 * C973 +
                     C15195 * C978 + C15197 * C416 + C15194 * C427) *
                        C3912) *
                       C49217) *
                      C971 +
                  (((C15197 * C973 + C15194 * C978 + C15198 * C2930 +
                     C15195 * C2937 + C15199 * C3796 + C49275 * C3799) *
                        C3912 +
                    (C15197 * C979 + C15194 * C988 + C15198 * C2936 +
                     C15195 * C2942 + C15199 * C3800 + C49275 * C3805) *
                        C49239 +
                    (C15197 * C2395 + C15194 * C2401 + C15198 * C3382 +
                     C15195 * C3385 + C15199 * C11198 + C49275 * C11200) *
                        C3913 +
                    (C15197 * C2402 + C15194 * C2413 + C15198 * C3386 +
                     C15195 * C3391 + C15199 * C11201 + C49275 * C11204) *
                        C49040) *
                       C49217 +
                   ((C15197 * C974 + C15194 * C980 + C15198 * C2929 +
                     C15195 * C2935 + C15199 * C3797 + C49275 * C3801) *
                        C3912 +
                    (C15197 * C981 + C15194 * C989 + C15198 * C2934 +
                     C15195 * C2941 + C15199 * C3802 + C49275 * C3806) *
                        C49239 +
                    (C15197 * C2397 + C15194 * C2405 + C15198 * C3383 +
                     C15195 * C3387 + C15199 * C17901 + C49275 * C17902) *
                        C3913 +
                    (C15197 * C2406 + C15194 * C2415 + C15198 * C3388 +
                     C15195 * C3392 + C15199 * C17903 + C49275 * C17904) *
                        C49040) *
                       C48893) *
                      C972) *
                 C48950 * C48916) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
           (C13242 + C13241) * C49282) *
              C48883 * C48967 * C48950 * C110 -
          ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
           C12679 * C11306 + C12680 * C11312 + C6528 * C11305 + C6529 * C11311 +
           (C5080 + C5079) * C11304 + (C5078 + C5077) * C11310) *
              C48883 * C48967 * C48950 * C111 +
          (C5093 * C11310 + C5094 * C11304 + C6299 * C11311 + C6300 * C11305 +
           (C6537 + C6536) * C11312 + (C6535 + C6534) * C11306 +
           (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
               C11313 +
           (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
               C49282) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C5042 * C276 + C49240 * C287 + C5043 * C722 + C49082 * C727) *
                C3913 +
            (C5042 * C286 + C49240 * C294 + C5043 * C728 + C49082 * C737) *
                C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
            (C5268 + C5267) * C3913 + (C5266 + C5265) * C49040) *
               C1107 +
           C6305 * C49259) *
              C48967 * C48950 * C110 -
          (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
            (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
               C49259 +
           ((C5261 + C5262) * C49040 + (C5263 + C5264) * C3913 +
            (C5084 + C5083) * C49239 + (C5082 + C5081) * C3912) *
               C1107 +
           ((C5265 + C5266) * C49040 + (C5267 + C5268) * C3913 +
            (C5080 + C5079) * C49239 + (C5078 + C5077) * C3912) *
               C1106) *
              C48967 * C48950 * C111 +
          (C6305 * C1106 +
           (C5095 * C3912 + C5096 * C49239 + (C5260 + C5259) * C3913 +
            (C5258 + C5257) * C49040) *
               C1107 +
           ((C5092 + C5091) * C3912 + (C5090 + C5089) * C49239 +
            (C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                C3913 +
            (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                C49040) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
            C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
               C3912 +
           (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
            C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
               C49239 +
           (C20185 * C276 + C20181 * C287 + C20186 * C722 + C20182 * C727 +
            C20187 * C2395 + C20183 * C2401 + C20188 * C3382 + C49288 * C3385) *
               C3913 +
           (C20185 * C286 + C20181 * C294 + C20186 * C728 + C20182 * C737 +
            C20187 * C2402 + C20183 * C2413 + C20188 * C3386 + C49288 * C3391) *
               C49040) *
              C48883 * C48967 * C48950 * C110 -
          ((C20384 + C20385 + C20386 + C20387) * C49040 +
           (C20388 + C20389 + C20390 + C20391) * C3913 +
           (C20229 + C20228 + C20227 + C20226) * C49239 +
           (C20225 + C20224 + C20223 + C20222) * C3912) *
              C48883 * C48967 * C48950 * C111 +
          ((C20237 + C20236 + C20235 + C20234) * C3912 +
           (C20233 + C20232 + C20231 + C20230) * C49239 +
           (C20185 * C274 + C20181 * C283 + C20186 * C724 + C20182 * C731 +
            C20187 * C2399 + C20183 * C2409 + C20188 * C3384 + C49288 * C3389) *
               C3913 +
           (C20185 * C282 + C20181 * C292 + C20186 * C732 + C20182 * C739 +
            C20187 * C2410 + C20183 * C2417 + C20188 * C3390 + C49288 * C3393) *
               C49040) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C48967 * C268 -
           ((C5043 * C9372 + C49082 * C9376 + C5042 * C1809 + C49240 * C1814) *
                C49282 +
            (C5043 * C9370 + C49082 * C9373 + C5042 * C1805 + C49240 * C1808) *
                C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C6508 * C11310 + C6509 * C11304 + C12669 * C11311 +
            C12670 * C11305 + (C12684 + C12683) * C11312 +
            (C12682 + C12681) * C11306 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C11313 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C48967 * C268 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C5043 * C1505 + C49082 * C1511 + C5042 * C626 + C49240 * C635) *
                 C49040 +
             (C5043 * C1499 + C49082 * C1506 + C5042 * C620 + C49240 * C625) *
                 C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C3912 + C6509 * C49239 + (C6541 + C6540) * C3913 +
             (C6539 + C6538) * C49040) *
                C1106 +
            (C6299 * C3912 + C6300 * C49239 + (C6537 + C6536) * C3913 +
             (C6535 + C6534) * C49040) *
                C1107 +
            ((C5260 + C5259) * C3912 + (C5258 + C5257) * C49239 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C3913 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C48967 * C268 -
           ((C20188 * C10326 + C49288 * C10330 + C20187 * C2404 +
             C20183 * C2414 + C20186 * C1505 + C20182 * C1511 + C20185 * C626 +
             C20181 * C635) *
                C49040 +
            (C20188 * C10324 + C49288 * C10327 + C20187 * C2396 +
             C20183 * C2403 + C20186 * C1499 + C20182 * C1506 + C20185 * C620 +
             C20181 * C625) *
                C3913 +
            (C21513 + C21512 + C21511 + C21510) * C49239 +
            (C21509 + C21508 + C21507 + C21506) * C3912) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C20391 + C20390 + C20389 + C20388) * C3912 +
            (C20387 + C20386 + C20385 + C20384) * C49239 +
            (C20185 * C621 + C20181 * C627 + C20186 * C1498 + C20182 * C1504 +
             C20187 * C2398 + C20183 * C2407 + C20188 * C10325 +
             C49288 * C10328) *
                C3913 +
            (C20185 * C628 + C20181 * C636 + C20186 * C1503 + C20182 * C1510 +
             C20187 * C2408 + C20183 * C2416 + C20188 * C10329 +
             C49288 * C10331) *
                C49040) *
               C48883 * C48967 * C49267 -
           ((C20384 + C20385 + C20386 + C20387) * C49040 +
            (C20388 + C20389 + C20390 + C20391) * C3913 +
            (C20229 + C20228 + C20227 + C20226) * C49239 +
            (C20225 + C20224 + C20223 + C20222) * C3912) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C410 -
           ((C5043 * C9859 + C49082 * C9862 + C5042 * C1973 + C49240 * C1978) *
                C49282 +
            (C5043 * C9856 + C49082 * C9858 + C5042 * C1969 + C49240 * C1972) *
                C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C5434 + C5433) * C11310 + (C5432 + C5431) * C11304 +
            (C6759 + C6758) * C11311 + (C6757 + C6756) * C11305 +
            (C12890 + C12889) * C11312 + (C12888 + C12887) * C11306 +
            (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
             C49082 * C10121) *
                C11313 +
            (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C5043 * C2402 + C49082 * C2413 + C5042 * C728 + C49240 * C737) *
                 C49040 +
             (C5043 * C2395 + C49082 * C2401 + C5042 * C722 + C49240 * C727) *
                 C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C3912 + (C5432 + C5431) * C49239 +
             (C6759 + C6758) * C3913 + (C6757 + C6756) * C49040) *
                C1106 +
            ((C5430 + C5429) * C3912 + (C5428 + C5427) * C49239 +
             (C6755 + C6754) * C3913 + (C6753 + C6752) * C49040) *
                C1107 +
            ((C5426 + C5425) * C3912 + (C5424 + C5423) * C49239 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C3913 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C410 -
           ((C20188 * C11201 + C49288 * C11204 + C20187 * C3386 +
             C20183 * C3391 + C20186 * C2402 + C20182 * C2413 + C20185 * C728 +
             C20181 * C737) *
                C49040 +
            (C20188 * C11198 + C49288 * C11200 + C20187 * C3382 +
             C20183 * C3385 + C20186 * C2395 + C20182 * C2401 + C20185 * C722 +
             C20181 * C727) *
                C3913 +
            (C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
             C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
                C49239 +
            (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
             C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
                C3912) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C20545 + C20544 + C20543 + C20542) * C3912 +
            (C20541 + C20540 + C20539 + C20538) * C49239 +
            (C20185 * C723 + C20181 * C729 + C20186 * C2397 + C20182 * C2405 +
             C20187 * C3383 + C20183 * C3387 + C20188 * C17901 +
             C49288 * C17902) *
                C3913 +
            (C20185 * C730 + C20181 * C738 + C20186 * C2406 + C20182 * C2415 +
             C20187 * C3388 + C20183 * C3392 + C20188 * C17903 +
             C49288 * C17904) *
                C49040) *
               C48883 * C49269 -
           ((C20384 + C20385 + C20386 + C20387) * C49040 +
            (C20388 + C20389 + C20390 + C20391) * C3913 +
            (C20229 + C20228 + C20227 + C20226) * C49239 +
            (C20225 + C20224 + C20223 + C20222) * C3912) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C48967 * C550 -
           ((C5043 * C9372 + C49082 * C9376 + C5042 * C1809 + C49240 * C1814) *
                C49282 +
            (C5043 * C9370 + C49082 * C9373 + C5042 * C1805 + C49240 * C1808) *
                C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C6508 * C11310 + C6509 * C11304 + C12669 * C11311 +
            C12670 * C11305 + (C12684 + C12683) * C11312 +
            (C12682 + C12681) * C11306 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C11313 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C48967 * C550 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C5043 * C1505 + C49082 * C1511 + C5042 * C626 + C49240 * C635) *
                 C49040 +
             (C5043 * C1499 + C49082 * C1506 + C5042 * C620 + C49240 * C625) *
                 C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C3912 + C6509 * C49239 + (C6541 + C6540) * C3913 +
             (C6539 + C6538) * C49040) *
                C1106 +
            (C6299 * C3912 + C6300 * C49239 + (C6537 + C6536) * C3913 +
             (C6535 + C6534) * C49040) *
                C1107 +
            ((C5260 + C5259) * C3912 + (C5258 + C5257) * C49239 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C3913 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C48967 * C550 -
           ((C20188 * C10326 + C49288 * C10330 + C20187 * C2404 +
             C20183 * C2414 + C20186 * C1505 + C20182 * C1511 + C20185 * C626 +
             C20181 * C635) *
                C49040 +
            (C20188 * C10324 + C49288 * C10327 + C20187 * C2396 +
             C20183 * C2403 + C20186 * C1499 + C20182 * C1506 + C20185 * C620 +
             C20181 * C625) *
                C3913 +
            (C21513 + C21512 + C21511 + C21510) * C49239 +
            (C21509 + C21508 + C21507 + C21506) * C3912) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C20391 + C20390 + C20389 + C20388) * C3912 +
            (C20387 + C20386 + C20385 + C20384) * C49239 +
            (C20185 * C621 + C20181 * C627 + C20186 * C1498 + C20182 * C1504 +
             C20187 * C2398 + C20183 * C2407 + C20188 * C10325 +
             C49288 * C10328) *
                C3913 +
            (C20185 * C628 + C20181 * C636 + C20186 * C1503 + C20182 * C1510 +
             C20187 * C2408 + C20183 * C2416 + C20188 * C10329 +
             C49288 * C10331) *
                C49040) *
               C48883 * C48967 * C49267 -
           ((C20384 + C20385 + C20386 + C20387) * C49040 +
            (C20388 + C20389 + C20390 + C20391) * C3913 +
            (C20229 + C20228 + C20227 + C20226) * C49239 +
            (C20225 + C20224 + C20223 + C20222) * C3912) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
           C14572 * C49282) *
              C48883 * C48967 * C616 -
          ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
           (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
           (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
           (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
              C48883 * C48967 * C617 +
          (C13231 * C11310 + C13232 * C11304 + C14571 * C11311 +
           C14572 * C11305 + (C14584 + C14583) * C11312 +
           (C14582 + C14581) * C11306 +
           (C5042 * C9268 + C49240 * C9271 + C5043 * C9614 + C49082 * C9615) *
               C11313 +
           (C5042 * C9270 + C49240 * C9274 + C5043 * C9616 + C49082 * C9617) *
               C49282) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 + C6508 * C3913 +
            C6509 * C49040) *
               C1107 +
           C6305 * C49259) *
              C48967 * C616 -
          (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
            C6518 * C49239 + C6519 * C3912) *
               C49259 +
           ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
            C6528 * C49239 + C6529 * C3912) *
               C1107 +
           ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
            (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
               C1106) *
              C48967 * C617 +
          (((C7111 + C7110) * C3912 + (C7109 + C7108) * C49239 +
            (C5042 * C1301 + C49240 * C1308 + C5043 * C1969 + C49082 * C1972) *
                C3913 +
            (C5042 * C1307 + C49240 * C1313 + C5043 * C1973 + C49082 * C1978) *
                C49040) *
               C1106 +
           ((C6541 + C6540) * C3912 + (C6539 + C6538) * C49239 +
            (C5042 * C1300 + C49240 * C1306 + C5043 * C1970 + C49082 * C1974) *
                C3913 +
            (C5042 * C1305 + C49240 * C1312 + C5043 * C1975 + C49082 * C1979) *
                C49040) *
               C1107 +
           ((C6537 + C6536) * C3912 + (C6535 + C6534) * C49239 +
            (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                C3913 +
            (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                C49040) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
            C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
               C3912 +
           (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
            C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
               C49239 +
           (C21506 + C21507 + C21508 + C21509) * C3913 +
           (C21510 + C21511 + C21512 + C21513) * C49040) *
              C48883 * C48967 * C616 -
          ((C21888 + C21889 + C21890 + C21891) * C49040 +
           (C21892 + C21893 + C21894 + C21895) * C3913 +
           (C21513 + C21512 + C21511 + C21510) * C49239 +
           (C21509 + C21508 + C21507 + C21506) * C3912) *
              C48883 * C48967 * C617 +
          ((C21895 + C21894 + C21893 + C21892) * C3912 +
           (C21891 + C21890 + C21889 + C21888) * C49239 +
           (C20185 * C1301 + C20181 * C1308 + C20186 * C1969 + C20182 * C1972 +
            C20187 * C9856 + C20183 * C9858 + C20188 * C10756 +
            C49288 * C10757) *
               C3913 +
           (C20185 * C1307 + C20181 * C1313 + C20186 * C1973 + C20182 * C1978 +
            C20187 * C9859 + C20183 * C9862 + C20188 * C10758 +
            C49288 * C10759) *
               C49040) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C410 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C550 +
          (((C7317 + C7316) * C11310 + (C7315 + C7314) * C11304 +
            (C13450 + C13449) * C11311 + (C13448 + C13447) * C11305 +
            (C14726 + C14725) * C11312 + (C14724 + C14723) * C11306 +
            (C5042 * C9370 + C49240 * C9373 + C5043 * C9857 + C49082 * C9860) *
                C11313 +
            (C5042 * C9372 + C49240 * C9376 + C5043 * C9861 + C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C3912 + (C7315 + C7314) * C49239 +
             (C5042 * C1499 + C49240 * C1506 + C5043 * C2396 + C49082 * C2403) *
                 C3913 +
             (C5042 * C1505 + C49240 * C1511 + C5043 * C2404 + C49082 * C2414) *
                 C49040) *
                C1106 +
            ((C6759 + C6758) * C3912 + (C6757 + C6756) * C49239 +
             (C5042 * C1498 + C49240 * C1504 + C5043 * C2398 + C49082 * C2407) *
                 C3913 +
             (C5042 * C1503 + C49240 * C1510 + C5043 * C2408 + C49082 * C2416) *
                 C49040) *
                C1107 +
            ((C6755 + C6754) * C3912 + (C6753 + C6752) * C49239 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C3913 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C410 -
           ((C22042 + C22043 + C22044 + C22045) * C49040 +
            (C22046 + C22047 + C22048 + C22049) * C3913 +
            (C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
             C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
                C49239 +
            (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
             C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
                C3912) *
               C48883 * C49269) *
              C550 +
          (((C22049 + C22048 + C22047 + C22046) * C3912 +
            (C22045 + C22044 + C22043 + C22042) * C49239 +
            (C20185 * C1499 + C20181 * C1506 + C20186 * C2396 + C20182 * C2403 +
             C20187 * C10324 + C20183 * C10327 + C20188 * C11199 +
             C49288 * C11202) *
                C3913 +
            (C20185 * C1505 + C20181 * C1511 + C20186 * C2404 + C20182 * C2414 +
             C20187 * C10326 + C20183 * C10330 + C20188 * C11203 +
             C49288 * C11205) *
                C49040) *
               C48883 * C49269 -
           ((C21888 + C21889 + C21890 + C21891) * C49040 +
            (C21892 + C21893 + C21894 + C21895) * C3913 +
            (C21513 + C21512 + C21511 + C21510) * C49239 +
            (C21509 + C21508 + C21507 + C21506) * C3912) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C824 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C5434 + C5433) * C11310 + (C5432 + C5431) * C11304 +
            (C6759 + C6758) * C11311 + (C6757 + C6756) * C11305 +
            (C12890 + C12889) * C11312 + (C12888 + C12887) * C11306 +
            (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
             C49082 * C10121) *
                C11313 +
            (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C3912 + (C5432 + C5431) * C49239 +
             (C6759 + C6758) * C3913 + (C6757 + C6756) * C49040) *
                C1106 +
            ((C5430 + C5429) * C3912 + (C5428 + C5427) * C49239 +
             (C6755 + C6754) * C3913 + (C6753 + C6752) * C49040) *
                C1107 +
            ((C5426 + C5425) * C3912 + (C5424 + C5423) * C49239 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C3913 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C824 -
           ((C22042 + C22043 + C22044 + C22045) * C49040 +
            (C22046 + C22047 + C22048 + C22049) * C3913 +
            (C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
             C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
                C49239 +
            (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
             C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
                C3912) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C20545 + C20544 + C20543 + C20542) * C3912 +
            (C20541 + C20540 + C20539 + C20538) * C49239 +
            (C20185 * C723 + C20181 * C729 + C20186 * C2397 + C20182 * C2405 +
             C20187 * C3383 + C20183 * C3387 + C20188 * C17901 +
             C49288 * C17902) *
                C3913 +
            (C20185 * C730 + C20181 * C738 + C20186 * C2406 + C20182 * C2415 +
             C20187 * C3388 + C20183 * C3392 + C20188 * C17903 +
             C49288 * C17904) *
                C49040) *
               C48883 * C49269 -
           ((C20384 + C20385 + C20386 + C20387) * C49040 +
            (C20388 + C20389 + C20390 + C20391) * C3913 +
            (C20229 + C20228 + C20227 + C20226) * C49239 +
            (C20225 + C20224 + C20223 + C20222) * C3912) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C824 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C268 +
          (((C7317 + C7316) * C11310 + (C7315 + C7314) * C11304 +
            (C13450 + C13449) * C11311 + (C13448 + C13447) * C11305 +
            (C14726 + C14725) * C11312 + (C14724 + C14723) * C11306 +
            (C5042 * C9370 + C49240 * C9373 + C5043 * C9857 + C49082 * C9860) *
                C11313 +
            (C5042 * C9372 + C49240 * C9376 + C5043 * C9861 + C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C3912 + (C7315 + C7314) * C49239 +
             (C5042 * C1499 + C49240 * C1506 + C5043 * C2396 + C49082 * C2403) *
                 C3913 +
             (C5042 * C1505 + C49240 * C1511 + C5043 * C2404 + C49082 * C2414) *
                 C49040) *
                C1106 +
            ((C6759 + C6758) * C3912 + (C6757 + C6756) * C49239 +
             (C5042 * C1498 + C49240 * C1504 + C5043 * C2398 + C49082 * C2407) *
                 C3913 +
             (C5042 * C1503 + C49240 * C1510 + C5043 * C2408 + C49082 * C2416) *
                 C49040) *
                C1107 +
            ((C6755 + C6754) * C3912 + (C6753 + C6752) * C49239 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C3913 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C3912 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C49239 +
            (C21506 + C21507 + C21508 + C21509) * C3913 +
            (C21510 + C21511 + C21512 + C21513) * C49040) *
               C48883 * C824 -
           ((C22042 + C22043 + C22044 + C22045) * C49040 +
            (C22046 + C22047 + C22048 + C22049) * C3913 +
            (C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
             C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
                C49239 +
            (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
             C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
                C3912) *
               C48883 * C49269) *
              C268 +
          (((C22049 + C22048 + C22047 + C22046) * C3912 +
            (C22045 + C22044 + C22043 + C22042) * C49239 +
            (C20185 * C1499 + C20181 * C1506 + C20186 * C2396 + C20182 * C2403 +
             C20187 * C10324 + C20183 * C10327 + C20188 * C11199 +
             C49288 * C11202) *
                C3913 +
            (C20185 * C1505 + C20181 * C1511 + C20186 * C2404 + C20182 * C2414 +
             C20187 * C10326 + C20183 * C10330 + C20188 * C11203 +
             C49288 * C11205) *
                C49040) *
               C48883 * C49269 -
           ((C21888 + C21889 + C21890 + C21891) * C49040 +
            (C21892 + C21893 + C21894 + C21895) * C3913 +
            (C21513 + C21512 + C21511 + C21510) * C49239 +
            (C21509 + C21508 + C21507 + C21506) * C3912) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
           C14572 * C49282) *
              C48883 * C970 -
          ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
           (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
           (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
           (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
               C11304 +
           (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
               C11310) *
              C48883 * C971 +
          ((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
               C11310 +
           (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
               C11304 +
           (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
               C11311 +
           (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
               C11305 +
           (C5042 * C2396 + C49240 * C2403 + C5043 * C10324 + C49082 * C10327) *
               C11312 +
           (C5042 * C2404 + C49240 * C2414 + C5043 * C10326 + C49082 * C10330) *
               C11306 +
           (C5042 * C9856 + C49240 * C9858 + C5043 * C10756 + C49082 * C10757) *
               C11313 +
           (C5042 * C9859 + C49240 * C9862 + C5043 * C10758 + C49082 * C10759) *
               C49282) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 + C6508 * C3913 +
            C6509 * C49040) *
               C1107 +
           C6305 * C49259) *
              C970 -
          (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
            (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
               C49259 +
           ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
            (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
               C1107 +
           ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C49239 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C3912) *
               C1106) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C3912 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C49239 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C3913 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C49040) *
               C1106 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C3912 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C49239 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C3913 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C49040) *
               C1107 +
           ((C5042 * C975 + C49240 * C982 + C5043 * C2928 + C49082 * C2933) *
                C3912 +
            (C5042 * C983 + C49240 * C990 + C5043 * C2932 + C49082 * C2940) *
                C49239 +
            (C5042 * C2399 + C49240 * C2409 + C5043 * C3384 + C49082 * C3389) *
                C3913 +
            (C5042 * C2410 + C49240 * C2417 + C5043 * C3390 + C49082 * C3393) *
                C49040) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
            C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
               C3912 +
           (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
            C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
               C49239 +
           (C21506 + C21507 + C21508 + C21509) * C3913 +
           (C21510 + C21511 + C21512 + C21513) * C49040) *
              C48883 * C970 -
          ((C22042 + C22043 + C22044 + C22045) * C49040 +
           (C22046 + C22047 + C22048 + C22049) * C3913 +
           (C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
            C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
               C49239 +
           (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
            C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
               C3912) *
              C48883 * C971 +
          ((C20185 * C973 + C20181 * C978 + C20186 * C2930 + C20182 * C2937 +
            C20187 * C3796 + C20183 * C3799 + C20188 * C17987 +
            C49288 * C17990) *
               C3912 +
           (C20185 * C979 + C20181 * C988 + C20186 * C2936 + C20182 * C2942 +
            C20187 * C3800 + C20183 * C3805 + C20188 * C17989 +
            C49288 * C17993) *
               C49239 +
           (C20185 * C2395 + C20181 * C2401 + C20186 * C3382 + C20182 * C3385 +
            C20187 * C11198 + C20183 * C11200 + C20188 * C18221 +
            C49288 * C18222) *
               C3913 +
           (C20185 * C2402 + C20181 * C2413 + C20186 * C3386 + C20182 * C3391 +
            C20187 * C11201 + C20183 * C11204 + C20188 * C18223 +
            C49288 * C18224) *
               C49040) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C114 +
                (C113 * C123 + C48995 * C136) * C48978) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C48967 * C48950 * C110 -
              ((C182 + C183) * C107 + (C181 + C180) * C106 +
               (C179 + C178) * C105 + (C177 + C176) * C104 +
               (C175 + C174) * C103) *
                  C48967 * C48950 * C111 +
              (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
               ((C113 * C121 + C48995 * C134) * C114 +
                (C113 * C135 + C48995 * C142) * C48978) *
                   C107) *
                  C48967 * C48950 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C1109 +
                (C113 * C123 + C48995 * C136) * C49307 +
                (C113 * C276 + C48995 * C287) * C1110 +
                (C113 * C286 + C48995 * C294) * C49295 +
                (C113 * C620 + C48995 * C625) * C1111 +
                (C113 * C626 + C48995 * C635) * C49272) *
                   C1106 +
               (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
               C1153 * C49259) *
                  C48967 * C48950 * C110 -
              ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
               (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
               (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
                  C48967 * C48950 * C111 +
              (C1153 * C1106 +
               (C1136 + C1135 + C1134 + C1133 + C1150 + C1149) * C1107 +
               (C170 * C1109 + C171 * C49307 + C314 * C1110 + C313 * C49295 +
                (C113 * C624 + C48995 * C633) * C1111 +
                (C113 * C634 + C48995 * C639) * C49272) *
                   C49259) *
                  C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C48967 * C48950 * C110 -
          (((C2584 + C2585 + C2586) * C48978 + (C2587 + C2588 + C2589) * C114) *
               C49259 +
           ((C2583 + C2582 + C2581) * C48978 + (C2580 + C2579 + C2578) * C114) *
               C1107 +
           ((C2577 + C2576 + C2575) * C48978 + (C2574 + C2573 + C2572) * C114) *
               C1106) *
              C48967 * C48950 * C111 +
          (C2596 * C1106 +
           ((C2589 + C2588 + C2587) * C114 + (C2586 + C2585 + C2584) * C48978) *
               C1107 +
           ((C2532 * C119 + C49308 * C130 + C2533 * C412 + C49297 * C419 +
             C2534 * C977 + C49275 * C986) *
                C114 +
            (C2532 * C131 + C49308 * C140 + C2533 * C418 + C49297 * C430 +
             C2534 * C987 + C49275 * C992) *
                C48978) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C48950 * C110 -
          ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
           (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
           (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
              C48967 * C48950 * C111 +
          (C7993 * C49304 +
           (C7988 + C7987 + C7986 + C7985 + C7984 + C7983) * C49291 +
           (C170 * C7967 + C171 * C7961 + C314 * C7968 + C313 * C7962 +
            (C113 * C624 + C48995 * C633) * C7969 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + (C113 * C1805 + C48995 * C1808) * C9185 +
           (C113 * C1809 + C48995 * C1814) * C9179) *
              C48883 * C48967 * C48950 * C110 -
          ((C113 * C1811 + C48995 * C1815) * C9179 +
           (C113 * C1806 + C48995 * C1810) * C9185 + C1346 * C9178 +
           C1347 * C9184 + C1138 * C9177 + C1137 * C9183 + C319 * C9176 +
           C320 * C9182 + C165 * C9175 + C164 * C9181) *
              C48883 * C48967 * C48950 * C111 +
          (C166 * C9181 + C167 * C9175 + C318 * C9182 + C317 * C9176 +
           C1140 * C9183 + C1141 * C9177 + C1345 * C9184 + C1344 * C9178 +
           (C113 * C1807 + C48995 * C1812) * C9185 +
           (C113 * C1813 + C48995 * C1816) * C9179) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C2532 * C276 + C49308 * C287 + C2533 * C722 + C49297 * C727 +
            C2534 * C2395 + C49275 * C2401) *
               C7968 +
           (C2532 * C286 + C49308 * C294 + C2533 * C728 + C49297 * C737 +
            C2534 * C2402 + C49275 * C2413) *
               C7962 +
           (C2532 * C620 + C49308 * C625 + C2533 * C1499 + C49297 * C1506 +
            C2534 * C2396 + C49275 * C2403) *
               C7969 +
           (C2532 * C626 + C49308 * C635 + C2533 * C1505 + C49297 * C1511 +
            C2534 * C2404 + C49275 * C2414) *
               C49272) *
              C48883 * C48967 * C48950 * C110 -
          ((C2534 * C2408 + C49275 * C2416 + C2533 * C1503 + C49297 * C1510 +
            C2532 * C628 + C49308 * C636) *
               C49272 +
           (C2534 * C2398 + C49275 * C2407 + C2533 * C1498 + C49297 * C1504 +
            C2532 * C621 + C49308 * C627) *
               C7969 +
           (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
           (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
              C48883 * C48967 * C48950 * C111 +
          (C2592 * C7967 + C2593 * C7961 + (C2776 + C2775 + C2774) * C7968 +
           (C2773 + C2772 + C2771) * C7962 +
           (C2532 * C622 + C49308 * C629 + C2533 * C1497 + C49297 * C1502 +
            C2534 * C2400 + C49275 * C2411) *
               C7969 +
           (C2532 * C630 + C49308 * C637 + C2533 * C1501 + C49297 * C1509 +
            C2534 * C2412 + C49275 * C2418) *
               C49272) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C48967 * C48950 * C110 -
          (((C15249 + C15250 + C15251) * C48978 +
            (C15252 + C15253 + C15254) * C114) *
               C49259 +
           ((C15248 + C15247 + C15246) * C48978 +
            (C15245 + C15244 + C15243) * C114) *
               C49291 +
           ((C15242 + C15241 + C15240) * C48978 +
            (C15239 + C15238 + C15237) * C114) *
               C49304) *
              C48967 * C48950 * C111 +
          (C15261 * C49304 +
           ((C15254 + C15253 + C15252) * C114 +
            (C15251 + C15250 + C15249) * C48978) *
               C49291 +
           ((C15197 * C119 + C15194 * C130 + C15198 * C412 + C15195 * C419 +
             C15199 * C977 + C49275 * C986) *
                C114 +
            (C15197 * C131 + C15194 * C140 + C15198 * C418 + C15195 * C430 +
             C15199 * C987 + C49275 * C992) *
                C48978) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C15197 * C276 + C15194 * C287 + C15198 * C722 + C15195 * C727 +
            C15199 * C2395 + C49275 * C2401) *
               C1110 +
           (C15197 * C286 + C15194 * C294 + C15198 * C728 + C15195 * C737 +
            C15199 * C2402 + C49275 * C2413) *
               C49295 +
           (C15197 * C620 + C15194 * C625 + C15198 * C1499 + C15195 * C1506 +
            C15199 * C2396 + C49275 * C2403) *
               C1111 +
           (C15197 * C626 + C15194 * C635 + C15198 * C1505 + C15195 * C1511 +
            C15199 * C2404 + C49275 * C2414) *
               C49272) *
              C48883 * C48967 * C48950 * C110 -
          ((C15199 * C2408 + C49275 * C2416 + C15198 * C1503 + C15195 * C1510 +
            C15197 * C628 + C15194 * C636) *
               C49272 +
           (C15199 * C2398 + C49275 * C2407 + C15198 * C1498 + C15195 * C1504 +
            C15197 * C621 + C15194 * C627) *
               C1111 +
           (C15438 + C15439 + C15440) * C49295 +
           (C15441 + C15442 + C15443) * C1110 +
           (C15242 + C15241 + C15240) * C49307 +
           (C15239 + C15238 + C15237) * C1109) *
              C48883 * C48967 * C48950 * C111 +
          (C15257 * C1109 + C15258 * C49307 +
           (C15437 + C15436 + C15435) * C1110 +
           (C15434 + C15433 + C15432) * C49295 +
           (C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
            C15199 * C2400 + C49275 * C2411) *
               C1111 +
           (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
            C15199 * C2412 + C49275 * C2418) *
               C49272) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
            C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
            C17818 * C3796 + C17813 * C3799) *
               C114 +
           (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
            C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
            C17818 * C3800 + C17813 * C3805) *
               C48978) *
              C48883 * C48967 * C48950 * C110 -
          ((C17818 * C3802 + C17813 * C3806 + C17817 * C2934 + C17812 * C2941 +
            C17816 * C981 + C17811 * C989 + C17815 * C424 + C17810 * C433 +
            C17814 * C125 + C17809 * C137) *
               C48978 +
           (C17818 * C3797 + C17813 * C3801 + C17817 * C2929 + C17812 * C2935 +
            C17816 * C974 + C17811 * C980 + C17815 * C415 + C17810 * C425 +
            C17814 * C116 + C17809 * C124) *
               C114) *
              C48883 * C48967 * C48950 * C111 +
          ((C17814 * C117 + C17809 * C126 + C17815 * C414 + C17810 * C423 +
            C17816 * C975 + C17811 * C982 + C17817 * C2928 + C17812 * C2933 +
            C17818 * C3798 + C17813 * C3803) *
               C114 +
           (C17814 * C127 + C17809 * C138 + C17815 * C422 + C17810 * C432 +
            C17816 * C983 + C17811 * C990 + C17817 * C2932 + C17812 * C2940 +
            C17818 * C3804 + C17813 * C3807) *
               C48978) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C48967 * C268 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C48995 * C294) * C48978 +
                 (C113 * C276 + C48995 * C287) * C114) *
                    C103) *
                   C48967 * C49267) *
                  C270 +
              (((C328 + C327) * C103 + (C326 + C325) * C104 +
                (C324 + C323) * C105 + (C322 + C321) * C106 +
                ((C113 * C277 + C48995 * C288) * C114 +
                 (C113 * C289 + C48995 * C295) * C48978) *
                    C107) *
                   C48967 * C49267 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C48967 * C268) *
                  C49265) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C48967 * C268 -
               ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
                (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
                ((C113 * C1307 + C48995 * C1313) * C49272 +
                 (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
                 C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                    C1106) *
                   C48967 * C49267) *
                  C270 +
              (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
                (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
                (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
                 (C113 * C1302 + C48995 * C1309) * C1111 +
                 (C113 * C1310 + C48995 * C1314) * C49272) *
                    C49259) *
                   C48967 * C49267 -
               ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
                (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
                (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
                   C48967 * C268) *
                  C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C48967 * C268 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C48967 * C49267) *
              C270 +
          ((((C2782 + C2781 + C2780) * C114 +
             (C2779 + C2778 + C2777) * C48978) *
                C1106 +
            ((C2776 + C2775 + C2774) * C114 +
             (C2773 + C2772 + C2771) * C48978) *
                C1107 +
            ((C2532 * C273 + C49308 * C281 + C2533 * C725 + C49297 * C733 +
              C2534 * C2742 + C49275 * C2743) *
                 C114 +
             (C2532 * C280 + C49308 * C291 + C2533 * C734 + C49297 * C740 +
              C2534 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C268 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C268 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C48967 * C268 -
           ((C2534 * C9859 + C49275 * C9862 + C2533 * C1973 + C49297 * C1978 +
             C2532 * C1307 + C49308 * C1313) *
                C49272 +
            (C2534 * C9856 + C49275 * C9858 + C2533 * C1969 + C49297 * C1972 +
             C2532 * C1301 + C49308 * C1308) *
                C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C2782 + C2781 + C2780) * C7967 + (C2779 + C2778 + C2777) * C7961 +
            (C10173 + C10174 + C10175) * C7968 +
            (C10176 + C10177 + C10178) * C7962 +
            (C2532 * C1300 + C49308 * C1306 + C2533 * C1970 + C49297 * C1974 +
             C2534 * C10120 + C49275 * C10121) *
                C7969 +
            (C2532 * C1305 + C49308 * C1312 + C2533 * C1975 + C49297 * C1979 +
             C2534 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C48967 * C268 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C48967 * C49267) *
              C270 +
          ((((C15443 + C15442 + C15441) * C114 +
             (C15440 + C15439 + C15438) * C48978) *
                C49304 +
            ((C15437 + C15436 + C15435) * C114 +
             (C15434 + C15433 + C15432) * C48978) *
                C49291 +
            ((C15197 * C273 + C15194 * C281 + C15198 * C725 + C15195 * C733 +
              C15199 * C2742 + C49275 * C2743) *
                 C114 +
             (C15197 * C280 + C15194 * C291 + C15198 * C734 + C15195 * C740 +
              C15199 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C48967 * C268 -
           ((C15199 * C9859 + C49275 * C9862 + C15198 * C1973 + C15195 * C1978 +
             C15197 * C1307 + C15194 * C1313) *
                C49272 +
            (C15199 * C9856 + C49275 * C9858 + C15198 * C1969 + C15195 * C1972 +
             C15197 * C1301 + C15194 * C1308) *
                C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C15443 + C15442 + C15441) * C1109 +
            (C15440 + C15439 + C15438) * C49307 +
            (C16734 + C16735 + C16736) * C1110 +
            (C16737 + C16738 + C16739) * C49295 +
            (C15197 * C1300 + C15194 * C1306 + C15198 * C1970 + C15195 * C1974 +
             C15199 * C10120 + C49275 * C10121) *
                C1111 +
            (C15197 * C1305 + C15194 * C1312 + C15198 * C1975 + C15195 * C1979 +
             C15199 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C48967 * C268 -
           ((C17818 * C11201 + C17813 * C11204 + C17817 * C3386 +
             C17812 * C3391 + C17816 * C2402 + C17811 * C2413 + C17815 * C728 +
             C17810 * C737 + C17814 * C286 + C17809 * C294) *
                C48978 +
            (C17818 * C11198 + C17813 * C11200 + C17817 * C3382 +
             C17812 * C3385 + C17816 * C2395 + C17811 * C2401 + C17815 * C722 +
             C17810 * C727 + C17814 * C276 + C17809 * C287) *
                C114) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C17814 * C275 + C17809 * C285 + C17815 * C723 + C17810 * C729 +
             C17816 * C2397 + C17811 * C2405 + C17817 * C3383 + C17812 * C3387 +
             C17818 * C17901 + C17813 * C17902) *
                C114 +
            (C17814 * C284 + C17809 * C293 + C17815 * C730 + C17810 * C738 +
             C17816 * C2406 + C17811 * C2415 + C17817 * C3388 + C17812 * C3392 +
             C17818 * C17903 + C17813 * C17904) *
                C48978) *
               C48883 * C48967 * C49267 -
           ((C17818 * C3802 + C17813 * C3806 + C17817 * C2934 + C17812 * C2941 +
             C17816 * C981 + C17811 * C989 + C17815 * C424 + C17810 * C433 +
             C17814 * C125 + C17809 * C137) *
                C48978 +
            (C17818 * C3797 + C17813 * C3801 + C17817 * C2929 + C17812 * C2935 +
             C17816 * C974 + C17811 * C980 + C17815 * C415 + C17810 * C425 +
             C17814 * C116 + C17809 * C124) *
                C114) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C410 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C48995 * C434) * C48978 +
                 (C113 * C416 + C48995 * C427) * C114) *
                    C103) *
                   C49269) *
                  C48950 * C270 +
              (((C468 + C467) * C103 + (C466 + C465) * C104 +
                (C464 + C463) * C105 + (C462 + C461) * C106 +
                ((C113 * C417 + C48995 * C428) * C114 +
                 (C113 * C429 + C48995 * C435) * C48978) *
                    C107) *
                   C49269 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C410) *
                  C48950 * C49265) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C410 -
               ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
                (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
                ((C113 * C1505 + C48995 * C1511) * C49272 +
                 (C113 * C1499 + C48995 * C1506) * C1111 +
                 (C113 * C728 + C48995 * C737) * C49295 +
                 (C113 * C722 + C48995 * C727) * C1110 +
                 (C113 * C426 + C48995 * C434) * C49307 +
                 (C113 * C416 + C48995 * C427) * C1109) *
                    C1106) *
                   C49269) *
                  C48950 * C270 +
              (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
                (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
                (C456 * C1109 + C455 * C49307 +
                 (C113 * C725 + C48995 * C733) * C1110 +
                 (C113 * C734 + C48995 * C740) * C49295 +
                 (C113 * C1500 + C48995 * C1507) * C1111 +
                 (C113 * C1508 + C48995 * C1512) * C49272) *
                    C49259) *
                   C49269 -
               ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
                (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
                (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
                   C410) *
                  C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C410 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C48950 * C270 +
          ((((C2980 + C2979 + C2978) * C114 +
             (C2977 + C2976 + C2975) * C48978) *
                C1106 +
            ((C2974 + C2973 + C2972) * C114 +
             (C2971 + C2970 + C2969) * C48978) *
                C1107 +
            ((C2532 * C413 + C49308 * C421 + C2533 * C976 + C49297 * C984 +
              C2534 * C2931 + C49275 * C2938) *
                 C114 +
             (C2532 * C420 + C49308 * C431 + C2533 * C985 + C49297 * C991 +
              C2534 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C270 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           ((C113 * C9372 + C48995 * C9376) * C9179 +
            (C113 * C9370 + C48995 * C9373) * C9185 +
            (C113 * C1973 + C48995 * C1978) * C9178 +
            (C113 * C1969 + C48995 * C1972) * C9184 + C1990 * C9177 +
            C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C270 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C410 -
           ((C2534 * C10326 + C49275 * C10330 + C2533 * C2404 + C49297 * C2414 +
             C2532 * C1505 + C49308 * C1511) *
                C49272 +
            (C2534 * C10324 + C49275 * C10327 + C2533 * C2396 + C49297 * C2403 +
             C2532 * C1499 + C49308 * C1506) *
                C7969 +
            (C2534 * C3386 + C49275 * C3391 + C2533 * C2402 + C49297 * C2413 +
             C2532 * C728 + C49308 * C737) *
                C7962 +
            (C2534 * C3382 + C49275 * C3385 + C2533 * C2395 + C49297 * C2401 +
             C2532 * C722 + C49308 * C727) *
                C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C2980 + C2979 + C2978) * C7967 + (C2977 + C2976 + C2975) * C7961 +
            (C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
             C2534 * C3383 + C49275 * C3387) *
                C7968 +
            (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
             C2534 * C3388 + C49275 * C3392) *
                C7962 +
            (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 + C49297 * C2407 +
             C2534 * C10325 + C49275 * C10328) *
                C7969 +
            (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 + C49297 * C2416 +
             C2534 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C410 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C48950 * C270 +
          ((((C15625 + C15624 + C15623) * C114 +
             (C15622 + C15621 + C15620) * C48978) *
                C49304 +
            ((C15619 + C15618 + C15617) * C114 +
             (C15616 + C15615 + C15614) * C48978) *
                C49291 +
            ((C15197 * C413 + C15194 * C421 + C15198 * C976 + C15195 * C984 +
              C15199 * C2931 + C49275 * C2938) *
                 C114 +
             (C15197 * C420 + C15194 * C431 + C15198 * C985 + C15195 * C991 +
              C15199 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C410 -
           ((C15199 * C10326 + C49275 * C10330 + C15198 * C2404 +
             C15195 * C2414 + C15197 * C1505 + C15194 * C1511) *
                C49272 +
            (C15199 * C10324 + C49275 * C10327 + C15198 * C2396 +
             C15195 * C2403 + C15197 * C1499 + C15194 * C1506) *
                C1111 +
            (C15199 * C3386 + C49275 * C3391 + C15198 * C2402 + C15195 * C2413 +
             C15197 * C728 + C15194 * C737) *
                C49295 +
            (C15199 * C3382 + C49275 * C3385 + C15198 * C2395 + C15195 * C2401 +
             C15197 * C722 + C15194 * C727) *
                C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C15625 + C15624 + C15623) * C1109 +
            (C15622 + C15621 + C15620) * C49307 +
            (C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
             C15199 * C3383 + C49275 * C3387) *
                C1110 +
            (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
             C15199 * C3388 + C49275 * C3392) *
                C49295 +
            (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 + C15195 * C2407 +
             C15199 * C10325 + C49275 * C10328) *
                C1111 +
            (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 + C15195 * C2416 +
             C15199 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C410 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3800 +
             C17812 * C3805 + C17816 * C2936 + C17811 * C2942 + C17815 * C979 +
             C17810 * C988 + C17814 * C426 + C17809 * C434) *
                C48978 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3796 +
             C17812 * C3799 + C17816 * C2930 + C17811 * C2937 + C17815 * C973 +
             C17810 * C978 + C17814 * C416 + C17809 * C427) *
                C114) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C17814 * C415 + C17809 * C425 + C17815 * C974 + C17810 * C980 +
             C17816 * C2929 + C17811 * C2935 + C17817 * C3797 + C17812 * C3801 +
             C17818 * C17988 + C17813 * C17991) *
                C114 +
            (C17814 * C424 + C17809 * C433 + C17815 * C981 + C17810 * C989 +
             C17816 * C2934 + C17811 * C2941 + C17817 * C3802 + C17812 * C3806 +
             C17818 * C17992 + C17813 * C17994) *
                C48978) *
               C48883 * C49269 -
           ((C17818 * C3802 + C17813 * C3806 + C17817 * C2934 + C17812 * C2941 +
             C17816 * C981 + C17811 * C989 + C17815 * C424 + C17810 * C433 +
             C17814 * C125 + C17809 * C137) *
                C48978 +
            (C17818 * C3797 + C17813 * C3801 + C17817 * C2929 + C17812 * C2935 +
             C17816 * C974 + C17811 * C980 + C17815 * C415 + C17810 * C425 +
             C17814 * C116 + C17809 * C124) *
                C114) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C48967 * C550 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C48995 * C294) * C48978 +
                 (C113 * C276 + C48995 * C287) * C114) *
                    C103) *
                   C48967 * C49267) *
                  C552 +
              (((C328 + C327) * C103 + (C326 + C325) * C104 +
                (C324 + C323) * C105 + (C322 + C321) * C106 +
                ((C113 * C277 + C48995 * C288) * C114 +
                 (C113 * C289 + C48995 * C295) * C48978) *
                    C107) *
                   C48967 * C49267 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C48967 * C550) *
                  C49265) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C48967 * C550 -
               ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
                (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
                ((C113 * C1307 + C48995 * C1313) * C49272 +
                 (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
                 C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                    C1106) *
                   C48967 * C49267) *
                  C552 +
              (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
                (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
                (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
                 (C113 * C1302 + C48995 * C1309) * C1111 +
                 (C113 * C1310 + C48995 * C1314) * C49272) *
                    C49259) *
                   C48967 * C49267 -
               ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
                (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
                (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
                   C48967 * C550) *
                  C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C48967 * C550 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C48967 * C49267) *
              C552 +
          ((((C2782 + C2781 + C2780) * C114 +
             (C2779 + C2778 + C2777) * C48978) *
                C1106 +
            ((C2776 + C2775 + C2774) * C114 +
             (C2773 + C2772 + C2771) * C48978) *
                C1107 +
            ((C2532 * C273 + C49308 * C281 + C2533 * C725 + C49297 * C733 +
              C2534 * C2742 + C49275 * C2743) *
                 C114 +
             (C2532 * C280 + C49308 * C291 + C2533 * C734 + C49297 * C740 +
              C2534 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C550 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C550 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C48967 * C550 -
           ((C2534 * C9859 + C49275 * C9862 + C2533 * C1973 + C49297 * C1978 +
             C2532 * C1307 + C49308 * C1313) *
                C49272 +
            (C2534 * C9856 + C49275 * C9858 + C2533 * C1969 + C49297 * C1972 +
             C2532 * C1301 + C49308 * C1308) *
                C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C2782 + C2781 + C2780) * C7967 + (C2779 + C2778 + C2777) * C7961 +
            (C10173 + C10174 + C10175) * C7968 +
            (C10176 + C10177 + C10178) * C7962 +
            (C2532 * C1300 + C49308 * C1306 + C2533 * C1970 + C49297 * C1974 +
             C2534 * C10120 + C49275 * C10121) *
                C7969 +
            (C2532 * C1305 + C49308 * C1312 + C2533 * C1975 + C49297 * C1979 +
             C2534 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C48967 * C550 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C48967 * C49267) *
              C552 +
          ((((C15443 + C15442 + C15441) * C114 +
             (C15440 + C15439 + C15438) * C48978) *
                C49304 +
            ((C15437 + C15436 + C15435) * C114 +
             (C15434 + C15433 + C15432) * C48978) *
                C49291 +
            ((C15197 * C273 + C15194 * C281 + C15198 * C725 + C15195 * C733 +
              C15199 * C2742 + C49275 * C2743) *
                 C114 +
             (C15197 * C280 + C15194 * C291 + C15198 * C734 + C15195 * C740 +
              C15199 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C48967 * C550 -
           ((C15199 * C9859 + C49275 * C9862 + C15198 * C1973 + C15195 * C1978 +
             C15197 * C1307 + C15194 * C1313) *
                C49272 +
            (C15199 * C9856 + C49275 * C9858 + C15198 * C1969 + C15195 * C1972 +
             C15197 * C1301 + C15194 * C1308) *
                C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C15443 + C15442 + C15441) * C1109 +
            (C15440 + C15439 + C15438) * C49307 +
            (C16734 + C16735 + C16736) * C1110 +
            (C16737 + C16738 + C16739) * C49295 +
            (C15197 * C1300 + C15194 * C1306 + C15198 * C1970 + C15195 * C1974 +
             C15199 * C10120 + C49275 * C10121) *
                C1111 +
            (C15197 * C1305 + C15194 * C1312 + C15198 * C1975 + C15195 * C1979 +
             C15199 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C48967 * C550 -
           ((C17818 * C11201 + C17813 * C11204 + C17817 * C3386 +
             C17812 * C3391 + C17816 * C2402 + C17811 * C2413 + C17815 * C728 +
             C17810 * C737 + C17814 * C286 + C17809 * C294) *
                C48978 +
            (C17818 * C11198 + C17813 * C11200 + C17817 * C3382 +
             C17812 * C3385 + C17816 * C2395 + C17811 * C2401 + C17815 * C722 +
             C17810 * C727 + C17814 * C276 + C17809 * C287) *
                C114) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C17814 * C275 + C17809 * C285 + C17815 * C723 + C17810 * C729 +
             C17816 * C2397 + C17811 * C2405 + C17817 * C3383 + C17812 * C3387 +
             C17818 * C17901 + C17813 * C17902) *
                C114 +
            (C17814 * C284 + C17809 * C293 + C17815 * C730 + C17810 * C738 +
             C17816 * C2406 + C17811 * C2415 + C17817 * C3388 + C17812 * C3392 +
             C17818 * C17903 + C17813 * C17904) *
                C48978) *
               C48883 * C48967 * C49267 -
           ((C17818 * C3802 + C17813 * C3806 + C17817 * C2934 + C17812 * C2941 +
             C17816 * C981 + C17811 * C989 + C17815 * C424 + C17810 * C433 +
             C17814 * C125 + C17809 * C137) *
                C48978 +
            (C17818 * C3797 + C17813 * C3801 + C17817 * C2929 + C17812 * C2935 +
             C17816 * C974 + C17811 * C980 + C17815 * C415 + C17810 * C425 +
             C17814 * C116 + C17809 * C124) *
                C114) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C114 +
                (C113 * C123 + C48995 * C136) * C48978) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C48967 * C616 -
              ((C321 + C322) * C107 + (C323 + C324) * C106 +
               (C325 + C326) * C105 + (C327 + C328) * C104 +
               ((C113 * C286 + C48995 * C294) * C48978 +
                (C113 * C276 + C48995 * C287) * C114) *
                   C103) *
                  C48967 * C617 +
              (((C113 * C620 + C48995 * C625) * C114 +
                (C113 * C626 + C48995 * C635) * C48978) *
                   C103 +
               ((C113 * C621 + C48995 * C627) * C114 +
                (C113 * C628 + C48995 * C636) * C48978) *
                   C104 +
               ((C113 * C622 + C48995 * C629) * C114 +
                (C113 * C630 + C48995 * C637) * C48978) *
                   C105 +
               ((C113 * C623 + C48995 * C631) * C114 +
                (C113 * C632 + C48995 * C638) * C48978) *
                   C106 +
               ((C113 * C624 + C48995 * C633) * C114 +
                (C113 * C634 + C48995 * C639) * C48978) *
                   C107) *
                  C48967 * C618) *
             C48916 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C1109 +
                (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                   C1106 +
               (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
               C1153 * C49259) *
                  C48967 * C616 -
              ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
               (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
               (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 +
                C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                   C1106) *
                  C48967 * C617 +
              ((C1342 * C1109 + C1343 * C49307 + C1823 * C1110 +
                C1822 * C49295 + (C113 * C1805 + C48995 * C1808) * C1111 +
                (C113 * C1809 + C48995 * C1814) * C49272) *
                   C1106 +
               (C1137 * C1109 + C1138 * C49307 + C1347 * C1110 +
                C1346 * C49295 + (C113 * C1806 + C48995 * C1810) * C1111 +
                (C113 * C1811 + C48995 * C1815) * C49272) *
                   C1107 +
               (C1140 * C1109 + C1141 * C49307 + C1345 * C1110 +
                C1344 * C49295 + (C113 * C1807 + C48995 * C1812) * C1111 +
                (C113 * C1813 + C48995 * C1816) * C49272) *
                   C49259) *
                  C48967 * C618) *
             C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C48967 * C616 -
          (((C2771 + C2772 + C2773) * C48978 + (C2774 + C2775 + C2776) * C114) *
               C49259 +
           ((C2777 + C2778 + C2779) * C48978 + (C2780 + C2781 + C2782) * C114) *
               C1107 +
           ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
             C2532 * C286 + C49308 * C294) *
                C48978 +
            (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
             C2532 * C276 + C49308 * C287) *
                C114) *
               C1106) *
              C48967 * C617 +
          (((C2532 * C620 + C49308 * C625 + C2533 * C1499 + C49297 * C1506 +
             C2534 * C2396 + C49275 * C2403) *
                C114 +
            (C2532 * C626 + C49308 * C635 + C2533 * C1505 + C49297 * C1511 +
             C2534 * C2404 + C49275 * C2414) *
                C48978) *
               C1106 +
           ((C2532 * C621 + C49308 * C627 + C2533 * C1498 + C49297 * C1504 +
             C2534 * C2398 + C49275 * C2407) *
                C114 +
            (C2532 * C628 + C49308 * C636 + C2533 * C1503 + C49297 * C1510 +
             C2534 * C2408 + C49275 * C2416) *
                C48978) *
               C1107 +
           ((C2532 * C622 + C49308 * C629 + C2533 * C1497 + C49297 * C1502 +
             C2534 * C2400 + C49275 * C2411) *
                C114 +
            (C2532 * C630 + C49308 * C637 + C2533 * C1501 + C49297 * C1509 +
             C2534 * C2412 + C49275 * C2418) *
                C48978) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C616 -
          ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
           (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
           (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
            C1341 * C7961 + C1340 * C7967) *
               C49304) *
              C48967 * C617 +
          ((C1342 * C7967 + C1343 * C7961 + C1823 * C7968 + C1822 * C7962 +
            (C113 * C1805 + C48995 * C1808) * C7969 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C49304 +
           (C1137 * C7967 + C1138 * C7961 + C1347 * C7968 + C1346 * C7962 +
            (C113 * C1806 + C48995 * C1810) * C7969 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C49291 +
           (C1140 * C7967 + C1141 * C7961 + C1345 * C7968 + C1344 * C7962 +
            (C113 * C1807 + C48995 * C1812) * C7969 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C48967 * C616 -
          (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
           C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
           C1341 * C9175 + C1340 * C9181) *
              C48883 * C48967 * C617 +
          (C1342 * C9181 + C1343 * C9175 + C1823 * C9182 + C1822 * C9176 +
           C9285 * C9183 + C9286 * C9177 + C9532 * C9184 + C9531 * C9178 +
           (C113 * C9522 + C48995 * C9523) * C9185 +
           (C113 * C9524 + C48995 * C9525) * C9179) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C10161 + C10162 + C10163) * C7968 +
           (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
           C10604 * C49272) *
              C48883 * C48967 * C616 -
          ((C10605 + C10606 + C10607) * C49272 +
           (C10608 + C10609 + C10610) * C7969 +
           (C10172 + C10171 + C10170) * C7962 +
           (C10169 + C10168 + C10167) * C7968 +
           (C10166 + C10165 + C10164) * C7961 +
           (C10163 + C10162 + C10161) * C7967) *
              C48883 * C48967 * C617 +
          (C10603 * C7967 + C10604 * C7961 +
           (C10610 + C10609 + C10608) * C7968 +
           (C10607 + C10606 + C10605) * C7962 +
           (C2532 * C1805 + C49308 * C1808 + C2533 * C9370 + C49297 * C9373 +
            C2534 * C9857 + C49275 * C9860) *
               C7969 +
           (C2532 * C1809 + C49308 * C1814 + C2533 * C9372 + C49297 * C9376 +
            C2534 * C9861 + C49275 * C9863) *
               C49272) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C48967 * C616 -
          (((C15432 + C15433 + C15434) * C48978 +
            (C15435 + C15436 + C15437) * C114) *
               C49259 +
           ((C15438 + C15439 + C15440) * C48978 +
            (C15441 + C15442 + C15443) * C114) *
               C49291 +
           ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
             C15197 * C286 + C15194 * C294) *
                C48978 +
            (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
             C15197 * C276 + C15194 * C287) *
                C114) *
               C49304) *
              C48967 * C617 +
          (((C15197 * C620 + C15194 * C625 + C15198 * C1499 + C15195 * C1506 +
             C15199 * C2396 + C49275 * C2403) *
                C114 +
            (C15197 * C626 + C15194 * C635 + C15198 * C1505 + C15195 * C1511 +
             C15199 * C2404 + C49275 * C2414) *
                C48978) *
               C49304 +
           ((C15197 * C621 + C15194 * C627 + C15198 * C1498 + C15195 * C1504 +
             C15199 * C2398 + C49275 * C2407) *
                C114 +
            (C15197 * C628 + C15194 * C636 + C15198 * C1503 + C15195 * C1510 +
             C15199 * C2408 + C49275 * C2416) *
                C48978) *
               C49291 +
           ((C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
             C15199 * C2400 + C49275 * C2411) *
                C114 +
            (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
             C15199 * C2412 + C49275 * C2418) *
                C48978) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C16722 + C16723 + C16724) * C1110 +
           (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
           C17157 * C49272) *
              C48883 * C48967 * C616 -
          ((C17158 + C17159 + C17160) * C49272 +
           (C17161 + C17162 + C17163) * C1111 +
           (C16733 + C16732 + C16731) * C49295 +
           (C16730 + C16729 + C16728) * C1110 +
           (C16727 + C16726 + C16725) * C49307 +
           (C16724 + C16723 + C16722) * C1109) *
              C48883 * C48967 * C617 +
          (C17156 * C1109 + C17157 * C49307 +
           (C17163 + C17162 + C17161) * C1110 +
           (C17160 + C17159 + C17158) * C49295 +
           (C15197 * C1805 + C15194 * C1808 + C15198 * C9370 + C15195 * C9373 +
            C15199 * C9857 + C49275 * C9860) *
               C1111 +
           (C15197 * C1809 + C15194 * C1814 + C15198 * C9372 + C15195 * C9376 +
            C15199 * C9861 + C49275 * C9863) *
               C49272) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
            C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
            C17818 * C3796 + C17813 * C3799) *
               C114 +
           (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
            C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
            C17818 * C3800 + C17813 * C3805) *
               C48978) *
              C48883 * C48967 * C616 -
          ((C17818 * C11201 + C17813 * C11204 + C17817 * C3386 +
            C17812 * C3391 + C17816 * C2402 + C17811 * C2413 + C17815 * C728 +
            C17810 * C737 + C17814 * C286 + C17809 * C294) *
               C48978 +
           (C17818 * C11198 + C17813 * C11200 + C17817 * C3382 +
            C17812 * C3385 + C17816 * C2395 + C17811 * C2401 + C17815 * C722 +
            C17810 * C727 + C17814 * C276 + C17809 * C287) *
               C114) *
              C48883 * C48967 * C617 +
          ((C17814 * C620 + C17809 * C625 + C17815 * C1499 + C17810 * C1506 +
            C17816 * C2396 + C17811 * C2403 + C17817 * C10324 +
            C17812 * C10327 + C17818 * C11199 + C17813 * C11202) *
               C114 +
           (C17814 * C626 + C17809 * C635 + C17815 * C1505 + C17810 * C1511 +
            C17816 * C2404 + C17811 * C2414 + C17817 * C10326 +
            C17812 * C10330 + C17818 * C11203 + C17813 * C11205) *
               C48978) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C410 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C48995 * C434) * C48978 +
                 (C113 * C416 + C48995 * C427) * C114) *
                    C103) *
                   C49269) *
                  C550 +
              ((((C113 * C722 + C48995 * C727) * C114 +
                 (C113 * C728 + C48995 * C737) * C48978) *
                    C103 +
                ((C113 * C723 + C48995 * C729) * C114 +
                 (C113 * C730 + C48995 * C738) * C48978) *
                    C104 +
                ((C113 * C724 + C48995 * C731) * C114 +
                 (C113 * C732 + C48995 * C739) * C48978) *
                    C105 +
                ((C113 * C725 + C48995 * C733) * C114 +
                 (C113 * C734 + C48995 * C740) * C48978) *
                    C106 +
                ((C113 * C726 + C48995 * C735) * C114 +
                 (C113 * C736 + C48995 * C741) * C48978) *
                    C107) *
                   C49269 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C48995 * C294) * C48978 +
                 (C113 * C276 + C48995 * C287) * C114) *
                    C103) *
                   C410) *
                  C49267) *
             C48916 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C410 -
               ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
                (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
                (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 +
                 C1993 * C1110 + (C113 * C426 + C48995 * C434) * C49307 +
                 (C113 * C416 + C48995 * C427) * C1109) *
                    C1106) *
                   C49269) *
                  C550 +
              (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 +
                 C1990 * C49295 + (C113 * C1969 + C48995 * C1972) * C1111 +
                 (C113 * C1973 + C48995 * C1978) * C49272) *
                    C1106 +
                (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 +
                 C1538 * C49295 + (C113 * C1970 + C48995 * C1974) * C1111 +
                 (C113 * C1975 + C48995 * C1979) * C49272) *
                    C1107 +
                (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 +
                 C1534 * C49295 + (C113 * C1971 + C48995 * C1976) * C1111 +
                 (C113 * C1977 + C48995 * C1980) * C49272) *
                    C49259) *
                   C49269 -
               ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
                (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
                (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 +
                 C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                    C1106) *
                   C410) *
                  C49267) *
             C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C410 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C550 +
          ((((C2532 * C722 + C49308 * C727 + C2533 * C2395 + C49297 * C2401 +
              C2534 * C3382 + C49275 * C3385) *
                 C114 +
             (C2532 * C728 + C49308 * C737 + C2533 * C2402 + C49297 * C2413 +
              C2534 * C3386 + C49275 * C3391) *
                 C48978) *
                C1106 +
            ((C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
              C2534 * C3383 + C49275 * C3387) *
                 C114 +
             (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
              C2534 * C3388 + C49275 * C3392) *
                 C48978) *
                C1107 +
            ((C2532 * C724 + C49308 * C731 + C2533 * C2399 + C49297 * C2409 +
              C2534 * C3384 + C49275 * C3389) *
                 C114 +
             (C2532 * C732 + C49308 * C739 + C2533 * C2410 + C49297 * C2417 +
              C2534 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C550 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C550 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C410 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C550 +
          (((C10796 + C10795 + C10794) * C7967 +
            (C10793 + C10792 + C10791) * C7961 +
            (C10790 + C10789 + C10788) * C7968 +
            (C10787 + C10786 + C10785) * C7962 +
            (C2532 * C1969 + C49308 * C1972 + C2533 * C9856 + C49297 * C9858 +
             C2534 * C10756 + C49275 * C10757) *
                C7969 +
            (C2532 * C1973 + C49308 * C1978 + C2533 * C9859 + C49297 * C9862 +
             C2534 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C10605 + C10606 + C10607) * C49272 +
            (C10608 + C10609 + C10610) * C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C410 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C550 +
          ((((C15197 * C722 + C15194 * C727 + C15198 * C2395 + C15195 * C2401 +
              C15199 * C3382 + C49275 * C3385) *
                 C114 +
             (C15197 * C728 + C15194 * C737 + C15198 * C2402 + C15195 * C2413 +
              C15199 * C3386 + C49275 * C3391) *
                 C48978) *
                C49304 +
            ((C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
              C15199 * C3383 + C49275 * C3387) *
                 C114 +
             (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
              C15199 * C3388 + C49275 * C3392) *
                 C48978) *
                C49291 +
            ((C15197 * C724 + C15194 * C731 + C15198 * C2399 + C15195 * C2409 +
              C15199 * C3384 + C49275 * C3389) *
                 C114 +
             (C15197 * C732 + C15194 * C739 + C15198 * C2410 + C15195 * C2417 +
              C15199 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C410 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C550 +
          (((C17345 + C17344 + C17343) * C1109 +
            (C17342 + C17341 + C17340) * C49307 +
            (C17339 + C17338 + C17337) * C1110 +
            (C17336 + C17335 + C17334) * C49295 +
            (C15197 * C1969 + C15194 * C1972 + C15198 * C9856 + C15195 * C9858 +
             C15199 * C10756 + C49275 * C10757) *
                C1111 +
            (C15197 * C1973 + C15194 * C1978 + C15198 * C9859 + C15195 * C9862 +
             C15199 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C17158 + C17159 + C17160) * C49272 +
            (C17161 + C17162 + C17163) * C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C410 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3800 +
             C17812 * C3805 + C17816 * C2936 + C17811 * C2942 + C17815 * C979 +
             C17810 * C988 + C17814 * C426 + C17809 * C434) *
                C48978 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3796 +
             C17812 * C3799 + C17816 * C2930 + C17811 * C2937 + C17815 * C973 +
             C17810 * C978 + C17814 * C416 + C17809 * C427) *
                C114) *
               C48883 * C49269) *
              C550 +
          (((C17814 * C722 + C17809 * C727 + C17815 * C2395 + C17810 * C2401 +
             C17816 * C3382 + C17811 * C3385 + C17817 * C11198 +
             C17812 * C11200 + C17818 * C18221 + C17813 * C18222) *
                C114 +
            (C17814 * C728 + C17809 * C737 + C17815 * C2402 + C17810 * C2413 +
             C17816 * C3386 + C17811 * C3391 + C17817 * C11201 +
             C17812 * C11204 + C17818 * C18223 + C17813 * C18224) *
                C48978) *
               C48883 * C49269 -
           ((C17818 * C11201 + C17813 * C11204 + C17817 * C3386 +
             C17812 * C3391 + C17816 * C2402 + C17811 * C2413 + C17815 * C728 +
             C17810 * C737 + C17814 * C286 + C17809 * C294) *
                C48978 +
            (C17818 * C11198 + C17813 * C11200 + C17817 * C3382 +
             C17812 * C3385 + C17816 * C2395 + C17811 * C2401 + C17815 * C722 +
             C17810 * C727 + C17814 * C276 + C17809 * C287) *
                C114) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C824 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C48995 * C434) * C48978 +
                 (C113 * C416 + C48995 * C427) * C114) *
                    C103) *
                   C49269) *
                  C48950 * C552 +
              (((C468 + C467) * C103 + (C466 + C465) * C104 +
                (C464 + C463) * C105 + (C462 + C461) * C106 +
                ((C113 * C417 + C48995 * C428) * C114 +
                 (C113 * C429 + C48995 * C435) * C48978) *
                    C107) *
                   C49269 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C824) *
                  C48950 * C49265) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C824 -
               ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
                (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
                (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 +
                 C1993 * C1110 + (C113 * C426 + C48995 * C434) * C49307 +
                 (C113 * C416 + C48995 * C427) * C1109) *
                    C1106) *
                   C49269) *
                  C48950 * C552 +
              (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
                (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
                (C456 * C1109 + C455 * C49307 +
                 (C113 * C725 + C48995 * C733) * C1110 +
                 (C113 * C734 + C48995 * C740) * C49295 +
                 (C113 * C1500 + C48995 * C1507) * C1111 +
                 (C113 * C1508 + C48995 * C1512) * C49272) *
                    C49259) *
                   C49269 -
               ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
                (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
                (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
                   C824) *
                  C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C824 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C48950 * C552 +
          ((((C2980 + C2979 + C2978) * C114 +
             (C2977 + C2976 + C2975) * C48978) *
                C1106 +
            ((C2974 + C2973 + C2972) * C114 +
             (C2971 + C2970 + C2969) * C48978) *
                C1107 +
            ((C2532 * C413 + C49308 * C421 + C2533 * C976 + C49297 * C984 +
              C2534 * C2931 + C49275 * C2938) *
                 C114 +
             (C2532 * C420 + C49308 * C431 + C2533 * C985 + C49297 * C991 +
              C2534 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C552 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C552 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C824 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C2980 + C2979 + C2978) * C7967 + (C2977 + C2976 + C2975) * C7961 +
            (C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
             C2534 * C3383 + C49275 * C3387) *
                C7968 +
            (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
             C2534 * C3388 + C49275 * C3392) *
                C7962 +
            (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 + C49297 * C2407 +
             C2534 * C10325 + C49275 * C10328) *
                C7969 +
            (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 + C49297 * C2416 +
             C2534 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C824 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C48950 * C552 +
          ((((C15625 + C15624 + C15623) * C114 +
             (C15622 + C15621 + C15620) * C48978) *
                C49304 +
            ((C15619 + C15618 + C15617) * C114 +
             (C15616 + C15615 + C15614) * C48978) *
                C49291 +
            ((C15197 * C413 + C15194 * C421 + C15198 * C976 + C15195 * C984 +
              C15199 * C2931 + C49275 * C2938) *
                 C114 +
             (C15197 * C420 + C15194 * C431 + C15198 * C985 + C15195 * C991 +
              C15199 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C824 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C15625 + C15624 + C15623) * C1109 +
            (C15622 + C15621 + C15620) * C49307 +
            (C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
             C15199 * C3383 + C49275 * C3387) *
                C1110 +
            (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
             C15199 * C3388 + C49275 * C3392) *
                C49295 +
            (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 + C15195 * C2407 +
             C15199 * C10325 + C49275 * C10328) *
                C1111 +
            (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 + C15195 * C2416 +
             C15199 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C824 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3800 +
             C17812 * C3805 + C17816 * C2936 + C17811 * C2942 + C17815 * C979 +
             C17810 * C988 + C17814 * C426 + C17809 * C434) *
                C48978 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3796 +
             C17812 * C3799 + C17816 * C2930 + C17811 * C2937 + C17815 * C973 +
             C17810 * C978 + C17814 * C416 + C17809 * C427) *
                C114) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C17814 * C415 + C17809 * C425 + C17815 * C974 + C17810 * C980 +
             C17816 * C2929 + C17811 * C2935 + C17817 * C3797 + C17812 * C3801 +
             C17818 * C17988 + C17813 * C17991) *
                C114 +
            (C17814 * C424 + C17809 * C433 + C17815 * C981 + C17810 * C989 +
             C17816 * C2934 + C17811 * C2941 + C17817 * C3802 + C17812 * C3806 +
             C17818 * C17992 + C17813 * C17994) *
                C48978) *
               C48883 * C49269 -
           ((C17818 * C3802 + C17813 * C3806 + C17817 * C2934 + C17812 * C2941 +
             C17816 * C981 + C17811 * C989 + C17815 * C424 + C17810 * C433 +
             C17814 * C125 + C17809 * C137) *
                C48978 +
            (C17818 * C3797 + C17813 * C3801 + C17817 * C2929 + C17812 * C2935 +
             C17816 * C974 + C17811 * C980 + C17815 * C415 + C17810 * C425 +
             C17814 * C116 + C17809 * C124) *
                C114) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C114 +
                 (C113 * C123 + C48995 * C136) * C48978) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C824 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C48995 * C434) * C48978 +
                 (C113 * C416 + C48995 * C427) * C114) *
                    C103) *
                   C49269) *
                  C268 +
              ((((C113 * C722 + C48995 * C727) * C114 +
                 (C113 * C728 + C48995 * C737) * C48978) *
                    C103 +
                ((C113 * C723 + C48995 * C729) * C114 +
                 (C113 * C730 + C48995 * C738) * C48978) *
                    C104 +
                ((C113 * C724 + C48995 * C731) * C114 +
                 (C113 * C732 + C48995 * C739) * C48978) *
                    C105 +
                ((C113 * C725 + C48995 * C733) * C114 +
                 (C113 * C734 + C48995 * C740) * C48978) *
                    C106 +
                ((C113 * C726 + C48995 * C735) * C114 +
                 (C113 * C736 + C48995 * C741) * C48978) *
                    C107) *
                   C49269 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C48995 * C294) * C48978 +
                 (C113 * C276 + C48995 * C287) * C114) *
                    C103) *
                   C824) *
                  C49267) *
             C48916 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48995 * C122) * C1109 +
                 (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                 C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                    C1106 +
                (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
                C1153 * C49259) *
                   C824 -
               ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
                (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
                (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 +
                 C1993 * C1110 + (C113 * C426 + C48995 * C434) * C49307 +
                 (C113 * C416 + C48995 * C427) * C1109) *
                    C1106) *
                   C49269) *
                  C268 +
              (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 +
                 C1990 * C49295 + (C113 * C1969 + C48995 * C1972) * C1111 +
                 (C113 * C1973 + C48995 * C1978) * C49272) *
                    C1106 +
                (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 +
                 C1538 * C49295 + (C113 * C1970 + C48995 * C1974) * C1111 +
                 (C113 * C1975 + C48995 * C1979) * C49272) *
                    C1107 +
                (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 +
                 C1534 * C49295 + (C113 * C1971 + C48995 * C1976) * C1111 +
                 (C113 * C1977 + C48995 * C1980) * C49272) *
                    C49259) *
                   C49269 -
               ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
                (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
                (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 +
                 C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                    C1106) *
                   C824) *
                  C49267) *
             C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C824 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C268 +
          ((((C2532 * C722 + C49308 * C727 + C2533 * C2395 + C49297 * C2401 +
              C2534 * C3382 + C49275 * C3385) *
                 C114 +
             (C2532 * C728 + C49308 * C737 + C2533 * C2402 + C49297 * C2413 +
              C2534 * C3386 + C49275 * C3391) *
                 C48978) *
                C1106 +
            ((C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
              C2534 * C3383 + C49275 * C3387) *
                 C114 +
             (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
              C2534 * C3388 + C49275 * C3392) *
                 C48978) *
                C1107 +
            ((C2532 * C724 + C49308 * C731 + C2533 * C2399 + C49297 * C2409 +
              C2534 * C3384 + C49275 * C3389) *
                 C114 +
             (C2532 * C732 + C49308 * C739 + C2533 * C2410 + C49297 * C2417 +
              C2534 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C268 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C268 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C824 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C268 +
          (((C10796 + C10795 + C10794) * C7967 +
            (C10793 + C10792 + C10791) * C7961 +
            (C10790 + C10789 + C10788) * C7968 +
            (C10787 + C10786 + C10785) * C7962 +
            (C2532 * C1969 + C49308 * C1972 + C2533 * C9856 + C49297 * C9858 +
             C2534 * C10756 + C49275 * C10757) *
                C7969 +
            (C2532 * C1973 + C49308 * C1978 + C2533 * C9859 + C49297 * C9862 +
             C2534 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C10605 + C10606 + C10607) * C49272 +
            (C10608 + C10609 + C10610) * C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C824 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C268 +
          ((((C15197 * C722 + C15194 * C727 + C15198 * C2395 + C15195 * C2401 +
              C15199 * C3382 + C49275 * C3385) *
                 C114 +
             (C15197 * C728 + C15194 * C737 + C15198 * C2402 + C15195 * C2413 +
              C15199 * C3386 + C49275 * C3391) *
                 C48978) *
                C49304 +
            ((C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
              C15199 * C3383 + C49275 * C3387) *
                 C114 +
             (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
              C15199 * C3388 + C49275 * C3392) *
                 C48978) *
                C49291 +
            ((C15197 * C724 + C15194 * C731 + C15198 * C2399 + C15195 * C2409 +
              C15199 * C3384 + C49275 * C3389) *
                 C114 +
             (C15197 * C732 + C15194 * C739 + C15198 * C2410 + C15195 * C2417 +
              C15199 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C824 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C268 +
          (((C17345 + C17344 + C17343) * C1109 +
            (C17342 + C17341 + C17340) * C49307 +
            (C17339 + C17338 + C17337) * C1110 +
            (C17336 + C17335 + C17334) * C49295 +
            (C15197 * C1969 + C15194 * C1972 + C15198 * C9856 + C15195 * C9858 +
             C15199 * C10756 + C49275 * C10757) *
                C1111 +
            (C15197 * C1973 + C15194 * C1978 + C15198 * C9859 + C15195 * C9862 +
             C15199 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C17158 + C17159 + C17160) * C49272 +
            (C17161 + C17162 + C17163) * C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
             C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
             C17818 * C3796 + C17813 * C3799) *
                C114 +
            (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
             C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
             C17818 * C3800 + C17813 * C3805) *
                C48978) *
               C48883 * C824 -
           ((C17818 * C17989 + C17813 * C17993 + C17817 * C3800 +
             C17812 * C3805 + C17816 * C2936 + C17811 * C2942 + C17815 * C979 +
             C17810 * C988 + C17814 * C426 + C17809 * C434) *
                C48978 +
            (C17818 * C17987 + C17813 * C17990 + C17817 * C3796 +
             C17812 * C3799 + C17816 * C2930 + C17811 * C2937 + C17815 * C973 +
             C17810 * C978 + C17814 * C416 + C17809 * C427) *
                C114) *
               C48883 * C49269) *
              C268 +
          (((C17814 * C722 + C17809 * C727 + C17815 * C2395 + C17810 * C2401 +
             C17816 * C3382 + C17811 * C3385 + C17817 * C11198 +
             C17812 * C11200 + C17818 * C18221 + C17813 * C18222) *
                C114 +
            (C17814 * C728 + C17809 * C737 + C17815 * C2402 + C17810 * C2413 +
             C17816 * C3386 + C17811 * C3391 + C17817 * C11201 +
             C17812 * C11204 + C17818 * C18223 + C17813 * C18224) *
                C48978) *
               C48883 * C49269 -
           ((C17818 * C11201 + C17813 * C11204 + C17817 * C3386 +
             C17812 * C3391 + C17816 * C2402 + C17811 * C2413 + C17815 * C728 +
             C17810 * C737 + C17814 * C286 + C17809 * C294) *
                C48978 +
            (C17818 * C11198 + C17813 * C11200 + C17817 * C3382 +
             C17812 * C3385 + C17816 * C2395 + C17811 * C2401 + C17815 * C722 +
             C17810 * C727 + C17814 * C276 + C17809 * C287) *
                C114) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C114 +
                (C113 * C123 + C48995 * C136) * C48978) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C970 -
              ((C461 + C462) * C107 + (C463 + C464) * C106 +
               (C465 + C466) * C105 + (C467 + C468) * C104 +
               ((C113 * C426 + C48995 * C434) * C48978 +
                (C113 * C416 + C48995 * C427) * C114) *
                   C103) *
                  C971 +
              (((C113 * C973 + C48995 * C978) * C114 +
                (C113 * C979 + C48995 * C988) * C48978) *
                   C103 +
               ((C113 * C974 + C48995 * C980) * C114 +
                (C113 * C981 + C48995 * C989) * C48978) *
                   C104 +
               ((C113 * C975 + C48995 * C982) * C114 +
                (C113 * C983 + C48995 * C990) * C48978) *
                   C105 +
               ((C113 * C976 + C48995 * C984) * C114 +
                (C113 * C985 + C48995 * C991) * C48978) *
                   C106 +
               ((C113 * C977 + C48995 * C986) * C114 +
                (C113 * C987 + C48995 * C992) * C48978) *
                   C107) *
                  C972) *
             C48950 * C48916 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48995 * C122) * C1109 +
                (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
                C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                   C1106 +
               (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
               C1153 * C49259) *
                  C970 -
              ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
               (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
               (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 +
                C1993 * C1110 + (C113 * C426 + C48995 * C434) * C49307 +
                (C113 * C416 + C48995 * C427) * C1109) *
                   C1106) *
                  C971 +
              (((C113 * C973 + C48995 * C978) * C1109 +
                (C113 * C979 + C48995 * C988) * C49307 +
                (C113 * C2395 + C48995 * C2401) * C1110 +
                (C113 * C2402 + C48995 * C2413) * C49295 +
                (C113 * C2396 + C48995 * C2403) * C1111 +
                (C113 * C2404 + C48995 * C2414) * C49272) *
                   C1106 +
               ((C113 * C974 + C48995 * C980) * C1109 +
                (C113 * C981 + C48995 * C989) * C49307 +
                (C113 * C2397 + C48995 * C2405) * C1110 +
                (C113 * C2406 + C48995 * C2415) * C49295 +
                (C113 * C2398 + C48995 * C2407) * C1111 +
                (C113 * C2408 + C48995 * C2416) * C49272) *
                   C1107 +
               ((C113 * C975 + C48995 * C982) * C1109 +
                (C113 * C983 + C48995 * C990) * C49307 +
                (C113 * C2399 + C48995 * C2409) * C1110 +
                (C113 * C2410 + C48995 * C2417) * C49295 +
                (C113 * C2400 + C48995 * C2411) * C1111 +
                (C113 * C2412 + C48995 * C2418) * C49272) *
                   C49259) *
                  C972) *
             C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C970 -
          (((C2969 + C2970 + C2971) * C48978 + (C2972 + C2973 + C2974) * C114) *
               C49259 +
           ((C2975 + C2976 + C2977) * C48978 + (C2978 + C2979 + C2980) * C114) *
               C1107 +
           ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C48978 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C114) *
               C1106) *
              C971 +
          (((C2532 * C973 + C49308 * C978 + C2533 * C2930 + C49297 * C2937 +
             C2534 * C3796 + C49275 * C3799) *
                C114 +
            (C2532 * C979 + C49308 * C988 + C2533 * C2936 + C49297 * C2942 +
             C2534 * C3800 + C49275 * C3805) *
                C48978) *
               C1106 +
           ((C2532 * C974 + C49308 * C980 + C2533 * C2929 + C49297 * C2935 +
             C2534 * C3797 + C49275 * C3801) *
                C114 +
            (C2532 * C981 + C49308 * C989 + C2533 * C2934 + C49297 * C2941 +
             C2534 * C3802 + C49275 * C3806) *
                C48978) *
               C1107 +
           ((C2532 * C975 + C49308 * C982 + C2533 * C2928 + C49297 * C2933 +
             C2534 * C3798 + C49275 * C3803) *
                C114 +
            (C2532 * C983 + C49308 * C990 + C2533 * C2932 + C49297 * C2940 +
             C2534 * C3804 + C49275 * C3807) *
                C48978) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C970 -
          ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
           (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
           (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
            (C113 * C426 + C48995 * C434) * C7961 +
            (C113 * C416 + C48995 * C427) * C7967) *
               C49304) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C7967 +
            (C113 * C979 + C48995 * C988) * C7961 +
            (C113 * C2395 + C48995 * C2401) * C7968 +
            (C113 * C2402 + C48995 * C2413) * C7962 +
            (C113 * C2396 + C48995 * C2403) * C7969 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C49304 +
           ((C113 * C974 + C48995 * C980) * C7967 +
            (C113 * C981 + C48995 * C989) * C7961 +
            (C113 * C2397 + C48995 * C2405) * C7968 +
            (C113 * C2406 + C48995 * C2415) * C7962 +
            (C113 * C2398 + C48995 * C2407) * C7969 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C49291 +
           ((C113 * C975 + C48995 * C982) * C7967 +
            (C113 * C983 + C48995 * C990) * C7961 +
            (C113 * C2399 + C48995 * C2409) * C7968 +
            (C113 * C2410 + C48995 * C2417) * C7962 +
            (C113 * C2400 + C48995 * C2411) * C7969 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C970 -
          (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
           C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
           (C113 * C426 + C48995 * C434) * C9175 +
           (C113 * C416 + C48995 * C427) * C9181) *
              C48883 * C971 +
          ((C113 * C973 + C48995 * C978) * C9181 +
           (C113 * C979 + C48995 * C988) * C9175 +
           (C113 * C2395 + C48995 * C2401) * C9182 +
           (C113 * C2402 + C48995 * C2413) * C9176 +
           (C113 * C2396 + C48995 * C2403) * C9183 +
           (C113 * C2404 + C48995 * C2414) * C9177 +
           (C113 * C9856 + C48995 * C9858) * C9184 +
           (C113 * C9859 + C48995 * C9862) * C9178 +
           (C113 * C9857 + C48995 * C9860) * C9185 +
           (C113 * C9861 + C48995 * C9863) * C9179) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C10161 + C10162 + C10163) * C7968 +
           (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
           C10604 * C49272) *
              C48883 * C970 -
          ((C10785 + C10786 + C10787) * C49272 +
           (C10788 + C10789 + C10790) * C7969 +
           (C10791 + C10792 + C10793) * C7962 +
           (C10794 + C10795 + C10796) * C7968 +
           (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
            C2532 * C426 + C49308 * C434) *
               C7961 +
           (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
            C2532 * C416 + C49308 * C427) *
               C7967) *
              C48883 * C971 +
          ((C2532 * C973 + C49308 * C978 + C2533 * C2930 + C49297 * C2937 +
            C2534 * C3796 + C49275 * C3799) *
               C7967 +
           (C2532 * C979 + C49308 * C988 + C2533 * C2936 + C49297 * C2942 +
            C2534 * C3800 + C49275 * C3805) *
               C7961 +
           (C2532 * C2395 + C49308 * C2401 + C2533 * C3382 + C49297 * C3385 +
            C2534 * C11198 + C49275 * C11200) *
               C7968 +
           (C2532 * C2402 + C49308 * C2413 + C2533 * C3386 + C49297 * C3391 +
            C2534 * C11201 + C49275 * C11204) *
               C7962 +
           (C2532 * C2396 + C49308 * C2403 + C2533 * C10324 + C49297 * C10327 +
            C2534 * C11199 + C49275 * C11202) *
               C7969 +
           (C2532 * C2404 + C49308 * C2414 + C2533 * C10326 + C49297 * C10330 +
            C2534 * C11203 + C49275 * C11205) *
               C49272) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C970 -
          (((C15614 + C15615 + C15616) * C48978 +
            (C15617 + C15618 + C15619) * C114) *
               C49259 +
           ((C15620 + C15621 + C15622) * C48978 +
            (C15623 + C15624 + C15625) * C114) *
               C49291 +
           ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C48978 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C114) *
               C49304) *
              C971 +
          (((C15197 * C973 + C15194 * C978 + C15198 * C2930 + C15195 * C2937 +
             C15199 * C3796 + C49275 * C3799) *
                C114 +
            (C15197 * C979 + C15194 * C988 + C15198 * C2936 + C15195 * C2942 +
             C15199 * C3800 + C49275 * C3805) *
                C48978) *
               C49304 +
           ((C15197 * C974 + C15194 * C980 + C15198 * C2929 + C15195 * C2935 +
             C15199 * C3797 + C49275 * C3801) *
                C114 +
            (C15197 * C981 + C15194 * C989 + C15198 * C2934 + C15195 * C2941 +
             C15199 * C3802 + C49275 * C3806) *
                C48978) *
               C49291 +
           ((C15197 * C975 + C15194 * C982 + C15198 * C2928 + C15195 * C2933 +
             C15199 * C3798 + C49275 * C3803) *
                C114 +
            (C15197 * C983 + C15194 * C990 + C15198 * C2932 + C15195 * C2940 +
             C15199 * C3804 + C49275 * C3807) *
                C48978) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C16722 + C16723 + C16724) * C1110 +
           (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
           C17157 * C49272) *
              C48883 * C970 -
          ((C17334 + C17335 + C17336) * C49272 +
           (C17337 + C17338 + C17339) * C1111 +
           (C17340 + C17341 + C17342) * C49295 +
           (C17343 + C17344 + C17345) * C1110 +
           (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
            C15197 * C426 + C15194 * C434) *
               C49307 +
           (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
            C15197 * C416 + C15194 * C427) *
               C1109) *
              C48883 * C971 +
          ((C15197 * C973 + C15194 * C978 + C15198 * C2930 + C15195 * C2937 +
            C15199 * C3796 + C49275 * C3799) *
               C1109 +
           (C15197 * C979 + C15194 * C988 + C15198 * C2936 + C15195 * C2942 +
            C15199 * C3800 + C49275 * C3805) *
               C49307 +
           (C15197 * C2395 + C15194 * C2401 + C15198 * C3382 + C15195 * C3385 +
            C15199 * C11198 + C49275 * C11200) *
               C1110 +
           (C15197 * C2402 + C15194 * C2413 + C15198 * C3386 + C15195 * C3391 +
            C15199 * C11201 + C49275 * C11204) *
               C49295 +
           (C15197 * C2396 + C15194 * C2403 + C15198 * C10324 +
            C15195 * C10327 + C15199 * C11199 + C49275 * C11202) *
               C1111 +
           (C15197 * C2404 + C15194 * C2414 + C15198 * C10326 +
            C15195 * C10330 + C15199 * C11203 + C49275 * C11205) *
               C49272) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17814 * C115 + C17809 * C122 + C17815 * C416 + C17810 * C427 +
            C17816 * C973 + C17811 * C978 + C17817 * C2930 + C17812 * C2937 +
            C17818 * C3796 + C17813 * C3799) *
               C114 +
           (C17814 * C123 + C17809 * C136 + C17815 * C426 + C17810 * C434 +
            C17816 * C979 + C17811 * C988 + C17817 * C2936 + C17812 * C2942 +
            C17818 * C3800 + C17813 * C3805) *
               C48978) *
              C48883 * C970 -
          ((C17818 * C17989 + C17813 * C17993 + C17817 * C3800 +
            C17812 * C3805 + C17816 * C2936 + C17811 * C2942 + C17815 * C979 +
            C17810 * C988 + C17814 * C426 + C17809 * C434) *
               C48978 +
           (C17818 * C17987 + C17813 * C17990 + C17817 * C3796 +
            C17812 * C3799 + C17816 * C2930 + C17811 * C2937 + C17815 * C973 +
            C17810 * C978 + C17814 * C416 + C17809 * C427) *
               C114) *
              C48883 * C971 +
          ((C17814 * C973 + C17809 * C978 + C17815 * C2930 + C17810 * C2937 +
            C17816 * C3796 + C17811 * C3799 + C17817 * C17987 +
            C17812 * C17990 + C17818 * C18451 + C17813 * C18452) *
               C114 +
           (C17814 * C979 + C17809 * C988 + C17815 * C2936 + C17810 * C2942 +
            C17816 * C3800 + C17811 * C3805 + C17817 * C17989 +
            C17812 * C17993 + C17818 * C18453 + C17813 * C18454) *
               C48978) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
            (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + (C6541 + C6540) * C7969 +
            (C6539 + C6538) * C49272) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 + C6518 * C7962 +
            C6519 * C7968 + (C5084 + C5083) * C7961 + (C5082 + C5081) * C7967) *
               C48893 +
           ((C6538 + C6539) * C49272 + (C6540 + C6541) * C7969 + C6528 * C7962 +
            C6529 * C7968 + (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
               C49217) *
              C48967 * C48950 * C111 +
          ((C5093 * C7967 + C5094 * C7961 + C6299 * C7968 + C6300 * C7962 +
            (C6537 + C6536) * C7969 + (C6535 + C6534) * C49272) *
               C49217 +
           (C5095 * C7967 + C5096 * C7961 + (C5260 + C5259) * C7968 +
            (C5258 + C5257) * C7962 +
            (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                C7969 +
            (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                C49272) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C48967 * C48950 * C110 -
          (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
           ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
           ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
           ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
              C48967 * C48950 * C111 +
          (C5101 * C3908 + C5102 * C3909 +
           ((C5092 + C5091) * C114 + (C5090 + C5089) * C48978) * C3910 +
           ((C5042 * C120 + C49240 * C133 + C5043 * C417 + C49082 * C428) *
                C114 +
            (C5042 * C132 + C49240 * C141 + C5043 * C429 + C49082 * C435) *
                C48978) *
               C49276) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C114 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C48978) *
               C49217 +
           ((C20222 + C20223 + C20224 + C20225) * C114 +
            (C20226 + C20227 + C20228 + C20229) * C48978) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C20230 + C20231 + C20232 + C20233) * C48978 +
            (C20234 + C20235 + C20236 + C20237) * C114) *
               C48893 +
           ((C20229 + C20228 + C20227 + C20226) * C48978 +
            (C20225 + C20224 + C20223 + C20222) * C114) *
               C49217) *
              C48967 * C48950 * C111 +
          (((C20237 + C20236 + C20235 + C20234) * C114 +
            (C20233 + C20232 + C20231 + C20230) * C48978) *
               C49217 +
           ((C20185 * C118 + C20181 * C128 + C20186 * C413 + C20182 * C421 +
             C20187 * C976 + C20183 * C984 + C20188 * C2931 + C49288 * C2938) *
                C114 +
            (C20185 * C129 + C20181 * C139 + C20186 * C420 + C20182 * C431 +
             C20187 * C985 + C20183 * C991 + C20188 * C2939 + C49288 * C2943) *
                C48978) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C48967 * C268 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C5043 * C1973 + C49082 * C1978 + C5042 * C1307 + C49240 * C1313) *
                 C49272 +
             (C5043 * C1969 + C49082 * C1972 + C5042 * C1301 + C49240 * C1308) *
                 C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C7967 + C6509 * C7961 + C12669 * C7968 + C12670 * C7962 +
             (C12684 + C12683) * C7969 + (C12682 + C12681) * C49272) *
                C49217 +
            (C6299 * C7967 + C6300 * C7961 + (C6537 + C6536) * C7968 +
             (C6535 + C6534) * C7962 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C7969 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C48967 * C268 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C48967 * C49267) *
              C270 +
          ((((C5268 + C5267) * C114 + (C5266 + C5265) * C48978) * C3908 +
            ((C5264 + C5263) * C114 + (C5262 + C5261) * C48978) * C3909 +
            ((C5260 + C5259) * C114 + (C5258 + C5257) * C48978) * C3910 +
            ((C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                 C114 +
             (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C48967 * C268 -
           (((C20384 + C20385 + C20386 + C20387) * C48978 +
             (C20388 + C20389 + C20390 + C20391) * C114) *
                C48893 +
            ((C20188 * C3386 + C49288 * C3391 + C20187 * C2402 +
              C20183 * C2413 + C20186 * C728 + C20182 * C737 + C20185 * C286 +
              C20181 * C294) *
                 C48978 +
             (C20188 * C3382 + C49288 * C3385 + C20187 * C2395 +
              C20183 * C2401 + C20186 * C722 + C20182 * C727 + C20185 * C276 +
              C20181 * C287) *
                 C114) *
                C49217) *
               C48967 * C49267) *
              C270 +
          ((((C20391 + C20390 + C20389 + C20388) * C114 +
             (C20387 + C20386 + C20385 + C20384) * C48978) *
                C49217 +
            ((C20185 * C274 + C20181 * C283 + C20186 * C724 + C20182 * C731 +
              C20187 * C2399 + C20183 * C2409 + C20188 * C3384 +
              C49288 * C3389) *
                 C114 +
             (C20185 * C282 + C20181 * C292 + C20186 * C732 + C20182 * C739 +
              C20187 * C2410 + C20183 * C2417 + C20188 * C3390 +
              C49288 * C3393) *
                 C48978) *
                C48893) *
               C48967 * C49267 -
           (((C20230 + C20231 + C20232 + C20233) * C48978 +
             (C20234 + C20235 + C20236 + C20237) * C114) *
                C48893 +
            ((C20229 + C20228 + C20227 + C20226) * C48978 +
             (C20225 + C20224 + C20223 + C20222) * C114) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C5043 * C2404 + C49082 * C2414 + C5042 * C1505 + C49240 * C1511) *
                 C49272 +
             (C5043 * C2396 + C49082 * C2403 + C5042 * C1499 + C49240 * C1506) *
                 C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C7967 + (C5432 + C5431) * C7961 +
             (C6759 + C6758) * C7968 + (C6757 + C6756) * C7962 +
             (C12890 + C12889) * C7969 + (C12888 + C12887) * C49272) *
                C49217 +
            ((C5430 + C5429) * C7967 + (C5428 + C5427) * C7961 +
             (C6755 + C6754) * C7968 + (C6753 + C6752) * C7962 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C7969 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C410 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C114 + (C5432 + C5431) * C48978) * C3908 +
            ((C5430 + C5429) * C114 + (C5428 + C5427) * C48978) * C3909 +
            ((C5426 + C5425) * C114 + (C5424 + C5423) * C48978) * C3910 +
            ((C5042 * C412 + C49240 * C419 + C5043 * C977 + C49082 * C986) *
                 C114 +
             (C5042 * C418 + C49240 * C430 + C5043 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C410 -
           (((C20538 + C20539 + C20540 + C20541) * C48978 +
             (C20542 + C20543 + C20544 + C20545) * C114) *
                C48893 +
            ((C20188 * C3800 + C49288 * C3805 + C20187 * C2936 +
              C20183 * C2942 + C20186 * C979 + C20182 * C988 + C20185 * C426 +
              C20181 * C434) *
                 C48978 +
             (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 +
              C20183 * C2937 + C20186 * C973 + C20182 * C978 + C20185 * C416 +
              C20181 * C427) *
                 C114) *
                C49217) *
               C49269) *
              C48950 * C270 +
          ((((C20545 + C20544 + C20543 + C20542) * C114 +
             (C20541 + C20540 + C20539 + C20538) * C48978) *
                C49217 +
            ((C20185 * C414 + C20181 * C423 + C20186 * C975 + C20182 * C982 +
              C20187 * C2928 + C20183 * C2933 + C20188 * C3798 +
              C49288 * C3803) *
                 C114 +
             (C20185 * C422 + C20181 * C432 + C20186 * C983 + C20182 * C990 +
              C20187 * C2932 + C20183 * C2940 + C20188 * C3804 +
              C49288 * C3807) *
                 C48978) *
                C48893) *
               C49269 -
           (((C20230 + C20231 + C20232 + C20233) * C48978 +
             (C20234 + C20235 + C20236 + C20237) * C114) *
                C48893 +
            ((C20229 + C20228 + C20227 + C20226) * C48978 +
             (C20225 + C20224 + C20223 + C20222) * C114) *
                C49217) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C48967 * C550 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C5043 * C1973 + C49082 * C1978 + C5042 * C1307 + C49240 * C1313) *
                 C49272 +
             (C5043 * C1969 + C49082 * C1972 + C5042 * C1301 + C49240 * C1308) *
                 C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C7967 + C6509 * C7961 + C12669 * C7968 + C12670 * C7962 +
             (C12684 + C12683) * C7969 + (C12682 + C12681) * C49272) *
                C49217 +
            (C6299 * C7967 + C6300 * C7961 + (C6537 + C6536) * C7968 +
             (C6535 + C6534) * C7962 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C7969 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C48967 * C550 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C48967 * C49267) *
              C552 +
          ((((C5268 + C5267) * C114 + (C5266 + C5265) * C48978) * C3908 +
            ((C5264 + C5263) * C114 + (C5262 + C5261) * C48978) * C3909 +
            ((C5260 + C5259) * C114 + (C5258 + C5257) * C48978) * C3910 +
            ((C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                 C114 +
             (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C48967 * C550 -
           (((C20384 + C20385 + C20386 + C20387) * C48978 +
             (C20388 + C20389 + C20390 + C20391) * C114) *
                C48893 +
            ((C20188 * C3386 + C49288 * C3391 + C20187 * C2402 +
              C20183 * C2413 + C20186 * C728 + C20182 * C737 + C20185 * C286 +
              C20181 * C294) *
                 C48978 +
             (C20188 * C3382 + C49288 * C3385 + C20187 * C2395 +
              C20183 * C2401 + C20186 * C722 + C20182 * C727 + C20185 * C276 +
              C20181 * C287) *
                 C114) *
                C49217) *
               C48967 * C49267) *
              C552 +
          ((((C20391 + C20390 + C20389 + C20388) * C114 +
             (C20387 + C20386 + C20385 + C20384) * C48978) *
                C49217 +
            ((C20185 * C274 + C20181 * C283 + C20186 * C724 + C20182 * C731 +
              C20187 * C2399 + C20183 * C2409 + C20188 * C3384 +
              C49288 * C3389) *
                 C114 +
             (C20185 * C282 + C20181 * C292 + C20186 * C732 + C20182 * C739 +
              C20187 * C2410 + C20183 * C2417 + C20188 * C3390 +
              C49288 * C3393) *
                 C48978) *
                C48893) *
               C48967 * C49267 -
           (((C20230 + C20231 + C20232 + C20233) * C48978 +
             (C20234 + C20235 + C20236 + C20237) * C114) *
                C48893 +
            ((C20229 + C20228 + C20227 + C20226) * C48978 +
             (C20225 + C20224 + C20223 + C20222) * C114) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 + C13231 * C7969 +
            C13232 * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
               C48893) *
              C48967 * C616 -
          (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
            C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
               C48893 +
           ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
            (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
            (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
               C49217) *
              C48967 * C617 +
          ((C13231 * C7967 + C13232 * C7961 + (C13244 + C13243) * C7968 +
            (C13242 + C13241) * C7962 +
            (C5042 * C1805 + C49240 * C1808 + C5043 * C9370 + C49082 * C9373) *
                C7969 +
            (C5042 * C1809 + C49240 * C1814 + C5043 * C9372 + C49082 * C9376) *
                C49272) *
               C49217 +
           (C12669 * C7967 + C12670 * C7961 + (C12684 + C12683) * C7968 +
            (C12682 + C12681) * C7962 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C7969 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49272) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C48967 * C616 -
          (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
           ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
           ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
           ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                C48978 +
            (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                C114) *
               C3908) *
              C48967 * C617 +
          (((C5042 * C620 + C49240 * C625 + C5043 * C1499 + C49082 * C1506) *
                C114 +
            (C5042 * C626 + C49240 * C635 + C5043 * C1505 + C49082 * C1511) *
                C48978) *
               C3908 +
           ((C5042 * C621 + C49240 * C627 + C5043 * C1498 + C49082 * C1504) *
                C114 +
            (C5042 * C628 + C49240 * C636 + C5043 * C1503 + C49082 * C1510) *
                C48978) *
               C3909 +
           ((C5042 * C622 + C49240 * C629 + C5043 * C1497 + C49082 * C1502) *
                C114 +
            (C5042 * C630 + C49240 * C637 + C5043 * C1501 + C49082 * C1509) *
                C48978) *
               C3910 +
           ((C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                C114 +
            (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                C48978) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C114 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C48978) *
               C49217 +
           ((C20222 + C20223 + C20224 + C20225) * C114 +
            (C20226 + C20227 + C20228 + C20229) * C48978) *
               C48893) *
              C48967 * C616 -
          (((C20384 + C20385 + C20386 + C20387) * C48978 +
            (C20388 + C20389 + C20390 + C20391) * C114) *
               C48893 +
           ((C20188 * C3386 + C49288 * C3391 + C20187 * C2402 + C20183 * C2413 +
             C20186 * C728 + C20182 * C737 + C20185 * C286 + C20181 * C294) *
                C48978 +
            (C20188 * C3382 + C49288 * C3385 + C20187 * C2395 + C20183 * C2401 +
             C20186 * C722 + C20182 * C727 + C20185 * C276 + C20181 * C287) *
                C114) *
               C49217) *
              C48967 * C617 +
          (((C20185 * C620 + C20181 * C625 + C20186 * C1499 + C20182 * C1506 +
             C20187 * C2396 + C20183 * C2403 + C20188 * C10324 +
             C49288 * C10327) *
                C114 +
            (C20185 * C626 + C20181 * C635 + C20186 * C1505 + C20182 * C1511 +
             C20187 * C2404 + C20183 * C2414 + C20188 * C10326 +
             C49288 * C10330) *
                C48978) *
               C49217 +
           ((C20185 * C621 + C20181 * C627 + C20186 * C1498 + C20182 * C1504 +
             C20187 * C2398 + C20183 * C2407 + C20188 * C10325 +
             C49288 * C10328) *
                C114 +
            (C20185 * C628 + C20181 * C636 + C20186 * C1503 + C20182 * C1510 +
             C20187 * C2408 + C20183 * C2416 + C20188 * C10329 +
             C49288 * C10331) *
                C48978) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C7967 + (C7315 + C7314) * C7961 +
             (C13450 + C13449) * C7968 + (C13448 + C13447) * C7962 +
             (C5042 * C1969 + C49240 * C1972 + C5043 * C9856 + C49082 * C9858) *
                 C7969 +
             (C5042 * C1973 + C49240 * C1978 + C5043 * C9859 + C49082 * C9862) *
                 C49272) *
                C49217 +
            ((C6759 + C6758) * C7967 + (C6757 + C6756) * C7961 +
             (C12890 + C12889) * C7968 + (C12888 + C12887) * C7962 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C7969 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C410 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C550 +
          ((((C5042 * C722 + C49240 * C727 + C5043 * C2395 + C49082 * C2401) *
                 C114 +
             (C5042 * C728 + C49240 * C737 + C5043 * C2402 + C49082 * C2413) *
                 C48978) *
                C3908 +
            ((C5042 * C723 + C49240 * C729 + C5043 * C2397 + C49082 * C2405) *
                 C114 +
             (C5042 * C730 + C49240 * C738 + C5043 * C2406 + C49082 * C2415) *
                 C48978) *
                C3909 +
            ((C5042 * C724 + C49240 * C731 + C5043 * C2399 + C49082 * C2409) *
                 C114 +
             (C5042 * C732 + C49240 * C739 + C5043 * C2410 + C49082 * C2417) *
                 C48978) *
                C3910 +
            ((C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C114 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C410 -
           (((C20538 + C20539 + C20540 + C20541) * C48978 +
             (C20542 + C20543 + C20544 + C20545) * C114) *
                C48893 +
            ((C20188 * C3800 + C49288 * C3805 + C20187 * C2936 +
              C20183 * C2942 + C20186 * C979 + C20182 * C988 + C20185 * C426 +
              C20181 * C434) *
                 C48978 +
             (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 +
              C20183 * C2937 + C20186 * C973 + C20182 * C978 + C20185 * C416 +
              C20181 * C427) *
                 C114) *
                C49217) *
               C49269) *
              C550 +
          ((((C20185 * C722 + C20181 * C727 + C20186 * C2395 + C20182 * C2401 +
              C20187 * C3382 + C20183 * C3385 + C20188 * C11198 +
              C49288 * C11200) *
                 C114 +
             (C20185 * C728 + C20181 * C737 + C20186 * C2402 + C20182 * C2413 +
              C20187 * C3386 + C20183 * C3391 + C20188 * C11201 +
              C49288 * C11204) *
                 C48978) *
                C49217 +
            ((C20185 * C723 + C20181 * C729 + C20186 * C2397 + C20182 * C2405 +
              C20187 * C3383 + C20183 * C3387 + C20188 * C17901 +
              C49288 * C17902) *
                 C114 +
             (C20185 * C730 + C20181 * C738 + C20186 * C2406 + C20182 * C2415 +
              C20187 * C3388 + C20183 * C3392 + C20188 * C17903 +
              C49288 * C17904) *
                 C48978) *
                C48893) *
               C49269 -
           (((C20384 + C20385 + C20386 + C20387) * C48978 +
             (C20388 + C20389 + C20390 + C20391) * C114) *
                C48893 +
            ((C20188 * C3386 + C49288 * C3391 + C20187 * C2402 +
              C20183 * C2413 + C20186 * C728 + C20182 * C737 + C20185 * C286 +
              C20181 * C294) *
                 C48978 +
             (C20188 * C3382 + C49288 * C3385 + C20187 * C2395 +
              C20183 * C2401 + C20186 * C722 + C20182 * C727 + C20185 * C276 +
              C20181 * C287) *
                 C114) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C7967 + (C5432 + C5431) * C7961 +
             (C6759 + C6758) * C7968 + (C6757 + C6756) * C7962 +
             (C12890 + C12889) * C7969 + (C12888 + C12887) * C49272) *
                C49217 +
            ((C5430 + C5429) * C7967 + (C5428 + C5427) * C7961 +
             (C6755 + C6754) * C7968 + (C6753 + C6752) * C7962 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C7969 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C824 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C114 + (C5432 + C5431) * C48978) * C3908 +
            ((C5430 + C5429) * C114 + (C5428 + C5427) * C48978) * C3909 +
            ((C5426 + C5425) * C114 + (C5424 + C5423) * C48978) * C3910 +
            ((C5042 * C412 + C49240 * C419 + C5043 * C977 + C49082 * C986) *
                 C114 +
             (C5042 * C418 + C49240 * C430 + C5043 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C824 -
           (((C20538 + C20539 + C20540 + C20541) * C48978 +
             (C20542 + C20543 + C20544 + C20545) * C114) *
                C48893 +
            ((C20188 * C3800 + C49288 * C3805 + C20187 * C2936 +
              C20183 * C2942 + C20186 * C979 + C20182 * C988 + C20185 * C426 +
              C20181 * C434) *
                 C48978 +
             (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 +
              C20183 * C2937 + C20186 * C973 + C20182 * C978 + C20185 * C416 +
              C20181 * C427) *
                 C114) *
                C49217) *
               C49269) *
              C48950 * C552 +
          ((((C20545 + C20544 + C20543 + C20542) * C114 +
             (C20541 + C20540 + C20539 + C20538) * C48978) *
                C49217 +
            ((C20185 * C414 + C20181 * C423 + C20186 * C975 + C20182 * C982 +
              C20187 * C2928 + C20183 * C2933 + C20188 * C3798 +
              C49288 * C3803) *
                 C114 +
             (C20185 * C422 + C20181 * C432 + C20186 * C983 + C20182 * C990 +
              C20187 * C2932 + C20183 * C2940 + C20188 * C3804 +
              C49288 * C3807) *
                 C48978) *
                C48893) *
               C49269 -
           (((C20230 + C20231 + C20232 + C20233) * C48978 +
             (C20234 + C20235 + C20236 + C20237) * C114) *
                C48893 +
            ((C20229 + C20228 + C20227 + C20226) * C48978 +
             (C20225 + C20224 + C20223 + C20222) * C114) *
                C49217) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C7967 + (C7315 + C7314) * C7961 +
             (C13450 + C13449) * C7968 + (C13448 + C13447) * C7962 +
             (C5042 * C1969 + C49240 * C1972 + C5043 * C9856 + C49082 * C9858) *
                 C7969 +
             (C5042 * C1973 + C49240 * C1978 + C5043 * C9859 + C49082 * C9862) *
                 C49272) *
                C49217 +
            ((C6759 + C6758) * C7967 + (C6757 + C6756) * C7961 +
             (C12890 + C12889) * C7968 + (C12888 + C12887) * C7962 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C7969 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C824 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C268 +
          ((((C5042 * C722 + C49240 * C727 + C5043 * C2395 + C49082 * C2401) *
                 C114 +
             (C5042 * C728 + C49240 * C737 + C5043 * C2402 + C49082 * C2413) *
                 C48978) *
                C3908 +
            ((C5042 * C723 + C49240 * C729 + C5043 * C2397 + C49082 * C2405) *
                 C114 +
             (C5042 * C730 + C49240 * C738 + C5043 * C2406 + C49082 * C2415) *
                 C48978) *
                C3909 +
            ((C5042 * C724 + C49240 * C731 + C5043 * C2399 + C49082 * C2409) *
                 C114 +
             (C5042 * C732 + C49240 * C739 + C5043 * C2410 + C49082 * C2417) *
                 C48978) *
                C3910 +
            ((C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C114 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
              C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                 C114 +
             (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
              C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                 C48978) *
                C49217 +
            ((C20222 + C20223 + C20224 + C20225) * C114 +
             (C20226 + C20227 + C20228 + C20229) * C48978) *
                C48893) *
               C824 -
           (((C20538 + C20539 + C20540 + C20541) * C48978 +
             (C20542 + C20543 + C20544 + C20545) * C114) *
                C48893 +
            ((C20188 * C3800 + C49288 * C3805 + C20187 * C2936 +
              C20183 * C2942 + C20186 * C979 + C20182 * C988 + C20185 * C426 +
              C20181 * C434) *
                 C48978 +
             (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 +
              C20183 * C2937 + C20186 * C973 + C20182 * C978 + C20185 * C416 +
              C20181 * C427) *
                 C114) *
                C49217) *
               C49269) *
              C268 +
          ((((C20185 * C722 + C20181 * C727 + C20186 * C2395 + C20182 * C2401 +
              C20187 * C3382 + C20183 * C3385 + C20188 * C11198 +
              C49288 * C11200) *
                 C114 +
             (C20185 * C728 + C20181 * C737 + C20186 * C2402 + C20182 * C2413 +
              C20187 * C3386 + C20183 * C3391 + C20188 * C11201 +
              C49288 * C11204) *
                 C48978) *
                C49217 +
            ((C20185 * C723 + C20181 * C729 + C20186 * C2397 + C20182 * C2405 +
              C20187 * C3383 + C20183 * C3387 + C20188 * C17901 +
              C49288 * C17902) *
                 C114 +
             (C20185 * C730 + C20181 * C738 + C20186 * C2406 + C20182 * C2415 +
              C20187 * C3388 + C20183 * C3392 + C20188 * C17903 +
              C49288 * C17904) *
                 C48978) *
                C48893) *
               C49269 -
           (((C20384 + C20385 + C20386 + C20387) * C48978 +
             (C20388 + C20389 + C20390 + C20391) * C114) *
                C48893 +
            ((C20188 * C3386 + C49288 * C3391 + C20187 * C2402 +
              C20183 * C2413 + C20186 * C728 + C20182 * C737 + C20185 * C286 +
              C20181 * C294) *
                 C48978 +
             (C20188 * C3382 + C49288 * C3385 + C20187 * C2395 +
              C20183 * C2401 + C20186 * C722 + C20182 * C727 + C20185 * C276 +
              C20181 * C287) *
                 C114) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 + C13231 * C7969 +
            C13232 * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
               C48893) *
              C970 -
          (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
            (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
            (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
               C48893 +
           ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
            (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C7961 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C7967) *
               C49217) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C7967 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C7961 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C7968 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C7962 +
            (C5042 * C2396 + C49240 * C2403 + C5043 * C10324 +
             C49082 * C10327) *
                C7969 +
            (C5042 * C2404 + C49240 * C2414 + C5043 * C10326 +
             C49082 * C10330) *
                C49272) *
               C49217 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C7967 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C7961 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C7968 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C7962 +
            (C5042 * C2398 + C49240 * C2407 + C5043 * C10325 +
             C49082 * C10328) *
                C7969 +
            (C5042 * C2408 + C49240 * C2416 + C5043 * C10329 +
             C49082 * C10331) *
                C49272) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C970 -
          (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
           ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
           ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
           ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C48978 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C114) *
               C3908) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C114 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C48978) *
               C3908 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C114 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C48978) *
               C3909 +
           ((C5042 * C975 + C49240 * C982 + C5043 * C2928 + C49082 * C2933) *
                C114 +
            (C5042 * C983 + C49240 * C990 + C5043 * C2932 + C49082 * C2940) *
                C48978) *
               C3910 +
           ((C5042 * C976 + C49240 * C984 + C5043 * C2931 + C49082 * C2938) *
                C114 +
            (C5042 * C985 + C49240 * C991 + C5043 * C2939 + C49082 * C2943) *
                C48978) *
               C49276) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20185 * C115 + C20181 * C122 + C20186 * C416 + C20182 * C427 +
             C20187 * C973 + C20183 * C978 + C20188 * C2930 + C49288 * C2937) *
                C114 +
            (C20185 * C123 + C20181 * C136 + C20186 * C426 + C20182 * C434 +
             C20187 * C979 + C20183 * C988 + C20188 * C2936 + C49288 * C2942) *
                C48978) *
               C49217 +
           ((C20222 + C20223 + C20224 + C20225) * C114 +
            (C20226 + C20227 + C20228 + C20229) * C48978) *
               C48893) *
              C970 -
          (((C20538 + C20539 + C20540 + C20541) * C48978 +
            (C20542 + C20543 + C20544 + C20545) * C114) *
               C48893 +
           ((C20188 * C3800 + C49288 * C3805 + C20187 * C2936 + C20183 * C2942 +
             C20186 * C979 + C20182 * C988 + C20185 * C426 + C20181 * C434) *
                C48978 +
            (C20188 * C3796 + C49288 * C3799 + C20187 * C2930 + C20183 * C2937 +
             C20186 * C973 + C20182 * C978 + C20185 * C416 + C20181 * C427) *
                C114) *
               C49217) *
              C971 +
          (((C20185 * C973 + C20181 * C978 + C20186 * C2930 + C20182 * C2937 +
             C20187 * C3796 + C20183 * C3799 + C20188 * C17987 +
             C49288 * C17990) *
                C114 +
            (C20185 * C979 + C20181 * C988 + C20186 * C2936 + C20182 * C2942 +
             C20187 * C3800 + C20183 * C3805 + C20188 * C17989 +
             C49288 * C17993) *
                C48978) *
               C49217 +
           ((C20185 * C974 + C20181 * C980 + C20186 * C2929 + C20182 * C2935 +
             C20187 * C3797 + C20183 * C3801 + C20188 * C17988 +
             C49288 * C17991) *
                C114 +
            (C20185 * C981 + C20181 * C989 + C20186 * C2934 + C20182 * C2941 +
             C20187 * C3802 + C20183 * C3806 + C20188 * C17992 +
             C49288 * C17994) *
                C48978) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 +
            (C113 * C276 + C48995 * C287) * C1110 +
            (C113 * C286 + C48995 * C294) * C49295 +
            (C113 * C620 + C48995 * C625) * C1111 +
            (C113 * C626 + C48995 * C635) * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C48950 * C110 -
          ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
           (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
           (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
              C48967 * C48950 * C111 +
          (C1153 * C1106 +
           (C1136 + C1135 + C1134 + C1133 + C1150 + C1149) * C1107 +
           (C170 * C1109 + C171 * C49307 + C314 * C1110 + C313 * C49295 +
            (C113 * C624 + C48995 * C633) * C1111 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C48950 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C48967 * C48950 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C48995 * C134) * C114 +
            (C113 * C135 + C48995 * C142) * C48978) *
               C107) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C48950 * C110 -
          ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
           (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
           (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
              C48967 * C48950 * C111 +
          (C7993 * C49304 +
           (C7988 + C7987 + C7986 + C7985 + C7984 + C7983) * C49291 +
           (C170 * C7967 + C171 * C7961 + C314 * C7968 + C313 * C7962 +
            (C113 * C624 + C48995 * C633) * C7969 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + (C113 * C1805 + C48995 * C1808) * C9185 +
           (C113 * C1809 + C48995 * C1814) * C9179) *
              C48883 * C48967 * C48950 * C110 -
          ((C113 * C1811 + C48995 * C1815) * C9179 +
           (C113 * C1806 + C48995 * C1810) * C9185 + C1346 * C9178 +
           C1347 * C9184 + C1138 * C9177 + C1137 * C9183 + C319 * C9176 +
           C320 * C9182 + C165 * C9175 + C164 * C9181) *
              C48883 * C48967 * C48950 * C111 +
          (C166 * C9181 + C167 * C9175 + C318 * C9182 + C317 * C9176 +
           C1140 * C9183 + C1141 * C9177 + C1345 * C9184 + C1344 * C9178 +
           (C113 * C1807 + C48995 * C1812) * C9185 +
           (C113 * C1813 + C48995 * C1816) * C9179) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C48967 * C48950 * C110 -
          (((C15249 + C15250 + C15251) * C48978 +
            (C15252 + C15253 + C15254) * C114) *
               C49259 +
           ((C15248 + C15247 + C15246) * C48978 +
            (C15245 + C15244 + C15243) * C114) *
               C49291 +
           ((C15242 + C15241 + C15240) * C48978 +
            (C15239 + C15238 + C15237) * C114) *
               C49304) *
              C48967 * C48950 * C111 +
          (C15261 * C49304 +
           ((C15254 + C15253 + C15252) * C114 +
            (C15251 + C15250 + C15249) * C48978) *
               C49291 +
           ((C15197 * C119 + C15194 * C130 + C15198 * C412 + C15195 * C419 +
             C15199 * C977 + C49275 * C986) *
                C114 +
            (C15197 * C131 + C15194 * C140 + C15198 * C418 + C15195 * C430 +
             C15199 * C987 + C49275 * C992) *
                C48978) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C15197 * C276 + C15194 * C287 + C15198 * C722 + C15195 * C727 +
            C15199 * C2395 + C49275 * C2401) *
               C1110 +
           (C15197 * C286 + C15194 * C294 + C15198 * C728 + C15195 * C737 +
            C15199 * C2402 + C49275 * C2413) *
               C49295 +
           (C15197 * C620 + C15194 * C625 + C15198 * C1499 + C15195 * C1506 +
            C15199 * C2396 + C49275 * C2403) *
               C1111 +
           (C15197 * C626 + C15194 * C635 + C15198 * C1505 + C15195 * C1511 +
            C15199 * C2404 + C49275 * C2414) *
               C49272) *
              C48883 * C48967 * C48950 * C110 -
          ((C15199 * C2408 + C49275 * C2416 + C15198 * C1503 + C15195 * C1510 +
            C15197 * C628 + C15194 * C636) *
               C49272 +
           (C15199 * C2398 + C49275 * C2407 + C15198 * C1498 + C15195 * C1504 +
            C15197 * C621 + C15194 * C627) *
               C1111 +
           (C15438 + C15439 + C15440) * C49295 +
           (C15441 + C15442 + C15443) * C1110 +
           (C15242 + C15241 + C15240) * C49307 +
           (C15239 + C15238 + C15237) * C1109) *
              C48883 * C48967 * C48950 * C111 +
          (C15257 * C1109 + C15258 * C49307 +
           (C15437 + C15436 + C15435) * C1110 +
           (C15434 + C15433 + C15432) * C49295 +
           (C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
            C15199 * C2400 + C49275 * C2411) *
               C1111 +
           (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
            C15199 * C2412 + C49275 * C2418) *
               C49272) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C268 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C270 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C268 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C268 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C48967 * C268 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C48967 * C49267) *
              C270 +
          ((((C15443 + C15442 + C15441) * C114 +
             (C15440 + C15439 + C15438) * C48978) *
                C49304 +
            ((C15437 + C15436 + C15435) * C114 +
             (C15434 + C15433 + C15432) * C48978) *
                C49291 +
            ((C15197 * C273 + C15194 * C281 + C15198 * C725 + C15195 * C733 +
              C15199 * C2742 + C49275 * C2743) *
                 C114 +
             (C15197 * C280 + C15194 * C291 + C15198 * C734 + C15195 * C740 +
              C15199 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C48967 * C268 -
           ((C15199 * C9859 + C49275 * C9862 + C15198 * C1973 + C15195 * C1978 +
             C15197 * C1307 + C15194 * C1313) *
                C49272 +
            (C15199 * C9856 + C49275 * C9858 + C15198 * C1969 + C15195 * C1972 +
             C15197 * C1301 + C15194 * C1308) *
                C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C15443 + C15442 + C15441) * C1109 +
            (C15440 + C15439 + C15438) * C49307 +
            (C16734 + C16735 + C16736) * C1110 +
            (C16737 + C16738 + C16739) * C49295 +
            (C15197 * C1300 + C15194 * C1306 + C15198 * C1970 + C15195 * C1974 +
             C15199 * C10120 + C49275 * C10121) *
                C1111 +
            (C15197 * C1305 + C15194 * C1312 + C15198 * C1975 + C15195 * C1979 +
             C15199 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            ((C113 * C1505 + C48995 * C1511) * C49272 +
             (C113 * C1499 + C48995 * C1506) * C1111 +
             (C113 * C728 + C48995 * C737) * C49295 +
             (C113 * C722 + C48995 * C727) * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C270 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C270 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           ((C113 * C9372 + C48995 * C9376) * C9179 +
            (C113 * C9370 + C48995 * C9373) * C9185 +
            (C113 * C1973 + C48995 * C1978) * C9178 +
            (C113 * C1969 + C48995 * C1972) * C9184 + C1990 * C9177 +
            C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C270 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C410 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C48950 * C270 +
          ((((C15625 + C15624 + C15623) * C114 +
             (C15622 + C15621 + C15620) * C48978) *
                C49304 +
            ((C15619 + C15618 + C15617) * C114 +
             (C15616 + C15615 + C15614) * C48978) *
                C49291 +
            ((C15197 * C413 + C15194 * C421 + C15198 * C976 + C15195 * C984 +
              C15199 * C2931 + C49275 * C2938) *
                 C114 +
             (C15197 * C420 + C15194 * C431 + C15198 * C985 + C15195 * C991 +
              C15199 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C410 -
           ((C15199 * C10326 + C49275 * C10330 + C15198 * C2404 +
             C15195 * C2414 + C15197 * C1505 + C15194 * C1511) *
                C49272 +
            (C15199 * C10324 + C49275 * C10327 + C15198 * C2396 +
             C15195 * C2403 + C15197 * C1499 + C15194 * C1506) *
                C1111 +
            (C15199 * C3386 + C49275 * C3391 + C15198 * C2402 + C15195 * C2413 +
             C15197 * C728 + C15194 * C737) *
                C49295 +
            (C15199 * C3382 + C49275 * C3385 + C15198 * C2395 + C15195 * C2401 +
             C15197 * C722 + C15194 * C727) *
                C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C15625 + C15624 + C15623) * C1109 +
            (C15622 + C15621 + C15620) * C49307 +
            (C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
             C15199 * C3383 + C49275 * C3387) *
                C1110 +
            (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
             C15199 * C3388 + C49275 * C3392) *
                C49295 +
            (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 + C15195 * C2407 +
             C15199 * C10325 + C49275 * C10328) *
                C1111 +
            (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 + C15195 * C2416 +
             C15199 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C550 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C552 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C550 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C550 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C48967 * C550 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C48967 * C49267) *
              C552 +
          ((((C15443 + C15442 + C15441) * C114 +
             (C15440 + C15439 + C15438) * C48978) *
                C49304 +
            ((C15437 + C15436 + C15435) * C114 +
             (C15434 + C15433 + C15432) * C48978) *
                C49291 +
            ((C15197 * C273 + C15194 * C281 + C15198 * C725 + C15195 * C733 +
              C15199 * C2742 + C49275 * C2743) *
                 C114 +
             (C15197 * C280 + C15194 * C291 + C15198 * C734 + C15195 * C740 +
              C15199 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 +
            (C16728 + C16729 + C16730) * C1111 +
            (C16731 + C16732 + C16733) * C49272) *
               C48883 * C48967 * C550 -
           ((C15199 * C9859 + C49275 * C9862 + C15198 * C1973 + C15195 * C1978 +
             C15197 * C1307 + C15194 * C1313) *
                C49272 +
            (C15199 * C9856 + C49275 * C9858 + C15198 * C1969 + C15195 * C1972 +
             C15197 * C1301 + C15194 * C1308) *
                C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C15443 + C15442 + C15441) * C1109 +
            (C15440 + C15439 + C15438) * C49307 +
            (C16734 + C16735 + C16736) * C1110 +
            (C16737 + C16738 + C16739) * C49295 +
            (C15197 * C1300 + C15194 * C1306 + C15198 * C1970 + C15195 * C1974 +
             C15199 * C10120 + C49275 * C10121) *
                C1111 +
            (C15197 * C1305 + C15194 * C1312 + C15198 * C1975 + C15195 * C1979 +
             C15199 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C616 -
          ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
           (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
           (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
            C1341 * C49307 + C1340 * C1109) *
               C1106) *
              C48967 * C617 +
          ((C1342 * C1109 + C1343 * C49307 + C1823 * C1110 + C1822 * C49295 +
            (C113 * C1805 + C48995 * C1808) * C1111 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C1106 +
           (C1137 * C1109 + C1138 * C49307 + C1347 * C1110 + C1346 * C49295 +
            (C113 * C1806 + C48995 * C1810) * C1111 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C1107 +
           (C1140 * C1109 + C1141 * C49307 + C1345 * C1110 + C1344 * C49295 +
            (C113 * C1807 + C48995 * C1812) * C1111 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C48995 * C294) * C48978 +
            (C113 * C276 + C48995 * C287) * C114) *
               C103) *
              C48967 * C617 +
          (((C113 * C620 + C48995 * C625) * C114 +
            (C113 * C626 + C48995 * C635) * C48978) *
               C103 +
           ((C113 * C621 + C48995 * C627) * C114 +
            (C113 * C628 + C48995 * C636) * C48978) *
               C104 +
           ((C113 * C622 + C48995 * C629) * C114 +
            (C113 * C630 + C48995 * C637) * C48978) *
               C105 +
           ((C113 * C623 + C48995 * C631) * C114 +
            (C113 * C632 + C48995 * C638) * C48978) *
               C106 +
           ((C113 * C624 + C48995 * C633) * C114 +
            (C113 * C634 + C48995 * C639) * C48978) *
               C107) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C616 -
          ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
           (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
           (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
            C1341 * C7961 + C1340 * C7967) *
               C49304) *
              C48967 * C617 +
          ((C1342 * C7967 + C1343 * C7961 + C1823 * C7968 + C1822 * C7962 +
            (C113 * C1805 + C48995 * C1808) * C7969 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C49304 +
           (C1137 * C7967 + C1138 * C7961 + C1347 * C7968 + C1346 * C7962 +
            (C113 * C1806 + C48995 * C1810) * C7969 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C49291 +
           (C1140 * C7967 + C1141 * C7961 + C1345 * C7968 + C1344 * C7962 +
            (C113 * C1807 + C48995 * C1812) * C7969 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C48967 * C616 -
          (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
           C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
           C1341 * C9175 + C1340 * C9181) *
              C48883 * C48967 * C617 +
          (C1342 * C9181 + C1343 * C9175 + C1823 * C9182 + C1822 * C9176 +
           C9285 * C9183 + C9286 * C9177 + C9532 * C9184 + C9531 * C9178 +
           (C113 * C9522 + C48995 * C9523) * C9185 +
           (C113 * C9524 + C48995 * C9525) * C9179) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C48967 * C616 -
          (((C15432 + C15433 + C15434) * C48978 +
            (C15435 + C15436 + C15437) * C114) *
               C49259 +
           ((C15438 + C15439 + C15440) * C48978 +
            (C15441 + C15442 + C15443) * C114) *
               C49291 +
           ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
             C15197 * C286 + C15194 * C294) *
                C48978 +
            (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
             C15197 * C276 + C15194 * C287) *
                C114) *
               C49304) *
              C48967 * C617 +
          (((C15197 * C620 + C15194 * C625 + C15198 * C1499 + C15195 * C1506 +
             C15199 * C2396 + C49275 * C2403) *
                C114 +
            (C15197 * C626 + C15194 * C635 + C15198 * C1505 + C15195 * C1511 +
             C15199 * C2404 + C49275 * C2414) *
                C48978) *
               C49304 +
           ((C15197 * C621 + C15194 * C627 + C15198 * C1498 + C15195 * C1504 +
             C15199 * C2398 + C49275 * C2407) *
                C114 +
            (C15197 * C628 + C15194 * C636 + C15198 * C1503 + C15195 * C1510 +
             C15199 * C2408 + C49275 * C2416) *
                C48978) *
               C49291 +
           ((C15197 * C622 + C15194 * C629 + C15198 * C1497 + C15195 * C1502 +
             C15199 * C2400 + C49275 * C2411) *
                C114 +
            (C15197 * C630 + C15194 * C637 + C15198 * C1501 + C15195 * C1509 +
             C15199 * C2412 + C49275 * C2418) *
                C48978) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C16722 + C16723 + C16724) * C1110 +
           (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
           C17157 * C49272) *
              C48883 * C48967 * C616 -
          ((C17158 + C17159 + C17160) * C49272 +
           (C17161 + C17162 + C17163) * C1111 +
           (C16733 + C16732 + C16731) * C49295 +
           (C16730 + C16729 + C16728) * C1110 +
           (C16727 + C16726 + C16725) * C49307 +
           (C16724 + C16723 + C16722) * C1109) *
              C48883 * C48967 * C617 +
          (C17156 * C1109 + C17157 * C49307 +
           (C17163 + C17162 + C17161) * C1110 +
           (C17160 + C17159 + C17158) * C49295 +
           (C15197 * C1805 + C15194 * C1808 + C15198 * C9370 + C15195 * C9373 +
            C15199 * C9857 + C49275 * C9860) *
               C1111 +
           (C15197 * C1809 + C15194 * C1814 + C15198 * C9372 + C15195 * C9376 +
            C15199 * C9861 + C49275 * C9863) *
               C49272) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C550 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C550 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C550 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C550 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C410 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C550 +
          ((((C15197 * C722 + C15194 * C727 + C15198 * C2395 + C15195 * C2401 +
              C15199 * C3382 + C49275 * C3385) *
                 C114 +
             (C15197 * C728 + C15194 * C737 + C15198 * C2402 + C15195 * C2413 +
              C15199 * C3386 + C49275 * C3391) *
                 C48978) *
                C49304 +
            ((C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
              C15199 * C3383 + C49275 * C3387) *
                 C114 +
             (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
              C15199 * C3388 + C49275 * C3392) *
                 C48978) *
                C49291 +
            ((C15197 * C724 + C15194 * C731 + C15198 * C2399 + C15195 * C2409 +
              C15199 * C3384 + C49275 * C3389) *
                 C114 +
             (C15197 * C732 + C15194 * C739 + C15198 * C2410 + C15195 * C2417 +
              C15199 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C410 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C550 +
          (((C17345 + C17344 + C17343) * C1109 +
            (C17342 + C17341 + C17340) * C49307 +
            (C17339 + C17338 + C17337) * C1110 +
            (C17336 + C17335 + C17334) * C49295 +
            (C15197 * C1969 + C15194 * C1972 + C15198 * C9856 + C15195 * C9858 +
             C15199 * C10756 + C49275 * C10757) *
                C1111 +
            (C15197 * C1973 + C15194 * C1978 + C15198 * C9859 + C15195 * C9862 +
             C15199 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C17158 + C17159 + C17160) * C49272 +
            (C17161 + C17162 + C17163) * C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C552 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C552 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C552 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C824 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C48950 * C552 +
          ((((C15625 + C15624 + C15623) * C114 +
             (C15622 + C15621 + C15620) * C48978) *
                C49304 +
            ((C15619 + C15618 + C15617) * C114 +
             (C15616 + C15615 + C15614) * C48978) *
                C49291 +
            ((C15197 * C413 + C15194 * C421 + C15198 * C976 + C15195 * C984 +
              C15199 * C2931 + C49275 * C2938) *
                 C114 +
             (C15197 * C420 + C15194 * C431 + C15198 * C985 + C15195 * C991 +
              C15199 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15249 + C15250 + C15251) * C48978 +
             (C15252 + C15253 + C15254) * C114) *
                C49259 +
            ((C15248 + C15247 + C15246) * C48978 +
             (C15245 + C15244 + C15243) * C114) *
                C49291 +
            ((C15242 + C15241 + C15240) * C48978 +
             (C15239 + C15238 + C15237) * C114) *
                C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C824 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C15625 + C15624 + C15623) * C1109 +
            (C15622 + C15621 + C15620) * C49307 +
            (C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
             C15199 * C3383 + C49275 * C3387) *
                C1110 +
            (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
             C15199 * C3388 + C49275 * C3392) *
                C49295 +
            (C15197 * C1498 + C15194 * C1504 + C15198 * C2398 + C15195 * C2407 +
             C15199 * C10325 + C49275 * C10328) *
                C1111 +
            (C15197 * C1503 + C15194 * C1510 + C15198 * C2408 + C15195 * C2416 +
             C15199 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C16739 + C16738 + C16737) * C49272 +
            (C16736 + C16735 + C16734) * C1111 +
            (C15438 + C15439 + C15440) * C49295 +
            (C15441 + C15442 + C15443) * C1110 +
            (C15242 + C15241 + C15240) * C49307 +
            (C15239 + C15238 + C15237) * C1109) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C268 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C268 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C268 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C268 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
              C15199 * C973 + C49275 * C978) *
                 C114 +
             (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
              C15199 * C979 + C49275 * C988) *
                 C48978) *
                C49304 +
            ((C15237 + C15238 + C15239) * C114 +
             (C15240 + C15241 + C15242) * C48978) *
                C49291 +
            C15261 * C49259) *
               C824 -
           (((C15614 + C15615 + C15616) * C48978 +
             (C15617 + C15618 + C15619) * C114) *
                C49259 +
            ((C15620 + C15621 + C15622) * C48978 +
             (C15623 + C15624 + C15625) * C114) *
                C49291 +
            ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
              C15197 * C426 + C15194 * C434) *
                 C48978 +
             (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
              C15197 * C416 + C15194 * C427) *
                 C114) *
                C49304) *
               C49269) *
              C268 +
          ((((C15197 * C722 + C15194 * C727 + C15198 * C2395 + C15195 * C2401 +
              C15199 * C3382 + C49275 * C3385) *
                 C114 +
             (C15197 * C728 + C15194 * C737 + C15198 * C2402 + C15195 * C2413 +
              C15199 * C3386 + C49275 * C3391) *
                 C48978) *
                C49304 +
            ((C15197 * C723 + C15194 * C729 + C15198 * C2397 + C15195 * C2405 +
              C15199 * C3383 + C49275 * C3387) *
                 C114 +
             (C15197 * C730 + C15194 * C738 + C15198 * C2406 + C15195 * C2415 +
              C15199 * C3388 + C49275 * C3392) *
                 C48978) *
                C49291 +
            ((C15197 * C724 + C15194 * C731 + C15198 * C2399 + C15195 * C2409 +
              C15199 * C3384 + C49275 * C3389) *
                 C114 +
             (C15197 * C732 + C15194 * C739 + C15198 * C2410 + C15195 * C2417 +
              C15199 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C15432 + C15433 + C15434) * C48978 +
             (C15435 + C15436 + C15437) * C114) *
                C49259 +
            ((C15438 + C15439 + C15440) * C48978 +
             (C15441 + C15442 + C15443) * C114) *
                C49291 +
            ((C15199 * C2402 + C49275 * C2413 + C15198 * C728 + C15195 * C737 +
              C15197 * C286 + C15194 * C294) *
                 C48978 +
             (C15199 * C2395 + C49275 * C2401 + C15198 * C722 + C15195 * C727 +
              C15197 * C276 + C15194 * C287) *
                 C114) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C1109 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C49307 +
            (C16722 + C16723 + C16724) * C1110 +
            (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
            C17157 * C49272) *
               C48883 * C824 -
           ((C17334 + C17335 + C17336) * C49272 +
            (C17337 + C17338 + C17339) * C1111 +
            (C17340 + C17341 + C17342) * C49295 +
            (C17343 + C17344 + C17345) * C1110 +
            (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C49307 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C1109) *
               C48883 * C49269) *
              C268 +
          (((C17345 + C17344 + C17343) * C1109 +
            (C17342 + C17341 + C17340) * C49307 +
            (C17339 + C17338 + C17337) * C1110 +
            (C17336 + C17335 + C17334) * C49295 +
            (C15197 * C1969 + C15194 * C1972 + C15198 * C9856 + C15195 * C9858 +
             C15199 * C10756 + C49275 * C10757) *
                C1111 +
            (C15197 * C1973 + C15194 * C1978 + C15198 * C9859 + C15195 * C9862 +
             C15199 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C17158 + C17159 + C17160) * C49272 +
            (C17161 + C17162 + C17163) * C1111 +
            (C16733 + C16732 + C16731) * C49295 +
            (C16730 + C16729 + C16728) * C1110 +
            (C16727 + C16726 + C16725) * C49307 +
            (C16724 + C16723 + C16722) * C1109) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C970 -
          ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
           (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
           (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
            (C113 * C426 + C48995 * C434) * C49307 +
            (C113 * C416 + C48995 * C427) * C1109) *
               C1106) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C1109 +
            (C113 * C979 + C48995 * C988) * C49307 +
            (C113 * C2395 + C48995 * C2401) * C1110 +
            (C113 * C2402 + C48995 * C2413) * C49295 +
            (C113 * C2396 + C48995 * C2403) * C1111 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C1106 +
           ((C113 * C974 + C48995 * C980) * C1109 +
            (C113 * C981 + C48995 * C989) * C49307 +
            (C113 * C2397 + C48995 * C2405) * C1110 +
            (C113 * C2406 + C48995 * C2415) * C49295 +
            (C113 * C2398 + C48995 * C2407) * C1111 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C1107 +
           ((C113 * C975 + C48995 * C982) * C1109 +
            (C113 * C983 + C48995 * C990) * C49307 +
            (C113 * C2399 + C48995 * C2409) * C1110 +
            (C113 * C2410 + C48995 * C2417) * C49295 +
            (C113 * C2400 + C48995 * C2411) * C1111 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C48995 * C434) * C48978 +
            (C113 * C416 + C48995 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C114 +
            (C113 * C979 + C48995 * C988) * C48978) *
               C103 +
           ((C113 * C974 + C48995 * C980) * C114 +
            (C113 * C981 + C48995 * C989) * C48978) *
               C104 +
           ((C113 * C975 + C48995 * C982) * C114 +
            (C113 * C983 + C48995 * C990) * C48978) *
               C105 +
           ((C113 * C976 + C48995 * C984) * C114 +
            (C113 * C985 + C48995 * C991) * C48978) *
               C106 +
           ((C113 * C977 + C48995 * C986) * C114 +
            (C113 * C987 + C48995 * C992) * C48978) *
               C107) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C970 -
          ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
           (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
           (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
            (C113 * C426 + C48995 * C434) * C7961 +
            (C113 * C416 + C48995 * C427) * C7967) *
               C49304) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C7967 +
            (C113 * C979 + C48995 * C988) * C7961 +
            (C113 * C2395 + C48995 * C2401) * C7968 +
            (C113 * C2402 + C48995 * C2413) * C7962 +
            (C113 * C2396 + C48995 * C2403) * C7969 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C49304 +
           ((C113 * C974 + C48995 * C980) * C7967 +
            (C113 * C981 + C48995 * C989) * C7961 +
            (C113 * C2397 + C48995 * C2405) * C7968 +
            (C113 * C2406 + C48995 * C2415) * C7962 +
            (C113 * C2398 + C48995 * C2407) * C7969 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C49291 +
           ((C113 * C975 + C48995 * C982) * C7967 +
            (C113 * C983 + C48995 * C990) * C7961 +
            (C113 * C2399 + C48995 * C2409) * C7968 +
            (C113 * C2410 + C48995 * C2417) * C7962 +
            (C113 * C2400 + C48995 * C2411) * C7969 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C970 -
          (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
           C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
           (C113 * C426 + C48995 * C434) * C9175 +
           (C113 * C416 + C48995 * C427) * C9181) *
              C48883 * C971 +
          ((C113 * C973 + C48995 * C978) * C9181 +
           (C113 * C979 + C48995 * C988) * C9175 +
           (C113 * C2395 + C48995 * C2401) * C9182 +
           (C113 * C2402 + C48995 * C2413) * C9176 +
           (C113 * C2396 + C48995 * C2403) * C9183 +
           (C113 * C2404 + C48995 * C2414) * C9177 +
           (C113 * C9856 + C48995 * C9858) * C9184 +
           (C113 * C9859 + C48995 * C9862) * C9178 +
           (C113 * C9857 + C48995 * C9860) * C9185 +
           (C113 * C9861 + C48995 * C9863) * C9179) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
             C15199 * C973 + C49275 * C978) *
                C114 +
            (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
             C15199 * C979 + C49275 * C988) *
                C48978) *
               C49304 +
           ((C15237 + C15238 + C15239) * C114 +
            (C15240 + C15241 + C15242) * C48978) *
               C49291 +
           C15261 * C49259) *
              C970 -
          (((C15614 + C15615 + C15616) * C48978 +
            (C15617 + C15618 + C15619) * C114) *
               C49259 +
           ((C15620 + C15621 + C15622) * C48978 +
            (C15623 + C15624 + C15625) * C114) *
               C49291 +
           ((C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
             C15197 * C426 + C15194 * C434) *
                C48978 +
            (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
             C15197 * C416 + C15194 * C427) *
                C114) *
               C49304) *
              C971 +
          (((C15197 * C973 + C15194 * C978 + C15198 * C2930 + C15195 * C2937 +
             C15199 * C3796 + C49275 * C3799) *
                C114 +
            (C15197 * C979 + C15194 * C988 + C15198 * C2936 + C15195 * C2942 +
             C15199 * C3800 + C49275 * C3805) *
                C48978) *
               C49304 +
           ((C15197 * C974 + C15194 * C980 + C15198 * C2929 + C15195 * C2935 +
             C15199 * C3797 + C49275 * C3801) *
                C114 +
            (C15197 * C981 + C15194 * C989 + C15198 * C2934 + C15195 * C2941 +
             C15199 * C3802 + C49275 * C3806) *
                C48978) *
               C49291 +
           ((C15197 * C975 + C15194 * C982 + C15198 * C2928 + C15195 * C2933 +
             C15199 * C3798 + C49275 * C3803) *
                C114 +
            (C15197 * C983 + C15194 * C990 + C15198 * C2932 + C15195 * C2940 +
             C15199 * C3804 + C49275 * C3807) *
                C48978) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15197 * C115 + C15194 * C122 + C15198 * C416 + C15195 * C427 +
            C15199 * C973 + C49275 * C978) *
               C1109 +
           (C15197 * C123 + C15194 * C136 + C15198 * C426 + C15195 * C434 +
            C15199 * C979 + C49275 * C988) *
               C49307 +
           (C16722 + C16723 + C16724) * C1110 +
           (C16725 + C16726 + C16727) * C49295 + C17156 * C1111 +
           C17157 * C49272) *
              C48883 * C970 -
          ((C17334 + C17335 + C17336) * C49272 +
           (C17337 + C17338 + C17339) * C1111 +
           (C17340 + C17341 + C17342) * C49295 +
           (C17343 + C17344 + C17345) * C1110 +
           (C15199 * C2936 + C49275 * C2942 + C15198 * C979 + C15195 * C988 +
            C15197 * C426 + C15194 * C434) *
               C49307 +
           (C15199 * C2930 + C49275 * C2937 + C15198 * C973 + C15195 * C978 +
            C15197 * C416 + C15194 * C427) *
               C1109) *
              C48883 * C971 +
          ((C15197 * C973 + C15194 * C978 + C15198 * C2930 + C15195 * C2937 +
            C15199 * C3796 + C49275 * C3799) *
               C1109 +
           (C15197 * C979 + C15194 * C988 + C15198 * C2936 + C15195 * C2942 +
            C15199 * C3800 + C49275 * C3805) *
               C49307 +
           (C15197 * C2395 + C15194 * C2401 + C15198 * C3382 + C15195 * C3385 +
            C15199 * C11198 + C49275 * C11200) *
               C1110 +
           (C15197 * C2402 + C15194 * C2413 + C15198 * C3386 + C15195 * C3391 +
            C15199 * C11201 + C49275 * C11204) *
               C49295 +
           (C15197 * C2396 + C15194 * C2403 + C15198 * C10324 +
            C15195 * C10327 + C15199 * C11199 + C49275 * C11202) *
               C1111 +
           (C15197 * C2404 + C15194 * C2414 + C15198 * C10326 +
            C15195 * C10330 + C15199 * C11203 + C49275 * C11205) *
               C49272) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C3912 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49239 +
            (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
               C48888 +
           ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
            C32341 * C3913 + C32342 * C49040) *
               C48896 +
           C35025 * C26394) *
              C48967 * C48950 * C110 -
          (((C31067 + C31068) * C49040 + (C31069 + C31070) * C3913 +
            (C30898 + C30897) * C49239 + (C30896 + C30895) * C3912) *
               C26394 +
           ((C31071 + C31072) * C49040 + (C31073 + C31074) * C3913 +
            (C30894 + C30893) * C49239 + (C30892 + C30891) * C3912) *
               C48896 +
           (C32355 * C49040 + C32356 * C3913 + (C30890 + C30889) * C49239 +
            (C30888 + C30887) * C3912) *
               C48888) *
              C48967 * C48950 * C111 +
          (C35025 * C48888 +
           (C30905 * C3912 + C30906 * C49239 + (C31070 + C31069) * C3913 +
            (C31068 + C31067) * C49040) *
               C48896 +
           ((C30902 + C30901) * C3912 + (C30900 + C30899) * C49239 +
            (C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                C3913 +
            (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                C49040) *
               C26394) *
              C48967 * C48950 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C48967 * C268 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C3913 +
             C35220 * C49239 + C35221 * C3912) *
                C26394 +
            (C32353 * C49040 + C32354 * C3913 + C32355 * C49239 +
             C32356 * C3912) *
                C48896 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C3913 +
             (C32360 + C32359) * C49239 + (C32358 + C32357) * C3912) *
                C48888) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C3912 + C32342 * C49239 + C32343 * C3913 +
             C32344 * C49040) *
                C48888 +
            (C35019 * C3912 + C35020 * C49239 + (C32130 + C32129) * C3913 +
             (C32128 + C32127) * C49040) *
                C48896 +
            ((C31070 + C31069) * C3912 + (C31068 + C31067) * C49239 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C3913 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C26394) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C3913 +
             (C30898 + C30897) * C49239 + (C30896 + C30895) * C3912) *
                C26394 +
            (C35220 * C49040 + C35221 * C3913 + (C30894 + C30893) * C49239 +
             (C30892 + C30891) * C3912) *
                C48896 +
            (C32355 * C49040 + C32356 * C3913 + (C30890 + C30889) * C49239 +
             (C30888 + C30887) * C3912) *
                C48888) *
               C48967 * C268) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C3913 +
             (C31237 + C31238) * C49239 + (C31239 + C31240) * C3912) *
                C26394 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C3913 +
             (C31241 + C31242) * C49239 + (C31243 + C31244) * C3912) *
                C48896 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C3913 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49239 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C3912) *
                C48888) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C3912 + (C31242 + C31241) * C49239 +
             (C32586 + C32585) * C3913 + (C32584 + C32583) * C49040) *
                C48888 +
            ((C31240 + C31239) * C3912 + (C31238 + C31237) * C49239 +
             (C35427 + C35426) * C3913 + (C35425 + C35424) * C49040) *
                C48896 +
            ((C31236 + C31235) * C3912 + (C31234 + C31233) * C49239 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C3913 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C26394) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C3913 +
             (C30898 + C30897) * C49239 + (C30896 + C30895) * C3912) *
                C26394 +
            (C35220 * C49040 + C35221 * C3913 + (C30894 + C30893) * C49239 +
             (C30892 + C30891) * C3912) *
                C48896 +
            (C32355 * C49040 + C32356 * C3913 + (C30890 + C30889) * C49239 +
             (C30888 + C30887) * C3912) *
                C48888) *
               C410) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C48967 * C550 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C3913 +
             C35220 * C49239 + C35221 * C3912) *
                C26394 +
            (C32353 * C49040 + C32354 * C3913 + C32355 * C49239 +
             C32356 * C3912) *
                C48896 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C3913 +
             (C32360 + C32359) * C49239 + (C32358 + C32357) * C3912) *
                C48888) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C3912 + C32342 * C49239 + C32343 * C3913 +
             C32344 * C49040) *
                C48888 +
            (C35019 * C3912 + C35020 * C49239 + (C32130 + C32129) * C3913 +
             (C32128 + C32127) * C49040) *
                C48896 +
            ((C31070 + C31069) * C3912 + (C31068 + C31067) * C49239 +
             (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                 C3913 +
             (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                 C49040) *
                C26394) *
               C48967 * C49267 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C3913 +
             (C30898 + C30897) * C49239 + (C30896 + C30895) * C3912) *
                C26394 +
            (C35220 * C49040 + C35221 * C3913 + (C30894 + C30893) * C49239 +
             (C30892 + C30891) * C3912) *
                C48896 +
            (C32355 * C49040 + C32356 * C3913 + (C30890 + C30889) * C49239 +
             (C30888 + C30887) * C3912) *
                C48888) *
               C48967 * C550) *
              C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C3912 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49239 +
            (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
               C48888 +
           ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
            C32341 * C3913 + C32342 * C49040) *
               C48896 +
           C35025 * C26394) *
              C48967 * C616 -
          (((C32127 + C32128) * C49040 + (C32129 + C32130) * C3913 +
            C35220 * C49239 + C35221 * C3912) *
               C26394 +
           (C32353 * C49040 + C32354 * C3913 + C32355 * C49239 +
            C32356 * C3912) *
               C48896 +
           ((C32364 + C32363) * C49040 + (C32362 + C32361) * C3913 +
            (C32360 + C32359) * C49239 + (C32358 + C32357) * C3912) *
               C48888) *
              C48967 * C617 +
          ((C32927 * C3912 + C32928 * C49239 + (C32940 + C32939) * C3913 +
            (C32938 + C32937) * C49040) *
               C48888 +
           (C32343 * C3912 + C32344 * C49239 + (C32368 + C32367) * C3913 +
            (C32366 + C32365) * C49040) *
               C48896 +
           ((C32130 + C32129) * C3912 + (C32128 + C32127) * C49239 +
            (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
             C49082 * C1976) *
                C3913 +
            (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
             C49082 * C1980) *
                C49040) *
               C26394) *
              C48967 * C618) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C410 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C3913 +
             (C31237 + C31238) * C49239 + (C31239 + C31240) * C3912) *
                C26394 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C3913 +
             (C31241 + C31242) * C49239 + (C31243 + C31244) * C3912) *
                C48896 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C3913 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49239 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C3912) *
                C48888) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C3912 + (C33156 + C33155) * C49239 +
             (C33154 + C33153) * C3913 + (C33152 + C33151) * C49040) *
                C48888 +
            ((C32586 + C32585) * C3912 + (C32584 + C32583) * C49239 +
             (C32582 + C32581) * C3913 + (C32580 + C32579) * C49040) *
                C48896 +
            ((C35427 + C35426) * C3912 + (C35425 + C35424) * C49239 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C3913 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C26394) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C3913 +
             C35220 * C49239 + C35221 * C3912) *
                C26394 +
            (C32353 * C49040 + C32354 * C3913 + C32355 * C49239 +
             C32356 * C3912) *
                C48896 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C3913 +
             (C32360 + C32359) * C49239 + (C32358 + C32357) * C3912) *
                C48888) *
               C410) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C3913 +
             (C31237 + C31238) * C49239 + (C31239 + C31240) * C3912) *
                C26394 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C3913 +
             (C31241 + C31242) * C49239 + (C31243 + C31244) * C3912) *
                C48896 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C3913 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49239 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C3912) *
                C48888) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C3912 + (C31242 + C31241) * C49239 +
             (C32586 + C32585) * C3913 + (C32584 + C32583) * C49040) *
                C48888 +
            ((C31240 + C31239) * C3912 + (C31238 + C31237) * C49239 +
             (C35427 + C35426) * C3913 + (C35425 + C35424) * C49040) *
                C48896 +
            ((C31236 + C31235) * C3912 + (C31234 + C31233) * C49239 +
             (C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C3913 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C49040) *
                C26394) *
               C49269 -
           (((C31067 + C31068) * C49040 + (C31069 + C31070) * C3913 +
             (C30898 + C30897) * C49239 + (C30896 + C30895) * C3912) *
                C26394 +
            (C35220 * C49040 + C35221 * C3913 + (C30894 + C30893) * C49239 +
             (C30892 + C30891) * C3912) *
                C48896 +
            (C32355 * C49040 + C32356 * C3913 + (C30890 + C30889) * C49239 +
             (C30888 + C30887) * C3912) *
                C48888) *
               C824) *
              C48950 * C49265)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C3912 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49239 +
             (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
                C48888 +
            ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
             C32341 * C3913 + C32342 * C49040) *
                C48896 +
            C35025 * C26394) *
               C824 -
           (((C35424 + C35425) * C49040 + (C35426 + C35427) * C3913 +
             (C31237 + C31238) * C49239 + (C31239 + C31240) * C3912) *
                C26394 +
            ((C32583 + C32584) * C49040 + (C32585 + C32586) * C3913 +
             (C31241 + C31242) * C49239 + (C31243 + C31244) * C3912) *
                C48896 +
            ((C33155 + C33156) * C49040 + (C33157 + C33158) * C3913 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49239 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C3912) *
                C48888) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C3912 + (C33156 + C33155) * C49239 +
             (C33154 + C33153) * C3913 + (C33152 + C33151) * C49040) *
                C48888 +
            ((C32586 + C32585) * C3912 + (C32584 + C32583) * C49239 +
             (C32582 + C32581) * C3913 + (C32580 + C32579) * C49040) *
                C48896 +
            ((C35427 + C35426) * C3912 + (C35425 + C35424) * C49239 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C3913 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49040) *
                C26394) *
               C49269 -
           (((C32127 + C32128) * C49040 + (C32129 + C32130) * C3913 +
             C35220 * C49239 + C35221 * C3912) *
                C26394 +
            (C32353 * C49040 + C32354 * C3913 + C32355 * C49239 +
             C32356 * C3912) *
                C48896 +
            ((C32364 + C32363) * C49040 + (C32362 + C32361) * C3913 +
             (C32360 + C32359) * C49239 + (C32358 + C32357) * C3912) *
                C48888) *
               C824) *
              C49267) *
         C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C3912 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49239 +
            (C32357 + C32358) * C3913 + (C32359 + C32360) * C49040) *
               C48888 +
           ((C30887 + C30888) * C3912 + (C30889 + C30890) * C49239 +
            C32341 * C3913 + C32342 * C49040) *
               C48896 +
           C35025 * C26394) *
              C970 -
          (((C35424 + C35425) * C49040 + (C35426 + C35427) * C3913 +
            (C31237 + C31238) * C49239 + (C31239 + C31240) * C3912) *
               C26394 +
           ((C32583 + C32584) * C49040 + (C32585 + C32586) * C3913 +
            (C31241 + C31242) * C49239 + (C31243 + C31244) * C3912) *
               C48896 +
           ((C33155 + C33156) * C49040 + (C33157 + C33158) * C3913 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49239 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C3912) *
               C48888) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C3912 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C49239 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C3913 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49040) *
               C48888 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C3912 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C49239 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C3913 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49040) *
               C48896 +
           ((C30852 * C975 + C30850 * C982 + C30853 * C2928 + C49082 * C2933) *
                C3912 +
            (C30852 * C983 + C30850 * C990 + C30853 * C2932 + C49082 * C2940) *
                C49239 +
            (C30852 * C2399 + C30850 * C2409 + C30853 * C3384 +
             C49082 * C3389) *
                C3913 +
            (C30852 * C2410 + C30850 * C2417 + C30853 * C3390 +
             C49082 * C3393) *
                C49040) *
               C26394) *
              C972) *
         C48950 * C48916) /
        (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C3912 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C49239 +
                     (C48044 * C276 + C49078 * C287 + C48036 * C722 +
                      C49085 * C727 + C48050 * C2395 + C36607 * C2401) *
                         C3913 +
                     (C48044 * C286 + C49078 * C294 + C48036 * C728 +
                      C49085 * C737 + C48050 * C2402 + C36607 * C2413) *
                         C49040) *
                        C23637 +
                    ((C36648 + C36649 + C36650) * C3912 +
                     (C36651 + C36652 + C36653) * C49239 +
                     (C36854 + C36853 + C36852) * C3913 +
                     (C36851 + C36850 + C36849) * C49040) *
                        C48893) *
                       C48967 * C48950 * C110 -
                   (((C36843 + C36844 + C36845) * C49040 +
                     (C36846 + C36847 + C36848) * C3913 +
                     (C36659 + C36658 + C36657) * C49239 +
                     (C36656 + C36655 + C36654) * C3912) *
                        C48893 +
                    ((C36849 + C36850 + C36851) * C49040 +
                     (C36852 + C36853 + C36854) * C3913 +
                     (C36653 + C36652 + C36651) * C49239 +
                     (C36650 + C36649 + C36648) * C3912) *
                        C23637) *
                       C48967 * C48950 * C111 +
                   ((C36668 * C3912 + C36669 * C49239 +
                     (C36848 + C36847 + C36846) * C3913 +
                     (C36845 + C36844 + C36843) * C49040) *
                        C23637 +
                    ((C36665 + C36664 + C36663) * C3912 +
                     (C36662 + C36661 + C36660) * C49239 +
                     (C48044 * C273 + C49078 * C281 + C48036 * C725 +
                      C49085 * C733 + C48050 * C2742 + C36607 * C2743) *
                         C3913 +
                     (C48044 * C280 + C49078 * C291 + C48036 * C734 +
                      C49085 * C740 + C48050 * C2744 + C36607 * C2745) *
                         C49040) *
                        C48893) *
                       C48967 * C48950 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C48967 * C268 -
                    (((C38217 + C38218 + C38219) * C49040 +
                      (C38220 + C38221 + C38222) * C3913 + C38223 * C49239 +
                      C38224 * C3912) *
                         C48893 +
                     ((C48050 * C2404 + C36607 * C2414 + C48036 * C1505 +
                       C49085 * C1511 + C48044 * C626 + C49078 * C635) *
                          C49040 +
                      (C48050 * C2396 + C36607 * C2403 + C48036 * C1499 +
                       C49085 * C1506 + C48044 * C620 + C49078 * C625) *
                          C3913 +
                      (C38214 + C38213 + C38212) * C49239 +
                      (C38211 + C38210 + C38209) * C3912) *
                         C23637) *
                        C48967 * C49267) *
                       C270 +
                   (((C38215 * C3912 + C38216 * C49239 +
                      (C38222 + C38221 + C38220) * C3913 +
                      (C38219 + C38218 + C38217) * C49040) *
                         C23637 +
                     ((C36848 + C36847 + C36846) * C3912 +
                      (C36845 + C36844 + C36843) * C49239 +
                      (C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                       C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                          C3913 +
                      (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                       C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                          C49040) *
                         C48893) *
                        C48967 * C49267 -
                    (((C36843 + C36844 + C36845) * C49040 +
                      (C36846 + C36847 + C36848) * C3913 +
                      (C36659 + C36658 + C36657) * C49239 +
                      (C36656 + C36655 + C36654) * C3912) *
                         C48893 +
                     (C38223 * C49040 + C38224 * C3913 +
                      (C36653 + C36652 + C36651) * C49239 +
                      (C36650 + C36649 + C36648) * C3912) *
                         C23637) *
                        C48967 * C268) *
                       C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C410 -
                    (((C38431 + C38432 + C38433) * C49040 +
                      (C38434 + C38435 + C38436) * C3913 +
                      (C37031 + C37032 + C37033) * C49239 +
                      (C37034 + C37035 + C37036) * C3912) *
                         C48893 +
                     ((C48050 * C3386 + C36607 * C3391 + C48036 * C2402 +
                       C49085 * C2413 + C48044 * C728 + C49078 * C737) *
                          C49040 +
                      (C48050 * C3382 + C36607 * C3385 + C48036 * C2395 +
                       C49085 * C2401 + C48044 * C722 + C49078 * C727) *
                          C3913 +
                      (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C49239 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C3912) *
                         C23637) *
                        C49269) *
                       C48950 * C270 +
                   ((((C37036 + C37035 + C37034) * C3912 +
                      (C37033 + C37032 + C37031) * C49239 +
                      (C38436 + C38435 + C38434) * C3913 +
                      (C38433 + C38432 + C38431) * C49040) *
                         C23637 +
                     ((C37030 + C37029 + C37028) * C3912 +
                      (C37027 + C37026 + C37025) * C49239 +
                      (C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                       C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                          C3913 +
                      (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                       C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                          C49040) *
                         C48893) *
                        C49269 -
                    (((C36843 + C36844 + C36845) * C49040 +
                      (C36846 + C36847 + C36848) * C3913 +
                      (C36659 + C36658 + C36657) * C49239 +
                      (C36656 + C36655 + C36654) * C3912) *
                         C48893 +
                     (C38223 * C49040 + C38224 * C3913 +
                      (C36653 + C36652 + C36651) * C49239 +
                      (C36650 + C36649 + C36648) * C3912) *
                         C23637) *
                        C410) *
                       C48950 * C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[147] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C48967 * C550 -
                    (((C38217 + C38218 + C38219) * C49040 +
                      (C38220 + C38221 + C38222) * C3913 + C38223 * C49239 +
                      C38224 * C3912) *
                         C48893 +
                     ((C48050 * C2404 + C36607 * C2414 + C48036 * C1505 +
                       C49085 * C1511 + C48044 * C626 + C49078 * C635) *
                          C49040 +
                      (C48050 * C2396 + C36607 * C2403 + C48036 * C1499 +
                       C49085 * C1506 + C48044 * C620 + C49078 * C625) *
                          C3913 +
                      (C38214 + C38213 + C38212) * C49239 +
                      (C38211 + C38210 + C38209) * C3912) *
                         C23637) *
                        C48967 * C49267) *
                       C552 +
                   (((C38215 * C3912 + C38216 * C49239 +
                      (C38222 + C38221 + C38220) * C3913 +
                      (C38219 + C38218 + C38217) * C49040) *
                         C23637 +
                     ((C36848 + C36847 + C36846) * C3912 +
                      (C36845 + C36844 + C36843) * C49239 +
                      (C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                       C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                          C3913 +
                      (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                       C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                          C49040) *
                         C48893) *
                        C48967 * C49267 -
                    (((C36843 + C36844 + C36845) * C49040 +
                      (C36846 + C36847 + C36848) * C3913 +
                      (C36659 + C36658 + C36657) * C49239 +
                      (C36656 + C36655 + C36654) * C3912) *
                         C48893 +
                     (C38223 * C49040 + C38224 * C3913 +
                      (C36653 + C36652 + C36651) * C49239 +
                      (C36650 + C36649 + C36648) * C3912) *
                         C23637) *
                        C48967 * C550) *
                       C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C3912 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C49239 +
                     (C38209 + C38210 + C38211) * C3913 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C23637 +
                    ((C36648 + C36649 + C36650) * C3912 +
                     (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                     C38216 * C49040) *
                        C48893) *
                       C48967 * C616 -
                   (((C38217 + C38218 + C38219) * C49040 +
                     (C38220 + C38221 + C38222) * C3913 + C38223 * C49239 +
                     C38224 * C3912) *
                        C48893 +
                    ((C38789 + C38790 + C38791) * C49040 +
                     (C38792 + C38793 + C38794) * C3913 +
                     (C38214 + C38213 + C38212) * C49239 +
                     (C38211 + C38210 + C38209) * C3912) *
                        C23637) *
                       C48967 * C617 +
                   (((C38794 + C38793 + C38792) * C3912 +
                     (C38791 + C38790 + C38789) * C49239 +
                     (C48044 * C1301 + C49078 * C1308 + C48036 * C1969 +
                      C49085 * C1972 + C48050 * C9856 + C36607 * C9858) *
                         C3913 +
                     (C48044 * C1307 + C49078 * C1313 + C48036 * C1973 +
                      C49085 * C1978 + C48050 * C9859 + C36607 * C9862) *
                         C49040) *
                        C23637 +
                    ((C38222 + C38221 + C38220) * C3912 +
                     (C38219 + C38218 + C38217) * C49239 +
                     (C48044 * C1300 + C49078 * C1306 + C48036 * C1970 +
                      C49085 * C1974 + C48050 * C10120 + C36607 * C10121) *
                         C3913 +
                     (C48044 * C1305 + C49078 * C1312 + C48036 * C1975 +
                      C49085 * C1979 + C48050 * C10122 + C36607 * C10123) *
                         C49040) *
                        C48893) *
                       C48967 * C618) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C410 -
                    (((C38431 + C38432 + C38433) * C49040 +
                      (C38434 + C38435 + C38436) * C3913 +
                      (C37031 + C37032 + C37033) * C49239 +
                      (C37034 + C37035 + C37036) * C3912) *
                         C48893 +
                     ((C39001 + C39002 + C39003) * C49040 +
                      (C39004 + C39005 + C39006) * C3913 +
                      (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C49239 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C3912) *
                         C23637) *
                        C49269) *
                       C550 +
                   ((((C39006 + C39005 + C39004) * C3912 +
                      (C39003 + C39002 + C39001) * C49239 +
                      (C48044 * C1499 + C49078 * C1506 + C48036 * C2396 +
                       C49085 * C2403 + C48050 * C10324 + C36607 * C10327) *
                          C3913 +
                      (C48044 * C1505 + C49078 * C1511 + C48036 * C2404 +
                       C49085 * C2414 + C48050 * C10326 + C36607 * C10330) *
                          C49040) *
                         C23637 +
                     ((C38436 + C38435 + C38434) * C3912 +
                      (C38433 + C38432 + C38431) * C49239 +
                      (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                       C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                          C3913 +
                      (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                       C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                          C49040) *
                         C48893) *
                        C49269 -
                    (((C38217 + C38218 + C38219) * C49040 +
                      (C38220 + C38221 + C38222) * C3913 + C38223 * C49239 +
                      C38224 * C3912) *
                         C48893 +
                     ((C38789 + C38790 + C38791) * C49040 +
                      (C38792 + C38793 + C38794) * C3913 +
                      (C38214 + C38213 + C38212) * C49239 +
                      (C38211 + C38210 + C38209) * C3912) *
                         C23637) *
                        C410) *
                       C49267) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C824 -
                    (((C38431 + C38432 + C38433) * C49040 +
                      (C38434 + C38435 + C38436) * C3913 +
                      (C37031 + C37032 + C37033) * C49239 +
                      (C37034 + C37035 + C37036) * C3912) *
                         C48893 +
                     ((C39001 + C39002 + C39003) * C49040 +
                      (C39004 + C39005 + C39006) * C3913 +
                      (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C49239 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C3912) *
                         C23637) *
                        C49269) *
                       C48950 * C552 +
                   ((((C37036 + C37035 + C37034) * C3912 +
                      (C37033 + C37032 + C37031) * C49239 +
                      (C38436 + C38435 + C38434) * C3913 +
                      (C38433 + C38432 + C38431) * C49040) *
                         C23637 +
                     ((C37030 + C37029 + C37028) * C3912 +
                      (C37027 + C37026 + C37025) * C49239 +
                      (C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                       C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                          C3913 +
                      (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                       C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                          C49040) *
                         C48893) *
                        C49269 -
                    (((C36843 + C36844 + C36845) * C49040 +
                      (C36846 + C36847 + C36848) * C3913 +
                      (C36659 + C36658 + C36657) * C49239 +
                      (C36656 + C36655 + C36654) * C3912) *
                         C48893 +
                     (C38223 * C49040 + C38224 * C3913 +
                      (C36653 + C36652 + C36651) * C49239 +
                      (C36650 + C36649 + C36648) * C3912) *
                         C23637) *
                        C824) *
                       C48950 * C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C3912 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C49239 +
                      (C38209 + C38210 + C38211) * C3913 +
                      (C38212 + C38213 + C38214) * C49040) *
                         C23637 +
                     ((C36648 + C36649 + C36650) * C3912 +
                      (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                      C38216 * C49040) *
                         C48893) *
                        C824 -
                    (((C38431 + C38432 + C38433) * C49040 +
                      (C38434 + C38435 + C38436) * C3913 +
                      (C37031 + C37032 + C37033) * C49239 +
                      (C37034 + C37035 + C37036) * C3912) *
                         C48893 +
                     ((C39001 + C39002 + C39003) * C49040 +
                      (C39004 + C39005 + C39006) * C3913 +
                      (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C49239 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C3912) *
                         C23637) *
                        C49269) *
                       C268 +
                   ((((C39006 + C39005 + C39004) * C3912 +
                      (C39003 + C39002 + C39001) * C49239 +
                      (C48044 * C1499 + C49078 * C1506 + C48036 * C2396 +
                       C49085 * C2403 + C48050 * C10324 + C36607 * C10327) *
                          C3913 +
                      (C48044 * C1505 + C49078 * C1511 + C48036 * C2404 +
                       C49085 * C2414 + C48050 * C10326 + C36607 * C10330) *
                          C49040) *
                         C23637 +
                     ((C38436 + C38435 + C38434) * C3912 +
                      (C38433 + C38432 + C38431) * C49239 +
                      (C48044 * C1498 + C49078 * C1504 + C48036 * C2398 +
                       C49085 * C2407 + C48050 * C10325 + C36607 * C10328) *
                          C3913 +
                      (C48044 * C1503 + C49078 * C1510 + C48036 * C2408 +
                       C49085 * C2416 + C48050 * C10329 + C36607 * C10331) *
                          C49040) *
                         C48893) *
                        C49269 -
                    (((C38217 + C38218 + C38219) * C49040 +
                      (C38220 + C38221 + C38222) * C3913 + C38223 * C49239 +
                      C38224 * C3912) *
                         C48893 +
                     ((C38789 + C38790 + C38791) * C49040 +
                      (C38792 + C38793 + C38794) * C3913 +
                      (C38214 + C38213 + C38212) * C49239 +
                      (C38211 + C38210 + C38209) * C3912) *
                         C23637) *
                        C824) *
                       C49267) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[152] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C3912 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C49239 +
                     (C38209 + C38210 + C38211) * C3913 +
                     (C38212 + C38213 + C38214) * C49040) *
                        C23637 +
                    ((C36648 + C36649 + C36650) * C3912 +
                     (C36651 + C36652 + C36653) * C49239 + C38215 * C3913 +
                     C38216 * C49040) *
                        C48893) *
                       C970 -
                   (((C38431 + C38432 + C38433) * C49040 +
                     (C38434 + C38435 + C38436) * C3913 +
                     (C37031 + C37032 + C37033) * C49239 +
                     (C37034 + C37035 + C37036) * C3912) *
                        C48893 +
                    ((C39001 + C39002 + C39003) * C49040 +
                     (C39004 + C39005 + C39006) * C3913 +
                     (C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C49239 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C3912) *
                        C23637) *
                       C971 +
                   (((C48044 * C973 + C49078 * C978 + C48036 * C2930 +
                      C49085 * C2937 + C48050 * C3796 + C36607 * C3799) *
                         C3912 +
                     (C48044 * C979 + C49078 * C988 + C48036 * C2936 +
                      C49085 * C2942 + C48050 * C3800 + C36607 * C3805) *
                         C49239 +
                     (C48044 * C2395 + C49078 * C2401 + C48036 * C3382 +
                      C49085 * C3385 + C48050 * C11198 + C36607 * C11200) *
                         C3913 +
                     (C48044 * C2402 + C49078 * C2413 + C48036 * C3386 +
                      C49085 * C3391 + C48050 * C11201 + C36607 * C11204) *
                         C49040) *
                        C23637 +
                    ((C48044 * C974 + C49078 * C980 + C48036 * C2929 +
                      C49085 * C2935 + C48050 * C3797 + C36607 * C3801) *
                         C3912 +
                     (C48044 * C981 + C49078 * C989 + C48036 * C2934 +
                      C49085 * C2941 + C48050 * C3802 + C36607 * C3806) *
                         C49239 +
                     (C48044 * C2397 + C49078 * C2405 + C48036 * C3383 +
                      C49085 * C3387 + C48050 * C17901 + C36607 * C17902) *
                         C3913 +
                     (C48044 * C2406 + C49078 * C2415 + C48036 * C3388 +
                      C49085 * C3392 + C48050 * C17903 + C36607 * C17904) *
                         C49040) *
                        C48893) *
                       C972) *
                  C48950 * C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C30852 * C276 + C30850 * C287 + C30853 * C722 + C49082 * C727) *
                C1110 +
            (C30852 * C286 + C30850 * C294 + C30853 * C728 + C49082 * C737) *
                C49295 +
            (C30852 * C620 + C30850 * C625 + C30853 * C1499 + C49082 * C1506) *
                C1111 +
            (C30852 * C626 + C30850 * C635 + C30853 * C1505 + C49082 * C1511) *
                C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            (C31078 + C31077) * C1110 + (C31076 + C31075) * C49295 +
            (C32123 + C32124) * C1111 + (C32125 + C32126) * C49272) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
            (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
            (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
               C48893 +
           ((C32126 + C32125) * C49272 + (C32124 + C32123) * C1111 +
            (C31075 + C31076) * C49295 + (C31077 + C31078) * C1110 +
            (C30890 + C30889) * C49307 + (C30888 + C30887) * C1109) *
               C23637) *
              C48967 * C48950 * C111 +
          ((C30903 * C1109 + C30904 * C49307 + (C31074 + C31073) * C1110 +
            (C31072 + C31071) * C49295 + (C32130 + C32129) * C1111 +
            (C32128 + C32127) * C49272) *
               C23637 +
           (C30905 * C1109 + C30906 * C49307 + (C31070 + C31069) * C1110 +
            (C31068 + C31067) * C49295 +
            (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                C1111 +
            (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                C49272) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C48967 * C48950 * C110 -
          (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
           ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
           ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
           ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
              C48967 * C48950 * C111 +
          (C30911 * C49313 + C30912 * C49306 +
           ((C30902 + C30901) * C114 + (C30900 + C30899) * C48978) * C49293 +
           ((C30852 * C120 + C30850 * C133 + C30853 * C417 + C49082 * C428) *
                C114 +
            (C30852 * C132 + C30850 * C141 + C30853 * C429 + C49082 * C435) *
                C48978) *
               C49276) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C114 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C48978) *
               C23637 +
           ((C33831 + C33832 + C33833 + C33834) * C114 +
            (C33835 + C33836 + C33837 + C33838) * C48978) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C33839 + C33840 + C33841 + C33842) * C48978 +
            (C33843 + C33844 + C33845 + C33846) * C114) *
               C48893 +
           ((C33838 + C33837 + C33836 + C33835) * C48978 +
            (C33834 + C33833 + C33832 + C33831) * C114) *
               C23637) *
              C48967 * C48950 * C111 +
          (((C33846 + C33845 + C33844 + C33843) * C114 +
            (C33842 + C33841 + C33840 + C33839) * C48978) *
               C23637 +
           ((C33794 * C118 + C49315 * C128 + C33795 * C413 + C49312 * C421 +
             C33796 * C976 + C49303 * C984 + C33797 * C2931 + C49288 * C2938) *
                C114 +
            (C33794 * C129 + C49315 * C139 + C33795 * C420 + C49312 * C431 +
             C33796 * C985 + C49303 * C991 + C33797 * C2939 + C49288 * C2943) *
                C48978) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C48967 * C268 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C30853 * C1973 + C49082 * C1978 + C30852 * C1307 +
              C30850 * C1313) *
                 C49272 +
             (C30853 * C1969 + C49082 * C1972 + C30852 * C1301 +
              C30850 * C1308) *
                 C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C1109 + C32342 * C49307 + C32343 * C1110 +
             C32344 * C49295 + (C32368 + C32367) * C1111 +
             (C32366 + C32365) * C49272) *
                C23637 +
            ((C31074 + C31073) * C1109 + (C31072 + C31071) * C49307 +
             (C32130 + C32129) * C1110 + (C32128 + C32127) * C49295 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C1111 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C48967 * C268 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C48967 * C49267) *
              C270 +
          ((((C31078 + C31077) * C114 + (C31076 + C31075) * C48978) * C49313 +
            ((C31074 + C31073) * C114 + (C31072 + C31071) * C48978) * C49306 +
            ((C31070 + C31069) * C114 + (C31068 + C31067) * C48978) * C49293 +
            ((C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                 C114 +
             (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C48967 * C268 -
           (((C33993 + C33994 + C33995 + C33996) * C48978 +
             (C33997 + C33998 + C33999 + C34000) * C114) *
                C48893 +
            ((C33797 * C3386 + C49288 * C3391 + C33796 * C2402 +
              C49303 * C2413 + C33795 * C728 + C49312 * C737 + C33794 * C286 +
              C49315 * C294) *
                 C48978 +
             (C33797 * C3382 + C49288 * C3385 + C33796 * C2395 +
              C49303 * C2401 + C33795 * C722 + C49312 * C727 + C33794 * C276 +
              C49315 * C287) *
                 C114) *
                C23637) *
               C48967 * C49267) *
              C270 +
          ((((C34000 + C33999 + C33998 + C33997) * C114 +
             (C33996 + C33995 + C33994 + C33993) * C48978) *
                C23637 +
            ((C33794 * C274 + C49315 * C283 + C33795 * C724 + C49312 * C731 +
              C33796 * C2399 + C49303 * C2409 + C33797 * C3384 +
              C49288 * C3389) *
                 C114 +
             (C33794 * C282 + C49315 * C292 + C33795 * C732 + C49312 * C739 +
              C33796 * C2410 + C49303 * C2417 + C33797 * C3390 +
              C49288 * C3393) *
                 C48978) *
                C48893) *
               C48967 * C49267 -
           (((C33839 + C33840 + C33841 + C33842) * C48978 +
             (C33843 + C33844 + C33845 + C33846) * C114) *
                C48893 +
            ((C33838 + C33837 + C33836 + C33835) * C48978 +
             (C33834 + C33833 + C33832 + C33831) * C114) *
                C23637) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C30853 * C2404 + C49082 * C2414 + C30852 * C1505 +
              C30850 * C1511) *
                 C49272 +
             (C30853 * C2396 + C49082 * C2403 + C30852 * C1499 +
              C30850 * C1506) *
                 C1111 +
             (C30853 * C2402 + C49082 * C2413 + C30852 * C728 + C30850 * C737) *
                 C49295 +
             (C30853 * C2395 + C49082 * C2401 + C30852 * C722 + C30850 * C727) *
                 C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C1109 + (C31242 + C31241) * C49307 +
             (C32586 + C32585) * C1110 + (C32584 + C32583) * C49295 +
             (C32582 + C32581) * C1111 + (C32580 + C32579) * C49272) *
                C23637 +
            ((C31240 + C31239) * C1109 + (C31238 + C31237) * C49307 +
             (C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C1110 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C49295 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C1111 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C410 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C114 + (C31242 + C31241) * C48978) * C49313 +
            ((C31240 + C31239) * C114 + (C31238 + C31237) * C48978) * C49306 +
            ((C31236 + C31235) * C114 + (C31234 + C31233) * C48978) * C49293 +
            ((C30852 * C412 + C30850 * C419 + C30853 * C977 + C49082 * C986) *
                 C114 +
             (C30852 * C418 + C30850 * C430 + C30853 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C410 -
           (((C34147 + C34148 + C34149 + C34150) * C48978 +
             (C34151 + C34152 + C34153 + C34154) * C114) *
                C48893 +
            ((C33797 * C3800 + C49288 * C3805 + C33796 * C2936 +
              C49303 * C2942 + C33795 * C979 + C49312 * C988 + C33794 * C426 +
              C49315 * C434) *
                 C48978 +
             (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 +
              C49303 * C2937 + C33795 * C973 + C49312 * C978 + C33794 * C416 +
              C49315 * C427) *
                 C114) *
                C23637) *
               C49269) *
              C48950 * C270 +
          ((((C34154 + C34153 + C34152 + C34151) * C114 +
             (C34150 + C34149 + C34148 + C34147) * C48978) *
                C23637 +
            ((C33794 * C414 + C49315 * C423 + C33795 * C975 + C49312 * C982 +
              C33796 * C2928 + C49303 * C2933 + C33797 * C3798 +
              C49288 * C3803) *
                 C114 +
             (C33794 * C422 + C49315 * C432 + C33795 * C983 + C49312 * C990 +
              C33796 * C2932 + C49303 * C2940 + C33797 * C3804 +
              C49288 * C3807) *
                 C48978) *
                C48893) *
               C49269 -
           (((C33839 + C33840 + C33841 + C33842) * C48978 +
             (C33843 + C33844 + C33845 + C33846) * C114) *
                C48893 +
            ((C33838 + C33837 + C33836 + C33835) * C48978 +
             (C33834 + C33833 + C33832 + C33831) * C114) *
                C23637) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C48967 * C550 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C30853 * C1973 + C49082 * C1978 + C30852 * C1307 +
              C30850 * C1313) *
                 C49272 +
             (C30853 * C1969 + C49082 * C1972 + C30852 * C1301 +
              C30850 * C1308) *
                 C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C1109 + C32342 * C49307 + C32343 * C1110 +
             C32344 * C49295 + (C32368 + C32367) * C1111 +
             (C32366 + C32365) * C49272) *
                C23637 +
            ((C31074 + C31073) * C1109 + (C31072 + C31071) * C49307 +
             (C32130 + C32129) * C1110 + (C32128 + C32127) * C49295 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C1111 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C48967 * C550 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C48967 * C49267) *
              C552 +
          ((((C31078 + C31077) * C114 + (C31076 + C31075) * C48978) * C49313 +
            ((C31074 + C31073) * C114 + (C31072 + C31071) * C48978) * C49306 +
            ((C31070 + C31069) * C114 + (C31068 + C31067) * C48978) * C49293 +
            ((C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                 C114 +
             (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C48967 * C550 -
           (((C33993 + C33994 + C33995 + C33996) * C48978 +
             (C33997 + C33998 + C33999 + C34000) * C114) *
                C48893 +
            ((C33797 * C3386 + C49288 * C3391 + C33796 * C2402 +
              C49303 * C2413 + C33795 * C728 + C49312 * C737 + C33794 * C286 +
              C49315 * C294) *
                 C48978 +
             (C33797 * C3382 + C49288 * C3385 + C33796 * C2395 +
              C49303 * C2401 + C33795 * C722 + C49312 * C727 + C33794 * C276 +
              C49315 * C287) *
                 C114) *
                C23637) *
               C48967 * C49267) *
              C552 +
          ((((C34000 + C33999 + C33998 + C33997) * C114 +
             (C33996 + C33995 + C33994 + C33993) * C48978) *
                C23637 +
            ((C33794 * C274 + C49315 * C283 + C33795 * C724 + C49312 * C731 +
              C33796 * C2399 + C49303 * C2409 + C33797 * C3384 +
              C49288 * C3389) *
                 C114 +
             (C33794 * C282 + C49315 * C292 + C33795 * C732 + C49312 * C739 +
              C33796 * C2410 + C49303 * C2417 + C33797 * C3390 +
              C49288 * C3393) *
                 C48978) *
                C48893) *
               C48967 * C49267 -
           (((C33839 + C33840 + C33841 + C33842) * C48978 +
             (C33843 + C33844 + C33845 + C33846) * C114) *
                C48893 +
            ((C33838 + C33837 + C33836 + C33835) * C48978 +
             (C33834 + C33833 + C33832 + C33831) * C114) *
                C23637) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
            C32927 * C1111 + C32928 * C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
            C32344 * C49272) *
               C48893) *
              C48967 * C616 -
          (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
            C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
            C32356 * C1109) *
               C48893 +
           ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
            (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
            (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
               C23637) *
              C48967 * C617 +
          ((C32927 * C1109 + C32928 * C49307 + (C32940 + C32939) * C1110 +
            (C32938 + C32937) * C49295 +
            (C30852 * C1805 + C30850 * C1808 + C30853 * C9370 +
             C49082 * C9373) *
                C1111 +
            (C30852 * C1809 + C30850 * C1814 + C30853 * C9372 +
             C49082 * C9376) *
                C49272) *
               C23637 +
           (C32343 * C1109 + C32344 * C49307 + (C32368 + C32367) * C1110 +
            (C32366 + C32365) * C49295 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C1111 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49272) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C48967 * C616 -
          (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
           ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
           ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
           ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                C48978 +
            (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                C114) *
               C49313) *
              C48967 * C617 +
          (((C30852 * C620 + C30850 * C625 + C30853 * C1499 + C49082 * C1506) *
                C114 +
            (C30852 * C626 + C30850 * C635 + C30853 * C1505 + C49082 * C1511) *
                C48978) *
               C49313 +
           ((C30852 * C621 + C30850 * C627 + C30853 * C1498 + C49082 * C1504) *
                C114 +
            (C30852 * C628 + C30850 * C636 + C30853 * C1503 + C49082 * C1510) *
                C48978) *
               C49306 +
           ((C30852 * C622 + C30850 * C629 + C30853 * C1497 + C49082 * C1502) *
                C114 +
            (C30852 * C630 + C30850 * C637 + C30853 * C1501 + C49082 * C1509) *
                C48978) *
               C49293 +
           ((C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                C114 +
            (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                C48978) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C114 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C48978) *
               C23637 +
           ((C33831 + C33832 + C33833 + C33834) * C114 +
            (C33835 + C33836 + C33837 + C33838) * C48978) *
               C48893) *
              C48967 * C616 -
          (((C33993 + C33994 + C33995 + C33996) * C48978 +
            (C33997 + C33998 + C33999 + C34000) * C114) *
               C48893 +
           ((C33797 * C3386 + C49288 * C3391 + C33796 * C2402 + C49303 * C2413 +
             C33795 * C728 + C49312 * C737 + C33794 * C286 + C49315 * C294) *
                C48978 +
            (C33797 * C3382 + C49288 * C3385 + C33796 * C2395 + C49303 * C2401 +
             C33795 * C722 + C49312 * C727 + C33794 * C276 + C49315 * C287) *
                C114) *
               C23637) *
              C48967 * C617 +
          (((C33794 * C620 + C49315 * C625 + C33795 * C1499 + C49312 * C1506 +
             C33796 * C2396 + C49303 * C2403 + C33797 * C10324 +
             C49288 * C10327) *
                C114 +
            (C33794 * C626 + C49315 * C635 + C33795 * C1505 + C49312 * C1511 +
             C33796 * C2404 + C49303 * C2414 + C33797 * C10326 +
             C49288 * C10330) *
                C48978) *
               C23637 +
           ((C33794 * C621 + C49315 * C627 + C33795 * C1498 + C49312 * C1504 +
             C33796 * C2398 + C49303 * C2407 + C33797 * C10325 +
             C49288 * C10328) *
                C114 +
            (C33794 * C628 + C49315 * C636 + C33795 * C1503 + C49312 * C1510 +
             C33796 * C2408 + C49303 * C2416 + C33797 * C10329 +
             C49288 * C10331) *
                C48978) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C1109 + (C33156 + C33155) * C49307 +
             (C33154 + C33153) * C1110 + (C33152 + C33151) * C49295 +
             (C30852 * C1969 + C30850 * C1972 + C30853 * C9856 +
              C49082 * C9858) *
                 C1111 +
             (C30852 * C1973 + C30850 * C1978 + C30853 * C9859 +
              C49082 * C9862) *
                 C49272) *
                C23637 +
            ((C32586 + C32585) * C1109 + (C32584 + C32583) * C49307 +
             (C32582 + C32581) * C1110 + (C32580 + C32579) * C49295 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C1111 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C410 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C550 +
          ((((C30852 * C722 + C30850 * C727 + C30853 * C2395 + C49082 * C2401) *
                 C114 +
             (C30852 * C728 + C30850 * C737 + C30853 * C2402 + C49082 * C2413) *
                 C48978) *
                C49313 +
            ((C30852 * C723 + C30850 * C729 + C30853 * C2397 + C49082 * C2405) *
                 C114 +
             (C30852 * C730 + C30850 * C738 + C30853 * C2406 + C49082 * C2415) *
                 C48978) *
                C49306 +
            ((C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C114 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C48978) *
                C49293 +
            ((C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C114 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C410 -
           (((C34147 + C34148 + C34149 + C34150) * C48978 +
             (C34151 + C34152 + C34153 + C34154) * C114) *
                C48893 +
            ((C33797 * C3800 + C49288 * C3805 + C33796 * C2936 +
              C49303 * C2942 + C33795 * C979 + C49312 * C988 + C33794 * C426 +
              C49315 * C434) *
                 C48978 +
             (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 +
              C49303 * C2937 + C33795 * C973 + C49312 * C978 + C33794 * C416 +
              C49315 * C427) *
                 C114) *
                C23637) *
               C49269) *
              C550 +
          ((((C33794 * C722 + C49315 * C727 + C33795 * C2395 + C49312 * C2401 +
              C33796 * C3382 + C49303 * C3385 + C33797 * C11198 +
              C49288 * C11200) *
                 C114 +
             (C33794 * C728 + C49315 * C737 + C33795 * C2402 + C49312 * C2413 +
              C33796 * C3386 + C49303 * C3391 + C33797 * C11201 +
              C49288 * C11204) *
                 C48978) *
                C23637 +
            ((C33794 * C723 + C49315 * C729 + C33795 * C2397 + C49312 * C2405 +
              C33796 * C3383 + C49303 * C3387 + C33797 * C17901 +
              C49288 * C17902) *
                 C114 +
             (C33794 * C730 + C49315 * C738 + C33795 * C2406 + C49312 * C2415 +
              C33796 * C3388 + C49303 * C3392 + C33797 * C17903 +
              C49288 * C17904) *
                 C48978) *
                C48893) *
               C49269 -
           (((C33993 + C33994 + C33995 + C33996) * C48978 +
             (C33997 + C33998 + C33999 + C34000) * C114) *
                C48893 +
            ((C33797 * C3386 + C49288 * C3391 + C33796 * C2402 +
              C49303 * C2413 + C33795 * C728 + C49312 * C737 + C33794 * C286 +
              C49315 * C294) *
                 C48978 +
             (C33797 * C3382 + C49288 * C3385 + C33796 * C2395 +
              C49303 * C2401 + C33795 * C722 + C49312 * C727 + C33794 * C276 +
              C49315 * C287) *
                 C114) *
                C23637) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C1109 + (C31242 + C31241) * C49307 +
             (C32586 + C32585) * C1110 + (C32584 + C32583) * C49295 +
             (C32582 + C32581) * C1111 + (C32580 + C32579) * C49272) *
                C23637 +
            ((C31240 + C31239) * C1109 + (C31238 + C31237) * C49307 +
             (C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C1110 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C49295 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C1111 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C824 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C114 + (C31242 + C31241) * C48978) * C49313 +
            ((C31240 + C31239) * C114 + (C31238 + C31237) * C48978) * C49306 +
            ((C31236 + C31235) * C114 + (C31234 + C31233) * C48978) * C49293 +
            ((C30852 * C412 + C30850 * C419 + C30853 * C977 + C49082 * C986) *
                 C114 +
             (C30852 * C418 + C30850 * C430 + C30853 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C824 -
           (((C34147 + C34148 + C34149 + C34150) * C48978 +
             (C34151 + C34152 + C34153 + C34154) * C114) *
                C48893 +
            ((C33797 * C3800 + C49288 * C3805 + C33796 * C2936 +
              C49303 * C2942 + C33795 * C979 + C49312 * C988 + C33794 * C426 +
              C49315 * C434) *
                 C48978 +
             (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 +
              C49303 * C2937 + C33795 * C973 + C49312 * C978 + C33794 * C416 +
              C49315 * C427) *
                 C114) *
                C23637) *
               C49269) *
              C48950 * C552 +
          ((((C34154 + C34153 + C34152 + C34151) * C114 +
             (C34150 + C34149 + C34148 + C34147) * C48978) *
                C23637 +
            ((C33794 * C414 + C49315 * C423 + C33795 * C975 + C49312 * C982 +
              C33796 * C2928 + C49303 * C2933 + C33797 * C3798 +
              C49288 * C3803) *
                 C114 +
             (C33794 * C422 + C49315 * C432 + C33795 * C983 + C49312 * C990 +
              C33796 * C2932 + C49303 * C2940 + C33797 * C3804 +
              C49288 * C3807) *
                 C48978) *
                C48893) *
               C49269 -
           (((C33839 + C33840 + C33841 + C33842) * C48978 +
             (C33843 + C33844 + C33845 + C33846) * C114) *
                C48893 +
            ((C33838 + C33837 + C33836 + C33835) * C48978 +
             (C33834 + C33833 + C33832 + C33831) * C114) *
                C23637) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C1109 + (C33156 + C33155) * C49307 +
             (C33154 + C33153) * C1110 + (C33152 + C33151) * C49295 +
             (C30852 * C1969 + C30850 * C1972 + C30853 * C9856 +
              C49082 * C9858) *
                 C1111 +
             (C30852 * C1973 + C30850 * C1978 + C30853 * C9859 +
              C49082 * C9862) *
                 C49272) *
                C23637 +
            ((C32586 + C32585) * C1109 + (C32584 + C32583) * C49307 +
             (C32582 + C32581) * C1110 + (C32580 + C32579) * C49295 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C1111 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C824 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C268 +
          ((((C30852 * C722 + C30850 * C727 + C30853 * C2395 + C49082 * C2401) *
                 C114 +
             (C30852 * C728 + C30850 * C737 + C30853 * C2402 + C49082 * C2413) *
                 C48978) *
                C49313 +
            ((C30852 * C723 + C30850 * C729 + C30853 * C2397 + C49082 * C2405) *
                 C114 +
             (C30852 * C730 + C30850 * C738 + C30853 * C2406 + C49082 * C2415) *
                 C48978) *
                C49306 +
            ((C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C114 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C48978) *
                C49293 +
            ((C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C114 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
              C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                 C114 +
             (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
              C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                 C48978) *
                C23637 +
            ((C33831 + C33832 + C33833 + C33834) * C114 +
             (C33835 + C33836 + C33837 + C33838) * C48978) *
                C48893) *
               C824 -
           (((C34147 + C34148 + C34149 + C34150) * C48978 +
             (C34151 + C34152 + C34153 + C34154) * C114) *
                C48893 +
            ((C33797 * C3800 + C49288 * C3805 + C33796 * C2936 +
              C49303 * C2942 + C33795 * C979 + C49312 * C988 + C33794 * C426 +
              C49315 * C434) *
                 C48978 +
             (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 +
              C49303 * C2937 + C33795 * C973 + C49312 * C978 + C33794 * C416 +
              C49315 * C427) *
                 C114) *
                C23637) *
               C49269) *
              C268 +
          ((((C33794 * C722 + C49315 * C727 + C33795 * C2395 + C49312 * C2401 +
              C33796 * C3382 + C49303 * C3385 + C33797 * C11198 +
              C49288 * C11200) *
                 C114 +
             (C33794 * C728 + C49315 * C737 + C33795 * C2402 + C49312 * C2413 +
              C33796 * C3386 + C49303 * C3391 + C33797 * C11201 +
              C49288 * C11204) *
                 C48978) *
                C23637 +
            ((C33794 * C723 + C49315 * C729 + C33795 * C2397 + C49312 * C2405 +
              C33796 * C3383 + C49303 * C3387 + C33797 * C17901 +
              C49288 * C17902) *
                 C114 +
             (C33794 * C730 + C49315 * C738 + C33795 * C2406 + C49312 * C2415 +
              C33796 * C3388 + C49303 * C3392 + C33797 * C17903 +
              C49288 * C17904) *
                 C48978) *
                C48893) *
               C49269 -
           (((C33993 + C33994 + C33995 + C33996) * C48978 +
             (C33997 + C33998 + C33999 + C34000) * C114) *
                C48893 +
            ((C33797 * C3386 + C49288 * C3391 + C33796 * C2402 +
              C49303 * C2413 + C33795 * C728 + C49312 * C737 + C33794 * C286 +
              C49315 * C294) *
                 C48978 +
             (C33797 * C3382 + C49288 * C3385 + C33796 * C2395 +
              C49303 * C2401 + C33795 * C722 + C49312 * C727 + C33794 * C276 +
              C49315 * C287) *
                 C114) *
                C23637) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
            C32927 * C1111 + C32928 * C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
            C32344 * C49272) *
               C48893) *
              C970 -
          (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
            (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
            (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
               C48893 +
           ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
            (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49307 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C1109) *
               C23637) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C1109 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C49307 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C1110 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49295 +
            (C30852 * C2396 + C30850 * C2403 + C30853 * C10324 +
             C49082 * C10327) *
                C1111 +
            (C30852 * C2404 + C30850 * C2414 + C30853 * C10326 +
             C49082 * C10330) *
                C49272) *
               C23637 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C1109 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C49307 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C1110 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49295 +
            (C30852 * C2398 + C30850 * C2407 + C30853 * C10325 +
             C49082 * C10328) *
                C1111 +
            (C30852 * C2408 + C30850 * C2416 + C30853 * C10329 +
             C49082 * C10331) *
                C49272) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C970 -
          (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
           ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
           ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
           ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C48978 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C114) *
               C49313) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C114 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C48978) *
               C49313 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C114 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C48978) *
               C49306 +
           ((C30852 * C975 + C30850 * C982 + C30853 * C2928 + C49082 * C2933) *
                C114 +
            (C30852 * C983 + C30850 * C990 + C30853 * C2932 + C49082 * C2940) *
                C48978) *
               C49293 +
           ((C30852 * C976 + C30850 * C984 + C30853 * C2931 + C49082 * C2938) *
                C114 +
            (C30852 * C985 + C30850 * C991 + C30853 * C2939 + C49082 * C2943) *
                C48978) *
               C49276) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33794 * C115 + C49315 * C122 + C33795 * C416 + C49312 * C427 +
             C33796 * C973 + C49303 * C978 + C33797 * C2930 + C49288 * C2937) *
                C114 +
            (C33794 * C123 + C49315 * C136 + C33795 * C426 + C49312 * C434 +
             C33796 * C979 + C49303 * C988 + C33797 * C2936 + C49288 * C2942) *
                C48978) *
               C23637 +
           ((C33831 + C33832 + C33833 + C33834) * C114 +
            (C33835 + C33836 + C33837 + C33838) * C48978) *
               C48893) *
              C970 -
          (((C34147 + C34148 + C34149 + C34150) * C48978 +
            (C34151 + C34152 + C34153 + C34154) * C114) *
               C48893 +
           ((C33797 * C3800 + C49288 * C3805 + C33796 * C2936 + C49303 * C2942 +
             C33795 * C979 + C49312 * C988 + C33794 * C426 + C49315 * C434) *
                C48978 +
            (C33797 * C3796 + C49288 * C3799 + C33796 * C2930 + C49303 * C2937 +
             C33795 * C973 + C49312 * C978 + C33794 * C416 + C49315 * C427) *
                C114) *
               C23637) *
              C971 +
          (((C33794 * C973 + C49315 * C978 + C33795 * C2930 + C49312 * C2937 +
             C33796 * C3796 + C49303 * C3799 + C33797 * C17987 +
             C49288 * C17990) *
                C114 +
            (C33794 * C979 + C49315 * C988 + C33795 * C2936 + C49312 * C2942 +
             C33796 * C3800 + C49303 * C3805 + C33797 * C17989 +
             C49288 * C17993) *
                C48978) *
               C23637 +
           ((C33794 * C974 + C49315 * C980 + C33795 * C2929 + C49312 * C2935 +
             C33796 * C3797 + C49303 * C3801 + C33797 * C17988 +
             C49288 * C17991) *
                C114 +
            (C33794 * C981 + C49315 * C989 + C33795 * C2934 + C49312 * C2941 +
             C33796 * C3802 + C49303 * C3806 + C33797 * C17992 +
             C49288 * C17994) *
                C48978) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C114 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C48978) *
                        C48888 +
                    ((C36648 + C36649 + C36650) * C114 +
                     (C36651 + C36652 + C36653) * C48978) *
                        C48896 +
                    C36672 * C26394) *
                       C48967 * C48950 * C110 -
                   (((C36660 + C36661 + C36662) * C48978 +
                     (C36663 + C36664 + C36665) * C114) *
                        C26394 +
                    ((C36659 + C36658 + C36657) * C48978 +
                     (C36656 + C36655 + C36654) * C114) *
                        C48896 +
                    ((C36653 + C36652 + C36651) * C48978 +
                     (C36650 + C36649 + C36648) * C114) *
                        C48888) *
                       C48967 * C48950 * C111 +
                   (C36672 * C48888 +
                    ((C36665 + C36664 + C36663) * C114 +
                     (C36662 + C36661 + C36660) * C48978) *
                        C48896 +
                    ((C48044 * C119 + C49078 * C130 + C48036 * C412 +
                      C49085 * C419 + C48050 * C977 + C36607 * C986) *
                         C114 +
                     (C48044 * C131 + C49078 * C140 + C48036 * C418 +
                      C49085 * C430 + C48050 * C987 + C36607 * C992) *
                         C48978) *
                        C26394) *
                       C48967 * C48950 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C48967 * C268 -
                    (((C36843 + C36844 + C36845) * C48978 +
                      (C36846 + C36847 + C36848) * C114) *
                         C26394 +
                     ((C36849 + C36850 + C36851) * C48978 +
                      (C36852 + C36853 + C36854) * C114) *
                         C48896 +
                     ((C48050 * C2402 + C36607 * C2413 + C48036 * C728 +
                       C49085 * C737 + C48044 * C286 + C49078 * C294) *
                          C48978 +
                      (C48050 * C2395 + C36607 * C2401 + C48036 * C722 +
                       C49085 * C727 + C48044 * C276 + C49078 * C287) *
                          C114) *
                         C48888) *
                        C48967 * C49267) *
                       C270 +
                   ((((C36854 + C36853 + C36852) * C114 +
                      (C36851 + C36850 + C36849) * C48978) *
                         C48888 +
                     ((C36848 + C36847 + C36846) * C114 +
                      (C36845 + C36844 + C36843) * C48978) *
                         C48896 +
                     ((C48044 * C273 + C49078 * C281 + C48036 * C725 +
                       C49085 * C733 + C48050 * C2742 + C36607 * C2743) *
                          C114 +
                      (C48044 * C280 + C49078 * C291 + C48036 * C734 +
                       C49085 * C740 + C48050 * C2744 + C36607 * C2745) *
                          C48978) *
                         C26394) *
                        C48967 * C49267 -
                    (((C36660 + C36661 + C36662) * C48978 +
                      (C36663 + C36664 + C36665) * C114) *
                         C26394 +
                     ((C36659 + C36658 + C36657) * C48978 +
                      (C36656 + C36655 + C36654) * C114) *
                         C48896 +
                     ((C36653 + C36652 + C36651) * C48978 +
                      (C36650 + C36649 + C36648) * C114) *
                         C48888) *
                        C48967 * C268) *
                       C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C410 -
                    (((C37025 + C37026 + C37027) * C48978 +
                      (C37028 + C37029 + C37030) * C114) *
                         C26394 +
                     ((C37031 + C37032 + C37033) * C48978 +
                      (C37034 + C37035 + C37036) * C114) *
                         C48896 +
                     ((C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C48978 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C114) *
                         C48888) *
                        C49269) *
                       C48950 * C270 +
                   ((((C37036 + C37035 + C37034) * C114 +
                      (C37033 + C37032 + C37031) * C48978) *
                         C48888 +
                     ((C37030 + C37029 + C37028) * C114 +
                      (C37027 + C37026 + C37025) * C48978) *
                         C48896 +
                     ((C48044 * C413 + C49078 * C421 + C48036 * C976 +
                       C49085 * C984 + C48050 * C2931 + C36607 * C2938) *
                          C114 +
                      (C48044 * C420 + C49078 * C431 + C48036 * C985 +
                       C49085 * C991 + C48050 * C2939 + C36607 * C2943) *
                          C48978) *
                         C26394) *
                        C49269 -
                    (((C36660 + C36661 + C36662) * C48978 +
                      (C36663 + C36664 + C36665) * C114) *
                         C26394 +
                     ((C36659 + C36658 + C36657) * C48978 +
                      (C36656 + C36655 + C36654) * C114) *
                         C48896 +
                     ((C36653 + C36652 + C36651) * C48978 +
                      (C36650 + C36649 + C36648) * C114) *
                         C48888) *
                        C410) *
                       C48950 * C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C48967 * C550 -
                    (((C36843 + C36844 + C36845) * C48978 +
                      (C36846 + C36847 + C36848) * C114) *
                         C26394 +
                     ((C36849 + C36850 + C36851) * C48978 +
                      (C36852 + C36853 + C36854) * C114) *
                         C48896 +
                     ((C48050 * C2402 + C36607 * C2413 + C48036 * C728 +
                       C49085 * C737 + C48044 * C286 + C49078 * C294) *
                          C48978 +
                      (C48050 * C2395 + C36607 * C2401 + C48036 * C722 +
                       C49085 * C727 + C48044 * C276 + C49078 * C287) *
                          C114) *
                         C48888) *
                        C48967 * C49267) *
                       C552 +
                   ((((C36854 + C36853 + C36852) * C114 +
                      (C36851 + C36850 + C36849) * C48978) *
                         C48888 +
                     ((C36848 + C36847 + C36846) * C114 +
                      (C36845 + C36844 + C36843) * C48978) *
                         C48896 +
                     ((C48044 * C273 + C49078 * C281 + C48036 * C725 +
                       C49085 * C733 + C48050 * C2742 + C36607 * C2743) *
                          C114 +
                      (C48044 * C280 + C49078 * C291 + C48036 * C734 +
                       C49085 * C740 + C48050 * C2744 + C36607 * C2745) *
                          C48978) *
                         C26394) *
                        C48967 * C49267 -
                    (((C36660 + C36661 + C36662) * C48978 +
                      (C36663 + C36664 + C36665) * C114) *
                         C26394 +
                     ((C36659 + C36658 + C36657) * C48978 +
                      (C36656 + C36655 + C36654) * C114) *
                         C48896 +
                     ((C36653 + C36652 + C36651) * C48978 +
                      (C36650 + C36649 + C36648) * C114) *
                         C48888) *
                        C48967 * C550) *
                       C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C114 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C48978) *
                        C48888 +
                    ((C36648 + C36649 + C36650) * C114 +
                     (C36651 + C36652 + C36653) * C48978) *
                        C48896 +
                    C36672 * C26394) *
                       C48967 * C616 -
                   (((C36843 + C36844 + C36845) * C48978 +
                     (C36846 + C36847 + C36848) * C114) *
                        C26394 +
                    ((C36849 + C36850 + C36851) * C48978 +
                     (C36852 + C36853 + C36854) * C114) *
                        C48896 +
                    ((C48050 * C2402 + C36607 * C2413 + C48036 * C728 +
                      C49085 * C737 + C48044 * C286 + C49078 * C294) *
                         C48978 +
                     (C48050 * C2395 + C36607 * C2401 + C48036 * C722 +
                      C49085 * C727 + C48044 * C276 + C49078 * C287) *
                         C114) *
                        C48888) *
                       C48967 * C617 +
                   (((C48044 * C620 + C49078 * C625 + C48036 * C1499 +
                      C49085 * C1506 + C48050 * C2396 + C36607 * C2403) *
                         C114 +
                     (C48044 * C626 + C49078 * C635 + C48036 * C1505 +
                      C49085 * C1511 + C48050 * C2404 + C36607 * C2414) *
                         C48978) *
                        C48888 +
                    ((C48044 * C621 + C49078 * C627 + C48036 * C1498 +
                      C49085 * C1504 + C48050 * C2398 + C36607 * C2407) *
                         C114 +
                     (C48044 * C628 + C49078 * C636 + C48036 * C1503 +
                      C49085 * C1510 + C48050 * C2408 + C36607 * C2416) *
                         C48978) *
                        C48896 +
                    ((C48044 * C622 + C49078 * C629 + C48036 * C1497 +
                      C49085 * C1502 + C48050 * C2400 + C36607 * C2411) *
                         C114 +
                     (C48044 * C630 + C49078 * C637 + C48036 * C1501 +
                      C49085 * C1509 + C48050 * C2412 + C36607 * C2418) *
                         C48978) *
                        C26394) *
                       C48967 * C618) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C410 -
                    (((C37025 + C37026 + C37027) * C48978 +
                      (C37028 + C37029 + C37030) * C114) *
                         C26394 +
                     ((C37031 + C37032 + C37033) * C48978 +
                      (C37034 + C37035 + C37036) * C114) *
                         C48896 +
                     ((C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C48978 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C114) *
                         C48888) *
                        C49269) *
                       C550 +
                   ((((C48044 * C722 + C49078 * C727 + C48036 * C2395 +
                       C49085 * C2401 + C48050 * C3382 + C36607 * C3385) *
                          C114 +
                      (C48044 * C728 + C49078 * C737 + C48036 * C2402 +
                       C49085 * C2413 + C48050 * C3386 + C36607 * C3391) *
                          C48978) *
                         C48888 +
                     ((C48044 * C723 + C49078 * C729 + C48036 * C2397 +
                       C49085 * C2405 + C48050 * C3383 + C36607 * C3387) *
                          C114 +
                      (C48044 * C730 + C49078 * C738 + C48036 * C2406 +
                       C49085 * C2415 + C48050 * C3388 + C36607 * C3392) *
                          C48978) *
                         C48896 +
                     ((C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                       C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                          C114 +
                      (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                       C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                          C48978) *
                         C26394) *
                        C49269 -
                    (((C36843 + C36844 + C36845) * C48978 +
                      (C36846 + C36847 + C36848) * C114) *
                         C26394 +
                     ((C36849 + C36850 + C36851) * C48978 +
                      (C36852 + C36853 + C36854) * C114) *
                         C48896 +
                     ((C48050 * C2402 + C36607 * C2413 + C48036 * C728 +
                       C49085 * C737 + C48044 * C286 + C49078 * C294) *
                          C48978 +
                      (C48050 * C2395 + C36607 * C2401 + C48036 * C722 +
                       C49085 * C727 + C48044 * C276 + C49078 * C287) *
                          C114) *
                         C48888) *
                        C410) *
                       C49267) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C824 -
                    (((C37025 + C37026 + C37027) * C48978 +
                      (C37028 + C37029 + C37030) * C114) *
                         C26394 +
                     ((C37031 + C37032 + C37033) * C48978 +
                      (C37034 + C37035 + C37036) * C114) *
                         C48896 +
                     ((C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C48978 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C114) *
                         C48888) *
                        C49269) *
                       C48950 * C552 +
                   ((((C37036 + C37035 + C37034) * C114 +
                      (C37033 + C37032 + C37031) * C48978) *
                         C48888 +
                     ((C37030 + C37029 + C37028) * C114 +
                      (C37027 + C37026 + C37025) * C48978) *
                         C48896 +
                     ((C48044 * C413 + C49078 * C421 + C48036 * C976 +
                       C49085 * C984 + C48050 * C2931 + C36607 * C2938) *
                          C114 +
                      (C48044 * C420 + C49078 * C431 + C48036 * C985 +
                       C49085 * C991 + C48050 * C2939 + C36607 * C2943) *
                          C48978) *
                         C26394) *
                        C49269 -
                    (((C36660 + C36661 + C36662) * C48978 +
                      (C36663 + C36664 + C36665) * C114) *
                         C26394 +
                     ((C36659 + C36658 + C36657) * C48978 +
                      (C36656 + C36655 + C36654) * C114) *
                         C48896 +
                     ((C36653 + C36652 + C36651) * C48978 +
                      (C36650 + C36649 + C36648) * C114) *
                         C48888) *
                        C824) *
                       C48950 * C49265)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                       C49085 * C427 + C48050 * C973 + C36607 * C978) *
                          C114 +
                      (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                       C49085 * C434 + C48050 * C979 + C36607 * C988) *
                          C48978) *
                         C48888 +
                     ((C36648 + C36649 + C36650) * C114 +
                      (C36651 + C36652 + C36653) * C48978) *
                         C48896 +
                     C36672 * C26394) *
                        C824 -
                    (((C37025 + C37026 + C37027) * C48978 +
                      (C37028 + C37029 + C37030) * C114) *
                         C26394 +
                     ((C37031 + C37032 + C37033) * C48978 +
                      (C37034 + C37035 + C37036) * C114) *
                         C48896 +
                     ((C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                       C49085 * C988 + C48044 * C426 + C49078 * C434) *
                          C48978 +
                      (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                       C49085 * C978 + C48044 * C416 + C49078 * C427) *
                          C114) *
                         C48888) *
                        C49269) *
                       C268 +
                   ((((C48044 * C722 + C49078 * C727 + C48036 * C2395 +
                       C49085 * C2401 + C48050 * C3382 + C36607 * C3385) *
                          C114 +
                      (C48044 * C728 + C49078 * C737 + C48036 * C2402 +
                       C49085 * C2413 + C48050 * C3386 + C36607 * C3391) *
                          C48978) *
                         C48888 +
                     ((C48044 * C723 + C49078 * C729 + C48036 * C2397 +
                       C49085 * C2405 + C48050 * C3383 + C36607 * C3387) *
                          C114 +
                      (C48044 * C730 + C49078 * C738 + C48036 * C2406 +
                       C49085 * C2415 + C48050 * C3388 + C36607 * C3392) *
                          C48978) *
                         C48896 +
                     ((C48044 * C724 + C49078 * C731 + C48036 * C2399 +
                       C49085 * C2409 + C48050 * C3384 + C36607 * C3389) *
                          C114 +
                      (C48044 * C732 + C49078 * C739 + C48036 * C2410 +
                       C49085 * C2417 + C48050 * C3390 + C36607 * C3393) *
                          C48978) *
                         C26394) *
                        C49269 -
                    (((C36843 + C36844 + C36845) * C48978 +
                      (C36846 + C36847 + C36848) * C114) *
                         C26394 +
                     ((C36849 + C36850 + C36851) * C48978 +
                      (C36852 + C36853 + C36854) * C114) *
                         C48896 +
                     ((C48050 * C2402 + C36607 * C2413 + C48036 * C728 +
                       C49085 * C737 + C48044 * C286 + C49078 * C294) *
                          C48978 +
                      (C48050 * C2395 + C36607 * C2401 + C48036 * C722 +
                       C49085 * C727 + C48044 * C276 + C49078 * C287) *
                          C114) *
                         C48888) *
                        C824) *
                       C49267) *
                  C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C48044 * C115 + C49078 * C122 + C48036 * C416 +
                      C49085 * C427 + C48050 * C973 + C36607 * C978) *
                         C114 +
                     (C48044 * C123 + C49078 * C136 + C48036 * C426 +
                      C49085 * C434 + C48050 * C979 + C36607 * C988) *
                         C48978) *
                        C48888 +
                    ((C36648 + C36649 + C36650) * C114 +
                     (C36651 + C36652 + C36653) * C48978) *
                        C48896 +
                    C36672 * C26394) *
                       C970 -
                   (((C37025 + C37026 + C37027) * C48978 +
                     (C37028 + C37029 + C37030) * C114) *
                        C26394 +
                    ((C37031 + C37032 + C37033) * C48978 +
                     (C37034 + C37035 + C37036) * C114) *
                        C48896 +
                    ((C48050 * C2936 + C36607 * C2942 + C48036 * C979 +
                      C49085 * C988 + C48044 * C426 + C49078 * C434) *
                         C48978 +
                     (C48050 * C2930 + C36607 * C2937 + C48036 * C973 +
                      C49085 * C978 + C48044 * C416 + C49078 * C427) *
                         C114) *
                        C48888) *
                       C971 +
                   (((C48044 * C973 + C49078 * C978 + C48036 * C2930 +
                      C49085 * C2937 + C48050 * C3796 + C36607 * C3799) *
                         C114 +
                     (C48044 * C979 + C49078 * C988 + C48036 * C2936 +
                      C49085 * C2942 + C48050 * C3800 + C36607 * C3805) *
                         C48978) *
                        C48888 +
                    ((C48044 * C974 + C49078 * C980 + C48036 * C2929 +
                      C49085 * C2935 + C48050 * C3797 + C36607 * C3801) *
                         C114 +
                     (C48044 * C981 + C49078 * C989 + C48036 * C2934 +
                      C49085 * C2941 + C48050 * C3802 + C36607 * C3806) *
                         C48978) *
                        C48896 +
                    ((C48044 * C975 + C49078 * C982 + C48036 * C2928 +
                      C49085 * C2933 + C48050 * C3798 + C36607 * C3803) *
                         C114 +
                     (C48044 * C983 + C49078 * C990 + C48036 * C2932 +
                      C49085 * C2940 + C48050 * C3804 + C36607 * C3807) *
                         C48978) *
                        C26394) *
                       C972) *
                  C48950 * C48916) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C48967 * C48950 * C110 -
          (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
           ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
           ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
           ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
              C48967 * C48950 * C111 +
          (C30911 * C49313 + C30912 * C49306 +
           ((C30902 + C30901) * C114 + (C30900 + C30899) * C48978) * C49293 +
           ((C30852 * C120 + C30850 * C133 + C30853 * C417 + C49082 * C428) *
                C114 +
            (C30852 * C132 + C30850 * C141 + C30853 * C429 + C49082 * C435) *
                C48978) *
               C49276) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C30852 * C276 + C30850 * C287 + C30853 * C722 + C49082 * C727) *
                C1110 +
            (C30852 * C286 + C30850 * C294 + C30853 * C728 + C49082 * C737) *
                C49295 +
            (C30852 * C620 + C30850 * C625 + C30853 * C1499 + C49082 * C1506) *
                C1111 +
            (C30852 * C626 + C30850 * C635 + C30853 * C1505 + C49082 * C1511) *
                C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            (C31078 + C31077) * C1110 + (C31076 + C31075) * C49295 +
            (C32123 + C32124) * C1111 + (C32125 + C32126) * C49272) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
            (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
            (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
               C48893 +
           ((C32126 + C32125) * C49272 + (C32124 + C32123) * C1111 +
            (C31075 + C31076) * C49295 + (C31077 + C31078) * C1110 +
            (C30890 + C30889) * C49307 + (C30888 + C30887) * C1109) *
               C23637) *
              C48967 * C48950 * C111 +
          ((C30903 * C1109 + C30904 * C49307 + (C31074 + C31073) * C1110 +
            (C31072 + C31071) * C49295 + (C32130 + C32129) * C1111 +
            (C32128 + C32127) * C49272) *
               C23637 +
           (C30905 * C1109 + C30906 * C49307 + (C31070 + C31069) * C1110 +
            (C31068 + C31067) * C49295 +
            (C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                C1111 +
            (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                C49272) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C48967 * C268 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C48967 * C49267) *
              C270 +
          ((((C31078 + C31077) * C114 + (C31076 + C31075) * C48978) * C49313 +
            ((C31074 + C31073) * C114 + (C31072 + C31071) * C48978) * C49306 +
            ((C31070 + C31069) * C114 + (C31068 + C31067) * C48978) * C49293 +
            ((C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                 C114 +
             (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C48967 * C268 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C30853 * C1973 + C49082 * C1978 + C30852 * C1307 +
              C30850 * C1313) *
                 C49272 +
             (C30853 * C1969 + C49082 * C1972 + C30852 * C1301 +
              C30850 * C1308) *
                 C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C48967 * C49267) *
              C270 +
          (((C32341 * C1109 + C32342 * C49307 + C32343 * C1110 +
             C32344 * C49295 + (C32368 + C32367) * C1111 +
             (C32366 + C32365) * C49272) *
                C23637 +
            ((C31074 + C31073) * C1109 + (C31072 + C31071) * C49307 +
             (C32130 + C32129) * C1110 + (C32128 + C32127) * C49295 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C1111 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C410 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C114 + (C31242 + C31241) * C48978) * C49313 +
            ((C31240 + C31239) * C114 + (C31238 + C31237) * C48978) * C49306 +
            ((C31236 + C31235) * C114 + (C31234 + C31233) * C48978) * C49293 +
            ((C30852 * C412 + C30850 * C419 + C30853 * C977 + C49082 * C986) *
                 C114 +
             (C30852 * C418 + C30850 * C430 + C30853 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C30853 * C2404 + C49082 * C2414 + C30852 * C1505 +
              C30850 * C1511) *
                 C49272 +
             (C30853 * C2396 + C49082 * C2403 + C30852 * C1499 +
              C30850 * C1506) *
                 C1111 +
             (C30853 * C2402 + C49082 * C2413 + C30852 * C728 + C30850 * C737) *
                 C49295 +
             (C30853 * C2395 + C49082 * C2401 + C30852 * C722 + C30850 * C727) *
                 C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C48950 * C270 +
          ((((C31244 + C31243) * C1109 + (C31242 + C31241) * C49307 +
             (C32586 + C32585) * C1110 + (C32584 + C32583) * C49295 +
             (C32582 + C32581) * C1111 + (C32580 + C32579) * C49272) *
                C23637 +
            ((C31240 + C31239) * C1109 + (C31238 + C31237) * C49307 +
             (C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C1110 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C49295 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C1111 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C48967 * C550 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C48967 * C49267) *
              C552 +
          ((((C31078 + C31077) * C114 + (C31076 + C31075) * C48978) * C49313 +
            ((C31074 + C31073) * C114 + (C31072 + C31071) * C48978) * C49306 +
            ((C31070 + C31069) * C114 + (C31068 + C31067) * C48978) * C49293 +
            ((C30852 * C272 + C30850 * C279 + C30853 * C726 + C49082 * C735) *
                 C114 +
             (C30852 * C278 + C30850 * C290 + C30853 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             (C32361 + C32362) * C1111 + (C32363 + C32364) * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C48967 * C550 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C30853 * C1973 + C49082 * C1978 + C30852 * C1307 +
              C30850 * C1313) *
                 C49272 +
             (C30853 * C1969 + C49082 * C1972 + C30852 * C1301 +
              C30850 * C1308) *
                 C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C48967 * C49267) *
              C552 +
          (((C32341 * C1109 + C32342 * C49307 + C32343 * C1110 +
             C32344 * C49295 + (C32368 + C32367) * C1111 +
             (C32366 + C32365) * C49272) *
                C23637 +
            ((C31074 + C31073) * C1109 + (C31072 + C31071) * C49307 +
             (C32130 + C32129) * C1110 + (C32128 + C32127) * C49295 +
             (C30852 * C1299 + C30850 * C1304 + C30853 * C1971 +
              C49082 * C1976) *
                 C1111 +
             (C30852 * C1303 + C30850 * C1311 + C30853 * C1977 +
              C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C48967 * C616 -
          (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
           ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
           ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
           ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                C48978 +
            (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                C114) *
               C49313) *
              C48967 * C617 +
          (((C30852 * C620 + C30850 * C625 + C30853 * C1499 + C49082 * C1506) *
                C114 +
            (C30852 * C626 + C30850 * C635 + C30853 * C1505 + C49082 * C1511) *
                C48978) *
               C49313 +
           ((C30852 * C621 + C30850 * C627 + C30853 * C1498 + C49082 * C1504) *
                C114 +
            (C30852 * C628 + C30850 * C636 + C30853 * C1503 + C49082 * C1510) *
                C48978) *
               C49306 +
           ((C30852 * C622 + C30850 * C629 + C30853 * C1497 + C49082 * C1502) *
                C114 +
            (C30852 * C630 + C30850 * C637 + C30853 * C1501 + C49082 * C1509) *
                C48978) *
               C49293 +
           ((C30852 * C623 + C30850 * C631 + C30853 * C1500 + C49082 * C1507) *
                C114 +
            (C30852 * C632 + C30850 * C638 + C30853 * C1508 + C49082 * C1512) *
                C48978) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
            C32927 * C1111 + C32928 * C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
            C32344 * C49272) *
               C48893) *
              C48967 * C616 -
          (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
            C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
            C32356 * C1109) *
               C48893 +
           ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
            (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
            (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
               C23637) *
              C48967 * C617 +
          ((C32927 * C1109 + C32928 * C49307 + (C32940 + C32939) * C1110 +
            (C32938 + C32937) * C49295 +
            (C30852 * C1805 + C30850 * C1808 + C30853 * C9370 +
             C49082 * C9373) *
                C1111 +
            (C30852 * C1809 + C30850 * C1814 + C30853 * C9372 +
             C49082 * C9376) *
                C49272) *
               C23637 +
           (C32343 * C1109 + C32344 * C49307 + (C32368 + C32367) * C1110 +
            (C32366 + C32365) * C49295 +
            (C30852 * C1806 + C30850 * C1810 + C30853 * C9371 +
             C49082 * C9374) *
                C1111 +
            (C30852 * C1811 + C30850 * C1815 + C30853 * C9375 +
             C49082 * C9377) *
                C49272) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C410 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C550 +
          ((((C30852 * C722 + C30850 * C727 + C30853 * C2395 + C49082 * C2401) *
                 C114 +
             (C30852 * C728 + C30850 * C737 + C30853 * C2402 + C49082 * C2413) *
                 C48978) *
                C49313 +
            ((C30852 * C723 + C30850 * C729 + C30853 * C2397 + C49082 * C2405) *
                 C114 +
             (C30852 * C730 + C30850 * C738 + C30853 * C2406 + C49082 * C2415) *
                 C48978) *
                C49306 +
            ((C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C114 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C48978) *
                C49293 +
            ((C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C114 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C410 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C550 +
          ((((C33158 + C33157) * C1109 + (C33156 + C33155) * C49307 +
             (C33154 + C33153) * C1110 + (C33152 + C33151) * C49295 +
             (C30852 * C1969 + C30850 * C1972 + C30853 * C9856 +
              C49082 * C9858) *
                 C1111 +
             (C30852 * C1973 + C30850 * C1978 + C30853 * C9859 +
              C49082 * C9862) *
                 C49272) *
                C23637 +
            ((C32586 + C32585) * C1109 + (C32584 + C32583) * C49307 +
             (C32582 + C32581) * C1110 + (C32580 + C32579) * C49295 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C1111 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C824 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C114 + (C31242 + C31241) * C48978) * C49313 +
            ((C31240 + C31239) * C114 + (C31238 + C31237) * C48978) * C49306 +
            ((C31236 + C31235) * C114 + (C31234 + C31233) * C48978) * C49293 +
            ((C30852 * C412 + C30850 * C419 + C30853 * C977 + C49082 * C986) *
                 C114 +
             (C30852 * C418 + C30850 * C430 + C30853 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C30899 + C30900) * C48978 + (C30901 + C30902) * C114) * C49276 +
            ((C30898 + C30897) * C48978 + (C30896 + C30895) * C114) * C49293 +
            ((C30894 + C30893) * C48978 + (C30892 + C30891) * C114) * C49306 +
            ((C30890 + C30889) * C48978 + (C30888 + C30887) * C114) * C49313) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C48950 * C552 +
          ((((C31244 + C31243) * C1109 + (C31242 + C31241) * C49307 +
             (C32586 + C32585) * C1110 + (C32584 + C32583) * C49295 +
             (C32582 + C32581) * C1111 + (C32580 + C32579) * C49272) *
                C23637 +
            ((C31240 + C31239) * C1109 + (C31238 + C31237) * C49307 +
             (C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C1110 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C49295 +
             (C30852 * C1497 + C30850 * C1502 + C30853 * C2400 +
              C49082 * C2411) *
                 C1111 +
             (C30852 * C1501 + C30850 * C1509 + C30853 * C2412 +
              C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32127 + C32128) * C49272 + (C32129 + C32130) * C1111 +
             (C31071 + C31072) * C49295 + (C31073 + C31074) * C1110 +
             (C30894 + C30893) * C49307 + (C30892 + C30891) * C1109) *
                C48893 +
            (C32353 * C49272 + C32354 * C1111 + C32355 * C49295 +
             C32356 * C1110 + (C30890 + C30889) * C49307 +
             (C30888 + C30887) * C1109) *
                C23637) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C114 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C48978) *
                C49313 +
            ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
            C30911 * C49293 + C30912 * C49276) *
               C824 -
           (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
            ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
            ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
            ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C48978 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C114) *
                C49313) *
               C49269) *
              C268 +
          ((((C30852 * C722 + C30850 * C727 + C30853 * C2395 + C49082 * C2401) *
                 C114 +
             (C30852 * C728 + C30850 * C737 + C30853 * C2402 + C49082 * C2413) *
                 C48978) *
                C49313 +
            ((C30852 * C723 + C30850 * C729 + C30853 * C2397 + C49082 * C2405) *
                 C114 +
             (C30852 * C730 + C30850 * C738 + C30853 * C2406 + C49082 * C2415) *
                 C48978) *
                C49306 +
            ((C30852 * C724 + C30850 * C731 + C30853 * C2399 + C49082 * C2409) *
                 C114 +
             (C30852 * C732 + C30850 * C739 + C30853 * C2410 + C49082 * C2417) *
                 C48978) *
                C49293 +
            ((C30852 * C725 + C30850 * C733 + C30853 * C2742 + C49082 * C2743) *
                 C114 +
             (C30852 * C734 + C30850 * C740 + C30853 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C31067 + C31068) * C48978 + (C31069 + C31070) * C114) * C49276 +
            ((C31071 + C31072) * C48978 + (C31073 + C31074) * C114) * C49293 +
            ((C31075 + C31076) * C48978 + (C31077 + C31078) * C114) * C49306 +
            ((C30853 * C728 + C49082 * C737 + C30852 * C286 + C30850 * C294) *
                 C48978 +
             (C30853 * C722 + C49082 * C727 + C30852 * C276 + C30850 * C287) *
                 C114) *
                C49313) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                 C1109 +
             (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                 C49307 +
             (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
             C32927 * C1111 + C32928 * C49272) *
                C23637 +
            ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
             C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
             C32344 * C49272) *
                C48893) *
               C824 -
           (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
             (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
             (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
                C48893 +
            ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
             (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
             (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                 C49307 +
             (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                 C1109) *
                C23637) *
               C49269) *
              C268 +
          ((((C33158 + C33157) * C1109 + (C33156 + C33155) * C49307 +
             (C33154 + C33153) * C1110 + (C33152 + C33151) * C49295 +
             (C30852 * C1969 + C30850 * C1972 + C30853 * C9856 +
              C49082 * C9858) *
                 C1111 +
             (C30852 * C1973 + C30850 * C1978 + C30853 * C9859 +
              C49082 * C9862) *
                 C49272) *
                C23637 +
            ((C32586 + C32585) * C1109 + (C32584 + C32583) * C49307 +
             (C32582 + C32581) * C1110 + (C32580 + C32579) * C49295 +
             (C30852 * C1970 + C30850 * C1974 + C30853 * C10120 +
              C49082 * C10121) *
                 C1111 +
             (C30852 * C1975 + C30850 * C1979 + C30853 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C32365 + C32366) * C49272 + (C32367 + C32368) * C1111 +
             C32353 * C49295 + C32354 * C1110 + C32355 * C49307 +
             C32356 * C1109) *
                C48893 +
            ((C32937 + C32938) * C49272 + (C32939 + C32940) * C1111 +
             (C32364 + C32363) * C49295 + (C32362 + C32361) * C1110 +
             (C32360 + C32359) * C49307 + (C32358 + C32357) * C1109) *
                C23637) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C114 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C48978) *
               C49313 +
           ((C30887 + C30888) * C114 + (C30889 + C30890) * C48978) * C49306 +
           C30911 * C49293 + C30912 * C49276) *
              C970 -
          (((C31233 + C31234) * C48978 + (C31235 + C31236) * C114) * C49276 +
           ((C31237 + C31238) * C48978 + (C31239 + C31240) * C114) * C49293 +
           ((C31241 + C31242) * C48978 + (C31243 + C31244) * C114) * C49306 +
           ((C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C48978 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C114) *
               C49313) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C114 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C48978) *
               C49313 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C114 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C48978) *
               C49306 +
           ((C30852 * C975 + C30850 * C982 + C30853 * C2928 + C49082 * C2933) *
                C114 +
            (C30852 * C983 + C30850 * C990 + C30853 * C2932 + C49082 * C2940) *
                C48978) *
               C49293 +
           ((C30852 * C976 + C30850 * C984 + C30853 * C2931 + C49082 * C2938) *
                C114 +
            (C30852 * C985 + C30850 * C991 + C30853 * C2939 + C49082 * C2943) *
                C48978) *
               C49276) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30852 * C115 + C30850 * C122 + C30853 * C416 + C49082 * C427) *
                C1109 +
            (C30852 * C123 + C30850 * C136 + C30853 * C426 + C49082 * C434) *
                C49307 +
            (C32357 + C32358) * C1110 + (C32359 + C32360) * C49295 +
            C32927 * C1111 + C32928 * C49272) *
               C23637 +
           ((C30887 + C30888) * C1109 + (C30889 + C30890) * C49307 +
            C32341 * C1110 + C32342 * C49295 + C32343 * C1111 +
            C32344 * C49272) *
               C48893) *
              C970 -
          (((C32579 + C32580) * C49272 + (C32581 + C32582) * C1111 +
            (C32583 + C32584) * C49295 + (C32585 + C32586) * C1110 +
            (C31241 + C31242) * C49307 + (C31243 + C31244) * C1109) *
               C48893 +
           ((C33151 + C33152) * C49272 + (C33153 + C33154) * C1111 +
            (C33155 + C33156) * C49295 + (C33157 + C33158) * C1110 +
            (C30853 * C979 + C49082 * C988 + C30852 * C426 + C30850 * C434) *
                C49307 +
            (C30853 * C973 + C49082 * C978 + C30852 * C416 + C30850 * C427) *
                C1109) *
               C23637) *
              C971 +
          (((C30852 * C973 + C30850 * C978 + C30853 * C2930 + C49082 * C2937) *
                C1109 +
            (C30852 * C979 + C30850 * C988 + C30853 * C2936 + C49082 * C2942) *
                C49307 +
            (C30852 * C2395 + C30850 * C2401 + C30853 * C3382 +
             C49082 * C3385) *
                C1110 +
            (C30852 * C2402 + C30850 * C2413 + C30853 * C3386 +
             C49082 * C3391) *
                C49295 +
            (C30852 * C2396 + C30850 * C2403 + C30853 * C10324 +
             C49082 * C10327) *
                C1111 +
            (C30852 * C2404 + C30850 * C2414 + C30853 * C10326 +
             C49082 * C10330) *
                C49272) *
               C23637 +
           ((C30852 * C974 + C30850 * C980 + C30853 * C2929 + C49082 * C2935) *
                C1109 +
            (C30852 * C981 + C30850 * C989 + C30853 * C2934 + C49082 * C2941) *
                C49307 +
            (C30852 * C2397 + C30850 * C2405 + C30853 * C3383 +
             C49082 * C3387) *
                C1110 +
            (C30852 * C2406 + C30850 * C2415 + C30853 * C3388 +
             C49082 * C3392) *
                C49295 +
            (C30852 * C2398 + C30850 * C2407 + C30853 * C10325 +
             C49082 * C10328) *
                C1111 +
            (C30852 * C2408 + C30850 * C2416 + C30853 * C10329 +
             C49082 * C10331) *
                C49272) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48995 * C122) * C3912 +
                     (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                     C1341 * C49040) *
                        C3908 +
                    (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                    C3936 * C49276) *
                       C48967 * C48950 * C110 -
                   ((C3927 + C3928 + C3929 + C3930) * C49276 +
                    (C3926 + C3925 + C3924 + C3923) * C3910 +
                    (C3922 + C3921 + C3920 + C3919) * C3909 +
                    (C3918 + C3917 + C3916 + C3915) * C3908) *
                       C48967 * C48950 * C111 +
                   (C3935 * C3908 + C3936 * C3909 +
                    (C3930 + C3929 + C3928 + C3927) * C3910 +
                    (C173 * C3912 + C172 * C49239 +
                     (C113 * C277 + C48995 * C288) * C3913 +
                     (C113 * C289 + C48995 * C295) * C49040) *
                        C49276) *
                       C48967 * C48950 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48995 * C122) * C11310 +
                     (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                     C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                     C1823 * C11313 + C1822 * C49282) *
                        C49217 +
                    (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                     C11321 + C11322) *
                        C48893) *
                       C48967 * C48950 * C110 -
                   ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                     C11329 + C11330) *
                        C48893 +
                    (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                     C11316 + C11315) *
                        C49217) *
                       C48967 * C48950 * C111 +
                   ((C11330 + C11329 + C11328 + C11327 + C11326 + C11325 +
                     C11324 + C11323) *
                        C49217 +
                    (C168 * C11310 + C169 * C11304 + C316 * C11311 +
                     C315 * C11305 + C1143 * C11312 + C1142 * C11306 +
                     (C113 * C1302 + C48995 * C1309) * C11313 +
                     (C113 * C1310 + C48995 * C1314) * C49282) *
                        C48893) *
                       C48967 * C48950 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C48967 * C268 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C48967 * C49267) *
              C270 +
          (((C4078 + C4077 + C4076 + C4075) * C3908 +
            (C4074 + C4073 + C4072 + C4071) * C3909 +
            (C4070 + C4069 + C4068 + C4067) * C3910 +
            (C314 * C3912 + C313 * C49239 +
             (C113 * C624 + C48995 * C633) * C3913 +
             (C113 * C634 + C48995 * C639) * C49040) *
                C49276) *
               C48967 * C49267 -
           ((C3927 + C3928 + C3929 + C3930) * C49276 +
            (C3926 + C3925 + C3924 + C3923) * C3910 +
            (C3922 + C3921 + C3920 + C3919) * C3909 +
            (C3918 + C3917 + C3916 + C3915) * C3908) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C48967 * C268 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C11468 + C11467 + C11466 + C11465 + C11464 + C11463 + C11462 +
             C11461) *
                C49217 +
            (C318 * C11310 + C317 * C11304 + C1140 * C11311 + C1141 * C11305 +
             C1345 * C11312 + C1344 * C11306 +
             (C113 * C1807 + C48995 * C1812) * C11313 +
             (C113 * C1813 + C48995 * C1816) * C49282) *
                C48893) *
               C48967 * C49267 -
           ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 + C11329 +
             C11330) *
                C48893 +
            (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 + C11316 +
             C11315) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48995 * C122) * C3912 +
                      (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                      C1341 * C49040) *
                         C3908 +
                     (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                     C3936 * C49276) *
                        C410 -
                    ((C4225 + C4226 + C4213 + C4214) * C49276 +
                     (C4215 + C4216 + C4217 + C4218) * C3910 +
                     (C4219 + C4220 + C4221 + C4222) * C3909 +
                     (C1992 * C49040 + C1993 * C3913 +
                      (C113 * C426 + C48995 * C434) * C49239 +
                      (C113 * C416 + C48995 * C427) * C3912) *
                         C3908) *
                        C49269) *
                       C48950 * C270 +
                   (((C4222 + C4221 + C4220 + C4219) * C3908 +
                     (C4218 + C4217 + C4216 + C4215) * C3909 +
                     (C4214 + C4213 + C4226 + C4225) * C3910 +
                     (C454 * C3912 + C453 * C49239 +
                      (C113 * C726 + C48995 * C735) * C3913 +
                      (C113 * C736 + C48995 * C741) * C49040) *
                         C49276) *
                        C49269 -
                    ((C3927 + C3928 + C3929 + C3930) * C49276 +
                     (C3926 + C3925 + C3924 + C3923) * C3910 +
                     (C3922 + C3921 + C3920 + C3919) * C3909 +
                     (C3918 + C3917 + C3916 + C3915) * C3908) *
                        C410) *
                       C48950 * C49265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48995 * C122) * C11310 +
                      (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                      C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                      C1823 * C11313 + C1822 * C49282) *
                         C49217 +
                     (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                      C11321 + C11322) *
                         C48893) *
                        C410 -
                    ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                      C11607 + C11608) *
                         C48893 +
                     (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                      C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                      (C113 * C426 + C48995 * C434) * C11304 +
                      (C113 * C416 + C48995 * C427) * C11310) *
                         C49217) *
                        C49269) *
                       C48950 * C270 +
                   (((C11608 + C11607 + C11606 + C11605 + C11604 + C11603 +
                      C11612 + C11611) *
                         C49217 +
                     (C458 * C11310 + C457 * C11304 + C1537 * C11311 +
                      C1536 * C11305 + C1535 * C11312 + C1534 * C11306 +
                      (C113 * C1971 + C48995 * C1976) * C11313 +
                      (C113 * C1977 + C48995 * C1980) * C49282) *
                         C48893) *
                        C49269 -
                    ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                      C11329 + C11330) *
                         C48893 +
                     (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                      C11316 + C11315) *
                         C49217) *
                        C410) *
                       C48950 * C49265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C48967 * C550 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C48967 * C49267) *
              C552 +
          (((C4078 + C4077 + C4076 + C4075) * C3908 +
            (C4074 + C4073 + C4072 + C4071) * C3909 +
            (C4070 + C4069 + C4068 + C4067) * C3910 +
            (C314 * C3912 + C313 * C49239 +
             (C113 * C624 + C48995 * C633) * C3913 +
             (C113 * C634 + C48995 * C639) * C49040) *
                C49276) *
               C48967 * C49267 -
           ((C3927 + C3928 + C3929 + C3930) * C49276 +
            (C3926 + C3925 + C3924 + C3923) * C3910 +
            (C3922 + C3921 + C3920 + C3919) * C3909 +
            (C3918 + C3917 + C3916 + C3915) * C3908) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C48967 * C550 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C11468 + C11467 + C11466 + C11465 + C11464 + C11463 + C11462 +
             C11461) *
                C49217 +
            (C318 * C11310 + C317 * C11304 + C1140 * C11311 + C1141 * C11305 +
             C1345 * C11312 + C1344 * C11306 +
             (C113 * C1807 + C48995 * C1812) * C11313 +
             (C113 * C1813 + C48995 * C1816) * C49282) *
                C48893) *
               C48967 * C49267 -
           ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 + C11329 +
             C11330) *
                C48893 +
            (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 + C11316 +
             C11315) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C3912 +
            (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
            C1341 * C49040) *
               C3908 +
           (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
           C3936 * C49276) *
              C48967 * C616 -
          ((C4067 + C4068 + C4069 + C4070) * C49276 +
           (C4071 + C4072 + C4073 + C4074) * C3910 +
           (C4075 + C4076 + C4077 + C4078) * C3909 +
           (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
               C3908) *
              C48967 * C617 +
          ((C1342 * C3912 + C1343 * C49239 + C1823 * C3913 + C1822 * C49040) *
               C3908 +
           (C1137 * C3912 + C1138 * C49239 + C1347 * C3913 + C1346 * C49040) *
               C3909 +
           (C1140 * C3912 + C1141 * C49239 + C1345 * C3913 + C1344 * C49040) *
               C3910 +
           (C1143 * C3912 + C1142 * C49239 +
            (C113 * C1302 + C48995 * C1309) * C3913 +
            (C113 * C1310 + C48995 * C1314) * C49040) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C11310 +
            (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
            C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
            C1822 * C49282) *
               C49217 +
           (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
            C11322) *
               C48893) *
              C48967 * C616 -
          ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
            C11468) *
               C48893 +
           (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
            C1343 * C11305 + C1342 * C11311 + C1341 * C11304 + C1340 * C11310) *
               C49217) *
              C48967 * C617 +
          ((C1342 * C11310 + C1343 * C11304 + C1823 * C11311 + C1822 * C11305 +
            C9285 * C11312 + C9286 * C11306 + C9532 * C11313 + C9531 * C49282) *
               C49217 +
           (C1137 * C11310 + C1138 * C11304 + C1347 * C11311 + C1346 * C11305 +
            C9287 * C11312 + C9288 * C11306 +
            (C113 * C9269 + C48995 * C9272) * C11313 +
            (C113 * C9273 + C48995 * C9275) * C49282) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C410 -
           ((C4225 + C4226 + C4213 + C4214) * C49276 +
            (C4215 + C4216 + C4217 + C4218) * C3910 +
            (C4219 + C4220 + C4221 + C4222) * C3909 +
            (C1992 * C49040 + C1993 * C3913 +
             (C113 * C426 + C48995 * C434) * C49239 +
             (C113 * C416 + C48995 * C427) * C3912) *
                C3908) *
               C49269) *
              C550 +
          (((C1993 * C3912 + C1992 * C49239 + C1991 * C3913 + C1990 * C49040) *
                C3908 +
            (C1541 * C3912 + C1540 * C49239 + C1539 * C3913 + C1538 * C49040) *
                C3909 +
            (C1537 * C3912 + C1536 * C49239 + C1535 * C3913 + C1534 * C49040) *
                C3910 +
            (C4224 * C3912 + C4223 * C49239 +
             (C113 * C1500 + C48995 * C1507) * C3913 +
             (C113 * C1508 + C48995 * C1512) * C49040) *
                C49276) *
               C49269 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C410 -
           ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 + C11607 +
             C11608) *
                C48893 +
            (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 + C1991 * C11312 +
             C1992 * C11305 + C1993 * C11311 +
             (C113 * C426 + C48995 * C434) * C11304 +
             (C113 * C416 + C48995 * C427) * C11310) *
                C49217) *
               C49269) *
              C550 +
          (((C1993 * C11310 + C1992 * C11304 + C1991 * C11311 + C1990 * C11305 +
             C9630 * C11312 + C9629 * C11306 + C9628 * C11313 +
             C9627 * C49282) *
                C49217 +
            (C1541 * C11310 + C1540 * C11304 + C1539 * C11311 + C1538 * C11305 +
             C11610 * C11312 + C11609 * C11306 +
             (C113 * C9371 + C48995 * C9374) * C11313 +
             (C113 * C9375 + C48995 * C9377) * C49282) *
                C48893) *
               C49269 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[186] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48995 * C122) * C3912 +
                      (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                      C1341 * C49040) *
                         C3908 +
                     (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                     C3936 * C49276) *
                        C824 -
                    ((C4225 + C4226 + C4213 + C4214) * C49276 +
                     (C4215 + C4216 + C4217 + C4218) * C3910 +
                     (C4219 + C4220 + C4221 + C4222) * C3909 +
                     (C1992 * C49040 + C1993 * C3913 +
                      (C113 * C426 + C48995 * C434) * C49239 +
                      (C113 * C416 + C48995 * C427) * C3912) *
                         C3908) *
                        C49269) *
                       C48950 * C552 +
                   (((C4222 + C4221 + C4220 + C4219) * C3908 +
                     (C4218 + C4217 + C4216 + C4215) * C3909 +
                     (C4214 + C4213 + C4226 + C4225) * C3910 +
                     (C454 * C3912 + C453 * C49239 +
                      (C113 * C726 + C48995 * C735) * C3913 +
                      (C113 * C736 + C48995 * C741) * C49040) *
                         C49276) *
                        C49269 -
                    ((C3927 + C3928 + C3929 + C3930) * C49276 +
                     (C3926 + C3925 + C3924 + C3923) * C3910 +
                     (C3922 + C3921 + C3920 + C3919) * C3909 +
                     (C3918 + C3917 + C3916 + C3915) * C3908) *
                        C824) *
                       C48950 * C49265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48995 * C122) * C11310 +
                      (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                      C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                      C1823 * C11313 + C1822 * C49282) *
                         C49217 +
                     (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                      C11321 + C11322) *
                         C48893) *
                        C824 -
                    ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                      C11607 + C11608) *
                         C48893 +
                     (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                      C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                      (C113 * C426 + C48995 * C434) * C11304 +
                      (C113 * C416 + C48995 * C427) * C11310) *
                         C49217) *
                        C49269) *
                       C48950 * C552 +
                   (((C11608 + C11607 + C11606 + C11605 + C11604 + C11603 +
                      C11612 + C11611) *
                         C49217 +
                     (C458 * C11310 + C457 * C11304 + C1537 * C11311 +
                      C1536 * C11305 + C1535 * C11312 + C1534 * C11306 +
                      (C113 * C1971 + C48995 * C1976) * C11313 +
                      (C113 * C1977 + C48995 * C1980) * C49282) *
                         C48893) *
                        C49269 -
                    ((C11323 + C11324 + C11325 + C11326 + C11327 + C11328 +
                      C11329 + C11330) *
                         C48893 +
                     (C11322 + C11321 + C11320 + C11319 + C11318 + C11317 +
                      C11316 + C11315) *
                         C49217) *
                        C824) *
                       C48950 * C49265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C3912 +
             (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
             C1341 * C49040) *
                C3908 +
            (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
            C3936 * C49276) *
               C824 -
           ((C4225 + C4226 + C4213 + C4214) * C49276 +
            (C4215 + C4216 + C4217 + C4218) * C3910 +
            (C4219 + C4220 + C4221 + C4222) * C3909 +
            (C1992 * C49040 + C1993 * C3913 +
             (C113 * C426 + C48995 * C434) * C49239 +
             (C113 * C416 + C48995 * C427) * C3912) *
                C3908) *
               C49269) *
              C268 +
          (((C1993 * C3912 + C1992 * C49239 + C1991 * C3913 + C1990 * C49040) *
                C3908 +
            (C1541 * C3912 + C1540 * C49239 + C1539 * C3913 + C1538 * C49040) *
                C3909 +
            (C1537 * C3912 + C1536 * C49239 + C1535 * C3913 + C1534 * C49040) *
                C3910 +
            (C4224 * C3912 + C4223 * C49239 +
             (C113 * C1500 + C48995 * C1507) * C3913 +
             (C113 * C1508 + C48995 * C1512) * C49040) *
                C49276) *
               C49269 -
           ((C4067 + C4068 + C4069 + C4070) * C49276 +
            (C4071 + C4072 + C4073 + C4074) * C3910 +
            (C4075 + C4076 + C4077 + C4078) * C3909 +
            (C1343 * C49040 + C1342 * C3913 + C1341 * C49239 + C1340 * C3912) *
                C3908) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C11310 +
             (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
             C1341 * C11305 + C1342 * C11312 + C1343 * C11306 + C1823 * C11313 +
             C1822 * C49282) *
                C49217 +
            (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 + C11321 +
             C11322) *
                C48893) *
               C824 -
           ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 + C11607 +
             C11608) *
                C48893 +
            (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 + C1991 * C11312 +
             C1992 * C11305 + C1993 * C11311 +
             (C113 * C426 + C48995 * C434) * C11304 +
             (C113 * C416 + C48995 * C427) * C11310) *
                C49217) *
               C49269) *
              C268 +
          (((C1993 * C11310 + C1992 * C11304 + C1991 * C11311 + C1990 * C11305 +
             C9630 * C11312 + C9629 * C11306 + C9628 * C11313 +
             C9627 * C49282) *
                C49217 +
            (C1541 * C11310 + C1540 * C11304 + C1539 * C11311 + C1538 * C11305 +
             C11610 * C11312 + C11609 * C11306 +
             (C113 * C9371 + C48995 * C9374) * C11313 +
             (C113 * C9375 + C48995 * C9377) * C49282) *
                C48893) *
               C49269 -
           ((C11461 + C11462 + C11463 + C11464 + C11465 + C11466 + C11467 +
             C11468) *
                C48893 +
            (C9286 * C49282 + C9285 * C11313 + C1822 * C11306 + C1823 * C11312 +
             C1343 * C11305 + C1342 * C11311 + C1341 * C11304 +
             C1340 * C11310) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[188] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48995 * C122) * C3912 +
                     (C113 * C123 + C48995 * C136) * C49239 + C1340 * C3913 +
                     C1341 * C49040) *
                        C3908 +
                    (C3915 + C3916 + C3917 + C3918) * C3909 + C3935 * C3910 +
                    C3936 * C49276) *
                       C970 -
                   ((C4225 + C4226 + C4213 + C4214) * C49276 +
                    (C4215 + C4216 + C4217 + C4218) * C3910 +
                    (C4219 + C4220 + C4221 + C4222) * C3909 +
                    (C1992 * C49040 + C1993 * C3913 +
                     (C113 * C426 + C48995 * C434) * C49239 +
                     (C113 * C416 + C48995 * C427) * C3912) *
                        C3908) *
                       C971 +
                   (((C113 * C973 + C48995 * C978) * C3912 +
                     (C113 * C979 + C48995 * C988) * C49239 +
                     (C113 * C2395 + C48995 * C2401) * C3913 +
                     (C113 * C2402 + C48995 * C2413) * C49040) *
                        C3908 +
                    ((C113 * C974 + C48995 * C980) * C3912 +
                     (C113 * C981 + C48995 * C989) * C49239 +
                     (C113 * C2397 + C48995 * C2405) * C3913 +
                     (C113 * C2406 + C48995 * C2415) * C49040) *
                        C3909 +
                    ((C113 * C975 + C48995 * C982) * C3912 +
                     (C113 * C983 + C48995 * C990) * C49239 +
                     (C113 * C2399 + C48995 * C2409) * C3913 +
                     (C113 * C2410 + C48995 * C2417) * C49040) *
                        C3910 +
                    ((C113 * C976 + C48995 * C984) * C3912 +
                     (C113 * C985 + C48995 * C991) * C49239 +
                     (C113 * C2742 + C48995 * C2743) * C3913 +
                     (C113 * C2744 + C48995 * C2745) * C49040) *
                        C49276) *
                       C972) *
                  C48950 * C48916) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48995 * C122) * C11310 +
                     (C113 * C123 + C48995 * C136) * C11304 + C1340 * C11311 +
                     C1341 * C11305 + C1342 * C11312 + C1343 * C11306 +
                     C1823 * C11313 + C1822 * C49282) *
                        C49217 +
                    (C11315 + C11316 + C11317 + C11318 + C11319 + C11320 +
                     C11321 + C11322) *
                        C48893) *
                       C970 -
                   ((C11611 + C11612 + C11603 + C11604 + C11605 + C11606 +
                     C11607 + C11608) *
                        C48893 +
                    (C9629 * C49282 + C9630 * C11313 + C1990 * C11306 +
                     C1991 * C11312 + C1992 * C11305 + C1993 * C11311 +
                     (C113 * C426 + C48995 * C434) * C11304 +
                     (C113 * C416 + C48995 * C427) * C11310) *
                        C49217) *
                       C971 +
                   (((C113 * C973 + C48995 * C978) * C11310 +
                     (C113 * C979 + C48995 * C988) * C11304 +
                     (C113 * C2395 + C48995 * C2401) * C11311 +
                     (C113 * C2402 + C48995 * C2413) * C11305 +
                     (C113 * C2396 + C48995 * C2403) * C11312 +
                     (C113 * C2404 + C48995 * C2414) * C11306 +
                     (C113 * C9856 + C48995 * C9858) * C11313 +
                     (C113 * C9859 + C48995 * C9862) * C49282) *
                        C49217 +
                    ((C113 * C974 + C48995 * C980) * C11310 +
                     (C113 * C981 + C48995 * C989) * C11304 +
                     (C113 * C2397 + C48995 * C2405) * C11311 +
                     (C113 * C2406 + C48995 * C2415) * C11305 +
                     (C113 * C2398 + C48995 * C2407) * C11312 +
                     (C113 * C2408 + C48995 * C2416) * C11306 +
                     (C113 * C10120 + C48995 * C10121) * C11313 +
                     (C113 * C10122 + C48995 * C10123) * C49282) *
                        C48893) *
                       C972) *
                  C48950 * C48916) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C5042 * C276 + C49240 * C287 + C5043 * C722 + C49082 * C727) *
                C3913 +
            (C5042 * C286 + C49240 * C294 + C5043 * C728 + C49082 * C737) *
                C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
            (C5268 + C5267) * C3913 + (C5266 + C5265) * C49040) *
               C1107 +
           C6305 * C49259) *
              C48967 * C48950 * C110 -
          (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
            (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
               C49259 +
           ((C5261 + C5262) * C49040 + (C5263 + C5264) * C3913 +
            (C5084 + C5083) * C49239 + (C5082 + C5081) * C3912) *
               C1107 +
           ((C5265 + C5266) * C49040 + (C5267 + C5268) * C3913 +
            (C5080 + C5079) * C49239 + (C5078 + C5077) * C3912) *
               C1106) *
              C48967 * C48950 * C111 +
          (C6305 * C1106 +
           (C5095 * C3912 + C5096 * C49239 + (C5260 + C5259) * C3913 +
            (C5258 + C5257) * C49040) *
               C1107 +
           ((C5092 + C5091) * C3912 + (C5090 + C5089) * C49239 +
            (C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                C3913 +
            (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                C49040) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
           (C13242 + C13241) * C49282) *
              C48883 * C48967 * C48950 * C110 -
          ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
           C12679 * C11306 + C12680 * C11312 + C6528 * C11305 + C6529 * C11311 +
           (C5080 + C5079) * C11304 + (C5078 + C5077) * C11310) *
              C48883 * C48967 * C48950 * C111 +
          (C5093 * C11310 + C5094 * C11304 + C6299 * C11311 + C6300 * C11305 +
           (C6537 + C6536) * C11312 + (C6535 + C6534) * C11306 +
           (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
               C11313 +
           (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
               C49282) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C48967 * C268 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C5043 * C1505 + C49082 * C1511 + C5042 * C626 + C49240 * C635) *
                 C49040 +
             (C5043 * C1499 + C49082 * C1506 + C5042 * C620 + C49240 * C625) *
                 C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C3912 + C6509 * C49239 + (C6541 + C6540) * C3913 +
             (C6539 + C6538) * C49040) *
                C1106 +
            (C6299 * C3912 + C6300 * C49239 + (C6537 + C6536) * C3913 +
             (C6535 + C6534) * C49040) *
                C1107 +
            ((C5260 + C5259) * C3912 + (C5258 + C5257) * C49239 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C3913 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C48967 * C268 -
           ((C5043 * C9372 + C49082 * C9376 + C5042 * C1809 + C49240 * C1814) *
                C49282 +
            (C5043 * C9370 + C49082 * C9373 + C5042 * C1805 + C49240 * C1808) *
                C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C6508 * C11310 + C6509 * C11304 + C12669 * C11311 +
            C12670 * C11305 + (C12684 + C12683) * C11312 +
            (C12682 + C12681) * C11306 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C11313 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C5043 * C2402 + C49082 * C2413 + C5042 * C728 + C49240 * C737) *
                 C49040 +
             (C5043 * C2395 + C49082 * C2401 + C5042 * C722 + C49240 * C727) *
                 C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C3912 + (C5432 + C5431) * C49239 +
             (C6759 + C6758) * C3913 + (C6757 + C6756) * C49040) *
                C1106 +
            ((C5430 + C5429) * C3912 + (C5428 + C5427) * C49239 +
             (C6755 + C6754) * C3913 + (C6753 + C6752) * C49040) *
                C1107 +
            ((C5426 + C5425) * C3912 + (C5424 + C5423) * C49239 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C3913 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C410 -
           ((C5043 * C9859 + C49082 * C9862 + C5042 * C1973 + C49240 * C1978) *
                C49282 +
            (C5043 * C9856 + C49082 * C9858 + C5042 * C1969 + C49240 * C1972) *
                C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C5434 + C5433) * C11310 + (C5432 + C5431) * C11304 +
            (C6759 + C6758) * C11311 + (C6757 + C6756) * C11305 +
            (C12890 + C12889) * C11312 + (C12888 + C12887) * C11306 +
            (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
             C49082 * C10121) *
                C11313 +
            (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C48967 * C550 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C5043 * C1505 + C49082 * C1511 + C5042 * C626 + C49240 * C635) *
                 C49040 +
             (C5043 * C1499 + C49082 * C1506 + C5042 * C620 + C49240 * C625) *
                 C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C3912 + C6509 * C49239 + (C6541 + C6540) * C3913 +
             (C6539 + C6538) * C49040) *
                C1106 +
            (C6299 * C3912 + C6300 * C49239 + (C6537 + C6536) * C3913 +
             (C6535 + C6534) * C49040) *
                C1107 +
            ((C5260 + C5259) * C3912 + (C5258 + C5257) * C49239 +
             (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                 C3913 +
             (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                 C49040) *
                C49259) *
               C48967 * C49267 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + (C13244 + C13243) * C11313 +
            (C13242 + C13241) * C49282) *
               C48883 * C48967 * C550 -
           ((C5043 * C9372 + C49082 * C9376 + C5042 * C1809 + C49240 * C1814) *
                C49282 +
            (C5043 * C9370 + C49082 * C9373 + C5042 * C1805 + C49240 * C1808) *
                C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C6508 * C11310 + C6509 * C11304 + C12669 * C11311 +
            C12670 * C11305 + (C12684 + C12683) * C11312 +
            (C12682 + C12681) * C11306 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C11313 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49282) *
               C48883 * C48967 * C49267 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 + C6508 * C3913 +
            C6509 * C49040) *
               C1107 +
           C6305 * C49259) *
              C48967 * C616 -
          (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
            C6518 * C49239 + C6519 * C3912) *
               C49259 +
           ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
            C6528 * C49239 + C6529 * C3912) *
               C1107 +
           ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
            (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
               C1106) *
              C48967 * C617 +
          (((C7111 + C7110) * C3912 + (C7109 + C7108) * C49239 +
            (C5042 * C1301 + C49240 * C1308 + C5043 * C1969 + C49082 * C1972) *
                C3913 +
            (C5042 * C1307 + C49240 * C1313 + C5043 * C1973 + C49082 * C1978) *
                C49040) *
               C1106 +
           ((C6541 + C6540) * C3912 + (C6539 + C6538) * C49239 +
            (C5042 * C1300 + C49240 * C1306 + C5043 * C1970 + C49082 * C1974) *
                C3913 +
            (C5042 * C1305 + C49240 * C1312 + C5043 * C1975 + C49082 * C1979) *
                C49040) *
               C1107 +
           ((C6537 + C6536) * C3912 + (C6535 + C6534) * C49239 +
            (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                C3913 +
            (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                C49040) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
           C14572 * C49282) *
              C48883 * C48967 * C616 -
          ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
           (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
           (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
           (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
              C48883 * C48967 * C617 +
          (C13231 * C11310 + C13232 * C11304 + C14571 * C11311 +
           C14572 * C11305 + (C14584 + C14583) * C11312 +
           (C14582 + C14581) * C11306 +
           (C5042 * C9268 + C49240 * C9271 + C5043 * C9614 + C49082 * C9615) *
               C11313 +
           (C5042 * C9270 + C49240 * C9274 + C5043 * C9616 + C49082 * C9617) *
               C49282) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C410 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C3912 + (C7315 + C7314) * C49239 +
             (C5042 * C1499 + C49240 * C1506 + C5043 * C2396 + C49082 * C2403) *
                 C3913 +
             (C5042 * C1505 + C49240 * C1511 + C5043 * C2404 + C49082 * C2414) *
                 C49040) *
                C1106 +
            ((C6759 + C6758) * C3912 + (C6757 + C6756) * C49239 +
             (C5042 * C1498 + C49240 * C1504 + C5043 * C2398 + C49082 * C2407) *
                 C3913 +
             (C5042 * C1503 + C49240 * C1510 + C5043 * C2408 + C49082 * C2416) *
                 C49040) *
                C1107 +
            ((C6755 + C6754) * C3912 + (C6753 + C6752) * C49239 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C3913 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C410 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C550 +
          (((C7317 + C7316) * C11310 + (C7315 + C7314) * C11304 +
            (C13450 + C13449) * C11311 + (C13448 + C13447) * C11305 +
            (C14726 + C14725) * C11312 + (C14724 + C14723) * C11306 +
            (C5042 * C9370 + C49240 * C9373 + C5043 * C9857 + C49082 * C9860) *
                C11313 +
            (C5042 * C9372 + C49240 * C9376 + C5043 * C9861 + C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C3912 + (C5432 + C5431) * C49239 +
             (C6759 + C6758) * C3913 + (C6757 + C6756) * C49040) *
                C1106 +
            ((C5430 + C5429) * C3912 + (C5428 + C5427) * C49239 +
             (C6755 + C6754) * C3913 + (C6753 + C6752) * C49040) *
                C1107 +
            ((C5426 + C5425) * C3912 + (C5424 + C5423) * C49239 +
             (C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C3913 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C49040) *
                C49259) *
               C49269 -
           (((C5257 + C5258) * C49040 + (C5259 + C5260) * C3913 +
             (C5088 + C5087) * C49239 + (C5086 + C5085) * C3912) *
                C49259 +
            (C6518 * C49040 + C6519 * C3913 + (C5084 + C5083) * C49239 +
             (C5082 + C5081) * C3912) *
                C1107 +
            (C6528 * C49040 + C6529 * C3913 + (C5080 + C5079) * C49239 +
             (C5078 + C5077) * C3912) *
                C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C824 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C5434 + C5433) * C11310 + (C5432 + C5431) * C11304 +
            (C6759 + C6758) * C11311 + (C6757 + C6756) * C11305 +
            (C12890 + C12889) * C11312 + (C12888 + C12887) * C11306 +
            (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
             C49082 * C10121) *
                C11313 +
            (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
             C49082 * C10123) *
                C49282) *
               C48883 * C49269 -
           ((C12681 + C12682) * C49282 + (C12683 + C12684) * C11313 +
            C12679 * C11306 + C12680 * C11312 + C6528 * C11305 +
            C6529 * C11311 + (C5080 + C5079) * C11304 +
            (C5078 + C5077) * C11310) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C3912 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C49239 +
             (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
                C1106 +
            ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 +
             C6508 * C3913 + C6509 * C49040) *
                C1107 +
            C6305 * C49259) *
               C824 -
           (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
             (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
                C49259 +
            ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
             (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
                C1107 +
            ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C49239 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C3912) *
                C1106) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C3912 + (C7315 + C7314) * C49239 +
             (C5042 * C1499 + C49240 * C1506 + C5043 * C2396 + C49082 * C2403) *
                 C3913 +
             (C5042 * C1505 + C49240 * C1511 + C5043 * C2404 + C49082 * C2414) *
                 C49040) *
                C1106 +
            ((C6759 + C6758) * C3912 + (C6757 + C6756) * C49239 +
             (C5042 * C1498 + C49240 * C1504 + C5043 * C2398 + C49082 * C2407) *
                 C3913 +
             (C5042 * C1503 + C49240 * C1510 + C5043 * C2408 + C49082 * C2416) *
                 C49040) *
                C1107 +
            ((C6755 + C6754) * C3912 + (C6753 + C6752) * C49239 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C3913 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49040) *
                C49259) *
               C49269 -
           (((C6534 + C6535) * C49040 + (C6536 + C6537) * C3913 +
             C6518 * C49239 + C6519 * C3912) *
                C49259 +
            ((C6538 + C6539) * C49040 + (C6540 + C6541) * C3913 +
             C6528 * C49239 + C6529 * C3912) *
                C1107 +
            ((C7108 + C7109) * C49040 + (C7110 + C7111) * C3913 +
             (C6533 + C6532) * C49239 + (C6531 + C6530) * C3912) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C11310 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C11304 +
            (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
            C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
            C14572 * C49282) *
               C48883 * C824 -
           ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
            (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
            (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C11304 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C11310) *
               C48883 * C49269) *
              C268 +
          (((C7317 + C7316) * C11310 + (C7315 + C7314) * C11304 +
            (C13450 + C13449) * C11311 + (C13448 + C13447) * C11305 +
            (C14726 + C14725) * C11312 + (C14724 + C14723) * C11306 +
            (C5042 * C9370 + C49240 * C9373 + C5043 * C9857 + C49082 * C9860) *
                C11313 +
            (C5042 * C9372 + C49240 * C9376 + C5043 * C9861 + C49082 * C9863) *
                C49282) *
               C48883 * C49269 -
           ((C14581 + C14582) * C49282 + (C14583 + C14584) * C11313 +
            (C13241 + C13242) * C11306 + (C13243 + C13244) * C11312 +
            (C7108 + C7109) * C11305 + (C7110 + C7111) * C11311 +
            (C6533 + C6532) * C11304 + (C6531 + C6530) * C11310) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C3912 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C49239 +
            (C6530 + C6531) * C3913 + (C6532 + C6533) * C49040) *
               C1106 +
           ((C5077 + C5078) * C3912 + (C5079 + C5080) * C49239 + C6508 * C3913 +
            C6509 * C49040) *
               C1107 +
           C6305 * C49259) *
              C970 -
          (((C6752 + C6753) * C49040 + (C6754 + C6755) * C3913 +
            (C5427 + C5428) * C49239 + (C5429 + C5430) * C3912) *
               C49259 +
           ((C6756 + C6757) * C49040 + (C6758 + C6759) * C3913 +
            (C5431 + C5432) * C49239 + (C5433 + C5434) * C3912) *
               C1107 +
           ((C7314 + C7315) * C49040 + (C7316 + C7317) * C3913 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C49239 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C3912) *
               C1106) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C3912 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C49239 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C3913 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C49040) *
               C1106 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C3912 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C49239 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C3913 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C49040) *
               C1107 +
           ((C5042 * C975 + C49240 * C982 + C5043 * C2928 + C49082 * C2933) *
                C3912 +
            (C5042 * C983 + C49240 * C990 + C5043 * C2932 + C49082 * C2940) *
                C49239 +
            (C5042 * C2399 + C49240 * C2409 + C5043 * C3384 + C49082 * C3389) *
                C3913 +
            (C5042 * C2410 + C49240 * C2417 + C5043 * C3390 + C49082 * C3393) *
                C49040) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
               C11310 +
           (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
               C11304 +
           (C6530 + C6531) * C11311 + (C6532 + C6533) * C11305 +
           C13231 * C11312 + C13232 * C11306 + C14571 * C11313 +
           C14572 * C49282) *
              C48883 * C970 -
          ((C14723 + C14724) * C49282 + (C14725 + C14726) * C11313 +
           (C13447 + C13448) * C11306 + (C13449 + C13450) * C11312 +
           (C7314 + C7315) * C11305 + (C7316 + C7317) * C11311 +
           (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
               C11304 +
           (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
               C11310) *
              C48883 * C971 +
          ((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
               C11310 +
           (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
               C11304 +
           (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
               C11311 +
           (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
               C11305 +
           (C5042 * C2396 + C49240 * C2403 + C5043 * C10324 + C49082 * C10327) *
               C11312 +
           (C5042 * C2404 + C49240 * C2414 + C5043 * C10326 + C49082 * C10330) *
               C11306 +
           (C5042 * C9856 + C49240 * C9858 + C5043 * C10756 + C49082 * C10757) *
               C11313 +
           (C5042 * C9859 + C49240 * C9862 + C5043 * C10758 + C49082 * C10759) *
               C49282) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 +
            (C113 * C276 + C48995 * C287) * C1110 +
            (C113 * C286 + C48995 * C294) * C49295 +
            (C113 * C620 + C48995 * C625) * C1111 +
            (C113 * C626 + C48995 * C635) * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C48950 * C110 -
          ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
           (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
           (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
              C48967 * C48950 * C111 +
          (C1153 * C1106 +
           (C1136 + C1135 + C1134 + C1133 + C1150 + C1149) * C1107 +
           (C170 * C1109 + C171 * C49307 + C314 * C1110 + C313 * C49295 +
            (C113 * C624 + C48995 * C633) * C1111 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C48950 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C48967 * C48950 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C48995 * C134) * C114 +
            (C113 * C135 + C48995 * C142) * C48978) *
               C107) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C48967 * C48950 * C110 -
          (((C2584 + C2585 + C2586) * C48978 + (C2587 + C2588 + C2589) * C114) *
               C49259 +
           ((C2583 + C2582 + C2581) * C48978 + (C2580 + C2579 + C2578) * C114) *
               C1107 +
           ((C2577 + C2576 + C2575) * C48978 + (C2574 + C2573 + C2572) * C114) *
               C1106) *
              C48967 * C48950 * C111 +
          (C2596 * C1106 +
           ((C2589 + C2588 + C2587) * C114 + (C2586 + C2585 + C2584) * C48978) *
               C1107 +
           ((C2532 * C119 + C49308 * C130 + C2533 * C412 + C49297 * C419 +
             C2534 * C977 + C49275 * C986) *
                C114 +
            (C2532 * C131 + C49308 * C140 + C2533 * C418 + C49297 * C430 +
             C2534 * C987 + C49275 * C992) *
                C48978) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C48950 * C110 -
          ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
           (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
           (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
              C48967 * C48950 * C111 +
          (C7993 * C49304 +
           (C7988 + C7987 + C7986 + C7985 + C7984 + C7983) * C49291 +
           (C170 * C7967 + C171 * C7961 + C314 * C7968 + C313 * C7962 +
            (C113 * C624 + C48995 * C633) * C7969 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + (C113 * C1805 + C48995 * C1808) * C9185 +
           (C113 * C1809 + C48995 * C1814) * C9179) *
              C48883 * C48967 * C48950 * C110 -
          ((C113 * C1811 + C48995 * C1815) * C9179 +
           (C113 * C1806 + C48995 * C1810) * C9185 + C1346 * C9178 +
           C1347 * C9184 + C1138 * C9177 + C1137 * C9183 + C319 * C9176 +
           C320 * C9182 + C165 * C9175 + C164 * C9181) *
              C48883 * C48967 * C48950 * C111 +
          (C166 * C9181 + C167 * C9175 + C318 * C9182 + C317 * C9176 +
           C1140 * C9183 + C1141 * C9177 + C1345 * C9184 + C1344 * C9178 +
           (C113 * C1807 + C48995 * C1812) * C9185 +
           (C113 * C1813 + C48995 * C1816) * C9179) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C2532 * C276 + C49308 * C287 + C2533 * C722 + C49297 * C727 +
            C2534 * C2395 + C49275 * C2401) *
               C7968 +
           (C2532 * C286 + C49308 * C294 + C2533 * C728 + C49297 * C737 +
            C2534 * C2402 + C49275 * C2413) *
               C7962 +
           (C2532 * C620 + C49308 * C625 + C2533 * C1499 + C49297 * C1506 +
            C2534 * C2396 + C49275 * C2403) *
               C7969 +
           (C2532 * C626 + C49308 * C635 + C2533 * C1505 + C49297 * C1511 +
            C2534 * C2404 + C49275 * C2414) *
               C49272) *
              C48883 * C48967 * C48950 * C110 -
          ((C2534 * C2408 + C49275 * C2416 + C2533 * C1503 + C49297 * C1510 +
            C2532 * C628 + C49308 * C636) *
               C49272 +
           (C2534 * C2398 + C49275 * C2407 + C2533 * C1498 + C49297 * C1504 +
            C2532 * C621 + C49308 * C627) *
               C7969 +
           (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
           (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
              C48883 * C48967 * C48950 * C111 +
          (C2592 * C7967 + C2593 * C7961 + (C2776 + C2775 + C2774) * C7968 +
           (C2773 + C2772 + C2771) * C7962 +
           (C2532 * C622 + C49308 * C629 + C2533 * C1497 + C49297 * C1502 +
            C2534 * C2400 + C49275 * C2411) *
               C7969 +
           (C2532 * C630 + C49308 * C637 + C2533 * C1501 + C49297 * C1509 +
            C2534 * C2412 + C49275 * C2418) *
               C49272) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C268 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C270 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C48967 * C268 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C48967 * C49267) *
              C270 +
          ((((C2782 + C2781 + C2780) * C114 +
             (C2779 + C2778 + C2777) * C48978) *
                C1106 +
            ((C2776 + C2775 + C2774) * C114 +
             (C2773 + C2772 + C2771) * C48978) *
                C1107 +
            ((C2532 * C273 + C49308 * C281 + C2533 * C725 + C49297 * C733 +
              C2534 * C2742 + C49275 * C2743) *
                 C114 +
             (C2532 * C280 + C49308 * C291 + C2533 * C734 + C49297 * C740 +
              C2534 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C268 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C268 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C48967 * C268 -
           ((C2534 * C9859 + C49275 * C9862 + C2533 * C1973 + C49297 * C1978 +
             C2532 * C1307 + C49308 * C1313) *
                C49272 +
            (C2534 * C9856 + C49275 * C9858 + C2533 * C1969 + C49297 * C1972 +
             C2532 * C1301 + C49308 * C1308) *
                C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C48967 * C49267) *
              C270 +
          (((C2782 + C2781 + C2780) * C7967 + (C2779 + C2778 + C2777) * C7961 +
            (C10173 + C10174 + C10175) * C7968 +
            (C10176 + C10177 + C10178) * C7962 +
            (C2532 * C1300 + C49308 * C1306 + C2533 * C1970 + C49297 * C1974 +
             C2534 * C10120 + C49275 * C10121) *
                C7969 +
            (C2532 * C1305 + C49308 * C1312 + C2533 * C1975 + C49297 * C1979 +
             C2534 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            ((C113 * C1505 + C48995 * C1511) * C49272 +
             (C113 * C1499 + C48995 * C1506) * C1111 +
             (C113 * C728 + C48995 * C737) * C49295 +
             (C113 * C722 + C48995 * C727) * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C270 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C410 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C48950 * C270 +
          ((((C2980 + C2979 + C2978) * C114 +
             (C2977 + C2976 + C2975) * C48978) *
                C1106 +
            ((C2974 + C2973 + C2972) * C114 +
             (C2971 + C2970 + C2969) * C48978) *
                C1107 +
            ((C2532 * C413 + C49308 * C421 + C2533 * C976 + C49297 * C984 +
              C2534 * C2931 + C49275 * C2938) *
                 C114 +
             (C2532 * C420 + C49308 * C431 + C2533 * C985 + C49297 * C991 +
              C2534 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C270 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           ((C113 * C9372 + C48995 * C9376) * C9179 +
            (C113 * C9370 + C48995 * C9373) * C9185 +
            (C113 * C1973 + C48995 * C1978) * C9178 +
            (C113 * C1969 + C48995 * C1972) * C9184 + C1990 * C9177 +
            C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C270 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C410 -
           ((C2534 * C10326 + C49275 * C10330 + C2533 * C2404 + C49297 * C2414 +
             C2532 * C1505 + C49308 * C1511) *
                C49272 +
            (C2534 * C10324 + C49275 * C10327 + C2533 * C2396 + C49297 * C2403 +
             C2532 * C1499 + C49308 * C1506) *
                C7969 +
            (C2534 * C3386 + C49275 * C3391 + C2533 * C2402 + C49297 * C2413 +
             C2532 * C728 + C49308 * C737) *
                C7962 +
            (C2534 * C3382 + C49275 * C3385 + C2533 * C2395 + C49297 * C2401 +
             C2532 * C722 + C49308 * C727) *
                C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C48950 * C270 +
          (((C2980 + C2979 + C2978) * C7967 + (C2977 + C2976 + C2975) * C7961 +
            (C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
             C2534 * C3383 + C49275 * C3387) *
                C7968 +
            (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
             C2534 * C3388 + C49275 * C3392) *
                C7962 +
            (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 + C49297 * C2407 +
             C2534 * C10325 + C49275 * C10328) *
                C7969 +
            (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 + C49297 * C2416 +
             C2534 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C550 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C552 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C48967 * C550 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C48967 * C49267) *
              C552 +
          ((((C2782 + C2781 + C2780) * C114 +
             (C2779 + C2778 + C2777) * C48978) *
                C1106 +
            ((C2776 + C2775 + C2774) * C114 +
             (C2773 + C2772 + C2771) * C48978) *
                C1107 +
            ((C2532 * C273 + C49308 * C281 + C2533 * C725 + C49297 * C733 +
              C2534 * C2742 + C49275 * C2743) *
                 C114 +
             (C2532 * C280 + C49308 * C291 + C2533 * C734 + C49297 * C740 +
              C2534 * C2744 + C49275 * C2745) *
                 C48978) *
                C49259) *
               C48967 * C49267 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C550 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C550 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 +
            (C10167 + C10168 + C10169) * C7969 +
            (C10170 + C10171 + C10172) * C49272) *
               C48883 * C48967 * C550 -
           ((C2534 * C9859 + C49275 * C9862 + C2533 * C1973 + C49297 * C1978 +
             C2532 * C1307 + C49308 * C1313) *
                C49272 +
            (C2534 * C9856 + C49275 * C9858 + C2533 * C1969 + C49297 * C1972 +
             C2532 * C1301 + C49308 * C1308) *
                C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C48967 * C49267) *
              C552 +
          (((C2782 + C2781 + C2780) * C7967 + (C2779 + C2778 + C2777) * C7961 +
            (C10173 + C10174 + C10175) * C7968 +
            (C10176 + C10177 + C10178) * C7962 +
            (C2532 * C1300 + C49308 * C1306 + C2533 * C1970 + C49297 * C1974 +
             C2534 * C10120 + C49275 * C10121) *
                C7969 +
            (C2532 * C1305 + C49308 * C1312 + C2533 * C1975 + C49297 * C1979 +
             C2534 * C10122 + C49275 * C10123) *
                C49272) *
               C48883 * C48967 * C49267 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C616 -
          ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
           (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
           (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
            C1341 * C49307 + C1340 * C1109) *
               C1106) *
              C48967 * C617 +
          ((C1342 * C1109 + C1343 * C49307 + C1823 * C1110 + C1822 * C49295 +
            (C113 * C1805 + C48995 * C1808) * C1111 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C1106 +
           (C1137 * C1109 + C1138 * C49307 + C1347 * C1110 + C1346 * C49295 +
            (C113 * C1806 + C48995 * C1810) * C1111 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C1107 +
           (C1140 * C1109 + C1141 * C49307 + C1345 * C1110 + C1344 * C49295 +
            (C113 * C1807 + C48995 * C1812) * C1111 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C48995 * C294) * C48978 +
            (C113 * C276 + C48995 * C287) * C114) *
               C103) *
              C48967 * C617 +
          (((C113 * C620 + C48995 * C625) * C114 +
            (C113 * C626 + C48995 * C635) * C48978) *
               C103 +
           ((C113 * C621 + C48995 * C627) * C114 +
            (C113 * C628 + C48995 * C636) * C48978) *
               C104 +
           ((C113 * C622 + C48995 * C629) * C114 +
            (C113 * C630 + C48995 * C637) * C48978) *
               C105 +
           ((C113 * C623 + C48995 * C631) * C114 +
            (C113 * C632 + C48995 * C638) * C48978) *
               C106 +
           ((C113 * C624 + C48995 * C633) * C114 +
            (C113 * C634 + C48995 * C639) * C48978) *
               C107) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C48967 * C616 -
          (((C2771 + C2772 + C2773) * C48978 + (C2774 + C2775 + C2776) * C114) *
               C49259 +
           ((C2777 + C2778 + C2779) * C48978 + (C2780 + C2781 + C2782) * C114) *
               C1107 +
           ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
             C2532 * C286 + C49308 * C294) *
                C48978 +
            (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
             C2532 * C276 + C49308 * C287) *
                C114) *
               C1106) *
              C48967 * C617 +
          (((C2532 * C620 + C49308 * C625 + C2533 * C1499 + C49297 * C1506 +
             C2534 * C2396 + C49275 * C2403) *
                C114 +
            (C2532 * C626 + C49308 * C635 + C2533 * C1505 + C49297 * C1511 +
             C2534 * C2404 + C49275 * C2414) *
                C48978) *
               C1106 +
           ((C2532 * C621 + C49308 * C627 + C2533 * C1498 + C49297 * C1504 +
             C2534 * C2398 + C49275 * C2407) *
                C114 +
            (C2532 * C628 + C49308 * C636 + C2533 * C1503 + C49297 * C1510 +
             C2534 * C2408 + C49275 * C2416) *
                C48978) *
               C1107 +
           ((C2532 * C622 + C49308 * C629 + C2533 * C1497 + C49297 * C1502 +
             C2534 * C2400 + C49275 * C2411) *
                C114 +
            (C2532 * C630 + C49308 * C637 + C2533 * C1501 + C49297 * C1509 +
             C2534 * C2412 + C49275 * C2418) *
                C48978) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C616 -
          ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
           (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
           (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
            C1341 * C7961 + C1340 * C7967) *
               C49304) *
              C48967 * C617 +
          ((C1342 * C7967 + C1343 * C7961 + C1823 * C7968 + C1822 * C7962 +
            (C113 * C1805 + C48995 * C1808) * C7969 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C49304 +
           (C1137 * C7967 + C1138 * C7961 + C1347 * C7968 + C1346 * C7962 +
            (C113 * C1806 + C48995 * C1810) * C7969 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C49291 +
           (C1140 * C7967 + C1141 * C7961 + C1345 * C7968 + C1344 * C7962 +
            (C113 * C1807 + C48995 * C1812) * C7969 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C48967 * C616 -
          (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
           C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
           C1341 * C9175 + C1340 * C9181) *
              C48883 * C48967 * C617 +
          (C1342 * C9181 + C1343 * C9175 + C1823 * C9182 + C1822 * C9176 +
           C9285 * C9183 + C9286 * C9177 + C9532 * C9184 + C9531 * C9178 +
           (C113 * C9522 + C48995 * C9523) * C9185 +
           (C113 * C9524 + C48995 * C9525) * C9179) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C10161 + C10162 + C10163) * C7968 +
           (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
           C10604 * C49272) *
              C48883 * C48967 * C616 -
          ((C10605 + C10606 + C10607) * C49272 +
           (C10608 + C10609 + C10610) * C7969 +
           (C10172 + C10171 + C10170) * C7962 +
           (C10169 + C10168 + C10167) * C7968 +
           (C10166 + C10165 + C10164) * C7961 +
           (C10163 + C10162 + C10161) * C7967) *
              C48883 * C48967 * C617 +
          (C10603 * C7967 + C10604 * C7961 +
           (C10610 + C10609 + C10608) * C7968 +
           (C10607 + C10606 + C10605) * C7962 +
           (C2532 * C1805 + C49308 * C1808 + C2533 * C9370 + C49297 * C9373 +
            C2534 * C9857 + C49275 * C9860) *
               C7969 +
           (C2532 * C1809 + C49308 * C1814 + C2533 * C9372 + C49297 * C9376 +
            C2534 * C9861 + C49275 * C9863) *
               C49272) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C550 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C550 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C410 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C550 +
          ((((C2532 * C722 + C49308 * C727 + C2533 * C2395 + C49297 * C2401 +
              C2534 * C3382 + C49275 * C3385) *
                 C114 +
             (C2532 * C728 + C49308 * C737 + C2533 * C2402 + C49297 * C2413 +
              C2534 * C3386 + C49275 * C3391) *
                 C48978) *
                C1106 +
            ((C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
              C2534 * C3383 + C49275 * C3387) *
                 C114 +
             (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
              C2534 * C3388 + C49275 * C3392) *
                 C48978) *
                C1107 +
            ((C2532 * C724 + C49308 * C731 + C2533 * C2399 + C49297 * C2409 +
              C2534 * C3384 + C49275 * C3389) *
                 C114 +
             (C2532 * C732 + C49308 * C739 + C2533 * C2410 + C49297 * C2417 +
              C2534 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C550 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C550 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C410 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C550 +
          (((C10796 + C10795 + C10794) * C7967 +
            (C10793 + C10792 + C10791) * C7961 +
            (C10790 + C10789 + C10788) * C7968 +
            (C10787 + C10786 + C10785) * C7962 +
            (C2532 * C1969 + C49308 * C1972 + C2533 * C9856 + C49297 * C9858 +
             C2534 * C10756 + C49275 * C10757) *
                C7969 +
            (C2532 * C1973 + C49308 * C1978 + C2533 * C9859 + C49297 * C9862 +
             C2534 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C10605 + C10606 + C10607) * C49272 +
            (C10608 + C10609 + C10610) * C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C552 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C824 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C48950 * C552 +
          ((((C2980 + C2979 + C2978) * C114 +
             (C2977 + C2976 + C2975) * C48978) *
                C1106 +
            ((C2974 + C2973 + C2972) * C114 +
             (C2971 + C2970 + C2969) * C48978) *
                C1107 +
            ((C2532 * C413 + C49308 * C421 + C2533 * C976 + C49297 * C984 +
              C2534 * C2931 + C49275 * C2938) *
                 C114 +
             (C2532 * C420 + C49308 * C431 + C2533 * C985 + C49297 * C991 +
              C2534 * C2939 + C49275 * C2943) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2584 + C2585 + C2586) * C48978 +
             (C2587 + C2588 + C2589) * C114) *
                C49259 +
            ((C2583 + C2582 + C2581) * C48978 +
             (C2580 + C2579 + C2578) * C114) *
                C1107 +
            ((C2577 + C2576 + C2575) * C48978 +
             (C2574 + C2573 + C2572) * C114) *
                C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C552 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C552 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C824 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C48950 * C552 +
          (((C2980 + C2979 + C2978) * C7967 + (C2977 + C2976 + C2975) * C7961 +
            (C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
             C2534 * C3383 + C49275 * C3387) *
                C7968 +
            (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
             C2534 * C3388 + C49275 * C3392) *
                C7962 +
            (C2532 * C1498 + C49308 * C1504 + C2533 * C2398 + C49297 * C2407 +
             C2534 * C10325 + C49275 * C10328) *
                C7969 +
            (C2532 * C1503 + C49308 * C1510 + C2533 * C2408 + C49297 * C2416 +
             C2534 * C10329 + C49275 * C10331) *
                C49272) *
               C48883 * C49269 -
           ((C10178 + C10177 + C10176) * C49272 +
            (C10175 + C10174 + C10173) * C7969 +
            (C2777 + C2778 + C2779) * C7962 + (C2780 + C2781 + C2782) * C7968 +
            (C2577 + C2576 + C2575) * C7961 + (C2574 + C2573 + C2572) * C7967) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C268 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C268 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
              C2534 * C973 + C49275 * C978) *
                 C114 +
             (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
              C2534 * C979 + C49275 * C988) *
                 C48978) *
                C1106 +
            ((C2572 + C2573 + C2574) * C114 +
             (C2575 + C2576 + C2577) * C48978) *
                C1107 +
            C2596 * C49259) *
               C824 -
           (((C2969 + C2970 + C2971) * C48978 +
             (C2972 + C2973 + C2974) * C114) *
                C49259 +
            ((C2975 + C2976 + C2977) * C48978 +
             (C2978 + C2979 + C2980) * C114) *
                C1107 +
            ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
              C2532 * C426 + C49308 * C434) *
                 C48978 +
             (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
              C2532 * C416 + C49308 * C427) *
                 C114) *
                C1106) *
               C49269) *
              C268 +
          ((((C2532 * C722 + C49308 * C727 + C2533 * C2395 + C49297 * C2401 +
              C2534 * C3382 + C49275 * C3385) *
                 C114 +
             (C2532 * C728 + C49308 * C737 + C2533 * C2402 + C49297 * C2413 +
              C2534 * C3386 + C49275 * C3391) *
                 C48978) *
                C1106 +
            ((C2532 * C723 + C49308 * C729 + C2533 * C2397 + C49297 * C2405 +
              C2534 * C3383 + C49275 * C3387) *
                 C114 +
             (C2532 * C730 + C49308 * C738 + C2533 * C2406 + C49297 * C2415 +
              C2534 * C3388 + C49275 * C3392) *
                 C48978) *
                C1107 +
            ((C2532 * C724 + C49308 * C731 + C2533 * C2399 + C49297 * C2409 +
              C2534 * C3384 + C49275 * C3389) *
                 C114 +
             (C2532 * C732 + C49308 * C739 + C2533 * C2410 + C49297 * C2417 +
              C2534 * C3390 + C49275 * C3393) *
                 C48978) *
                C49259) *
               C49269 -
           (((C2771 + C2772 + C2773) * C48978 +
             (C2774 + C2775 + C2776) * C114) *
                C49259 +
            ((C2777 + C2778 + C2779) * C48978 +
             (C2780 + C2781 + C2782) * C114) *
                C1107 +
            ((C2534 * C2402 + C49275 * C2413 + C2533 * C728 + C49297 * C737 +
              C2532 * C286 + C49308 * C294) *
                 C48978 +
             (C2534 * C2395 + C49275 * C2401 + C2533 * C722 + C49297 * C727 +
              C2532 * C276 + C49308 * C287) *
                 C114) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C268 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C268 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C7967 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C7961 +
            (C10161 + C10162 + C10163) * C7968 +
            (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
            C10604 * C49272) *
               C48883 * C824 -
           ((C10785 + C10786 + C10787) * C49272 +
            (C10788 + C10789 + C10790) * C7969 +
            (C10791 + C10792 + C10793) * C7962 +
            (C10794 + C10795 + C10796) * C7968 +
            (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C7961 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C7967) *
               C48883 * C49269) *
              C268 +
          (((C10796 + C10795 + C10794) * C7967 +
            (C10793 + C10792 + C10791) * C7961 +
            (C10790 + C10789 + C10788) * C7968 +
            (C10787 + C10786 + C10785) * C7962 +
            (C2532 * C1969 + C49308 * C1972 + C2533 * C9856 + C49297 * C9858 +
             C2534 * C10756 + C49275 * C10757) *
                C7969 +
            (C2532 * C1973 + C49308 * C1978 + C2533 * C9859 + C49297 * C9862 +
             C2534 * C10758 + C49275 * C10759) *
                C49272) *
               C48883 * C49269 -
           ((C10605 + C10606 + C10607) * C49272 +
            (C10608 + C10609 + C10610) * C7969 +
            (C10172 + C10171 + C10170) * C7962 +
            (C10169 + C10168 + C10167) * C7968 +
            (C10166 + C10165 + C10164) * C7961 +
            (C10163 + C10162 + C10161) * C7967) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C970 -
          ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
           (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
           (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
            (C113 * C426 + C48995 * C434) * C49307 +
            (C113 * C416 + C48995 * C427) * C1109) *
               C1106) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C1109 +
            (C113 * C979 + C48995 * C988) * C49307 +
            (C113 * C2395 + C48995 * C2401) * C1110 +
            (C113 * C2402 + C48995 * C2413) * C49295 +
            (C113 * C2396 + C48995 * C2403) * C1111 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C1106 +
           ((C113 * C974 + C48995 * C980) * C1109 +
            (C113 * C981 + C48995 * C989) * C49307 +
            (C113 * C2397 + C48995 * C2405) * C1110 +
            (C113 * C2406 + C48995 * C2415) * C49295 +
            (C113 * C2398 + C48995 * C2407) * C1111 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C1107 +
           ((C113 * C975 + C48995 * C982) * C1109 +
            (C113 * C983 + C48995 * C990) * C49307 +
            (C113 * C2399 + C48995 * C2409) * C1110 +
            (C113 * C2410 + C48995 * C2417) * C49295 +
            (C113 * C2400 + C48995 * C2411) * C1111 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C48995 * C434) * C48978 +
            (C113 * C416 + C48995 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C114 +
            (C113 * C979 + C48995 * C988) * C48978) *
               C103 +
           ((C113 * C974 + C48995 * C980) * C114 +
            (C113 * C981 + C48995 * C989) * C48978) *
               C104 +
           ((C113 * C975 + C48995 * C982) * C114 +
            (C113 * C983 + C48995 * C990) * C48978) *
               C105 +
           ((C113 * C976 + C48995 * C984) * C114 +
            (C113 * C985 + C48995 * C991) * C48978) *
               C106 +
           ((C113 * C977 + C48995 * C986) * C114 +
            (C113 * C987 + C48995 * C992) * C48978) *
               C107) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
             C2534 * C973 + C49275 * C978) *
                C114 +
            (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
             C2534 * C979 + C49275 * C988) *
                C48978) *
               C1106 +
           ((C2572 + C2573 + C2574) * C114 + (C2575 + C2576 + C2577) * C48978) *
               C1107 +
           C2596 * C49259) *
              C970 -
          (((C2969 + C2970 + C2971) * C48978 + (C2972 + C2973 + C2974) * C114) *
               C49259 +
           ((C2975 + C2976 + C2977) * C48978 + (C2978 + C2979 + C2980) * C114) *
               C1107 +
           ((C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
             C2532 * C426 + C49308 * C434) *
                C48978 +
            (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
             C2532 * C416 + C49308 * C427) *
                C114) *
               C1106) *
              C971 +
          (((C2532 * C973 + C49308 * C978 + C2533 * C2930 + C49297 * C2937 +
             C2534 * C3796 + C49275 * C3799) *
                C114 +
            (C2532 * C979 + C49308 * C988 + C2533 * C2936 + C49297 * C2942 +
             C2534 * C3800 + C49275 * C3805) *
                C48978) *
               C1106 +
           ((C2532 * C974 + C49308 * C980 + C2533 * C2929 + C49297 * C2935 +
             C2534 * C3797 + C49275 * C3801) *
                C114 +
            (C2532 * C981 + C49308 * C989 + C2533 * C2934 + C49297 * C2941 +
             C2534 * C3802 + C49275 * C3806) *
                C48978) *
               C1107 +
           ((C2532 * C975 + C49308 * C982 + C2533 * C2928 + C49297 * C2933 +
             C2534 * C3798 + C49275 * C3803) *
                C114 +
            (C2532 * C983 + C49308 * C990 + C2533 * C2932 + C49297 * C2940 +
             C2534 * C3804 + C49275 * C3807) *
                C48978) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C970 -
          ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
           (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
           (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
            (C113 * C426 + C48995 * C434) * C7961 +
            (C113 * C416 + C48995 * C427) * C7967) *
               C49304) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C7967 +
            (C113 * C979 + C48995 * C988) * C7961 +
            (C113 * C2395 + C48995 * C2401) * C7968 +
            (C113 * C2402 + C48995 * C2413) * C7962 +
            (C113 * C2396 + C48995 * C2403) * C7969 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C49304 +
           ((C113 * C974 + C48995 * C980) * C7967 +
            (C113 * C981 + C48995 * C989) * C7961 +
            (C113 * C2397 + C48995 * C2405) * C7968 +
            (C113 * C2406 + C48995 * C2415) * C7962 +
            (C113 * C2398 + C48995 * C2407) * C7969 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C49291 +
           ((C113 * C975 + C48995 * C982) * C7967 +
            (C113 * C983 + C48995 * C990) * C7961 +
            (C113 * C2399 + C48995 * C2409) * C7968 +
            (C113 * C2410 + C48995 * C2417) * C7962 +
            (C113 * C2400 + C48995 * C2411) * C7969 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C970 -
          (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
           C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
           (C113 * C426 + C48995 * C434) * C9175 +
           (C113 * C416 + C48995 * C427) * C9181) *
              C48883 * C971 +
          ((C113 * C973 + C48995 * C978) * C9181 +
           (C113 * C979 + C48995 * C988) * C9175 +
           (C113 * C2395 + C48995 * C2401) * C9182 +
           (C113 * C2402 + C48995 * C2413) * C9176 +
           (C113 * C2396 + C48995 * C2403) * C9183 +
           (C113 * C2404 + C48995 * C2414) * C9177 +
           (C113 * C9856 + C48995 * C9858) * C9184 +
           (C113 * C9859 + C48995 * C9862) * C9178 +
           (C113 * C9857 + C48995 * C9860) * C9185 +
           (C113 * C9861 + C48995 * C9863) * C9179) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2532 * C115 + C49308 * C122 + C2533 * C416 + C49297 * C427 +
            C2534 * C973 + C49275 * C978) *
               C7967 +
           (C2532 * C123 + C49308 * C136 + C2533 * C426 + C49297 * C434 +
            C2534 * C979 + C49275 * C988) *
               C7961 +
           (C10161 + C10162 + C10163) * C7968 +
           (C10164 + C10165 + C10166) * C7962 + C10603 * C7969 +
           C10604 * C49272) *
              C48883 * C970 -
          ((C10785 + C10786 + C10787) * C49272 +
           (C10788 + C10789 + C10790) * C7969 +
           (C10791 + C10792 + C10793) * C7962 +
           (C10794 + C10795 + C10796) * C7968 +
           (C2534 * C2936 + C49275 * C2942 + C2533 * C979 + C49297 * C988 +
            C2532 * C426 + C49308 * C434) *
               C7961 +
           (C2534 * C2930 + C49275 * C2937 + C2533 * C973 + C49297 * C978 +
            C2532 * C416 + C49308 * C427) *
               C7967) *
              C48883 * C971 +
          ((C2532 * C973 + C49308 * C978 + C2533 * C2930 + C49297 * C2937 +
            C2534 * C3796 + C49275 * C3799) *
               C7967 +
           (C2532 * C979 + C49308 * C988 + C2533 * C2936 + C49297 * C2942 +
            C2534 * C3800 + C49275 * C3805) *
               C7961 +
           (C2532 * C2395 + C49308 * C2401 + C2533 * C3382 + C49297 * C3385 +
            C2534 * C11198 + C49275 * C11200) *
               C7968 +
           (C2532 * C2402 + C49308 * C2413 + C2533 * C3386 + C49297 * C3391 +
            C2534 * C11201 + C49275 * C11204) *
               C7962 +
           (C2532 * C2396 + C49308 * C2403 + C2533 * C10324 + C49297 * C10327 +
            C2534 * C11199 + C49275 * C11202) *
               C7969 +
           (C2532 * C2404 + C49308 * C2414 + C2533 * C10326 + C49297 * C10330 +
            C2534 * C11203 + C49275 * C11205) *
               C49272) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C48967 * C48950 * C110 -
          (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
           ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
           ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
           ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
              C48967 * C48950 * C111 +
          (C5101 * C3908 + C5102 * C3909 +
           ((C5092 + C5091) * C114 + (C5090 + C5089) * C48978) * C3910 +
           ((C5042 * C120 + C49240 * C133 + C5043 * C417 + C49082 * C428) *
                C114 +
            (C5042 * C132 + C49240 * C141 + C5043 * C429 + C49082 * C435) *
                C48978) *
               C49276) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
            (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + (C6541 + C6540) * C7969 +
            (C6539 + C6538) * C49272) *
               C48893) *
              C48967 * C48950 * C110 -
          (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 + C6518 * C7962 +
            C6519 * C7968 + (C5084 + C5083) * C7961 + (C5082 + C5081) * C7967) *
               C48893 +
           ((C6538 + C6539) * C49272 + (C6540 + C6541) * C7969 + C6528 * C7962 +
            C6529 * C7968 + (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
               C49217) *
              C48967 * C48950 * C111 +
          ((C5093 * C7967 + C5094 * C7961 + C6299 * C7968 + C6300 * C7962 +
            (C6537 + C6536) * C7969 + (C6535 + C6534) * C49272) *
               C49217 +
           (C5095 * C7967 + C5096 * C7961 + (C5260 + C5259) * C7968 +
            (C5258 + C5257) * C7962 +
            (C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                C7969 +
            (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                C49272) *
               C48893) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C48967 * C268 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C48967 * C49267) *
              C270 +
          ((((C5268 + C5267) * C114 + (C5266 + C5265) * C48978) * C3908 +
            ((C5264 + C5263) * C114 + (C5262 + C5261) * C48978) * C3909 +
            ((C5260 + C5259) * C114 + (C5258 + C5257) * C48978) * C3910 +
            ((C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                 C114 +
             (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C48967 * C268 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C5043 * C1973 + C49082 * C1978 + C5042 * C1307 + C49240 * C1313) *
                 C49272 +
             (C5043 * C1969 + C49082 * C1972 + C5042 * C1301 + C49240 * C1308) *
                 C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C48967 * C49267) *
              C270 +
          (((C6508 * C7967 + C6509 * C7961 + C12669 * C7968 + C12670 * C7962 +
             (C12684 + C12683) * C7969 + (C12682 + C12681) * C49272) *
                C49217 +
            (C6299 * C7967 + C6300 * C7961 + (C6537 + C6536) * C7968 +
             (C6535 + C6534) * C7962 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C7969 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C410 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C114 + (C5432 + C5431) * C48978) * C3908 +
            ((C5430 + C5429) * C114 + (C5428 + C5427) * C48978) * C3909 +
            ((C5426 + C5425) * C114 + (C5424 + C5423) * C48978) * C3910 +
            ((C5042 * C412 + C49240 * C419 + C5043 * C977 + C49082 * C986) *
                 C114 +
             (C5042 * C418 + C49240 * C430 + C5043 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C5043 * C2404 + C49082 * C2414 + C5042 * C1505 + C49240 * C1511) *
                 C49272 +
             (C5043 * C2396 + C49082 * C2403 + C5042 * C1499 + C49240 * C1506) *
                 C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C48950 * C270 +
          ((((C5434 + C5433) * C7967 + (C5432 + C5431) * C7961 +
             (C6759 + C6758) * C7968 + (C6757 + C6756) * C7962 +
             (C12890 + C12889) * C7969 + (C12888 + C12887) * C49272) *
                C49217 +
            ((C5430 + C5429) * C7967 + (C5428 + C5427) * C7961 +
             (C6755 + C6754) * C7968 + (C6753 + C6752) * C7962 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C7969 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C48967 * C550 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C48967 * C49267) *
              C552 +
          ((((C5268 + C5267) * C114 + (C5266 + C5265) * C48978) * C3908 +
            ((C5264 + C5263) * C114 + (C5262 + C5261) * C48978) * C3909 +
            ((C5260 + C5259) * C114 + (C5258 + C5257) * C48978) * C3910 +
            ((C5042 * C272 + C49240 * C279 + C5043 * C726 + C49082 * C735) *
                 C114 +
             (C5042 * C278 + C49240 * C290 + C5043 * C736 + C49082 * C741) *
                 C48978) *
                C49276) *
               C48967 * C49267 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             (C7111 + C7110) * C7969 + (C7109 + C7108) * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C48967 * C550 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C5043 * C1973 + C49082 * C1978 + C5042 * C1307 + C49240 * C1313) *
                 C49272 +
             (C5043 * C1969 + C49082 * C1972 + C5042 * C1301 + C49240 * C1308) *
                 C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C48967 * C49267) *
              C552 +
          (((C6508 * C7967 + C6509 * C7961 + C12669 * C7968 + C12670 * C7962 +
             (C12684 + C12683) * C7969 + (C12682 + C12681) * C49272) *
                C49217 +
            (C6299 * C7967 + C6300 * C7961 + (C6537 + C6536) * C7968 +
             (C6535 + C6534) * C7962 +
             (C5042 * C1299 + C49240 * C1304 + C5043 * C1971 + C49082 * C1976) *
                 C7969 +
             (C5042 * C1303 + C49240 * C1311 + C5043 * C1977 + C49082 * C1980) *
                 C49272) *
                C48893) *
               C48967 * C49267 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C48967 * C616 -
          (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
           ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
           ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
           ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                C48978 +
            (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                C114) *
               C3908) *
              C48967 * C617 +
          (((C5042 * C620 + C49240 * C625 + C5043 * C1499 + C49082 * C1506) *
                C114 +
            (C5042 * C626 + C49240 * C635 + C5043 * C1505 + C49082 * C1511) *
                C48978) *
               C3908 +
           ((C5042 * C621 + C49240 * C627 + C5043 * C1498 + C49082 * C1504) *
                C114 +
            (C5042 * C628 + C49240 * C636 + C5043 * C1503 + C49082 * C1510) *
                C48978) *
               C3909 +
           ((C5042 * C622 + C49240 * C629 + C5043 * C1497 + C49082 * C1502) *
                C114 +
            (C5042 * C630 + C49240 * C637 + C5043 * C1501 + C49082 * C1509) *
                C48978) *
               C3910 +
           ((C5042 * C623 + C49240 * C631 + C5043 * C1500 + C49082 * C1507) *
                C114 +
            (C5042 * C632 + C49240 * C638 + C5043 * C1508 + C49082 * C1512) *
                C48978) *
               C49276) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 + C13231 * C7969 +
            C13232 * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
               C48893) *
              C48967 * C616 -
          (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
            C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
               C48893 +
           ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
            (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
            (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
               C49217) *
              C48967 * C617 +
          ((C13231 * C7967 + C13232 * C7961 + (C13244 + C13243) * C7968 +
            (C13242 + C13241) * C7962 +
            (C5042 * C1805 + C49240 * C1808 + C5043 * C9370 + C49082 * C9373) *
                C7969 +
            (C5042 * C1809 + C49240 * C1814 + C5043 * C9372 + C49082 * C9376) *
                C49272) *
               C49217 +
           (C12669 * C7967 + C12670 * C7961 + (C12684 + C12683) * C7968 +
            (C12682 + C12681) * C7962 +
            (C5042 * C1806 + C49240 * C1810 + C5043 * C9371 + C49082 * C9374) *
                C7969 +
            (C5042 * C1811 + C49240 * C1815 + C5043 * C9375 + C49082 * C9377) *
                C49272) *
               C48893) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C410 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C550 +
          ((((C5042 * C722 + C49240 * C727 + C5043 * C2395 + C49082 * C2401) *
                 C114 +
             (C5042 * C728 + C49240 * C737 + C5043 * C2402 + C49082 * C2413) *
                 C48978) *
                C3908 +
            ((C5042 * C723 + C49240 * C729 + C5043 * C2397 + C49082 * C2405) *
                 C114 +
             (C5042 * C730 + C49240 * C738 + C5043 * C2406 + C49082 * C2415) *
                 C48978) *
                C3909 +
            ((C5042 * C724 + C49240 * C731 + C5043 * C2399 + C49082 * C2409) *
                 C114 +
             (C5042 * C732 + C49240 * C739 + C5043 * C2410 + C49082 * C2417) *
                 C48978) *
                C3910 +
            ((C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C114 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C410 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C550 +
          ((((C7317 + C7316) * C7967 + (C7315 + C7314) * C7961 +
             (C13450 + C13449) * C7968 + (C13448 + C13447) * C7962 +
             (C5042 * C1969 + C49240 * C1972 + C5043 * C9856 + C49082 * C9858) *
                 C7969 +
             (C5042 * C1973 + C49240 * C1978 + C5043 * C9859 + C49082 * C9862) *
                 C49272) *
                C49217 +
            ((C6759 + C6758) * C7967 + (C6757 + C6756) * C7961 +
             (C12890 + C12889) * C7968 + (C12888 + C12887) * C7962 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C7969 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C824 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C114 + (C5432 + C5431) * C48978) * C3908 +
            ((C5430 + C5429) * C114 + (C5428 + C5427) * C48978) * C3909 +
            ((C5426 + C5425) * C114 + (C5424 + C5423) * C48978) * C3910 +
            ((C5042 * C412 + C49240 * C419 + C5043 * C977 + C49082 * C986) *
                 C114 +
             (C5042 * C418 + C49240 * C430 + C5043 * C987 + C49082 * C992) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5089 + C5090) * C48978 + (C5091 + C5092) * C114) * C49276 +
            ((C5088 + C5087) * C48978 + (C5086 + C5085) * C114) * C3910 +
            ((C5084 + C5083) * C48978 + (C5082 + C5081) * C114) * C3909 +
            ((C5080 + C5079) * C48978 + (C5078 + C5077) * C114) * C3908) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C48950 * C552 +
          ((((C5434 + C5433) * C7967 + (C5432 + C5431) * C7961 +
             (C6759 + C6758) * C7968 + (C6757 + C6756) * C7962 +
             (C12890 + C12889) * C7969 + (C12888 + C12887) * C49272) *
                C49217 +
            ((C5430 + C5429) * C7967 + (C5428 + C5427) * C7961 +
             (C6755 + C6754) * C7968 + (C6753 + C6752) * C7962 +
             (C5042 * C1497 + C49240 * C1502 + C5043 * C2400 + C49082 * C2411) *
                 C7969 +
             (C5042 * C1501 + C49240 * C1509 + C5043 * C2412 + C49082 * C2418) *
                 C49272) *
                C48893) *
               C49269 -
           (((C6534 + C6535) * C49272 + (C6536 + C6537) * C7969 +
             C6518 * C7962 + C6519 * C7968 + (C5084 + C5083) * C7961 +
             (C5082 + C5081) * C7967) *
                C48893 +
            (C12679 * C49272 + C12680 * C7969 + C6528 * C7962 + C6529 * C7968 +
             (C5080 + C5079) * C7961 + (C5078 + C5077) * C7967) *
                C49217) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C114 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C48978) *
                C3908 +
            ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
            C5101 * C3910 + C5102 * C49276) *
               C824 -
           (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
            ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
            ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
            ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C48978 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C114) *
                C3908) *
               C49269) *
              C268 +
          ((((C5042 * C722 + C49240 * C727 + C5043 * C2395 + C49082 * C2401) *
                 C114 +
             (C5042 * C728 + C49240 * C737 + C5043 * C2402 + C49082 * C2413) *
                 C48978) *
                C3908 +
            ((C5042 * C723 + C49240 * C729 + C5043 * C2397 + C49082 * C2405) *
                 C114 +
             (C5042 * C730 + C49240 * C738 + C5043 * C2406 + C49082 * C2415) *
                 C48978) *
                C3909 +
            ((C5042 * C724 + C49240 * C731 + C5043 * C2399 + C49082 * C2409) *
                 C114 +
             (C5042 * C732 + C49240 * C739 + C5043 * C2410 + C49082 * C2417) *
                 C48978) *
                C3910 +
            ((C5042 * C725 + C49240 * C733 + C5043 * C2742 + C49082 * C2743) *
                 C114 +
             (C5042 * C734 + C49240 * C740 + C5043 * C2744 + C49082 * C2745) *
                 C48978) *
                C49276) *
               C49269 -
           (((C5257 + C5258) * C48978 + (C5259 + C5260) * C114) * C49276 +
            ((C5261 + C5262) * C48978 + (C5263 + C5264) * C114) * C3910 +
            ((C5265 + C5266) * C48978 + (C5267 + C5268) * C114) * C3909 +
            ((C5043 * C728 + C49082 * C737 + C5042 * C286 + C49240 * C294) *
                 C48978 +
             (C5043 * C722 + C49082 * C727 + C5042 * C276 + C49240 * C287) *
                 C114) *
                C3908) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                 C7967 +
             (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                 C7961 +
             (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 +
             C13231 * C7969 + C13232 * C49272) *
                C49217 +
            ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
             C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
                C48893) *
               C824 -
           (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
             (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
             (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
                C48893 +
            ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
             (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
             (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                 C7961 +
             (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                 C7967) *
                C49217) *
               C49269) *
              C268 +
          ((((C7317 + C7316) * C7967 + (C7315 + C7314) * C7961 +
             (C13450 + C13449) * C7968 + (C13448 + C13447) * C7962 +
             (C5042 * C1969 + C49240 * C1972 + C5043 * C9856 + C49082 * C9858) *
                 C7969 +
             (C5042 * C1973 + C49240 * C1978 + C5043 * C9859 + C49082 * C9862) *
                 C49272) *
                C49217 +
            ((C6759 + C6758) * C7967 + (C6757 + C6756) * C7961 +
             (C12890 + C12889) * C7968 + (C12888 + C12887) * C7962 +
             (C5042 * C1970 + C49240 * C1974 + C5043 * C10120 +
              C49082 * C10121) *
                 C7969 +
             (C5042 * C1975 + C49240 * C1979 + C5043 * C10122 +
              C49082 * C10123) *
                 C49272) *
                C48893) *
               C49269 -
           (((C12681 + C12682) * C49272 + (C12683 + C12684) * C7969 +
             C12679 * C7962 + C12680 * C7968 + C6528 * C7961 + C6529 * C7967) *
                C48893 +
            ((C13241 + C13242) * C49272 + (C13243 + C13244) * C7969 +
             (C7108 + C7109) * C7962 + (C7110 + C7111) * C7968 +
             (C6533 + C6532) * C7961 + (C6531 + C6530) * C7967) *
                C49217) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C114 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C48978) *
               C3908 +
           ((C5077 + C5078) * C114 + (C5079 + C5080) * C48978) * C3909 +
           C5101 * C3910 + C5102 * C49276) *
              C970 -
          (((C5423 + C5424) * C48978 + (C5425 + C5426) * C114) * C49276 +
           ((C5427 + C5428) * C48978 + (C5429 + C5430) * C114) * C3910 +
           ((C5431 + C5432) * C48978 + (C5433 + C5434) * C114) * C3909 +
           ((C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C48978 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C114) *
               C3908) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C114 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C48978) *
               C3908 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C114 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C48978) *
               C3909 +
           ((C5042 * C975 + C49240 * C982 + C5043 * C2928 + C49082 * C2933) *
                C114 +
            (C5042 * C983 + C49240 * C990 + C5043 * C2932 + C49082 * C2940) *
                C48978) *
               C3910 +
           ((C5042 * C976 + C49240 * C984 + C5043 * C2931 + C49082 * C2938) *
                C114 +
            (C5042 * C985 + C49240 * C991 + C5043 * C2939 + C49082 * C2943) *
                C48978) *
               C49276) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5042 * C115 + C49240 * C122 + C5043 * C416 + C49082 * C427) *
                C7967 +
            (C5042 * C123 + C49240 * C136 + C5043 * C426 + C49082 * C434) *
                C7961 +
            (C6530 + C6531) * C7968 + (C6532 + C6533) * C7962 + C13231 * C7969 +
            C13232 * C49272) *
               C49217 +
           ((C5077 + C5078) * C7967 + (C5079 + C5080) * C7961 + C6508 * C7968 +
            C6509 * C7962 + C12669 * C7969 + C12670 * C49272) *
               C48893) *
              C970 -
          (((C12887 + C12888) * C49272 + (C12889 + C12890) * C7969 +
            (C6756 + C6757) * C7962 + (C6758 + C6759) * C7968 +
            (C5431 + C5432) * C7961 + (C5433 + C5434) * C7967) *
               C48893 +
           ((C13447 + C13448) * C49272 + (C13449 + C13450) * C7969 +
            (C7314 + C7315) * C7962 + (C7316 + C7317) * C7968 +
            (C5043 * C979 + C49082 * C988 + C5042 * C426 + C49240 * C434) *
                C7961 +
            (C5043 * C973 + C49082 * C978 + C5042 * C416 + C49240 * C427) *
                C7967) *
               C49217) *
              C971 +
          (((C5042 * C973 + C49240 * C978 + C5043 * C2930 + C49082 * C2937) *
                C7967 +
            (C5042 * C979 + C49240 * C988 + C5043 * C2936 + C49082 * C2942) *
                C7961 +
            (C5042 * C2395 + C49240 * C2401 + C5043 * C3382 + C49082 * C3385) *
                C7968 +
            (C5042 * C2402 + C49240 * C2413 + C5043 * C3386 + C49082 * C3391) *
                C7962 +
            (C5042 * C2396 + C49240 * C2403 + C5043 * C10324 +
             C49082 * C10327) *
                C7969 +
            (C5042 * C2404 + C49240 * C2414 + C5043 * C10326 +
             C49082 * C10330) *
                C49272) *
               C49217 +
           ((C5042 * C974 + C49240 * C980 + C5043 * C2929 + C49082 * C2935) *
                C7967 +
            (C5042 * C981 + C49240 * C989 + C5043 * C2934 + C49082 * C2941) *
                C7961 +
            (C5042 * C2397 + C49240 * C2405 + C5043 * C3383 + C49082 * C3387) *
                C7968 +
            (C5042 * C2406 + C49240 * C2415 + C5043 * C3388 + C49082 * C3392) *
                C7962 +
            (C5042 * C2398 + C49240 * C2407 + C5043 * C10325 +
             C49082 * C10328) *
                C7969 +
            (C5042 * C2408 + C49240 * C2416 + C5043 * C10329 +
             C49082 * C10331) *
                C49272) *
               C48893) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C48950 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C48967 * C48950 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C48995 * C134) * C114 +
            (C113 * C135 + C48995 * C142) * C48978) *
               C107) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 +
            (C113 * C276 + C48995 * C287) * C1110 +
            (C113 * C286 + C48995 * C294) * C49295 +
            (C113 * C620 + C48995 * C625) * C1111 +
            (C113 * C626 + C48995 * C635) * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C48950 * C110 -
          ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
           (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
           (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
              C48967 * C48950 * C111 +
          (C1153 * C1106 +
           (C1136 + C1135 + C1134 + C1133 + C1150 + C1149) * C1107 +
           (C170 * C1109 + C171 * C49307 + C314 * C1110 + C313 * C49295 +
            (C113 * C624 + C48995 * C633) * C1111 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C48950 * C110 -
          ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
           (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
           (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
              C48967 * C48950 * C111 +
          (C7993 * C49304 +
           (C7988 + C7987 + C7986 + C7985 + C7984 + C7983) * C49291 +
           (C170 * C7967 + C171 * C7961 + C314 * C7968 + C313 * C7962 +
            (C113 * C624 + C48995 * C633) * C7969 +
            (C113 * C634 + C48995 * C639) * C49272) *
               C49259) *
              C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + (C113 * C1805 + C48995 * C1808) * C9185 +
           (C113 * C1809 + C48995 * C1814) * C9179) *
              C48883 * C48967 * C48950 * C110 -
          ((C113 * C1811 + C48995 * C1815) * C9179 +
           (C113 * C1806 + C48995 * C1810) * C9185 + C1346 * C9178 +
           C1347 * C9184 + C1138 * C9177 + C1137 * C9183 + C319 * C9176 +
           C320 * C9182 + C165 * C9175 + C164 * C9181) *
              C48883 * C48967 * C48950 * C111 +
          (C166 * C9181 + C167 * C9175 + C318 * C9182 + C317 * C9176 +
           C1140 * C9183 + C1141 * C9177 + C1345 * C9184 + C1344 * C9178 +
           (C113 * C1807 + C48995 * C1812) * C9185 +
           (C113 * C1813 + C48995 * C1816) * C9179) *
              C48883 * C48967 * C48950 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C268 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C270 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C268 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C270 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C268 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C270 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C268) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            ((C113 * C1505 + C48995 * C1511) * C49272 +
             (C113 * C1499 + C48995 * C1506) * C1111 +
             (C113 * C728 + C48995 * C737) * C49295 +
             (C113 * C722 + C48995 * C727) * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C270 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C270 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           ((C113 * C9372 + C48995 * C9376) * C9179 +
            (C113 * C9370 + C48995 * C9373) * C9185 +
            (C113 * C1973 + C48995 * C1978) * C9178 +
            (C113 * C1969 + C48995 * C1972) * C9184 + C1990 * C9177 +
            C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C270 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C410) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C48967 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C48967 * C49267) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C48995 * C288) * C114 +
             (C113 * C289 + C48995 * C295) * C48978) *
                C107) *
               C48967 * C49267 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C48967 * C550 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            ((C113 * C1307 + C48995 * C1313) * C49272 +
             (C113 * C1301 + C48995 * C1308) * C1111 + C1343 * C49295 +
             C1342 * C1110 + C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C48967 * C49267) *
              C552 +
          (((C1339 + C1338 + C1337 + C1336 + C1351 + C1350) * C1106 +
            (C1331 + C1330 + C1329 + C1328 + C1349 + C1348) * C1107 +
            (C316 * C1109 + C315 * C49307 + C1143 * C1110 + C1142 * C49295 +
             (C113 * C1302 + C48995 * C1309) * C1111 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C48967 * C550 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C48967 * C49267) *
              C552 +
          (((C8151 + C8150 + C8149 + C8148 + C8147 + C8146) * C49304 +
            (C8145 + C8144 + C8143 + C8142 + C8141 + C8140) * C49291 +
            (C316 * C7967 + C315 * C7961 + C1143 * C7968 + C1142 * C7962 +
             (C113 * C1302 + C48995 * C1309) * C7969 +
             (C113 * C1310 + C48995 * C1314) * C49272) *
                C49259) *
               C48967 * C49267 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C48967 * C550 -
           ((C113 * C9270 + C48995 * C9274) * C9179 +
            (C113 * C9268 + C48995 * C9271) * C9185 + C9286 * C9178 +
            C9285 * C9184 + C1822 * C9177 + C1823 * C9183 + C1343 * C9176 +
            C1342 * C9182 + C1341 * C9175 + C1340 * C9181) *
               C48883 * C48967 * C49267) *
              C552 +
          ((C320 * C9181 + C319 * C9175 + C1137 * C9182 + C1138 * C9176 +
            C1347 * C9183 + C1346 * C9177 + C9287 * C9184 + C9288 * C9178 +
            (C113 * C9269 + C48995 * C9272) * C9185 +
            (C113 * C9273 + C48995 * C9275) * C9179) *
               C48883 * C48967 * C49267 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C48967 * C550) *
              C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C48967 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C48995 * C294) * C48978 +
            (C113 * C276 + C48995 * C287) * C114) *
               C103) *
              C48967 * C617 +
          (((C113 * C620 + C48995 * C625) * C114 +
            (C113 * C626 + C48995 * C635) * C48978) *
               C103 +
           ((C113 * C621 + C48995 * C627) * C114 +
            (C113 * C628 + C48995 * C636) * C48978) *
               C104 +
           ((C113 * C622 + C48995 * C629) * C114 +
            (C113 * C630 + C48995 * C637) * C48978) *
               C105 +
           ((C113 * C623 + C48995 * C631) * C114 +
            (C113 * C632 + C48995 * C638) * C48978) *
               C106 +
           ((C113 * C624 + C48995 * C633) * C114 +
            (C113 * C634 + C48995 * C639) * C48978) *
               C107) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C48967 * C616 -
          ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
           (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
           (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
            C1341 * C49307 + C1340 * C1109) *
               C1106) *
              C48967 * C617 +
          ((C1342 * C1109 + C1343 * C49307 + C1823 * C1110 + C1822 * C49295 +
            (C113 * C1805 + C48995 * C1808) * C1111 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C1106 +
           (C1137 * C1109 + C1138 * C49307 + C1347 * C1110 + C1346 * C49295 +
            (C113 * C1806 + C48995 * C1810) * C1111 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C1107 +
           (C1140 * C1109 + C1141 * C49307 + C1345 * C1110 + C1344 * C49295 +
            (C113 * C1807 + C48995 * C1812) * C1111 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C48967 * C616 -
          ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
           (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
           (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
            C1341 * C7961 + C1340 * C7967) *
               C49304) *
              C48967 * C617 +
          ((C1342 * C7967 + C1343 * C7961 + C1823 * C7968 + C1822 * C7962 +
            (C113 * C1805 + C48995 * C1808) * C7969 +
            (C113 * C1809 + C48995 * C1814) * C49272) *
               C49304 +
           (C1137 * C7967 + C1138 * C7961 + C1347 * C7968 + C1346 * C7962 +
            (C113 * C1806 + C48995 * C1810) * C7969 +
            (C113 * C1811 + C48995 * C1815) * C49272) *
               C49291 +
           (C1140 * C7967 + C1141 * C7961 + C1345 * C7968 + C1344 * C7962 +
            (C113 * C1807 + C48995 * C1812) * C7969 +
            (C113 * C1813 + C48995 * C1816) * C49272) *
               C49259) *
              C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C48967 * C616 -
          (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
           C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
           C1341 * C9175 + C1340 * C9181) *
              C48883 * C48967 * C617 +
          (C1342 * C9181 + C1343 * C9175 + C1823 * C9182 + C1822 * C9176 +
           C9285 * C9183 + C9286 * C9177 + C9532 * C9184 + C9531 * C9178 +
           (C113 * C9522 + C48995 * C9523) * C9185 +
           (C113 * C9524 + C48995 * C9525) * C9179) *
              C48883 * C48967 * C618) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C550 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C410 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C550 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C410 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C550 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C410 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C550 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C410) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C48950 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C48995 * C428) * C114 +
             (C113 * C429 + C48995 * C435) * C48978) *
                C107) *
               C49269 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C48950 * C552 +
          (((C1533 + C1532 + C1549 + C1548 + C1547 + C1546) * C1106 +
            (C1523 + C1522 + C1545 + C1544 + C1543 + C1542) * C1107 +
            (C456 * C1109 + C455 * C49307 +
             (C113 * C725 + C48995 * C733) * C1110 +
             (C113 * C734 + C48995 * C740) * C49295 +
             (C113 * C1500 + C48995 * C1507) * C1111 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C1149 + C1150 + C1133 + C1134 + C1135 + C1136) * C49259 +
            (C1148 + C1147 + C1124 + C1123 + C1122 + C1121) * C1107 +
            (C1145 + C1144 + C1116 + C1115 + C1114 + C1113) * C1106) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C48950 * C552 +
          (((C8309 + C8308 + C8307 + C8306 + C8305 + C8304) * C49304 +
            (C8303 + C8302 + C8301 + C8300 + C8299 + C8298) * C49291 +
            (C456 * C7967 + C455 * C7961 + C4224 * C7968 + C4223 * C7962 +
             (C113 * C1500 + C48995 * C1507) * C7969 +
             (C113 * C1508 + C48995 * C1512) * C49272) *
                C49259) *
               C49269 -
           ((C7983 + C7984 + C7985 + C7986 + C7987 + C7988) * C49259 +
            (C7982 + C7981 + C7980 + C7979 + C7978 + C7977) * C49291 +
            (C7976 + C7975 + C7974 + C7973 + C7972 + C7971) * C49304) *
               C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C48950 * C552 +
          ((C460 * C9181 + C459 * C9175 + C1541 * C9182 + C1540 * C9176 +
            C1539 * C9183 + C1538 * C9177 +
            (C113 * C1970 + C48995 * C1974) * C9184 +
            (C113 * C1975 + C48995 * C1979) * C9178 +
            (C113 * C9371 + C48995 * C9374) * C9185 +
            (C113 * C9375 + C48995 * C9377) * C9179) *
               C48883 * C49269 -
           (C9288 * C9179 + C9287 * C9185 + C1346 * C9178 + C1347 * C9184 +
            C1138 * C9177 + C1137 * C9183 + C319 * C9176 + C320 * C9182 +
            C165 * C9175 + C164 * C9181) *
               C48883 * C824) *
              C48950 * C49265)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C114 +
             (C113 * C123 + C48995 * C136) * C48978) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C48995 * C434) * C48978 +
             (C113 * C416 + C48995 * C427) * C114) *
                C103) *
               C49269) *
              C268 +
          ((((C113 * C722 + C48995 * C727) * C114 +
             (C113 * C728 + C48995 * C737) * C48978) *
                C103 +
            ((C113 * C723 + C48995 * C729) * C114 +
             (C113 * C730 + C48995 * C738) * C48978) *
                C104 +
            ((C113 * C724 + C48995 * C731) * C114 +
             (C113 * C732 + C48995 * C739) * C48978) *
                C105 +
            ((C113 * C725 + C48995 * C733) * C114 +
             (C113 * C734 + C48995 * C740) * C48978) *
                C106 +
            ((C113 * C726 + C48995 * C735) * C114 +
             (C113 * C736 + C48995 * C741) * C48978) *
                C107) *
               C49269 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C48995 * C294) * C48978 +
             (C113 * C276 + C48995 * C287) * C114) *
                C103) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C1109 +
             (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
             C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
                C1106 +
            (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
            C1153 * C49259) *
               C824 -
           ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
            (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
            (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
             (C113 * C426 + C48995 * C434) * C49307 +
             (C113 * C416 + C48995 * C427) * C1109) *
                C1106) *
               C49269) *
              C268 +
          (((C1993 * C1109 + C1992 * C49307 + C1991 * C1110 + C1990 * C49295 +
             (C113 * C1969 + C48995 * C1972) * C1111 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C1106 +
            (C1541 * C1109 + C1540 * C49307 + C1539 * C1110 + C1538 * C49295 +
             (C113 * C1970 + C48995 * C1974) * C1111 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C1107 +
            (C1537 * C1109 + C1536 * C49307 + C1535 * C1110 + C1534 * C49295 +
             (C113 * C1971 + C48995 * C1976) * C1111 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C1348 + C1349 + C1328 + C1329 + C1330 + C1331) * C49259 +
            (C1350 + C1351 + C1336 + C1337 + C1338 + C1339) * C1107 +
            (C1822 * C49272 + C1823 * C1111 + C1343 * C49295 + C1342 * C1110 +
             C1341 * C49307 + C1340 * C1109) *
                C1106) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48995 * C122) * C7967 +
             (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
             C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
                C49304 +
            (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
            C7993 * C49259) *
               C824 -
           ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
            (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
            (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
             (C113 * C426 + C48995 * C434) * C7961 +
             (C113 * C416 + C48995 * C427) * C7967) *
                C49304) *
               C49269) *
              C268 +
          (((C1993 * C7967 + C1992 * C7961 + C1991 * C7968 + C1990 * C7962 +
             (C113 * C1969 + C48995 * C1972) * C7969 +
             (C113 * C1973 + C48995 * C1978) * C49272) *
                C49304 +
            (C1541 * C7967 + C1540 * C7961 + C1539 * C7968 + C1538 * C7962 +
             (C113 * C1970 + C48995 * C1974) * C7969 +
             (C113 * C1975 + C48995 * C1979) * C49272) *
                C49291 +
            (C1537 * C7967 + C1536 * C7961 + C1535 * C7968 + C1534 * C7962 +
             (C113 * C1971 + C48995 * C1976) * C7969 +
             (C113 * C1977 + C48995 * C1980) * C49272) *
                C49259) *
               C49269 -
           ((C8140 + C8141 + C8142 + C8143 + C8144 + C8145) * C49259 +
            (C8146 + C8147 + C8148 + C8149 + C8150 + C8151) * C49291 +
            (C1822 * C49272 + C1823 * C7969 + C1343 * C7962 + C1342 * C7968 +
             C1341 * C7961 + C1340 * C7967) *
                C49304) *
               C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C9181 +
            (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
            C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
            C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
               C48883 * C824 -
           (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
            C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
            (C113 * C426 + C48995 * C434) * C9175 +
            (C113 * C416 + C48995 * C427) * C9181) *
               C48883 * C49269) *
              C268 +
          ((C1993 * C9181 + C1992 * C9175 + C1991 * C9182 + C1990 * C9176 +
            C9630 * C9183 + C9629 * C9177 + C9628 * C9184 + C9627 * C9178 +
            (C113 * C9614 + C48995 * C9615) * C9185 +
            (C113 * C9616 + C48995 * C9617) * C9179) *
               C48883 * C49269 -
           (C9531 * C9179 + C9532 * C9185 + C9286 * C9178 + C9285 * C9184 +
            C1822 * C9177 + C1823 * C9183 + C1343 * C9176 + C1342 * C9182 +
            C1341 * C9175 + C1340 * C9181) *
               C48883 * C824) *
              C49267) *
         C48916) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C114 +
            (C113 * C123 + C48995 * C136) * C48978) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C48995 * C434) * C48978 +
            (C113 * C416 + C48995 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C114 +
            (C113 * C979 + C48995 * C988) * C48978) *
               C103 +
           ((C113 * C974 + C48995 * C980) * C114 +
            (C113 * C981 + C48995 * C989) * C48978) *
               C104 +
           ((C113 * C975 + C48995 * C982) * C114 +
            (C113 * C983 + C48995 * C990) * C48978) *
               C105 +
           ((C113 * C976 + C48995 * C984) * C114 +
            (C113 * C985 + C48995 * C991) * C48978) *
               C106 +
           ((C113 * C977 + C48995 * C986) * C114 +
            (C113 * C987 + C48995 * C992) * C48978) *
               C107) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C1109 +
            (C113 * C123 + C48995 * C136) * C49307 + C1340 * C1110 +
            C1341 * C49295 + C1342 * C1111 + C1343 * C49272) *
               C1106 +
           (C1113 + C1114 + C1115 + C1116 + C1144 + C1145) * C1107 +
           C1153 * C49259) *
              C970 -
          ((C1542 + C1543 + C1544 + C1545 + C1522 + C1523) * C49259 +
           (C1546 + C1547 + C1548 + C1549 + C1532 + C1533) * C1107 +
           (C1990 * C49272 + C1991 * C1111 + C1992 * C49295 + C1993 * C1110 +
            (C113 * C426 + C48995 * C434) * C49307 +
            (C113 * C416 + C48995 * C427) * C1109) *
               C1106) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C1109 +
            (C113 * C979 + C48995 * C988) * C49307 +
            (C113 * C2395 + C48995 * C2401) * C1110 +
            (C113 * C2402 + C48995 * C2413) * C49295 +
            (C113 * C2396 + C48995 * C2403) * C1111 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C1106 +
           ((C113 * C974 + C48995 * C980) * C1109 +
            (C113 * C981 + C48995 * C989) * C49307 +
            (C113 * C2397 + C48995 * C2405) * C1110 +
            (C113 * C2406 + C48995 * C2415) * C49295 +
            (C113 * C2398 + C48995 * C2407) * C1111 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C1107 +
           ((C113 * C975 + C48995 * C982) * C1109 +
            (C113 * C983 + C48995 * C990) * C49307 +
            (C113 * C2399 + C48995 * C2409) * C1110 +
            (C113 * C2410 + C48995 * C2417) * C49295 +
            (C113 * C2400 + C48995 * C2411) * C1111 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48995 * C122) * C7967 +
            (C113 * C123 + C48995 * C136) * C7961 + C1340 * C7968 +
            C1341 * C7962 + C1342 * C7969 + C1343 * C49272) *
               C49304 +
           (C7971 + C7972 + C7973 + C7974 + C7975 + C7976) * C49291 +
           C7993 * C49259) *
              C970 -
          ((C8298 + C8299 + C8300 + C8301 + C8302 + C8303) * C49259 +
           (C8304 + C8305 + C8306 + C8307 + C8308 + C8309) * C49291 +
           (C1990 * C49272 + C1991 * C7969 + C1992 * C7962 + C1993 * C7968 +
            (C113 * C426 + C48995 * C434) * C7961 +
            (C113 * C416 + C48995 * C427) * C7967) *
               C49304) *
              C971 +
          (((C113 * C973 + C48995 * C978) * C7967 +
            (C113 * C979 + C48995 * C988) * C7961 +
            (C113 * C2395 + C48995 * C2401) * C7968 +
            (C113 * C2402 + C48995 * C2413) * C7962 +
            (C113 * C2396 + C48995 * C2403) * C7969 +
            (C113 * C2404 + C48995 * C2414) * C49272) *
               C49304 +
           ((C113 * C974 + C48995 * C980) * C7967 +
            (C113 * C981 + C48995 * C989) * C7961 +
            (C113 * C2397 + C48995 * C2405) * C7968 +
            (C113 * C2406 + C48995 * C2415) * C7962 +
            (C113 * C2398 + C48995 * C2407) * C7969 +
            (C113 * C2408 + C48995 * C2416) * C49272) *
               C49291 +
           ((C113 * C975 + C48995 * C982) * C7967 +
            (C113 * C983 + C48995 * C990) * C7961 +
            (C113 * C2399 + C48995 * C2409) * C7968 +
            (C113 * C2410 + C48995 * C2417) * C7962 +
            (C113 * C2400 + C48995 * C2411) * C7969 +
            (C113 * C2412 + C48995 * C2418) * C49272) *
               C49259) *
              C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48995 * C122) * C9181 +
           (C113 * C123 + C48995 * C136) * C9175 + C1340 * C9182 +
           C1341 * C9176 + C1342 * C9183 + C1343 * C9177 + C1823 * C9184 +
           C1822 * C9178 + C9285 * C9185 + C9286 * C9179) *
              C48883 * C970 -
          (C9627 * C9179 + C9628 * C9185 + C9629 * C9178 + C9630 * C9184 +
           C1990 * C9177 + C1991 * C9183 + C1992 * C9176 + C1993 * C9182 +
           (C113 * C426 + C48995 * C434) * C9175 +
           (C113 * C416 + C48995 * C427) * C9181) *
              C48883 * C971 +
          ((C113 * C973 + C48995 * C978) * C9181 +
           (C113 * C979 + C48995 * C988) * C9175 +
           (C113 * C2395 + C48995 * C2401) * C9182 +
           (C113 * C2402 + C48995 * C2413) * C9176 +
           (C113 * C2396 + C48995 * C2403) * C9183 +
           (C113 * C2404 + C48995 * C2414) * C9177 +
           (C113 * C9856 + C48995 * C9858) * C9184 +
           (C113 * C9859 + C48995 * C9862) * C9178 +
           (C113 * C9857 + C48995 * C9860) * C9185 +
           (C113 * C9861 + C48995 * C9863) * C9179) *
              C48883 * C972) *
         C48950 * C48916) /
            (p * q * std::sqrt(p + q));
}
