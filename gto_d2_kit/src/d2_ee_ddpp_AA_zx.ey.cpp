/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47866 = 0 * ae;
    const double C47865 = ae * be;
    const double C47864 = 0 * be;
    const double C47863 = 0 * be;
    const double C47862 = ae + be;
    const double C47861 = 0 * be;
    const double C47860 = xA - xB;
    const double C47921 = 0 * be;
    const double C47948 = 0 * be;
    const double C47947 = zA - zB;
    const double C48003 = 0 * ae;
    const double C47998 = 0 * be;
    const double C47997 = 0 * be;
    const double C48048 = 0 * be;
    const double C48108 = xP - xQ;
    const double C48107 = zP - zQ;
    const double C48106 = p + q;
    const double C48105 = p * q;
    const double C48115 = std::pow(ae, 2);
    const double C48113 = bs[3];
    const double C48123 = bs[4];
    const double C48132 = bs[5];
    const double C48146 = bs[6];
    const double C48168 = bs[7];
    const double C48238 = yP - yQ;
    const double C48483 = bs[2];
    const double C119 = bs[0];
    const double C48922 = ce + de;
    const double C48921 = ce * de;
    const double C48920 = xC - xD;
    const double C48935 = yC - yD;
    const double C48944 = zC - zD;
    const double C48991 = yA - yB;
    const double C47873 = C47866 / C47862;
    const double C47870 = C47864 / C47862;
    const double C47868 = 2 * C47862;
    const double C47867 = std::pow(C47862, 2);
    const double C47872 = C47865 * C47860;
    const double C47871 = C47860 * C47864;
    const double C47869 = C47860 * C47863;
    const double C48886 = C47860 * be;
    const double C48885 = C47860 * ae;
    const double C48884 = std::pow(C47860, 2);
    const double C47922 = C47921 / C47862;
    const double C47999 = C47948 / C47862;
    const double C47949 = C47865 * C47947;
    const double C48000 = C47947 * C47948;
    const double C49003 = std::pow(C47947, 2);
    const double C49086 = C47947 * be;
    const double C49084 = C47947 * ae;
    const double C48010 = C48003 / C47862;
    const double C48005 = C47947 * C47998;
    const double C48049 = C48048 / C47862;
    const double C48133 = std::pow(C48108, 2);
    const double C48197 = C48108 * ae;
    const double C48116 = C48107 * ae;
    const double C48114 = C48107 * C48108;
    const double C48331 = std::pow(C48107, 2);
    const double C48109 = 2 * C48105;
    const double C48287 = std::pow(C48238, 2);
    const double C48932 = 2 * C48922;
    const double C49241 = std::pow(C48922, 2);
    const double C48923 = std::pow(C48920, 2);
    const double C49240 = C48920 * de;
    const double C49239 = C48920 * ce;
    const double C48957 = std::pow(C48935, 2);
    const double C49245 = C48935 * de;
    const double C49243 = C48935 * ce;
    const double C48974 = std::pow(C48944, 2);
    const double C49246 = C48944 * de;
    const double C49244 = C48944 * ce;
    const double C48992 = std::pow(C48991, 2);
    const double C49046 = C48991 * be;
    const double C49044 = C48991 * ae;
    const double C48898 = std::pow(C47868, -1);
    const double C49234 = std::pow(C47868, -2);
    const double C47874 = 2 * C47867;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C47867;
    const double C49238 = C47867 * C47868;
    const double C49237 = 4 * C47867;
    const double C47876 = C47871 / C47862;
    const double C47875 = C47869 / C47862;
    const double C49227 = std::pow(C48885, 2);
    const double C48887 = C48884 * C47865;
    const double C48008 = C48000 / C47862;
    const double C49004 = C49003 * C47865;
    const double C49249 = std::pow(C49084, 2);
    const double C48011 = C48005 / C47862;
    const double C48200 = C48132 * C48197;
    const double C48209 = C48123 * C48197;
    const double C48216 = C48146 * C48197;
    const double C48244 = C48113 * C48197;
    const double C48264 = C48168 * C48197;
    const double C48119 = C48113 * C48116;
    const double C48125 = C48123 * C48116;
    const double C48135 = C48132 * C48116;
    const double C48150 = C48146 * C48116;
    const double C48174 = C48168 * C48116;
    const double C48118 = C48114 * C48115;
    const double C48110 = C48109 / C48106;
    const double C126 = (-(bs[1] * C48197 * C48109) / C48106) / C47862;
    const double C131 = (-(bs[1] * C48116 * C48109) / C48106) / C47862;
    const double C120 = -(C48108 * bs[1] * C48109) / C48106;
    const double C237 = -(C48238 * bs[1] * C48109) / C48106;
    const double C345 = -(C48107 * bs[1] * C48109) / C48106;
    const double C49242 = std::pow(C48932, -1);
    const double C49276 = 2 * C49241;
    const double C48924 = C48923 * C48921;
    const double C48958 = C48957 * C48921;
    const double C48975 = C48974 * C48921;
    const double C48993 = C48992 * C47865;
    const double C49247 = std::pow(C49044, 2);
    const double C47883 = C47864 / C47874;
    const double C47880 = C47863 / C47874;
    const double C47879 = C47861 / C47874;
    const double C48002 = C47948 / C47874;
    const double C48007 = C47998 / C47874;
    const double C48006 = C47997 / C47874;
    const double C49274 = 4 * C49238;
    const double C49273 = C47862 * C49237;
    const double C47881 = 0 - C47876;
    const double C47878 = 0 - C47875;
    const double C48888 = C48887 / C47862;
    const double C48012 = 0 - C48008;
    const double C49005 = C49004 / C47862;
    const double C48015 = 0 - C48011;
    const double C48124 = C48123 * C48118;
    const double C48134 = C48132 * C48118;
    const double C48148 = C48146 * C48118;
    const double C48172 = C48168 * C48118;
    const double C48112 = -C48110;
    const double C48122 = std::pow(C48110, 4);
    const double C48145 = std::pow(C48110, 6);
    const double C141 = (ae * std::pow(C48110, 2) * bs[2] * C48107 * ae +
                         C48108 * std::pow(-C48110, 3) * bs[3] * C48107 *
                             C48108 * std::pow(ae, 2)) /
                        C47867;
    const double C48482 = std::pow(C48110, 2);
    const double C127 =
        (C48108 * std::pow(C48110, 2) * bs[2] * C48197) / C47862 -
        (ae * bs[1] * C48109) / (C48106 * C47862);
    const double C48925 = C48924 / C48922;
    const double C48959 = C48958 / C48922;
    const double C48976 = C48975 / C48922;
    const double C48994 = C48993 / C47862;
    const double C47886 = C47881 * ae;
    const double C47885 = C47878 * ae;
    const double C48889 = -C48888;
    const double C48016 = C48012 * ae;
    const double C49006 = -C49005;
    const double C48019 = C48015 * ae;
    const double C48117 = std::pow(C48112, 3);
    const double C48131 = std::pow(C48112, 5);
    const double C48167 = std::pow(C48112, 7);
    const double C48127 = C48122 * C48125;
    const double C48126 = C48122 * C48124;
    const double C48198 = C48123 * C48122;
    const double C48211 = C48122 * C48209;
    const double C48153 = C48145 * C48150;
    const double C48152 = C48145 * C48148;
    const double C48219 = C48146 * C48145;
    const double C48220 = C48145 * C48216;
    const double C48484 = C48483 * C48482;
    const double C132 = (C48108 * C48482 * C48483 * C48116) / C47862;
    const double C243 = (C48238 * C48482 * C48483 * C48116) / C47862;
    const double C248 = (C48238 * C48482 * C48483 * C48197) / C47862;
    const double C351 = (C48107 * C48482 * C48483 * C48116) / C47862 -
                        (ae * bs[1] * C48109) / (C48106 * C47862);
    const double C356 = (C48107 * C48482 * C48483 * C48197) / C47862;
    const double C48926 = -C48925;
    const double C48960 = -C48959;
    const double C48977 = -C48976;
    const double C48995 = -C48994;
    const double C47890 = C47886 / C47862;
    const double C47889 = C47885 / C47862;
    const double C48890 = std::exp(C48889);
    const double C48020 = C48016 / C47862;
    const double C49007 = std::exp(C49006);
    const double C48023 = C48019 / C47862;
    const double C48120 = C48117 * C48119;
    const double C48210 = C48113 * C48117;
    const double C48245 = C48117 * C48244;
    const double C255 = ((yP - yQ) * C48117 * C48113 * C48118) / C47867;
    const double C363 = (ae * std::pow(C48110, 2) * bs[2] * C48197 +
                         C48107 * C48117 * C48113 * C48118) /
                        C47867;
    const double C48137 = C48131 * C48135;
    const double C48136 = C48131 * C48134;
    const double C48199 = C48132 * C48131;
    const double C48204 = C48131 * C48200;
    const double C48177 = C48167 * C48174;
    const double C48176 = C48167 * C48172;
    const double C48269 = C48167 * C48264;
    const double C48130 = ae * C48127;
    const double C48129 = C48108 * C48127;
    const double C48623 = C48238 * C48127;
    const double C48635 = C48107 * C48127;
    const double C532 =
        (C48117 * C48113 * C48118 + C48126 * std::pow(yP - yQ, 2)) / C47867;
    const double C634 =
        (ae * C48238 * C48117 * C48113 * C48197 + C48107 * C48238 * C48126) /
        C47867;
    const double C48202 = C48108 * C48198;
    const double C48201 = C48198 * ae;
    const double C48488 = C48198 * C48133;
    const double C48600 = C48198 * C48287;
    const double C48624 = C48238 * C48198;
    const double C48637 = C48198 * C48331;
    const double C48733 = C48107 * C48198;
    const double C48247 = C48108 * C48211;
    const double C48298 = C48238 * C48211;
    const double C48329 = ae * C48211;
    const double C48328 = C48107 * C48211;
    const double C48155 = C48153 * C48133;
    const double C48166 = ae * C48153;
    const double C48165 = C48108 * C48153;
    const double C48667 = C48153 * C48287;
    const double C48761 = C48238 * C48153;
    const double C48779 = C48107 * C48153;
    const double C48154 = C48108 * C48152;
    const double C48350 = C48152 * C48287;
    const double C48358 = C48238 * C48152;
    const double C48416 = C48107 * C48152;
    const double C48222 = C48219 * C48133;
    const double C48266 = C48108 * C48219;
    const double C48265 = C48219 * ae;
    const double C48685 = C48219 * C48287;
    const double C48764 = C48238 * C48219;
    const double C48782 = C48219 * C48331;
    const double C48224 = C48108 * C48220;
    const double C48365 = C48220 * C48287;
    const double C48373 = C48238 * C48220;
    const double C48417 = C48220 * C48331;
    const double C48461 = ae * C48220;
    const double C48460 = C48107 * C48220;
    const double C121 = C48484 * C48133 - (bs[1] * C48109) / C48106;
    const double C236 = C48238 * C48108 * C48484;
    const double C344 = C48107 * C48108 * C48484;
    const double C517 = C48484 * C48287 - (bs[1] * C48109) / C48106;
    const double C619 = C48107 * C48238 * C48484;
    const double C870 = C48484 * C48331 - (bs[1] * C48109) / C48106;
    const double C48927 = std::exp(C48926);
    const double C48961 = std::exp(C48960);
    const double C48978 = std::exp(C48977);
    const double C48996 = std::exp(C48995);
    const double C47894 = C47890 - C47880;
    const double C47893 = C47889 - C47879;
    const double C9153 = C48890 * C248;
    const double C10292 = C48890 * C356;
    const double C47877 = C47872 * C48890;
    const double C48892 = C48890 * C48885;
    const double C48891 = C48890 / C47868;
    const double C48900 = C48898 * C48890;
    const double C49230 = C48890 * C48886;
    const double C49271 = C49234 * C48890;
    const double C49265 = C48890 * C49227;
    const double C48024 = C48020 - C48007;
    const double C47950 = C47949 * C49007;
    const double C118 = -(2 * C47865 * (zA - zB) * C49007) / C47862;
    const double C49085 = C49007 / C47868;
    const double C49087 = C49007 * C49084;
    const double C49094 = C48898 * C49007;
    const double C49259 = C49007 * C49086;
    const double C49287 = C49234 * C49007;
    const double C49285 = C49007 * C49249;
    const double C48027 = C48023 - C48006;
    const double C142 = (C48117 * C48113 * C48118 + ae * C48108 * C48120 +
                         C48108 * (ae * C48120 + C48108 * std::pow(C48110, 4) *
                                                     bs[4] * C48118)) /
                        C47867;
    const double C143 =
        (2 * (ae * C48120 + C48108 * C48126) +
         ae * (C48120 + C48127 * std::pow(C48108, 2)) +
         C48108 * (C48126 + ae * C48108 * C48127 +
                   C48108 * (ae * C48127 +
                             C48108 * std::pow(C48112, 5) * bs[5] * C48118))) /
        C47867;
    const double C254 = ((yP - yQ) * (ae * C48120 + C48108 * C48126)) / C47867;
    const double C362 = (ae * (C48108 * C48117 * C48113 * C48197 +
                               bs[2] * std::pow(C48110, 2) * ae) +
                         C48107 * (ae * C48120 + C48108 * C48126)) /
                        C47867;
    const double C133 = (C48482 * C48483 * C48116 + C48120 * C48133) / C47862;
    const double C134 =
        (2 * C48108 * C48120 + C48108 * (C48120 + C48127 * C48133)) / C47862;
    const double C241 = (C48238 * (C48120 + C48127 * C48133)) / C47862;
    const double C242 = (C48238 * C48108 * C48120) / C47862;
    const double C350 =
        (C48107 * C48108 * C48120 + C48108 * C48484 * ae) / C47862;
    const double C527 = (C48482 * C48483 * C48116 + C48120 * C48287) / C47862;
    const double C629 =
        (C48107 * C48238 * C48120 + C48238 * C48484 * ae) / C47862;
    const double C880 =
        (C48482 * C48483 * C48116 + C48107 * (C48107 * C48120 + C48484 * ae) +
         C48107 * C48484 * ae) /
        C47862;
    const double C1161 =
        (2 * C48238 * C48120 + C48238 * (C48120 + C48127 * C48287)) / C47862;
    const double C48248 = C48210 * ae;
    const double C48487 = C48108 * C48210;
    const double C48591 = C48238 * C48210;
    const double C48636 = C48107 * C48210;
    const double C349 = (C48107 * (C48120 + C48127 * C48133) +
                         (C48484 + C48210 * C48133) * ae) /
                        C47862;
    const double C1395 = (C48107 * (C48120 + C48127 * C48287) +
                          (C48484 + C48210 * C48287) * ae) /
                         C47862;
    const double C122 =
        2 * C48108 * C48484 + C48108 * (C48484 + C48210 * C48133);
    const double C235 = C48238 * (C48484 + C48210 * C48133);
    const double C343 = C48107 * (C48484 + C48210 * C48133);
    const double C1157 =
        2 * C48238 * C48484 + C48238 * (C48484 + C48210 * C48287);
    const double C1391 = C48107 * (C48484 + C48210 * C48287);
    const double C2732 =
        2 * C48107 * C48484 + C48107 * (C48484 + C48210 * C48331);
    const double C885 = (C48117 * C48113 * C48118 + ae * C48107 * C48245 +
                         C48107 * (ae * C48245 + C48107 * C48126)) /
                        C47867;
    const double C128 =
        (C48482 * C48483 * C48197 + C48108 * (C48108 * C48245 + C48484 * ae) +
         C48108 * C48484 * ae) /
        C47862;
    const double C247 = (C48238 * (C48108 * C48245 + C48484 * ae)) / C47862;
    const double C355 = (C48107 * (C48108 * C48245 + C48484 * ae)) / C47862;
    const double C522 = (C48482 * C48483 * C48197 + C48245 * C48287) / C47862;
    const double C624 = (C48107 * C48238 * C48245) / C47862;
    const double C875 = (C48482 * C48483 * C48197 + C48245 * C48331) / C47862;
    const double C1164 =
        (2 * C48238 * C48245 + C48238 * (C48245 + C48211 * C48287)) / C47862;
    const double C1398 = (C48107 * (C48245 + C48211 * C48287)) / C47862;
    const double C2739 =
        (2 * C48107 * C48245 + C48107 * (C48245 + C48211 * C48331)) / C47862;
    const double C9155 = C48890 * C255;
    const double C10294 = C48890 * C363;
    const double C48139 = C48137 * C48133;
    const double C48144 = ae * C48137;
    const double C48143 = C48108 * C48137;
    const double C48653 = C48137 * C48287;
    const double C48666 = C48238 * C48137;
    const double C48732 = C48107 * C48137;
    const double C1667 =
        (3 * (C48120 + C48127 * C48287) +
         C48238 * (2 * C48238 * C48127 + C48238 * (C48127 + C48137 * C48287))) /
        C47862;
    const double C1850 =
        (C48107 * (2 * C48238 * C48127 + C48238 * (C48127 + C48137 * C48287)) +
         (2 * C48238 * C48210 + C48238 * (C48210 + C48198 * C48287)) * ae) /
        C47862;
    const double C48138 = C48108 * C48136;
    const double C48319 = C48238 * C48136;
    const double C48330 = C48107 * C48136;
    const double C1169 = (2 * C48238 * C48126 +
                          C48238 * (C48126 + C48136 * std::pow(C48238, 2))) /
                         C47867;
    const double C1403 = (ae * (C48245 + C48211 * C48287) +
                          C48107 * (C48126 + C48136 * C48287)) /
                         C47867;
    const double C1670 =
        (3 * (C48126 + C48136 * C48287) +
         C48238 * (2 * C48238 * C48136 + C48238 * (C48136 + C48152 * C48287))) /
        C47867;
    const double C2744 = (2 * (ae * C48245 + C48107 * C48126) +
                          ae * (C48245 + C48211 * std::pow(C48107, 2)) +
                          C48107 * (C48126 + ae * C48107 * C48211 +
                                    C48107 * (ae * C48211 + C48107 * C48136))) /
                         C47867;
    const double C48203 = C48199 * C48133;
    const double C48218 = C48108 * C48199;
    const double C48217 = C48199 * ae;
    const double C48674 = C48199 * C48287;
    const double C48684 = C48238 * C48199;
    const double C48734 = C48199 * C48331;
    const double C48780 = C48107 * C48199;
    const double C48206 = C48108 * C48204;
    const double C48304 = C48204 * C48287;
    const double C48320 = C48238 * C48204;
    const double C48333 = C48204 * C48331;
    const double C48415 = ae * C48204;
    const double C48414 = C48107 * C48204;
    const double C1853 =
        (ae * (2 * C48238 * C48211 + C48238 * (C48211 + C48204 * C48287)) +
         C48107 * (2 * C48238 * C48136 + C48238 * (C48136 + C48152 * C48287))) /
        C47867;
    const double C48179 = C48177 * C48133;
    const double C48178 = C48108 * C48176;
    const double C48359 = C48176 * C48287;
    const double C48444 = C48238 * C48176;
    const double C48462 = C48107 * C48176;
    const double C48271 = C48108 * C48269;
    const double C48374 = C48269 * C48287;
    const double C48445 = C48238 * C48269;
    const double C48464 = C48269 * C48331;
    const double C528 = (C48108 * C48120 + C48129 * C48287) / C47862;
    const double C9159 = C48890 * C532;
    const double C9564 = C48890 * C634;
    const double C48252 = C48202 * ae;
    const double C48497 = 2 * C48202;
    const double C48593 = C48238 * C48202;
    const double C48642 = C48107 * C48202;
    const double C48489 = C48210 + C48488;
    const double C48601 = C48210 + C48600;
    const double C48678 = 2 * C48624;
    const double C48709 = C48107 * C48624;
    const double C48708 = C48624 * ae;
    const double C48639 = C48210 + C48637;
    const double C48738 = 2 * C48733;
    const double C48736 = C48733 * ae;
    const double C2312 = (C48238 * C48126 + ae * C48107 * C48298 +
                          C48107 * (ae * C48298 + C48107 * C48238 * C48136)) /
                         C47867;
    const double C2300 = (C48238 * C48245 + C48298 * C48331) / C47862;
    const double C48157 = C48137 + C48155;
    const double C48173 = 2 * C48165;
    const double C48171 = ae * C48165;
    const double C48658 = C48165 * C48287;
    const double C48723 = C48238 * C48165;
    const double C48747 = C48107 * C48165;
    const double C48669 = C48137 + C48667;
    const double C48765 = C48107 * C48761;
    const double C48351 = C48136 + C48350;
    const double C48360 = 2 * C48358;
    const double C48393 = C48107 * C48358;
    const double C48225 = C48199 + C48222;
    const double C48270 = C48266 * ae;
    const double C48695 = C48266 * C48287;
    const double C48726 = C48238 * C48266;
    const double C48749 = C48266 * C48331;
    const double C48687 = C48199 + C48685;
    const double C48767 = C48764 * C48331;
    const double C48786 = C48199 + C48782;
    const double C48366 = C48204 + C48365;
    const double C48375 = 2 * C48373;
    const double C48394 = C48373 * C48331;
    const double C48443 = ae * C48373;
    const double C48442 = C48107 * C48373;
    const double C48421 = C48204 + C48417;
    const double C48468 = 2 * C48460;
    const double C48466 = ae * C48460;
    const double C49277 = C49242 * C48927;
    const double C49275 = C48927 * C49239;
    const double C231 = -(C48927 * C49240) / C48922;
    const double C49279 = C49242 * C48961;
    const double C49278 = C48961 * C49243;
    const double C447 = -(C48961 * C49245) / C48922;
    const double C49281 = C49242 * C48978;
    const double C49280 = C48978 * C49244;
    const double C721 = -(C48978 * C49246) / C48922;
    const double C49045 = C48996 / C47868;
    const double C49047 = C48996 * C49044;
    const double C49054 = C48898 * C48996;
    const double C49253 = C48996 * C49046;
    const double C49284 = C49234 * C48996;
    const double C49282 = C48996 * C49247;
    const double C47899 = C47894 / C47868;
    const double C47898 = C47860 * C47894;
    const double C47897 = C47893 + C47870;
    const double C47884 = C47877 / C47867;
    const double C47882 = 2 * C47877;
    const double C48893 = C48892 * C48886;
    const double C48899 = C48892 / C47874;
    const double C49231 = C48898 * C48892;
    const double C49229 = C48892 / C47862;
    const double C1000 = (C48890 * std::pow(C48886, 2)) / C47867 + C48891;
    const double C48901 = C48900 * C48886;
    const double C49235 = C48885 * C48900;
    const double C49233 = 2 * C48900;
    const double C49288 = C48900 / C49237;
    const double C105 = C48900 / C49274;
    const double C26643 = C48900 / C47868;
    const double C49267 = C49230 / C47862;
    const double C1001 = (-2 * C48898 * C49230) / C47862;
    const double C49301 = C49265 / C47867;
    const double C48029 = C48024 / C47868;
    const double C48028 = C47947 * C48024;
    const double C47982 = 2 * C47950;
    const double C48004 = C47950 / C47867;
    const double C2433 =
        ((0 * ae) / C47862 - C47950 / C47867) / C47868 + (0 * ae) / C47862;
    const double C4966 =
        ((C49007 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
        C47948 / C47874;
    const double C4967 = (0 * ae) / C47862 - C47950 / C47867;
    const double C15326 = (C49007 * std::pow(C49086, 2)) / C47867 + C49085;
    const double C49088 = C49087 * C49086;
    const double C49093 = C49087 / C47874;
    const double C49252 = C49087 / C47862;
    const double C49250 = C48898 * C49087;
    const double C2432 =
        (((C49007 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
         C47948 / C47874) /
            C47868 +
        ((C47947 * ((0 * ae) / C47862 - C47950 / C47867) + C49094) * ae) /
            C47862;
    const double C49095 = C49094 * C49086;
    const double C49263 = C49084 * C49094;
    const double C49262 = 2 * C49094;
    const double C49300 = C49094 / C49237;
    const double C17859 = C49094 / C49274;
    const double C36785 = C49094 / C47868;
    const double C49296 = C49259 / C47862;
    const double C15327 = (-2 * C48898 * C49259) / C47862;
    const double C49308 = C49285 / C47867;
    const double C48033 = C48027 + C47999;
    const double C9171 = C48890 * C254;
    const double C11421 = C48900 * C254;
    const double C23831 = C48900 * C254;
    const double C10302 = C48890 * C362;
    const double C12955 = C48900 * C362;
    const double C25377 = C48900 * C362;
    const double C48249 = C48247 + C48248;
    const double C48638 = C48635 + C48248;
    const double C2736 =
        (2 * (C48107 * C48120 + C48484 * ae) +
         C48107 * (C48120 + C48107 * (C48107 * C48127 + C48248) +
                   C48107 * C48210 * ae) +
         (C48484 + C48210 * C48331) * ae) /
        C47862;
    const double C630 =
        (C48107 * C48238 * C48129 + C48238 * C48487 * ae) / C47862;
    const double C881 =
        (C48108 * C48120 + C48107 * (C48107 * C48129 + C48487 * ae) +
         C48107 * C48487 * ae) /
        C47862;
    const double C518 = C48108 * C48484 + C48487 * C48287;
    const double C620 = C48107 * C48238 * C48487;
    const double C871 = C48108 * C48484 + C48487 * C48331;
    const double C1156 =
        2 * C48238 * C48487 + C48238 * (C48487 + C48202 * C48287);
    const double C1390 = C48107 * (C48487 + C48202 * C48287);
    const double C2731 =
        2 * C48107 * C48487 + C48107 * (C48487 + C48202 * C48331);
    const double C2303 =
        (C48238 * C48120 + C48107 * (C48107 * C48238 * C48127 + C48591 * ae) +
         C48107 * C48591 * ae) /
        C47862;
    const double C3226 =
        (2 * (C48107 * C48623 + C48591 * ae) +
         C48107 * (C48623 + C48107 * (C48107 * C48238 * C48137 + C48624 * ae) +
                   C48107 * C48624 * ae) +
         (C48591 + C48624 * C48331) * ae) /
        C47862;
    const double C2294 = C48238 * C48484 + C48591 * C48331;
    const double C3220 =
        2 * C48107 * C48591 + C48107 * (C48591 + C48624 * C48331);
    const double C10298 = C48890 * C885;
    const double C9169 = C48890 * C247;
    const double C11417 = C48900 * C247;
    const double C23827 = C48900 * C247;
    const double C10300 = C48890 * C355;
    const double C12951 = C48900 * C355;
    const double C25373 = C48900 * C355;
    const double C9157 = C48890 * C522;
    const double C9566 = C48890 * C624;
    const double C10296 = C48890 * C875;
    const double C9161 = C48890 * C1164;
    const double C9562 = C48890 * C1398;
    const double C11175 = C48890 * C2739;
    const double C48141 = C48127 + C48139;
    const double C48156 = C48144 + C48154;
    const double C48149 = 2 * C48143;
    const double C48147 = ae * C48143;
    const double C48626 = C48238 * C48143;
    const double C48641 = C48107 * C48143;
    const double C1160 =
        (2 * C48238 * C48129 + C48238 * (C48129 + C48143 * C48287)) / C47862;
    const double C1394 = (C48107 * (C48129 + C48143 * C48287) +
                          (C48487 + C48202 * C48287) * ae) /
                         C47862;
    const double C1668 =
        (3 * (C48129 + C48143 * C48287) +
         C48238 * (2 * C48238 * C48143 + C48238 * (C48143 + C48165 * C48287))) /
        C47862;
    const double C48654 = C48127 + C48653;
    const double C48668 = 2 * C48666;
    const double C48707 = C48107 * C48666;
    const double C48735 = C48732 + C48201;
    const double C48140 = C48130 + C48138;
    const double C48332 = C48329 + C48330;
    const double C9163 = C48890 * C1169;
    const double C9560 = C48890 * C1403;
    const double C9167 = C48890 * C1670;
    const double C11173 = C48890 * C2744;
    const double C48205 = C48198 + C48203;
    const double C48223 = 2 * C48218;
    const double C48221 = C48218 * ae;
    const double C48603 = C48218 * C48287;
    const double C48627 = C48238 * C48218;
    const double C48643 = C48218 * C48331;
    const double C48748 = C48107 * C48218;
    const double C1851 =
        (C48107 * (2 * C48238 * C48143 + C48238 * (C48143 + C48165 * C48287)) +
         (2 * C48238 * C48202 + C48238 * (C48202 + C48218 * C48287)) * ae) /
        C47862;
    const double C48226 = C48224 + C48217;
    const double C48784 = C48779 + C48217;
    const double C48675 = C48198 + C48674;
    const double C48686 = 2 * C48684;
    const double C48710 = C48684 * C48331;
    const double C48763 = C48107 * C48684;
    const double C48762 = C48684 * ae;
    const double C48737 = C48198 + C48734;
    const double C48787 = 2 * C48780;
    const double C48785 = C48780 * ae;
    const double C48207 = C48206 + C48201;
    const double C48305 = C48211 + C48304;
    const double C48368 = 2 * C48320;
    const double C48392 = ae * C48320;
    const double C48391 = C48107 * C48320;
    const double C3229 =
        (2 * (ae * C48298 + C48107 * C48319) +
         ae * (C48298 + C48320 * std::pow(C48107, 2)) +
         C48107 * (C48319 + ae * C48107 * C48320 +
                   C48107 * (ae * C48320 + C48107 * C48238 * C48152))) /
        C47867;
    const double C3223 =
        (2 * C48107 * C48298 + C48107 * (C48298 + C48320 * C48331)) / C47862;
    const double C48334 = C48211 + C48333;
    const double C48419 = C48415 + C48416;
    const double C48420 = 2 * C48414;
    const double C48418 = ae * C48414;
    const double C9556 = C48890 * C1853;
    const double C48181 = C48153 + C48179;
    const double C48180 = C48166 + C48178;
    const double C48361 = C48152 + C48359;
    const double C48447 = C48107 * C48444;
    const double C48467 = C48461 + C48462;
    const double C48272 = C48271 + C48265;
    const double C48376 = C48220 + C48374;
    const double C48449 = C48445 * C48331;
    const double C48469 = C48220 + C48464;
    const double C2735 =
        (2 * (C48107 * C48129 + C48487 * ae) +
         C48107 * (C48129 + C48107 * (C48107 * C48143 + C48252) +
                   C48107 * C48202 * ae) +
         (C48487 + C48202 * C48331) * ae) /
        C47862;
    const double C2304 =
        (C48238 * C48129 + C48107 * (C48107 * C48238 * C48143 + C48593 * ae) +
         C48107 * C48593 * ae) /
        C47862;
    const double C2295 = C48238 * C48487 + C48593 * C48331;
    const double C123 = 3 * (C48484 + C48210 * C48133) +
                        C48108 * (2 * C48487 + C48108 * C48489);
    const double C234 = C48238 * (2 * C48487 + C48108 * C48489);
    const double C342 = C48107 * (2 * C48487 + C48108 * C48489);
    const double C519 = C48484 + C48210 * C48133 + C48489 * C48287;
    const double C621 = C48107 * C48238 * C48489;
    const double C872 = C48484 + C48210 * C48133 + C48489 * C48331;
    const double C2309 =
        (C48120 + C48127 * C48287 +
         C48107 * (C48107 * (C48127 + C48137 * C48287) + C48601 * ae) +
         C48107 * C48601 * ae) /
        C47862;
    const double C1661 = 3 * (C48484 + C48210 * C48287) +
                         C48238 * (2 * C48591 + C48238 * C48601);
    const double C1844 = C48107 * (2 * C48591 + C48238 * C48601);
    const double C2297 = C48484 + C48210 * C48287 + C48601 * C48331;
    const double C3652 = 3 * (C48484 + C48210 * C48331) +
                         C48107 * (2 * C48636 + C48107 * C48639);
    const double C10084 = C48890 * C2312;
    const double C10082 = C48890 * C2300;
    const double C48159 = C48108 * C48157;
    const double C48169 = 3 * C48157;
    const double C48164 = ae * C48157;
    const double C48629 = C48238 * C48157;
    const double C48647 = C48107 * C48157;
    const double C48175 = C48152 + C48171;
    const double C48659 = C48143 + C48658;
    const double C48727 = C48107 * C48723;
    const double C48670 = C48238 * C48669;
    const double C48715 = C48107 * C48669;
    const double C9149 =
        (4 * (2 * C48319 + C48238 * C48351) +
         C48238 *
             (3 * C48351 + C48238 * (2 * C48238 * C48152 +
                                     C48238 * (C48152 + C48176 * C48287)))) /
        C47867;
    const double C48227 = C48108 * C48225;
    const double C48267 = C48225 * ae;
    const double C48606 = C48225 * C48287;
    const double C48630 = C48238 * C48225;
    const double C48649 = C48225 * C48331;
    const double C48696 = C48218 + C48695;
    const double C48728 = C48726 * C48331;
    const double C48752 = C48218 + C48749;
    const double C48688 = C48238 * C48687;
    const double C48718 = C48687 * C48331;
    const double C48770 = C48684 + C48767;
    const double C48789 = C48107 * C48786;
    const double C48369 = C48238 * C48366;
    const double C48372 = 3 * C48366;
    const double C48399 = ae * C48366;
    const double C48398 = C48107 * C48366;
    const double C48396 = C48320 + C48394;
    const double C48448 = 2 * C48442;
    const double C48446 = ae * C48442;
    const double C48424 = C48107 * C48421;
    const double C48463 = 3 * C48421;
    const double C48459 = ae * C48421;
    const double C48470 = C48152 + C48466;
    const double C112 = C49277 / C48932;
    const double C110 = C48927 / C48932 - (C49275 * C49240) / C49241;
    const double C111 = C49275 / C49276 - (C49277 * C49240) / C48922;
    const double C449 = C49275 / C48922;
    const double C515 = C49279 / C48932;
    const double C229 = C49278 / C48922;
    const double C513 = C48961 / C48932 - (C49278 * C49245) / C49241;
    const double C514 = C49278 / C49276 - (C49279 * C49245) / C48922;
    const double C869 = C49281 / C48932;
    const double C339 = C49280 / C48922;
    const double C867 = C48978 / C48932 - (C49280 * C49246) / C49241;
    const double C868 = C49280 / C49276 - (C49281 * C49246) / C48922;
    const double C7757 = (C48996 * std::pow(C49046, 2)) / C47867 + C49045;
    const double C49048 = C49047 * C49046;
    const double C49053 = C49047 / C47874;
    const double C49251 = C49047 / C47862;
    const double C49248 = C48898 * C49047;
    const double C49055 = C49054 * C49046;
    const double C49257 = C49044 * C49054;
    const double C49256 = 2 * C49054;
    const double C49294 = C49054 / C49237;
    const double C9059 = C49054 / C49274;
    const double C26646 = C49054 / C47868;
    const double C49290 = C49253 / C47862;
    const double C7758 = (-2 * C48898 * C49253) / C47862;
    const double C49306 = C49282 / C47867;
    const double C47903 = C47898 + 0;
    const double C47902 = C47897 / C47868;
    const double C47888 = C47873 - C47884;
    const double C47887 = C47860 * C47882;
    const double C1008 =
        ((-C47882 / C47862) / C47868 - (0 * be) / C47862) / C47868 -
        (0 * be) / C47862;
    const double C9060 = -C47882 / C47862;
    const double C23692 = (-C47882 / C47862) / C47868 - (0 * be) / C47862;
    const double C48894 = C48893 / C47867;
    const double C49268 = 2 * C49231;
    const double C11443 = C49229 * C254;
    const double C11439 = C49229 * C247;
    const double C11435 = C49229 * C1169;
    const double C11431 = C49229 * C1164;
    const double C11427 = C49229 * C532;
    const double C11423 = C49229 * C522;
    const double C11419 = C49229 * C255;
    const double C11415 = C49229 * C248;
    const double C11851 = C49229 * C1670;
    const double C12019 = C49229 * C624;
    const double C12015 = C49229 * C634;
    const double C12011 = C49229 * C1398;
    const double C12007 = C49229 * C1403;
    const double C11999 = C49229 * C1853;
    const double C12961 = C49229 * C362;
    const double C12957 = C49229 * C355;
    const double C12953 = C49229 * C363;
    const double C12949 = C49229 * C356;
    const double C13534 = C49229 * C2300;
    const double C13530 = C49229 * C2312;
    const double C14086 = C49229 * C875;
    const double C14082 = C49229 * C885;
    const double C20183 = C49229 * C2739;
    const double C20179 = C49229 * C2744;
    const double C1203 = C1000 * C254;
    const double C1197 = C1000 * C247;
    const double C1191 = C1000 * C532;
    const double C1185 = C1000 * C522;
    const double C1179 = C1000 * C255;
    const double C1173 = C1000 * C248;
    const double C1687 = C1000 * C1164;
    const double C1681 = C1000 * C1169;
    const double C1880 = C1000 * C624;
    const double C1874 = C1000 * C634;
    const double C1868 = C1000 * C1398;
    const double C1862 = C1000 * C1403;
    const double C2778 = C1000 * C362;
    const double C2772 = C1000 * C355;
    const double C2766 = C1000 * C885;
    const double C2760 = C1000 * C875;
    const double C2754 = C1000 * C363;
    const double C2748 = C1000 * C356;
    const double C3240 = C1000 * C2312;
    const double C3234 = C1000 * C2300;
    const double C3678 = C1000 * C2739;
    const double C3672 = C1000 * C2744;
    const double C48902 = C48901 / C47862;
    const double C49272 = C49235 / C47874;
    const double C49302 = C49229 - C49267;
    const double C23685 = -C49267;
    const double C1181 = C1001 * C254;
    const double C1175 = C1001 * C247;
    const double C2756 = C1001 * C362;
    const double C2750 = C1001 * C355;
    const double C49316 = C49301 + C48891;
    const double C48034 = C48028 + 0;
    const double C48001 = C47947 * C47982;
    const double C15330 =
        ((-C47948 / C47862) / C47868 -
         ((C49007 - (C47947 * C47982) / C47862) * be) / C47862) /
            C47868 -
        ((C47947 * ((-C47982 / C47862) / C47868 - (0 * be) / C47862) + C49094) *
         be) /
            C47862;
    const double C15331 =
        ((-C47982 / C47862) / C47868 - (0 * be) / C47862) / C47868 -
        (0 * be) / C47862;
    const double C31305 = (-C47982 / C47862) / C47868 - (0 * be) / C47862;
    const double C48014 = C48010 - C48004;
    const double C49089 = C49088 / C47867;
    const double C2431 =
        (((0 - (C47947 * C47948) / C47862) * ae) / C47862 - (0 * be) / C47874) /
            C47868 +
        ((C47947 * (((C49007 - (C47947 * 2 * C47950) / C47862) * ae) / C47862 -
                    C47948 / C47874) +
          C49252) *
         ae) /
            C47862 +
        (0 * ae) / C47862 - C47950 / C47867;
    const double C49286 = 2 * C49250;
    const double C49096 = C49095 / C47862;
    const double C49299 = C49263 / C47874;
    const double C49313 = C49252 - C49296;
    const double C31302 = -C49296;
    const double C49320 = C49308 + C49085;
    const double C48037 = C48033 / C47868;
    const double C129 =
        (2 * (C48108 * C48245 + C48484 * ae) +
         C48108 * (C48245 + C48108 * C48249 + C48108 * C48210 * ae) +
         (C48484 + C48210 * C48133) * ae) /
        C47862;
    const double C246 =
        (C48238 * (C48245 + C48108 * C48249 + C48487 * ae)) / C47862;
    const double C354 =
        (C48107 * (C48245 + C48108 * C48249 + C48487 * ae)) / C47862;
    const double C523 =
        (C48108 * C48245 + C48484 * ae + C48249 * C48287) / C47862;
    const double C625 = (C48107 * C48238 * C48249) / C47862;
    const double C876 =
        (C48108 * C48245 + C48484 * ae + C48249 * C48331) / C47862;
    const double C3658 =
        (3 * (C48120 + C48107 * C48638 + C48636 * ae) +
         C48107 * (2 * C48638 +
                   C48107 * (C48127 + C48107 * (C48107 * C48137 + C48201) +
                             C48107 * C48198 * ae) +
                   C48639 * ae) +
         (2 * C48636 + C48107 * C48639) * ae) /
        C47862;
    const double C135 = (3 * (C48120 + C48127 * C48133) +
                         C48108 * (2 * C48129 + C48108 * C48141)) /
                        C47862;
    const double C240 = (C48238 * (2 * C48129 + C48108 * C48141)) / C47862;
    const double C348 = (C48107 * (2 * C48129 + C48108 * C48141) +
                         (2 * C48487 + C48108 * C48489) * ae) /
                        C47862;
    const double C529 = (C48120 + C48127 * C48133 + C48141 * C48287) / C47862;
    const double C631 =
        (C48107 * C48238 * C48141 + C48238 * C48489 * ae) / C47862;
    const double C882 =
        (C48120 + C48127 * C48133 + C48107 * (C48107 * C48141 + C48489 * ae) +
         C48107 * C48489 * ae) /
        C47862;
    const double C1159 =
        (2 * C48238 * C48141 + C48238 * (C48141 + C48157 * C48287)) / C47862;
    const double C48158 = C48108 * C48156;
    const double C48163 = 2 * C48156;
    const double C48322 = C48238 * C48156;
    const double C48338 = C48107 * C48156;
    const double C48151 = C48136 + C48147;
    const double C48644 = C48641 + C48252;
    const double C9145 =
        (4 * (2 * C48623 + C48238 * C48654) +
         C48238 *
             (3 * C48654 + C48238 * (2 * C48238 * C48137 +
                                     C48238 * (C48137 + C48153 * C48287)))) /
        C47862;
    const double C9299 =
        (C48107 *
             (3 * C48654 + C48238 * (2 * C48238 * C48137 +
                                     C48238 * (C48137 + C48153 * C48287))) +
         (3 * C48601 +
          C48238 * (2 * C48624 + C48238 * (C48198 + C48199 * C48287))) *
             ae) /
        C47862;
    const double C48711 = C48707 + C48708;
    const double C48739 = C48107 * C48735;
    const double C48778 = 2 * C48735;
    const double C144 =
        (3 * (C48126 + ae * C48129 + C48108 * C48140) +
         ae * (2 * C48129 + C48108 * C48141) +
         C48108 *
             (2 * C48140 + ae * C48141 +
              C48108 * (C48136 + ae * C48108 * C48137 +
                        C48108 * (ae * C48137 + C48108 * std::pow(C48110, 6) *
                                                    bs[6] * C48118)))) /
        C47867;
    const double C253 =
        ((yP - yQ) * (C48126 + ae * C48129 + C48108 * C48140)) / C47867;
    const double C361 = (ae * (C48117 * C48113 * C48197 +
                               C48108 * (C48108 * C48211 + C48210 * ae) +
                               C48108 * C48210 * ae) +
                         C48107 * (C48126 + ae * C48129 + C48108 * C48140)) /
                        C47867;
    const double C533 =
        (ae * C48120 + C48108 * C48126 + C48140 * std::pow(yP - yQ, 2)) /
        C47867;
    const double C635 = (ae * C48238 * (C48108 * C48211 + C48210 * ae) +
                         C48107 * C48238 * C48140) /
                        C47867;
    const double C886 = (ae * C48120 + C48108 * C48126 + ae * C48107 * C48249 +
                         C48107 * (ae * C48249 + C48107 * C48140)) /
                        C47867;
    const double C1168 = (2 * C48238 * C48140 +
                          C48238 * (C48140 + C48156 * std::pow(C48238, 2))) /
                         C47867;
    const double C48258 = C48205 * ae;
    const double C48498 = C48108 * C48205;
    const double C48501 = 3 * C48205;
    const double C48595 = C48238 * C48205;
    const double C48648 = C48107 * C48205;
    const double C1393 = (C48107 * (C48141 + C48157 * C48287) +
                          (C48489 + C48205 * C48287) * ae) /
                         C47862;
    const double C1155 =
        2 * C48238 * C48489 + C48238 * (C48489 + C48205 * C48287);
    const double C1389 = C48107 * (C48489 + C48205 * C48287);
    const double C2730 =
        2 * C48107 * C48489 + C48107 * (C48489 + C48205 * C48331);
    const double C48750 = C48747 + C48221;
    const double C48604 = C48202 + C48603;
    const double C48694 = 2 * C48627;
    const double C48725 = C48107 * C48627;
    const double C48724 = C48627 * ae;
    const double C3227 =
        (2 * (C48107 * C48626 + C48593 * ae) +
         C48107 * (C48626 + C48107 * (C48107 * C48238 * C48165 + C48627 * ae) +
                   C48107 * C48627 * ae) +
         (C48593 + C48627 * C48331) * ae) /
        C47862;
    const double C3221 =
        2 * C48107 * C48593 + C48107 * (C48593 + C48627 * C48331);
    const double C48645 = C48202 + C48643;
    const double C48753 = 2 * C48748;
    const double C48751 = C48748 * ae;
    const double C48228 = C48108 * C48226;
    const double C48263 = 2 * C48226;
    const double C48307 = C48226 * C48287;
    const double C48323 = C48238 * C48226;
    const double C48339 = C48226 * C48331;
    const double C48429 = ae * C48226;
    const double C48428 = C48107 * C48226;
    const double C48788 = C48107 * C48784;
    const double C48679 = C48238 * C48675;
    const double C48683 = 3 * C48675;
    const double C48717 = C48107 * C48675;
    const double C48716 = C48675 * ae;
    const double C10284 =
        (2 * (C48107 * C48654 + C48601 * ae) +
         C48107 * (C48654 + C48107 * (C48107 * C48669 + C48675 * ae) +
                   C48107 * C48675 * ae) +
         (C48601 + C48675 * C48331) * ae) /
        C47862;
    const double C10282 =
        2 * C48107 * C48601 + C48107 * (C48601 + C48675 * C48331);
    const double C48712 = C48624 + C48710;
    const double C48768 = 2 * C48763;
    const double C48766 = C48763 * ae;
    const double C48769 = C48765 + C48762;
    const double C48740 = C48107 * C48737;
    const double C48783 = 3 * C48737;
    const double C48781 = C48737 * ae;
    const double C48251 = C48108 * C48207;
    const double C48256 = 2 * C48207;
    const double C48300 = C48238 * C48207;
    const double C48337 = ae * C48207;
    const double C48336 = C48107 * C48207;
    const double C1402 = (ae * (C48249 + C48207 * C48287) +
                          C48107 * (C48140 + C48156 * C48287)) /
                         C47867;
    const double C2743 = (2 * (ae * C48249 + C48107 * C48140) +
                          ae * (C48249 + C48207 * std::pow(C48107, 2)) +
                          C48107 * (C48140 + ae * C48107 * C48207 +
                                    C48107 * (ae * C48207 + C48107 * C48156))) /
                         C47867;
    const double C1163 =
        (2 * C48238 * C48249 + C48238 * (C48249 + C48207 * C48287)) / C47862;
    const double C1397 = (C48107 * (C48249 + C48207 * C48287)) / C47862;
    const double C2738 =
        (2 * C48107 * C48249 + C48107 * (C48249 + C48207 * C48331)) / C47862;
    const double C2315 =
        (C48126 + C48136 * C48287 + ae * C48107 * C48305 +
         C48107 * (ae * C48305 + C48107 * (C48136 + C48152 * C48287))) /
        C47867;
    const double C9303 =
        (ae * (3 * C48305 +
               C48238 * (2 * C48320 + C48238 * (C48204 + C48220 * C48287))) +
         C48107 *
             (3 * C48351 + C48238 * (2 * C48238 * C48152 +
                                     C48238 * (C48152 + C48176 * C48287)))) /
        C47867;
    const double C1664 = (3 * (C48245 + C48211 * C48287) +
                          C48238 * (2 * C48298 + C48238 * C48305)) /
                         C47862;
    const double C1847 = (C48107 * (2 * C48298 + C48238 * C48305)) / C47862;
    const double C2306 = (C48245 + C48211 * C48287 + C48305 * C48331) / C47862;
    const double C10285 =
        (2 * C48107 * C48305 + C48107 * (C48305 + C48366 * C48331)) / C47862;
    const double C48395 = C48392 + C48393;
    const double C10747 = C48890 * C3229;
    const double C19629 = C49229 * C3229;
    const double C10749 = C48890 * C3223;
    const double C19633 = C49229 * C3223;
    const double C3661 =
        (3 * (C48126 + ae * C48328 + C48107 * C48332) +
         ae * (2 * C48328 + C48107 * C48334) +
         C48107 * (2 * C48332 + ae * C48334 +
                   C48107 * (C48136 + ae * C48107 * C48204 +
                             C48107 * (ae * C48204 + C48107 * C48152)))) /
        C47867;
    const double C3655 = (3 * (C48245 + C48211 * C48331) +
                          C48107 * (2 * C48328 + C48107 * C48334)) /
                         C47862;
    const double C48423 = C48107 * C48419;
    const double C48458 = 2 * C48419;
    const double C48422 = C48136 + C48418;
    const double C48183 = C48108 * C48181;
    const double C1669 =
        (3 * (C48141 + C48157 * C48287) +
         C48238 * (2 * C48238 * C48157 + C48238 * (C48157 + C48181 * C48287))) /
        C47862;
    const double C1852 =
        (C48107 * (2 * C48238 * C48157 + C48238 * (C48157 + C48181 * C48287)) +
         (2 * C48238 * C48205 + C48238 * (C48205 + C48225 * C48287)) * ae) /
        C47862;
    const double C48182 = C48108 * C48180;
    const double C48353 = C48180 * C48287;
    const double C48407 = C48238 * C48180;
    const double C48430 = C48107 * C48180;
    const double C1671 =
        (3 * (C48140 + C48156 * C48287) +
         C48238 * (2 * C48238 * C48156 + C48238 * (C48156 + C48180 * C48287))) /
        C47867;
    const double C1854 =
        (ae * (2 * C48238 * C48207 + C48238 * (C48207 + C48226 * C48287)) +
         C48107 * (2 * C48238 * C48156 + C48238 * (C48156 + C48180 * C48287))) /
        C47867;
    const double C48362 = C48238 * C48361;
    const double C48400 = C48107 * C48361;
    const double C10288 =
        (2 * (ae * C48305 + C48107 * C48351) + ae * (C48305 + C48366 * C48331) +
         C48107 * (C48351 + ae * C48107 * C48366 +
                   C48107 * (ae * C48366 + C48107 * C48361))) /
        C47867;
    const double C48451 = C48443 + C48447;
    const double C48471 = C48107 * C48467;
    const double C48273 = C48108 * C48272;
    const double C48383 = C48272 * C48287;
    const double C48408 = C48238 * C48272;
    const double C48431 = C48272 * C48331;
    const double C48377 = C48238 * C48376;
    const double C48401 = C48376 * C48331;
    const double C48452 = C48373 + C48449;
    const double C48472 = C48107 * C48469;
    const double C48161 = C48149 + C48159;
    const double C9148 =
        (4 * (2 * C48626 + C48238 * C48659) +
         C48238 * (3 * C48659 +
                   C48238 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287)))) /
        C47862;
    const double C48671 = C48668 + C48670;
    const double C9458 = C48890 * C9149;
    const double C48229 = C48223 + C48227;
    const double C48607 = C48205 + C48606;
    const double C48651 = C48205 + C48649;
    const double C48697 = C48238 * C48696;
    const double C48730 = C48627 + C48728;
    const double C48755 = C48107 * C48752;
    const double C48689 = C48686 + C48688;
    const double C48720 = C48675 + C48718;
    const double C48772 = C48107 * C48770;
    const double C48791 = C48787 + C48789;
    const double C48370 = C48368 + C48369;
    const double C11165 = (3 * (C48298 + C48320 * C48331) +
                           C48107 * (2 * C48391 + C48107 * C48396)) /
                          C47862;
    const double C48450 = C48358 + C48446;
    const double C48426 = C48420 + C48424;
    const double C49049 = C49048 / C47867;
    const double C49283 = 2 * C49248;
    const double C49056 = C49055 / C47862;
    const double C49293 = C49257 / C47874;
    const double C49310 = C49251 - C49290;
    const double C22509 = -C49290;
    const double C49319 = C49306 + C49045;
    const double C47906 = C47903 * be;
    const double C11448 = C47888 * C519;
    const double C11444 = C47888 * C241;
    const double C11440 = C47888 * C235;
    const double C11436 = C47888 * C1160;
    const double C11432 = C47888 * C1156;
    const double C11428 = C47888 * C528;
    const double C11424 = C47888 * C518;
    const double C11420 = C47888 * C242;
    const double C11416 = C47888 * C236;
    const double C11848 = C47888 * C1668;
    const double C12016 = C47888 * C620;
    const double C12012 = C47888 * C630;
    const double C12008 = C47888 * C1390;
    const double C12004 = C47888 * C1394;
    const double C11996 = C47888 * C1851;
    const double C12732 = C47888 * C621;
    const double C12962 = C47888 * C349;
    const double C12958 = C47888 * C343;
    const double C12954 = C47888 * C350;
    const double C12950 = C47888 * C344;
    const double C13531 = C47888 * C2295;
    const double C13527 = C47888 * C2304;
    const double C14083 = C47888 * C871;
    const double C14079 = C47888 * C881;
    const double C19080 = C47888 * C872;
    const double C20180 = C47888 * C2731;
    const double C20176 = C47888 * C2735;
    const double C47892 = C47860 * C47888;
    const double C47920 = C47888 / C47868;
    const double C47891 = C47887 / C47862;
    const double C1200 = C1008 * C234;
    const double C1188 = C1008 * C519;
    const double C1182 = C1008 * C241;
    const double C1176 = C1008 * C235;
    const double C1875 = C1008 * C621;
    const double C2775 = C1008 * C342;
    const double C2763 = C1008 * C872;
    const double C2757 = C1008 * C349;
    const double C2751 = C1008 * C343;
    const double C9182 = C9060 * C1668;
    const double C9178 = C9060 * C1160;
    const double C9176 = C9060 * C1156;
    const double C9174 = C9060 * C528;
    const double C9172 = C9060 * C518;
    const double C9170 = C9060 * C242;
    const double C9168 = C9060 * C236;
    const double C9166 = C9060 * C1667;
    const double C9164 = C9060 * C1661;
    const double C9162 = C9060 * C1161;
    const double C9160 = C9060 * C1157;
    const double C9158 = C9060 * C527;
    const double C9156 = C9060 * C517;
    const double C9154 = C9060 * C243;
    const double C9152 = C9060 * C237;
    const double C9565 = C9060 * C619;
    const double C9563 = C9060 * C629;
    const double C9561 = C9060 * C1391;
    const double C9559 = C9060 * C1395;
    const double C9557 = C9060 * C1844;
    const double C9555 = C9060 * C1850;
    const double C10107 = C9060 * C1394;
    const double C10105 = C9060 * C1390;
    const double C10101 = C9060 * C2304;
    const double C10099 = C9060 * C2295;
    const double C10097 = C9060 * C630;
    const double C10095 = C9060 * C620;
    const double C10091 = C9060 * C2309;
    const double C10089 = C9060 * C2297;
    const double C10083 = C9060 * C2303;
    const double C10081 = C9060 * C2294;
    const double C10305 = C9060 * C881;
    const double C10303 = C9060 * C871;
    const double C10301 = C9060 * C350;
    const double C10299 = C9060 * C344;
    const double C10297 = C9060 * C880;
    const double C10295 = C9060 * C870;
    const double C10293 = C9060 * C351;
    const double C10291 = C9060 * C345;
    const double C10748 = C9060 * C3220;
    const double C10746 = C9060 * C3226;
    const double C11174 = C9060 * C2732;
    const double C11172 = C9060 * C2736;
    const double C14343 = C9060 * C1851;
    const double C18048 = C9060 * C2735;
    const double C18046 = C9060 * C2731;
    const double C18042 = C9060 * C3652;
    const double C23858 = C23692 * C519;
    const double C23854 = C23692 * C241;
    const double C23850 = C23692 * C235;
    const double C23846 = C23692 * C1160;
    const double C23842 = C23692 * C1156;
    const double C23838 = C23692 * C528;
    const double C23834 = C23692 * C518;
    const double C23830 = C23692 * C242;
    const double C23826 = C23692 * C236;
    const double C24258 = C23692 * C1668;
    const double C24426 = C23692 * C620;
    const double C24422 = C23692 * C630;
    const double C24418 = C23692 * C1390;
    const double C24414 = C23692 * C1394;
    const double C24406 = C23692 * C1851;
    const double C25150 = C23692 * C621;
    const double C25146 = C23692 * C2304;
    const double C25142 = C23692 * C2295;
    const double C25396 = C23692 * C872;
    const double C25392 = C23692 * C349;
    const double C25388 = C23692 * C343;
    const double C25384 = C23692 * C881;
    const double C25380 = C23692 * C871;
    const double C25376 = C23692 * C350;
    const double C25372 = C23692 * C344;
    const double C26524 = C23692 * C2731;
    const double C26520 = C23692 * C2735;
    const double C48895 = C48891 - C48894;
    const double C49303 = C49268 / C47862;
    const double C48903 = C48899 - C48902;
    const double C49317 = C49302 / C47868;
    const double C23853 = C23685 * C254;
    const double C23849 = C23685 * C247;
    const double C23845 = C23685 * C1169;
    const double C23841 = C23685 * C1164;
    const double C23837 = C23685 * C532;
    const double C23833 = C23685 * C522;
    const double C23829 = C23685 * C255;
    const double C23825 = C23685 * C248;
    const double C24261 = C23685 * C1670;
    const double C24429 = C23685 * C624;
    const double C24425 = C23685 * C634;
    const double C24421 = C23685 * C1398;
    const double C24417 = C23685 * C1403;
    const double C24409 = C23685 * C1853;
    const double C25145 = C23685 * C2312;
    const double C25141 = C23685 * C2300;
    const double C25391 = C23685 * C362;
    const double C25387 = C23685 * C355;
    const double C25383 = C23685 * C885;
    const double C25379 = C23685 * C875;
    const double C25375 = C23685 * C363;
    const double C25371 = C23685 * C356;
    const double C25975 = C23685 * C3223;
    const double C25971 = C23685 * C3229;
    const double C26527 = C23685 * C2739;
    const double C26523 = C23685 * C2744;
    const double C7941 = C49316 * C254;
    const double C7935 = C49316 * C247;
    const double C7929 = C49316 * C532;
    const double C7923 = C49316 * C522;
    const double C7917 = C49316 * C255;
    const double C7911 = C49316 * C248;
    const double C8397 = C49316 * C1164;
    const double C8391 = C49316 * C1169;
    const double C8578 = C49316 * C624;
    const double C8572 = C49316 * C634;
    const double C8566 = C49316 * C1398;
    const double C8560 = C49316 * C1403;
    const double C15656 = C49316 * C362;
    const double C15650 = C49316 * C355;
    const double C15644 = C49316 * C885;
    const double C15638 = C49316 * C875;
    const double C15632 = C49316 * C363;
    const double C15626 = C49316 * C356;
    const double C16106 = C49316 * C2312;
    const double C16100 = C49316 * C2300;
    const double C16532 = C49316 * C2739;
    const double C16526 = C49316 * C2744;
    const double C48038 = C48034 * be;
    const double C48009 = C48001 / C47862;
    const double C48018 = C47947 * C48014;
    const double C48047 = C48014 / C47868;
    const double C49090 = C49085 - C49089;
    const double C49309 = C49286 / C47862;
    const double C49097 = C49093 - C49096;
    const double C49323 = C49313 / C47868;
    const double C15329 =
        ((-(0 * be) / C47862) / C47868 -
         ((0 - (C47947 * C47948) / C47862) * be) / C47862) /
            C47868 -
        ((C47947 * ((-C47948 / C47862) / C47868 -
                    ((C49007 - (C47947 * C47982) / C47862) * be) / C47862) +
          C31302) *
         be) /
            C47862 +
        (-C47982 / C47862) / C47868 - (0 * be) / C47862;
    const double C1199 = C1001 * C246;
    const double C1177 = C49271 * C246;
    const double C7915 = C49271 * C246;
    const double C11441 = C48900 * C246;
    const double C23851 = C48900 * C246;
    const double C26802 = C26643 * C246;
    const double C2774 = C1001 * C354;
    const double C2752 = C49271 * C354;
    const double C12959 = C48900 * C354;
    const double C15630 = C49271 * C354;
    const double C25389 = C48900 * C354;
    const double C28437 = C26643 * C354;
    const double C1209 = C1000 * C523;
    const double C1187 = C1001 * C523;
    const double C7947 = C49316 * C523;
    const double C9173 = C48890 * C523;
    const double C11447 = C49229 * C523;
    const double C11425 = C48900 * C523;
    const double C23857 = C23685 * C523;
    const double C23835 = C48900 * C523;
    const double C1878 = C1001 * C625;
    const double C6358 = C1000 * C625;
    const double C10096 = C48890 * C625;
    const double C12017 = C48900 * C625;
    const double C12731 = C49229 * C625;
    const double C24427 = C48900 * C625;
    const double C25149 = C23685 * C625;
    const double C39869 = C49316 * C625;
    const double C2784 = C1000 * C876;
    const double C2762 = C1001 * C876;
    const double C10304 = C48890 * C876;
    const double C14084 = C48900 * C876;
    const double C15662 = C49316 * C876;
    const double C19079 = C49229 * C876;
    const double C25395 = C23685 * C876;
    const double C25381 = C48900 * C876;
    const double C18044 = C9060 * C3658;
    const double C1206 = C1008 * C240;
    const double C2781 = C1008 * C348;
    const double C1194 = C1008 * C529;
    const double C11452 = C47888 * C529;
    const double C23862 = C23692 * C529;
    const double C1869 = C1008 * C631;
    const double C12736 = C47888 * C631;
    const double C25154 = C23692 * C631;
    const double C2769 = C1008 * C882;
    const double C19084 = C47888 * C882;
    const double C25400 = C23692 * C882;
    const double C1676 = C1008 * C1159;
    const double C11460 = C47888 * C1159;
    const double C23870 = C23692 * C1159;
    const double C48170 = C48163 + C48164;
    const double C48160 = C48151 + C48158;
    const double C9457 = C9060 * C9145;
    const double C9551 = C9060 * C9299;
    const double C48741 = C48127 + C48739;
    const double C1205 = C1001 * C253;
    const double C1183 = C49271 * C253;
    const double C7921 = C49271 * C253;
    const double C11445 = C48900 * C253;
    const double C23855 = C48900 * C253;
    const double C26808 = C26643 * C253;
    const double C2780 = C1001 * C361;
    const double C2758 = C49271 * C361;
    const double C12963 = C48900 * C361;
    const double C15636 = C49271 * C361;
    const double C25393 = C48900 * C361;
    const double C28443 = C26643 * C361;
    const double C1215 = C1000 * C533;
    const double C1193 = C1001 * C533;
    const double C7953 = C49316 * C533;
    const double C9175 = C48890 * C533;
    const double C11451 = C49229 * C533;
    const double C11429 = C48900 * C533;
    const double C23861 = C23685 * C533;
    const double C23839 = C48900 * C533;
    const double C1872 = C1001 * C635;
    const double C6364 = C1000 * C635;
    const double C10098 = C48890 * C635;
    const double C12013 = C48900 * C635;
    const double C12735 = C49229 * C635;
    const double C24423 = C48900 * C635;
    const double C25153 = C23685 * C635;
    const double C39875 = C49316 * C635;
    const double C2790 = C1000 * C886;
    const double C2768 = C1001 * C886;
    const double C10306 = C48890 * C886;
    const double C14080 = C48900 * C886;
    const double C15668 = C49316 * C886;
    const double C19083 = C49229 * C886;
    const double C25399 = C23685 * C886;
    const double C25385 = C48900 * C886;
    const double C1679 = C1001 * C1168;
    const double C9179 = C48890 * C1168;
    const double C11459 = C49229 * C1168;
    const double C11437 = C48900 * C1168;
    const double C23869 = C23685 * C1168;
    const double C23847 = C48900 * C1168;
    const double C48650 = C48647 + C48258;
    const double C2734 =
        (2 * (C48107 * C48141 + C48489 * ae) +
         C48107 * (C48141 + C48107 * (C48107 * C48157 + C48258) +
                   C48107 * C48205 * ae) +
         (C48489 + C48205 * C48331) * ae) /
        C47862;
    const double C48499 = C48497 + C48498;
    const double C2305 =
        (C48238 * C48141 + C48107 * (C48107 * C48238 * C48157 + C48595 * ae) +
         C48107 * C48595 * ae) /
        C47862;
    const double C3228 =
        (2 * (C48107 * C48629 + C48595 * ae) +
         C48107 * (C48629 + C48107 * (C48107 * C48238 * C48181 + C48630 * ae) +
                   C48107 * C48630 * ae) +
         (C48595 + C48630 * C48331) * ae) /
        C47862;
    const double C2296 = C48238 * C48489 + C48595 * C48331;
    const double C3222 =
        2 * C48107 * C48595 + C48107 * (C48595 + C48630 * C48331);
    const double C1857 = C1008 * C1393;
    const double C12744 = C47888 * C1393;
    const double C29926 = C23692 * C1393;
    const double C1682 = C1008 * C1155;
    const double C11456 = C47888 * C1155;
    const double C23866 = C23692 * C1155;
    const double C1863 = C1008 * C1389;
    const double C12740 = C47888 * C1389;
    const double C29922 = C23692 * C1389;
    const double C3673 = C1008 * C2730;
    const double C20556 = C47888 * C2730;
    const double C34332 = C23692 * C2730;
    const double C48754 = C48107 * C48750;
    const double C2310 =
        (C48129 + C48143 * C48287 +
         C48107 * (C48107 * (C48143 + C48165 * C48287) + C48604 * ae) +
         C48107 * C48604 * ae) /
        C47862;
    const double C9302 =
        (C48107 * (3 * C48659 +
                   C48238 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287))) +
         (3 * C48604 +
          C48238 * (2 * C48627 + C48238 * (C48218 + C48266 * C48287))) *
             ae) /
        C47862;
    const double C10287 =
        (2 * (C48107 * C48659 + C48604 * ae) +
         C48107 * (C48659 +
                   C48107 * (C48107 * (C48165 + C48108 * C48177 * C48287) +
                             C48696 * ae) +
                   C48107 * C48696 * ae) +
         (C48604 + C48696 * C48331) * ae) /
        C47862;
    const double C1662 = 3 * (C48487 + C48202 * C48287) +
                         C48238 * (2 * C48593 + C48238 * C48604);
    const double C1845 = C48107 * (2 * C48593 + C48238 * C48604);
    const double C2298 = C48487 + C48202 * C48287 + C48604 * C48331;
    const double C10283 =
        2 * C48107 * C48604 + C48107 * (C48604 + C48696 * C48331);
    const double C48729 = C48727 + C48724;
    const double C19626 = C47888 * C3227;
    const double C21540 = C9060 * C3227;
    const double C25968 = C23692 * C3227;
    const double C19630 = C47888 * C3221;
    const double C21538 = C9060 * C3221;
    const double C25972 = C23692 * C3221;
    const double C3659 =
        (3 * (C48129 + C48107 * C48644 + C48642 * ae) +
         C48107 * (2 * C48644 +
                   C48107 * (C48143 + C48107 * (C48107 * C48165 + C48221) +
                             C48107 * C48218 * ae) +
                   C48645 * ae) +
         (2 * C48642 + C48107 * C48645) * ae) /
        C47862;
    const double C3653 = 3 * (C48487 + C48202 * C48331) +
                         C48107 * (2 * C48642 + C48107 * C48645);
    const double C48230 = C48204 + C48228;
    const double C48308 = C48207 + C48307;
    const double C48382 = 2 * C48323;
    const double C48406 = ae * C48323;
    const double C48405 = C48107 * C48323;
    const double C48341 = C48207 + C48339;
    const double C48434 = 2 * C48428;
    const double C48432 = ae * C48428;
    const double C48790 = C48137 + C48788;
    const double C48680 = C48678 + C48679;
    const double C48719 = C48715 + C48716;
    const double C10738 = C9060 * C10284;
    const double C10740 = C9060 * C10282;
    const double C11166 =
        (3 * (C48623 + C48107 * C48711 + C48709 * ae) +
         C48107 * (2 * C48711 +
                   C48107 * (C48666 +
                             C48107 * (C48107 * C48238 * C48153 + C48684 * ae) +
                             C48107 * C48684 * ae) +
                   C48712 * ae) +
         (2 * C48709 + C48107 * C48712) * ae) /
        C47862;
    const double C11163 = 3 * (C48591 + C48624 * C48331) +
                          C48107 * (2 * C48709 + C48107 * C48712);
    const double C48771 = C48107 * C48769;
    const double C48742 = C48738 + C48740;
    const double C48253 = C48211 + C48251;
    const double C2313 = (C48238 * C48140 + ae * C48107 * C48300 +
                          C48107 * (ae * C48300 + C48107 * C48238 * C48156)) /
                         C47867;
    const double C3230 =
        (2 * (ae * C48300 + C48107 * C48322) +
         ae * (C48300 + C48323 * std::pow(C48107, 2)) +
         C48107 * (C48322 + ae * C48107 * C48323 +
                   C48107 * (ae * C48323 + C48107 * C48238 * C48180))) /
        C47867;
    const double C2301 = (C48238 * C48249 + C48300 * C48331) / C47862;
    const double C3224 =
        (2 * C48107 * C48300 + C48107 * (C48300 + C48323 * C48331)) / C47862;
    const double C48340 = C48337 + C48338;
    const double C1860 = C1001 * C1402;
    const double C10108 = C48890 * C1402;
    const double C12005 = C48900 * C1402;
    const double C12743 = C49229 * C1402;
    const double C24415 = C48900 * C1402;
    const double C29925 = C23685 * C1402;
    const double C3670 = C1001 * C2743;
    const double C18049 = C48890 * C2743;
    const double C20177 = C48900 * C2743;
    const double C20559 = C49229 * C2743;
    const double C26521 = C48900 * C2743;
    const double C34335 = C23685 * C2743;
    const double C1685 = C1001 * C1163;
    const double C9177 = C48890 * C1163;
    const double C11455 = C49229 * C1163;
    const double C11433 = C48900 * C1163;
    const double C23865 = C23685 * C1163;
    const double C23843 = C48900 * C1163;
    const double C1866 = C1001 * C1397;
    const double C10106 = C48890 * C1397;
    const double C12009 = C48900 * C1397;
    const double C12739 = C49229 * C1397;
    const double C24419 = C48900 * C1397;
    const double C29921 = C23685 * C1397;
    const double C3676 = C1001 * C2738;
    const double C18047 = C48890 * C2738;
    const double C20181 = C48900 * C2738;
    const double C20555 = C49229 * C2738;
    const double C26525 = C48900 * C2738;
    const double C34331 = C23685 * C2738;
    const double C10092 = C48890 * C2315;
    const double C13520 = C49229 * C2315;
    const double C25761 = C23685 * C2315;
    const double C9552 = C48890 * C9303;
    const double C9165 = C48890 * C1664;
    const double C11855 = C49229 * C1664;
    const double C24265 = C23685 * C1664;
    const double C9558 = C48890 * C1847;
    const double C12003 = C49229 * C1847;
    const double C24413 = C23685 * C1847;
    const double C10090 = C48890 * C2306;
    const double C13524 = C49229 * C2306;
    const double C25765 = C23685 * C2306;
    const double C10741 = C48890 * C10285;
    const double C11169 =
        (3 * (C48319 + ae * C48391 + C48107 * C48395) +
         ae * (2 * C48391 + C48107 * C48396) +
         C48107 *
             (2 * C48395 + ae * C48396 +
              C48107 * (C48358 + ae * C48107 * C48373 +
                        C48107 * (ae * C48373 + C48107 * C48238 * C48176)))) /
        C47867;
    const double C18045 = C48890 * C3661;
    const double C21287 = C49229 * C3661;
    const double C35063 = C23685 * C3661;
    const double C18043 = C48890 * C3655;
    const double C21291 = C49229 * C3655;
    const double C35067 = C23685 * C3655;
    const double C48465 = C48458 + C48459;
    const double C48425 = C48422 + C48423;
    const double C48185 = C48173 + C48183;
    const double C48184 = C48175 + C48182;
    const double C48354 = C48156 + C48353;
    const double C48409 = C48107 * C48407;
    const double C48433 = C48429 + C48430;
    const double C9183 = C48890 * C1671;
    const double C11849 = C48900 * C1671;
    const double C24259 = C48900 * C1671;
    const double C11997 = C48900 * C1854;
    const double C14344 = C48890 * C1854;
    const double C24407 = C48900 * C1854;
    const double C48363 = C48360 + C48362;
    const double C48402 = C48399 + C48400;
    const double C10739 = C48890 * C10288;
    const double C48453 = C48107 * C48451;
    const double C48473 = C48470 + C48471;
    const double C48274 = C48220 + C48273;
    const double C48384 = C48226 + C48383;
    const double C48410 = C48408 * C48331;
    const double C48435 = C48226 + C48431;
    const double C48378 = C48375 + C48377;
    const double C48403 = C48366 + C48401;
    const double C48454 = C48107 * C48452;
    const double C48474 = C48468 + C48472;
    const double C136 = (4 * (2 * C48129 + C48108 * C48141) +
                         C48108 * (3 * C48141 + C48108 * C48161)) /
                        C47862;
    const double C239 = (C48238 * (3 * C48141 + C48108 * C48161)) / C47862;
    const double C530 =
        (2 * C48129 + C48108 * C48141 + C48161 * C48287) / C47862;
    const double C9451 =
        (5 * (3 * C48654 + C48238 * C48671) +
         C48238 * (4 * C48671 +
                   C48238 * (3 * C48669 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287))))) /
        C47862;
    const double C9548 =
        (C48107 * (4 * C48671 +
                   C48238 * (3 * C48669 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287)))) +
         (4 * (2 * C48624 + C48238 * C48675) +
          C48238 *
              (3 * C48675 + C48238 * (2 * C48238 * C48199 +
                                      C48238 * (C48199 + C48219 * C48287)))) *
             ae) /
        C47862;
    const double C48268 = C48229 * ae;
    const double C48502 = C48108 * C48229;
    const double C48610 = C48238 * C48229;
    const double C2311 =
        (C48141 + C48157 * C48287 +
         C48107 * (C48107 * (C48157 + C48181 * C48287) + C48607 * ae) +
         C48107 * C48607 * ae) /
        C47862;
    const double C1663 = 3 * (C48489 + C48205 * C48287) +
                         C48238 * (2 * C48595 + C48238 * C48607);
    const double C1846 = C48107 * (2 * C48595 + C48238 * C48607);
    const double C2299 = C48489 + C48205 * C48287 + C48607 * C48331;
    const double C3654 = 3 * (C48489 + C48205 * C48331) +
                         C48107 * (2 * C48648 + C48107 * C48651);
    const double C48698 = C48694 + C48697;
    const double C17947 = 3 * (C48593 + C48627 * C48331) +
                          C48107 * (2 * C48725 + C48107 * C48730);
    const double C48757 = C48753 + C48755;
    const double C48690 = C48238 * C48689;
    const double C11164 = 3 * (C48601 + C48675 * C48331) +
                          C48107 * (2 * C48717 + C48107 * C48720);
    const double C48774 = C48768 + C48772;
    const double C48793 = C48107 * C48791;
    const double C9146 = (4 * (2 * C48298 + C48238 * C48305) +
                          C48238 * (3 * C48305 + C48238 * C48370)) /
                         C47862;
    const double C9300 = (C48107 * (3 * C48305 + C48238 * C48370)) / C47862;
    const double C9810 =
        (2 * C48298 + C48238 * C48305 + C48370 * C48331) / C47862;
    const double C18291 = C48890 * C11165;
    const double C18036 = (4 * (2 * C48328 + C48107 * C48334) +
                           C48107 * (3 * C48334 + C48107 * C48426)) /
                          C47862;
    const double C49050 = C49045 - C49049;
    const double C49307 = C49283 / C47862;
    const double C49057 = C49053 - C49056;
    const double C49321 = C49310 / C47868;
    const double C47908 = C47906 / C47862;
    const double C11465 = C11420 + C11421;
    const double C11463 = C11416 + C11417;
    const double C12967 = C12954 + C12955;
    const double C12965 = C12950 + C12951;
    const double C47896 = C47892 + C48900;
    const double C47923 = C47920 - C47922;
    const double C7762 = C47920 + (0 * ae) / C47862;
    const double C47895 = C48890 - C47891;
    const double C9193 = C9170 + C9171;
    const double C9192 = C9168 + C9169;
    const double C9191 = C9166 + C9167;
    const double C9189 = C9162 + C9163;
    const double C9188 = C9160 + C9161;
    const double C9187 = C9158 + C9159;
    const double C9186 = C9156 + C9157;
    const double C9185 = C9154 + C9155;
    const double C9184 = C9152 + C9153;
    const double C9574 = C9565 + C9566;
    const double C9573 = C9563 + C9564;
    const double C9572 = C9561 + C9562;
    const double C9571 = C9559 + C9560;
    const double C9569 = C9555 + C9556;
    const double C10114 = C10083 + C10084;
    const double C10113 = C10081 + C10082;
    const double C10312 = C10301 + C10302;
    const double C10311 = C10299 + C10300;
    const double C10310 = C10297 + C10298;
    const double C10309 = C10295 + C10296;
    const double C10308 = C10293 + C10294;
    const double C10307 = C10291 + C10292;
    const double C10757 = C10748 + C10749;
    const double C10756 = C10746 + C10747;
    const double C11177 = C11174 + C11175;
    const double C11176 = C11172 + C11173;
    const double C23875 = C23830 + C23831;
    const double C23873 = C23826 + C23827;
    const double C25405 = C25376 + C25377;
    const double C25403 = C25372 + C25373;
    const double C26840 = C48895 * C533;
    const double C26834 = C48895 * C523;
    const double C26828 = C48895 * C254;
    const double C26822 = C48895 * C247;
    const double C26816 = C48895 * C532;
    const double C26810 = C48895 * C522;
    const double C26804 = C48895 * C255;
    const double C26798 = C48895 * C248;
    const double C27284 = C48895 * C1164;
    const double C27278 = C48895 * C1169;
    const double C27465 = C48895 * C624;
    const double C27459 = C48895 * C634;
    const double C27453 = C48895 * C1398;
    const double C27447 = C48895 * C1403;
    const double C28227 = C48895 * C635;
    const double C28221 = C48895 * C625;
    const double C28451 = C48895 * C362;
    const double C28445 = C48895 * C355;
    const double C28439 = C48895 * C363;
    const double C28433 = C48895 * C356;
    const double C29015 = C48895 * C2300;
    const double C29009 = C48895 * C2312;
    const double C29573 = C48895 * C875;
    const double C29567 = C48895 * C885;
    const double C37089 = C48895 * C886;
    const double C37083 = C48895 * C876;
    const double C37917 = C48895 * C2739;
    const double C37911 = C48895 * C2744;
    const double C49228 = C48895 * C48885;
    const double C49270 = C49233 + C48895;
    const double C7943 = C49303 * C253;
    const double C7937 = C49303 * C246;
    const double C7931 = C49303 * C533;
    const double C7925 = C49303 * C523;
    const double C7919 = C49303 * C254;
    const double C7913 = C49303 * C247;
    const double C8395 = C49303 * C1163;
    const double C8389 = C49303 * C1168;
    const double C8576 = C49303 * C625;
    const double C8570 = C49303 * C635;
    const double C8564 = C49303 * C1397;
    const double C8558 = C49303 * C1402;
    const double C15658 = C49303 * C361;
    const double C15652 = C49303 * C354;
    const double C15646 = C49303 * C886;
    const double C15640 = C49303 * C876;
    const double C15634 = C49303 * C362;
    const double C15628 = C49303 * C355;
    const double C16530 = C49303 * C2738;
    const double C16524 = C49303 * C2743;
    const double C26830 = C48903 * C253;
    const double C26824 = C48903 * C246;
    const double C26818 = C48903 * C533;
    const double C26812 = C48903 * C523;
    const double C26806 = C48903 * C254;
    const double C26800 = C48903 * C247;
    const double C27282 = C48903 * C1163;
    const double C27276 = C48903 * C1168;
    const double C27463 = C48903 * C625;
    const double C27457 = C48903 * C635;
    const double C27451 = C48903 * C1397;
    const double C27445 = C48903 * C1402;
    const double C28453 = C48903 * C361;
    const double C28447 = C48903 * C354;
    const double C28441 = C48903 * C362;
    const double C28435 = C48903 * C355;
    const double C29571 = C48903 * C876;
    const double C29565 = C48903 * C886;
    const double C37915 = C48903 * C2738;
    const double C37909 = C48903 * C2743;
    const double C49236 = C48903 / C47868;
    const double C49232 = C48903 * C48885;
    const double C3784 = C49317 - (C48895 * C48886) / C47862;
    const double C48040 = C48038 / C47862;
    const double C48013 = C49007 - C48009;
    const double C48022 = C48018 + C49094;
    const double C48050 = C48047 - C48049;
    const double C49260 = C49090 * C49084;
    const double C49298 = C49262 + C49090;
    const double C49264 = C49097 / C47868;
    const double C49261 = C49097 * C49084;
    const double C20285 = C49323 - (C49090 * C49086) / C47862;
    const double C1222 = C1176 + C1177;
    const double C11475 = C11440 + C11441;
    const double C23885 = C23850 + C23851;
    const double C2797 = C2751 + C2752;
    const double C12969 = C12958 + C12959;
    const double C25411 = C25388 + C25389;
    const double C9194 = C9172 + C9173;
    const double C11467 = C11424 + C11425;
    const double C23877 = C23834 + C23835;
    const double C10117 = C10095 + C10096;
    const double C12030 = C12016 + C12017;
    const double C24440 = C24426 + C24427;
    const double C10313 = C10303 + C10304;
    const double C14089 = C14083 + C14084;
    const double C25407 = C25380 + C25381;
    const double C145 =
        (4 * (2 * C48140 + ae * C48141 + C48108 * C48160) +
         ae * (3 * C48141 + C48108 * C48161) +
         C48108 * (3 * C48160 + ae * C48161 +
                   C48108 * (2 * C48156 + ae * C48157 +
                             C48108 * (C48152 + ae * C48108 * C48153 +
                                       C48108 * (ae * C48153 +
                                                 C48108 * std::pow(C48112, 7) *
                                                     bs[7] * C48118))))) /
        C47867;
    const double C252 =
        ((yP - yQ) * (2 * C48140 + ae * C48141 + C48108 * C48160)) / C47867;
    const double C360 =
        (ae * (2 * (C48108 * C48211 + C48210 * ae) +
               C48108 * (C48211 + C48108 * C48207 + C48202 * ae) +
               (C48210 + C48198 * C48133) * ae) +
         C48107 * (2 * C48140 + ae * C48141 + C48108 * C48160)) /
        C47867;
    const double C534 = (C48126 + ae * C48129 + C48108 * C48140 +
                         C48160 * std::pow(yP - yQ, 2)) /
                        C47867;
    const double C636 =
        (ae * C48238 * (C48211 + C48108 * C48207 + C48202 * ae) +
         C48107 * C48238 * C48160) /
        C47867;
    const double C9461 = C9457 + C9458;
    const double C48743 = C48741 + C48736;
    const double C1225 = C1182 + C1183;
    const double C11477 = C11444 + C11445;
    const double C23887 = C23854 + C23855;
    const double C2800 = C2757 + C2758;
    const double C12971 = C12962 + C12963;
    const double C25413 = C25392 + C25393;
    const double C9195 = C9174 + C9175;
    const double C11469 = C11428 + C11429;
    const double C23879 = C23838 + C23839;
    const double C10118 = C10097 + C10098;
    const double C12028 = C12012 + C12013;
    const double C24438 = C24422 + C24423;
    const double C10314 = C10305 + C10306;
    const double C14087 = C14079 + C14080;
    const double C25409 = C25384 + C25385;
    const double C9197 = C9178 + C9179;
    const double C11473 = C11436 + C11437;
    const double C23883 = C23846 + C23847;
    const double C3660 =
        (3 * (C48141 + C48107 * C48650 + C48648 * ae) +
         C48107 * (2 * C48650 +
                   C48107 * (C48157 + C48107 * (C48107 * C48181 + C48267) +
                             C48107 * C48225 * ae) +
                   C48651 * ae) +
         (2 * C48648 + C48107 * C48651) * ae) /
        C47862;
    const double C3667 = C1008 * C2734;
    const double C20560 = C47888 * C2734;
    const double C34336 = C23692 * C2734;
    const double C347 = (C48107 * (3 * C48141 + C48108 * C48161) +
                         (3 * C48489 + C48108 * C48499) * ae) /
                        C47862;
    const double C632 =
        (C48107 * C48238 * C48161 + C48238 * C48499 * ae) / C47862;
    const double C883 =
        (2 * C48129 + C48108 * C48141 +
         C48107 * (C48107 * C48161 + C48499 * ae) + C48107 * C48499 * ae) /
        C47862;
    const double C124 = 4 * (2 * C48487 + C48108 * C48489) +
                        C48108 * (3 * C48489 + C48108 * C48499);
    const double C233 = C48238 * (3 * C48489 + C48108 * C48499);
    const double C341 = C48107 * (3 * C48489 + C48108 * C48499);
    const double C520 = 2 * C48487 + C48108 * C48489 + C48499 * C48287;
    const double C622 = C48107 * C48238 * C48499;
    const double C873 = 2 * C48487 + C48108 * C48489 + C48499 * C48331;
    const double C1158 =
        2 * C48238 * C48499 + C48238 * (C48499 + C48229 * C48287);
    const double C1392 = C48107 * (C48499 + C48229 * C48287);
    const double C2733 =
        2 * C48107 * C48499 + C48107 * (C48499 + C48229 * C48331);
    const double C3243 = C1008 * C2305;
    const double C18878 = C47888 * C2305;
    const double C25162 = C23692 * C2305;
    const double C3237 = C1008 * C2296;
    const double C18874 = C47888 * C2296;
    const double C25158 = C23692 * C2296;
    const double C48756 = C48143 + C48754;
    const double C10111 = C9060 * C2310;
    const double C13517 = C47888 * C2310;
    const double C25758 = C23692 * C2310;
    const double C9180 = C9060 * C1662;
    const double C11852 = C47888 * C1662;
    const double C24262 = C23692 * C1662;
    const double C12000 = C47888 * C1845;
    const double C14341 = C9060 * C1845;
    const double C24410 = C23692 * C1845;
    const double C10109 = C9060 * C2298;
    const double C13521 = C47888 * C2298;
    const double C25762 = C23692 * C2298;
    const double C17949 =
        (3 * (C48626 + C48107 * C48729 + C48725 * ae) +
         C48107 * (2 * C48729 +
                   C48107 * (C48723 +
                             C48107 * (C48107 * C48238 * C48108 * C48177 +
                                       C48726 * ae) +
                             C48107 * C48726 * ae) +
                   C48730 * ae) +
         (2 * C48725 + C48107 * C48730) * ae) /
        C47862;
    const double C18052 = C9060 * C3659;
    const double C21284 = C47888 * C3659;
    const double C35060 = C23692 * C3659;
    const double C18050 = C9060 * C3653;
    const double C21288 = C47888 * C3653;
    const double C35064 = C23692 * C3653;
    const double C48231 = C48230 + C48221;
    const double C2316 =
        (C48140 + C48156 * C48287 + ae * C48107 * C48308 +
         C48107 * (ae * C48308 + C48107 * (C48156 + C48180 * C48287))) /
        C47867;
    const double C1665 = (3 * (C48249 + C48207 * C48287) +
                          C48238 * (2 * C48300 + C48238 * C48308)) /
                         C47862;
    const double C1848 = (C48107 * (2 * C48300 + C48238 * C48308)) / C47862;
    const double C2307 = (C48249 + C48207 * C48287 + C48308 * C48331) / C47862;
    const double C3656 = (3 * (C48249 + C48207 * C48331) +
                          C48107 * (2 * C48336 + C48107 * C48341)) /
                         C47862;
    const double C48436 = C48156 + C48432;
    const double C48792 = C48790 + C48785;
    const double C9811 =
        (2 * C48623 + C48238 * C48654 +
         C48107 * (C48107 * C48671 + C48680 * ae) + C48107 * C48680 * ae) /
        C47862;
    const double C10735 =
        (2 * (C48107 * C48671 + C48680 * ae) +
         C48107 * (C48671 +
                   C48107 * (C48107 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287)) +
                             C48689 * ae) +
                   C48107 * C48689 * ae) +
         (C48680 + C48689 * C48331) * ae) /
        C47862;
    const double C9143 = 4 * (2 * C48591 + C48238 * C48601) +
                         C48238 * (3 * C48601 + C48238 * C48680);
    const double C9297 = C48107 * (3 * C48601 + C48238 * C48680);
    const double C9808 = 2 * C48591 + C48238 * C48601 + C48680 * C48331;
    const double C10733 =
        2 * C48107 * C48680 + C48107 * (C48680 + C48689 * C48331);
    const double C11168 =
        (3 * (C48654 + C48107 * C48719 + C48717 * ae) +
         C48107 * (2 * C48719 +
                   C48107 * (C48669 +
                             C48107 * (C48107 * (C48153 + C48177 * C48287) +
                                       C48687 * ae) +
                             C48107 * C48687 * ae) +
                   C48720 * ae) +
         (2 * C48717 + C48107 * C48720) * ae) /
        C47862;
    const double C18292 = C9060 * C11166;
    const double C18290 = C9060 * C11163;
    const double C48773 = C48666 + C48771;
    const double C18033 = 4 * (2 * C48636 + C48107 * C48639) +
                          C48107 * (3 * C48639 + C48107 * C48742);
    const double C48254 = C48253 + C48252;
    const double C3242 = C1001 * C2313;
    const double C10102 = C48890 * C2313;
    const double C13528 = C48900 * C2313;
    const double C16108 = C49303 * C2313;
    const double C18877 = C49229 * C2313;
    const double C25161 = C23685 * C2313;
    const double C25147 = C48900 * C2313;
    const double C29007 = C48903 * C2313;
    const double C19627 = C48900 * C3230;
    const double C21541 = C48890 * C3230;
    const double C25969 = C48900 * C3230;
    const double C3236 = C1001 * C2301;
    const double C10100 = C48890 * C2301;
    const double C13532 = C48900 * C2301;
    const double C16102 = C49303 * C2301;
    const double C18873 = C49229 * C2301;
    const double C25157 = C23685 * C2301;
    const double C25143 = C48900 * C2301;
    const double C29013 = C48903 * C2301;
    const double C19631 = C48900 * C3224;
    const double C21539 = C48890 * C3224;
    const double C25973 = C48900 * C3224;
    const double C3662 =
        (3 * (C48140 + ae * C48336 + C48107 * C48340) +
         ae * (2 * C48336 + C48107 * C48341) +
         C48107 * (2 * C48340 + ae * C48341 +
                   C48107 * (C48156 + ae * C48107 * C48226 +
                             C48107 * (ae * C48226 + C48107 * C48180)))) /
        C47867;
    const double C10122 = C10107 + C10108;
    const double C12024 = C12004 + C12005;
    const double C24434 = C24414 + C24415;
    const double C18057 = C18048 + C18049;
    const double C20184 = C20176 + C20177;
    const double C26528 = C26520 + C26521;
    const double C9196 = C9176 + C9177;
    const double C11471 = C11432 + C11433;
    const double C23881 = C23842 + C23843;
    const double C10121 = C10105 + C10106;
    const double C12026 = C12008 + C12009;
    const double C24436 = C24418 + C24419;
    const double C18056 = C18046 + C18047;
    const double C20186 = C20180 + C20181;
    const double C26530 = C26524 + C26525;
    const double C10116 = C10091 + C10092;
    const double C9567 = C9551 + C9552;
    const double C9190 = C9164 + C9165;
    const double C9570 = C9557 + C9558;
    const double C10115 = C10089 + C10090;
    const double C10755 = C10740 + C10741;
    const double C18293 = C48890 * C11169;
    const double C18055 = C18044 + C18045;
    const double C18054 = C18042 + C18043;
    const double C18039 =
        (4 * (2 * C48332 + ae * C48334 + C48107 * C48425) +
         ae * (3 * C48334 + C48107 * C48426) +
         C48107 *
             (3 * C48425 + ae * C48426 +
              C48107 * (2 * C48419 + ae * C48421 +
                        C48107 * (C48152 + ae * C48107 * C48220 +
                                  C48107 * (ae * C48220 + C48107 * C48176))))) /
        C47867;
    const double C48187 = C48108 * C48185;
    const double C1166 =
        (2 * C48238 * C48161 + C48238 * (C48161 + C48185 * C48287)) / C47862;
    const double C1400 = (C48107 * (C48161 + C48185 * C48287) +
                          (C48499 + C48229 * C48287) * ae) /
                         C47862;
    const double C48186 = C48108 * C48184;
    const double C48325 = C48238 * C48184;
    const double C48345 = C48107 * C48184;
    const double C1167 = (2 * C48238 * C48160 +
                          C48238 * (C48160 + C48184 * std::pow(C48238, 2))) /
                         C47867;
    const double C1672 =
        (3 * (C48160 + C48184 * C48287) +
         C48238 * (2 * C48238 * C48184 +
                   C48238 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47867;
    const double C9150 =
        (4 * (2 * C48322 + C48238 * C48354) +
         C48238 * (3 * C48354 +
                   C48238 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47867;
    const double C9304 =
        (ae * (3 * C48308 +
               C48238 * (2 * C48323 + C48238 * (C48226 + C48272 * C48287))) +
         C48107 * (3 * C48354 +
                   C48238 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47867;
    const double C48411 = C48406 + C48409;
    const double C48437 = C48107 * C48433;
    const double C9199 = C9182 + C9183;
    const double C11860 = C11848 + C11849;
    const double C24270 = C24258 + C24259;
    const double C12020 = C11996 + C11997;
    const double C14346 = C14343 + C14344;
    const double C24430 = C24406 + C24407;
    const double C9452 =
        (5 * (3 * C48351 + C48238 * C48363) +
         C48238 * (4 * C48363 +
                   C48238 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47867;
    const double C9549 =
        (ae * (4 * (2 * C48320 + C48238 * C48366) +
               C48238 * (3 * C48366 +
                         C48238 * (2 * C48238 * C48220 +
                                   C48238 * (C48220 + C48269 * C48287)))) +
         C48107 * (4 * C48363 +
                   C48238 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47867;
    const double C9814 = (2 * C48319 + C48238 * C48351 + ae * C48107 * C48370 +
                          C48107 * (ae * C48370 + C48107 * C48363)) /
                         C47867;
    const double C10754 = C10738 + C10739;
    const double C48455 = C48450 + C48453;
    const double C48475 = C48107 * C48473;
    const double C48275 = C48274 + C48270;
    const double C48385 = C48238 * C48384;
    const double C10289 =
        (2 * (ae * C48308 + C48107 * C48354) + ae * (C48308 + C48384 * C48331) +
         C48107 * (C48354 + ae * C48107 * C48384 +
                   C48107 * (ae * C48384 +
                             C48107 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47867;
    const double C10286 =
        (2 * C48107 * C48308 + C48107 * (C48308 + C48384 * C48331)) / C47862;
    const double C48412 = C48323 + C48410;
    const double C48438 = C48107 * C48435;
    const double C48379 = C48238 * C48378;
    const double C10736 =
        (2 * (ae * C48370 + C48107 * C48363) + ae * (C48370 + C48378 * C48331) +
         C48107 * (C48363 + ae * C48107 * C48378 +
                   C48107 * (ae * C48378 +
                             C48107 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47867;
    const double C10734 =
        (2 * C48107 * C48370 + C48107 * (C48370 + C48378 * C48331)) / C47862;
    const double C11170 =
        (3 * (C48351 + ae * C48398 + C48107 * C48402) +
         ae * (2 * C48398 + C48107 * C48403) +
         C48107 * (2 * C48402 + ae * C48403 +
                   C48107 * (C48361 + ae * C48107 * C48376 +
                             C48107 * (ae * C48376 +
                                       C48107 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47867;
    const double C11167 = (3 * (C48305 + C48366 * C48331) +
                           C48107 * (2 * C48398 + C48107 * C48403)) /
                          C47862;
    const double C48456 = C48448 + C48454;
    const double C48476 = C48107 * C48474;
    const double C1218 = C1008 * C530;
    const double C2741 =
        (2 * (C48107 * C48161 + C48499 * ae) +
         C48107 * (C48161 + C48107 * (C48107 * C48185 + C48268) +
                   C48107 * C48229 * ae) +
         (C48499 + C48229 * C48331) * ae) /
        C47862;
    const double C48503 = C48501 + C48502;
    const double C2582 =
        (C48238 * C48161 + C48107 * (C48107 * C48238 * C48185 + C48610 * ae) +
         C48107 * C48610 * ae) /
        C47862;
    const double C2580 = C48238 * C48499 + C48610 * C48331;
    const double C10074 =
        (2 * C48626 + C48238 * C48659 +
         C48107 * (C48107 * (2 * C48238 * C48165 +
                             C48238 * (C48165 + C48108 * C48177 * C48287)) +
                   C48698 * ae) +
         C48107 * C48698 * ae) /
        C47862;
    const double C9144 = 4 * (2 * C48593 + C48238 * C48604) +
                         C48238 * (3 * C48604 + C48238 * C48698);
    const double C9298 = C48107 * (3 * C48604 + C48238 * C48698);
    const double C10072 = 2 * C48593 + C48238 * C48604 + C48698 * C48331;
    const double C18034 = 4 * (2 * C48642 + C48107 * C48645) +
                          C48107 * (3 * C48645 + C48107 * C48757);
    const double C48691 = C48683 + C48690;
    const double C18285 = 4 * (2 * C48709 + C48107 * C48712) +
                          C48107 * (3 * C48712 + C48107 * C48774);
    const double C48795 = C48783 + C48793;
    const double C9460 = C48890 * C9146;
    const double C9554 = C48890 * C9300;
    const double C10575 = C48890 * C9810;
    const double C18529 = C48890 * C18036;
    const double C49254 = C49050 * C49044;
    const double C49292 = C49256 + C49050;
    const double C49258 = C49057 / C47868;
    const double C49255 = C49057 * C49044;
    const double C11277 = C49321 - (C49050 * C49046) / C47862;
    const double C47911 = C47902 - C47908;
    const double C47901 = C47896 * be;
    const double C26843 = C47923 * C530;
    const double C26831 = C47923 * C240;
    const double C26825 = C47923 * C234;
    const double C26819 = C47923 * C529;
    const double C26813 = C47923 * C519;
    const double C26807 = C47923 * C241;
    const double C26801 = C47923 * C235;
    const double C27279 = C47923 * C1155;
    const double C27273 = C47923 * C1159;
    const double C27460 = C47923 * C621;
    const double C27454 = C47923 * C631;
    const double C27448 = C47923 * C1389;
    const double C27442 = C47923 * C1393;
    const double C28454 = C47923 * C348;
    const double C28448 = C47923 * C342;
    const double C28442 = C47923 * C349;
    const double C28436 = C47923 * C343;
    const double C29010 = C47923 * C2296;
    const double C29004 = C47923 * C2305;
    const double C29568 = C47923 * C872;
    const double C29562 = C47923 * C882;
    const double C37912 = C47923 * C2730;
    const double C37906 = C47923 * C2734;
    const double C117 =
        (C47923 / C47868 + (0 * ae) / C47862) / C47868 - (0 * be) / C47862;
    const double C3793 = C47923 / C47868 - (0 * be) / C47862;
    const double C22514 = C47923 / C47868 + (0 * ae) / C47862;
    const double C7956 = C7762 * C530;
    const double C7944 = C7762 * C240;
    const double C7938 = C7762 * C234;
    const double C7932 = C7762 * C529;
    const double C7926 = C7762 * C519;
    const double C7920 = C7762 * C241;
    const double C7914 = C7762 * C235;
    const double C8392 = C7762 * C1155;
    const double C8386 = C7762 * C1159;
    const double C8573 = C7762 * C621;
    const double C8567 = C7762 * C631;
    const double C8561 = C7762 * C1389;
    const double C8555 = C7762 * C1393;
    const double C15659 = C7762 * C348;
    const double C15653 = C7762 * C342;
    const double C15647 = C7762 * C882;
    const double C15641 = C7762 * C872;
    const double C15635 = C7762 * C349;
    const double C15629 = C7762 * C343;
    const double C16109 = C7762 * C2305;
    const double C16103 = C7762 * C2296;
    const double C16527 = C7762 * C2730;
    const double C16521 = C7762 * C2734;
    const double C47900 = C47895 * ae;
    const double C1006 =
        ((-C47863 / C47862) / C47868 - (C47881 * be) / C47862) / C47868 -
        ((C47860 * ((-C47870) / C47868 - (C47895 * be) / C47862) + C23685) *
         be) /
            C47862 +
        (-C47882 / C47862) / C47868 - (0 * be) / C47862;
    const double C1007 =
        ((-C47870) / C47868 - (C47895 * be) / C47862) / C47868 -
        ((C47860 * ((-C47882 / C47862) / C47868 - (0 * be) / C47862) + C48900) *
         be) /
            C47862;
    const double C23691 = (-C47870) / C47868 - (C47895 * be) / C47862;
    const double C9209 = C9193 * C49007;
    const double C10094 = C9193 * C49320;
    const double C14332 = C9193 * C49252;
    const double C16810 = C9193 * C15326;
    const double C41397 = C9193 * C31302;
    const double C46862 = C9193 * C49090;
    const double C9208 = C9192 * C118;
    const double C10093 = C9192 * C2431;
    const double C14331 = C9192 * C4966;
    const double C16809 = C9192 * C15329;
    const double C9207 = C9191 * C49007;
    const double C14711 = C9191 * C49252;
    const double C41770 = C9191 * C31302;
    const double C9205 = C9189 * C49007;
    const double C10578 = C9189 * C49320;
    const double C14328 = C9189 * C49252;
    const double C17228 = C9189 * C15326;
    const double C41393 = C9189 * C31302;
    const double C47280 = C9189 * C49090;
    const double C9204 = C9188 * C118;
    const double C10579 = C9188 * C2431;
    const double C14327 = C9188 * C4966;
    const double C17229 = C9188 * C15329;
    const double C9203 = C9187 * C49007;
    const double C10086 = C9187 * C49320;
    const double C14324 = C9187 * C49252;
    const double C16804 = C9187 * C15326;
    const double C41389 = C9187 * C31302;
    const double C46856 = C9187 * C49090;
    const double C9202 = C9186 * C118;
    const double C10085 = C9186 * C2431;
    const double C14323 = C9186 * C4966;
    const double C16803 = C9186 * C15329;
    const double C9201 = C9185 * C49007;
    const double C10078 = C9185 * C49320;
    const double C14320 = C9185 * C49252;
    const double C16798 = C9185 * C15326;
    const double C41385 = C9185 * C31302;
    const double C46850 = C9185 * C49090;
    const double C9200 = C9184 * C118;
    const double C10077 = C9184 * C2431;
    const double C14319 = C9184 * C4966;
    const double C16797 = C9184 * C15329;
    const double C9582 = C9574 * C118;
    const double C10079 = C9574 * C2432;
    const double C10753 = C9574 * C2431;
    const double C14321 = C9574 * C4967;
    const double C14858 = C9574 * C4966;
    const double C16799 = C9574 * C15330;
    const double C17391 = C9574 * C15329;
    const double C41386 = C9574 * C31305;
    const double C9581 = C9573 * C49007;
    const double C10080 = C9573 * C49309;
    const double C10752 = C9573 * C49320;
    const double C14322 = C9573 * C49094;
    const double C14857 = C9573 * C49252;
    const double C16800 = C9573 * C15327;
    const double C17390 = C9573 * C15326;
    const double C41387 = C9573 * C49094;
    const double C41916 = C9573 * C31302;
    const double C46852 = C9573 * C49097;
    const double C47442 = C9573 * C49090;
    const double C9580 = C9572 * C118;
    const double C10087 = C9572 * C2432;
    const double C10745 = C9572 * C2431;
    const double C14325 = C9572 * C4967;
    const double C14854 = C9572 * C4966;
    const double C16805 = C9572 * C15330;
    const double C17385 = C9572 * C15329;
    const double C41390 = C9572 * C31305;
    const double C9579 = C9571 * C49007;
    const double C10088 = C9571 * C49309;
    const double C10744 = C9571 * C49320;
    const double C14326 = C9571 * C49094;
    const double C14853 = C9571 * C49252;
    const double C16806 = C9571 * C15327;
    const double C17384 = C9571 * C15326;
    const double C41391 = C9571 * C49094;
    const double C41912 = C9571 * C31302;
    const double C46858 = C9571 * C49097;
    const double C47436 = C9571 * C49090;
    const double C9577 = C9569 * C49007;
    const double C10576 = C9569 * C49309;
    const double C14330 = C9569 * C49094;
    const double C14849 = C9569 * C49252;
    const double C17226 = C9569 * C15327;
    const double C41395 = C9569 * C49094;
    const double C41908 = C9569 * C31302;
    const double C47278 = C9569 * C49097;
    const double C10126 = C10114 * C49287;
    const double C10750 = C10114 * C49309;
    const double C14855 = C10114 * C49094;
    const double C16802 = C10114 * C49287;
    const double C17388 = C10114 * C15327;
    const double C41914 = C10114 * C49094;
    const double C46854 = C10114 * C36785;
    const double C47440 = C10114 * C49097;
    const double C10125 = C10113 * C2433;
    const double C10751 = C10113 * C2432;
    const double C14856 = C10113 * C4967;
    const double C16801 = C10113 * C15331;
    const double C17389 = C10113 * C15330;
    const double C41915 = C10113 * C31305;
    const double C10761 = C10757 * C2433;
    const double C17387 = C10757 * C15331;
    const double C10760 = C10756 * C49287;
    const double C17386 = C10756 * C49287;
    const double C21531 = C10756 * C49300;
    const double C42511 = C10756 * C49300;
    const double C47438 = C10756 * C36785;
    const double C49266 = C49228 / C47862;
    const double C49304 = C49270 / C47868;
    const double C49305 = C49272 + C49236;
    const double C3786 = C49236 - C48901 / C47874;
    const double C49269 = C49232 / C47862;
    const double C3950 = C3784 * C254;
    const double C3942 = C3784 * C247;
    const double C3934 = C3784 * C255;
    const double C3926 = C3784 * C248;
    const double C4346 = C3784 * C522;
    const double C4338 = C3784 * C532;
    const double C4500 = C3784 * C624;
    const double C4492 = C3784 * C634;
    const double C5254 = C3784 * C362;
    const double C5246 = C3784 * C355;
    const double C5238 = C3784 * C363;
    const double C5230 = C3784 * C356;
    const double C6008 = C3784 * C875;
    const double C6000 = C3784 * C885;
    const double C48042 = C48037 - C48040;
    const double C48017 = C48013 * ae;
    const double C31304 = (-C47999) / C47868 - (C48013 * be) / C47862;
    const double C48026 = C48022 * be;
    const double C46853 = C10113 * C48050;
    const double C47439 = C10757 * C48050;
    const double C17864 =
        (C48050 / C47868 + (0 * ae) / C47862) / C47868 - (0 * be) / C47862;
    const double C20292 = C48050 / C47868 - (0 * be) / C47862;
    const double C34068 = C48050 / C47868 + (0 * ae) / C47862;
    const double C49295 = C49260 / C47862;
    const double C49314 = C49298 / C47868;
    const double C49315 = C49299 + C49264;
    const double C20287 = C49264 - C49095 / C47874;
    const double C49297 = C49261 / C47862;
    const double C21533 = C9193 * C20285;
    const double C21525 = C9185 * C20285;
    const double C21910 = C9187 * C20285;
    const double C22048 = C9573 * C20285;
    const double C9210 = C9194 * C118;
    const double C10103 = C9194 * C2431;
    const double C14335 = C9194 * C4966;
    const double C16815 = C9194 * C15329;
    const double C10129 = C10117 * C2432;
    const double C14333 = C10117 * C4967;
    const double C16811 = C10117 * C15330;
    const double C41398 = C10117 * C31305;
    const double C1207 = C49271 * C252;
    const double C3940 = C49288 * C252;
    const double C7945 = C49271 * C252;
    const double C22661 = C49288 * C252;
    const double C26832 = C26643 * C252;
    const double C2782 = C49271 * C360;
    const double C5244 = C49288 * C360;
    const double C15660 = C49271 * C360;
    const double C28455 = C26643 * C360;
    const double C31582 = C49288 * C360;
    const double C1217 = C1001 * C534;
    const double C1195 = C49271 * C534;
    const double C7955 = C49303 * C534;
    const double C7933 = C49271 * C534;
    const double C11453 = C48900 * C534;
    const double C23863 = C48900 * C534;
    const double C26842 = C48903 * C534;
    const double C26820 = C26643 * C534;
    const double C1870 = C49271 * C636;
    const double C6366 = C1001 * C636;
    const double C8568 = C49271 * C636;
    const double C12737 = C48900 * C636;
    const double C25155 = C48900 * C636;
    const double C27455 = C26643 * C636;
    const double C28229 = C48903 * C636;
    const double C39877 = C49303 * C636;
    const double C9463 = C9461 * C49007;
    const double C18035 =
        (4 * (2 * C48638 + C48107 * C48743 + C48639 * ae) +
         C48107 *
             (3 * C48743 +
              C48107 * (2 * C48735 +
                        C48107 * (C48137 + C48107 * (C48107 * C48153 + C48217) +
                                  C48107 * C48199 * ae) +
                        C48737 * ae) +
              C48742 * ae) +
         (3 * C48639 + C48107 * C48742) * ae) /
        C47862;
    const double C9211 = C9195 * C49007;
    const double C10104 = C9195 * C49320;
    const double C14336 = C9195 * C49252;
    const double C16816 = C9195 * C15326;
    const double C41401 = C9195 * C31302;
    const double C46868 = C9195 * C49090;
    const double C10130 = C10118 * C49309;
    const double C14334 = C10118 * C49094;
    const double C16812 = C10118 * C15327;
    const double C41399 = C10118 * C49094;
    const double C46864 = C10118 * C49097;
    const double C9213 = C9197 * C49007;
    const double C14340 = C9197 * C49252;
    const double C41405 = C9197 * C31302;
    const double C6367 = C1008 * C632;
    const double C28230 = C47923 * C632;
    const double C39878 = C7762 * C632;
    const double C2793 = C1008 * C883;
    const double C15671 = C7762 * C883;
    const double C37092 = C47923 * C883;
    const double C1212 = C1008 * C520;
    const double C7950 = C7762 * C520;
    const double C26837 = C47923 * C520;
    const double C6361 = C1008 * C622;
    const double C28224 = C47923 * C622;
    const double C39872 = C7762 * C622;
    const double C2787 = C1008 * C873;
    const double C15665 = C7762 * C873;
    const double C37086 = C47923 * C873;
    const double C48758 = C48756 + C48751;
    const double C48257 = C48108 * C48231;
    const double C48262 = 3 * C48231;
    const double C48302 = C48238 * C48231;
    const double C48344 = ae * C48231;
    const double C48343 = C48107 * C48231;
    const double C638 =
        (ae * C48238 *
             (3 * C48231 +
              C48108 * (2 * C48226 +
                        C48108 * (C48220 +
                                  C48108 * (C48108 * C48167 * C48168 * C48197 +
                                            C48219 * ae) +
                                  C48108 * C48219 * ae) +
                        C48225 * ae) +
              C48229 * ae) +
         C48107 * C48238 *
             (3 * C48184 + ae * C48185 +
              C48108 * (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C10112 = C48890 * C2316;
    const double C13518 = C48900 * C2316;
    const double C25759 = C48900 * C2316;
    const double C9181 = C48890 * C1665;
    const double C11853 = C48900 * C1665;
    const double C24263 = C48900 * C1665;
    const double C12001 = C48900 * C1848;
    const double C14342 = C48890 * C1848;
    const double C24411 = C48900 * C1848;
    const double C10110 = C48890 * C2307;
    const double C13522 = C48900 * C2307;
    const double C25763 = C48900 * C2307;
    const double C18051 = C48890 * C3656;
    const double C21289 = C48900 * C3656;
    const double C35065 = C48900 * C3656;
    const double C48794 = C48107 * C48792;
    const double C10572 = C9060 * C9811;
    const double C9459 = C9060 * C9143;
    const double C9553 = C9060 * C9297;
    const double C10574 = C9060 * C9808;
    const double C18294 = C18290 + C18291;
    const double C48775 = C48773 + C48766;
    const double C18528 = C9060 * C18033;
    const double C887 =
        (C48126 + ae * C48129 + C48108 * C48140 + ae * C48107 * C48254 +
         C48107 * (ae * C48254 + C48107 * C48160)) /
        C47867;
    const double C1401 = (ae * (C48254 + C48231 * C48287) +
                          C48107 * (C48160 + C48184 * C48287)) /
                         C47867;
    const double C2742 = (2 * (ae * C48254 + C48107 * C48160) +
                          ae * (C48254 + C48231 * std::pow(C48107, 2)) +
                          C48107 * (C48160 + ae * C48107 * C48231 +
                                    C48107 * (ae * C48231 + C48107 * C48184))) /
                         C47867;
    const double C130 = (3 * (C48245 + C48108 * C48249 + C48487 * ae) +
                         C48108 * (2 * C48249 + C48108 * C48254 + C48489 * ae) +
                         (2 * C48487 + C48108 * C48489) * ae) /
                        C47862;
    const double C245 =
        (C48238 * (2 * C48249 + C48108 * C48254 + C48489 * ae)) / C47862;
    const double C353 =
        (C48107 * (2 * C48249 + C48108 * C48254 + C48489 * ae)) / C47862;
    const double C524 =
        (C48245 + C48108 * C48249 + C48487 * ae + C48254 * C48287) / C47862;
    const double C626 = (C48107 * C48238 * C48254) / C47862;
    const double C877 =
        (C48245 + C48108 * C48249 + C48487 * ae + C48254 * C48331) / C47862;
    const double C1162 =
        (2 * C48238 * C48254 + C48238 * (C48254 + C48231 * C48287)) / C47862;
    const double C1396 = (C48107 * (C48254 + C48231 * C48287)) / C47862;
    const double C2737 =
        (2 * C48107 * C48254 + C48107 * (C48254 + C48231 * C48331)) / C47862;
    const double C10120 = C10101 + C10102;
    const double C13541 = C13527 + C13528;
    const double C25167 = C25146 + C25147;
    const double C19636 = C19626 + C19627;
    const double C21543 = C21540 + C21541;
    const double C25980 = C25968 + C25969;
    const double C10119 = C10099 + C10100;
    const double C13543 = C13531 + C13532;
    const double C25165 = C25142 + C25143;
    const double C19638 = C19630 + C19631;
    const double C21542 = C21538 + C21539;
    const double C25982 = C25972 + C25973;
    const double C18053 = C48890 * C3662;
    const double C21285 = C48900 * C3662;
    const double C35061 = C48900 * C3662;
    const double C10134 = C10122 * C49309;
    const double C14338 = C10122 * C49094;
    const double C16818 = C10122 * C15327;
    const double C41403 = C10122 * C49094;
    const double C46870 = C10122 * C49097;
    const double C9212 = C9196 * C118;
    const double C14339 = C9196 * C4966;
    const double C10133 = C10121 * C2432;
    const double C14337 = C10121 * C4967;
    const double C16817 = C10121 * C15330;
    const double C41402 = C10121 * C31305;
    const double C10128 = C10116 * C49287;
    const double C10742 = C10116 * C49309;
    const double C14851 = C10116 * C49094;
    const double C16808 = C10116 * C49287;
    const double C17382 = C10116 * C15327;
    const double C41910 = C10116 * C49094;
    const double C46860 = C10116 * C36785;
    const double C47434 = C10116 * C49097;
    const double C9575 = C9567 * C49007;
    const double C14709 = C9567 * C49094;
    const double C41768 = C9567 * C49094;
    const double C9206 = C9190 * C118;
    const double C14712 = C9190 * C4966;
    const double C9578 = C9570 * C118;
    const double C10577 = C9570 * C2432;
    const double C14329 = C9570 * C4967;
    const double C14850 = C9570 * C4966;
    const double C17227 = C9570 * C15330;
    const double C41394 = C9570 * C31305;
    const double C10127 = C10115 * C2433;
    const double C10743 = C10115 * C2432;
    const double C14852 = C10115 * C4967;
    const double C16807 = C10115 * C15331;
    const double C17383 = C10115 * C15330;
    const double C41911 = C10115 * C31305;
    const double C46859 = C10115 * C48050;
    const double C10759 = C10755 * C2433;
    const double C17381 = C10755 * C15331;
    const double C47433 = C10755 * C48050;
    const double C18295 = C18292 + C18293;
    const double C18527 = C48890 * C18039;
    const double C48189 = C48169 + C48187;
    const double C48188 = C48170 + C48186;
    const double C1677 = C49271 * C1167;
    const double C8387 = C49271 * C1167;
    const double C11461 = C48900 * C1167;
    const double C23871 = C48900 * C1167;
    const double C27274 = C26643 * C1167;
    const double C48439 = C48436 + C48437;
    const double C9215 = C9199 * C49007;
    const double C14348 = C14346 * C49094;
    const double C41407 = C14346 * C49094;
    const double C10573 = C48890 * C9814;
    const double C10758 = C10754 * C49287;
    const double C17380 = C10754 * C49287;
    const double C21904 = C10754 * C49300;
    const double C42878 = C10754 * C49300;
    const double C47432 = C10754 * C36785;
    const double C48477 = C48465 + C48475;
    const double C48276 = C48108 * C48275;
    const double C48310 = C48275 * C48287;
    const double C48326 = C48238 * C48275;
    const double C48346 = C48275 * C48331;
    const double C1855 =
        (ae * (2 * C48238 * C48231 + C48238 * (C48231 + C48275 * C48287)) +
         C48107 * (2 * C48238 * C48184 +
                   C48238 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47867;
    const double C48386 = C48382 + C48385;
    const double C17950 =
        (3 * (C48322 + ae * C48405 + C48107 * C48411) +
         ae * (2 * C48405 + C48107 * C48412) +
         C48107 * (2 * C48411 + ae * C48412 +
                   C48107 * (C48407 + ae * C48107 * C48408 +
                             C48107 * (ae * C48408 +
                                       C48107 * C48238 *
                                           (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C17948 = (3 * (C48300 + C48323 * C48331) +
                           C48107 * (2 * C48405 + C48107 * C48412)) /
                          C47862;
    const double C48440 = C48434 + C48438;
    const double C48380 = C48372 + C48379;
    const double C18288 =
        (4 * (2 * C48395 + ae * C48396 + C48107 * C48455) +
         ae * (3 * C48396 + C48107 * C48456) +
         C48107 * (3 * C48455 + ae * C48456 +
                   C48107 * (2 * C48451 + ae * C48452 +
                             C48107 * (C48444 + ae * C48107 * C48445 +
                                       C48107 * (ae * C48445 +
                                                 C48107 * C48238 *
                                                     std::pow(C48110, 8) *
                                                     bs[8] * C48118))))) /
        C47867;
    const double C18286 = (4 * (2 * C48391 + C48107 * C48396) +
                           C48107 * (3 * C48396 + C48107 * C48456)) /
                          C47862;
    const double C48478 = C48463 + C48476;
    const double C125 = 5 * (3 * C48489 + C48108 * C48499) +
                        C48108 * (4 * C48499 + C48108 * C48503);
    const double C238 = C48238 * (4 * C48499 + C48108 * C48503);
    const double C346 = C48107 * (4 * C48499 + C48108 * C48503);
    const double C521 = 3 * C48489 + C48108 * C48499 + C48503 * C48287;
    const double C623 = C48107 * C48238 * C48503;
    const double C874 = 3 * C48489 + C48108 * C48499 + C48503 * C48331;
    const double C9813 =
        (3 * C48654 + C48238 * C48671 +
         C48107 * (C48107 * (3 * C48669 +
                             C48238 * (2 * C48238 * C48153 +
                                       C48238 * (C48153 + C48177 * C48287))) +
                   C48691 * ae) +
         C48107 * C48691 * ae) /
        C47862;
    const double C9449 = 5 * (3 * C48601 + C48238 * C48680) +
                         C48238 * (4 * C48680 + C48238 * C48691);
    const double C9546 = C48107 * (4 * C48680 + C48238 * C48691);
    const double C9809 = 3 * C48601 + C48238 * C48680 + C48691 * C48331;
    const double C18521 = 5 * (3 * C48639 + C48107 * C48742) +
                          C48107 * (4 * C48742 + C48107 * C48795);
    const double C49289 = C49254 / C47862;
    const double C49311 = C49292 / C47868;
    const double C49312 = C49293 + C49258;
    const double C11279 = C49258 - C49055 / C47874;
    const double C49291 = C49255 / C47862;
    const double C47905 = C47901 / C47862;
    const double C26850 = C26807 + C26808;
    const double C26847 = C26801 + C26802;
    const double C28461 = C28442 + C28443;
    const double C28458 = C28436 + C28437;
    const double C3955 = C3793 * C239;
    const double C3947 = C3793 * C233;
    const double C3939 = C3793 * C240;
    const double C3931 = C3793 * C234;
    const double C4339 = C3793 * C520;
    const double C4331 = C3793 * C530;
    const double C4493 = C3793 * C622;
    const double C4485 = C3793 * C632;
    const double C5259 = C3793 * C347;
    const double C5251 = C3793 * C341;
    const double C5243 = C3793 * C348;
    const double C5235 = C3793 * C342;
    const double C6001 = C3793 * C873;
    const double C5993 = C3793 * C883;
    const double C22676 = C22514 * C239;
    const double C22668 = C22514 * C233;
    const double C22660 = C22514 * C240;
    const double C22652 = C22514 * C234;
    const double C23060 = C22514 * C520;
    const double C23052 = C22514 * C530;
    const double C23214 = C22514 * C622;
    const double C23206 = C22514 * C632;
    const double C31597 = C22514 * C347;
    const double C31589 = C22514 * C341;
    const double C31581 = C22514 * C348;
    const double C31573 = C22514 * C342;
    const double C32339 = C22514 * C873;
    const double C32331 = C22514 * C883;
    const double C7963 = C7920 + C7921;
    const double C7960 = C7914 + C7915;
    const double C15678 = C15635 + C15636;
    const double C15675 = C15629 + C15630;
    const double C47904 = C47900 / C47862;
    const double C1214 = C1006 * C528;
    const double C1208 = C1006 * C518;
    const double C1202 = C1006 * C242;
    const double C1196 = C1006 * C236;
    const double C1190 = C1006 * C527;
    const double C1184 = C1006 * C517;
    const double C1178 = C1006 * C243;
    const double C1172 = C1006 * C237;
    const double C1686 = C1006 * C1157;
    const double C1680 = C1006 * C1161;
    const double C1879 = C1006 * C619;
    const double C1873 = C1006 * C629;
    const double C1867 = C1006 * C1391;
    const double C1861 = C1006 * C1395;
    const double C2789 = C1006 * C881;
    const double C2783 = C1006 * C871;
    const double C2777 = C1006 * C350;
    const double C2771 = C1006 * C344;
    const double C2765 = C1006 * C880;
    const double C2759 = C1006 * C870;
    const double C2753 = C1006 * C351;
    const double C2747 = C1006 * C345;
    const double C3239 = C1006 * C2303;
    const double C3233 = C1006 * C2294;
    const double C3677 = C1006 * C2732;
    const double C3671 = C1006 * C2736;
    const double C6363 = C1006 * C630;
    const double C6357 = C1006 * C620;
    const double C1216 = C1007 * C529;
    const double C1210 = C1007 * C519;
    const double C1204 = C1007 * C241;
    const double C1198 = C1007 * C235;
    const double C1192 = C1007 * C528;
    const double C1186 = C1007 * C518;
    const double C1180 = C1007 * C242;
    const double C1174 = C1007 * C236;
    const double C1684 = C1007 * C1156;
    const double C1678 = C1007 * C1160;
    const double C1877 = C1007 * C620;
    const double C1871 = C1007 * C630;
    const double C1865 = C1007 * C1390;
    const double C1859 = C1007 * C1394;
    const double C2791 = C1007 * C882;
    const double C2785 = C1007 * C872;
    const double C2779 = C1007 * C349;
    const double C2773 = C1007 * C343;
    const double C2767 = C1007 * C881;
    const double C2761 = C1007 * C871;
    const double C2755 = C1007 * C350;
    const double C2749 = C1007 * C344;
    const double C3241 = C1007 * C2304;
    const double C3235 = C1007 * C2295;
    const double C3675 = C1007 * C2731;
    const double C3669 = C1007 * C2735;
    const double C6365 = C1007 * C631;
    const double C6359 = C1007 * C621;
    const double C23868 = C23691 * C1160;
    const double C23864 = C23691 * C1156;
    const double C23860 = C23691 * C528;
    const double C23856 = C23691 * C518;
    const double C23852 = C23691 * C242;
    const double C23848 = C23691 * C236;
    const double C23844 = C23691 * C1161;
    const double C23840 = C23691 * C1157;
    const double C23836 = C23691 * C527;
    const double C23832 = C23691 * C517;
    const double C23828 = C23691 * C243;
    const double C23824 = C23691 * C237;
    const double C24264 = C23691 * C1661;
    const double C24260 = C23691 * C1667;
    const double C24428 = C23691 * C619;
    const double C24424 = C23691 * C629;
    const double C24420 = C23691 * C1391;
    const double C24416 = C23691 * C1395;
    const double C24412 = C23691 * C1844;
    const double C24408 = C23691 * C1850;
    const double C25160 = C23691 * C2304;
    const double C25156 = C23691 * C2295;
    const double C25152 = C23691 * C630;
    const double C25148 = C23691 * C620;
    const double C25144 = C23691 * C2303;
    const double C25140 = C23691 * C2294;
    const double C25398 = C23691 * C881;
    const double C25394 = C23691 * C871;
    const double C25390 = C23691 * C350;
    const double C25386 = C23691 * C344;
    const double C25382 = C23691 * C880;
    const double C25378 = C23691 * C870;
    const double C25374 = C23691 * C351;
    const double C25370 = C23691 * C345;
    const double C25764 = C23691 * C2297;
    const double C25760 = C23691 * C2309;
    const double C25974 = C23691 * C3220;
    const double C25970 = C23691 * C3226;
    const double C26526 = C23691 * C2732;
    const double C26522 = C23691 * C2736;
    const double C29924 = C23691 * C1394;
    const double C29920 = C23691 * C1390;
    const double C34334 = C23691 * C2735;
    const double C34330 = C23691 * C2731;
    const double C35066 = C23691 * C3652;
    const double C35062 = C23691 * C3658;
    const double C9455 = C9204 + C9205;
    const double C14708 = C14327 + C14328;
    const double C9454 = C9202 + C9203;
    const double C10571 = C10085 + C10086;
    const double C14707 = C14323 + C14324;
    const double C17223 = C16803 + C16804;
    const double C49325 = C49266 + C49317;
    const double C3785 = C49304 - (C48903 * C48886) / C47862;
    const double C22675 = C49305 * C252;
    const double C22659 = C49305 * C253;
    const double C22651 = C49305 * C246;
    const double C23055 = C49305 * C534;
    const double C23209 = C49305 * C636;
    const double C31596 = C49305 * C360;
    const double C31580 = C49305 * C361;
    const double C31572 = C49305 * C354;
    const double C104 = C49305 / C47868 - C48901 / C49273;
    const double C3954 = C3786 * C252;
    const double C3938 = C3786 * C253;
    const double C3930 = C3786 * C246;
    const double C4334 = C3786 * C534;
    const double C4488 = C3786 * C636;
    const double C5258 = C3786 * C360;
    const double C5242 = C3786 * C361;
    const double C5234 = C3786 * C354;
    const double C49318 = C49269 + C49304;
    const double C48021 = C48017 / C47862;
    const double C41404 = C9196 * C31304;
    const double C41400 = C9194 * C31304;
    const double C41396 = C9192 * C31304;
    const double C41392 = C9188 * C31304;
    const double C41388 = C9186 * C31304;
    const double C41384 = C9184 * C31304;
    const double C41771 = C9190 * C31304;
    const double C41917 = C9574 * C31304;
    const double C41913 = C9572 * C31304;
    const double C41909 = C9570 * C31304;
    const double C48032 = C48026 / C47862;
    const double C21530 = C10757 * C20292;
    const double C21905 = C10755 * C20292;
    const double C42510 = C10757 * C34068;
    const double C42879 = C10755 * C34068;
    const double C49327 = C49295 + C49323;
    const double C20286 = C49314 - (C49097 * C49086) / C47862;
    const double C42509 = C10114 * C49315;
    const double C42880 = C10116 * C49315;
    const double C43018 = C10756 * C49315;
    const double C17858 = C49315 / C47868 - C49095 / C49273;
    const double C21529 = C10114 * C20287;
    const double C21906 = C10116 * C20287;
    const double C22044 = C10756 * C20287;
    const double C49324 = C49297 + C49314;
    const double C1237 = C1206 + C1207;
    const double C7975 = C7944 + C7945;
    const double C26862 = C26831 + C26832;
    const double C2812 = C2781 + C2782;
    const double C15690 = C15659 + C15660;
    const double C28467 = C28454 + C28455;
    const double C1231 = C1194 + C1195;
    const double C7969 = C7932 + C7933;
    const double C11481 = C11452 + C11453;
    const double C23891 = C23862 + C23863;
    const double C26856 = C26819 + C26820;
    const double C1887 = C1869 + C1870;
    const double C8585 = C8567 + C8568;
    const double C12749 = C12736 + C12737;
    const double C25171 = C25154 + C25155;
    const double C27472 = C27454 + C27455;
    const double C18526 = C9060 * C18035;
    const double C18038 =
        (4 * (2 * C48644 + C48107 * C48758 + C48645 * ae) +
         C48107 *
             (3 * C48758 +
              C48107 * (2 * C48750 +
                        C48107 * (C48165 +
                                  C48107 * (C48107 * C48108 * C48177 + C48270) +
                                  C48107 * C48266 * ae) +
                        C48752 * ae) +
              C48757 * ae) +
         (3 * C48645 + C48107 * C48757) * ae) /
        C47862;
    const double C48259 = C48256 + C48257;
    const double C2314 = (C48238 * C48160 + ae * C48107 * C48302 +
                          C48107 * (ae * C48302 + C48107 * C48238 * C48184)) /
                         C47867;
    const double C2302 = (C48238 * C48254 + C48302 * C48331) / C47862;
    const double C48347 = C48344 + C48345;
    const double C10124 = C10111 + C10112;
    const double C13537 = C13517 + C13518;
    const double C25766 = C25758 + C25759;
    const double C9198 = C9180 + C9181;
    const double C11862 = C11852 + C11853;
    const double C24272 = C24262 + C24263;
    const double C12022 = C12000 + C12001;
    const double C14345 = C14341 + C14342;
    const double C24432 = C24410 + C24411;
    const double C10123 = C10109 + C10110;
    const double C13539 = C13521 + C13522;
    const double C25768 = C25762 + C25763;
    const double C18058 = C18050 + C18051;
    const double C21294 = C21288 + C21289;
    const double C35070 = C35064 + C35065;
    const double C48796 = C48778 + C48794;
    const double C9462 = C9459 + C9460;
    const double C9568 = C9553 + C9554;
    const double C10582 = C10574 + C10575;
    const double C22043 = C18294 * C20292;
    const double C43017 = C18294 * C34068;
    const double C18287 =
        (4 * (2 * C48711 + C48107 * C48775 + C48712 * ae) +
         C48107 * (3 * C48775 +
                   C48107 * (2 * C48769 +
                             C48107 * (C48761 +
                                       C48107 * (C48107 * C48238 * C48177 +
                                                 C48764 * ae) +
                                       C48107 * C48764 * ae) +
                             C48770 * ae) +
                   C48774 * ae) +
         (3 * C48712 + C48107 * C48774) * ae) /
        C47862;
    const double C18531 = C18528 + C18529;
    const double C2792 = C1001 * C887;
    const double C2770 = C49271 * C887;
    const double C5996 = C3786 * C887;
    const double C15670 = C49303 * C887;
    const double C15648 = C49271 * C887;
    const double C19085 = C48900 * C887;
    const double C25401 = C48900 * C887;
    const double C29563 = C26643 * C887;
    const double C32334 = C49305 * C887;
    const double C37091 = C48903 * C887;
    const double C1858 = C49271 * C1401;
    const double C8556 = C49271 * C1401;
    const double C12745 = C48900 * C1401;
    const double C27443 = C26643 * C1401;
    const double C29927 = C48900 * C1401;
    const double C3668 = C49271 * C2742;
    const double C16522 = C49271 * C2742;
    const double C20561 = C48900 * C2742;
    const double C34337 = C48900 * C2742;
    const double C37907 = C26643 * C2742;
    const double C1201 = C49271 * C245;
    const double C3946 = C3786 * C245;
    const double C3932 = C49288 * C245;
    const double C7939 = C49271 * C245;
    const double C22667 = C49305 * C245;
    const double C22653 = C49288 * C245;
    const double C26826 = C26643 * C245;
    const double C2776 = C49271 * C353;
    const double C5250 = C3786 * C353;
    const double C5236 = C49288 * C353;
    const double C15654 = C49271 * C353;
    const double C28449 = C26643 * C353;
    const double C31588 = C49305 * C353;
    const double C31574 = C49288 * C353;
    const double C1211 = C1001 * C524;
    const double C1189 = C49271 * C524;
    const double C4342 = C3786 * C524;
    const double C7949 = C49303 * C524;
    const double C7927 = C49271 * C524;
    const double C11449 = C48900 * C524;
    const double C23063 = C49305 * C524;
    const double C23859 = C48900 * C524;
    const double C26836 = C48903 * C524;
    const double C26814 = C26643 * C524;
    const double C1876 = C49271 * C626;
    const double C4496 = C3786 * C626;
    const double C6360 = C1001 * C626;
    const double C8574 = C49271 * C626;
    const double C12733 = C48900 * C626;
    const double C23217 = C49305 * C626;
    const double C25151 = C48900 * C626;
    const double C27461 = C26643 * C626;
    const double C28223 = C48903 * C626;
    const double C39871 = C49303 * C626;
    const double C2786 = C1001 * C877;
    const double C2764 = C49271 * C877;
    const double C6004 = C3786 * C877;
    const double C15664 = C49303 * C877;
    const double C15642 = C49271 * C877;
    const double C19081 = C48900 * C877;
    const double C25397 = C48900 * C877;
    const double C29569 = C26643 * C877;
    const double C32342 = C49305 * C877;
    const double C37085 = C48903 * C877;
    const double C1683 = C49271 * C1162;
    const double C8393 = C49271 * C1162;
    const double C11457 = C48900 * C1162;
    const double C23867 = C48900 * C1162;
    const double C27280 = C26643 * C1162;
    const double C1864 = C49271 * C1396;
    const double C8562 = C49271 * C1396;
    const double C12741 = C48900 * C1396;
    const double C27449 = C26643 * C1396;
    const double C29923 = C48900 * C1396;
    const double C3674 = C49271 * C2737;
    const double C16528 = C49271 * C2737;
    const double C20557 = C48900 * C2737;
    const double C34333 = C48900 * C2737;
    const double C37913 = C26643 * C2737;
    const double C10132 = C10120 * C49287;
    const double C16814 = C10120 * C49287;
    const double C21537 = C10120 * C20287;
    const double C42517 = C10120 * C49315;
    const double C46866 = C10120 * C36785;
    const double C21545 = C21543 * C49300;
    const double C42519 = C21543 * C49300;
    const double C10131 = C10119 * C2433;
    const double C16813 = C10119 * C15331;
    const double C46865 = C10119 * C48050;
    const double C21544 = C21542 * C20292;
    const double C42518 = C21542 * C34068;
    const double C18059 = C18052 + C18053;
    const double C21292 = C21284 + C21285;
    const double C35068 = C35060 + C35061;
    const double C9456 = C9206 + C9207;
    const double C22042 = C18295 * C49300;
    const double C43016 = C18295 * C49300;
    const double C139 = (5 * (3 * C48141 + C48108 * C48161) +
                         C48108 * (4 * C48161 + C48108 * C48189)) /
                        C47862;
    const double C250 = (C48238 * (4 * C48161 + C48108 * C48189)) / C47862;
    const double C358 = (C48107 * (4 * C48161 + C48108 * C48189) +
                         (4 * C48499 + C48108 * C48503) * ae) /
                        C47862;
    const double C531 =
        (3 * C48141 + C48108 * C48161 + C48189 * C48287) / C47862;
    const double C633 =
        (C48107 * C48238 * C48189 + C48238 * C48503 * ae) / C47862;
    const double C884 =
        (3 * C48141 + C48108 * C48161 +
         C48107 * (C48107 * C48189 + C48503 * ae) + C48107 * C48503 * ae) /
        C47862;
    const double C146 =
        (5 * (3 * C48160 + ae * C48161 + C48108 * C48188) +
         ae * (4 * C48161 + C48108 * C48189) +
         C48108 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C251 =
        ((yP - yQ) * (3 * C48160 + ae * C48161 + C48108 * C48188)) / C47867;
    const double C256 =
        ((yP - yQ) *
         (4 * C48188 + ae * C48189 +
          C48108 * (3 * C48184 + ae * C48185 +
                    C48108 * (2 * C48180 + ae * C48181 +
                              C48108 * (C48176 + ae * C48108 * C48177 +
                                        C48108 * (ae * C48177 +
                                                  C48108 * std::pow(C48110, 8) *
                                                      bs[8] * C48118)))))) /
        C47867;
    const double C359 =
        (ae * (3 * (C48122 * C48123 * C48197 + C48108 * C48207 + C48202 * ae) +
               C48108 * (2 * C48207 +
                         C48108 * (C48204 +
                                   C48108 * (C48108 * C48145 * C48146 * C48197 +
                                             C48199 * ae) +
                                   C48108 * C48199 * ae) +
                         C48205 * ae) +
               (2 * C48202 + C48108 * C48205) * ae) +
         C48107 * (3 * C48160 + ae * C48161 + C48108 * C48188)) /
        C47867;
    const double C364 =
        (ae * (4 * (2 * C48207 + C48108 * C48231 + C48205 * ae) +
               C48108 * (3 * C48231 +
                         C48108 * (2 * C48226 +
                                   C48108 * (C48220 +
                                             C48108 * (C48108 * C48167 *
                                                           C48168 * C48197 +
                                                       C48219 * ae) +
                                             C48108 * C48219 * ae) +
                                   C48225 * ae) +
                         C48229 * ae) +
               (3 * C48205 + C48108 * C48229) * ae) +
         C48107 *
             (4 * C48188 + ae * C48189 +
              C48108 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C535 = (2 * C48140 + ae * C48141 + C48108 * C48160 +
                         C48188 * std::pow(yP - yQ, 2)) /
                        C47867;
    const double C536 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 +
         (3 * C48184 + ae * C48185 +
          C48108 *
              (2 * C48180 + ae * C48181 +
               C48108 * (C48176 + ae * C48108 * C48177 +
                         C48108 * (ae * C48177 + C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))) *
             std::pow(yP - yQ, 2)) /
        C47867;
    const double C637 =
        (ae * C48238 * (2 * C48207 + C48108 * C48231 + C48205 * ae) +
         C48107 * C48238 * C48188) /
        C47867;
    const double C1170 =
        (2 * C48238 * C48188 +
         C48238 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                std::pow(C48238, 2))) /
        C47867;
    const double C1690 = C1676 + C1677;
    const double C8400 = C8386 + C8387;
    const double C11485 = C11460 + C11461;
    const double C23895 = C23870 + C23871;
    const double C27287 = C27273 + C27274;
    const double C10581 = C10572 + C10573;
    const double C48277 = C48263 + C48276;
    const double C48311 = C48231 + C48310;
    const double C3231 =
        (2 * (ae * C48302 + C48107 * C48325) +
         ae * (C48302 + C48326 * std::pow(C48107, 2)) +
         C48107 * (C48325 + ae * C48107 * C48326 +
                   C48107 * (ae * C48326 +
                             C48107 * C48238 *
                                 (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C3225 =
        (2 * C48107 * C48302 + C48107 * (C48302 + C48326 * C48331)) / C47862;
    const double C48348 = C48231 + C48346;
    const double C10075 =
        (2 * C48322 + C48238 * C48354 + ae * C48107 * C48386 +
         C48107 * (ae * C48386 +
                   C48107 * (2 * C48238 * C48180 +
                             C48238 * (C48180 + (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118) *
                                                    C48287)))) /
        C47867;
    const double C9147 = (4 * (2 * C48300 + C48238 * C48308) +
                          C48238 * (3 * C48308 + C48238 * C48386)) /
                         C47862;
    const double C9301 = (C48107 * (3 * C48308 + C48238 * C48386)) / C47862;
    const double C10073 =
        (2 * C48300 + C48238 * C48308 + C48386 * C48331) / C47862;
    const double C18040 =
        (4 * (2 * C48340 + ae * C48341 + C48107 * C48439) +
         ae * (3 * C48341 + C48107 * C48440) +
         C48107 *
             (3 * C48439 + ae * C48440 +
              C48107 *
                  (2 * C48433 + ae * C48435 +
                   C48107 * (C48180 + ae * C48107 * C48272 +
                             C48107 * (ae * C48272 +
                                       C48107 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C18037 = (4 * (2 * C48336 + C48107 * C48341) +
                           C48107 * (3 * C48341 + C48107 * C48440)) /
                          C47862;
    const double C9815 =
        (3 * C48351 + C48238 * C48363 + ae * C48107 * C48380 +
         C48107 * (ae * C48380 +
                   C48107 * (3 * C48361 +
                             C48238 * (2 * C48238 * C48176 +
                                       C48238 * (C48176 + std::pow(C48110, 8) *
                                                              bs[8] * C48118 *
                                                              C48287))))) /
        C47867;
    const double C9450 = (5 * (3 * C48305 + C48238 * C48370) +
                          C48238 * (4 * C48370 + C48238 * C48380)) /
                         C47862;
    const double C9547 = (C48107 * (4 * C48370 + C48238 * C48380)) / C47862;
    const double C9812 =
        (3 * C48305 + C48238 * C48370 + C48380 * C48331) / C47862;
    const double C18524 =
        (5 * (3 * C48425 + ae * C48426 + C48107 * C48477) +
         ae * (4 * C48426 + C48107 * C48478) +
         C48107 *
             (4 * C48477 + ae * C48478 +
              C48107 *
                  (3 * C48473 + ae * C48474 +
                   C48107 * (2 * C48467 + ae * C48469 +
                             C48107 * (C48176 + ae * C48107 * C48269 +
                                       C48107 * (ae * C48269 +
                                                 C48107 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C18522 = (5 * (3 * C48334 + C48107 * C48426) +
                           C48107 * (4 * C48426 + C48107 * C48478)) /
                          C47862;
    const double C49326 = C49289 + C49321;
    const double C11278 = C49311 - (C49057 * C49046) / C47862;
    const double C9058 = C49312 / C47868 - C49055 / C49273;
    const double C49322 = C49291 + C49311;
    const double C3964 = C3939 + C3940;
    const double C5268 = C5243 + C5244;
    const double C22685 = C22660 + C22661;
    const double C31606 = C31581 + C31582;
    const double C47907 = C47904 - C47883;
    const double C1241 = C1214 + C1215;
    const double C1238 = C1208 + C1209;
    const double C1235 = C1202 + C1203;
    const double C1232 = C1196 + C1197;
    const double C1229 = C1190 + C1191;
    const double C1226 = C1184 + C1185;
    const double C1223 = C1178 + C1179;
    const double C1220 = C1172 + C1173;
    const double C1695 = C1686 + C1687;
    const double C1692 = C1680 + C1681;
    const double C1892 = C1879 + C1880;
    const double C1889 = C1873 + C1874;
    const double C1886 = C1867 + C1868;
    const double C1883 = C1861 + C1862;
    const double C2816 = C2789 + C2790;
    const double C2813 = C2783 + C2784;
    const double C2810 = C2777 + C2778;
    const double C2807 = C2771 + C2772;
    const double C2804 = C2765 + C2766;
    const double C2801 = C2759 + C2760;
    const double C2798 = C2753 + C2754;
    const double C2795 = C2747 + C2748;
    const double C3248 = C3239 + C3240;
    const double C3245 = C3233 + C3234;
    const double C3686 = C3677 + C3678;
    const double C3683 = C3671 + C3672;
    const double C6372 = C6363 + C6364;
    const double C6369 = C6357 + C6358;
    const double C1242 = C1216 + C1217;
    const double C1236 = C1204 + C1205;
    const double C1233 = C1198 + C1199;
    const double C1230 = C1192 + C1193;
    const double C1227 = C1186 + C1187;
    const double C1224 = C1180 + C1181;
    const double C1221 = C1174 + C1175;
    const double C1694 = C1684 + C1685;
    const double C1691 = C1678 + C1679;
    const double C1891 = C1877 + C1878;
    const double C1888 = C1871 + C1872;
    const double C1885 = C1865 + C1866;
    const double C1882 = C1859 + C1860;
    const double C2811 = C2779 + C2780;
    const double C2808 = C2773 + C2774;
    const double C2805 = C2767 + C2768;
    const double C2802 = C2761 + C2762;
    const double C2799 = C2755 + C2756;
    const double C2796 = C2749 + C2750;
    const double C3249 = C3241 + C3242;
    const double C3246 = C3235 + C3236;
    const double C3685 = C3675 + C3676;
    const double C3682 = C3669 + C3670;
    const double C6373 = C6365 + C6366;
    const double C23894 = C23868 + C23869;
    const double C23892 = C23864 + C23865;
    const double C23890 = C23860 + C23861;
    const double C23888 = C23856 + C23857;
    const double C23886 = C23852 + C23853;
    const double C23884 = C23848 + C23849;
    const double C23882 = C23844 + C23845;
    const double C23880 = C23840 + C23841;
    const double C23878 = C23836 + C23837;
    const double C23876 = C23832 + C23833;
    const double C23874 = C23828 + C23829;
    const double C23872 = C23824 + C23825;
    const double C24273 = C24264 + C24265;
    const double C24271 = C24260 + C24261;
    const double C24441 = C24428 + C24429;
    const double C24439 = C24424 + C24425;
    const double C24437 = C24420 + C24421;
    const double C24435 = C24416 + C24417;
    const double C24433 = C24412 + C24413;
    const double C24431 = C24408 + C24409;
    const double C25174 = C25160 + C25161;
    const double C25172 = C25156 + C25157;
    const double C25170 = C25152 + C25153;
    const double C25168 = C25148 + C25149;
    const double C25166 = C25144 + C25145;
    const double C25164 = C25140 + C25141;
    const double C25416 = C25398 + C25399;
    const double C25414 = C25394 + C25395;
    const double C25412 = C25390 + C25391;
    const double C25410 = C25386 + C25387;
    const double C25408 = C25382 + C25383;
    const double C25406 = C25378 + C25379;
    const double C25404 = C25374 + C25375;
    const double C25402 = C25370 + C25371;
    const double C25769 = C25764 + C25765;
    const double C25767 = C25760 + C25761;
    const double C25983 = C25974 + C25975;
    const double C25981 = C25970 + C25971;
    const double C26531 = C26526 + C26527;
    const double C26529 = C26522 + C26523;
    const double C29930 = C29924 + C29925;
    const double C29928 = C29920 + C29921;
    const double C34340 = C34334 + C34335;
    const double C34338 = C34330 + C34331;
    const double C35071 = C35066 + C35067;
    const double C35069 = C35062 + C35063;
    const double C14714 = C14708 + C14329;
    const double C10580 = C10571 + C10087;
    const double C14713 = C14707 + C14325;
    const double C17230 = C17223 + C16805;
    const double C22671 = C49325 * C254;
    const double C22663 = C49325 * C247;
    const double C22655 = C49325 * C255;
    const double C22647 = C49325 * C248;
    const double C23067 = C49325 * C522;
    const double C23059 = C49325 * C532;
    const double C23221 = C49325 * C624;
    const double C23213 = C49325 * C634;
    const double C31592 = C49325 * C362;
    const double C31584 = C49325 * C355;
    const double C31576 = C49325 * C363;
    const double C31568 = C49325 * C356;
    const double C32346 = C49325 * C875;
    const double C32338 = C49325 * C885;
    const double C101 =
        (C49316 + 2 * C48895) / C47868 - (C49325 * C48886) / C47862;
    const double C3952 = C3785 * C253;
    const double C3944 = C3785 * C246;
    const double C3936 = C3785 * C254;
    const double C3928 = C3785 * C247;
    const double C4344 = C3785 * C523;
    const double C4336 = C3785 * C533;
    const double C4498 = C3785 * C625;
    const double C4490 = C3785 * C635;
    const double C5256 = C3785 * C361;
    const double C5248 = C3785 * C354;
    const double C5240 = C3785 * C362;
    const double C5232 = C3785 * C355;
    const double C6006 = C3785 * C876;
    const double C5998 = C3785 * C886;
    const double C22673 = C49318 * C253;
    const double C22665 = C49318 * C246;
    const double C22657 = C49318 * C254;
    const double C22649 = C49318 * C247;
    const double C23065 = C49318 * C523;
    const double C23057 = C49318 * C533;
    const double C23219 = C49318 * C625;
    const double C23211 = C49318 * C635;
    const double C31594 = C49318 * C361;
    const double C31586 = C49318 * C354;
    const double C31578 = C49318 * C362;
    const double C31570 = C49318 * C355;
    const double C32344 = C49318 * C876;
    const double C32336 = C49318 * C886;
    const double C102 =
        (C49303 + 2 * C48903 + C49325) / C47868 - (C49318 * C48886) / C47862;
    const double C103 = (C49271 + C48900 / C47862 + C49318) / C47868 -
                        (C49305 * C48886) / C47862;
    const double C48025 = C48021 - C48002;
    const double C41767 = C41392 + C41393;
    const double C41766 = C41388 + C41389;
    const double C42513 = C9193 * C49327;
    const double C42505 = C9185 * C49327;
    const double C42884 = C9187 * C49327;
    const double C43022 = C9573 * C49327;
    const double C17855 =
        (C49320 + 2 * C49090) / C47868 - (C49327 * C49086) / C47862;
    const double C21535 = C10118 * C20286;
    const double C21527 = C9573 * C20286;
    const double C21908 = C9571 * C20286;
    const double C22046 = C10114 * C20286;
    const double C42515 = C10118 * C49324;
    const double C42507 = C9573 * C49324;
    const double C42882 = C9571 * C49324;
    const double C43020 = C10114 * C49324;
    const double C17856 =
        (C49309 + 2 * C49097 + C49327) / C47868 - (C49324 * C49086) / C47862;
    const double C17857 = (C49287 + C49094 / C47862 + C49324) / C47868 -
                          (C49315 * C49086) / C47862;
    const double C18530 = C18526 + C18527;
    const double C48260 = C48259 + C48258;
    const double C3244 = C49271 * C2314;
    const double C16110 = C49271 * C2314;
    const double C18879 = C48900 * C2314;
    const double C25163 = C48900 * C2314;
    const double C29005 = C26643 * C2314;
    const double C3238 = C49271 * C2302;
    const double C16104 = C49271 * C2302;
    const double C18875 = C48900 * C2302;
    const double C25159 = C48900 * C2302;
    const double C29011 = C26643 * C2302;
    const double C10136 = C10124 * C49287;
    const double C16820 = C10124 * C49287;
    const double C46872 = C10124 * C36785;
    const double C9214 = C9198 * C118;
    const double C14347 = C14345 * C4967;
    const double C41406 = C14345 * C31305;
    const double C10135 = C10123 * C2433;
    const double C16819 = C10123 * C15331;
    const double C46871 = C10123 * C48050;
    const double C48797 = C48796 + C48781;
    const double C9464 = C9462 * C118;
    const double C9576 = C9568 * C118;
    const double C14710 = C9568 * C4967;
    const double C41769 = C9568 * C31305;
    const double C10585 = C10582 * C2433;
    const double C14848 = C10582 * C4967;
    const double C17225 = C10582 * C15331;
    const double C41907 = C10582 * C31305;
    const double C47277 = C10582 * C48050;
    const double C2817 = C2791 + C2792;
    const double C2806 = C2769 + C2770;
    const double C15684 = C15647 + C15648;
    const double C19089 = C19084 + C19085;
    const double C25417 = C25400 + C25401;
    const double C29574 = C29562 + C29563;
    const double C1881 = C1857 + C1858;
    const double C8579 = C8555 + C8556;
    const double C12753 = C12744 + C12745;
    const double C27466 = C27442 + C27443;
    const double C29931 = C29926 + C29927;
    const double C3681 = C3667 + C3668;
    const double C16535 = C16521 + C16522;
    const double C20565 = C20560 + C20561;
    const double C34341 = C34336 + C34337;
    const double C37920 = C37906 + C37907;
    const double C1234 = C1200 + C1201;
    const double C3960 = C3931 + C3932;
    const double C7972 = C7938 + C7939;
    const double C22681 = C22652 + C22653;
    const double C26859 = C26825 + C26826;
    const double C2809 = C2775 + C2776;
    const double C5264 = C5235 + C5236;
    const double C15687 = C15653 + C15654;
    const double C28464 = C28448 + C28449;
    const double C31602 = C31573 + C31574;
    const double C1239 = C1210 + C1211;
    const double C1228 = C1188 + C1189;
    const double C7966 = C7926 + C7927;
    const double C11479 = C11448 + C11449;
    const double C23889 = C23858 + C23859;
    const double C26853 = C26813 + C26814;
    const double C1890 = C1875 + C1876;
    const double C6370 = C6359 + C6360;
    const double C8588 = C8573 + C8574;
    const double C12747 = C12732 + C12733;
    const double C25169 = C25150 + C25151;
    const double C27475 = C27460 + C27461;
    const double C2814 = C2785 + C2786;
    const double C2803 = C2763 + C2764;
    const double C15681 = C15641 + C15642;
    const double C19087 = C19080 + C19081;
    const double C25415 = C25396 + C25397;
    const double C29577 = C29568 + C29569;
    const double C1693 = C1682 + C1683;
    const double C8403 = C8392 + C8393;
    const double C11483 = C11456 + C11457;
    const double C23893 = C23866 + C23867;
    const double C27290 = C27279 + C27280;
    const double C1884 = C1863 + C1864;
    const double C8582 = C8561 + C8562;
    const double C12751 = C12740 + C12741;
    const double C27469 = C27448 + C27449;
    const double C29929 = C29922 + C29923;
    const double C3684 = C3673 + C3674;
    const double C16538 = C16527 + C16528;
    const double C20563 = C20556 + C20557;
    const double C34339 = C34332 + C34333;
    const double C37923 = C37912 + C37913;
    const double C3956 = C49288 * C251;
    const double C22677 = C49288 * C251;
    const double C5260 = C49288 * C359;
    const double C31598 = C49288 * C359;
    const double C1219 = C49271 * C535;
    const double C4332 = C49288 * C535;
    const double C7957 = C49271 * C535;
    const double C23053 = C49288 * C535;
    const double C26844 = C26643 * C535;
    const double C4486 = C49288 * C637;
    const double C6368 = C49271 * C637;
    const double C23207 = C49288 * C637;
    const double C28231 = C26643 * C637;
    const double C39879 = C49271 * C637;
    const double C10584 = C10581 * C49287;
    const double C14847 = C10581 * C49094;
    const double C17224 = C10581 * C49287;
    const double C41906 = C10581 * C49094;
    const double C47276 = C10581 * C36785;
    const double C48278 = C48277 + C48267;
    const double C2317 =
        (C48160 + C48184 * C48287 + ae * C48107 * C48311 +
         C48107 * (ae * C48311 +
                   C48107 * (C48184 + (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)) *
                                          C48287))) /
        C47867;
    const double C1666 = (3 * (C48254 + C48231 * C48287) +
                          C48238 * (2 * C48302 + C48238 * C48311)) /
                         C47862;
    const double C1849 = (C48107 * (2 * C48302 + C48238 * C48311)) / C47862;
    const double C2308 = (C48254 + C48231 * C48287 + C48311 * C48331) / C47862;
    const double C3663 =
        (3 * (C48160 + ae * C48343 + C48107 * C48347) +
         ae * (2 * C48343 + C48107 * C48348) +
         C48107 *
             (2 * C48347 + ae * C48348 +
              C48107 *
                  (C48184 + ae * C48107 * C48275 +
                   C48107 * (ae * C48275 +
                             C48107 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C3657 = (3 * (C48254 + C48231 * C48331) +
                          C48107 * (2 * C48343 + C48107 * C48348)) /
                         C47862;
    const double C9055 =
        (C49319 + 2 * C49050) / C47868 - (C49326 * C49046) / C47862;
    const double C9056 =
        (C49307 + 2 * C49057 + C49326) / C47868 - (C49322 * C49046) / C47862;
    const double C9057 = (C49284 + C49054 / C47862 + C49322) / C47868 -
                         (C49312 * C49046) / C47862;
    const double C11458 = C47907 * C1160;
    const double C11454 = C47907 * C1156;
    const double C11450 = C47907 * C528;
    const double C11446 = C47907 * C518;
    const double C11442 = C47907 * C242;
    const double C11438 = C47907 * C236;
    const double C11434 = C47907 * C1161;
    const double C11430 = C47907 * C1157;
    const double C11426 = C47907 * C527;
    const double C11422 = C47907 * C517;
    const double C11418 = C47907 * C243;
    const double C11414 = C47907 * C237;
    const double C11854 = C47907 * C1661;
    const double C11850 = C47907 * C1667;
    const double C12018 = C47907 * C619;
    const double C12014 = C47907 * C629;
    const double C12010 = C47907 * C1391;
    const double C12006 = C47907 * C1395;
    const double C12002 = C47907 * C1844;
    const double C11998 = C47907 * C1850;
    const double C12742 = C47907 * C1394;
    const double C12738 = C47907 * C1390;
    const double C12734 = C47907 * C630;
    const double C12730 = C47907 * C620;
    const double C12960 = C47907 * C350;
    const double C12956 = C47907 * C344;
    const double C12952 = C47907 * C351;
    const double C12948 = C47907 * C345;
    const double C13533 = C47907 * C2294;
    const double C13529 = C47907 * C2303;
    const double C13523 = C47907 * C2297;
    const double C13519 = C47907 * C2309;
    const double C14085 = C47907 * C870;
    const double C14081 = C47907 * C880;
    const double C18876 = C47907 * C2304;
    const double C18872 = C47907 * C2295;
    const double C19082 = C47907 * C881;
    const double C19078 = C47907 * C871;
    const double C19632 = C47907 * C3220;
    const double C19628 = C47907 * C3226;
    const double C20182 = C47907 * C2732;
    const double C20178 = C47907 * C2736;
    const double C20558 = C47907 * C2735;
    const double C20554 = C47907 * C2731;
    const double C21290 = C47907 * C3652;
    const double C21286 = C47907 * C3658;
    const double C47910 = C47907 / C47868;
    const double C47909 = C47860 * C47907;
    const double C1675 = C1229 + C1230;
    const double C1674 = C1226 + C1227;
    const double C7106 = C1891 + C1892;
    const double C7103 = C1892 + C1891;
    const double C7105 = C1888 + C1889;
    const double C7104 = C1889 + C1888;
    const double C3666 = C2804 + C2805;
    const double C3665 = C2801 + C2802;
    const double C24257 = C23882 + C23883;
    const double C24256 = C23880 + C23881;
    const double C24255 = C23878 + C23879;
    const double C24254 = C23876 + C23877;
    const double C25979 = C24440 + C24441;
    const double C25964 = C24441 + C24440;
    const double C25978 = C24438 + C24439;
    const double C25965 = C24439 + C24438;
    const double C30468 = C24437 + C24436;
    const double C30670 = C24436 + C24437;
    const double C30469 = C24435 + C24434;
    const double C30669 = C24434 + C24435;
    const double C25976 = C25167 + C25166;
    const double C25967 = C25166 + C25167;
    const double C25977 = C25165 + C25164;
    const double C25966 = C25164 + C25165;
    const double C26519 = C25408 + C25409;
    const double C26518 = C25406 + C25407;
    const double C35058 = C26531 + C26530;
    const double C35059 = C26529 + C26528;
    const double C14716 = C14714 + C14330;
    const double C10583 = C10580 + C10088;
    const double C14715 = C14713 + C14326;
    const double C17231 = C17230 + C16806;
    const double C48031 = C48025 / C47868;
    const double C48030 = C47947 * C48025;
    const double C41773 = C41767 + C41394;
    const double C41772 = C41766 + C41390;
    const double C888 =
        (2 * C48140 + ae * C48141 + C48108 * C48160 + ae * C48107 * C48260 +
         C48107 * (ae * C48260 + C48107 * C48188)) /
        C47867;
    const double C137 = (4 * (2 * C48249 + C48108 * C48254 + C48489 * ae) +
                         C48108 * (3 * C48254 + C48108 * C48260 + C48499 * ae) +
                         (3 * C48489 + C48108 * C48499) * ae) /
                        C47862;
    const double C244 =
        (C48238 * (3 * C48254 + C48108 * C48260 + C48499 * ae)) / C47862;
    const double C352 =
        (C48107 * (3 * C48254 + C48108 * C48260 + C48499 * ae)) / C47862;
    const double C525 =
        (2 * C48249 + C48108 * C48254 + C48489 * ae + C48260 * C48287) / C47862;
    const double C627 = (C48107 * C48238 * C48260) / C47862;
    const double C878 =
        (2 * C48249 + C48108 * C48254 + C48489 * ae + C48260 * C48331) / C47862;
    const double C3250 = C3243 + C3244;
    const double C16116 = C16109 + C16110;
    const double C18883 = C18878 + C18879;
    const double C25175 = C25162 + C25163;
    const double C29020 = C29004 + C29005;
    const double C3247 = C3237 + C3238;
    const double C16113 = C16103 + C16104;
    const double C18881 = C18874 + C18875;
    const double C25173 = C25158 + C25159;
    const double C29023 = C29010 + C29011;
    const double C18523 =
        (5 * (3 * C48743 + C48107 * C48797 + C48742 * ae) +
         C48107 *
             (4 * C48797 +
              C48107 *
                  (3 * C48792 +
                   C48107 *
                       (2 * C48784 +
                        C48107 * (C48153 + C48107 * (C48107 * C48177 + C48265) +
                                  C48107 * C48219 * ae) +
                        C48786 * ae) +
                   C48791 * ae) +
              C48795 * ae) +
         (4 * C48742 + C48107 * C48795) * ae) /
        C47862;
    const double C3972 = C3955 + C3956;
    const double C22693 = C22676 + C22677;
    const double C5276 = C5259 + C5260;
    const double C31614 = C31597 + C31598;
    const double C1243 = C1218 + C1219;
    const double C4347 = C4331 + C4332;
    const double C7981 = C7956 + C7957;
    const double C23068 = C23052 + C23053;
    const double C26868 = C26843 + C26844;
    const double C4501 = C4485 + C4486;
    const double C6374 = C6367 + C6368;
    const double C23222 = C23206 + C23207;
    const double C28237 = C28230 + C28231;
    const double C39885 = C39878 + C39879;
    const double C48279 = C48108 * C48278;
    const double C48313 = C48238 * C48278;
    const double C1404 =
        (ae * (C48260 + C48278 * C48287) +
         C48107 * (C48188 + (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118))) *
                                C48287)) /
        C47867;
    const double C2745 =
        (2 * (ae * C48260 + C48107 * C48188) +
         ae * (C48260 + C48278 * std::pow(C48107, 2)) +
         C48107 *
             (C48188 + ae * C48107 * C48278 +
              C48107 *
                  (ae * C48278 +
                   C48107 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C1165 =
        (2 * C48238 * C48260 + C48238 * (C48260 + C48278 * C48287)) / C47862;
    const double C1399 = (C48107 * (C48260 + C48278 * C48287)) / C47862;
    const double C2740 =
        (2 * C48107 * C48260 + C48107 * (C48260 + C48278 * C48331)) / C47862;
    const double C11484 = C11458 + C11459;
    const double C11482 = C11454 + C11455;
    const double C11480 = C11450 + C11451;
    const double C11478 = C11446 + C11447;
    const double C11476 = C11442 + C11443;
    const double C11474 = C11438 + C11439;
    const double C11472 = C11434 + C11435;
    const double C11470 = C11430 + C11431;
    const double C11468 = C11426 + C11427;
    const double C11466 = C11422 + C11423;
    const double C11464 = C11418 + C11419;
    const double C11462 = C11414 + C11415;
    const double C11863 = C11854 + C11855;
    const double C11861 = C11850 + C11851;
    const double C12031 = C12018 + C12019;
    const double C12029 = C12014 + C12015;
    const double C12027 = C12010 + C12011;
    const double C12025 = C12006 + C12007;
    const double C12023 = C12002 + C12003;
    const double C12021 = C11998 + C11999;
    const double C12752 = C12742 + C12743;
    const double C12750 = C12738 + C12739;
    const double C12748 = C12734 + C12735;
    const double C12746 = C12730 + C12731;
    const double C12970 = C12960 + C12961;
    const double C12968 = C12956 + C12957;
    const double C12966 = C12952 + C12953;
    const double C12964 = C12948 + C12949;
    const double C13544 = C13533 + C13534;
    const double C13542 = C13529 + C13530;
    const double C13540 = C13523 + C13524;
    const double C13538 = C13519 + C13520;
    const double C14090 = C14085 + C14086;
    const double C14088 = C14081 + C14082;
    const double C18882 = C18876 + C18877;
    const double C18880 = C18872 + C18873;
    const double C19088 = C19082 + C19083;
    const double C19086 = C19078 + C19079;
    const double C19639 = C19632 + C19633;
    const double C19637 = C19628 + C19629;
    const double C20187 = C20182 + C20183;
    const double C20185 = C20178 + C20179;
    const double C20564 = C20558 + C20559;
    const double C20562 = C20554 + C20555;
    const double C21295 = C21290 + C21291;
    const double C21293 = C21286 + C21287;
    const double C47913 = C47910 - C47905;
    const double C7761 = C47910 + (C47896 * ae) / C47862;
    const double C47912 = C47909 + C49229;
    const double C1689 = C1675 + C1231;
    const double C1688 = C1674 + C1228;
    const double C7110 = C1890 + C7106;
    const double C7107 = C7103 + C1890;
    const double C7109 = C1887 + C7105;
    const double C7108 = C7104 + C1887;
    const double C3680 = C3666 + C2806;
    const double C3679 = C3665 + C2803;
    const double C24269 = C24257 * C49007;
    const double C24268 = C24256 * C118;
    const double C24267 = C24255 * C49007;
    const double C30467 = C24255 * C49252;
    const double C33230 = C24255 * C31302;
    const double C24266 = C24254 * C118;
    const double C30466 = C24254 * C4966;
    const double C33229 = C24254 * C31304;
    const double C30471 = C30468 * C4967;
    const double C33231 = C30468 * C31305;
    const double C30472 = C30469 * C49094;
    const double C33232 = C30469 * C49094;
    const double C10586 = C10583 + C10127;
    const double C17232 = C17231 + C16807;
    const double C48036 = C48031 - C48032;
    const double C48035 = C48030 + C49252;
    const double C41775 = C41773 + C41395;
    const double C41774 = C41772 + C41391;
    const double C2794 = C49271 * C888;
    const double C5994 = C49288 * C888;
    const double C15672 = C49271 * C888;
    const double C32332 = C49288 * C888;
    const double C37093 = C26643 * C888;
    const double C3948 = C49288 * C244;
    const double C22669 = C49288 * C244;
    const double C5252 = C49288 * C352;
    const double C31590 = C49288 * C352;
    const double C1213 = C49271 * C525;
    const double C4340 = C49288 * C525;
    const double C7951 = C49271 * C525;
    const double C23061 = C49288 * C525;
    const double C26838 = C26643 * C525;
    const double C4494 = C49288 * C627;
    const double C6362 = C49271 * C627;
    const double C23215 = C49288 * C627;
    const double C28225 = C26643 * C627;
    const double C39873 = C49271 * C627;
    const double C2788 = C49271 * C878;
    const double C6002 = C49288 * C878;
    const double C15666 = C49271 * C878;
    const double C32340 = C49288 * C878;
    const double C37087 = C26643 * C878;
    const double C48280 = C48262 + C48279;
    const double C2583 =
        (C48238 * C48188 + ae * C48107 * C48313 +
         C48107 * (ae * C48313 +
                   C48107 * C48238 *
                       (2 * C48180 + ae * C48181 +
                        C48108 * (C48176 + ae * C48108 * C48177 +
                                  C48108 * (ae * C48177 +
                                            C48108 * std::pow(C48110, 8) *
                                                bs[8] * C48118))))) /
        C47867;
    const double C2581 = (C48238 * C48260 + C48313 * C48331) / C47862;
    const double C11847 = C11472 + C11473;
    const double C11846 = C11470 + C11471;
    const double C11845 = C11468 + C11469;
    const double C11844 = C11466 + C11467;
    const double C13536 = C12030 + C12031;
    const double C13515 = C12031 + C12030;
    const double C13535 = C12028 + C12029;
    const double C13516 = C12029 + C12028;
    const double C13314 = C12027 + C12026;
    const double C13526 = C12026 + C12027;
    const double C13315 = C12025 + C12024;
    const double C13525 = C12024 + C12025;
    const double C19635 = C13543 + C13544;
    const double C19624 = C13544 + C13543;
    const double C19634 = C13541 + C13542;
    const double C19625 = C13542 + C13541;
    const double C20174 = C14090 + C14089;
    const double C20175 = C14088 + C14087;
    const double C21282 = C20187 + C20186;
    const double C21283 = C20185 + C20184;
    const double C26841 = C47913 * C529;
    const double C26835 = C47913 * C519;
    const double C26829 = C47913 * C241;
    const double C26823 = C47913 * C235;
    const double C26817 = C47913 * C528;
    const double C26811 = C47913 * C518;
    const double C26805 = C47913 * C242;
    const double C26799 = C47913 * C236;
    const double C27281 = C47913 * C1156;
    const double C27275 = C47913 * C1160;
    const double C27462 = C47913 * C620;
    const double C27456 = C47913 * C630;
    const double C27450 = C47913 * C1390;
    const double C27444 = C47913 * C1394;
    const double C28228 = C47913 * C631;
    const double C28222 = C47913 * C621;
    const double C28452 = C47913 * C349;
    const double C28446 = C47913 * C343;
    const double C28440 = C47913 * C350;
    const double C28434 = C47913 * C344;
    const double C29012 = C47913 * C2295;
    const double C29006 = C47913 * C2304;
    const double C29570 = C47913 * C871;
    const double C29564 = C47913 * C881;
    const double C37090 = C47913 * C882;
    const double C37084 = C47913 * C872;
    const double C37914 = C47913 * C2731;
    const double C37908 = C47913 * C2735;
    const double C116 =
        (C47913 / C47868 + ((C47860 * C47923 + C26643) * ae) / C47862) /
            C47868 -
        ((C47860 * (C47923 / C47868 + (0 * ae) / C47862) + C49288) * be) /
            C47862;
    const double C3792 =
        C47913 / C47868 - ((C47860 * C47923 + C26643) * be) / C47862;
    const double C22513 =
        C47913 / C47868 + ((C47860 * C47923 + C26643) * ae) / C47862;
    const double C7954 = C7761 * C529;
    const double C7948 = C7761 * C519;
    const double C7942 = C7761 * C241;
    const double C7936 = C7761 * C235;
    const double C7930 = C7761 * C528;
    const double C7924 = C7761 * C518;
    const double C7918 = C7761 * C242;
    const double C7912 = C7761 * C236;
    const double C8394 = C7761 * C1156;
    const double C8388 = C7761 * C1160;
    const double C8575 = C7761 * C620;
    const double C8569 = C7761 * C630;
    const double C8563 = C7761 * C1390;
    const double C8557 = C7761 * C1394;
    const double C15669 = C7761 * C882;
    const double C15663 = C7761 * C872;
    const double C15657 = C7761 * C349;
    const double C15651 = C7761 * C343;
    const double C15645 = C7761 * C881;
    const double C15639 = C7761 * C871;
    const double C15633 = C7761 * C350;
    const double C15627 = C7761 * C344;
    const double C16107 = C7761 * C2304;
    const double C16101 = C7761 * C2295;
    const double C16529 = C7761 * C2731;
    const double C16523 = C7761 * C2735;
    const double C39876 = C7761 * C631;
    const double C39870 = C7761 * C621;
    const double C47914 = C47912 * be;
    const double C7760 = C47899 + (C47912 * ae) / C47862 + C47888;
    const double C1697 = C1689 * C49007;
    const double C1696 = C1688 * C118;
    const double C24275 = C24268 + C24269;
    const double C24274 = C24266 + C24267;
    const double C30470 = C30466 + C30467;
    const double C33233 = C33229 + C33230;
    const double C10587 = C10586 + C10128;
    const double C17233 = C17232 + C16808;
    const double C46869 = C10121 * C48036;
    const double C46863 = C10117 * C48036;
    const double C46857 = C9572 * C48036;
    const double C46851 = C9574 * C48036;
    const double C47279 = C9570 * C48036;
    const double C47441 = C10113 * C48036;
    const double C47435 = C10115 * C48036;
    const double C17863 =
        (C48036 / C47868 + ((C47947 * C48050 + C36785) * ae) / C47862) /
            C47868 -
        ((C47947 * (C48050 / C47868 + (0 * ae) / C47862) + C49300) * be) /
            C47862;
    const double C20291 =
        C48036 / C47868 - ((C47947 * C48050 + C36785) * be) / C47862;
    const double C34067 =
        C48036 / C47868 + ((C47947 * C48050 + C36785) * ae) / C47862;
    const double C48039 = C48035 * be;
    const double C2818 = C2793 + C2794;
    const double C6009 = C5993 + C5994;
    const double C15696 = C15671 + C15672;
    const double C32347 = C32331 + C32332;
    const double C37099 = C37092 + C37093;
    const double C3968 = C3947 + C3948;
    const double C22689 = C22668 + C22669;
    const double C5272 = C5251 + C5252;
    const double C31610 = C31589 + C31590;
    const double C1240 = C1212 + C1213;
    const double C4351 = C4339 + C4340;
    const double C7978 = C7950 + C7951;
    const double C23072 = C23060 + C23061;
    const double C26865 = C26837 + C26838;
    const double C4505 = C4493 + C4494;
    const double C6371 = C6361 + C6362;
    const double C23226 = C23214 + C23215;
    const double C28234 = C28224 + C28225;
    const double C39882 = C39872 + C39873;
    const double C2815 = C2787 + C2788;
    const double C6013 = C6001 + C6002;
    const double C15693 = C15665 + C15666;
    const double C32351 = C32339 + C32340;
    const double C37096 = C37086 + C37087;
    const double C48281 = C48280 + C48268;
    const double C11859 = C11847 * C49007;
    const double C11858 = C11846 * C118;
    const double C11857 = C11845 * C49007;
    const double C13313 = C11845 * C49252;
    const double C44257 = C11845 * C31302;
    const double C11856 = C11844 * C118;
    const double C13312 = C11844 * C4966;
    const double C44256 = C11844 * C31304;
    const double C13317 = C13314 * C4967;
    const double C44258 = C13314 * C31305;
    const double C13318 = C13315 * C49094;
    const double C44259 = C13315 * C49094;
    const double C26867 = C26841 + C26842;
    const double C26864 = C26835 + C26836;
    const double C26861 = C26829 + C26830;
    const double C26858 = C26823 + C26824;
    const double C26855 = C26817 + C26818;
    const double C26852 = C26811 + C26812;
    const double C26849 = C26805 + C26806;
    const double C26846 = C26799 + C26800;
    const double C27291 = C27281 + C27282;
    const double C27288 = C27275 + C27276;
    const double C27476 = C27462 + C27463;
    const double C27473 = C27456 + C27457;
    const double C27470 = C27450 + C27451;
    const double C27467 = C27444 + C27445;
    const double C28236 = C28228 + C28229;
    const double C28233 = C28222 + C28223;
    const double C28466 = C28452 + C28453;
    const double C28463 = C28446 + C28447;
    const double C28460 = C28440 + C28441;
    const double C28457 = C28434 + C28435;
    const double C29024 = C29012 + C29013;
    const double C29021 = C29006 + C29007;
    const double C29578 = C29570 + C29571;
    const double C29575 = C29564 + C29565;
    const double C37098 = C37090 + C37091;
    const double C37095 = C37084 + C37085;
    const double C37924 = C37914 + C37915;
    const double C37921 = C37908 + C37909;
    const double C3953 = C3792 * C240;
    const double C3945 = C3792 * C234;
    const double C3937 = C3792 * C241;
    const double C3929 = C3792 * C235;
    const double C4341 = C3792 * C519;
    const double C4333 = C3792 * C529;
    const double C4495 = C3792 * C621;
    const double C4487 = C3792 * C631;
    const double C5257 = C3792 * C348;
    const double C5249 = C3792 * C342;
    const double C5241 = C3792 * C349;
    const double C5233 = C3792 * C343;
    const double C6003 = C3792 * C872;
    const double C5995 = C3792 * C882;
    const double C22674 = C22513 * C240;
    const double C22666 = C22513 * C234;
    const double C22658 = C22513 * C241;
    const double C22650 = C22513 * C235;
    const double C23062 = C22513 * C519;
    const double C23054 = C22513 * C529;
    const double C23216 = C22513 * C621;
    const double C23208 = C22513 * C631;
    const double C31595 = C22513 * C348;
    const double C31587 = C22513 * C342;
    const double C31579 = C22513 * C349;
    const double C31571 = C22513 * C343;
    const double C32341 = C22513 * C872;
    const double C32333 = C22513 * C882;
    const double C7980 = C7954 + C7955;
    const double C7977 = C7948 + C7949;
    const double C7974 = C7942 + C7943;
    const double C7971 = C7936 + C7937;
    const double C7968 = C7930 + C7931;
    const double C7965 = C7924 + C7925;
    const double C7962 = C7918 + C7919;
    const double C7959 = C7912 + C7913;
    const double C8404 = C8394 + C8395;
    const double C8401 = C8388 + C8389;
    const double C8589 = C8575 + C8576;
    const double C8586 = C8569 + C8570;
    const double C8583 = C8563 + C8564;
    const double C8580 = C8557 + C8558;
    const double C15695 = C15669 + C15670;
    const double C15692 = C15663 + C15664;
    const double C15689 = C15657 + C15658;
    const double C15686 = C15651 + C15652;
    const double C15683 = C15645 + C15646;
    const double C15680 = C15639 + C15640;
    const double C15677 = C15633 + C15634;
    const double C15674 = C15627 + C15628;
    const double C16115 = C16107 + C16108;
    const double C16112 = C16101 + C16102;
    const double C16539 = C16529 + C16530;
    const double C16536 = C16523 + C16524;
    const double C39884 = C39876 + C39877;
    const double C39881 = C39870 + C39871;
    const double C47915 = C47914 / C47862;
    const double C7952 = C7760 * C528;
    const double C7946 = C7760 * C518;
    const double C7940 = C7760 * C242;
    const double C7934 = C7760 * C236;
    const double C7928 = C7760 * C527;
    const double C7922 = C7760 * C517;
    const double C7916 = C7760 * C243;
    const double C7910 = C7760 * C237;
    const double C8396 = C7760 * C1157;
    const double C8390 = C7760 * C1161;
    const double C8577 = C7760 * C619;
    const double C8571 = C7760 * C629;
    const double C8565 = C7760 * C1391;
    const double C8559 = C7760 * C1395;
    const double C15667 = C7760 * C881;
    const double C15661 = C7760 * C871;
    const double C15655 = C7760 * C350;
    const double C15649 = C7760 * C344;
    const double C15643 = C7760 * C880;
    const double C15637 = C7760 * C870;
    const double C15631 = C7760 * C351;
    const double C15625 = C7760 * C345;
    const double C16105 = C7760 * C2303;
    const double C16099 = C7760 * C2294;
    const double C16531 = C7760 * C2732;
    const double C16525 = C7760 * C2736;
    const double C39874 = C7760 * C630;
    const double C39868 = C7760 * C620;
    const double C1698 = C1696 + C1697;
    const double C30473 = C30470 + C30471;
    const double C33234 = C33233 + C33231;
    const double C21536 = C10119 * C20291;
    const double C21528 = C10113 * C20291;
    const double C21907 = C10115 * C20291;
    const double C22045 = C10757 * C20291;
    const double C42516 = C10119 * C34067;
    const double C42508 = C10113 * C34067;
    const double C42881 = C10115 * C34067;
    const double C43019 = C10757 * C34067;
    const double C48041 = C48039 / C47862;
    const double C889 =
        (3 * C48160 + ae * C48161 + C48108 * C48188 + ae * C48107 * C48281 +
         C48107 *
             (ae * C48281 +
              C48107 *
                  (3 * C48184 + ae * C48185 +
                   C48108 * (2 * C48180 + ae * C48181 +
                             C48108 * (C48176 + ae * C48108 * C48177 +
                                       C48108 * (ae * C48177 +
                                                 C48108 * std::pow(C48110, 8) *
                                                     bs[8] * C48118)))))) /
        C47867;
    const double C138 = (5 * (3 * C48254 + C48108 * C48260 + C48499 * ae) +
                         C48108 * (4 * C48260 + C48108 * C48281 + C48503 * ae) +
                         (4 * C48499 + C48108 * C48503) * ae) /
                        C47862;
    const double C249 =
        (C48238 * (4 * C48260 + C48108 * C48281 + C48503 * ae)) / C47862;
    const double C357 =
        (C48107 * (4 * C48260 + C48108 * C48281 + C48503 * ae)) / C47862;
    const double C526 =
        (3 * C48254 + C48108 * C48260 + C48499 * ae + C48281 * C48287) / C47862;
    const double C628 = (C48107 * C48238 * C48281) / C47862;
    const double C879 =
        (3 * C48254 + C48108 * C48260 + C48499 * ae + C48281 * C48331) / C47862;
    const double C11865 = C11858 + C11859;
    const double C11864 = C11856 + C11857;
    const double C13316 = C13312 + C13313;
    const double C44260 = C44256 + C44257;
    const double C3971 = C3953 + C3954;
    const double C3967 = C3945 + C3946;
    const double C3963 = C3937 + C3938;
    const double C3959 = C3929 + C3930;
    const double C4352 = C4341 + C4342;
    const double C4348 = C4333 + C4334;
    const double C4506 = C4495 + C4496;
    const double C4502 = C4487 + C4488;
    const double C5275 = C5257 + C5258;
    const double C5271 = C5249 + C5250;
    const double C5267 = C5241 + C5242;
    const double C5263 = C5233 + C5234;
    const double C6014 = C6003 + C6004;
    const double C6010 = C5995 + C5996;
    const double C22692 = C22674 + C22675;
    const double C22688 = C22666 + C22667;
    const double C22684 = C22658 + C22659;
    const double C22680 = C22650 + C22651;
    const double C23073 = C23062 + C23063;
    const double C23069 = C23054 + C23055;
    const double C23227 = C23216 + C23217;
    const double C23223 = C23208 + C23209;
    const double C31613 = C31595 + C31596;
    const double C31609 = C31587 + C31588;
    const double C31605 = C31579 + C31580;
    const double C31601 = C31571 + C31572;
    const double C32352 = C32341 + C32342;
    const double C32348 = C32333 + C32334;
    const double C47916 = C47899 - C47915;
    const double C7979 = C7952 + C7953;
    const double C7976 = C7946 + C7947;
    const double C7973 = C7940 + C7941;
    const double C7970 = C7934 + C7935;
    const double C7967 = C7928 + C7929;
    const double C7964 = C7922 + C7923;
    const double C7961 = C7916 + C7917;
    const double C7958 = C7910 + C7911;
    const double C8405 = C8396 + C8397;
    const double C8402 = C8390 + C8391;
    const double C8590 = C8577 + C8578;
    const double C8587 = C8571 + C8572;
    const double C8584 = C8565 + C8566;
    const double C8581 = C8559 + C8560;
    const double C15694 = C15667 + C15668;
    const double C15691 = C15661 + C15662;
    const double C15688 = C15655 + C15656;
    const double C15685 = C15649 + C15650;
    const double C15682 = C15643 + C15644;
    const double C15679 = C15637 + C15638;
    const double C15676 = C15631 + C15632;
    const double C15673 = C15625 + C15626;
    const double C16114 = C16105 + C16106;
    const double C16111 = C16099 + C16100;
    const double C16540 = C16531 + C16532;
    const double C16537 = C16525 + C16526;
    const double C39883 = C39874 + C39875;
    const double C39880 = C39868 + C39869;
    const double C30474 = C30473 + C30472;
    const double C33235 = C33234 + C33232;
    const double C48043 = C48029 - C48041;
    const double C13319 = C13316 + C13317;
    const double C44261 = C44260 + C44258;
    const double C47917 = C47916 + C47888;
    const double C8385 = C7967 + C7968;
    const double C8384 = C7964 + C7965;
    const double C40617 = C8589 + C8590;
    const double C40614 = C8590 + C8589;
    const double C40616 = C8586 + C8587;
    const double C40615 = C8587 + C8586;
    const double C16520 = C15682 + C15683;
    const double C16519 = C15679 + C15680;
    const double C48044 = C48043 + C48014;
    const double C13320 = C13319 + C13318;
    const double C44262 = C44261 + C44259;
    const double C26839 = C47917 * C528;
    const double C26833 = C47917 * C518;
    const double C26827 = C47917 * C242;
    const double C26821 = C47917 * C236;
    const double C26815 = C47917 * C527;
    const double C26809 = C47917 * C517;
    const double C26803 = C47917 * C243;
    const double C26797 = C47917 * C237;
    const double C27283 = C47917 * C1157;
    const double C27277 = C47917 * C1161;
    const double C27464 = C47917 * C619;
    const double C27458 = C47917 * C629;
    const double C27452 = C47917 * C1391;
    const double C27446 = C47917 * C1395;
    const double C28226 = C47917 * C630;
    const double C28220 = C47917 * C620;
    const double C28450 = C47917 * C350;
    const double C28444 = C47917 * C344;
    const double C28438 = C47917 * C351;
    const double C28432 = C47917 * C345;
    const double C29014 = C47917 * C2294;
    const double C29008 = C47917 * C2303;
    const double C29572 = C47917 * C870;
    const double C29566 = C47917 * C880;
    const double C37088 = C47917 * C881;
    const double C37082 = C47917 * C871;
    const double C37916 = C47917 * C2732;
    const double C37910 = C47917 * C2736;
    const double C113 =
        (((((0 - (C47860 * C47861) / C47862) * ae) / C47862 -
           (0 * be) / C47874 + (2 * C47863) / C47862) /
              C47868 -
          ((C47860 * C47897 + 0) * be) / C47862 + C47880 - C47890) /
             C47868 +
         ((C47860 * C47911 + 0) * ae) / C47862) /
            C47868 -
        ((C47860 * (C47911 / C47868 +
                    ((C47860 * C47917 + C48895) * ae) / C47862 + C47913) +
          C49325) *
         be) /
            C47862 +
        C47917 / C47868 + ((C47860 * C47913 + C48903) * ae) / C47862 +
        2 * (C47888 / C47868 - (0 * be) / C47862);
    const double C114 =
        (C47911 / C47868 + ((C47860 * C47917 + C48895) * ae) / C47862 +
         C47913) /
            C47868 -
        ((C47860 * (C47917 / C47868 +
                    ((C47860 * C47913 + C48903) * ae) / C47862 + 2 * C47923) +
          C49318) *
         be) /
            C47862 +
        2 * (C47913 / C47868 + ((C47860 * C47923 + C26643) * ae) / C47862);
    const double C115 =
        (C47917 / C47868 + ((C47860 * C47913 + C48903) * ae) / C47862 +
         2 * C47923) /
            C47868 -
        ((C47860 *
              (C47913 / C47868 + ((C47860 * C47923 + C26643) * ae) / C47862) +
          C49305) *
         be) /
            C47862 +
        3 * (C47923 / C47868 + (0 * ae) / C47862);
    const double C3790 =
        C47911 / C47868 - ((C47860 * C47917 + C48895) * be) / C47862 + C47913;
    const double C3791 = C47917 / C47868 -
                         ((C47860 * C47913 + C48903) * be) / C47862 +
                         2 * C47923;
    const double C22511 =
        C47911 / C47868 + ((C47860 * C47917 + C48895) * ae) / C47862 + C47913;
    const double C22512 = C47917 / C47868 +
                          ((C47860 * C47913 + C48903) * ae) / C47862 +
                          2 * C47923;
    const double C8399 = C8385 + C7969;
    const double C8398 = C8384 + C7966;
    const double C40621 = C8588 + C40617;
    const double C40618 = C40614 + C8588;
    const double C40620 = C8585 + C40616;
    const double C40619 = C40615 + C8585;
    const double C16534 = C16520 + C15684;
    const double C16533 = C16519 + C15681;
    const double C46867 = C9194 * C48044;
    const double C46861 = C9192 * C48044;
    const double C46855 = C9186 * C48044;
    const double C46849 = C9184 * C48044;
    const double C47281 = C9188 * C48044;
    const double C47443 = C9574 * C48044;
    const double C47437 = C9572 * C48044;
    const double C17860 =
        (((((0 - (C47947 * C47997) / C47862) * ae) / C47862 -
           (0 * be) / C47874 + (2 * C47998) / C47862) /
              C47868 -
          ((C47947 * C48033 + 0) * be) / C47862 + C48007 - C48020) /
             C47868 +
         ((C47947 * C48042 + 0) * ae) / C47862) /
            C47868 -
        ((C47947 * (C48042 / C47868 +
                    ((C47947 * C48044 + C49090) * ae) / C47862 + C48036) +
          C49327) *
         be) /
            C47862 +
        C48044 / C47868 + ((C47947 * C48036 + C49097) * ae) / C47862 +
        2 * (C48014 / C47868 - (0 * be) / C47862);
    const double C17861 =
        (C48042 / C47868 + ((C47947 * C48044 + C49090) * ae) / C47862 +
         C48036) /
            C47868 -
        ((C47947 * (C48044 / C47868 +
                    ((C47947 * C48036 + C49097) * ae) / C47862 + 2 * C48050) +
          C49324) *
         be) /
            C47862 +
        2 * (C48036 / C47868 + ((C47947 * C48050 + C36785) * ae) / C47862);
    const double C17862 =
        (C48044 / C47868 + ((C47947 * C48036 + C49097) * ae) / C47862 +
         2 * C48050) /
            C47868 -
        ((C47947 *
              (C48036 / C47868 + ((C47947 * C48050 + C36785) * ae) / C47862) +
          C49315) *
         be) /
            C47862 +
        3 * (C48050 / C47868 + (0 * ae) / C47862);
    const double C20289 =
        C48042 / C47868 - ((C47947 * C48044 + C49090) * be) / C47862 + C48036;
    const double C20290 = C48044 / C47868 -
                          ((C47947 * C48036 + C49097) * be) / C47862 +
                          2 * C48050;
    const double C34065 =
        C48042 / C47868 + ((C47947 * C48044 + C49090) * ae) / C47862 + C48036;
    const double C34066 = C48044 / C47868 +
                          ((C47947 * C48036 + C49097) * ae) / C47862 +
                          2 * C48050;
    const double C26866 = C26839 + C26840;
    const double C26863 = C26833 + C26834;
    const double C26860 = C26827 + C26828;
    const double C26857 = C26821 + C26822;
    const double C26854 = C26815 + C26816;
    const double C26851 = C26809 + C26810;
    const double C26848 = C26803 + C26804;
    const double C26845 = C26797 + C26798;
    const double C27292 = C27283 + C27284;
    const double C27289 = C27277 + C27278;
    const double C27477 = C27464 + C27465;
    const double C27474 = C27458 + C27459;
    const double C27471 = C27452 + C27453;
    const double C27468 = C27446 + C27447;
    const double C28235 = C28226 + C28227;
    const double C28232 = C28220 + C28221;
    const double C28465 = C28450 + C28451;
    const double C28462 = C28444 + C28445;
    const double C28459 = C28438 + C28439;
    const double C28456 = C28432 + C28433;
    const double C29025 = C29014 + C29015;
    const double C29022 = C29008 + C29009;
    const double C29579 = C29572 + C29573;
    const double C29576 = C29566 + C29567;
    const double C37097 = C37088 + C37089;
    const double C37094 = C37082 + C37083;
    const double C37925 = C37916 + C37917;
    const double C37922 = C37910 + C37911;
    const double C3949 = C3790 * C242;
    const double C3941 = C3790 * C236;
    const double C3933 = C3790 * C243;
    const double C3925 = C3790 * C237;
    const double C4345 = C3790 * C517;
    const double C4337 = C3790 * C527;
    const double C4499 = C3790 * C619;
    const double C4491 = C3790 * C629;
    const double C5253 = C3790 * C350;
    const double C5245 = C3790 * C344;
    const double C5237 = C3790 * C351;
    const double C5229 = C3790 * C345;
    const double C6007 = C3790 * C870;
    const double C5999 = C3790 * C880;
    const double C3951 = C3791 * C241;
    const double C3943 = C3791 * C235;
    const double C3935 = C3791 * C242;
    const double C3927 = C3791 * C236;
    const double C4343 = C3791 * C518;
    const double C4335 = C3791 * C528;
    const double C4497 = C3791 * C620;
    const double C4489 = C3791 * C630;
    const double C5255 = C3791 * C349;
    const double C5247 = C3791 * C343;
    const double C5239 = C3791 * C350;
    const double C5231 = C3791 * C344;
    const double C6005 = C3791 * C871;
    const double C5997 = C3791 * C881;
    const double C22670 = C22511 * C242;
    const double C22662 = C22511 * C236;
    const double C22654 = C22511 * C243;
    const double C22646 = C22511 * C237;
    const double C23066 = C22511 * C517;
    const double C23058 = C22511 * C527;
    const double C23220 = C22511 * C619;
    const double C23212 = C22511 * C629;
    const double C31591 = C22511 * C350;
    const double C31583 = C22511 * C344;
    const double C31575 = C22511 * C351;
    const double C31567 = C22511 * C345;
    const double C32345 = C22511 * C870;
    const double C32337 = C22511 * C880;
    const double C22672 = C22512 * C241;
    const double C22664 = C22512 * C235;
    const double C22656 = C22512 * C242;
    const double C22648 = C22512 * C236;
    const double C23064 = C22512 * C518;
    const double C23056 = C22512 * C528;
    const double C23218 = C22512 * C620;
    const double C23210 = C22512 * C630;
    const double C31593 = C22512 * C349;
    const double C31585 = C22512 * C343;
    const double C31577 = C22512 * C350;
    const double C31569 = C22512 * C344;
    const double C32343 = C22512 * C871;
    const double C32335 = C22512 * C881;
    const double C8407 = C8399 * C49007;
    const double C8406 = C8398 * C118;
    const double C47275 = C46855 + C46856;
    const double C21532 = C9192 * C20289;
    const double C21524 = C9184 * C20289;
    const double C21911 = C9186 * C20289;
    const double C22049 = C9574 * C20289;
    const double C21534 = C10117 * C20290;
    const double C21526 = C9574 * C20290;
    const double C21909 = C9572 * C20290;
    const double C22047 = C10113 * C20290;
    const double C42512 = C9192 * C34065;
    const double C42504 = C9184 * C34065;
    const double C42885 = C9186 * C34065;
    const double C43023 = C9574 * C34065;
    const double C42514 = C10117 * C34066;
    const double C42506 = C9574 * C34066;
    const double C42883 = C9572 * C34066;
    const double C43021 = C10113 * C34066;
    const double C27272 = C26854 + C26855;
    const double C27271 = C26851 + C26852;
    const double C29017 = C27476 + C27477;
    const double C29002 = C27477 + C27476;
    const double C29016 = C27473 + C27474;
    const double C29003 = C27474 + C27473;
    const double C37904 = C29579 + C29578;
    const double C37905 = C29576 + C29575;
    const double C3969 = C3949 + C3950;
    const double C3965 = C3941 + C3942;
    const double C3961 = C3933 + C3934;
    const double C3957 = C3925 + C3926;
    const double C4354 = C4345 + C4346;
    const double C4350 = C4337 + C4338;
    const double C4508 = C4499 + C4500;
    const double C4504 = C4491 + C4492;
    const double C5273 = C5253 + C5254;
    const double C5269 = C5245 + C5246;
    const double C5265 = C5237 + C5238;
    const double C5261 = C5229 + C5230;
    const double C6016 = C6007 + C6008;
    const double C6012 = C5999 + C6000;
    const double C3970 = C3951 + C3952;
    const double C3966 = C3943 + C3944;
    const double C3962 = C3935 + C3936;
    const double C3958 = C3927 + C3928;
    const double C4353 = C4343 + C4344;
    const double C4349 = C4335 + C4336;
    const double C4507 = C4497 + C4498;
    const double C4503 = C4489 + C4490;
    const double C5274 = C5255 + C5256;
    const double C5270 = C5247 + C5248;
    const double C5266 = C5239 + C5240;
    const double C5262 = C5231 + C5232;
    const double C6015 = C6005 + C6006;
    const double C6011 = C5997 + C5998;
    const double C22690 = C22670 + C22671;
    const double C22686 = C22662 + C22663;
    const double C22682 = C22654 + C22655;
    const double C22678 = C22646 + C22647;
    const double C23075 = C23066 + C23067;
    const double C23071 = C23058 + C23059;
    const double C23229 = C23220 + C23221;
    const double C23225 = C23212 + C23213;
    const double C31611 = C31591 + C31592;
    const double C31607 = C31583 + C31584;
    const double C31603 = C31575 + C31576;
    const double C31599 = C31567 + C31568;
    const double C32354 = C32345 + C32346;
    const double C32350 = C32337 + C32338;
    const double C22691 = C22672 + C22673;
    const double C22687 = C22664 + C22665;
    const double C22683 = C22656 + C22657;
    const double C22679 = C22648 + C22649;
    const double C23074 = C23064 + C23065;
    const double C23070 = C23056 + C23057;
    const double C23228 = C23218 + C23219;
    const double C23224 = C23210 + C23211;
    const double C31612 = C31593 + C31594;
    const double C31608 = C31585 + C31586;
    const double C31604 = C31577 + C31578;
    const double C31600 = C31569 + C31570;
    const double C32353 = C32343 + C32344;
    const double C32349 = C32335 + C32336;
    const double C8408 = C8406 + C8407;
    const double C47282 = C47275 + C46857;
    const double C27286 = C27272 + C26856;
    const double C27285 = C27271 + C26853;
    const double C29027 = C27475 + C29017;
    const double C29018 = C29002 + C27475;
    const double C29026 = C27472 + C29016;
    const double C29019 = C29003 + C27472;
    const double C37918 = C37904 + C29577;
    const double C37919 = C37905 + C29574;
    const double C47283 = C47282 + C46858;
    const double C27294 = C27286 * C49007;
    const double C27293 = C27285 * C118;
    const double C47284 = C47283 + C46859;
    const double C27295 = C27293 + C27294;
    const double C47285 = C47284 + C46860;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                    C48903 * C127 + C47923 * C121 + C26643 * C128) *
                       C118 +
                   (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                    C48903 * C141 + C47923 * C133 + C26643 * C142) *
                       C49007) *
                      C49050 +
                  ((C47917 * C237 + C48895 * C248 + C47913 * C236 +
                    C48903 * C247 + C47923 * C235 + C26643 * C246) *
                       C118 +
                   (C47917 * C243 + C48895 * C255 + C47913 * C242 +
                    C48903 * C254 + C47923 * C241 + C26643 * C253) *
                       C49007) *
                      C49057 +
                  ((C47917 * C517 + C48895 * C522 + C47913 * C518 +
                    C48903 * C523 + C47923 * C519 + C26643 * C524) *
                       C118 +
                   (C47917 * C527 + C48895 * C532 + C47913 * C528 +
                    C48903 * C533 + C47923 * C529 + C26643 * C534) *
                       C49007) *
                      C26646) *
                     C48978 * C48961 * C110 -
                 (((C47923 * C530 + C26643 * C535 + C47913 * C529 +
                    C48903 * C534 + C47917 * C528 + C48895 * C533) *
                       C49007 +
                   (C47923 * C520 + C26643 * C525 + C47913 * C519 +
                    C48903 * C524 + C47917 * C518 + C48895 * C523) *
                       C118) *
                      C26646 +
                  ((C47923 * C240 + C26643 * C252 + C47913 * C241 +
                    C48903 * C253 + C47917 * C242 + C48895 * C254) *
                       C49007 +
                   (C47923 * C234 + C26643 * C245 + C47913 * C235 +
                    C48903 * C246 + C47917 * C236 + C48895 * C247) *
                       C118) *
                      C49057 +
                  ((C47923 * C134 + C26643 * C143 + C47913 * C133 +
                    C48903 * C142 + C47917 * C132 + C48895 * C141) *
                       C49007 +
                   (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                    C48903 * C128 + C47917 * C120 + C48895 * C127) *
                       C118) *
                      C49050) *
                     C48978 * C48961 * C111 +
                 (((C47917 * C121 + C48895 * C128 + C47913 * C122 +
                    C48903 * C129 + C47923 * C123 + C26643 * C130) *
                       C118 +
                   (C47917 * C133 + C48895 * C142 + C47913 * C134 +
                    C48903 * C143 + C47923 * C135 + C26643 * C144) *
                       C49007) *
                      C49050 +
                  ((C47917 * C235 + C48895 * C246 + C47913 * C234 +
                    C48903 * C245 + C47923 * C233 + C26643 * C244) *
                       C118 +
                   (C47917 * C241 + C48895 * C253 + C47913 * C240 +
                    C48903 * C252 + C47923 * C239 + C26643 * C251) *
                       C49007) *
                      C49057 +
                  ((C47917 * C519 + C48895 * C524 + C47913 * C520 +
                    C48903 * C525 + C47923 * C521 + C26643 * C526) *
                       C118 +
                   (C47917 * C529 + C48895 * C534 + C47913 * C530 +
                    C48903 * C535 + C47923 * C531 + C26643 * C536) *
                       C49007) *
                      C26646) *
                     C48978 * C48961 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   ((C26851 + C26852 + C26853) * C118 +
                    (C26854 + C26855 + C26856) * C49007) *
                       C26646) *
                      C48978 * C229 -
                  (((C47923 * C1159 + C26643 * C1167 + C47913 * C1160 +
                     C48903 * C1168 + C47917 * C1161 + C48895 * C1169) *
                        C49007 +
                    (C47923 * C1155 + C26643 * C1162 + C47913 * C1156 +
                     C48903 * C1163 + C47917 * C1157 + C48895 * C1164) *
                        C118) *
                       C26646 +
                   ((C26856 + C26855 + C26854) * C49007 +
                    (C26853 + C26852 + C26851) * C118) *
                       C49057 +
                   ((C26850 + C26849 + C26848) * C49007 +
                    (C26847 + C26846 + C26845) * C118) *
                       C49050) *
                      C48978 * C49279) *
                     C231 +
                 ((((C26857 + C26858 + C26859) * C118 +
                    (C26860 + C26861 + C26862) * C49007) *
                       C49050 +
                   ((C26863 + C26864 + C26865) * C118 +
                    (C26866 + C26867 + C26868) * C49007) *
                       C49057 +
                   ((C47917 * C1156 + C48895 * C1163 + C47913 * C1155 +
                     C48903 * C1162 + C47923 * C1158 + C26643 * C1165) *
                        C118 +
                    (C47917 * C1160 + C48895 * C1168 + C47913 * C1159 +
                     C48903 * C1167 + C47923 * C1166 + C26643 * C1170) *
                        C49007) *
                       C26646) *
                      C48978 * C49279 -
                  (((C26868 + C26867 + C26866) * C49007 +
                    (C26865 + C26864 + C26863) * C118) *
                       C26646 +
                   ((C26862 + C26861 + C26860) * C49007 +
                    (C26859 + C26858 + C26857) * C118) *
                       C49057 +
                   ((C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49007 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C118) *
                       C49050) *
                      C48978 * C229) *
                     C49277)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   ((C26851 + C26852 + C26853) * C118 +
                    (C26854 + C26855 + C26856) * C49007) *
                       C26646) *
                      C339 -
                  (((C47923 * C1393 + C26643 * C1401 + C47913 * C1394 +
                     C48903 * C1402 + C47917 * C1395 + C48895 * C1403) *
                        C49007 +
                    (C47923 * C1389 + C26643 * C1396 + C47913 * C1390 +
                     C48903 * C1397 + C47917 * C1391 + C48895 * C1398) *
                        C118) *
                       C26646 +
                   ((C47923 * C631 + C26643 * C636 + C47913 * C630 +
                     C48903 * C635 + C47917 * C629 + C48895 * C634) *
                        C49007 +
                    (C47923 * C621 + C26643 * C626 + C47913 * C620 +
                     C48903 * C625 + C47917 * C619 + C48895 * C624) *
                        C118) *
                       C49057 +
                   ((C47923 * C349 + C26643 * C361 + C47913 * C350 +
                     C48903 * C362 + C47917 * C351 + C48895 * C363) *
                        C49007 +
                    (C47923 * C343 + C26643 * C354 + C47913 * C344 +
                     C48903 * C355 + C47917 * C345 + C48895 * C356) *
                        C118) *
                       C49050) *
                      C49281) *
                     C48961 * C231 +
                 ((((C47917 * C344 + C48895 * C355 + C47913 * C343 +
                     C48903 * C354 + C47923 * C342 + C26643 * C353) *
                        C118 +
                    (C47917 * C350 + C48895 * C362 + C47913 * C349 +
                     C48903 * C361 + C47923 * C348 + C26643 * C360) *
                        C49007) *
                       C49050 +
                   ((C47917 * C620 + C48895 * C625 + C47913 * C621 +
                     C48903 * C626 + C47923 * C622 + C26643 * C627) *
                        C118 +
                    (C47917 * C630 + C48895 * C635 + C47913 * C631 +
                     C48903 * C636 + C47923 * C632 + C26643 * C637) *
                        C49007) *
                       C49057 +
                   ((C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                     C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                        C118 +
                    (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                     C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                        C49007) *
                       C26646) *
                      C49281 -
                  (((C26868 + C26867 + C26866) * C49007 +
                    (C26865 + C26864 + C26863) * C118) *
                       C26646 +
                   ((C26862 + C26861 + C26860) * C49007 +
                    (C26859 + C26858 + C26857) * C118) *
                       C49057 +
                   ((C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49007 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C118) *
                       C49050) *
                      C339) *
                     C48961 * C49277)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   ((C26851 + C26852 + C26853) * C118 +
                    (C26854 + C26855 + C26856) * C49007) *
                       C26646) *
                      C48978 * C447 -
                  (((C47923 * C1159 + C26643 * C1167 + C47913 * C1160 +
                     C48903 * C1168 + C47917 * C1161 + C48895 * C1169) *
                        C49007 +
                    (C47923 * C1155 + C26643 * C1162 + C47913 * C1156 +
                     C48903 * C1163 + C47917 * C1157 + C48895 * C1164) *
                        C118) *
                       C26646 +
                   ((C26856 + C26855 + C26854) * C49007 +
                    (C26853 + C26852 + C26851) * C118) *
                       C49057 +
                   ((C26850 + C26849 + C26848) * C49007 +
                    (C26847 + C26846 + C26845) * C118) *
                       C49050) *
                      C48978 * C49279) *
                     C449 +
                 ((((C26857 + C26858 + C26859) * C118 +
                    (C26860 + C26861 + C26862) * C49007) *
                       C49050 +
                   ((C26863 + C26864 + C26865) * C118 +
                    (C26866 + C26867 + C26868) * C49007) *
                       C49057 +
                   ((C47917 * C1156 + C48895 * C1163 + C47913 * C1155 +
                     C48903 * C1162 + C47923 * C1158 + C26643 * C1165) *
                        C118 +
                    (C47917 * C1160 + C48895 * C1168 + C47913 * C1159 +
                     C48903 * C1167 + C47923 * C1166 + C26643 * C1170) *
                        C49007) *
                       C26646) *
                      C48978 * C49279 -
                  (((C26868 + C26867 + C26866) * C49007 +
                    (C26865 + C26864 + C26863) * C118) *
                       C26646 +
                   ((C26862 + C26861 + C26860) * C49007 +
                    (C26859 + C26858 + C26857) * C118) *
                       C49057 +
                   ((C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49007 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C118) *
                       C49050) *
                      C48978 * C447) *
                     C49277)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                    C48903 * C127 + C47923 * C121 + C26643 * C128) *
                       C118 +
                   (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                    C48903 * C141 + C47923 * C133 + C26643 * C142) *
                       C49007) *
                      C49050 +
                  ((C26845 + C26846 + C26847) * C118 +
                   (C26848 + C26849 + C26850) * C49007) *
                      C49057 +
                  C27295 * C26646) *
                     C48978 * C513 -
                 (((C27287 + C27288 + C27289) * C49007 +
                   (C27290 + C27291 + C27292) * C118) *
                      C26646 +
                  ((C26856 + C26855 + C26854) * C49007 +
                   (C26853 + C26852 + C26851) * C118) *
                      C49057 +
                  ((C26850 + C26849 + C26848) * C49007 +
                   (C26847 + C26846 + C26845) * C118) *
                      C49050) *
                     C48978 * C514 +
                 (C27295 * C49050 +
                  ((C27292 + C27291 + C27290) * C118 +
                   (C27289 + C27288 + C27287) * C49007) *
                      C49057 +
                  ((C47917 * C1661 + C48895 * C1664 + C47913 * C1662 +
                    C48903 * C1665 + C47923 * C1663 + C26643 * C1666) *
                       C118 +
                   (C47917 * C1667 + C48895 * C1670 + C47913 * C1668 +
                    C48903 * C1671 + C47923 * C1669 + C26643 * C1672) *
                       C49007) *
                      C26646) *
                     C48978 * C515) *
                C48927) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   C27295 * C26646) *
                      C339 -
                  (((C27466 + C27467 + C27468) * C49007 +
                    (C27469 + C27470 + C27471) * C118) *
                       C26646 +
                   ((C27472 + C27473 + C27474) * C49007 +
                    (C27475 + C27476 + C27477) * C118) *
                       C49057 +
                   ((C47923 * C349 + C26643 * C361 + C47913 * C350 +
                     C48903 * C362 + C47917 * C351 + C48895 * C363) *
                        C49007 +
                    (C47923 * C343 + C26643 * C354 + C47913 * C344 +
                     C48903 * C355 + C47917 * C345 + C48895 * C356) *
                        C118) *
                       C49050) *
                      C49281) *
                     C447 +
                 ((((C27477 + C27476 + C27475) * C118 +
                    (C27474 + C27473 + C27472) * C49007) *
                       C49050 +
                   ((C27471 + C27470 + C27469) * C118 +
                    (C27468 + C27467 + C27466) * C49007) *
                       C49057 +
                   ((C47917 * C1844 + C48895 * C1847 + C47913 * C1845 +
                     C48903 * C1848 + C47923 * C1846 + C26643 * C1849) *
                        C118 +
                    (C47917 * C1850 + C48895 * C1853 + C47913 * C1851 +
                     C48903 * C1854 + C47923 * C1852 + C26643 * C1855) *
                        C49007) *
                       C26646) *
                      C49281 -
                  (((C27287 + C27288 + C27289) * C49007 +
                    (C27290 + C27291 + C27292) * C118) *
                       C26646 +
                   ((C26856 + C26855 + C26854) * C49007 +
                    (C26853 + C26852 + C26851) * C118) *
                       C49057 +
                   ((C26850 + C26849 + C26848) * C49007 +
                    (C26847 + C26846 + C26845) * C118) *
                       C49050) *
                      C339) *
                     C49279) *
                C48927) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   C27295 * C26646) *
                      C721 -
                  (((C27466 + C27467 + C27468) * C49007 +
                    (C27469 + C27470 + C27471) * C118) *
                       C26646 +
                   ((C27472 + C27473 + C27474) * C49007 +
                    (C27475 + C27476 + C27477) * C118) *
                       C49057 +
                   ((C47923 * C349 + C26643 * C361 + C47913 * C350 +
                     C48903 * C362 + C47917 * C351 + C48895 * C363) *
                        C49007 +
                    (C47923 * C343 + C26643 * C354 + C47913 * C344 +
                     C48903 * C355 + C47917 * C345 + C48895 * C356) *
                        C118) *
                       C49050) *
                      C49281) *
                     C48961 * C449 +
                 ((((C47917 * C344 + C48895 * C355 + C47913 * C343 +
                     C48903 * C354 + C47923 * C342 + C26643 * C353) *
                        C118 +
                    (C47917 * C350 + C48895 * C362 + C47913 * C349 +
                     C48903 * C361 + C47923 * C348 + C26643 * C360) *
                        C49007) *
                       C49050 +
                   ((C47917 * C620 + C48895 * C625 + C47913 * C621 +
                     C48903 * C626 + C47923 * C622 + C26643 * C627) *
                        C118 +
                    (C47917 * C630 + C48895 * C635 + C47913 * C631 +
                     C48903 * C636 + C47923 * C632 + C26643 * C637) *
                        C49007) *
                       C49057 +
                   ((C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                     C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                        C118 +
                    (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                     C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                        C49007) *
                       C26646) *
                      C49281 -
                  (((C26868 + C26867 + C26866) * C49007 +
                    (C26865 + C26864 + C26863) * C118) *
                       C26646 +
                   ((C26862 + C26861 + C26860) * C49007 +
                    (C26859 + C26858 + C26857) * C118) *
                       C49057 +
                   ((C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49007 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C118) *
                       C49050) *
                      C721) *
                     C48961 * C49277)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C118 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49007) *
                       C49050 +
                   ((C26845 + C26846 + C26847) * C118 +
                    (C26848 + C26849 + C26850) * C49007) *
                       C49057 +
                   C27295 * C26646) *
                      C721 -
                  (((C27466 + C27467 + C27468) * C49007 +
                    (C27469 + C27470 + C27471) * C118) *
                       C26646 +
                   ((C27472 + C27473 + C27474) * C49007 +
                    (C27475 + C27476 + C27477) * C118) *
                       C49057 +
                   ((C47923 * C349 + C26643 * C361 + C47913 * C350 +
                     C48903 * C362 + C47917 * C351 + C48895 * C363) *
                        C49007 +
                    (C47923 * C343 + C26643 * C354 + C47913 * C344 +
                     C48903 * C355 + C47917 * C345 + C48895 * C356) *
                        C118) *
                       C49050) *
                      C49281) *
                     C229 +
                 ((((C27477 + C27476 + C27475) * C118 +
                    (C27474 + C27473 + C27472) * C49007) *
                       C49050 +
                   ((C27471 + C27470 + C27469) * C118 +
                    (C27468 + C27467 + C27466) * C49007) *
                       C49057 +
                   ((C47917 * C1844 + C48895 * C1847 + C47913 * C1845 +
                     C48903 * C1848 + C47923 * C1846 + C26643 * C1849) *
                        C118 +
                    (C47917 * C1850 + C48895 * C1853 + C47913 * C1851 +
                     C48903 * C1854 + C47923 * C1852 + C26643 * C1855) *
                        C49007) *
                       C26646) *
                      C49281 -
                  (((C27287 + C27288 + C27289) * C49007 +
                    (C27290 + C27291 + C27292) * C118) *
                       C26646 +
                   ((C26856 + C26855 + C26854) * C49007 +
                    (C26853 + C26852 + C26851) * C118) *
                       C49057 +
                   ((C26850 + C26849 + C26848) * C49007 +
                    (C26847 + C26846 + C26845) * C118) *
                       C49050) *
                      C721) *
                     C49279) *
                C48927) /
               (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                    C48903 * C127 + C47923 * C121 + C26643 * C128) *
                       C118 +
                   (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                    C48903 * C141 + C47923 * C133 + C26643 * C142) *
                       C49007) *
                      C49050 +
                  ((C26845 + C26846 + C26847) * C118 +
                   (C26848 + C26849 + C26850) * C49007) *
                      C49057 +
                  C27295 * C26646) *
                     C867 -
                 (((C27466 + C27467 + C27468) * C49007 +
                   (C27469 + C27470 + C27471) * C118) *
                      C26646 +
                  ((C27472 + C27473 + C27474) * C49007 +
                   (C27475 + C27476 + C27477) * C118) *
                      C49057 +
                  ((C47923 * C349 + C26643 * C361 + C47913 * C350 +
                    C48903 * C362 + C47917 * C351 + C48895 * C363) *
                       C49007 +
                   (C47923 * C343 + C26643 * C354 + C47913 * C344 +
                    C48903 * C355 + C47917 * C345 + C48895 * C356) *
                       C118) *
                      C49050) *
                     C868 +
                 (((C47917 * C870 + C48895 * C875 + C47913 * C871 +
                    C48903 * C876 + C47923 * C872 + C26643 * C877) *
                       C118 +
                   (C47917 * C880 + C48895 * C885 + C47913 * C881 +
                    C48903 * C886 + C47923 * C882 + C26643 * C887) *
                       C49007) *
                      C49050 +
                  ((C47917 * C2294 + C48895 * C2300 + C47913 * C2295 +
                    C48903 * C2301 + C47923 * C2296 + C26643 * C2302) *
                       C118 +
                   (C47917 * C2303 + C48895 * C2312 + C47913 * C2304 +
                    C48903 * C2313 + C47923 * C2305 + C26643 * C2314) *
                       C49007) *
                      C49057 +
                  ((C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                    C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                       C118 +
                   (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                    C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                       C49007) *
                      C26646) *
                     C869) *
                C48961 * C48927) /
               (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C4966 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49252 +
            (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
               C49050 +
           ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
            C25964 * C4967 + C25965 * C49094) *
               C49057 +
           (C24254 * C4966 + C24255 * C49252 + (C24437 + C24436) * C4967 +
            (C24435 + C24434) * C49094) *
               C26646) *
              C48978 * C48961 * C110 -
          (((C23692 * C1393 + C48900 * C1401 + C23691 * C1394 +
             C23685 * C1402) *
                C49094 +
            (C23692 * C1389 + C48900 * C1396 + C23691 * C1390 +
             C23685 * C1397) *
                C4967 +
            (C23891 + C23890) * C49252 + (C23889 + C23888) * C4966) *
               C26646 +
           ((C25171 + C25170) * C49094 + (C25169 + C25168) * C4967 +
            (C23887 + C23886) * C49252 + (C23885 + C23884) * C4966) *
               C49057 +
           ((C25413 + C25412) * C49094 + (C25411 + C25410) * C4967 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49252 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C4966) *
               C49050) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C4966 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C49252 +
            (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
                C4967 +
            (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
                C49094) *
               C49050 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C4966 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C49252 +
            (C23691 * C621 + C23685 * C626 + C23692 * C622 + C48900 * C627) *
                C4967 +
            (C23691 * C631 + C23685 * C636 + C23692 * C632 + C48900 * C637) *
                C49094) *
               C49057 +
           ((C23691 * C519 + C23685 * C524 + C23692 * C520 + C48900 * C525) *
                C4966 +
            (C23691 * C529 + C23685 * C534 + C23692 * C530 + C48900 * C535) *
                C49252 +
            (C23691 * C1389 + C23685 * C1396 + C23692 * C1392 +
             C48900 * C1399) *
                C4967 +
            (C23691 * C1393 + C23685 * C1401 + C23692 * C1400 +
             C48900 * C1404) *
                C49094) *
               C26646) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            (C24254 * C4966 + C24255 * C49252 + (C24437 + C24436) * C4967 +
             (C24435 + C24434) * C49094) *
                C26646) *
               C48978 * C229 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C4967 +
             (C23883 + C23882) * C49252 + (C23881 + C23880) * C4966) *
                C26646 +
            ((C24434 + C24435) * C49094 + (C24436 + C24437) * C4967 +
             (C23879 + C23878) * C49252 + (C23877 + C23876) * C4966) *
                C49057 +
            (C25978 * C49094 + C25979 * C4967 + (C23875 + C23874) * C49252 +
             (C23873 + C23872) * C4966) *
                C49050) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C4966 + (C23886 + C23887) * C49252 +
             (C25168 + C25169) * C4967 + (C25170 + C25171) * C49094) *
                C49050 +
            ((C23888 + C23889) * C4966 + (C23890 + C23891) * C49252 +
             (C29928 + C29929) * C4967 + (C29930 + C29931) * C49094) *
                C49057 +
            ((C23892 + C23893) * C4966 + (C23894 + C23895) * C49252 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C26646) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C4967 +
             (C23891 + C23890) * C49252 + (C23889 + C23888) * C4966) *
                C26646 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C4967 +
             (C23887 + C23886) * C49252 + (C23885 + C23884) * C4966) *
                C49057 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C4967 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49252 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C4966) *
                C49050) *
               C48978 * C229) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            (C24254 * C4966 + C24255 * C49252 + (C24437 + C24436) * C4967 +
             (C24435 + C24434) * C49094) *
                C26646) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C4967 +
             (C24434 + C24435) * C49252 + (C24436 + C24437) * C4966) *
                C26646 +
            (C25976 * C49094 + C25977 * C4967 + C25978 * C49252 +
             C25979 * C4966) *
                C49057 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C4967 +
             (C25405 + C25404) * C49252 + (C25403 + C25402) * C4966) *
                C49050) *
               C49281) *
              C48961 * C231 +
          ((((C25410 + C25411) * C4966 + (C25412 + C25413) * C49252 +
             (C25414 + C25415) * C4967 + (C25416 + C25417) * C49094) *
                C49050 +
            ((C25168 + C25169) * C4966 + (C25170 + C25171) * C49252 +
             (C25172 + C25173) * C4967 + (C25174 + C25175) * C49094) *
                C49057 +
            ((C29928 + C29929) * C4966 + (C29930 + C29931) * C49252 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C26646) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C4967 +
             (C23891 + C23890) * C49252 + (C23889 + C23888) * C4966) *
                C26646 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C4967 +
             (C23887 + C23886) * C49252 + (C23885 + C23884) * C4966) *
                C49057 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C4967 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49252 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C4966) *
                C49050) *
               C339) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            (C24254 * C4966 + C24255 * C49252 + (C24437 + C24436) * C4967 +
             (C24435 + C24434) * C49094) *
                C26646) *
               C48978 * C447 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C4967 +
             (C23883 + C23882) * C49252 + (C23881 + C23880) * C4966) *
                C26646 +
            ((C24434 + C24435) * C49094 + (C24436 + C24437) * C4967 +
             (C23879 + C23878) * C49252 + (C23877 + C23876) * C4966) *
                C49057 +
            (C25978 * C49094 + C25979 * C4967 + (C23875 + C23874) * C49252 +
             (C23873 + C23872) * C4966) *
                C49050) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C4966 + (C23886 + C23887) * C49252 +
             (C25168 + C25169) * C4967 + (C25170 + C25171) * C49094) *
                C49050 +
            ((C23888 + C23889) * C4966 + (C23890 + C23891) * C49252 +
             (C29928 + C29929) * C4967 + (C29930 + C29931) * C49094) *
                C49057 +
            ((C23892 + C23893) * C4966 + (C23894 + C23895) * C49252 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C26646) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C4967 +
             (C23891 + C23890) * C49252 + (C23889 + C23888) * C4966) *
                C26646 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C4967 +
             (C23887 + C23886) * C49252 + (C23885 + C23884) * C4966) *
                C49057 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C4967 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49252 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C4966) *
                C49050) *
               C48978 * C447) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C4966 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49252 +
            (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
               C49050 +
           ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
            C25964 * C4967 + C25965 * C49094) *
               C49057 +
           C30474 * C26646) *
              C48978 * C513 -
          (((C24430 + C24431) * C49094 + (C24432 + C24433) * C4967 +
            (C23883 + C23882) * C49252 + (C23881 + C23880) * C4966) *
               C26646 +
           ((C24434 + C24435) * C49094 + (C24436 + C24437) * C4967 +
            (C23879 + C23878) * C49252 + (C23877 + C23876) * C4966) *
               C49057 +
           (C25978 * C49094 + C25979 * C4967 + (C23875 + C23874) * C49252 +
            (C23873 + C23872) * C4966) *
               C49050) *
              C48978 * C514 +
          (C30474 * C49050 +
           (C24256 * C4966 + C24257 * C49252 + (C24433 + C24432) * C4967 +
            (C24431 + C24430) * C49094) *
               C49057 +
           ((C24273 + C24272) * C4966 + (C24271 + C24270) * C49252 +
            (C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
             C48900 * C9301) *
                C4967 +
            (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
             C48900 * C9304) *
                C49094) *
               C26646) *
              C48978 * C515) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            C30474 * C26646) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C4967 +
             C30669 * C49252 + C30670 * C4966) *
                C26646 +
            (C25976 * C49094 + C25977 * C4967 + C25978 * C49252 +
             C25979 * C4966) *
                C49057 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C4967 +
             (C25405 + C25404) * C49252 + (C25403 + C25402) * C4966) *
                C49050) *
               C49281) *
              C447 +
          (((C25964 * C4966 + C25965 * C49252 + C25966 * C4967 +
             C25967 * C49094) *
                C49050 +
            (C30468 * C4966 + C30469 * C49252 + (C25769 + C25768) * C4967 +
             (C25767 + C25766) * C49094) *
                C49057 +
            ((C24433 + C24432) * C4966 + (C24431 + C24430) * C49252 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C26646) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C4967 +
             (C23883 + C23882) * C49252 + (C23881 + C23880) * C4966) *
                C26646 +
            (C30669 * C49094 + C30670 * C4967 + (C23879 + C23878) * C49252 +
             (C23877 + C23876) * C4966) *
                C49057 +
            (C25978 * C49094 + C25979 * C4967 + (C23875 + C23874) * C49252 +
             (C23873 + C23872) * C4966) *
                C49050) *
               C339) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            C30474 * C26646) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C4967 +
             C30669 * C49252 + C30670 * C4966) *
                C26646 +
            (C25976 * C49094 + C25977 * C4967 + C25978 * C49252 +
             C25979 * C4966) *
                C49057 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C4967 +
             (C25405 + C25404) * C49252 + (C25403 + C25402) * C4966) *
                C49050) *
               C49281) *
              C48961 * C449 +
          ((((C25410 + C25411) * C4966 + (C25412 + C25413) * C49252 +
             (C25414 + C25415) * C4967 + (C25416 + C25417) * C49094) *
                C49050 +
            ((C25168 + C25169) * C4966 + (C25170 + C25171) * C49252 +
             (C25172 + C25173) * C4967 + (C25174 + C25175) * C49094) *
                C49057 +
            ((C29928 + C29929) * C4966 + (C29930 + C29931) * C49252 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C26646) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C4967 +
             (C23891 + C23890) * C49252 + (C23889 + C23888) * C4966) *
                C26646 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C4967 +
             (C23887 + C23886) * C49252 + (C23885 + C23884) * C4966) *
                C49057 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C4967 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49252 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C4966) *
                C49050) *
               C721) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C4966 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49252 +
             (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
                C49050 +
            ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
             C25964 * C4967 + C25965 * C49094) *
                C49057 +
            C30474 * C26646) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C4967 +
             C30669 * C49252 + C30670 * C4966) *
                C26646 +
            (C25976 * C49094 + C25977 * C4967 + C25978 * C49252 +
             C25979 * C4966) *
                C49057 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C4967 +
             (C25405 + C25404) * C49252 + (C25403 + C25402) * C4966) *
                C49050) *
               C49281) *
              C229 +
          (((C25964 * C4966 + C25965 * C49252 + C25966 * C4967 +
             C25967 * C49094) *
                C49050 +
            (C30468 * C4966 + C30469 * C49252 + (C25769 + C25768) * C4967 +
             (C25767 + C25766) * C49094) *
                C49057 +
            ((C24433 + C24432) * C4966 + (C24431 + C24430) * C49252 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C26646) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C4967 +
             (C23883 + C23882) * C49252 + (C23881 + C23880) * C4966) *
                C26646 +
            (C30669 * C49094 + C30670 * C4967 + (C23879 + C23878) * C49252 +
             (C23877 + C23876) * C4966) *
                C49057 +
            (C25978 * C49094 + C25979 * C4967 + (C23875 + C23874) * C49252 +
             (C23873 + C23872) * C4966) *
                C49050) *
               C721) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C4966 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49252 +
            (C25402 + C25403) * C4967 + (C25404 + C25405) * C49094) *
               C49050 +
           ((C23872 + C23873) * C4966 + (C23874 + C23875) * C49252 +
            C25964 * C4967 + C25965 * C49094) *
               C49057 +
           C30474 * C26646) *
              C867 -
          (((C25766 + C25767) * C49094 + (C25768 + C25769) * C4967 +
            C30669 * C49252 + C30670 * C4966) *
               C26646 +
           (C25976 * C49094 + C25977 * C4967 + C25978 * C49252 +
            C25979 * C4966) *
               C49057 +
           ((C25409 + C25408) * C49094 + (C25407 + C25406) * C4967 +
            (C25405 + C25404) * C49252 + (C25403 + C25402) * C4966) *
               C49050) *
              C868 +
          ((C26518 * C4966 + C26519 * C49252 + (C26531 + C26530) * C4967 +
            (C26529 + C26528) * C49094) *
               C49050 +
           (C25966 * C4966 + C25967 * C49252 + (C25983 + C25982) * C4967 +
            (C25981 + C25980) * C49094) *
               C49057 +
           ((C25769 + C25768) * C4966 + (C25767 + C25766) * C49252 +
            (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
             C48900 * C10286) *
                C4967 +
            (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
             C48900 * C10289) *
                C49094) *
               C26646) *
              C869) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23691 * C237 + C23685 * C248 + C23692 * C236 + C48900 * C247) *
                C118 +
            (C23691 * C243 + C23685 * C255 + C23692 * C242 + C48900 * C254) *
                C49007) *
               C49322 +
           ((C23691 * C517 + C23685 * C522 + C23692 * C518 + C48900 * C523) *
                C118 +
            (C23691 * C527 + C23685 * C532 + C23692 * C528 + C48900 * C533) *
                C49007) *
               C49312 +
           ((C23691 * C1157 + C23685 * C1164 + C23692 * C1156 +
             C48900 * C1163) *
                C118 +
            (C23691 * C1161 + C23685 * C1169 + C23692 * C1160 +
             C48900 * C1168) *
                C49007) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C23692 * C1159 + C48900 * C1167 + C23691 * C1160 +
             C23685 * C1168) *
                C49007 +
            (C23692 * C1155 + C48900 * C1162 + C23691 * C1156 +
             C23685 * C1163) *
                C118) *
               C49294 +
           ((C23692 * C529 + C48900 * C534 + C23691 * C528 + C23685 * C533) *
                C49007 +
            (C23692 * C519 + C48900 * C524 + C23691 * C518 + C23685 * C523) *
                C118) *
               C49312 +
           ((C23692 * C241 + C48900 * C253 + C23691 * C242 + C23685 * C254) *
                C49007 +
            (C23692 * C235 + C48900 * C246 + C23691 * C236 + C23685 * C247) *
                C118) *
               C49322 +
           ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49007 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C118) *
               C49326) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C118 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C49007) *
               C49326 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C118 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C49007) *
               C49322 +
           ((C23691 * C519 + C23685 * C524 + C23692 * C520 + C48900 * C525) *
                C118 +
            (C23691 * C529 + C23685 * C534 + C23692 * C530 + C48900 * C535) *
                C49007) *
               C49312 +
           ((C23691 * C1155 + C23685 * C1162 + C23692 * C1158 +
             C48900 * C1165) *
                C118 +
            (C23691 * C1159 + C23685 * C1167 + C23692 * C1166 +
             C48900 * C1170) *
                C49007) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22511 * C237 + C49325 * C248 + C22512 * C236 + C49318 * C247 +
             C22513 * C235 + C49305 * C246 + C22514 * C234 + C49288 * C245) *
                C118 +
            (C22511 * C243 + C49325 * C255 + C22512 * C242 + C49318 * C254 +
             C22513 * C241 + C49305 * C253 + C22514 * C240 + C49288 * C252) *
                C49007) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C22514 * C239 + C49288 * C251 + C22513 * C240 + C49305 * C252 +
             C22512 * C241 + C49318 * C253 + C22511 * C242 + C49325 * C254) *
                C49007 +
            (C22514 * C233 + C49288 * C244 + C22513 * C234 + C49305 * C245 +
             C22512 * C235 + C49318 * C246 + C22511 * C236 + C49325 * C247) *
                C118) *
               C49054 +
           ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C49007 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C118) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C22511 * C121 + C49325 * C128 + C22512 * C122 + C49318 * C129 +
             C22513 * C123 + C49305 * C130 + C22514 * C124 + C49288 * C137) *
                C118 +
            (C22511 * C133 + C49325 * C142 + C22512 * C134 + C49318 * C143 +
             C22513 * C135 + C49305 * C144 + C22514 * C136 + C49288 * C145) *
                C49007) *
               C22509 +
           ((C22511 * C235 + C49325 * C246 + C22512 * C234 + C49318 * C245 +
             C22513 * C233 + C49305 * C244 + C22514 * C238 + C49288 * C249) *
                C118 +
            (C22511 * C241 + C49325 * C253 + C22512 * C240 + C49318 * C252 +
             C22513 * C239 + C49305 * C251 + C22514 * C250 + C49288 * C256) *
                C49007) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C2431 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49320 +
            (C23691 * C345 + C23685 * C356 + C23692 * C344 + C48900 * C355) *
                C2432 +
            (C23691 * C351 + C23685 * C363 + C23692 * C350 + C48900 * C362) *
                C49309 +
            (C23691 * C870 + C23685 * C875 + C23692 * C871 + C48900 * C876) *
                C2433 +
            (C23691 * C880 + C23685 * C885 + C23692 * C881 + C48900 * C886) *
                C49287) *
               C22509 +
           ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
            (C24441 + C24440) * C2432 + (C24439 + C24438) * C49309 +
            (C23691 * C2294 + C23685 * C2300 + C23692 * C2295 +
             C48900 * C2301) *
                C2433 +
            (C23691 * C2303 + C23685 * C2312 + C23692 * C2304 +
             C48900 * C2313) *
                C49287) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C23692 * C2305 + C48900 * C2314 + C23691 * C2304 +
             C23685 * C2313) *
                C49287 +
            (C23692 * C2296 + C48900 * C2302 + C23691 * C2295 +
             C23685 * C2301) *
                C2433 +
            (C23692 * C631 + C48900 * C636 + C23691 * C630 + C23685 * C635) *
                C49309 +
            (C23692 * C621 + C48900 * C626 + C23691 * C620 + C23685 * C625) *
                C2432 +
            (C23887 + C23886) * C49320 + (C23885 + C23884) * C2431) *
               C49054 +
           ((C23692 * C882 + C48900 * C887 + C23691 * C881 + C23685 * C886) *
                C49287 +
            (C23692 * C872 + C48900 * C877 + C23691 * C871 + C23685 * C876) *
                C2433 +
            (C23692 * C349 + C48900 * C361 + C23691 * C350 + C23685 * C362) *
                C49309 +
            (C23692 * C343 + C48900 * C354 + C23691 * C344 + C23685 * C355) *
                C2432 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49320 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C2431) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C2431 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C49320 +
            (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
                C2432 +
            (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
                C49309 +
            (C23691 * C872 + C23685 * C877 + C23692 * C873 + C48900 * C878) *
                C2433 +
            (C23691 * C882 + C23685 * C887 + C23692 * C883 + C48900 * C888) *
                C49287) *
               C22509 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C2431 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C49320 +
            (C23691 * C621 + C23685 * C626 + C23692 * C622 + C48900 * C627) *
                C2432 +
            (C23691 * C631 + C23685 * C636 + C23692 * C632 + C48900 * C637) *
                C49309 +
            (C23691 * C2296 + C23685 * C2302 + C23692 * C2580 +
             C48900 * C2581) *
                C2433 +
            (C23691 * C2305 + C23685 * C2314 + C23692 * C2582 +
             C48900 * C2583) *
                C49287) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C48978 * C229 -
           (((C23692 * C1668 + C48900 * C1671 + C23691 * C1667 +
              C23685 * C1670) *
                 C49007 +
             (C23692 * C1662 + C48900 * C1665 + C23691 * C1661 +
              C23685 * C1664) *
                 C118) *
                C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C118 + (C23886 + C23887) * C49007) * C49326 +
            ((C23888 + C23889) * C118 + (C23890 + C23891) * C49007) * C49322 +
            ((C23892 + C23893) * C118 + (C23894 + C23895) * C49007) * C49312 +
            ((C23691 * C1662 + C23685 * C1665 + C23692 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C23691 * C1668 + C23685 * C1671 + C23692 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C48978 * C229 -
           (((C22514 * C530 + C49288 * C535 + C22513 * C529 + C49305 * C534 +
              C22512 * C528 + C49318 * C533 + C22511 * C527 + C49325 * C532) *
                 C49007 +
             (C22514 * C520 + C49288 * C525 + C22513 * C519 + C49305 * C524 +
              C22512 * C518 + C49318 * C523 + C22511 * C517 + C49325 * C522) *
                 C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C48978 * C49279) *
              C231 +
          ((((C22686 + C22687 + C22688 + C22689) * C118 +
             (C22690 + C22691 + C22692 + C22693) * C49007) *
                C22509 +
            ((C22511 * C518 + C49325 * C523 + C22512 * C519 + C49318 * C524 +
              C22513 * C520 + C49305 * C525 + C22514 * C521 + C49288 * C526) *
                 C118 +
             (C22511 * C528 + C49325 * C533 + C22512 * C529 + C49318 * C534 +
              C22513 * C530 + C49305 * C535 + C22514 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C23691 * C345 + C23685 * C356 + C23692 * C344 + C48900 * C355) *
                 C2432 +
             (C23691 * C351 + C23685 * C363 + C23692 * C350 + C48900 * C362) *
                 C49309 +
             (C23691 * C870 + C23685 * C875 + C23692 * C871 + C48900 * C876) *
                 C2433 +
             (C23691 * C880 + C23685 * C885 + C23692 * C881 + C48900 * C886) *
                 C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             (C24441 + C24440) * C2432 + (C24439 + C24438) * C49309 +
             (C25164 + C25165) * C2433 + (C25166 + C25167) * C49287) *
                C49054) *
               C48978 * C229 -
           (((C23692 * C2310 + C48900 * C2316 + C23691 * C2309 +
              C23685 * C2315) *
                 C49287 +
             (C23692 * C2298 + C48900 * C2307 + C23691 * C2297 +
              C23685 * C2306) *
                 C2433 +
             (C24434 + C24435) * C49309 + (C24436 + C24437) * C2432 +
             (C23879 + C23878) * C49320 + (C23877 + C23876) * C2431) *
                C49054 +
            ((C25167 + C25166) * C49287 + (C25165 + C25164) * C2433 +
             (C24438 + C24439) * C49309 + (C24440 + C24441) * C2432 +
             (C23875 + C23874) * C49320 + (C23873 + C23872) * C2431) *
                C22509) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C2431 + (C23886 + C23887) * C49320 +
             (C25168 + C25169) * C2432 + (C25170 + C25171) * C49309 +
             (C25172 + C25173) * C2433 + (C25174 + C25175) * C49287) *
                C22509 +
            ((C23888 + C23889) * C2431 + (C23890 + C23891) * C49320 +
             (C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C2432 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49309 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C2433 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49287) *
                C49054) *
               C48978 * C49279 -
           (((C25175 + C25174) * C49287 + (C25173 + C25172) * C2433 +
             (C25171 + C25170) * C49309 + (C25169 + C25168) * C2432 +
             (C23887 + C23886) * C49320 + (C23885 + C23884) * C2431) *
                C49054 +
            ((C23692 * C882 + C48900 * C887 + C23691 * C881 + C23685 * C886) *
                 C49287 +
             (C23692 * C872 + C48900 * C877 + C23691 * C871 + C23685 * C876) *
                 C2433 +
             (C23692 * C349 + C48900 * C361 + C23691 * C350 + C23685 * C362) *
                 C49309 +
             (C23692 * C343 + C48900 * C354 + C23691 * C344 + C23685 * C355) *
                 C2432 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49320 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C2431) *
                C22509) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C339 -
           (((C23692 * C1851 + C48900 * C1854 + C23691 * C1850 +
              C23685 * C1853) *
                 C49007 +
             (C23692 * C1845 + C48900 * C1848 + C23691 * C1844 +
              C23685 * C1847) *
                 C118) *
                C49294 +
            ((C23692 * C1394 + C48900 * C1402 + C23691 * C1395 +
              C23685 * C1403) *
                 C49007 +
             (C23692 * C1390 + C48900 * C1397 + C23691 * C1391 +
              C23685 * C1398) *
                 C118) *
                C49312 +
            ((C23692 * C630 + C48900 * C635 + C23691 * C629 + C23685 * C634) *
                 C49007 +
             (C23692 * C620 + C48900 * C625 + C23691 * C619 + C23685 * C624) *
                 C118) *
                C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C48961 * C231 +
          ((((C23691 * C344 + C23685 * C355 + C23692 * C343 + C48900 * C354) *
                 C118 +
             (C23691 * C350 + C23685 * C362 + C23692 * C349 + C48900 * C361) *
                 C49007) *
                C49326 +
            ((C23691 * C620 + C23685 * C625 + C23692 * C621 + C48900 * C626) *
                 C118 +
             (C23691 * C630 + C23685 * C635 + C23692 * C631 + C48900 * C636) *
                 C49007) *
                C49322 +
            ((C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C49312 +
            ((C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C339 -
           (((C22514 * C632 + C49288 * C637 + C22513 * C631 + C49305 * C636 +
              C22512 * C630 + C49318 * C635 + C22511 * C629 + C49325 * C634) *
                 C49007 +
             (C22514 * C622 + C49288 * C627 + C22513 * C621 + C49305 * C626 +
              C22512 * C620 + C49318 * C625 + C22511 * C619 + C49325 * C624) *
                 C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C48961 * C231 +
          ((((C22511 * C344 + C49325 * C355 + C22512 * C343 + C49318 * C354 +
              C22513 * C342 + C49305 * C353 + C22514 * C341 + C49288 * C352) *
                 C118 +
             (C22511 * C350 + C49325 * C362 + C22512 * C349 + C49318 * C361 +
              C22513 * C348 + C49305 * C360 + C22514 * C347 + C49288 * C359) *
                 C49007) *
                C22509 +
            ((C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
              C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                 C118 +
             (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
              C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
             (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             (C24441 + C24440) * C2432 + (C24439 + C24438) * C49309 +
             (C25164 + C25165) * C2433 + (C25166 + C25167) * C49287) *
                C49054) *
               C339 -
           (((C23692 * C3227 + C48900 * C3230 + C23691 * C3226 +
              C23685 * C3229) *
                 C49287 +
             (C23692 * C3221 + C48900 * C3224 + C23691 * C3220 +
              C23685 * C3223) *
                 C2433 +
             (C25167 + C25166) * C49309 + (C25165 + C25164) * C2432 +
             (C24438 + C24439) * C49320 + (C24440 + C24441) * C2431) *
                C49054 +
            ((C23692 * C2735 + C48900 * C2743 + C23691 * C2736 +
              C23685 * C2744) *
                 C49287 +
             (C23692 * C2731 + C48900 * C2738 + C23691 * C2732 +
              C23685 * C2739) *
                 C2433 +
             (C25409 + C25408) * C49309 + (C25407 + C25406) * C2432 +
             (C25405 + C25404) * C49320 + (C25403 + C25402) * C2431) *
                C22509) *
               C49281) *
              C48961 * C231 +
          ((((C25410 + C25411) * C2431 + (C25412 + C25413) * C49320 +
             (C25414 + C25415) * C2432 + (C25416 + C25417) * C49309 +
             (C23691 * C2731 + C23685 * C2738 + C23692 * C2730 +
              C48900 * C2737) *
                 C2433 +
             (C23691 * C2735 + C23685 * C2743 + C23692 * C2734 +
              C48900 * C2742) *
                 C49287) *
                C22509 +
            ((C25168 + C25169) * C2431 + (C25170 + C25171) * C49320 +
             (C25172 + C25173) * C2432 + (C25174 + C25175) * C49309 +
             (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
              C48900 * C3225) *
                 C2433 +
             (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
              C48900 * C3231) *
                 C49287) *
                C49054) *
               C49281 -
           (((C25175 + C25174) * C49287 + (C25173 + C25172) * C2433 +
             (C25171 + C25170) * C49309 + (C25169 + C25168) * C2432 +
             (C23887 + C23886) * C49320 + (C23885 + C23884) * C2431) *
                C49054 +
            ((C25417 + C25416) * C49287 + (C25415 + C25414) * C2433 +
             (C25413 + C25412) * C49309 + (C25411 + C25410) * C2432 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49320 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C2431) *
                C22509) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C48978 * C447 -
           (((C23692 * C1668 + C48900 * C1671 + C23691 * C1667 +
              C23685 * C1670) *
                 C49007 +
             (C23692 * C1662 + C48900 * C1665 + C23691 * C1661 +
              C23685 * C1664) *
                 C118) *
                C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C118 + (C23886 + C23887) * C49007) * C49326 +
            ((C23888 + C23889) * C118 + (C23890 + C23891) * C49007) * C49322 +
            ((C23892 + C23893) * C118 + (C23894 + C23895) * C49007) * C49312 +
            ((C23691 * C1662 + C23685 * C1665 + C23692 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C23691 * C1668 + C23685 * C1671 + C23692 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C48978 * C447 -
           (((C22514 * C530 + C49288 * C535 + C22513 * C529 + C49305 * C534 +
              C22512 * C528 + C49318 * C533 + C22511 * C527 + C49325 * C532) *
                 C49007 +
             (C22514 * C520 + C49288 * C525 + C22513 * C519 + C49305 * C524 +
              C22512 * C518 + C49318 * C523 + C22511 * C517 + C49325 * C522) *
                 C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C48978 * C49279) *
              C449 +
          ((((C22686 + C22687 + C22688 + C22689) * C118 +
             (C22690 + C22691 + C22692 + C22693) * C49007) *
                C22509 +
            ((C22511 * C518 + C49325 * C523 + C22512 * C519 + C49318 * C524 +
              C22513 * C520 + C49305 * C525 + C22514 * C521 + C49288 * C526) *
                 C118 +
             (C22511 * C528 + C49325 * C533 + C22512 * C529 + C49318 * C534 +
              C22513 * C530 + C49305 * C535 + C22514 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
             (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             (C24441 + C24440) * C2432 + (C24439 + C24438) * C49309 +
             (C25164 + C25165) * C2433 + (C25166 + C25167) * C49287) *
                C49054) *
               C48978 * C447 -
           (((C23692 * C2310 + C48900 * C2316 + C23691 * C2309 +
              C23685 * C2315) *
                 C49287 +
             (C23692 * C2298 + C48900 * C2307 + C23691 * C2297 +
              C23685 * C2306) *
                 C2433 +
             (C24434 + C24435) * C49309 + (C24436 + C24437) * C2432 +
             (C23879 + C23878) * C49320 + (C23877 + C23876) * C2431) *
                C49054 +
            ((C25167 + C25166) * C49287 + (C25165 + C25164) * C2433 +
             (C24438 + C24439) * C49309 + (C24440 + C24441) * C2432 +
             (C23875 + C23874) * C49320 + (C23873 + C23872) * C2431) *
                C22509) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C2431 + (C23886 + C23887) * C49320 +
             (C25168 + C25169) * C2432 + (C25170 + C25171) * C49309 +
             (C25172 + C25173) * C2433 + (C25174 + C25175) * C49287) *
                C22509 +
            ((C23888 + C23889) * C2431 + (C23890 + C23891) * C49320 +
             (C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C2432 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49309 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C2433 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49287) *
                C49054) *
               C48978 * C49279 -
           (((C25175 + C25174) * C49287 + (C25173 + C25172) * C2433 +
             (C25171 + C25170) * C49309 + (C25169 + C25168) * C2432 +
             (C23887 + C23886) * C49320 + (C23885 + C23884) * C2431) *
                C49054 +
            ((C25417 + C25416) * C49287 + (C25415 + C25414) * C2433 +
             (C25413 + C25412) * C49309 + (C25411 + C25410) * C2432 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49320 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C2431) *
                C22509) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
           C24274 * C49312 + C24275 * C49294) *
              C48978 * C513 -
          (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
           ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
           ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
           ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
              C48978 * C514 +
          (C24274 * C49326 + C24275 * C49322 +
           ((C24273 + C24272) * C118 + (C24271 + C24270) * C49007) * C49312 +
           ((C23691 * C9143 + C23685 * C9146 + C23692 * C9144 +
             C48900 * C9147) *
                C118 +
            (C23691 * C9145 + C23685 * C9149 + C23692 * C9148 +
             C48900 * C9150) *
                C49007) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22678 + C22679 + C22680 + C22681) * C118 +
            (C22682 + C22683 + C22684 + C22685) * C49007) *
               C49054) *
              C48978 * C513 -
          (((C23068 + C23069 + C23070 + C23071) * C49007 +
            (C23072 + C23073 + C23074 + C23075) * C118) *
               C49054 +
           ((C22685 + C22684 + C22683 + C22682) * C49007 +
            (C22681 + C22680 + C22679 + C22678) * C118) *
               C22509) *
              C48978 * C514 +
          (((C23075 + C23074 + C23073 + C23072) * C118 +
            (C23071 + C23070 + C23069 + C23068) * C49007) *
               C22509 +
           ((C22511 * C1157 + C49325 * C1164 + C22512 * C1156 + C49318 * C1163 +
             C22513 * C1155 + C49305 * C1162 + C22514 * C1158 +
             C49288 * C1165) *
                C118 +
            (C22511 * C1161 + C49325 * C1169 + C22512 * C1160 + C49318 * C1168 +
             C22513 * C1159 + C49305 * C1167 + C22514 * C1166 +
             C49288 * C1170) *
                C49007) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C2431 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49320 +
            (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
            (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
               C22509 +
           ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
            (C24441 + C24440) * C2432 + (C24439 + C24438) * C49309 +
            (C25164 + C25165) * C2433 + (C25166 + C25167) * C49287) *
               C49054) *
              C48978 * C513 -
          (((C25766 + C25767) * C49287 + (C25768 + C25769) * C2433 +
            (C24434 + C24435) * C49309 + (C24436 + C24437) * C2432 +
            (C23879 + C23878) * C49320 + (C23877 + C23876) * C2431) *
               C49054 +
           ((C25167 + C25166) * C49287 + (C25165 + C25164) * C2433 +
            (C24438 + C24439) * C49309 + (C24440 + C24441) * C2432 +
            (C23875 + C23874) * C49320 + (C23873 + C23872) * C2431) *
               C22509) *
              C48978 * C514 +
          ((C24254 * C2431 + C24255 * C49320 + (C24437 + C24436) * C2432 +
            (C24435 + C24434) * C49309 + (C25769 + C25768) * C2433 +
            (C25767 + C25766) * C49287) *
               C22509 +
           (C24256 * C2431 + C24257 * C49320 + (C24433 + C24432) * C2432 +
            (C24431 + C24430) * C49309 +
            (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
             C48900 * C10073) *
                C2433 +
            (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
             C48900 * C10075) *
                C49287) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C339 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C447 +
          ((((C24441 + C24440) * C118 + (C24439 + C24438) * C49007) * C49326 +
            ((C24437 + C24436) * C118 + (C24435 + C24434) * C49007) * C49322 +
            ((C24433 + C24432) * C118 + (C24431 + C24430) * C49007) * C49312 +
            ((C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C339 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C447 +
          ((((C23229 + C23228 + C23227 + C23226) * C118 +
             (C23225 + C23224 + C23223 + C23222) * C49007) *
                C22509 +
            ((C22511 * C1391 + C49325 * C1398 + C22512 * C1390 +
              C49318 * C1397 + C22513 * C1389 + C49305 * C1396 +
              C22514 * C1392 + C49288 * C1399) *
                 C118 +
             (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 +
              C49318 * C1402 + C22513 * C1393 + C49305 * C1401 +
              C22514 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C23068 + C23069 + C23070 + C23071) * C49007 +
             (C23072 + C23073 + C23074 + C23075) * C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
             (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             C25964 * C2432 + C25965 * C49309 + C25966 * C2433 +
             C25967 * C49287) *
                C49054) *
               C339 -
           (((C25980 + C25981) * C49287 + (C25982 + C25983) * C2433 +
             C25976 * C49309 + C25977 * C2432 + C25978 * C49320 +
             C25979 * C2431) *
                C49054 +
            ((C23692 * C2735 + C48900 * C2743 + C23691 * C2736 +
              C23685 * C2744) *
                 C49287 +
             (C23692 * C2731 + C48900 * C2738 + C23691 * C2732 +
              C23685 * C2739) *
                 C2433 +
             (C25409 + C25408) * C49309 + (C25407 + C25406) * C2432 +
             (C25405 + C25404) * C49320 + (C25403 + C25402) * C2431) *
                C22509) *
               C49281) *
              C447 +
          (((C25964 * C2431 + C25965 * C49320 + C25966 * C2432 +
             C25967 * C49309 + (C25983 + C25982) * C2433 +
             (C25981 + C25980) * C49287) *
                C22509 +
            ((C24437 + C24436) * C2431 + (C24435 + C24434) * C49320 +
             (C25769 + C25768) * C2432 + (C25767 + C25766) * C49309 +
             (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
              C48900 * C10286) *
                 C2433 +
             (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
              C48900 * C10289) *
                 C49287) *
                C49054) *
               C49281 -
           (((C25766 + C25767) * C49287 + (C25768 + C25769) * C2433 +
             (C24434 + C24435) * C49309 + (C24436 + C24437) * C2432 +
             (C23879 + C23878) * C49320 + (C23877 + C23876) * C2431) *
                C49054 +
            (C25976 * C49287 + C25977 * C2433 + C25978 * C49309 +
             C25979 * C2432 + (C23875 + C23874) * C49320 +
             (C23873 + C23872) * C2431) *
                C22509) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C721 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C48961 * C449 +
          ((((C23691 * C344 + C23685 * C355 + C23692 * C343 + C48900 * C354) *
                 C118 +
             (C23691 * C350 + C23685 * C362 + C23692 * C349 + C48900 * C361) *
                 C49007) *
                C49326 +
            ((C23691 * C620 + C23685 * C625 + C23692 * C621 + C48900 * C626) *
                 C118 +
             (C23691 * C630 + C23685 * C635 + C23692 * C631 + C48900 * C636) *
                 C49007) *
                C49322 +
            ((C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C49312 +
            ((C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C721 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C48961 * C449 +
          ((((C22511 * C344 + C49325 * C355 + C22512 * C343 + C49318 * C354 +
              C22513 * C342 + C49305 * C353 + C22514 * C341 + C49288 * C352) *
                 C118 +
             (C22511 * C350 + C49325 * C362 + C22512 * C349 + C49318 * C361 +
              C22513 * C348 + C49305 * C360 + C22514 * C347 + C49288 * C359) *
                 C49007) *
                C22509 +
            ((C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
              C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                 C118 +
             (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
              C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
             (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             C25964 * C2432 + C25965 * C49309 + C25966 * C2433 +
             C25967 * C49287) *
                C49054) *
               C721 -
           (((C25980 + C25981) * C49287 + (C25982 + C25983) * C2433 +
             C25976 * C49309 + C25977 * C2432 + C25978 * C49320 +
             C25979 * C2431) *
                C49054 +
            ((C23692 * C2735 + C48900 * C2743 + C23691 * C2736 +
              C23685 * C2744) *
                 C49287 +
             (C23692 * C2731 + C48900 * C2738 + C23691 * C2732 +
              C23685 * C2739) *
                 C2433 +
             (C25409 + C25408) * C49309 + (C25407 + C25406) * C2432 +
             (C25405 + C25404) * C49320 + (C25403 + C25402) * C2431) *
                C22509) *
               C49281) *
              C48961 * C449 +
          ((((C25410 + C25411) * C2431 + (C25412 + C25413) * C49320 +
             (C25414 + C25415) * C2432 + (C25416 + C25417) * C49309 +
             (C23691 * C2731 + C23685 * C2738 + C23692 * C2730 +
              C48900 * C2737) *
                 C2433 +
             (C23691 * C2735 + C23685 * C2743 + C23692 * C2734 +
              C48900 * C2742) *
                 C49287) *
                C22509 +
            ((C25168 + C25169) * C2431 + (C25170 + C25171) * C49320 +
             (C25172 + C25173) * C2432 + (C25174 + C25175) * C49309 +
             (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
              C48900 * C3225) *
                 C2433 +
             (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
              C48900 * C3231) *
                 C49287) *
                C49054) *
               C49281 -
           (((C25175 + C25174) * C49287 + (C25173 + C25172) * C2433 +
             (C25171 + C25170) * C49309 + (C25169 + C25168) * C2432 +
             (C23887 + C23886) * C49320 + (C23885 + C23884) * C2431) *
                C49054 +
            ((C25417 + C25416) * C49287 + (C25415 + C25414) * C2433 +
             (C25413 + C25412) * C49309 + (C25411 + C25410) * C2432 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49320 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C2431) *
                C22509) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C721 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C229 +
          ((((C24441 + C24440) * C118 + (C24439 + C24438) * C49007) * C49326 +
            ((C24437 + C24436) * C118 + (C24435 + C24434) * C49007) * C49322 +
            ((C24433 + C24432) * C118 + (C24431 + C24430) * C49007) * C49312 +
            ((C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C721 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C229 +
          ((((C23229 + C23228 + C23227 + C23226) * C118 +
             (C23225 + C23224 + C23223 + C23222) * C49007) *
                C22509 +
            ((C22511 * C1391 + C49325 * C1398 + C22512 * C1390 +
              C49318 * C1397 + C22513 * C1389 + C49305 * C1396 +
              C22514 * C1392 + C49288 * C1399) *
                 C118 +
             (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 +
              C49318 * C1402 + C22513 * C1393 + C49305 * C1401 +
              C22514 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C23068 + C23069 + C23070 + C23071) * C49007 +
             (C23072 + C23073 + C23074 + C23075) * C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C2431 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49320 +
             (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
             (C25406 + C25407) * C2433 + (C25408 + C25409) * C49287) *
                C22509 +
            ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
             C25964 * C2432 + C25965 * C49309 + C25966 * C2433 +
             C25967 * C49287) *
                C49054) *
               C721 -
           (((C25980 + C25981) * C49287 + (C25982 + C25983) * C2433 +
             C25976 * C49309 + C25977 * C2432 + C25978 * C49320 +
             C25979 * C2431) *
                C49054 +
            ((C23692 * C2735 + C48900 * C2743 + C23691 * C2736 +
              C23685 * C2744) *
                 C49287 +
             (C23692 * C2731 + C48900 * C2738 + C23691 * C2732 +
              C23685 * C2739) *
                 C2433 +
             (C25409 + C25408) * C49309 + (C25407 + C25406) * C2432 +
             (C25405 + C25404) * C49320 + (C25403 + C25402) * C2431) *
                C22509) *
               C49281) *
              C229 +
          (((C25964 * C2431 + C25965 * C49320 + C25966 * C2432 +
             C25967 * C49309 + (C25983 + C25982) * C2433 +
             (C25981 + C25980) * C49287) *
                C22509 +
            ((C24437 + C24436) * C2431 + (C24435 + C24434) * C49320 +
             (C25769 + C25768) * C2432 + (C25767 + C25766) * C49309 +
             (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
              C48900 * C10286) *
                 C2433 +
             (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
              C48900 * C10289) *
                 C49287) *
                C49054) *
               C49281 -
           (((C25766 + C25767) * C49287 + (C25768 + C25769) * C2433 +
             (C24434 + C24435) * C49309 + (C24436 + C24437) * C2432 +
             (C23879 + C23878) * C49320 + (C23877 + C23876) * C2431) *
                C49054 +
            (C25976 * C49287 + C25977 * C2433 + C25978 * C49309 +
             C25979 * C2432 + (C23875 + C23874) * C49320 +
             (C23873 + C23872) * C2431) *
                C22509) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
           C24274 * C49312 + C24275 * C49294) *
              C867 -
          (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
           ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
           ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
           ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                C49007 +
            (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                C118) *
               C49326) *
              C868 +
          (((C23691 * C870 + C23685 * C875 + C23692 * C871 + C48900 * C876) *
                C118 +
            (C23691 * C880 + C23685 * C885 + C23692 * C881 + C48900 * C886) *
                C49007) *
               C49326 +
           ((C23691 * C2294 + C23685 * C2300 + C23692 * C2295 +
             C48900 * C2301) *
                C118 +
            (C23691 * C2303 + C23685 * C2312 + C23692 * C2304 +
             C48900 * C2313) *
                C49007) *
               C49322 +
           ((C23691 * C2297 + C23685 * C2306 + C23692 * C2298 +
             C48900 * C2307) *
                C118 +
            (C23691 * C2309 + C23685 * C2315 + C23692 * C2310 +
             C48900 * C2316) *
                C49007) *
               C49312 +
           ((C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
             C48900 * C10073) *
                C118 +
            (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
             C48900 * C10075) *
                C49007) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22678 + C22679 + C22680 + C22681) * C118 +
            (C22682 + C22683 + C22684 + C22685) * C49007) *
               C49054) *
              C867 -
          (((C23222 + C23223 + C23224 + C23225) * C49007 +
            (C23226 + C23227 + C23228 + C23229) * C118) *
               C49054 +
           ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
             C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                C49007 +
            (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
             C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                C118) *
               C22509) *
              C868 +
          (((C22511 * C870 + C49325 * C875 + C22512 * C871 + C49318 * C876 +
             C22513 * C872 + C49305 * C877 + C22514 * C873 + C49288 * C878) *
                C118 +
            (C22511 * C880 + C49325 * C885 + C22512 * C881 + C49318 * C886 +
             C22513 * C882 + C49305 * C887 + C22514 * C883 + C49288 * C888) *
                C49007) *
               C22509 +
           ((C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C118 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49007) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C2431 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49320 +
            (C25402 + C25403) * C2432 + (C25404 + C25405) * C49309 +
            C26518 * C2433 + C26519 * C49287) *
               C22509 +
           ((C23872 + C23873) * C2431 + (C23874 + C23875) * C49320 +
            C25964 * C2432 + C25965 * C49309 + C25966 * C2433 +
            C25967 * C49287) *
               C49054) *
              C867 -
          (((C25980 + C25981) * C49287 + (C25982 + C25983) * C2433 +
            C25976 * C49309 + C25977 * C2432 + C25978 * C49320 +
            C25979 * C2431) *
               C49054 +
           ((C26528 + C26529) * C49287 + (C26530 + C26531) * C2433 +
            (C25409 + C25408) * C49309 + (C25407 + C25406) * C2432 +
            (C25405 + C25404) * C49320 + (C25403 + C25402) * C2431) *
               C22509) *
              C868 +
          ((C26518 * C2431 + C26519 * C49320 + (C26531 + C26530) * C2432 +
            (C26529 + C26528) * C49309 +
            (C23691 * C3652 + C23685 * C3655 + C23692 * C3653 +
             C48900 * C3656) *
                C2433 +
            (C23691 * C3658 + C23685 * C3661 + C23692 * C3659 +
             C48900 * C3662) *
                C49287) *
               C22509 +
           (C25966 * C2431 + C25967 * C49320 + (C25983 + C25982) * C2432 +
            (C25981 + C25980) * C49309 +
            (C23691 * C11163 + C23685 * C11165 + C23692 * C17947 +
             C48900 * C17948) *
                C2433 +
            (C23691 * C11166 + C23685 * C11169 + C23692 * C17949 +
             C48900 * C17950) *
                C49287) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[27] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C4966 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49252 +
                    (C47917 * C345 + C48895 * C356 + C47913 * C344 +
                     C48903 * C355 + C47923 * C343 + C26643 * C354) *
                        C4967 +
                    (C47917 * C351 + C48895 * C363 + C47913 * C350 +
                     C48903 * C362 + C47923 * C349 + C26643 * C361) *
                        C49094) *
                       C22509 +
                   ((C26845 + C26846 + C26847) * C4966 +
                    (C26848 + C26849 + C26850) * C49252 +
                    (C27477 + C27476 + C27475) * C4967 +
                    (C27474 + C27473 + C27472) * C49094) *
                       C49054) *
                      C48978 * C48961 * C110 -
                  (((C47923 * C632 + C26643 * C637 + C47913 * C631 +
                     C48903 * C636 + C47917 * C630 + C48895 * C635) *
                        C49094 +
                    (C47923 * C622 + C26643 * C627 + C47913 * C621 +
                     C48903 * C626 + C47917 * C620 + C48895 * C625) *
                        C4967 +
                    (C26862 + C26861 + C26860) * C49252 +
                    (C26859 + C26858 + C26857) * C4966) *
                       C49054 +
                   ((C47923 * C348 + C26643 * C360 + C47913 * C349 +
                     C48903 * C361 + C47917 * C350 + C48895 * C362) *
                        C49094 +
                    (C47923 * C342 + C26643 * C353 + C47913 * C343 +
                     C48903 * C354 + C47917 * C344 + C48895 * C355) *
                        C4967 +
                    (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49252 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C4966) *
                       C22509) *
                      C48978 * C48961 * C111 +
                  (((C47917 * C121 + C48895 * C128 + C47913 * C122 +
                     C48903 * C129 + C47923 * C123 + C26643 * C130) *
                        C4966 +
                    (C47917 * C133 + C48895 * C142 + C47913 * C134 +
                     C48903 * C143 + C47923 * C135 + C26643 * C144) *
                        C49252 +
                    (C47917 * C343 + C48895 * C354 + C47913 * C342 +
                     C48903 * C353 + C47923 * C341 + C26643 * C352) *
                        C4967 +
                    (C47917 * C349 + C48895 * C361 + C47913 * C348 +
                     C48903 * C360 + C47923 * C347 + C26643 * C359) *
                        C49094) *
                       C22509 +
                   ((C47917 * C235 + C48895 * C246 + C47913 * C234 +
                     C48903 * C245 + C47923 * C233 + C26643 * C244) *
                        C4966 +
                    (C47917 * C241 + C48895 * C253 + C47913 * C240 +
                     C48903 * C252 + C47923 * C239 + C26643 * C251) *
                        C49252 +
                    (C47917 * C621 + C48895 * C626 + C47913 * C622 +
                     C48903 * C627 + C47923 * C623 + C26643 * C628) *
                        C4967 +
                    (C47917 * C631 + C48895 * C636 + C47913 * C632 +
                     C48903 * C637 + C47923 * C633 + C26643 * C638) *
                        C49094) *
                       C49054) *
                      C48978 * C48961 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C47917 * C345 + C48895 * C356 + C47913 * C344 +
                      C48903 * C355 + C47923 * C343 + C26643 * C354) *
                         C4967 +
                     (C47917 * C351 + C48895 * C363 + C47913 * C350 +
                      C48903 * C362 + C47923 * C349 + C26643 * C361) *
                         C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 +
                     (C27477 + C27476 + C27475) * C4967 +
                     (C27474 + C27473 + C27472) * C49094) *
                        C49054) *
                       C48978 * C229 -
                   (((C27466 + C27467 + C27468) * C49094 +
                     (C27469 + C27470 + C27471) * C4967 +
                     (C26856 + C26855 + C26854) * C49252 +
                     (C26853 + C26852 + C26851) * C4966) *
                        C49054 +
                    ((C27472 + C27473 + C27474) * C49094 +
                     (C27475 + C27476 + C27477) * C4967 +
                     (C26850 + C26849 + C26848) * C49252 +
                     (C26847 + C26846 + C26845) * C4966) *
                        C22509) *
                       C48978 * C49279) *
                      C231 +
                  ((((C26857 + C26858 + C26859) * C4966 +
                     (C26860 + C26861 + C26862) * C49252 +
                     (C28232 + C28233 + C28234) * C4967 +
                     (C28235 + C28236 + C28237) * C49094) *
                        C22509 +
                    ((C26863 + C26864 + C26865) * C4966 +
                     (C26866 + C26867 + C26868) * C49252 +
                     (C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                      C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                         C4967 +
                     (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                      C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C28237 + C28236 + C28235) * C49094 +
                     (C28234 + C28233 + C28232) * C4967 +
                     (C26862 + C26861 + C26860) * C49252 +
                     (C26859 + C26858 + C26857) * C4966) *
                        C49054 +
                    ((C47923 * C348 + C26643 * C360 + C47913 * C349 +
                      C48903 * C361 + C47917 * C350 + C48895 * C362) *
                         C49094 +
                     (C47923 * C342 + C26643 * C353 + C47913 * C343 +
                      C48903 * C354 + C47917 * C344 + C48895 * C355) *
                         C4967 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49252 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C4966) *
                        C22509) *
                       C48978 * C229) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C28456 + C28457 + C28458) * C4967 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 +
                     (C27477 + C27476 + C27475) * C4967 +
                     (C27474 + C27473 + C27472) * C49094) *
                        C49054) *
                       C339 -
                   (((C47923 * C2305 + C26643 * C2314 + C47913 * C2304 +
                      C48903 * C2313 + C47917 * C2303 + C48895 * C2312) *
                         C49094 +
                     (C47923 * C2296 + C26643 * C2302 + C47913 * C2295 +
                      C48903 * C2301 + C47917 * C2294 + C48895 * C2300) *
                         C4967 +
                     (C27472 + C27473 + C27474) * C49252 +
                     (C27475 + C27476 + C27477) * C4966) *
                        C49054 +
                    ((C47923 * C882 + C26643 * C887 + C47913 * C881 +
                      C48903 * C886 + C47917 * C880 + C48895 * C885) *
                         C49094 +
                     (C47923 * C872 + C26643 * C877 + C47913 * C871 +
                      C48903 * C876 + C47917 * C870 + C48895 * C875) *
                         C4967 +
                     (C28461 + C28460 + C28459) * C49252 +
                     (C28458 + C28457 + C28456) * C4966) *
                        C22509) *
                       C49281) *
                      C48961 * C231 +
                  ((((C28462 + C28463 + C28464) * C4966 +
                     (C28465 + C28466 + C28467) * C49252 +
                     (C47917 * C871 + C48895 * C876 + C47913 * C872 +
                      C48903 * C877 + C47923 * C873 + C26643 * C878) *
                         C4967 +
                     (C47917 * C881 + C48895 * C886 + C47913 * C882 +
                      C48903 * C887 + C47923 * C883 + C26643 * C888) *
                         C49094) *
                        C22509 +
                    ((C28232 + C28233 + C28234) * C4966 +
                     (C28235 + C28236 + C28237) * C49252 +
                     (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                      C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                         C4967 +
                     (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                      C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C28237 + C28236 + C28235) * C49094 +
                     (C28234 + C28233 + C28232) * C4967 +
                     (C26862 + C26861 + C26860) * C49252 +
                     (C26859 + C26858 + C26857) * C4966) *
                        C49054 +
                    ((C28467 + C28466 + C28465) * C49094 +
                     (C28464 + C28463 + C28462) * C4967 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49252 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C4966) *
                        C22509) *
                       C339) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C28456 + C28457 + C28458) * C4967 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 +
                     (C27477 + C27476 + C27475) * C4967 +
                     (C27474 + C27473 + C27472) * C49094) *
                        C49054) *
                       C48978 * C447 -
                   (((C27466 + C27467 + C27468) * C49094 +
                     (C27469 + C27470 + C27471) * C4967 +
                     (C26856 + C26855 + C26854) * C49252 +
                     (C26853 + C26852 + C26851) * C4966) *
                        C49054 +
                    ((C27472 + C27473 + C27474) * C49094 +
                     (C27475 + C27476 + C27477) * C4967 +
                     (C26850 + C26849 + C26848) * C49252 +
                     (C26847 + C26846 + C26845) * C4966) *
                        C22509) *
                       C48978 * C49279) *
                      C449 +
                  ((((C26857 + C26858 + C26859) * C4966 +
                     (C26860 + C26861 + C26862) * C49252 +
                     (C28232 + C28233 + C28234) * C4967 +
                     (C28235 + C28236 + C28237) * C49094) *
                        C22509 +
                    ((C26863 + C26864 + C26865) * C4966 +
                     (C26866 + C26867 + C26868) * C49252 +
                     (C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                      C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                         C4967 +
                     (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                      C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C28237 + C28236 + C28235) * C49094 +
                     (C28234 + C28233 + C28232) * C4967 +
                     (C26862 + C26861 + C26860) * C49252 +
                     (C26859 + C26858 + C26857) * C4966) *
                        C49054 +
                    ((C28467 + C28466 + C28465) * C49094 +
                     (C28464 + C28463 + C28462) * C4967 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49252 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C4966) *
                        C22509) *
                       C48978 * C447) *
                      C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C4966 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49252 +
                    (C28456 + C28457 + C28458) * C4967 +
                    (C28459 + C28460 + C28461) * C49094) *
                       C22509 +
                   ((C26845 + C26846 + C26847) * C4966 +
                    (C26848 + C26849 + C26850) * C49252 +
                    (C27477 + C27476 + C27475) * C4967 +
                    (C27474 + C27473 + C27472) * C49094) *
                       C49054) *
                      C48978 * C513 -
                  (((C27466 + C27467 + C27468) * C49094 +
                    (C27469 + C27470 + C27471) * C4967 +
                    (C26856 + C26855 + C26854) * C49252 +
                    (C26853 + C26852 + C26851) * C4966) *
                       C49054 +
                   ((C27472 + C27473 + C27474) * C49094 +
                    (C27475 + C27476 + C27477) * C4967 +
                    (C26850 + C26849 + C26848) * C49252 +
                    (C26847 + C26846 + C26845) * C4966) *
                       C22509) *
                      C48978 * C514 +
                  ((C27285 * C4966 + C27286 * C49252 +
                    (C27471 + C27470 + C27469) * C4967 +
                    (C27468 + C27467 + C27466) * C49094) *
                       C22509 +
                   ((C27292 + C27291 + C27290) * C4966 +
                    (C27289 + C27288 + C27287) * C49252 +
                    (C47917 * C1844 + C48895 * C1847 + C47913 * C1845 +
                     C48903 * C1848 + C47923 * C1846 + C26643 * C1849) *
                        C4967 +
                    (C47917 * C1850 + C48895 * C1853 + C47913 * C1851 +
                     C48903 * C1854 + C47923 * C1852 + C26643 * C1855) *
                        C49094) *
                       C49054) *
                      C48978 * C515) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C28456 + C28457 + C28458) * C4967 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 + C29018 * C4967 +
                     C29019 * C49094) *
                        C49054) *
                       C339 -
                   (((C29020 + C29021 + C29022) * C49094 +
                     (C29023 + C29024 + C29025) * C4967 + C29026 * C49252 +
                     C29027 * C4966) *
                        C49054 +
                    ((C47923 * C882 + C26643 * C887 + C47913 * C881 +
                      C48903 * C886 + C47917 * C880 + C48895 * C885) *
                         C49094 +
                     (C47923 * C872 + C26643 * C877 + C47913 * C871 +
                      C48903 * C876 + C47917 * C870 + C48895 * C875) *
                         C4967 +
                     (C28461 + C28460 + C28459) * C49252 +
                     (C28458 + C28457 + C28456) * C4966) *
                        C22509) *
                       C49281) *
                      C447 +
                  (((C29018 * C4966 + C29019 * C49252 +
                     (C29025 + C29024 + C29023) * C4967 +
                     (C29022 + C29021 + C29020) * C49094) *
                        C22509 +
                    ((C27471 + C27470 + C27469) * C4966 +
                     (C27468 + C27467 + C27466) * C49252 +
                     (C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                      C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                         C4967 +
                     (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                      C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C27466 + C27467 + C27468) * C49094 +
                     (C27469 + C27470 + C27471) * C4967 +
                     (C26856 + C26855 + C26854) * C49252 +
                     (C26853 + C26852 + C26851) * C4966) *
                        C49054 +
                    (C29026 * C49094 + C29027 * C4967 +
                     (C26850 + C26849 + C26848) * C49252 +
                     (C26847 + C26846 + C26845) * C4966) *
                        C22509) *
                       C339) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C28456 + C28457 + C28458) * C4967 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 + C29018 * C4967 +
                     C29019 * C49094) *
                        C49054) *
                       C721 -
                   (((C29020 + C29021 + C29022) * C49094 +
                     (C29023 + C29024 + C29025) * C4967 + C29026 * C49252 +
                     C29027 * C4966) *
                        C49054 +
                    ((C47923 * C882 + C26643 * C887 + C47913 * C881 +
                      C48903 * C886 + C47917 * C880 + C48895 * C885) *
                         C49094 +
                     (C47923 * C872 + C26643 * C877 + C47913 * C871 +
                      C48903 * C876 + C47917 * C870 + C48895 * C875) *
                         C4967 +
                     (C28461 + C28460 + C28459) * C49252 +
                     (C28458 + C28457 + C28456) * C4966) *
                        C22509) *
                       C49281) *
                      C48961 * C449 +
                  ((((C28462 + C28463 + C28464) * C4966 +
                     (C28465 + C28466 + C28467) * C49252 +
                     (C47917 * C871 + C48895 * C876 + C47913 * C872 +
                      C48903 * C877 + C47923 * C873 + C26643 * C878) *
                         C4967 +
                     (C47917 * C881 + C48895 * C886 + C47913 * C882 +
                      C48903 * C887 + C47923 * C883 + C26643 * C888) *
                         C49094) *
                        C22509 +
                    ((C28232 + C28233 + C28234) * C4966 +
                     (C28235 + C28236 + C28237) * C49252 +
                     (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                      C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                         C4967 +
                     (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                      C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C28237 + C28236 + C28235) * C49094 +
                     (C28234 + C28233 + C28232) * C4967 +
                     (C26862 + C26861 + C26860) * C49252 +
                     (C26859 + C26858 + C26857) * C4966) *
                        C49054 +
                    ((C28467 + C28466 + C28465) * C49094 +
                     (C28464 + C28463 + C28462) * C4967 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49252 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C4966) *
                        C22509) *
                       C721) *
                      C48961 * C49277)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C4966 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49252 +
                     (C28456 + C28457 + C28458) * C4967 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C22509 +
                    ((C26845 + C26846 + C26847) * C4966 +
                     (C26848 + C26849 + C26850) * C49252 + C29018 * C4967 +
                     C29019 * C49094) *
                        C49054) *
                       C721 -
                   (((C29020 + C29021 + C29022) * C49094 +
                     (C29023 + C29024 + C29025) * C4967 + C29026 * C49252 +
                     C29027 * C4966) *
                        C49054 +
                    ((C47923 * C882 + C26643 * C887 + C47913 * C881 +
                      C48903 * C886 + C47917 * C880 + C48895 * C885) *
                         C49094 +
                     (C47923 * C872 + C26643 * C877 + C47913 * C871 +
                      C48903 * C876 + C47917 * C870 + C48895 * C875) *
                         C4967 +
                     (C28461 + C28460 + C28459) * C49252 +
                     (C28458 + C28457 + C28456) * C4966) *
                        C22509) *
                       C49281) *
                      C229 +
                  (((C29018 * C4966 + C29019 * C49252 +
                     (C29025 + C29024 + C29023) * C4967 +
                     (C29022 + C29021 + C29020) * C49094) *
                        C22509 +
                    ((C27471 + C27470 + C27469) * C4966 +
                     (C27468 + C27467 + C27466) * C49252 +
                     (C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                      C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                         C4967 +
                     (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                      C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C27466 + C27467 + C27468) * C49094 +
                     (C27469 + C27470 + C27471) * C4967 +
                     (C26856 + C26855 + C26854) * C49252 +
                     (C26853 + C26852 + C26851) * C4966) *
                        C49054 +
                    (C29026 * C49094 + C29027 * C4967 +
                     (C26850 + C26849 + C26848) * C49252 +
                     (C26847 + C26846 + C26845) * C4966) *
                        C22509) *
                       C721) *
                      C49279) *
                 C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[35] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C4966 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49252 +
                    (C28456 + C28457 + C28458) * C4967 +
                    (C28459 + C28460 + C28461) * C49094) *
                       C22509 +
                   ((C26845 + C26846 + C26847) * C4966 +
                    (C26848 + C26849 + C26850) * C49252 + C29018 * C4967 +
                    C29019 * C49094) *
                       C49054) *
                      C867 -
                  (((C29020 + C29021 + C29022) * C49094 +
                    (C29023 + C29024 + C29025) * C4967 + C29026 * C49252 +
                    C29027 * C4966) *
                       C49054 +
                   ((C29574 + C29575 + C29576) * C49094 +
                    (C29577 + C29578 + C29579) * C4967 +
                    (C28461 + C28460 + C28459) * C49252 +
                    (C28458 + C28457 + C28456) * C4966) *
                       C22509) *
                      C868 +
                  (((C29579 + C29578 + C29577) * C4966 +
                    (C29576 + C29575 + C29574) * C49252 +
                    (C47917 * C2732 + C48895 * C2739 + C47913 * C2731 +
                     C48903 * C2738 + C47923 * C2730 + C26643 * C2737) *
                        C4967 +
                    (C47917 * C2736 + C48895 * C2744 + C47913 * C2735 +
                     C48903 * C2743 + C47923 * C2734 + C26643 * C2742) *
                        C49094) *
                       C22509 +
                   ((C29025 + C29024 + C29023) * C4966 +
                    (C29022 + C29021 + C29020) * C49252 +
                    (C47917 * C3220 + C48895 * C3223 + C47913 * C3221 +
                     C48903 * C3224 + C47923 * C3222 + C26643 * C3225) *
                        C4967 +
                    (C47917 * C3226 + C48895 * C3229 + C47913 * C3227 +
                     C48903 * C3230 + C47923 * C3228 + C26643 * C3231) *
                        C49094) *
                       C49054) *
                      C869) *
                 C48961 * C48927) /
                (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22511 * C237 + C49325 * C248 + C22512 * C236 + C49318 * C247 +
             C22513 * C235 + C49305 * C246 + C22514 * C234 + C49288 * C245) *
                C118 +
            (C22511 * C243 + C49325 * C255 + C22512 * C242 + C49318 * C254 +
             C22513 * C241 + C49305 * C253 + C22514 * C240 + C49288 * C252) *
                C49007) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C22514 * C239 + C49288 * C251 + C22513 * C240 + C49305 * C252 +
             C22512 * C241 + C49318 * C253 + C22511 * C242 + C49325 * C254) *
                C49007 +
            (C22514 * C233 + C49288 * C244 + C22513 * C234 + C49305 * C245 +
             C22512 * C235 + C49318 * C246 + C22511 * C236 + C49325 * C247) *
                C118) *
               C49054 +
           ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C49007 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C118) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C22511 * C121 + C49325 * C128 + C22512 * C122 + C49318 * C129 +
             C22513 * C123 + C49305 * C130 + C22514 * C124 + C49288 * C137) *
                C118 +
            (C22511 * C133 + C49325 * C142 + C22512 * C134 + C49318 * C143 +
             C22513 * C135 + C49305 * C144 + C22514 * C136 + C49288 * C145) *
                C49007) *
               C22509 +
           ((C22511 * C235 + C49325 * C246 + C22512 * C234 + C49318 * C245 +
             C22513 * C233 + C49305 * C244 + C22514 * C238 + C49288 * C249) *
                C118 +
            (C22511 * C241 + C49325 * C253 + C22512 * C240 + C49318 * C252 +
             C22513 * C239 + C49305 * C251 + C22514 * C250 + C49288 * C256) *
                C49007) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23691 * C237 + C23685 * C248 + C23692 * C236 + C48900 * C247) *
                C118 +
            (C23691 * C243 + C23685 * C255 + C23692 * C242 + C48900 * C254) *
                C49007) *
               C49322 +
           ((C23691 * C517 + C23685 * C522 + C23692 * C518 + C48900 * C523) *
                C118 +
            (C23691 * C527 + C23685 * C532 + C23692 * C528 + C48900 * C533) *
                C49007) *
               C49312 +
           ((C23691 * C1157 + C23685 * C1164 + C23692 * C1156 +
             C48900 * C1163) *
                C118 +
            (C23691 * C1161 + C23685 * C1169 + C23692 * C1160 +
             C48900 * C1168) *
                C49007) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C23692 * C1159 + C48900 * C1167 + C23691 * C1160 +
             C23685 * C1168) *
                C49007 +
            (C23692 * C1155 + C48900 * C1162 + C23691 * C1156 +
             C23685 * C1163) *
                C118) *
               C49294 +
           ((C23692 * C529 + C48900 * C534 + C23691 * C528 + C23685 * C533) *
                C49007 +
            (C23692 * C519 + C48900 * C524 + C23691 * C518 + C23685 * C523) *
                C118) *
               C49312 +
           ((C23692 * C241 + C48900 * C253 + C23691 * C242 + C23685 * C254) *
                C49007 +
            (C23692 * C235 + C48900 * C246 + C23691 * C236 + C23685 * C247) *
                C118) *
               C49322 +
           ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49007 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C118) *
               C49326) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C118 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C49007) *
               C49326 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C118 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C49007) *
               C49322 +
           ((C23691 * C519 + C23685 * C524 + C23692 * C520 + C48900 * C525) *
                C118 +
            (C23691 * C529 + C23685 * C534 + C23692 * C530 + C48900 * C535) *
                C49007) *
               C49312 +
           ((C23691 * C1155 + C23685 * C1162 + C23692 * C1158 +
             C48900 * C1165) *
                C118 +
            (C23691 * C1159 + C23685 * C1167 + C23692 * C1166 +
             C48900 * C1170) *
                C49007) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C48978 * C229 -
           (((C22514 * C530 + C49288 * C535 + C22513 * C529 + C49305 * C534 +
              C22512 * C528 + C49318 * C533 + C22511 * C527 + C49325 * C532) *
                 C49007 +
             (C22514 * C520 + C49288 * C525 + C22513 * C519 + C49305 * C524 +
              C22512 * C518 + C49318 * C523 + C22511 * C517 + C49325 * C522) *
                 C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C48978 * C49279) *
              C231 +
          ((((C22686 + C22687 + C22688 + C22689) * C118 +
             (C22690 + C22691 + C22692 + C22693) * C49007) *
                C22509 +
            ((C22511 * C518 + C49325 * C523 + C22512 * C519 + C49318 * C524 +
              C22513 * C520 + C49305 * C525 + C22514 * C521 + C49288 * C526) *
                 C118 +
             (C22511 * C528 + C49325 * C533 + C22512 * C529 + C49318 * C534 +
              C22513 * C530 + C49305 * C535 + C22514 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C48978 * C229 -
           (((C23692 * C1668 + C48900 * C1671 + C23691 * C1667 +
              C23685 * C1670) *
                 C49007 +
             (C23692 * C1662 + C48900 * C1665 + C23691 * C1661 +
              C23685 * C1664) *
                 C118) *
                C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C118 + (C23886 + C23887) * C49007) * C49326 +
            ((C23888 + C23889) * C118 + (C23890 + C23891) * C49007) * C49322 +
            ((C23892 + C23893) * C118 + (C23894 + C23895) * C49007) * C49312 +
            ((C23691 * C1662 + C23685 * C1665 + C23692 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C23691 * C1668 + C23685 * C1671 + C23692 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C339 -
           (((C22514 * C632 + C49288 * C637 + C22513 * C631 + C49305 * C636 +
              C22512 * C630 + C49318 * C635 + C22511 * C629 + C49325 * C634) *
                 C49007 +
             (C22514 * C622 + C49288 * C627 + C22513 * C621 + C49305 * C626 +
              C22512 * C620 + C49318 * C625 + C22511 * C619 + C49325 * C624) *
                 C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C48961 * C231 +
          ((((C22511 * C344 + C49325 * C355 + C22512 * C343 + C49318 * C354 +
              C22513 * C342 + C49305 * C353 + C22514 * C341 + C49288 * C352) *
                 C118 +
             (C22511 * C350 + C49325 * C362 + C22512 * C349 + C49318 * C361 +
              C22513 * C348 + C49305 * C360 + C22514 * C347 + C49288 * C359) *
                 C49007) *
                C22509 +
            ((C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
              C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                 C118 +
             (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
              C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C339 -
           (((C23692 * C1851 + C48900 * C1854 + C23691 * C1850 +
              C23685 * C1853) *
                 C49007 +
             (C23692 * C1845 + C48900 * C1848 + C23691 * C1844 +
              C23685 * C1847) *
                 C118) *
                C49294 +
            ((C23692 * C1394 + C48900 * C1402 + C23691 * C1395 +
              C23685 * C1403) *
                 C49007 +
             (C23692 * C1390 + C48900 * C1397 + C23691 * C1391 +
              C23685 * C1398) *
                 C118) *
                C49312 +
            ((C23692 * C630 + C48900 * C635 + C23691 * C629 + C23685 * C634) *
                 C49007 +
             (C23692 * C620 + C48900 * C625 + C23691 * C619 + C23685 * C624) *
                 C118) *
                C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C48961 * C231 +
          ((((C23691 * C344 + C23685 * C355 + C23692 * C343 + C48900 * C354) *
                 C118 +
             (C23691 * C350 + C23685 * C362 + C23692 * C349 + C48900 * C361) *
                 C49007) *
                C49326 +
            ((C23691 * C620 + C23685 * C625 + C23692 * C621 + C48900 * C626) *
                 C118 +
             (C23691 * C630 + C23685 * C635 + C23692 * C631 + C48900 * C636) *
                 C49007) *
                C49322 +
            ((C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C49312 +
            ((C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C48978 * C447 -
           (((C22514 * C530 + C49288 * C535 + C22513 * C529 + C49305 * C534 +
              C22512 * C528 + C49318 * C533 + C22511 * C527 + C49325 * C532) *
                 C49007 +
             (C22514 * C520 + C49288 * C525 + C22513 * C519 + C49305 * C524 +
              C22512 * C518 + C49318 * C523 + C22511 * C517 + C49325 * C522) *
                 C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C48978 * C49279) *
              C449 +
          ((((C22686 + C22687 + C22688 + C22689) * C118 +
             (C22690 + C22691 + C22692 + C22693) * C49007) *
                C22509 +
            ((C22511 * C518 + C49325 * C523 + C22512 * C519 + C49318 * C524 +
              C22513 * C520 + C49305 * C525 + C22514 * C521 + C49288 * C526) *
                 C118 +
             (C22511 * C528 + C49325 * C533 + C22512 * C529 + C49318 * C534 +
              C22513 * C530 + C49305 * C535 + C22514 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            ((C23876 + C23877) * C118 + (C23878 + C23879) * C49007) * C49312 +
            ((C23880 + C23881) * C118 + (C23882 + C23883) * C49007) * C49294) *
               C48978 * C447 -
           (((C23692 * C1668 + C48900 * C1671 + C23691 * C1667 +
              C23685 * C1670) *
                 C49007 +
             (C23692 * C1662 + C48900 * C1665 + C23691 * C1661 +
              C23685 * C1664) *
                 C118) *
                C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C118 + (C23886 + C23887) * C49007) * C49326 +
            ((C23888 + C23889) * C118 + (C23890 + C23891) * C49007) * C49322 +
            ((C23892 + C23893) * C118 + (C23894 + C23895) * C49007) * C49312 +
            ((C23691 * C1662 + C23685 * C1665 + C23692 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C23691 * C1668 + C23685 * C1671 + C23692 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22678 + C22679 + C22680 + C22681) * C118 +
            (C22682 + C22683 + C22684 + C22685) * C49007) *
               C49054) *
              C48978 * C513 -
          (((C23068 + C23069 + C23070 + C23071) * C49007 +
            (C23072 + C23073 + C23074 + C23075) * C118) *
               C49054 +
           ((C22685 + C22684 + C22683 + C22682) * C49007 +
            (C22681 + C22680 + C22679 + C22678) * C118) *
               C22509) *
              C48978 * C514 +
          (((C23075 + C23074 + C23073 + C23072) * C118 +
            (C23071 + C23070 + C23069 + C23068) * C49007) *
               C22509 +
           ((C22511 * C1157 + C49325 * C1164 + C22512 * C1156 + C49318 * C1163 +
             C22513 * C1155 + C49305 * C1162 + C22514 * C1158 +
             C49288 * C1165) *
                C118 +
            (C22511 * C1161 + C49325 * C1169 + C22512 * C1160 + C49318 * C1168 +
             C22513 * C1159 + C49305 * C1167 + C22514 * C1166 +
             C49288 * C1170) *
                C49007) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
           C24274 * C49312 + C24275 * C49294) *
              C48978 * C513 -
          (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
           ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
           ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
           ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
              C48978 * C514 +
          (C24274 * C49326 + C24275 * C49322 +
           ((C24273 + C24272) * C118 + (C24271 + C24270) * C49007) * C49312 +
           ((C23691 * C9143 + C23685 * C9146 + C23692 * C9144 +
             C48900 * C9147) *
                C118 +
            (C23691 * C9145 + C23685 * C9149 + C23692 * C9148 +
             C48900 * C9150) *
                C49007) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C339 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C447 +
          ((((C23229 + C23228 + C23227 + C23226) * C118 +
             (C23225 + C23224 + C23223 + C23222) * C49007) *
                C22509 +
            ((C22511 * C1391 + C49325 * C1398 + C22512 * C1390 +
              C49318 * C1397 + C22513 * C1389 + C49305 * C1396 +
              C22514 * C1392 + C49288 * C1399) *
                 C118 +
             (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 +
              C49318 * C1402 + C22513 * C1393 + C49305 * C1401 +
              C22514 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C23068 + C23069 + C23070 + C23071) * C49007 +
             (C23072 + C23073 + C23074 + C23075) * C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C339 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C447 +
          ((((C24441 + C24440) * C118 + (C24439 + C24438) * C49007) * C49326 +
            ((C24437 + C24436) * C118 + (C24435 + C24434) * C49007) * C49322 +
            ((C24433 + C24432) * C118 + (C24431 + C24430) * C49007) * C49312 +
            ((C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C721 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C48961 * C449 +
          ((((C22511 * C344 + C49325 * C355 + C22512 * C343 + C49318 * C354 +
              C22513 * C342 + C49305 * C353 + C22514 * C341 + C49288 * C352) *
                 C118 +
             (C22511 * C350 + C49325 * C362 + C22512 * C349 + C49318 * C361 +
              C22513 * C348 + C49305 * C360 + C22514 * C347 + C49288 * C359) *
                 C49007) *
                C22509 +
            ((C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
              C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                 C118 +
             (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
              C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C22693 + C22692 + C22691 + C22690) * C49007 +
             (C22689 + C22688 + C22687 + C22686) * C118) *
                C49054 +
            ((C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
              C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                 C49007 +
             (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
              C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                 C118) *
                C22509) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C721 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C48961 * C449 +
          ((((C23691 * C344 + C23685 * C355 + C23692 * C343 + C48900 * C354) *
                 C118 +
             (C23691 * C350 + C23685 * C362 + C23692 * C349 + C48900 * C361) *
                 C49007) *
                C49326 +
            ((C23691 * C620 + C23685 * C625 + C23692 * C621 + C48900 * C626) *
                 C118 +
             (C23691 * C630 + C23685 * C635 + C23692 * C631 + C48900 * C636) *
                 C49007) *
                C49322 +
            ((C23691 * C1390 + C23685 * C1397 + C23692 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C23691 * C1394 + C23685 * C1402 + C23692 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C49312 +
            ((C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C23895 + C23894) * C49007 + (C23893 + C23892) * C118) * C49294 +
            ((C23891 + C23890) * C49007 + (C23889 + C23888) * C118) * C49312 +
            ((C23887 + C23886) * C49007 + (C23885 + C23884) * C118) * C49322 +
            ((C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49007 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C118) *
                C49326) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
              C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                 C118 +
             (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
              C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                 C49007) *
                C22509 +
            ((C22678 + C22679 + C22680 + C22681) * C118 +
             (C22682 + C22683 + C22684 + C22685) * C49007) *
                C49054) *
               C721 -
           (((C23222 + C23223 + C23224 + C23225) * C49007 +
             (C23226 + C23227 + C23228 + C23229) * C118) *
                C49054 +
            ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
              C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                 C49007 +
             (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
              C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                 C118) *
                C22509) *
               C49281) *
              C229 +
          ((((C23229 + C23228 + C23227 + C23226) * C118 +
             (C23225 + C23224 + C23223 + C23222) * C49007) *
                C22509 +
            ((C22511 * C1391 + C49325 * C1398 + C22512 * C1390 +
              C49318 * C1397 + C22513 * C1389 + C49305 * C1396 +
              C22514 * C1392 + C49288 * C1399) *
                 C118 +
             (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 +
              C49318 * C1402 + C22513 * C1393 + C49305 * C1401 +
              C22514 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C23068 + C23069 + C23070 + C23071) * C49007 +
             (C23072 + C23073 + C23074 + C23075) * C118) *
                C49054 +
            ((C22685 + C22684 + C22683 + C22682) * C49007 +
             (C22681 + C22680 + C22679 + C22678) * C118) *
                C22509) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C118 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49007) *
                C49326 +
            ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
            C24274 * C49312 + C24275 * C49294) *
               C721 -
           (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
            ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
            ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
            ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                 C49007 +
             (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                 C118) *
                C49326) *
               C49281) *
              C229 +
          ((((C24441 + C24440) * C118 + (C24439 + C24438) * C49007) * C49326 +
            ((C24437 + C24436) * C118 + (C24435 + C24434) * C49007) * C49322 +
            ((C24433 + C24432) * C118 + (C24431 + C24430) * C49007) * C49312 +
            ((C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C24270 + C24271) * C49007 + (C24272 + C24273) * C118) * C49294 +
            ((C23883 + C23882) * C49007 + (C23881 + C23880) * C118) * C49312 +
            ((C23879 + C23878) * C49007 + (C23877 + C23876) * C118) * C49322 +
            ((C23875 + C23874) * C49007 + (C23873 + C23872) * C118) * C49326) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C118 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C49007) *
               C22509 +
           ((C22678 + C22679 + C22680 + C22681) * C118 +
            (C22682 + C22683 + C22684 + C22685) * C49007) *
               C49054) *
              C867 -
          (((C23222 + C23223 + C23224 + C23225) * C49007 +
            (C23226 + C23227 + C23228 + C23229) * C118) *
               C49054 +
           ((C22514 * C348 + C49288 * C360 + C22513 * C349 + C49305 * C361 +
             C22512 * C350 + C49318 * C362 + C22511 * C351 + C49325 * C363) *
                C49007 +
            (C22514 * C342 + C49288 * C353 + C22513 * C343 + C49305 * C354 +
             C22512 * C344 + C49318 * C355 + C22511 * C345 + C49325 * C356) *
                C118) *
               C22509) *
              C868 +
          (((C22511 * C870 + C49325 * C875 + C22512 * C871 + C49318 * C876 +
             C22513 * C872 + C49305 * C877 + C22514 * C873 + C49288 * C878) *
                C118 +
            (C22511 * C880 + C49325 * C885 + C22512 * C881 + C49318 * C886 +
             C22513 * C882 + C49305 * C887 + C22514 * C883 + C49288 * C888) *
                C49007) *
               C22509 +
           ((C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C118 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49007) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C118 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49007) *
               C49326 +
           ((C23872 + C23873) * C118 + (C23874 + C23875) * C49007) * C49322 +
           C24274 * C49312 + C24275 * C49294) *
              C867 -
          (((C24430 + C24431) * C49007 + (C24432 + C24433) * C118) * C49294 +
           ((C24434 + C24435) * C49007 + (C24436 + C24437) * C118) * C49312 +
           ((C24438 + C24439) * C49007 + (C24440 + C24441) * C118) * C49322 +
           ((C23692 * C350 + C48900 * C362 + C23691 * C351 + C23685 * C363) *
                C49007 +
            (C23692 * C344 + C48900 * C355 + C23691 * C345 + C23685 * C356) *
                C118) *
               C49326) *
              C868 +
          (((C23691 * C870 + C23685 * C875 + C23692 * C871 + C48900 * C876) *
                C118 +
            (C23691 * C880 + C23685 * C885 + C23692 * C881 + C48900 * C886) *
                C49007) *
               C49326 +
           ((C23691 * C2294 + C23685 * C2300 + C23692 * C2295 +
             C48900 * C2301) *
                C118 +
            (C23691 * C2303 + C23685 * C2312 + C23692 * C2304 +
             C48900 * C2313) *
                C49007) *
               C49322 +
           ((C23691 * C2297 + C23685 * C2306 + C23692 * C2298 +
             C48900 * C2307) *
                C118 +
            (C23691 * C2309 + C23685 * C2315 + C23692 * C2310 +
             C48900 * C2316) *
                C49007) *
               C49312 +
           ((C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
             C48900 * C10073) *
                C118 +
            (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
             C48900 * C10075) *
                C49007) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C31304 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C31302 +
            (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
               C49050 +
           ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
            C13515 * C31305 + C13516 * C49094) *
               C49057 +
           (C11844 * C31304 + C11845 * C31302 + C13314 * C31305 +
            C13315 * C49094) *
               C26646) *
              C48978 * C48961 * C110 -
          (((C12753 + C12752) * C49094 + (C12751 + C12750) * C31305 +
            (C11481 + C11480) * C31302 + (C11479 + C11478) * C31304) *
               C26646 +
           ((C12749 + C12748) * C49094 + (C12747 + C12746) * C31305 +
            (C11477 + C11476) * C31302 + (C11475 + C11474) * C31304) *
               C49057 +
           ((C12971 + C12970) * C49094 + (C12969 + C12968) * C31305 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C31302 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C31304) *
               C49050) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C31304 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C31302 +
            (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
                C31305 +
            (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
                C49094) *
               C49050 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C31304 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C31302 +
            (C47907 * C621 + C49229 * C626 + C47888 * C622 + C48900 * C627) *
                C31305 +
            (C47907 * C631 + C49229 * C636 + C47888 * C632 + C48900 * C637) *
                C49094) *
               C49057 +
           ((C47907 * C519 + C49229 * C524 + C47888 * C520 + C48900 * C525) *
                C31304 +
            (C47907 * C529 + C49229 * C534 + C47888 * C530 + C48900 * C535) *
                C31302 +
            (C47907 * C1389 + C49229 * C1396 + C47888 * C1392 +
             C48900 * C1399) *
                C31305 +
            (C47907 * C1393 + C49229 * C1401 + C47888 * C1400 +
             C48900 * C1404) *
                C49094) *
               C26646) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            (C11844 * C31304 + C11845 * C31302 + C13314 * C31305 +
             C13315 * C49094) *
                C26646) *
               C48978 * C229 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C31305 +
             (C11473 + C11472) * C31302 + (C11471 + C11470) * C31304) *
                C26646 +
            (C13525 * C49094 + C13526 * C31305 + (C11469 + C11468) * C31302 +
             (C11467 + C11466) * C31304) *
                C49057 +
            (C13535 * C49094 + C13536 * C31305 + (C11465 + C11464) * C31302 +
             (C11463 + C11462) * C31304) *
                C49050) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C31304 + (C11476 + C11477) * C31302 +
             (C12746 + C12747) * C31305 + (C12748 + C12749) * C49094) *
                C49050 +
            ((C11478 + C11479) * C31304 + (C11480 + C11481) * C31302 +
             (C12750 + C12751) * C31305 + (C12752 + C12753) * C49094) *
                C49057 +
            ((C11482 + C11483) * C31304 + (C11484 + C11485) * C31302 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C26646) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C31305 +
             (C11481 + C11480) * C31302 + (C11479 + C11478) * C31304) *
                C26646 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C31305 +
             (C11477 + C11476) * C31302 + (C11475 + C11474) * C31304) *
                C49057 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C31305 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C31302 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C31304) *
                C49050) *
               C48978 * C229) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            (C11844 * C31304 + C11845 * C31302 + C13314 * C31305 +
             C13315 * C49094) *
                C26646) *
               C339 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C31305 +
             C13525 * C31302 + C13526 * C31304) *
                C26646 +
            (C19634 * C49094 + C19635 * C31305 + C13535 * C31302 +
             C13536 * C31304) *
                C49057 +
            ((C14087 + C14088) * C49094 + (C14089 + C14090) * C31305 +
             (C12967 + C12966) * C31302 + (C12965 + C12964) * C31304) *
                C49050) *
               C49281) *
              C48961 * C231 +
          ((((C12968 + C12969) * C31304 + (C12970 + C12971) * C31302 +
             (C19086 + C19087) * C31305 + (C19088 + C19089) * C49094) *
                C49050 +
            ((C12746 + C12747) * C31304 + (C12748 + C12749) * C31302 +
             (C18880 + C18881) * C31305 + (C18882 + C18883) * C49094) *
                C49057 +
            ((C12750 + C12751) * C31304 + (C12752 + C12753) * C31302 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C26646) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C31305 +
             (C11481 + C11480) * C31302 + (C11479 + C11478) * C31304) *
                C26646 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C31305 +
             (C11477 + C11476) * C31302 + (C11475 + C11474) * C31304) *
                C49057 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C31305 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C31302 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C31304) *
                C49050) *
               C339) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            (C11844 * C31304 + C11845 * C31302 + C13314 * C31305 +
             C13315 * C49094) *
                C26646) *
               C48978 * C447 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C31305 +
             (C11473 + C11472) * C31302 + (C11471 + C11470) * C31304) *
                C26646 +
            (C13525 * C49094 + C13526 * C31305 + (C11469 + C11468) * C31302 +
             (C11467 + C11466) * C31304) *
                C49057 +
            (C13535 * C49094 + C13536 * C31305 + (C11465 + C11464) * C31302 +
             (C11463 + C11462) * C31304) *
                C49050) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C31304 + (C11476 + C11477) * C31302 +
             (C12746 + C12747) * C31305 + (C12748 + C12749) * C49094) *
                C49050 +
            ((C11478 + C11479) * C31304 + (C11480 + C11481) * C31302 +
             (C12750 + C12751) * C31305 + (C12752 + C12753) * C49094) *
                C49057 +
            ((C11482 + C11483) * C31304 + (C11484 + C11485) * C31302 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C26646) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C31305 +
             (C11481 + C11480) * C31302 + (C11479 + C11478) * C31304) *
                C26646 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C31305 +
             (C11477 + C11476) * C31302 + (C11475 + C11474) * C31304) *
                C49057 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C31305 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C31302 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C31304) *
                C49050) *
               C48978 * C447) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C31304 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C31302 +
            (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
               C49050 +
           ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
            C13515 * C31305 + C13516 * C49094) *
               C49057 +
           C44262 * C26646) *
              C48978 * C513 -
          (((C12020 + C12021) * C49094 + (C12022 + C12023) * C31305 +
            (C11473 + C11472) * C31302 + (C11471 + C11470) * C31304) *
               C26646 +
           (C13525 * C49094 + C13526 * C31305 + (C11469 + C11468) * C31302 +
            (C11467 + C11466) * C31304) *
               C49057 +
           (C13535 * C49094 + C13536 * C31305 + (C11465 + C11464) * C31302 +
            (C11463 + C11462) * C31304) *
               C49050) *
              C48978 * C514 +
          (C44262 * C49050 +
           (C11846 * C31304 + C11847 * C31302 + (C12023 + C12022) * C31305 +
            (C12021 + C12020) * C49094) *
               C49057 +
           ((C11863 + C11862) * C31304 + (C11861 + C11860) * C31302 +
            (C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
             C48900 * C9301) *
                C31305 +
            (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
             C48900 * C9304) *
                C49094) *
               C26646) *
              C48978 * C515) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            C44262 * C26646) *
               C339 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C31305 +
             C13525 * C31302 + C13526 * C31304) *
                C26646 +
            (C19634 * C49094 + C19635 * C31305 + C13535 * C31302 +
             C13536 * C31304) *
                C49057 +
            ((C14087 + C14088) * C49094 + (C14089 + C14090) * C31305 +
             (C12967 + C12966) * C31302 + (C12965 + C12964) * C31304) *
                C49050) *
               C49281) *
              C447 +
          (((C13515 * C31304 + C13516 * C31302 + C19624 * C31305 +
             C19625 * C49094) *
                C49050 +
            (C13314 * C31304 + C13315 * C31302 + (C13540 + C13539) * C31305 +
             (C13538 + C13537) * C49094) *
                C49057 +
            ((C12023 + C12022) * C31304 + (C12021 + C12020) * C31302 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C26646) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C31305 +
             (C11473 + C11472) * C31302 + (C11471 + C11470) * C31304) *
                C26646 +
            (C13525 * C49094 + C13526 * C31305 + (C11469 + C11468) * C31302 +
             (C11467 + C11466) * C31304) *
                C49057 +
            (C13535 * C49094 + C13536 * C31305 + (C11465 + C11464) * C31302 +
             (C11463 + C11462) * C31304) *
                C49050) *
               C339) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            C44262 * C26646) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C31305 +
             C13525 * C31302 + C13526 * C31304) *
                C26646 +
            (C19634 * C49094 + C19635 * C31305 + C13535 * C31302 +
             C13536 * C31304) *
                C49057 +
            ((C14087 + C14088) * C49094 + (C14089 + C14090) * C31305 +
             (C12967 + C12966) * C31302 + (C12965 + C12964) * C31304) *
                C49050) *
               C49281) *
              C48961 * C449 +
          ((((C12968 + C12969) * C31304 + (C12970 + C12971) * C31302 +
             (C19086 + C19087) * C31305 + (C19088 + C19089) * C49094) *
                C49050 +
            ((C12746 + C12747) * C31304 + (C12748 + C12749) * C31302 +
             (C18880 + C18881) * C31305 + (C18882 + C18883) * C49094) *
                C49057 +
            ((C12750 + C12751) * C31304 + (C12752 + C12753) * C31302 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C26646) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C31305 +
             (C11481 + C11480) * C31302 + (C11479 + C11478) * C31304) *
                C26646 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C31305 +
             (C11477 + C11476) * C31302 + (C11475 + C11474) * C31304) *
                C49057 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C31305 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C31302 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C31304) *
                C49050) *
               C721) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C31304 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C31302 +
             (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
                C49050 +
            ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
             C13515 * C31305 + C13516 * C49094) *
                C49057 +
            C44262 * C26646) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C31305 +
             C13525 * C31302 + C13526 * C31304) *
                C26646 +
            (C19634 * C49094 + C19635 * C31305 + C13535 * C31302 +
             C13536 * C31304) *
                C49057 +
            ((C14087 + C14088) * C49094 + (C14089 + C14090) * C31305 +
             (C12967 + C12966) * C31302 + (C12965 + C12964) * C31304) *
                C49050) *
               C49281) *
              C229 +
          (((C13515 * C31304 + C13516 * C31302 + C19624 * C31305 +
             C19625 * C49094) *
                C49050 +
            (C13314 * C31304 + C13315 * C31302 + (C13540 + C13539) * C31305 +
             (C13538 + C13537) * C49094) *
                C49057 +
            ((C12023 + C12022) * C31304 + (C12021 + C12020) * C31302 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C26646) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C31305 +
             (C11473 + C11472) * C31302 + (C11471 + C11470) * C31304) *
                C26646 +
            (C13525 * C49094 + C13526 * C31305 + (C11469 + C11468) * C31302 +
             (C11467 + C11466) * C31304) *
                C49057 +
            (C13535 * C49094 + C13536 * C31305 + (C11465 + C11464) * C31302 +
             (C11463 + C11462) * C31304) *
                C49050) *
               C721) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C31304 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C31302 +
            (C12964 + C12965) * C31305 + (C12966 + C12967) * C49094) *
               C49050 +
           ((C11462 + C11463) * C31304 + (C11464 + C11465) * C31302 +
            C13515 * C31305 + C13516 * C49094) *
               C49057 +
           C44262 * C26646) *
              C867 -
          (((C13537 + C13538) * C49094 + (C13539 + C13540) * C31305 +
            C13525 * C31302 + C13526 * C31304) *
               C26646 +
           (C19634 * C49094 + C19635 * C31305 + C13535 * C31302 +
            C13536 * C31304) *
               C49057 +
           ((C14087 + C14088) * C49094 + (C14089 + C14090) * C31305 +
            (C12967 + C12966) * C31302 + (C12965 + C12964) * C31304) *
               C49050) *
              C868 +
          ((C20174 * C31304 + C20175 * C31302 + C21282 * C31305 +
            C21283 * C49094) *
               C49050 +
           (C19624 * C31304 + C19625 * C31302 + (C19639 + C19638) * C31305 +
            (C19637 + C19636) * C49094) *
               C49057 +
           ((C13540 + C13539) * C31304 + (C13538 + C13537) * C31302 +
            (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
             C48900 * C10286) *
                C31305 +
            (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
             C48900 * C10289) *
                C49094) *
               C26646) *
              C869) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48890 * C126) * C48044 +
                    (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
                    C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                       C49050 +
                   (C9184 * C48044 + C9185 * C49090 + C9574 * C48036 +
                    C9573 * C49097 + C10113 * C48050 + C10114 * C36785) *
                       C49057 +
                   (C9186 * C48044 + C9187 * C49090 + C9572 * C48036 +
                    C9571 * C49097 + C10115 * C48050 + C10116 * C36785) *
                       C26646) *
                      C48978 * C48961 * C110 -
                  ((C10124 * C36785 + C10123 * C48050 + C10122 * C49097 +
                    C10121 * C48036 + C9195 * C49090 + C9194 * C48044) *
                       C26646 +
                   (C10120 * C36785 + C10119 * C48050 + C10118 * C49097 +
                    C10117 * C48036 + C9193 * C49090 + C9192 * C48044) *
                       C49057 +
                   (C10314 * C36785 + C10313 * C48050 + C10312 * C49097 +
                    C10311 * C48036 + (C9060 * C132 + C48890 * C141) * C49090 +
                    (C9060 * C120 + C48890 * C127) * C48044) *
                       C49050) *
                      C48978 * C48961 * C111 +
                  (((C9060 * C121 + C48890 * C128) * C48044 +
                    (C9060 * C133 + C48890 * C142) * C49090 +
                    (C9060 * C343 + C48890 * C354) * C48036 +
                    (C9060 * C349 + C48890 * C361) * C49097 +
                    (C9060 * C872 + C48890 * C877) * C48050 +
                    (C9060 * C882 + C48890 * C887) * C36785) *
                       C49050 +
                   ((C9060 * C235 + C48890 * C246) * C48044 +
                    (C9060 * C241 + C48890 * C253) * C49090 +
                    (C9060 * C621 + C48890 * C626) * C48036 +
                    (C9060 * C631 + C48890 * C636) * C49097 +
                    (C9060 * C2296 + C48890 * C2302) * C48050 +
                    (C9060 * C2305 + C48890 * C2314) * C36785) *
                       C49057 +
                   ((C9060 * C519 + C48890 * C524) * C48044 +
                    (C9060 * C529 + C48890 * C534) * C49090 +
                    (C9060 * C1389 + C48890 * C1396) * C48036 +
                    (C9060 * C1393 + C48890 * C1401) * C49097 +
                    (C9060 * C2299 + C48890 * C2308) * C48050 +
                    (C9060 * C2311 + C48890 * C2317) * C36785) *
                       C26646) *
                      C48978 * C48961 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            (C46855 + C46856 + C46857 + C46858 + C46859 + C46860) * C26646) *
               C48978 * C229 -
           ((C10581 * C36785 + C10582 * C48050 + C9569 * C49097 +
             C9570 * C48036 + C9189 * C49090 + C9188 * C48044) *
                C26646 +
            (C46860 + C46859 + C46858 + C46857 + C46856 + C46855) * C49057 +
            (C46854 + C46853 + C46852 + C46851 + C46850 + C46849) * C49050) *
               C48978 * C49279) *
              C231 +
          (((C46861 + C46862 + C46863 + C46864 + C46865 + C46866) * C49050 +
            (C46867 + C46868 + C46869 + C46870 + C46871 + C46872) * C49057 +
            (C9196 * C48044 + C9197 * C49090 + C14345 * C48036 +
             C14346 * C49097 + (C9060 * C10072 + C48890 * C10073) * C48050 +
             (C9060 * C10074 + C48890 * C10075) * C36785) *
                C26646) *
               C48978 * C49279 -
           ((C46872 + C46871 + C46870 + C46869 + C46868 + C46867) * C26646 +
            (C46866 + C46865 + C46864 + C46863 + C46862 + C46861) * C49057 +
            (C10314 * C36785 + C10313 * C48050 + C10312 * C49097 +
             C10311 * C48036 + (C9060 * C132 + C48890 * C141) * C49090 +
             (C9060 * C120 + C48890 * C127) * C48044) *
                C49050) *
               C48978 * C229) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            (C46855 + C46856 + C46857 + C46858 + C46859 + C46860) * C26646) *
               C339 -
           ((C10754 * C36785 + C10755 * C48050 + C10116 * C49097 +
             C10115 * C48036 + C9571 * C49090 + C9572 * C48044) *
                C26646 +
            (C10756 * C36785 + C10757 * C48050 + C10114 * C49097 +
             C10113 * C48036 + C9573 * C49090 + C9574 * C48044) *
                C49057 +
            (C11176 * C36785 + C11177 * C48050 + C10310 * C49097 +
             C10309 * C48036 + C10308 * C49090 + C10307 * C48044) *
                C49050) *
               C49281) *
              C48961 * C231 +
          (((C10311 * C48044 + C10312 * C49090 + C10313 * C48036 +
             C10314 * C49097 + C18056 * C48050 + C18057 * C36785) *
                C49050 +
            (C10117 * C48044 + C10118 * C49090 + C10119 * C48036 +
             C10120 * C49097 + C21542 * C48050 + C21543 * C36785) *
                C49057 +
            (C10121 * C48044 + C10122 * C49090 + C10123 * C48036 +
             C10124 * C49097 + (C9060 * C10283 + C48890 * C10286) * C48050 +
             (C9060 * C10287 + C48890 * C10289) * C36785) *
                C26646) *
               C49281 -
           ((C46872 + C46871 + C46870 + C46869 + C46868 + C46867) * C26646 +
            (C46866 + C46865 + C46864 + C46863 + C46862 + C46861) * C49057 +
            (C10314 * C36785 + C10313 * C48050 + C10312 * C49097 +
             C10311 * C48036 + (C9060 * C132 + C48890 * C141) * C49090 +
             (C9060 * C120 + C48890 * C127) * C48044) *
                C49050) *
               C339) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            (C46855 + C46856 + C46857 + C46858 + C46859 + C46860) * C26646) *
               C48978 * C447 -
           ((C10581 * C36785 + C10582 * C48050 + C9569 * C49097 +
             C9570 * C48036 + C9189 * C49090 + C9188 * C48044) *
                C26646 +
            (C46860 + C46859 + C46858 + C46857 + C46856 + C46855) * C49057 +
            (C46854 + C46853 + C46852 + C46851 + C46850 + C46849) * C49050) *
               C48978 * C49279) *
              C449 +
          (((C46861 + C46862 + C46863 + C46864 + C46865 + C46866) * C49050 +
            (C46867 + C46868 + C46869 + C46870 + C46871 + C46872) * C49057 +
            (C9196 * C48044 + C9197 * C49090 + C14345 * C48036 +
             C14346 * C49097 + (C9060 * C10072 + C48890 * C10073) * C48050 +
             (C9060 * C10074 + C48890 * C10075) * C36785) *
                C26646) *
               C48978 * C49279 -
           ((C46872 + C46871 + C46870 + C46869 + C46868 + C46867) * C26646 +
            (C46866 + C46865 + C46864 + C46863 + C46862 + C46861) * C49057 +
            (C10314 * C36785 + C10313 * C48050 + C10312 * C49097 +
             C10311 * C48036 + (C9060 * C132 + C48890 * C141) * C49090 +
             (C9060 * C120 + C48890 * C127) * C48044) *
                C49050) *
               C48978 * C447) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C48044 +
            (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
            C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
               C49050 +
           (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
           C47285 * C26646) *
              C48978 * C513 -
          ((C47276 + C47277 + C47278 + C47279 + C47280 + C47281) * C26646 +
           (C46860 + C46859 + C46858 + C46857 + C46856 + C46855) * C49057 +
           (C46854 + C46853 + C46852 + C46851 + C46850 + C46849) * C49050) *
              C48978 * C514 +
          (C47285 * C49050 +
           (C47281 + C47280 + C47279 + C47278 + C47277 + C47276) * C49057 +
           (C9190 * C48044 + C9191 * C49090 + C9568 * C48036 + C9567 * C49097 +
            (C9060 * C9809 + C48890 * C9812) * C48050 +
            (C9060 * C9813 + C48890 * C9815) * C36785) *
               C26646) *
              C48978 * C515) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            C47285 * C26646) *
               C339 -
           ((C47432 + C47433 + C47434 + C47435 + C47436 + C47437) * C26646 +
            (C47438 + C47439 + C47440 + C47441 + C47442 + C47443) * C49057 +
            (C11176 * C36785 + C11177 * C48050 + C10310 * C49097 +
             C10309 * C48036 + C10308 * C49090 + C10307 * C48044) *
                C49050) *
               C49281) *
              C447 +
          (((C47443 + C47442 + C47441 + C47440 + C47439 + C47438) * C49050 +
            (C47437 + C47436 + C47435 + C47434 + C47433 + C47432) * C49057 +
            (C9570 * C48044 + C9569 * C49090 + C10582 * C48036 +
             C10581 * C49097 + (C9060 * C10733 + C48890 * C10734) * C48050 +
             (C9060 * C10735 + C48890 * C10736) * C36785) *
                C26646) *
               C49281 -
           ((C47276 + C47277 + C47278 + C47279 + C47280 + C47281) * C26646 +
            (C46860 + C46859 + C46858 + C46857 + C46856 + C46855) * C49057 +
            (C46854 + C46853 + C46852 + C46851 + C46850 + C46849) * C49050) *
               C339) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            C47285 * C26646) *
               C721 -
           ((C47432 + C47433 + C47434 + C47435 + C47436 + C47437) * C26646 +
            (C47438 + C47439 + C47440 + C47441 + C47442 + C47443) * C49057 +
            (C11176 * C36785 + C11177 * C48050 + C10310 * C49097 +
             C10309 * C48036 + C10308 * C49090 + C10307 * C48044) *
                C49050) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C48044 + C10312 * C49090 + C10313 * C48036 +
             C10314 * C49097 + C18056 * C48050 + C18057 * C36785) *
                C49050 +
            (C10117 * C48044 + C10118 * C49090 + C10119 * C48036 +
             C10120 * C49097 + C21542 * C48050 + C21543 * C36785) *
                C49057 +
            (C10121 * C48044 + C10122 * C49090 + C10123 * C48036 +
             C10124 * C49097 + (C9060 * C10283 + C48890 * C10286) * C48050 +
             (C9060 * C10287 + C48890 * C10289) * C36785) *
                C26646) *
               C49281 -
           ((C46872 + C46871 + C46870 + C46869 + C46868 + C46867) * C26646 +
            (C46866 + C46865 + C46864 + C46863 + C46862 + C46861) * C49057 +
            (C10314 * C36785 + C10313 * C48050 + C10312 * C49097 +
             C10311 * C48036 + (C9060 * C132 + C48890 * C141) * C49090 +
             (C9060 * C120 + C48890 * C127) * C48044) *
                C49050) *
               C721) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C48044 +
             (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
             C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
                C49050 +
            (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
            C47285 * C26646) *
               C721 -
           ((C47432 + C47433 + C47434 + C47435 + C47436 + C47437) * C26646 +
            (C47438 + C47439 + C47440 + C47441 + C47442 + C47443) * C49057 +
            (C11176 * C36785 + C11177 * C48050 + C10310 * C49097 +
             C10309 * C48036 + C10308 * C49090 + C10307 * C48044) *
                C49050) *
               C49281) *
              C229 +
          (((C47443 + C47442 + C47441 + C47440 + C47439 + C47438) * C49050 +
            (C47437 + C47436 + C47435 + C47434 + C47433 + C47432) * C49057 +
            (C9570 * C48044 + C9569 * C49090 + C10582 * C48036 +
             C10581 * C49097 + (C9060 * C10733 + C48890 * C10734) * C48050 +
             (C9060 * C10735 + C48890 * C10736) * C36785) *
                C26646) *
               C49281 -
           ((C47276 + C47277 + C47278 + C47279 + C47280 + C47281) * C26646 +
            (C46860 + C46859 + C46858 + C46857 + C46856 + C46855) * C49057 +
            (C46854 + C46853 + C46852 + C46851 + C46850 + C46849) * C49050) *
               C721) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C48044 +
            (C9060 * C131 + C48890 * C140) * C49090 + C10307 * C48036 +
            C10308 * C49097 + C10309 * C48050 + C10310 * C36785) *
               C49050 +
           (C46849 + C46850 + C46851 + C46852 + C46853 + C46854) * C49057 +
           C47285 * C26646) *
              C867 -
          ((C47432 + C47433 + C47434 + C47435 + C47436 + C47437) * C26646 +
           (C47438 + C47439 + C47440 + C47441 + C47442 + C47443) * C49057 +
           (C11176 * C36785 + C11177 * C48050 + C10310 * C49097 +
            C10309 * C48036 + C10308 * C49090 + C10307 * C48044) *
               C49050) *
              C868 +
          ((C10309 * C48044 + C10310 * C49090 + C11177 * C48036 +
            C11176 * C49097 + C18054 * C48050 + C18055 * C36785) *
               C49050 +
           (C10113 * C48044 + C10114 * C49090 + C10757 * C48036 +
            C10756 * C49097 + C18294 * C48050 + C18295 * C36785) *
               C49057 +
           (C10115 * C48044 + C10116 * C49090 + C10755 * C48036 +
            C10754 * C49097 + (C9060 * C11164 + C48890 * C11167) * C48050 +
            (C9060 * C11168 + C48890 * C11170) * C36785) *
               C26646) *
              C869) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C31304 +
            (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
            C10308 * C49094) *
               C49326 +
           (C9184 * C31304 + C9185 * C31302 + C9574 * C31305 + C9573 * C49094) *
               C49322 +
           (C9186 * C31304 + C9187 * C31302 + C9572 * C31305 + C9571 * C49094) *
               C49312 +
           (C9188 * C31304 + C9189 * C31302 + C9570 * C31305 + C9569 * C49094) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C14346 * C49094 + C14345 * C31305 + C9197 * C31302 +
            C9196 * C31304) *
               C49294 +
           (C10122 * C49094 + C10121 * C31305 + C9195 * C31302 +
            C9194 * C31304) *
               C49312 +
           (C10118 * C49094 + C10117 * C31305 + C9193 * C31302 +
            C9192 * C31304) *
               C49322 +
           (C10312 * C49094 + C10311 * C31305 +
            (C9060 * C132 + C48890 * C141) * C31302 +
            (C9060 * C120 + C48890 * C127) * C31304) *
               C49326) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C31304 +
            (C9060 * C133 + C48890 * C142) * C31302 +
            (C9060 * C343 + C48890 * C354) * C31305 +
            (C9060 * C349 + C48890 * C361) * C49094) *
               C49326 +
           ((C9060 * C235 + C48890 * C246) * C31304 +
            (C9060 * C241 + C48890 * C253) * C31302 +
            (C9060 * C621 + C48890 * C626) * C31305 +
            (C9060 * C631 + C48890 * C636) * C49094) *
               C49322 +
           ((C9060 * C519 + C48890 * C524) * C31304 +
            (C9060 * C529 + C48890 * C534) * C31302 +
            (C9060 * C1389 + C48890 * C1396) * C31305 +
            (C9060 * C1393 + C48890 * C1401) * C49094) *
               C49312 +
           ((C9060 * C1155 + C48890 * C1162) * C31304 +
            (C9060 * C1159 + C48890 * C1167) * C31302 +
            (C9060 * C1846 + C48890 * C1849) * C31305 +
            (C9060 * C1852 + C48890 * C1855) * C49094) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C31304 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C31302 +
            (C15673 + C15674 + C15675) * C31305 +
            (C15676 + C15677 + C15678) * C49094) *
               C22509 +
           ((C7958 + C7959 + C7960) * C31304 +
            (C7961 + C7962 + C7963) * C31302 +
            (C8590 + C8589 + C8588) * C31305 +
            (C8587 + C8586 + C8585) * C49094) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C7762 * C632 + C49271 * C637 + C7761 * C631 + C49303 * C636 +
             C7760 * C630 + C49316 * C635) *
                C49094 +
            (C7762 * C622 + C49271 * C627 + C7761 * C621 + C49303 * C626 +
             C7760 * C620 + C49316 * C625) *
                C31305 +
            (C7975 + C7974 + C7973) * C31302 +
            (C7972 + C7971 + C7970) * C31304) *
               C49054 +
           ((C15690 + C15689 + C15688) * C49094 +
            (C15687 + C15686 + C15685) * C31305 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C31302 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C31304) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C7760 * C121 + C49316 * C128 + C7761 * C122 + C49303 * C129 +
             C7762 * C123 + C49271 * C130) *
                C31304 +
            (C7760 * C133 + C49316 * C142 + C7761 * C134 + C49303 * C143 +
             C7762 * C135 + C49271 * C144) *
                C31302 +
            (C7760 * C343 + C49316 * C354 + C7761 * C342 + C49303 * C353 +
             C7762 * C341 + C49271 * C352) *
                C31305 +
            (C7760 * C349 + C49316 * C361 + C7761 * C348 + C49303 * C360 +
             C7762 * C347 + C49271 * C359) *
                C49094) *
               C22509 +
           ((C7760 * C235 + C49316 * C246 + C7761 * C234 + C49303 * C245 +
             C7762 * C233 + C49271 * C244) *
                C31304 +
            (C7760 * C241 + C49316 * C253 + C7761 * C240 + C49303 * C252 +
             C7762 * C239 + C49271 * C251) *
                C31302 +
            (C7760 * C621 + C49316 * C626 + C7761 * C622 + C49303 * C627 +
             C7762 * C623 + C49271 * C628) *
                C31305 +
            (C7760 * C631 + C49316 * C636 + C7761 * C632 + C49303 * C637 +
             C7762 * C633 + C49271 * C638) *
                C49094) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C34065 +
            (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
            C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
            C11177 * C34068 + C11176 * C49300) *
               C22509 +
           (C9184 * C34065 + C9185 * C49327 + C9574 * C34066 + C9573 * C49324 +
            C10113 * C34067 + C10114 * C49315 + C10757 * C34068 +
            C10756 * C49300) *
               C49054) *
              C48978 * C48961 * C110 -
          ((C21543 * C49300 + C21542 * C34068 + C10120 * C49315 +
            C10119 * C34067 + C10118 * C49324 + C10117 * C34066 +
            C9193 * C49327 + C9192 * C34065) *
               C49054 +
           (C18057 * C49300 + C18056 * C34068 + C10314 * C49315 +
            C10313 * C34067 + C10312 * C49324 + C10311 * C34066 +
            (C9060 * C132 + C48890 * C141) * C49327 +
            (C9060 * C120 + C48890 * C127) * C34065) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C34065 +
            (C9060 * C133 + C48890 * C142) * C49327 +
            (C9060 * C343 + C48890 * C354) * C34066 +
            (C9060 * C349 + C48890 * C361) * C49324 +
            (C9060 * C872 + C48890 * C877) * C34067 +
            (C9060 * C882 + C48890 * C887) * C49315 +
            (C9060 * C2730 + C48890 * C2737) * C34068 +
            (C9060 * C2734 + C48890 * C2742) * C49300) *
               C22509 +
           ((C9060 * C235 + C48890 * C246) * C34065 +
            (C9060 * C241 + C48890 * C253) * C49327 +
            (C9060 * C621 + C48890 * C626) * C34066 +
            (C9060 * C631 + C48890 * C636) * C49324 +
            (C9060 * C2296 + C48890 * C2302) * C34067 +
            (C9060 * C2305 + C48890 * C2314) * C49315 +
            (C9060 * C3222 + C48890 * C3225) * C34068 +
            (C9060 * C3228 + C48890 * C3231) * C49300) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C48978 * C229 -
                   ((C9567 * C49094 + C9568 * C31305 + C9191 * C31302 +
                     C9190 * C31304) *
                        C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C48978 * C49279) *
                      C231 +
                  (((C41396 + C41397 + C41398 + C41399) * C49326 +
                    (C41400 + C41401 + C41402 + C41403) * C49322 +
                    (C41404 + C41405 + C41406 + C41407) * C49312 +
                    (C9198 * C31304 + C9199 * C31302 +
                     (C9060 * C9298 + C48890 * C9301) * C31305 +
                     (C9060 * C9302 + C48890 * C9304) * C49094) *
                        C49294) *
                       C48978 * C49279 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C48978 * C229) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C48978 * C229 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    ((C8585 + C8586 + C8587) * C49094 +
                     (C8588 + C8589 + C8590) * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C48978 * C49279) *
                      C231 +
                  ((((C7970 + C7971 + C7972) * C31304 +
                     (C7973 + C7974 + C7975) * C31302 +
                     (C39880 + C39881 + C39882) * C31305 +
                     (C39883 + C39884 + C39885) * C49094) *
                        C22509 +
                    ((C7976 + C7977 + C7978) * C31304 +
                     (C7979 + C7980 + C7981) * C31302 +
                     (C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                      C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                         C31305 +
                     (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                      C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C48978 * C229) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C48978 * C229 -
                   ((C10754 * C49300 + C10755 * C34068 + C10116 * C49315 +
                     C10115 * C34067 + C9571 * C49324 + C9572 * C34066 +
                     C9187 * C49327 + C9186 * C34065) *
                        C49054 +
                    (C42511 + C42510 + C42509 + C42508 + C42507 + C42506 +
                     C42505 + C42504) *
                        C22509) *
                       C48978 * C49279) *
                      C231 +
                  (((C42512 + C42513 + C42514 + C42515 + C42516 + C42517 +
                     C42518 + C42519) *
                        C22509 +
                    (C9194 * C34065 + C9195 * C49327 + C10121 * C34066 +
                     C10122 * C49324 + C10123 * C34067 + C10124 * C49315 +
                     (C9060 * C10283 + C48890 * C10286) * C34068 +
                     (C9060 * C10287 + C48890 * C10289) * C49300) *
                        C49054) *
                       C48978 * C49279 -
                   ((C42519 + C42518 + C42517 + C42516 + C42515 + C42514 +
                     C42513 + C42512) *
                        C49054 +
                    (C18057 * C49300 + C18056 * C34068 + C10314 * C49315 +
                     C10313 * C34067 + C10312 * C49324 + C10311 * C34066 +
                     (C9060 * C132 + C48890 * C141) * C49327 +
                     (C9060 * C120 + C48890 * C127) * C34065) *
                        C22509) *
                       C48978 * C229) *
                      C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C339 -
                   ((C10581 * C49094 + C10582 * C31305 + C9569 * C31302 +
                     C9570 * C31304) *
                        C49294 +
                    (C10116 * C49094 + C10115 * C31305 + C9571 * C31302 +
                     C9572 * C31304) *
                        C49312 +
                    (C10114 * C49094 + C10113 * C31305 + C9573 * C31302 +
                     C9574 * C31304) *
                        C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C48961 * C231 +
                  (((C10311 * C31304 + C10312 * C31302 + C10313 * C31305 +
                     C10314 * C49094) *
                        C49326 +
                    (C10117 * C31304 + C10118 * C31302 + C10119 * C31305 +
                     C10120 * C49094) *
                        C49322 +
                    (C10121 * C31304 + C10122 * C31302 + C10123 * C31305 +
                     C10124 * C49094) *
                        C49312 +
                    (C14345 * C31304 + C14346 * C31302 +
                     (C9060 * C10072 + C48890 * C10073) * C31305 +
                     (C9060 * C10074 + C48890 * C10075) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C339) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C339 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 +
                     (C8585 + C8586 + C8587) * C31302 +
                     (C8588 + C8589 + C8590) * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C48961 * C231 +
                  ((((C15685 + C15686 + C15687) * C31304 +
                     (C15688 + C15689 + C15690) * C31302 +
                     (C15691 + C15692 + C15693) * C31305 +
                     (C15694 + C15695 + C15696) * C49094) *
                        C22509 +
                    ((C39880 + C39881 + C39882) * C31304 +
                     (C39883 + C39884 + C39885) * C31302 +
                     (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 +
                      C49303 * C2302 + C7762 * C2580 + C49271 * C2581) *
                         C31305 +
                     (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 +
                      C49303 * C2314 + C7762 * C2582 + C49271 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C339) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C339 -
                   ((C18295 * C49300 + C18294 * C34068 + C10756 * C49315 +
                     C10757 * C34067 + C10114 * C49324 + C10113 * C34066 +
                     C9573 * C49327 + C9574 * C34065) *
                        C49054 +
                    (C18055 * C49300 + C18054 * C34068 + C11176 * C49315 +
                     C11177 * C34067 + C10310 * C49324 + C10309 * C34066 +
                     C10308 * C49327 + C10307 * C34065) *
                        C22509) *
                       C49281) *
                      C48961 * C231 +
                  (((C10311 * C34065 + C10312 * C49327 + C10313 * C34066 +
                     C10314 * C49324 + C18056 * C34067 + C18057 * C49315 +
                     C18058 * C34068 + C18059 * C49300) *
                        C22509 +
                    (C10117 * C34065 + C10118 * C49327 + C10119 * C34066 +
                     C10120 * C49324 + C21542 * C34067 + C21543 * C49315 +
                     (C9060 * C17947 + C48890 * C17948) * C34068 +
                     (C9060 * C17949 + C48890 * C17950) * C49300) *
                        C49054) *
                       C49281 -
                   ((C42519 + C42518 + C42517 + C42516 + C42515 + C42514 +
                     C42513 + C42512) *
                        C49054 +
                    (C18057 * C49300 + C18056 * C34068 + C10314 * C49315 +
                     C10313 * C34067 + C10312 * C49324 + C10311 * C34066 +
                     (C9060 * C132 + C48890 * C141) * C49327 +
                     (C9060 * C120 + C48890 * C127) * C34065) *
                        C22509) *
                       C339) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C48978 * C447 -
                   ((C9567 * C49094 + C9568 * C31305 + C9191 * C31302 +
                     C9190 * C31304) *
                        C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C48978 * C49279) *
                      C449 +
                  (((C41396 + C41397 + C41398 + C41399) * C49326 +
                    (C41400 + C41401 + C41402 + C41403) * C49322 +
                    (C41404 + C41405 + C41406 + C41407) * C49312 +
                    (C9198 * C31304 + C9199 * C31302 +
                     (C9060 * C9298 + C48890 * C9301) * C31305 +
                     (C9060 * C9302 + C48890 * C9304) * C49094) *
                        C49294) *
                       C48978 * C49279 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C48978 * C447) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C48978 * C447 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    ((C8585 + C8586 + C8587) * C49094 +
                     (C8588 + C8589 + C8590) * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C48978 * C49279) *
                      C449 +
                  ((((C7970 + C7971 + C7972) * C31304 +
                     (C7973 + C7974 + C7975) * C31302 +
                     (C39880 + C39881 + C39882) * C31305 +
                     (C39883 + C39884 + C39885) * C49094) *
                        C22509 +
                    ((C7976 + C7977 + C7978) * C31304 +
                     (C7979 + C7980 + C7981) * C31302 +
                     (C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                      C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                         C31305 +
                     (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                      C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C48978 * C447) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C48978 * C447 -
                   ((C10754 * C49300 + C10755 * C34068 + C10116 * C49315 +
                     C10115 * C34067 + C9571 * C49324 + C9572 * C34066 +
                     C9187 * C49327 + C9186 * C34065) *
                        C49054 +
                    (C42511 + C42510 + C42509 + C42508 + C42507 + C42506 +
                     C42505 + C42504) *
                        C22509) *
                       C48978 * C49279) *
                      C449 +
                  (((C42512 + C42513 + C42514 + C42515 + C42516 + C42517 +
                     C42518 + C42519) *
                        C22509 +
                    (C9194 * C34065 + C9195 * C49327 + C10121 * C34066 +
                     C10122 * C49324 + C10123 * C34067 + C10124 * C49315 +
                     (C9060 * C10283 + C48890 * C10286) * C34068 +
                     (C9060 * C10287 + C48890 * C10289) * C49300) *
                        C49054) *
                       C48978 * C49279 -
                   ((C42519 + C42518 + C42517 + C42516 + C42515 + C42514 +
                     C42513 + C42512) *
                        C49054 +
                    (C18057 * C49300 + C18056 * C34068 + C10314 * C49315 +
                     C10313 * C34067 + C10312 * C49324 + C10311 * C34066 +
                     (C9060 * C132 + C48890 * C141) * C49327 +
                     (C9060 * C120 + C48890 * C127) * C34065) *
                        C22509) *
                       C48978 * C447) *
                      C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C31304 +
            (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
            C10308 * C49094) *
               C49326 +
           (C41384 + C41385 + C41386 + C41387) * C49322 + C41774 * C49312 +
           C41775 * C49294) *
              C48978 * C513 -
          ((C41768 + C41769 + C41770 + C41771) * C49294 +
           (C41395 + C41394 + C41393 + C41392) * C49312 +
           (C41391 + C41390 + C41389 + C41388) * C49322 +
           (C41387 + C41386 + C41385 + C41384) * C49326) *
              C48978 * C514 +
          (C41774 * C49326 + C41775 * C49322 +
           (C41771 + C41770 + C41769 + C41768) * C49312 +
           (C9462 * C31304 + C9461 * C31302 +
            (C9060 * C9546 + C48890 * C9547) * C31305 +
            (C9060 * C9548 + C48890 * C9549) * C49094) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C31304 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C31302 +
            (C15673 + C15674 + C15675) * C31305 +
            (C15676 + C15677 + C15678) * C49094) *
               C22509 +
           ((C7958 + C7959 + C7960) * C31304 +
            (C7961 + C7962 + C7963) * C31302 +
            (C8590 + C8589 + C8588) * C31305 +
            (C8587 + C8586 + C8585) * C49094) *
               C49054) *
              C48978 * C513 -
          (((C8579 + C8580 + C8581) * C49094 +
            (C8582 + C8583 + C8584) * C31305 +
            (C7969 + C7968 + C7967) * C31302 +
            (C7966 + C7965 + C7964) * C31304) *
               C49054 +
           ((C8585 + C8586 + C8587) * C49094 +
            (C8588 + C8589 + C8590) * C31305 +
            (C7963 + C7962 + C7961) * C31302 +
            (C7960 + C7959 + C7958) * C31304) *
               C22509) *
              C48978 * C514 +
          ((C8398 * C31304 + C8399 * C31302 + (C8584 + C8583 + C8582) * C31305 +
            (C8581 + C8580 + C8579) * C49094) *
               C22509 +
           ((C8405 + C8404 + C8403) * C31304 +
            (C8402 + C8401 + C8400) * C31302 +
            (C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
             C7762 * C1846 + C49271 * C1849) *
                C31305 +
            (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
             C7762 * C1852 + C49271 * C1855) *
                C49094) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C34065 +
            (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
            C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
            C11177 * C34068 + C11176 * C49300) *
               C22509 +
           (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 + C42510 +
            C42511) *
               C49054) *
              C48978 * C513 -
          ((C42878 + C42879 + C42880 + C42881 + C42882 + C42883 + C42884 +
            C42885) *
               C49054 +
           (C42511 + C42510 + C42509 + C42508 + C42507 + C42506 + C42505 +
            C42504) *
               C22509) *
              C48978 * C514 +
          ((C42885 + C42884 + C42883 + C42882 + C42881 + C42880 + C42879 +
            C42878) *
               C22509 +
           (C9188 * C34065 + C9189 * C49327 + C9570 * C34066 + C9569 * C49324 +
            C10582 * C34067 + C10581 * C49315 +
            (C9060 * C10733 + C48890 * C10734) * C34068 +
            (C9060 * C10735 + C48890 * C10736) * C49300) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[68] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C339 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C447 +
                  (((C41917 + C41916 + C41915 + C41914) * C49326 +
                    (C41913 + C41912 + C41911 + C41910) * C49322 +
                    (C41909 + C41908 + C41907 + C41906) * C49312 +
                    (C9568 * C31304 + C9567 * C31302 +
                     (C9060 * C9809 + C48890 * C9812) * C31305 +
                     (C9060 * C9813 + C48890 * C9815) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41768 + C41769 + C41770 + C41771) * C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C339) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C339 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C447 +
                  (((C40618 * C31304 + C40619 * C31302 +
                     (C16111 + C16112 + C16113) * C31305 +
                     (C16114 + C16115 + C16116) * C49094) *
                        C22509 +
                    ((C8584 + C8583 + C8582) * C31304 +
                     (C8581 + C8580 + C8579) * C31302 +
                     (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 +
                      C49303 * C2307 + C7762 * C2299 + C49271 * C2308) *
                         C31305 +
                     (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 +
                      C49303 * C2316 + C7762 * C2311 + C49271 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    (C40620 * C49094 + C40621 * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C339) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C339 -
                   ((C43016 + C43017 + C43018 + C43019 + C43020 + C43021 +
                     C43022 + C43023) *
                        C49054 +
                    (C18055 * C49300 + C18054 * C34068 + C11176 * C49315 +
                     C11177 * C34067 + C10310 * C49324 + C10309 * C34066 +
                     C10308 * C49327 + C10307 * C34065) *
                        C22509) *
                       C49281) *
                      C447 +
                  (((C43023 + C43022 + C43021 + C43020 + C43019 + C43018 +
                     C43017 + C43016) *
                        C22509 +
                    (C9572 * C34065 + C9571 * C49327 + C10115 * C34066 +
                     C10116 * C49324 + C10755 * C34067 + C10754 * C49315 +
                     (C9060 * C11164 + C48890 * C11167) * C34068 +
                     (C9060 * C11168 + C48890 * C11170) * C49300) *
                        C49054) *
                       C49281 -
                   ((C42878 + C42879 + C42880 + C42881 + C42882 + C42883 +
                     C42884 + C42885) *
                        C49054 +
                    (C42511 + C42510 + C42509 + C42508 + C42507 + C42506 +
                     C42505 + C42504) *
                        C22509) *
                       C339) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[69] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C721 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C48961 * C449 +
                  (((C10311 * C31304 + C10312 * C31302 + C10313 * C31305 +
                     C10314 * C49094) *
                        C49326 +
                    (C10117 * C31304 + C10118 * C31302 + C10119 * C31305 +
                     C10120 * C49094) *
                        C49322 +
                    (C10121 * C31304 + C10122 * C31302 + C10123 * C31305 +
                     C10124 * C49094) *
                        C49312 +
                    (C14345 * C31304 + C14346 * C31302 +
                     (C9060 * C10072 + C48890 * C10073) * C31305 +
                     (C9060 * C10074 + C48890 * C10075) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C721) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C721 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C48961 * C449 +
                  ((((C15685 + C15686 + C15687) * C31304 +
                     (C15688 + C15689 + C15690) * C31302 +
                     (C15691 + C15692 + C15693) * C31305 +
                     (C15694 + C15695 + C15696) * C49094) *
                        C22509 +
                    ((C39880 + C39881 + C39882) * C31304 +
                     (C39883 + C39884 + C39885) * C31302 +
                     (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 +
                      C49303 * C2302 + C7762 * C2580 + C49271 * C2581) *
                         C31305 +
                     (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 +
                      C49303 * C2314 + C7762 * C2582 + C49271 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C721) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C721 -
                   ((C43016 + C43017 + C43018 + C43019 + C43020 + C43021 +
                     C43022 + C43023) *
                        C49054 +
                    (C18055 * C49300 + C18054 * C34068 + C11176 * C49315 +
                     C11177 * C34067 + C10310 * C49324 + C10309 * C34066 +
                     C10308 * C49327 + C10307 * C34065) *
                        C22509) *
                       C49281) *
                      C48961 * C449 +
                  (((C10311 * C34065 + C10312 * C49327 + C10313 * C34066 +
                     C10314 * C49324 + C18056 * C34067 + C18057 * C49315 +
                     C18058 * C34068 + C18059 * C49300) *
                        C22509 +
                    (C10117 * C34065 + C10118 * C49327 + C10119 * C34066 +
                     C10120 * C49324 + C21542 * C34067 + C21543 * C49315 +
                     (C9060 * C17947 + C48890 * C17948) * C34068 +
                     (C9060 * C17949 + C48890 * C17950) * C49300) *
                        C49054) *
                       C49281 -
                   ((C42519 + C42518 + C42517 + C42516 + C42515 + C42514 +
                     C42513 + C42512) *
                        C49054 +
                    (C18057 * C49300 + C18056 * C34068 + C10314 * C49315 +
                     C10313 * C34067 + C10312 * C49324 + C10311 * C34066 +
                     (C9060 * C132 + C48890 * C141) * C49327 +
                     (C9060 * C120 + C48890 * C127) * C34065) *
                        C22509) *
                       C721) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C721 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C229 +
                  (((C41917 + C41916 + C41915 + C41914) * C49326 +
                    (C41913 + C41912 + C41911 + C41910) * C49322 +
                    (C41909 + C41908 + C41907 + C41906) * C49312 +
                    (C9568 * C31304 + C9567 * C31302 +
                     (C9060 * C9809 + C48890 * C9812) * C31305 +
                     (C9060 * C9813 + C48890 * C9815) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41768 + C41769 + C41770 + C41771) * C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C721) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C721 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C229 +
                  (((C40618 * C31304 + C40619 * C31302 +
                     (C16111 + C16112 + C16113) * C31305 +
                     (C16114 + C16115 + C16116) * C49094) *
                        C22509 +
                    ((C8584 + C8583 + C8582) * C31304 +
                     (C8581 + C8580 + C8579) * C31302 +
                     (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 +
                      C49303 * C2307 + C7762 * C2299 + C49271 * C2308) *
                         C31305 +
                     (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 +
                      C49303 * C2316 + C7762 * C2311 + C49271 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    (C40620 * C49094 + C40621 * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C721) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C34065 +
                     (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                     C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                     C11177 * C34068 + C11176 * C49300) *
                        C22509 +
                    (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                     C42510 + C42511) *
                        C49054) *
                       C721 -
                   ((C43016 + C43017 + C43018 + C43019 + C43020 + C43021 +
                     C43022 + C43023) *
                        C49054 +
                    (C18055 * C49300 + C18054 * C34068 + C11176 * C49315 +
                     C11177 * C34067 + C10310 * C49324 + C10309 * C34066 +
                     C10308 * C49327 + C10307 * C34065) *
                        C22509) *
                       C49281) *
                      C229 +
                  (((C43023 + C43022 + C43021 + C43020 + C43019 + C43018 +
                     C43017 + C43016) *
                        C22509 +
                    (C9572 * C34065 + C9571 * C49327 + C10115 * C34066 +
                     C10116 * C49324 + C10755 * C34067 + C10754 * C49315 +
                     (C9060 * C11164 + C48890 * C11167) * C34068 +
                     (C9060 * C11168 + C48890 * C11170) * C49300) *
                        C49054) *
                       C49281 -
                   ((C42878 + C42879 + C42880 + C42881 + C42882 + C42883 +
                     C42884 + C42885) *
                        C49054 +
                    (C42511 + C42510 + C42509 + C42508 + C42507 + C42506 +
                     C42505 + C42504) *
                        C22509) *
                       C721) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48890 * C126) * C31304 +
                    (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                    C10308 * C49094) *
                       C49326 +
                   (C41384 + C41385 + C41386 + C41387) * C49322 +
                   C41774 * C49312 + C41775 * C49294) *
                      C867 -
                  ((C41906 + C41907 + C41908 + C41909) * C49294 +
                   (C41910 + C41911 + C41912 + C41913) * C49312 +
                   (C41914 + C41915 + C41916 + C41917) * C49322 +
                   (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                    C10307 * C31304) *
                       C49326) *
                      C868 +
                  ((C10309 * C31304 + C10310 * C31302 + C11177 * C31305 +
                    C11176 * C49094) *
                       C49326 +
                   (C10113 * C31304 + C10114 * C31302 + C10757 * C31305 +
                    C10756 * C49094) *
                       C49322 +
                   (C10115 * C31304 + C10116 * C31302 + C10755 * C31305 +
                    C10754 * C49094) *
                       C49312 +
                   (C10582 * C31304 + C10581 * C31302 +
                    (C9060 * C10733 + C48890 * C10734) * C31305 +
                    (C9060 * C10735 + C48890 * C10736) * C49094) *
                       C49294) *
                      C869) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                     C49303 * C127 + C7762 * C121 + C49271 * C128) *
                        C31304 +
                    (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                     C49303 * C141 + C7762 * C133 + C49271 * C142) *
                        C31302 +
                    (C15673 + C15674 + C15675) * C31305 +
                    (C15676 + C15677 + C15678) * C49094) *
                       C22509 +
                   ((C7958 + C7959 + C7960) * C31304 +
                    (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                    C40619 * C49094) *
                       C49054) *
                      C867 -
                  (((C16116 + C16115 + C16114) * C49094 +
                    (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                    C40621 * C31304) *
                       C49054 +
                   ((C15684 + C15683 + C15682) * C49094 +
                    (C15681 + C15680 + C15679) * C31305 +
                    (C15678 + C15677 + C15676) * C31302 +
                    (C15675 + C15674 + C15673) * C31304) *
                       C22509) *
                      C868 +
                  ((C16533 * C31304 + C16534 * C31302 +
                    (C16540 + C16539 + C16538) * C31305 +
                    (C16537 + C16536 + C16535) * C49094) *
                       C22509 +
                   ((C16111 + C16112 + C16113) * C31304 +
                    (C16114 + C16115 + C16116) * C31302 +
                    (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 +
                     C49303 * C3224 + C7762 * C3222 + C49271 * C3225) *
                        C31305 +
                    (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 +
                     C49303 * C3230 + C7762 * C3228 + C49271 * C3231) *
                        C49094) *
                       C49054) *
                      C869) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48890 * C126) * C34065 +
                    (C9060 * C131 + C48890 * C140) * C49327 + C10307 * C34066 +
                    C10308 * C49324 + C10309 * C34067 + C10310 * C49315 +
                    C11177 * C34068 + C11176 * C49300) *
                       C22509 +
                   (C42504 + C42505 + C42506 + C42507 + C42508 + C42509 +
                    C42510 + C42511) *
                       C49054) *
                      C867 -
                  ((C43016 + C43017 + C43018 + C43019 + C43020 + C43021 +
                    C43022 + C43023) *
                       C49054 +
                   (C18055 * C49300 + C18054 * C34068 + C11176 * C49315 +
                    C11177 * C34067 + C10310 * C49324 + C10309 * C34066 +
                    C10308 * C49327 + C10307 * C34065) *
                       C22509) *
                      C868 +
                  ((C10309 * C34065 + C10310 * C49327 + C11177 * C34066 +
                    C11176 * C49324 + C18054 * C34067 + C18055 * C49315 +
                    C18531 * C34068 + C18530 * C49300) *
                       C22509 +
                   (C10113 * C34065 + C10114 * C49327 + C10757 * C34066 +
                    C10756 * C49324 + C18294 * C34067 + C18295 * C49315 +
                    (C9060 * C18285 + C48890 * C18286) * C34068 +
                    (C9060 * C18287 + C48890 * C18288) * C49300) *
                       C49054) *
                      C869) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C48044 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49090 +
            (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
            C20174 * C48050 + C20175 * C36785) *
               C22509 +
           ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
            C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
            C19625 * C36785) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C18883 + C18882) * C36785 + (C18881 + C18880) * C48050 +
            (C12749 + C12748) * C49097 + (C12747 + C12746) * C48036 +
            (C11477 + C11476) * C49090 + (C11475 + C11474) * C48044) *
               C49054 +
           ((C19089 + C19088) * C36785 + (C19087 + C19086) * C48050 +
            (C12971 + C12970) * C49097 + (C12969 + C12968) * C48036 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C49090 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C48044) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C48044 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C49090 +
            (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
                C48036 +
            (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
                C49097 +
            (C47907 * C872 + C49229 * C877 + C47888 * C873 + C48900 * C878) *
                C48050 +
            (C47907 * C882 + C49229 * C887 + C47888 * C883 + C48900 * C888) *
                C36785) *
               C22509 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C48044 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C49090 +
            (C47907 * C621 + C49229 * C626 + C47888 * C622 + C48900 * C627) *
                C48036 +
            (C47907 * C631 + C49229 * C636 + C47888 * C632 + C48900 * C637) *
                C49097 +
            (C47907 * C2296 + C49229 * C2302 + C47888 * C2580 +
             C48900 * C2581) *
                C48050 +
            (C47907 * C2305 + C49229 * C2314 + C47888 * C2582 +
             C48900 * C2583) *
                C36785) *
               C49054) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C48978 * C229 -
           (((C13537 + C13538) * C36785 + (C13539 + C13540) * C48050 +
             C13525 * C49097 + C13526 * C48036 + (C11469 + C11468) * C49090 +
             (C11467 + C11466) * C48044) *
                C49054 +
            (C19634 * C36785 + C19635 * C48050 + C13535 * C49097 +
             C13536 * C48036 + (C11465 + C11464) * C49090 +
             (C11463 + C11462) * C48044) *
                C22509) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C48044 + (C11476 + C11477) * C49090 +
             (C12746 + C12747) * C48036 + (C12748 + C12749) * C49097 +
             (C18880 + C18881) * C48050 + (C18882 + C18883) * C36785) *
                C22509 +
            ((C11478 + C11479) * C48044 + (C11480 + C11481) * C49090 +
             (C12750 + C12751) * C48036 + (C12752 + C12753) * C49097 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C48050 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C36785) *
                C49054) *
               C48978 * C49279 -
           (((C18883 + C18882) * C36785 + (C18881 + C18880) * C48050 +
             (C12749 + C12748) * C49097 + (C12747 + C12746) * C48036 +
             (C11477 + C11476) * C49090 + (C11475 + C11474) * C48044) *
                C49054 +
            ((C19089 + C19088) * C36785 + (C19087 + C19086) * C48050 +
             (C12971 + C12970) * C49097 + (C12969 + C12968) * C48036 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49090 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C48044) *
                C22509) *
               C48978 * C229) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C339 -
           (((C19636 + C19637) * C36785 + (C19638 + C19639) * C48050 +
             C19634 * C49097 + C19635 * C48036 + C13535 * C49090 +
             C13536 * C48044) *
                C49054 +
            ((C20184 + C20185) * C36785 + (C20186 + C20187) * C48050 +
             (C14087 + C14088) * C49097 + (C14089 + C14090) * C48036 +
             (C12967 + C12966) * C49090 + (C12965 + C12964) * C48044) *
                C22509) *
               C49281) *
              C48961 * C231 +
          ((((C12968 + C12969) * C48044 + (C12970 + C12971) * C49090 +
             (C19086 + C19087) * C48036 + (C19088 + C19089) * C49097 +
             (C20562 + C20563) * C48050 + (C20564 + C20565) * C36785) *
                C22509 +
            ((C12746 + C12747) * C48044 + (C12748 + C12749) * C49090 +
             (C18880 + C18881) * C48036 + (C18882 + C18883) * C49097 +
             (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
              C48900 * C3225) *
                 C48050 +
             (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
              C48900 * C3231) *
                 C36785) *
                C49054) *
               C49281 -
           (((C18883 + C18882) * C36785 + (C18881 + C18880) * C48050 +
             (C12749 + C12748) * C49097 + (C12747 + C12746) * C48036 +
             (C11477 + C11476) * C49090 + (C11475 + C11474) * C48044) *
                C49054 +
            ((C19089 + C19088) * C36785 + (C19087 + C19086) * C48050 +
             (C12971 + C12970) * C49097 + (C12969 + C12968) * C48036 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49090 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C48044) *
                C22509) *
               C339) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C48978 * C447 -
           (((C13537 + C13538) * C36785 + (C13539 + C13540) * C48050 +
             C13525 * C49097 + C13526 * C48036 + (C11469 + C11468) * C49090 +
             (C11467 + C11466) * C48044) *
                C49054 +
            (C19634 * C36785 + C19635 * C48050 + C13535 * C49097 +
             C13536 * C48036 + (C11465 + C11464) * C49090 +
             (C11463 + C11462) * C48044) *
                C22509) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C48044 + (C11476 + C11477) * C49090 +
             (C12746 + C12747) * C48036 + (C12748 + C12749) * C49097 +
             (C18880 + C18881) * C48050 + (C18882 + C18883) * C36785) *
                C22509 +
            ((C11478 + C11479) * C48044 + (C11480 + C11481) * C49090 +
             (C12750 + C12751) * C48036 + (C12752 + C12753) * C49097 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C48050 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C36785) *
                C49054) *
               C48978 * C49279 -
           (((C18883 + C18882) * C36785 + (C18881 + C18880) * C48050 +
             (C12749 + C12748) * C49097 + (C12747 + C12746) * C48036 +
             (C11477 + C11476) * C49090 + (C11475 + C11474) * C48044) *
                C49054 +
            ((C19089 + C19088) * C36785 + (C19087 + C19086) * C48050 +
             (C12971 + C12970) * C49097 + (C12969 + C12968) * C48036 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49090 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C48044) *
                C22509) *
               C48978 * C447) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C48044 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49090 +
            (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
            C20174 * C48050 + C20175 * C36785) *
               C22509 +
           ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
            C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
            C19625 * C36785) *
               C49054) *
              C48978 * C513 -
          (((C13537 + C13538) * C36785 + (C13539 + C13540) * C48050 +
            C13525 * C49097 + C13526 * C48036 + (C11469 + C11468) * C49090 +
            (C11467 + C11466) * C48044) *
               C49054 +
           (C19634 * C36785 + C19635 * C48050 + C13535 * C49097 +
            C13536 * C48036 + (C11465 + C11464) * C49090 +
            (C11463 + C11462) * C48044) *
               C22509) *
              C48978 * C514 +
          ((C11844 * C48044 + C11845 * C49090 + C13314 * C48036 +
            C13315 * C49097 + (C13540 + C13539) * C48050 +
            (C13538 + C13537) * C36785) *
               C22509 +
           (C11846 * C48044 + C11847 * C49090 + (C12023 + C12022) * C48036 +
            (C12021 + C12020) * C49097 +
            (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
             C48900 * C10073) *
                C48050 +
            (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
             C48900 * C10075) *
                C36785) *
               C49054) *
              C48978 * C515) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C339 -
           (((C19636 + C19637) * C36785 + (C19638 + C19639) * C48050 +
             C19634 * C49097 + C19635 * C48036 + C13535 * C49090 +
             C13536 * C48044) *
                C49054 +
            ((C20184 + C20185) * C36785 + (C20186 + C20187) * C48050 +
             (C14087 + C14088) * C49097 + (C14089 + C14090) * C48036 +
             (C12967 + C12966) * C49090 + (C12965 + C12964) * C48044) *
                C22509) *
               C49281) *
              C447 +
          (((C13515 * C48044 + C13516 * C49090 + C19624 * C48036 +
             C19625 * C49097 + (C19639 + C19638) * C48050 +
             (C19637 + C19636) * C36785) *
                C22509 +
            (C13314 * C48044 + C13315 * C49090 + (C13540 + C13539) * C48036 +
             (C13538 + C13537) * C49097 +
             (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
              C48900 * C10286) *
                 C48050 +
             (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
              C48900 * C10289) *
                 C36785) *
                C49054) *
               C49281 -
           (((C13537 + C13538) * C36785 + (C13539 + C13540) * C48050 +
             C13525 * C49097 + C13526 * C48036 + (C11469 + C11468) * C49090 +
             (C11467 + C11466) * C48044) *
                C49054 +
            (C19634 * C36785 + C19635 * C48050 + C13535 * C49097 +
             C13536 * C48036 + (C11465 + C11464) * C49090 +
             (C11463 + C11462) * C48044) *
                C22509) *
               C339) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C721 -
           (((C19636 + C19637) * C36785 + (C19638 + C19639) * C48050 +
             C19634 * C49097 + C19635 * C48036 + C13535 * C49090 +
             C13536 * C48044) *
                C49054 +
            ((C20184 + C20185) * C36785 + (C20186 + C20187) * C48050 +
             (C14087 + C14088) * C49097 + (C14089 + C14090) * C48036 +
             (C12967 + C12966) * C49090 + (C12965 + C12964) * C48044) *
                C22509) *
               C49281) *
              C48961 * C449 +
          ((((C12968 + C12969) * C48044 + (C12970 + C12971) * C49090 +
             (C19086 + C19087) * C48036 + (C19088 + C19089) * C49097 +
             (C20562 + C20563) * C48050 + (C20564 + C20565) * C36785) *
                C22509 +
            ((C12746 + C12747) * C48044 + (C12748 + C12749) * C49090 +
             (C18880 + C18881) * C48036 + (C18882 + C18883) * C49097 +
             (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
              C48900 * C3225) *
                 C48050 +
             (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
              C48900 * C3231) *
                 C36785) *
                C49054) *
               C49281 -
           (((C18883 + C18882) * C36785 + (C18881 + C18880) * C48050 +
             (C12749 + C12748) * C49097 + (C12747 + C12746) * C48036 +
             (C11477 + C11476) * C49090 + (C11475 + C11474) * C48044) *
                C49054 +
            ((C19089 + C19088) * C36785 + (C19087 + C19086) * C48050 +
             (C12971 + C12970) * C49097 + (C12969 + C12968) * C48036 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49090 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C48044) *
                C22509) *
               C721) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C48044 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49090 +
             (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
             C20174 * C48050 + C20175 * C36785) *
                C22509 +
            ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
             C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
             C19625 * C36785) *
                C49054) *
               C721 -
           (((C19636 + C19637) * C36785 + (C19638 + C19639) * C48050 +
             C19634 * C49097 + C19635 * C48036 + C13535 * C49090 +
             C13536 * C48044) *
                C49054 +
            ((C20184 + C20185) * C36785 + (C20186 + C20187) * C48050 +
             (C14087 + C14088) * C49097 + (C14089 + C14090) * C48036 +
             (C12967 + C12966) * C49090 + (C12965 + C12964) * C48044) *
                C22509) *
               C49281) *
              C229 +
          (((C13515 * C48044 + C13516 * C49090 + C19624 * C48036 +
             C19625 * C49097 + (C19639 + C19638) * C48050 +
             (C19637 + C19636) * C36785) *
                C22509 +
            (C13314 * C48044 + C13315 * C49090 + (C13540 + C13539) * C48036 +
             (C13538 + C13537) * C49097 +
             (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
              C48900 * C10286) *
                 C48050 +
             (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
              C48900 * C10289) *
                 C36785) *
                C49054) *
               C49281 -
           (((C13537 + C13538) * C36785 + (C13539 + C13540) * C48050 +
             C13525 * C49097 + C13526 * C48036 + (C11469 + C11468) * C49090 +
             (C11467 + C11466) * C48044) *
                C49054 +
            (C19634 * C36785 + C19635 * C48050 + C13535 * C49097 +
             C13536 * C48036 + (C11465 + C11464) * C49090 +
             (C11463 + C11462) * C48044) *
                C22509) *
               C721) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C48044 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49090 +
            (C12964 + C12965) * C48036 + (C12966 + C12967) * C49097 +
            C20174 * C48050 + C20175 * C36785) *
               C22509 +
           ((C11462 + C11463) * C48044 + (C11464 + C11465) * C49090 +
            C13515 * C48036 + C13516 * C49097 + C19624 * C48050 +
            C19625 * C36785) *
               C49054) *
              C867 -
          (((C19636 + C19637) * C36785 + (C19638 + C19639) * C48050 +
            C19634 * C49097 + C19635 * C48036 + C13535 * C49090 +
            C13536 * C48044) *
               C49054 +
           ((C20184 + C20185) * C36785 + (C20186 + C20187) * C48050 +
            (C14087 + C14088) * C49097 + (C14089 + C14090) * C48036 +
            (C12967 + C12966) * C49090 + (C12965 + C12964) * C48044) *
               C22509) *
              C868 +
          ((C20174 * C48044 + C20175 * C49090 + C21282 * C48036 +
            C21283 * C49097 + (C21295 + C21294) * C48050 +
            (C21293 + C21292) * C36785) *
               C22509 +
           (C19624 * C48044 + C19625 * C49090 + (C19639 + C19638) * C48036 +
            (C19637 + C19636) * C49097 +
            (C47907 * C11163 + C49229 * C11165 + C47888 * C17947 +
             C48900 * C17948) *
                C48050 +
            (C47907 * C11166 + C49229 * C11169 + C47888 * C17949 +
             C48900 * C17950) *
                C36785) *
               C49054) *
              C869) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C31304 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C31302 +
            (C15673 + C15674 + C15675) * C31305 +
            (C15676 + C15677 + C15678) * C49094) *
               C22509 +
           ((C7958 + C7959 + C7960) * C31304 +
            (C7961 + C7962 + C7963) * C31302 +
            (C8590 + C8589 + C8588) * C31305 +
            (C8587 + C8586 + C8585) * C49094) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C7762 * C632 + C49271 * C637 + C7761 * C631 + C49303 * C636 +
             C7760 * C630 + C49316 * C635) *
                C49094 +
            (C7762 * C622 + C49271 * C627 + C7761 * C621 + C49303 * C626 +
             C7760 * C620 + C49316 * C625) *
                C31305 +
            (C7975 + C7974 + C7973) * C31302 +
            (C7972 + C7971 + C7970) * C31304) *
               C49054 +
           ((C15690 + C15689 + C15688) * C49094 +
            (C15687 + C15686 + C15685) * C31305 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C31302 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C31304) *
               C22509) *
              C48978 * C48961 * C111 +
          (((C7760 * C121 + C49316 * C128 + C7761 * C122 + C49303 * C129 +
             C7762 * C123 + C49271 * C130) *
                C31304 +
            (C7760 * C133 + C49316 * C142 + C7761 * C134 + C49303 * C143 +
             C7762 * C135 + C49271 * C144) *
                C31302 +
            (C7760 * C343 + C49316 * C354 + C7761 * C342 + C49303 * C353 +
             C7762 * C341 + C49271 * C352) *
                C31305 +
            (C7760 * C349 + C49316 * C361 + C7761 * C348 + C49303 * C360 +
             C7762 * C347 + C49271 * C359) *
                C49094) *
               C22509 +
           ((C7760 * C235 + C49316 * C246 + C7761 * C234 + C49303 * C245 +
             C7762 * C233 + C49271 * C244) *
                C31304 +
            (C7760 * C241 + C49316 * C253 + C7761 * C240 + C49303 * C252 +
             C7762 * C239 + C49271 * C251) *
                C31302 +
            (C7760 * C621 + C49316 * C626 + C7761 * C622 + C49303 * C627 +
             C7762 * C623 + C49271 * C628) *
                C31305 +
            (C7760 * C631 + C49316 * C636 + C7761 * C632 + C49303 * C637 +
             C7762 * C633 + C49271 * C638) *
                C49094) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C31304 +
            (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
            C10308 * C49094) *
               C49326 +
           (C9184 * C31304 + C9185 * C31302 + C9574 * C31305 + C9573 * C49094) *
               C49322 +
           (C9186 * C31304 + C9187 * C31302 + C9572 * C31305 + C9571 * C49094) *
               C49312 +
           (C9188 * C31304 + C9189 * C31302 + C9570 * C31305 + C9569 * C49094) *
               C49294) *
              C48978 * C48961 * C110 -
          ((C14346 * C49094 + C14345 * C31305 + C9197 * C31302 +
            C9196 * C31304) *
               C49294 +
           (C10122 * C49094 + C10121 * C31305 + C9195 * C31302 +
            C9194 * C31304) *
               C49312 +
           (C10118 * C49094 + C10117 * C31305 + C9193 * C31302 +
            C9192 * C31304) *
               C49322 +
           (C10312 * C49094 + C10311 * C31305 +
            (C9060 * C132 + C48890 * C141) * C31302 +
            (C9060 * C120 + C48890 * C127) * C31304) *
               C49326) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C31304 +
            (C9060 * C133 + C48890 * C142) * C31302 +
            (C9060 * C343 + C48890 * C354) * C31305 +
            (C9060 * C349 + C48890 * C361) * C49094) *
               C49326 +
           ((C9060 * C235 + C48890 * C246) * C31304 +
            (C9060 * C241 + C48890 * C253) * C31302 +
            (C9060 * C621 + C48890 * C626) * C31305 +
            (C9060 * C631 + C48890 * C636) * C49094) *
               C49322 +
           ((C9060 * C519 + C48890 * C524) * C31304 +
            (C9060 * C529 + C48890 * C534) * C31302 +
            (C9060 * C1389 + C48890 * C1396) * C31305 +
            (C9060 * C1393 + C48890 * C1401) * C49094) *
               C49312 +
           ((C9060 * C1155 + C48890 * C1162) * C31304 +
            (C9060 * C1159 + C48890 * C1167) * C31302 +
            (C9060 * C1846 + C48890 * C1849) * C31305 +
            (C9060 * C1852 + C48890 * C1855) * C49094) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C48978 * C229 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    ((C8585 + C8586 + C8587) * C49094 +
                     (C8588 + C8589 + C8590) * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C48978 * C49279) *
                      C231 +
                  ((((C7970 + C7971 + C7972) * C31304 +
                     (C7973 + C7974 + C7975) * C31302 +
                     (C39880 + C39881 + C39882) * C31305 +
                     (C39883 + C39884 + C39885) * C49094) *
                        C22509 +
                    ((C7976 + C7977 + C7978) * C31304 +
                     (C7979 + C7980 + C7981) * C31302 +
                     (C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                      C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                         C31305 +
                     (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                      C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C48978 * C229) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C48978 * C229 -
                   ((C9567 * C49094 + C9568 * C31305 + C9191 * C31302 +
                     C9190 * C31304) *
                        C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C48978 * C49279) *
                      C231 +
                  (((C41396 + C41397 + C41398 + C41399) * C49326 +
                    (C41400 + C41401 + C41402 + C41403) * C49322 +
                    (C41404 + C41405 + C41406 + C41407) * C49312 +
                    (C9198 * C31304 + C9199 * C31302 +
                     (C9060 * C9298 + C48890 * C9301) * C31305 +
                     (C9060 * C9302 + C48890 * C9304) * C49094) *
                        C49294) *
                       C48978 * C49279 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C48978 * C229) *
                      C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C339 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 +
                     (C8585 + C8586 + C8587) * C31302 +
                     (C8588 + C8589 + C8590) * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C48961 * C231 +
                  ((((C15685 + C15686 + C15687) * C31304 +
                     (C15688 + C15689 + C15690) * C31302 +
                     (C15691 + C15692 + C15693) * C31305 +
                     (C15694 + C15695 + C15696) * C49094) *
                        C22509 +
                    ((C39880 + C39881 + C39882) * C31304 +
                     (C39883 + C39884 + C39885) * C31302 +
                     (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 +
                      C49303 * C2302 + C7762 * C2580 + C49271 * C2581) *
                         C31305 +
                     (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 +
                      C49303 * C2314 + C7762 * C2582 + C49271 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C339) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C339 -
                   ((C10581 * C49094 + C10582 * C31305 + C9569 * C31302 +
                     C9570 * C31304) *
                        C49294 +
                    (C10116 * C49094 + C10115 * C31305 + C9571 * C31302 +
                     C9572 * C31304) *
                        C49312 +
                    (C10114 * C49094 + C10113 * C31305 + C9573 * C31302 +
                     C9574 * C31304) *
                        C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C48961 * C231 +
                  (((C10311 * C31304 + C10312 * C31302 + C10313 * C31305 +
                     C10314 * C49094) *
                        C49326 +
                    (C10117 * C31304 + C10118 * C31302 + C10119 * C31305 +
                     C10120 * C49094) *
                        C49322 +
                    (C10121 * C31304 + C10122 * C31302 + C10123 * C31305 +
                     C10124 * C49094) *
                        C49312 +
                    (C14345 * C31304 + C14346 * C31302 +
                     (C9060 * C10072 + C48890 * C10073) * C31305 +
                     (C9060 * C10074 + C48890 * C10075) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C339) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 +
                     (C8590 + C8589 + C8588) * C31305 +
                     (C8587 + C8586 + C8585) * C49094) *
                        C49054) *
                       C48978 * C447 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    ((C8585 + C8586 + C8587) * C49094 +
                     (C8588 + C8589 + C8590) * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C48978 * C49279) *
                      C449 +
                  ((((C7970 + C7971 + C7972) * C31304 +
                     (C7973 + C7974 + C7975) * C31302 +
                     (C39880 + C39881 + C39882) * C31305 +
                     (C39883 + C39884 + C39885) * C49094) *
                        C22509 +
                    ((C7976 + C7977 + C7978) * C31304 +
                     (C7979 + C7980 + C7981) * C31302 +
                     (C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                      C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                         C31305 +
                     (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                      C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                         C49094) *
                        C49054) *
                       C48978 * C49279 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C48978 * C447) *
                      C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    (C41388 + C41389 + C41390 + C41391) * C49312 +
                    (C41392 + C41393 + C41394 + C41395) * C49294) *
                       C48978 * C447 -
                   ((C9567 * C49094 + C9568 * C31305 + C9191 * C31302 +
                     C9190 * C31304) *
                        C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C48978 * C49279) *
                      C449 +
                  (((C41396 + C41397 + C41398 + C41399) * C49326 +
                    (C41400 + C41401 + C41402 + C41403) * C49322 +
                    (C41404 + C41405 + C41406 + C41407) * C49312 +
                    (C9198 * C31304 + C9199 * C31302 +
                     (C9060 * C9298 + C48890 * C9301) * C31305 +
                     (C9060 * C9302 + C48890 * C9304) * C49094) *
                        C49294) *
                       C48978 * C49279 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C48978 * C447) *
                      C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C31304 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C31302 +
            (C15673 + C15674 + C15675) * C31305 +
            (C15676 + C15677 + C15678) * C49094) *
               C22509 +
           ((C7958 + C7959 + C7960) * C31304 +
            (C7961 + C7962 + C7963) * C31302 +
            (C8590 + C8589 + C8588) * C31305 +
            (C8587 + C8586 + C8585) * C49094) *
               C49054) *
              C48978 * C513 -
          (((C8579 + C8580 + C8581) * C49094 +
            (C8582 + C8583 + C8584) * C31305 +
            (C7969 + C7968 + C7967) * C31302 +
            (C7966 + C7965 + C7964) * C31304) *
               C49054 +
           ((C8585 + C8586 + C8587) * C49094 +
            (C8588 + C8589 + C8590) * C31305 +
            (C7963 + C7962 + C7961) * C31302 +
            (C7960 + C7959 + C7958) * C31304) *
               C22509) *
              C48978 * C514 +
          ((C8398 * C31304 + C8399 * C31302 + (C8584 + C8583 + C8582) * C31305 +
            (C8581 + C8580 + C8579) * C49094) *
               C22509 +
           ((C8405 + C8404 + C8403) * C31304 +
            (C8402 + C8401 + C8400) * C31302 +
            (C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
             C7762 * C1846 + C49271 * C1849) *
                C31305 +
            (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
             C7762 * C1852 + C49271 * C1855) *
                C49094) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C31304 +
            (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
            C10308 * C49094) *
               C49326 +
           (C41384 + C41385 + C41386 + C41387) * C49322 + C41774 * C49312 +
           C41775 * C49294) *
              C48978 * C513 -
          ((C41768 + C41769 + C41770 + C41771) * C49294 +
           (C41395 + C41394 + C41393 + C41392) * C49312 +
           (C41391 + C41390 + C41389 + C41388) * C49322 +
           (C41387 + C41386 + C41385 + C41384) * C49326) *
              C48978 * C514 +
          (C41774 * C49326 + C41775 * C49322 +
           (C41771 + C41770 + C41769 + C41768) * C49312 +
           (C9462 * C31304 + C9461 * C31302 +
            (C9060 * C9546 + C48890 * C9547) * C31305 +
            (C9060 * C9548 + C48890 * C9549) * C49094) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C339 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C447 +
                  (((C40618 * C31304 + C40619 * C31302 +
                     (C16111 + C16112 + C16113) * C31305 +
                     (C16114 + C16115 + C16116) * C49094) *
                        C22509 +
                    ((C8584 + C8583 + C8582) * C31304 +
                     (C8581 + C8580 + C8579) * C31302 +
                     (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 +
                      C49303 * C2307 + C7762 * C2299 + C49271 * C2308) *
                         C31305 +
                     (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 +
                      C49303 * C2316 + C7762 * C2311 + C49271 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    (C40620 * C49094 + C40621 * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C339) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C339 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C447 +
                  (((C41917 + C41916 + C41915 + C41914) * C49326 +
                    (C41913 + C41912 + C41911 + C41910) * C49322 +
                    (C41909 + C41908 + C41907 + C41906) * C49312 +
                    (C9568 * C31304 + C9567 * C31302 +
                     (C9060 * C9809 + C48890 * C9812) * C31305 +
                     (C9060 * C9813 + C48890 * C9815) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41768 + C41769 + C41770 + C41771) * C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C339) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C721 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C48961 * C449 +
                  ((((C15685 + C15686 + C15687) * C31304 +
                     (C15688 + C15689 + C15690) * C31302 +
                     (C15691 + C15692 + C15693) * C31305 +
                     (C15694 + C15695 + C15696) * C49094) *
                        C22509 +
                    ((C39880 + C39881 + C39882) * C31304 +
                     (C39883 + C39884 + C39885) * C31302 +
                     (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 +
                      C49303 * C2302 + C7762 * C2580 + C49271 * C2581) *
                         C31305 +
                     (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 +
                      C49303 * C2314 + C7762 * C2582 + C49271 * C2583) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C39885 + C39884 + C39883) * C49094 +
                     (C39882 + C39881 + C39880) * C31305 +
                     (C7975 + C7974 + C7973) * C31302 +
                     (C7972 + C7971 + C7970) * C31304) *
                        C49054 +
                    ((C15690 + C15689 + C15688) * C49094 +
                     (C15687 + C15686 + C15685) * C31305 +
                     (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C31302 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C31304) *
                        C22509) *
                       C721) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C721 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C48961 * C449 +
                  (((C10311 * C31304 + C10312 * C31302 + C10313 * C31305 +
                     C10314 * C49094) *
                        C49326 +
                    (C10117 * C31304 + C10118 * C31302 + C10119 * C31305 +
                     C10120 * C49094) *
                        C49322 +
                    (C10121 * C31304 + C10122 * C31302 + C10123 * C31305 +
                     C10124 * C49094) *
                        C49312 +
                    (C14345 * C31304 + C14346 * C31302 +
                     (C9060 * C10072 + C48890 * C10073) * C31305 +
                     (C9060 * C10074 + C48890 * C10075) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41407 + C41406 + C41405 + C41404) * C49294 +
                    (C41403 + C41402 + C41401 + C41400) * C49312 +
                    (C41399 + C41398 + C41397 + C41396) * C49322 +
                    (C10312 * C49094 + C10311 * C31305 +
                     (C9060 * C132 + C48890 * C141) * C31302 +
                     (C9060 * C120 + C48890 * C127) * C31304) *
                        C49326) *
                       C721) *
                      C48961 * C49277)) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C31304 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C31302 +
                     (C15673 + C15674 + C15675) * C31305 +
                     (C15676 + C15677 + C15678) * C49094) *
                        C22509 +
                    ((C7958 + C7959 + C7960) * C31304 +
                     (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                     C40619 * C49094) *
                        C49054) *
                       C721 -
                   (((C16116 + C16115 + C16114) * C49094 +
                     (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                     C40621 * C31304) *
                        C49054 +
                    ((C15684 + C15683 + C15682) * C49094 +
                     (C15681 + C15680 + C15679) * C31305 +
                     (C15678 + C15677 + C15676) * C31302 +
                     (C15675 + C15674 + C15673) * C31304) *
                        C22509) *
                       C49281) *
                      C229 +
                  (((C40618 * C31304 + C40619 * C31302 +
                     (C16111 + C16112 + C16113) * C31305 +
                     (C16114 + C16115 + C16116) * C49094) *
                        C22509 +
                    ((C8584 + C8583 + C8582) * C31304 +
                     (C8581 + C8580 + C8579) * C31302 +
                     (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 +
                      C49303 * C2307 + C7762 * C2299 + C49271 * C2308) *
                         C31305 +
                     (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 +
                      C49303 * C2316 + C7762 * C2311 + C49271 * C2317) *
                         C49094) *
                        C49054) *
                       C49281 -
                   (((C8579 + C8580 + C8581) * C49094 +
                     (C8582 + C8583 + C8584) * C31305 +
                     (C7969 + C7968 + C7967) * C31302 +
                     (C7966 + C7965 + C7964) * C31304) *
                        C49054 +
                    (C40620 * C49094 + C40621 * C31305 +
                     (C7963 + C7962 + C7961) * C31302 +
                     (C7960 + C7959 + C7958) * C31304) *
                        C22509) *
                       C721) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C9060 * C119 + C48890 * C126) * C31304 +
                     (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                     C10308 * C49094) *
                        C49326 +
                    (C41384 + C41385 + C41386 + C41387) * C49322 +
                    C41774 * C49312 + C41775 * C49294) *
                       C721 -
                   ((C41906 + C41907 + C41908 + C41909) * C49294 +
                    (C41910 + C41911 + C41912 + C41913) * C49312 +
                    (C41914 + C41915 + C41916 + C41917) * C49322 +
                    (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                     C10307 * C31304) *
                        C49326) *
                       C49281) *
                      C229 +
                  (((C41917 + C41916 + C41915 + C41914) * C49326 +
                    (C41913 + C41912 + C41911 + C41910) * C49322 +
                    (C41909 + C41908 + C41907 + C41906) * C49312 +
                    (C9568 * C31304 + C9567 * C31302 +
                     (C9060 * C9809 + C48890 * C9812) * C31305 +
                     (C9060 * C9813 + C48890 * C9815) * C49094) *
                        C49294) *
                       C49281 -
                   ((C41768 + C41769 + C41770 + C41771) * C49294 +
                    (C41395 + C41394 + C41393 + C41392) * C49312 +
                    (C41391 + C41390 + C41389 + C41388) * C49322 +
                    (C41387 + C41386 + C41385 + C41384) * C49326) *
                       C721) *
                      C49279) *
                 C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                     C49303 * C127 + C7762 * C121 + C49271 * C128) *
                        C31304 +
                    (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                     C49303 * C141 + C7762 * C133 + C49271 * C142) *
                        C31302 +
                    (C15673 + C15674 + C15675) * C31305 +
                    (C15676 + C15677 + C15678) * C49094) *
                       C22509 +
                   ((C7958 + C7959 + C7960) * C31304 +
                    (C7961 + C7962 + C7963) * C31302 + C40618 * C31305 +
                    C40619 * C49094) *
                       C49054) *
                      C867 -
                  (((C16116 + C16115 + C16114) * C49094 +
                    (C16113 + C16112 + C16111) * C31305 + C40620 * C31302 +
                    C40621 * C31304) *
                       C49054 +
                   ((C15684 + C15683 + C15682) * C49094 +
                    (C15681 + C15680 + C15679) * C31305 +
                    (C15678 + C15677 + C15676) * C31302 +
                    (C15675 + C15674 + C15673) * C31304) *
                       C22509) *
                      C868 +
                  ((C16533 * C31304 + C16534 * C31302 +
                    (C16540 + C16539 + C16538) * C31305 +
                    (C16537 + C16536 + C16535) * C49094) *
                       C22509 +
                   ((C16111 + C16112 + C16113) * C31304 +
                    (C16114 + C16115 + C16116) * C31302 +
                    (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 +
                     C49303 * C3224 + C7762 * C3222 + C49271 * C3225) *
                        C31305 +
                    (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 +
                     C49303 * C3230 + C7762 * C3228 + C49271 * C3231) *
                        C49094) *
                       C49054) *
                      C869) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C9060 * C119 + C48890 * C126) * C31304 +
                    (C9060 * C131 + C48890 * C140) * C31302 + C10307 * C31305 +
                    C10308 * C49094) *
                       C49326 +
                   (C41384 + C41385 + C41386 + C41387) * C49322 +
                   C41774 * C49312 + C41775 * C49294) *
                      C867 -
                  ((C41906 + C41907 + C41908 + C41909) * C49294 +
                   (C41910 + C41911 + C41912 + C41913) * C49312 +
                   (C41914 + C41915 + C41916 + C41917) * C49322 +
                   (C10310 * C49094 + C10309 * C31305 + C10308 * C31302 +
                    C10307 * C31304) *
                       C49326) *
                      C868 +
                  ((C10309 * C31304 + C10310 * C31302 + C11177 * C31305 +
                    C11176 * C49094) *
                       C49326 +
                   (C10113 * C31304 + C10114 * C31302 + C10757 * C31305 +
                    C10756 * C49094) *
                       C49322 +
                   (C10115 * C31304 + C10116 * C31302 + C10755 * C31305 +
                    C10754 * C49094) *
                       C49312 +
                   (C10582 * C31304 + C10581 * C31302 +
                    (C9060 * C10733 + C48890 * C10734) * C31305 +
                    (C9060 * C10735 + C48890 * C10736) * C49094) *
                       C49294) *
                      C869) *
                 C48961 * C48927) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C47907 * C237 + C49229 * C248 + C47888 * C236 + C48900 * C247) *
                C118 +
            (C47907 * C243 + C49229 * C255 + C47888 * C242 + C48900 * C254) *
                C49007) *
               C11278 +
           ((C47907 * C517 + C49229 * C522 + C47888 * C518 + C48900 * C523) *
                C118 +
            (C47907 * C527 + C49229 * C532 + C47888 * C528 + C48900 * C533) *
                C49007) *
               C11279 +
           ((C47907 * C1157 + C49229 * C1164 + C47888 * C1156 +
             C48900 * C1163) *
                C118 +
            (C47907 * C1161 + C49229 * C1169 + C47888 * C1160 +
             C48900 * C1168) *
                C49007) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C47888 * C1159 + C48900 * C1167 + C47907 * C1160 +
             C49229 * C1168) *
                C49007 +
            (C47888 * C1155 + C48900 * C1162 + C47907 * C1156 +
             C49229 * C1163) *
                C118) *
               C49294 +
           ((C47888 * C529 + C48900 * C534 + C47907 * C528 + C49229 * C533) *
                C49007 +
            (C47888 * C519 + C48900 * C524 + C47907 * C518 + C49229 * C523) *
                C118) *
               C11279 +
           ((C47888 * C241 + C48900 * C253 + C47907 * C242 + C49229 * C254) *
                C49007 +
            (C47888 * C235 + C48900 * C246 + C47907 * C236 + C49229 * C247) *
                C118) *
               C11278 +
           ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C49007 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C118) *
               C11277) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C118 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C49007) *
               C11277 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C118 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C49007) *
               C11278 +
           ((C47907 * C519 + C49229 * C524 + C47888 * C520 + C48900 * C525) *
                C118 +
            (C47907 * C529 + C49229 * C534 + C47888 * C530 + C48900 * C535) *
                C49007) *
               C11279 +
           ((C47907 * C1155 + C49229 * C1162 + C47888 * C1158 +
             C48900 * C1165) *
                C118 +
            (C47907 * C1159 + C49229 * C1167 + C47888 * C1166 +
             C48900 * C1170) *
                C49007) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3790 * C237 + C3784 * C248 + C3791 * C236 + C3785 * C247 +
             C3792 * C235 + C3786 * C246 + C3793 * C234 + C49288 * C245) *
                C118 +
            (C3790 * C243 + C3784 * C255 + C3791 * C242 + C3785 * C254 +
             C3792 * C241 + C3786 * C253 + C3793 * C240 + C49288 * C252) *
                C49007) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C3793 * C239 + C49288 * C251 + C3792 * C240 + C3786 * C252 +
             C3791 * C241 + C3785 * C253 + C3790 * C242 + C3784 * C254) *
                C49007 +
            (C3793 * C233 + C49288 * C244 + C3792 * C234 + C3786 * C245 +
             C3791 * C235 + C3785 * C246 + C3790 * C236 + C3784 * C247) *
                C118) *
               C49054 +
           ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49007 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C118) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
             C3792 * C123 + C3786 * C130 + C3793 * C124 + C49288 * C137) *
                C118 +
            (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
             C3792 * C135 + C3786 * C144 + C3793 * C136 + C49288 * C145) *
                C49007) *
               C49251 +
           ((C3790 * C235 + C3784 * C246 + C3791 * C234 + C3785 * C245 +
             C3792 * C233 + C3786 * C244 + C3793 * C238 + C49288 * C249) *
                C118 +
            (C3790 * C241 + C3784 * C253 + C3791 * C240 + C3785 * C252 +
             C3792 * C239 + C3786 * C251 + C3793 * C250 + C49288 * C256) *
                C49007) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C15329 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C15326 +
            (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
            (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
               C49251 +
           ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
            C13515 * C15330 + C13516 * C15327 + (C13544 + C13543) * C15331 +
            (C13542 + C13541) * C49287) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C47888 * C2305 + C48900 * C2314 + C47907 * C2304 +
             C49229 * C2313) *
                C49287 +
            (C47888 * C2296 + C48900 * C2302 + C47907 * C2295 +
             C49229 * C2301) *
                C15331 +
            (C12749 + C12748) * C15327 + (C12747 + C12746) * C15330 +
            (C11477 + C11476) * C15326 + (C11475 + C11474) * C15329) *
               C49054 +
           ((C47888 * C882 + C48900 * C887 + C47907 * C881 + C49229 * C886) *
                C49287 +
            (C47888 * C872 + C48900 * C877 + C47907 * C871 + C49229 * C876) *
                C15331 +
            (C12971 + C12970) * C15327 + (C12969 + C12968) * C15330 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C15326 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C15329) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C15329 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C15326 +
            (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
                C15330 +
            (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
                C15327 +
            (C47907 * C872 + C49229 * C877 + C47888 * C873 + C48900 * C878) *
                C15331 +
            (C47907 * C882 + C49229 * C887 + C47888 * C883 + C48900 * C888) *
                C49287) *
               C49251 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C15329 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C15326 +
            (C47907 * C621 + C49229 * C626 + C47888 * C622 + C48900 * C627) *
                C15330 +
            (C47907 * C631 + C49229 * C636 + C47888 * C632 + C48900 * C637) *
                C15327 +
            (C47907 * C2296 + C49229 * C2302 + C47888 * C2580 +
             C48900 * C2581) *
                C15331 +
            (C47907 * C2305 + C49229 * C2314 + C47888 * C2582 +
             C48900 * C2583) *
                C49287) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C48978 * C229 -
           (((C47888 * C1668 + C48900 * C1671 + C47907 * C1667 +
              C49229 * C1670) *
                 C49007 +
             (C47888 * C1662 + C48900 * C1665 + C47907 * C1661 +
              C49229 * C1664) *
                 C118) *
                C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C118 + (C11476 + C11477) * C49007) * C11277 +
            ((C11478 + C11479) * C118 + (C11480 + C11481) * C49007) * C11278 +
            ((C11482 + C11483) * C118 + (C11484 + C11485) * C49007) * C11279 +
            ((C47907 * C1662 + C49229 * C1665 + C47888 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C47907 * C1668 + C49229 * C1671 + C47888 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C48978 * C229 -
           (((C3793 * C530 + C49288 * C535 + C3792 * C529 + C3786 * C534 +
              C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                 C49007 +
             (C3793 * C520 + C49288 * C525 + C3792 * C519 + C3786 * C524 +
              C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                 C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C3965 + C3966 + C3967 + C3968) * C118 +
             (C3969 + C3970 + C3971 + C3972) * C49007) *
                C49251 +
            ((C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
              C3792 * C520 + C3786 * C525 + C3793 * C521 + C49288 * C526) *
                 C118 +
             (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
              C3792 * C530 + C3786 * C535 + C3793 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + (C13544 + C13543) * C15331 +
             (C13542 + C13541) * C49287) *
                C49054) *
               C48978 * C229 -
           (((C13537 + C13538) * C49287 + (C13539 + C13540) * C15331 +
             C13525 * C15327 + C13526 * C15330 + (C11469 + C11468) * C15326 +
             (C11467 + C11466) * C15329) *
                C49054 +
            ((C13541 + C13542) * C49287 + (C13543 + C13544) * C15331 +
             C13535 * C15327 + C13536 * C15330 + (C11465 + C11464) * C15326 +
             (C11463 + C11462) * C15329) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C15329 + (C11476 + C11477) * C15326 +
             (C12746 + C12747) * C15330 + (C12748 + C12749) * C15327 +
             (C18880 + C18881) * C15331 + (C18882 + C18883) * C49287) *
                C49251 +
            ((C11478 + C11479) * C15329 + (C11480 + C11481) * C15326 +
             (C12750 + C12751) * C15330 + (C12752 + C12753) * C15327 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C15331 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49287) *
                C49054) *
               C48978 * C49279 -
           (((C18883 + C18882) * C49287 + (C18881 + C18880) * C15331 +
             (C12749 + C12748) * C15327 + (C12747 + C12746) * C15330 +
             (C11477 + C11476) * C15326 + (C11475 + C11474) * C15329) *
                C49054 +
            ((C47888 * C882 + C48900 * C887 + C47907 * C881 + C49229 * C886) *
                 C49287 +
             (C47888 * C872 + C48900 * C877 + C47907 * C871 + C49229 * C876) *
                 C15331 +
             (C12971 + C12970) * C15327 + (C12969 + C12968) * C15330 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C15326 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C15329) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C339 -
           (((C47888 * C1851 + C48900 * C1854 + C47907 * C1850 +
              C49229 * C1853) *
                 C49007 +
             (C47888 * C1845 + C48900 * C1848 + C47907 * C1844 +
              C49229 * C1847) *
                 C118) *
                C49294 +
            ((C47888 * C1394 + C48900 * C1402 + C47907 * C1395 +
              C49229 * C1403) *
                 C49007 +
             (C47888 * C1390 + C48900 * C1397 + C47907 * C1391 +
              C49229 * C1398) *
                 C118) *
                C11279 +
            ((C47888 * C630 + C48900 * C635 + C47907 * C629 + C49229 * C634) *
                 C49007 +
             (C47888 * C620 + C48900 * C625 + C47907 * C619 + C49229 * C624) *
                 C118) *
                C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C48961 * C231 +
          ((((C47907 * C344 + C49229 * C355 + C47888 * C343 + C48900 * C354) *
                 C118 +
             (C47907 * C350 + C49229 * C362 + C47888 * C349 + C48900 * C361) *
                 C49007) *
                C11277 +
            ((C47907 * C620 + C49229 * C625 + C47888 * C621 + C48900 * C626) *
                 C118 +
             (C47907 * C630 + C49229 * C635 + C47888 * C631 + C48900 * C636) *
                 C49007) *
                C11278 +
            ((C47907 * C1390 + C49229 * C1397 + C47888 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C47907 * C1394 + C49229 * C1402 + C47888 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C11279 +
            ((C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C339 -
           (((C3793 * C632 + C49288 * C637 + C3792 * C631 + C3786 * C636 +
              C3791 * C630 + C3785 * C635 + C3790 * C629 + C3784 * C634) *
                 C49007 +
             (C3793 * C622 + C49288 * C627 + C3792 * C621 + C3786 * C626 +
              C3791 * C620 + C3785 * C625 + C3790 * C619 + C3784 * C624) *
                 C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C48961 * C231 +
          ((((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
              C3792 * C342 + C3786 * C353 + C3793 * C341 + C49288 * C352) *
                 C118 +
             (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
              C3792 * C348 + C3786 * C360 + C3793 * C347 + C49288 * C359) *
                 C49007) *
                C49251 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + (C13544 + C13543) * C15331 +
             (C13542 + C13541) * C49287) *
                C49054) *
               C339 -
           (((C47888 * C3227 + C48900 * C3230 + C47907 * C3226 +
              C49229 * C3229) *
                 C49287 +
             (C47888 * C3221 + C48900 * C3224 + C47907 * C3220 +
              C49229 * C3223) *
                 C15331 +
             (C13541 + C13542) * C15327 + (C13543 + C13544) * C15330 +
             C13535 * C15326 + C13536 * C15329) *
                C49054 +
            ((C47888 * C2735 + C48900 * C2743 + C47907 * C2736 +
              C49229 * C2744) *
                 C49287 +
             (C47888 * C2731 + C48900 * C2738 + C47907 * C2732 +
              C49229 * C2739) *
                 C15331 +
             (C14087 + C14088) * C15327 + (C14089 + C14090) * C15330 +
             (C12967 + C12966) * C15326 + (C12965 + C12964) * C15329) *
                C49251) *
               C49281) *
              C48961 * C231 +
          ((((C12968 + C12969) * C15329 + (C12970 + C12971) * C15326 +
             (C19086 + C19087) * C15330 + (C19088 + C19089) * C15327 +
             (C47907 * C2731 + C49229 * C2738 + C47888 * C2730 +
              C48900 * C2737) *
                 C15331 +
             (C47907 * C2735 + C49229 * C2743 + C47888 * C2734 +
              C48900 * C2742) *
                 C49287) *
                C49251 +
            ((C12746 + C12747) * C15329 + (C12748 + C12749) * C15326 +
             (C18880 + C18881) * C15330 + (C18882 + C18883) * C15327 +
             (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
              C48900 * C3225) *
                 C15331 +
             (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
              C48900 * C3231) *
                 C49287) *
                C49054) *
               C49281 -
           (((C18883 + C18882) * C49287 + (C18881 + C18880) * C15331 +
             (C12749 + C12748) * C15327 + (C12747 + C12746) * C15330 +
             (C11477 + C11476) * C15326 + (C11475 + C11474) * C15329) *
                C49054 +
            ((C19089 + C19088) * C49287 + (C19087 + C19086) * C15331 +
             (C12971 + C12970) * C15327 + (C12969 + C12968) * C15330 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C15326 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C15329) *
                C49251) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C48978 * C447 -
           (((C47888 * C1668 + C48900 * C1671 + C47907 * C1667 +
              C49229 * C1670) *
                 C49007 +
             (C47888 * C1662 + C48900 * C1665 + C47907 * C1661 +
              C49229 * C1664) *
                 C118) *
                C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C118 + (C11476 + C11477) * C49007) * C11277 +
            ((C11478 + C11479) * C118 + (C11480 + C11481) * C49007) * C11278 +
            ((C11482 + C11483) * C118 + (C11484 + C11485) * C49007) * C11279 +
            ((C47907 * C1662 + C49229 * C1665 + C47888 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C47907 * C1668 + C49229 * C1671 + C47888 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C48978 * C447 -
           (((C3793 * C530 + C49288 * C535 + C3792 * C529 + C3786 * C534 +
              C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                 C49007 +
             (C3793 * C520 + C49288 * C525 + C3792 * C519 + C3786 * C524 +
              C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                 C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C3965 + C3966 + C3967 + C3968) * C118 +
             (C3969 + C3970 + C3971 + C3972) * C49007) *
                C49251 +
            ((C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
              C3792 * C520 + C3786 * C525 + C3793 * C521 + C49288 * C526) *
                 C118 +
             (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
              C3792 * C530 + C3786 * C535 + C3793 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + (C13544 + C13543) * C15331 +
             (C13542 + C13541) * C49287) *
                C49054) *
               C48978 * C447 -
           (((C13537 + C13538) * C49287 + (C13539 + C13540) * C15331 +
             C13525 * C15327 + C13526 * C15330 + (C11469 + C11468) * C15326 +
             (C11467 + C11466) * C15329) *
                C49054 +
            ((C13541 + C13542) * C49287 + (C13543 + C13544) * C15331 +
             C13535 * C15327 + C13536 * C15330 + (C11465 + C11464) * C15326 +
             (C11463 + C11462) * C15329) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C15329 + (C11476 + C11477) * C15326 +
             (C12746 + C12747) * C15330 + (C12748 + C12749) * C15327 +
             (C18880 + C18881) * C15331 + (C18882 + C18883) * C49287) *
                C49251 +
            ((C11478 + C11479) * C15329 + (C11480 + C11481) * C15326 +
             (C12750 + C12751) * C15330 + (C12752 + C12753) * C15327 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C15331 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49287) *
                C49054) *
               C48978 * C49279 -
           (((C18883 + C18882) * C49287 + (C18881 + C18880) * C15331 +
             (C12749 + C12748) * C15327 + (C12747 + C12746) * C15330 +
             (C11477 + C11476) * C15326 + (C11475 + C11474) * C15329) *
                C49054 +
            ((C19089 + C19088) * C49287 + (C19087 + C19086) * C15331 +
             (C12971 + C12970) * C15327 + (C12969 + C12968) * C15330 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C15326 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C15329) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
           C11864 * C11279 + C11865 * C49294) *
              C48978 * C513 -
          (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
           ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
           ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
           ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
              C48978 * C514 +
          (C11864 * C11277 + C11865 * C11278 +
           ((C11863 + C11862) * C118 + (C11861 + C11860) * C49007) * C11279 +
           ((C47907 * C9143 + C49229 * C9146 + C47888 * C9144 +
             C48900 * C9147) *
                C118 +
            (C47907 * C9145 + C49229 * C9149 + C47888 * C9148 +
             C48900 * C9150) *
                C49007) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3957 + C3958 + C3959 + C3960) * C118 +
            (C3961 + C3962 + C3963 + C3964) * C49007) *
               C49054) *
              C48978 * C513 -
          (((C4347 + C4348 + C4349 + C4350) * C49007 +
            (C4351 + C4352 + C4353 + C4354) * C118) *
               C49054 +
           ((C3964 + C3963 + C3962 + C3961) * C49007 +
            (C3960 + C3959 + C3958 + C3957) * C118) *
               C49251) *
              C48978 * C514 +
          (((C4354 + C4353 + C4352 + C4351) * C118 +
            (C4350 + C4349 + C4348 + C4347) * C49007) *
               C49251 +
           ((C3790 * C1157 + C3784 * C1164 + C3791 * C1156 + C3785 * C1163 +
             C3792 * C1155 + C3786 * C1162 + C3793 * C1158 + C49288 * C1165) *
                C118 +
            (C3790 * C1161 + C3784 * C1169 + C3791 * C1160 + C3785 * C1168 +
             C3792 * C1159 + C3786 * C1167 + C3793 * C1166 + C49288 * C1170) *
                C49007) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C15329 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C15326 +
            (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
            (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
               C49251 +
           ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
            C13515 * C15330 + C13516 * C15327 + (C13544 + C13543) * C15331 +
            (C13542 + C13541) * C49287) *
               C49054) *
              C48978 * C513 -
          (((C13537 + C13538) * C49287 + (C13539 + C13540) * C15331 +
            C13525 * C15327 + C13526 * C15330 + (C11469 + C11468) * C15326 +
            (C11467 + C11466) * C15329) *
               C49054 +
           ((C13541 + C13542) * C49287 + (C13543 + C13544) * C15331 +
            C13535 * C15327 + C13536 * C15330 + (C11465 + C11464) * C15326 +
            (C11463 + C11462) * C15329) *
               C49251) *
              C48978 * C514 +
          ((C11844 * C15329 + C11845 * C15326 + C13314 * C15330 +
            C13315 * C15327 + (C13540 + C13539) * C15331 +
            (C13538 + C13537) * C49287) *
               C49251 +
           (C11846 * C15329 + C11847 * C15326 + (C12023 + C12022) * C15330 +
            (C12021 + C12020) * C15327 +
            (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
             C48900 * C10073) *
                C15331 +
            (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
             C48900 * C10075) *
                C49287) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C339 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C447 +
          ((((C12031 + C12030) * C118 + (C12029 + C12028) * C49007) * C11277 +
            ((C12027 + C12026) * C118 + (C12025 + C12024) * C49007) * C11278 +
            ((C12023 + C12022) * C118 + (C12021 + C12020) * C49007) * C11279 +
            ((C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C339 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C447 +
          ((((C4508 + C4507 + C4506 + C4505) * C118 +
             (C4504 + C4503 + C4502 + C4501) * C49007) *
                C49251 +
            ((C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
              C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
                 C118 +
             (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
              C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C4347 + C4348 + C4349 + C4350) * C49007 +
             (C4351 + C4352 + C4353 + C4354) * C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + C19624 * C15331 +
             C19625 * C49287) *
                C49054) *
               C339 -
           (((C19636 + C19637) * C49287 + (C19638 + C19639) * C15331 +
             C19634 * C15327 + C19635 * C15330 + C13535 * C15326 +
             C13536 * C15329) *
                C49054 +
            ((C47888 * C2735 + C48900 * C2743 + C47907 * C2736 +
              C49229 * C2744) *
                 C49287 +
             (C47888 * C2731 + C48900 * C2738 + C47907 * C2732 +
              C49229 * C2739) *
                 C15331 +
             (C14087 + C14088) * C15327 + (C14089 + C14090) * C15330 +
             (C12967 + C12966) * C15326 + (C12965 + C12964) * C15329) *
                C49251) *
               C49281) *
              C447 +
          (((C13515 * C15329 + C13516 * C15326 + C19624 * C15330 +
             C19625 * C15327 + (C19639 + C19638) * C15331 +
             (C19637 + C19636) * C49287) *
                C49251 +
            (C13314 * C15329 + C13315 * C15326 + (C13540 + C13539) * C15330 +
             (C13538 + C13537) * C15327 +
             (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
              C48900 * C10286) *
                 C15331 +
             (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
              C48900 * C10289) *
                 C49287) *
                C49054) *
               C49281 -
           (((C13537 + C13538) * C49287 + (C13539 + C13540) * C15331 +
             C13525 * C15327 + C13526 * C15330 + (C11469 + C11468) * C15326 +
             (C11467 + C11466) * C15329) *
                C49054 +
            (C19634 * C49287 + C19635 * C15331 + C13535 * C15327 +
             C13536 * C15330 + (C11465 + C11464) * C15326 +
             (C11463 + C11462) * C15329) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C721 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C48961 * C449 +
          ((((C47907 * C344 + C49229 * C355 + C47888 * C343 + C48900 * C354) *
                 C118 +
             (C47907 * C350 + C49229 * C362 + C47888 * C349 + C48900 * C361) *
                 C49007) *
                C11277 +
            ((C47907 * C620 + C49229 * C625 + C47888 * C621 + C48900 * C626) *
                 C118 +
             (C47907 * C630 + C49229 * C635 + C47888 * C631 + C48900 * C636) *
                 C49007) *
                C11278 +
            ((C47907 * C1390 + C49229 * C1397 + C47888 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C47907 * C1394 + C49229 * C1402 + C47888 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C11279 +
            ((C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C721 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
              C3792 * C342 + C3786 * C353 + C3793 * C341 + C49288 * C352) *
                 C118 +
             (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
              C3792 * C348 + C3786 * C360 + C3793 * C347 + C49288 * C359) *
                 C49007) *
                C49251 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + C19624 * C15331 +
             C19625 * C49287) *
                C49054) *
               C721 -
           (((C19636 + C19637) * C49287 + (C19638 + C19639) * C15331 +
             C19634 * C15327 + C19635 * C15330 + C13535 * C15326 +
             C13536 * C15329) *
                C49054 +
            ((C47888 * C2735 + C48900 * C2743 + C47907 * C2736 +
              C49229 * C2744) *
                 C49287 +
             (C47888 * C2731 + C48900 * C2738 + C47907 * C2732 +
              C49229 * C2739) *
                 C15331 +
             (C14087 + C14088) * C15327 + (C14089 + C14090) * C15330 +
             (C12967 + C12966) * C15326 + (C12965 + C12964) * C15329) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C12968 + C12969) * C15329 + (C12970 + C12971) * C15326 +
             (C19086 + C19087) * C15330 + (C19088 + C19089) * C15327 +
             (C47907 * C2731 + C49229 * C2738 + C47888 * C2730 +
              C48900 * C2737) *
                 C15331 +
             (C47907 * C2735 + C49229 * C2743 + C47888 * C2734 +
              C48900 * C2742) *
                 C49287) *
                C49251 +
            ((C12746 + C12747) * C15329 + (C12748 + C12749) * C15326 +
             (C18880 + C18881) * C15330 + (C18882 + C18883) * C15327 +
             (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
              C48900 * C3225) *
                 C15331 +
             (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
              C48900 * C3231) *
                 C49287) *
                C49054) *
               C49281 -
           (((C18883 + C18882) * C49287 + (C18881 + C18880) * C15331 +
             (C12749 + C12748) * C15327 + (C12747 + C12746) * C15330 +
             (C11477 + C11476) * C15326 + (C11475 + C11474) * C15329) *
                C49054 +
            ((C19089 + C19088) * C49287 + (C19087 + C19086) * C15331 +
             (C12971 + C12970) * C15327 + (C12969 + C12968) * C15330 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C15326 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C15329) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C721 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C229 +
          ((((C12031 + C12030) * C118 + (C12029 + C12028) * C49007) * C11277 +
            ((C12027 + C12026) * C118 + (C12025 + C12024) * C49007) * C11278 +
            ((C12023 + C12022) * C118 + (C12021 + C12020) * C49007) * C11279 +
            ((C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C721 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C229 +
          ((((C4508 + C4507 + C4506 + C4505) * C118 +
             (C4504 + C4503 + C4502 + C4501) * C49007) *
                C49251 +
            ((C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
              C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
                 C118 +
             (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
              C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C4347 + C4348 + C4349 + C4350) * C49007 +
             (C4351 + C4352 + C4353 + C4354) * C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C15329 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C15326 +
             (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
             (C14090 + C14089) * C15331 + (C14088 + C14087) * C49287) *
                C49251 +
            ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
             C13515 * C15330 + C13516 * C15327 + C19624 * C15331 +
             C19625 * C49287) *
                C49054) *
               C721 -
           (((C19636 + C19637) * C49287 + (C19638 + C19639) * C15331 +
             C19634 * C15327 + C19635 * C15330 + C13535 * C15326 +
             C13536 * C15329) *
                C49054 +
            ((C47888 * C2735 + C48900 * C2743 + C47907 * C2736 +
              C49229 * C2744) *
                 C49287 +
             (C47888 * C2731 + C48900 * C2738 + C47907 * C2732 +
              C49229 * C2739) *
                 C15331 +
             (C14087 + C14088) * C15327 + (C14089 + C14090) * C15330 +
             (C12967 + C12966) * C15326 + (C12965 + C12964) * C15329) *
                C49251) *
               C49281) *
              C229 +
          (((C13515 * C15329 + C13516 * C15326 + C19624 * C15330 +
             C19625 * C15327 + (C19639 + C19638) * C15331 +
             (C19637 + C19636) * C49287) *
                C49251 +
            (C13314 * C15329 + C13315 * C15326 + (C13540 + C13539) * C15330 +
             (C13538 + C13537) * C15327 +
             (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
              C48900 * C10286) *
                 C15331 +
             (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
              C48900 * C10289) *
                 C49287) *
                C49054) *
               C49281 -
           (((C13537 + C13538) * C49287 + (C13539 + C13540) * C15331 +
             C13525 * C15327 + C13526 * C15330 + (C11469 + C11468) * C15326 +
             (C11467 + C11466) * C15329) *
                C49054 +
            (C19634 * C49287 + C19635 * C15331 + C13535 * C15327 +
             C13536 * C15330 + (C11465 + C11464) * C15326 +
             (C11463 + C11462) * C15329) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
           C11864 * C11279 + C11865 * C49294) *
              C867 -
          (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
           ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
           ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
           ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                C49007 +
            (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                C118) *
               C11277) *
              C868 +
          (((C47907 * C870 + C49229 * C875 + C47888 * C871 + C48900 * C876) *
                C118 +
            (C47907 * C880 + C49229 * C885 + C47888 * C881 + C48900 * C886) *
                C49007) *
               C11277 +
           ((C47907 * C2294 + C49229 * C2300 + C47888 * C2295 +
             C48900 * C2301) *
                C118 +
            (C47907 * C2303 + C49229 * C2312 + C47888 * C2304 +
             C48900 * C2313) *
                C49007) *
               C11278 +
           ((C47907 * C2297 + C49229 * C2306 + C47888 * C2298 +
             C48900 * C2307) *
                C118 +
            (C47907 * C2309 + C49229 * C2315 + C47888 * C2310 +
             C48900 * C2316) *
                C49007) *
               C11279 +
           ((C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
             C48900 * C10073) *
                C118 +
            (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
             C48900 * C10075) *
                C49007) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3957 + C3958 + C3959 + C3960) * C118 +
            (C3961 + C3962 + C3963 + C3964) * C49007) *
               C49054) *
              C867 -
          (((C4501 + C4502 + C4503 + C4504) * C49007 +
            (C4505 + C4506 + C4507 + C4508) * C118) *
               C49054 +
           ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49007 +
            (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C118) *
               C49251) *
              C868 +
          (((C3790 * C870 + C3784 * C875 + C3791 * C871 + C3785 * C876 +
             C3792 * C872 + C3786 * C877 + C3793 * C873 + C49288 * C878) *
                C118 +
            (C3790 * C880 + C3784 * C885 + C3791 * C881 + C3785 * C886 +
             C3792 * C882 + C3786 * C887 + C3793 * C883 + C49288 * C888) *
                C49007) *
               C49251 +
           ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C118 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49007) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C15329 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C15326 +
            (C12964 + C12965) * C15330 + (C12966 + C12967) * C15327 +
            C20174 * C15331 + C20175 * C49287) *
               C49251 +
           ((C11462 + C11463) * C15329 + (C11464 + C11465) * C15326 +
            C13515 * C15330 + C13516 * C15327 + C19624 * C15331 +
            C19625 * C49287) *
               C49054) *
              C867 -
          (((C19636 + C19637) * C49287 + (C19638 + C19639) * C15331 +
            C19634 * C15327 + C19635 * C15330 + C13535 * C15326 +
            C13536 * C15329) *
               C49054 +
           ((C20184 + C20185) * C49287 + (C20186 + C20187) * C15331 +
            (C14087 + C14088) * C15327 + (C14089 + C14090) * C15330 +
            (C12967 + C12966) * C15326 + (C12965 + C12964) * C15329) *
               C49251) *
              C868 +
          ((C20174 * C15329 + C20175 * C15326 + (C20187 + C20186) * C15330 +
            (C20185 + C20184) * C15327 +
            (C47907 * C3652 + C49229 * C3655 + C47888 * C3653 +
             C48900 * C3656) *
                C15331 +
            (C47907 * C3658 + C49229 * C3661 + C47888 * C3659 +
             C48900 * C3662) *
                C49287) *
               C49251 +
           (C19624 * C15329 + C19625 * C15326 + (C19639 + C19638) * C15330 +
            (C19637 + C19636) * C15327 +
            (C47907 * C11163 + C49229 * C11165 + C47888 * C17947 +
             C48900 * C17948) *
                C15331 +
            (C47907 * C11166 + C49229 * C11169 + C47888 * C17949 +
             C48900 * C17950) *
                C49287) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C9184 * C4966 + C9185 * C49252 + C9574 * C4967 + C9573 * C49094) *
               C11278 +
           (C9186 * C4966 + C9187 * C49252 + C9572 * C4967 + C9571 * C49094) *
               C11279 +
           (C9188 * C4966 + C9189 * C49252 + C9570 * C4967 + C9569 * C49094) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C9060 * C1851 + C48890 * C1854) * C49094 +
            (C9060 * C1845 + C48890 * C1848) * C4967 + C9197 * C49252 +
            C9196 * C4966) *
               C49294 +
           (C10122 * C49094 + C10121 * C4967 + C9195 * C49252 + C9194 * C4966) *
               C11279 +
           (C10118 * C49094 + C10117 * C4967 + C9193 * C49252 + C9192 * C4966) *
               C11278 +
           (C10312 * C49094 + C10311 * C4967 +
            (C9060 * C132 + C48890 * C141) * C49252 +
            (C9060 * C120 + C48890 * C127) * C4966) *
               C11277) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C4966 +
            (C9060 * C133 + C48890 * C142) * C49252 +
            (C9060 * C343 + C48890 * C354) * C4967 +
            (C9060 * C349 + C48890 * C361) * C49094) *
               C11277 +
           ((C9060 * C235 + C48890 * C246) * C4966 +
            (C9060 * C241 + C48890 * C253) * C49252 +
            (C9060 * C621 + C48890 * C626) * C4967 +
            (C9060 * C631 + C48890 * C636) * C49094) *
               C11278 +
           ((C9060 * C519 + C48890 * C524) * C4966 +
            (C9060 * C529 + C48890 * C534) * C49252 +
            (C9060 * C1389 + C48890 * C1396) * C4967 +
            (C9060 * C1393 + C48890 * C1401) * C49094) *
               C11279 +
           ((C9060 * C1155 + C48890 * C1162) * C4966 +
            (C9060 * C1159 + C48890 * C1167) * C49252 +
            (C9060 * C1846 + C48890 * C1849) * C4967 +
            (C9060 * C1852 + C48890 * C1855) * C49094) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            (C1892 + C1891 + C1890) * C4967 +
            (C1889 + C1888 + C1887) * C49094) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C1008 * C632 + C49271 * C637 + C1007 * C631 + C1001 * C636 +
             C1006 * C630 + C1000 * C635) *
                C49094 +
            (C1008 * C622 + C49271 * C627 + C1007 * C621 + C1001 * C626 +
             C1006 * C620 + C1000 * C625) *
                C4967 +
            (C1237 + C1236 + C1235) * C49252 +
            (C1234 + C1233 + C1232) * C4966) *
               C49054 +
           ((C2812 + C2811 + C2810) * C49094 + (C2809 + C2808 + C2807) * C4967 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49252 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C4966) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
             C1008 * C123 + C49271 * C130) *
                C4966 +
            (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
             C1008 * C135 + C49271 * C144) *
                C49252 +
            (C1006 * C343 + C1000 * C354 + C1007 * C342 + C1001 * C353 +
             C1008 * C341 + C49271 * C352) *
                C4967 +
            (C1006 * C349 + C1000 * C361 + C1007 * C348 + C1001 * C360 +
             C1008 * C347 + C49271 * C359) *
                C49094) *
               C49251 +
           ((C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
             C1008 * C233 + C49271 * C244) *
                C4966 +
            (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
             C1008 * C239 + C49271 * C251) *
                C49252 +
            (C1006 * C621 + C1000 * C626 + C1007 * C622 + C1001 * C627 +
             C1008 * C623 + C49271 * C628) *
                C4967 +
            (C1006 * C631 + C1000 * C636 + C1007 * C632 + C1001 * C637 +
             C1008 * C633 + C49271 * C638) *
                C49094) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C20289 +
            (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
            C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
            C11177 * C20292 + C11176 * C49300) *
               C49251 +
           (C9184 * C20289 + C9185 * C20285 + C9574 * C20290 + C9573 * C20286 +
            C10113 * C20291 + C10114 * C20287 + C10757 * C20292 +
            C10756 * C49300) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C9060 * C3227 + C48890 * C3230) * C49300 +
            (C9060 * C3221 + C48890 * C3224) * C20292 + C10120 * C20287 +
            C10119 * C20291 + C10118 * C20286 + C10117 * C20290 +
            C9193 * C20285 + C9192 * C20289) *
               C49054 +
           (C18057 * C49300 + C18056 * C20292 + C10314 * C20287 +
            C10313 * C20291 + C10312 * C20286 + C10311 * C20290 +
            (C9060 * C132 + C48890 * C141) * C20285 +
            (C9060 * C120 + C48890 * C127) * C20289) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C20289 +
            (C9060 * C133 + C48890 * C142) * C20285 +
            (C9060 * C343 + C48890 * C354) * C20290 +
            (C9060 * C349 + C48890 * C361) * C20286 +
            (C9060 * C872 + C48890 * C877) * C20291 +
            (C9060 * C882 + C48890 * C887) * C20287 +
            (C9060 * C2730 + C48890 * C2737) * C20292 +
            (C9060 * C2734 + C48890 * C2742) * C49300) *
               C49251 +
           ((C9060 * C235 + C48890 * C246) * C20289 +
            (C9060 * C241 + C48890 * C253) * C20285 +
            (C9060 * C621 + C48890 * C626) * C20290 +
            (C9060 * C631 + C48890 * C636) * C20286 +
            (C9060 * C2296 + C48890 * C2302) * C20291 +
            (C9060 * C2305 + C48890 * C2314) * C20287 +
            (C9060 * C3222 + C48890 * C3225) * C20292 +
            (C9060 * C3228 + C48890 * C3231) * C49300) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 +
            (C14323 + C14324 + C14325 + C14326) * C11279 +
            (C14327 + C14328 + C14329 + C14330) * C49294) *
               C48978 * C229 -
           ((C9567 * C49094 + C9568 * C4967 + C9191 * C49252 + C9190 * C4966) *
                C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C48978 * C49279) *
              C231 +
          (((C14331 + C14332 + C14333 + C14334) * C11277 +
            (C14335 + C14336 + C14337 + C14338) * C11278 +
            (C14339 + C14340 + C14347 + C14348) * C11279 +
            (C9198 * C4966 + C9199 * C49252 +
             (C9060 * C9298 + C48890 * C9301) * C4967 +
             (C9060 * C9302 + C48890 * C9304) * C49094) *
                C49294) *
               C48978 * C49279 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 +
             (C1892 + C1891 + C1890) * C4967 +
             (C1889 + C1888 + C1887) * C49094) *
                C49054) *
               C48978 * C229 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            ((C1887 + C1888 + C1889) * C49094 +
             (C1890 + C1891 + C1892) * C4967 +
             (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C1232 + C1233 + C1234) * C4966 +
             (C1235 + C1236 + C1237) * C49252 +
             (C6369 + C6370 + C6371) * C4967 +
             (C6372 + C6373 + C6374) * C49094) *
                C49251 +
            ((C1238 + C1239 + C1240) * C4966 +
             (C1241 + C1242 + C1243) * C49252 +
             (C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C4967 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49094) *
                C49054) *
               C48978 * C49279 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C20289 +
             (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
             C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
             C11177 * C20292 + C11176 * C49300) *
                C49251 +
            (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
             C21531) *
                C49054) *
               C48978 * C229 -
           ((C10754 * C49300 + C10755 * C20292 + C10116 * C20287 +
             C10115 * C20291 + C9571 * C20286 + C9572 * C20290 +
             C9187 * C20285 + C9186 * C20289) *
                C49054 +
            (C21531 + C21530 + C21529 + C21528 + C21527 + C21526 + C21525 +
             C21524) *
                C49251) *
               C48978 * C49279) *
              C231 +
          (((C21532 + C21533 + C21534 + C21535 + C21536 + C21537 + C21544 +
             C21545) *
                C49251 +
            (C9194 * C20289 + C9195 * C20285 + C10121 * C20290 +
             C10122 * C20286 + C10123 * C20291 + C10124 * C20287 +
             (C9060 * C10283 + C48890 * C10286) * C20292 +
             (C9060 * C10287 + C48890 * C10289) * C49300) *
                C49054) *
               C48978 * C49279 -
           ((C21545 + C21544 + C21537 + C21536 + C21535 + C21534 + C21533 +
             C21532) *
                C49054 +
            (C18057 * C49300 + C18056 * C20292 + C10314 * C20287 +
             C10313 * C20291 + C10312 * C20286 + C10311 * C20290 +
             (C9060 * C132 + C48890 * C141) * C20285 +
             (C9060 * C120 + C48890 * C127) * C20289) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C4966 +
                      (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
                      C10308 * C49094) *
                         C11277 +
                     (C14319 + C14320 + C14321 + C14322) * C11278 +
                     (C14323 + C14324 + C14325 + C14326) * C11279 +
                     (C14327 + C14328 + C14329 + C14330) * C49294) *
                        C339 -
                    ((C10581 * C49094 + C10582 * C4967 + C9569 * C49252 +
                      C9570 * C4966) *
                         C49294 +
                     (C10116 * C49094 + C10115 * C4967 + C9571 * C49252 +
                      C9572 * C4966) *
                         C11279 +
                     (C10114 * C49094 + C10113 * C4967 + C9573 * C49252 +
                      C9574 * C4966) *
                         C11278 +
                     (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
                      C10307 * C4966) *
                         C11277) *
                        C49281) *
                       C48961 * C231 +
                   (((C10311 * C4966 + C10312 * C49252 + C10313 * C4967 +
                      C10314 * C49094) *
                         C11277 +
                     (C10117 * C4966 + C10118 * C49252 + C10119 * C4967 +
                      C10120 * C49094) *
                         C11278 +
                     (C10121 * C4966 + C10122 * C49252 + C10123 * C4967 +
                      C10124 * C49094) *
                         C11279 +
                     (C14345 * C4966 + C14346 * C49252 +
                      (C9060 * C10072 + C48890 * C10073) * C4967 +
                      (C9060 * C10074 + C48890 * C10075) * C49094) *
                         C49294) *
                        C49281 -
                    ((C14348 + C14347 + C14340 + C14339) * C49294 +
                     (C14338 + C14337 + C14336 + C14335) * C11279 +
                     (C14334 + C14333 + C14332 + C14331) * C11278 +
                     (C10312 * C49094 + C10311 * C4967 +
                      (C9060 * C132 + C48890 * C141) * C49252 +
                      (C9060 * C120 + C48890 * C127) * C4966) *
                         C11277) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C4966 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49252 +
                      (C2795 + C2796 + C2797) * C4967 +
                      (C2798 + C2799 + C2800) * C49094) *
                         C49251 +
                     ((C1220 + C1221 + C1222) * C4966 +
                      (C1223 + C1224 + C1225) * C49252 +
                      (C1892 + C1891 + C1890) * C4967 +
                      (C1889 + C1888 + C1887) * C49094) *
                         C49054) *
                        C339 -
                    (((C3250 + C3249 + C3248) * C49094 +
                      (C3247 + C3246 + C3245) * C4967 +
                      (C1887 + C1888 + C1889) * C49252 +
                      (C1890 + C1891 + C1892) * C4966) *
                         C49054 +
                     ((C2806 + C2805 + C2804) * C49094 +
                      (C2803 + C2802 + C2801) * C4967 +
                      (C2800 + C2799 + C2798) * C49252 +
                      (C2797 + C2796 + C2795) * C4966) *
                         C49251) *
                        C49281) *
                       C48961 * C231 +
                   ((((C2807 + C2808 + C2809) * C4966 +
                      (C2810 + C2811 + C2812) * C49252 +
                      (C2813 + C2814 + C2815) * C4967 +
                      (C2816 + C2817 + C2818) * C49094) *
                         C49251 +
                     ((C6369 + C6370 + C6371) * C4966 +
                      (C6372 + C6373 + C6374) * C49252 +
                      (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 +
                       C1001 * C2302 + C1008 * C2580 + C49271 * C2581) *
                          C4967 +
                      (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 +
                       C1001 * C2314 + C1008 * C2582 + C49271 * C2583) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C6374 + C6373 + C6372) * C49094 +
                      (C6371 + C6370 + C6369) * C4967 +
                      (C1237 + C1236 + C1235) * C49252 +
                      (C1234 + C1233 + C1232) * C4966) *
                         C49054 +
                     ((C2812 + C2811 + C2810) * C49094 +
                      (C2809 + C2808 + C2807) * C4967 +
                      (C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49252 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C4966) *
                         C49251) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C20289 +
                      (C9060 * C131 + C48890 * C140) * C20285 +
                      C10307 * C20290 + C10308 * C20286 + C10309 * C20291 +
                      C10310 * C20287 + C11177 * C20292 + C11176 * C49300) *
                         C49251 +
                     (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 +
                      C21530 + C21531) *
                         C49054) *
                        C339 -
                    ((C18295 * C49300 + C18294 * C20292 + C10756 * C20287 +
                      C10757 * C20291 + C10114 * C20286 + C10113 * C20290 +
                      C9573 * C20285 + C9574 * C20289) *
                         C49054 +
                     (C18055 * C49300 + C18054 * C20292 + C11176 * C20287 +
                      C11177 * C20291 + C10310 * C20286 + C10309 * C20290 +
                      C10308 * C20285 + C10307 * C20289) *
                         C49251) *
                        C49281) *
                       C48961 * C231 +
                   (((C10311 * C20289 + C10312 * C20285 + C10313 * C20290 +
                      C10314 * C20286 + C18056 * C20291 + C18057 * C20287 +
                      C18058 * C20292 + C18059 * C49300) *
                         C49251 +
                     (C10117 * C20289 + C10118 * C20285 + C10119 * C20290 +
                      C10120 * C20286 + C21542 * C20291 + C21543 * C20287 +
                      (C9060 * C17947 + C48890 * C17948) * C20292 +
                      (C9060 * C17949 + C48890 * C17950) * C49300) *
                         C49054) *
                        C49281 -
                    ((C21545 + C21544 + C21537 + C21536 + C21535 + C21534 +
                      C21533 + C21532) *
                         C49054 +
                     (C18057 * C49300 + C18056 * C20292 + C10314 * C20287 +
                      C10313 * C20291 + C10312 * C20286 + C10311 * C20290 +
                      (C9060 * C132 + C48890 * C141) * C20285 +
                      (C9060 * C120 + C48890 * C127) * C20289) *
                         C49251) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 +
            (C14323 + C14324 + C14325 + C14326) * C11279 +
            (C14327 + C14328 + C14329 + C14330) * C49294) *
               C48978 * C447 -
           ((C9567 * C49094 + C9568 * C4967 + C9191 * C49252 + C9190 * C4966) *
                C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C48978 * C49279) *
              C449 +
          (((C14331 + C14332 + C14333 + C14334) * C11277 +
            (C14335 + C14336 + C14337 + C14338) * C11278 +
            (C14339 + C14340 + C14347 + C14348) * C11279 +
            (C9198 * C4966 + C9199 * C49252 +
             (C9060 * C9298 + C48890 * C9301) * C4967 +
             (C9060 * C9302 + C48890 * C9304) * C49094) *
                C49294) *
               C48978 * C49279 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 +
             (C1892 + C1891 + C1890) * C4967 +
             (C1889 + C1888 + C1887) * C49094) *
                C49054) *
               C48978 * C447 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            ((C1887 + C1888 + C1889) * C49094 +
             (C1890 + C1891 + C1892) * C4967 +
             (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C1232 + C1233 + C1234) * C4966 +
             (C1235 + C1236 + C1237) * C49252 +
             (C6369 + C6370 + C6371) * C4967 +
             (C6372 + C6373 + C6374) * C49094) *
                C49251 +
            ((C1238 + C1239 + C1240) * C4966 +
             (C1241 + C1242 + C1243) * C49252 +
             (C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C4967 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49094) *
                C49054) *
               C48978 * C49279 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C20289 +
             (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
             C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
             C11177 * C20292 + C11176 * C49300) *
                C49251 +
            (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
             C21531) *
                C49054) *
               C48978 * C447 -
           ((C10754 * C49300 + C10755 * C20292 + C10116 * C20287 +
             C10115 * C20291 + C9571 * C20286 + C9572 * C20290 +
             C9187 * C20285 + C9186 * C20289) *
                C49054 +
            (C21531 + C21530 + C21529 + C21528 + C21527 + C21526 + C21525 +
             C21524) *
                C49251) *
               C48978 * C49279) *
              C449 +
          (((C21532 + C21533 + C21534 + C21535 + C21536 + C21537 + C21544 +
             C21545) *
                C49251 +
            (C9194 * C20289 + C9195 * C20285 + C10121 * C20290 +
             C10122 * C20286 + C10123 * C20291 + C10124 * C20287 +
             (C9060 * C10283 + C48890 * C10286) * C20292 +
             (C9060 * C10287 + C48890 * C10289) * C49300) *
                C49054) *
               C48978 * C49279 -
           ((C21545 + C21544 + C21537 + C21536 + C21535 + C21534 + C21533 +
             C21532) *
                C49054 +
            (C18057 * C49300 + C18056 * C20292 + C10314 * C20287 +
             C10313 * C20291 + C10312 * C20286 + C10311 * C20290 +
             (C9060 * C132 + C48890 * C141) * C20285 +
             (C9060 * C120 + C48890 * C127) * C20289) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
           C14716 * C49294) *
              C48978 * C513 -
          ((C14709 + C14710 + C14711 + C14712) * C49294 +
           (C14330 + C14329 + C14328 + C14327) * C11279 +
           (C14326 + C14325 + C14324 + C14323) * C11278 +
           (C14322 + C14321 + C14320 + C14319) * C11277) *
              C48978 * C514 +
          (C14715 * C11277 + C14716 * C11278 +
           (C14712 + C14711 + C14710 + C14709) * C11279 +
           (C9462 * C4966 + C9461 * C49252 +
            (C9060 * C9546 + C48890 * C9547) * C4967 +
            (C9060 * C9548 + C48890 * C9549) * C49094) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            (C1892 + C1891 + C1890) * C4967 +
            (C1889 + C1888 + C1887) * C49094) *
               C49054) *
              C48978 * C513 -
          (((C1881 + C1882 + C1883) * C49094 + (C1884 + C1885 + C1886) * C4967 +
            (C1231 + C1230 + C1229) * C49252 +
            (C1228 + C1227 + C1226) * C4966) *
               C49054 +
           ((C1887 + C1888 + C1889) * C49094 + (C1890 + C1891 + C1892) * C4967 +
            (C1225 + C1224 + C1223) * C49252 +
            (C1222 + C1221 + C1220) * C4966) *
               C49251) *
              C48978 * C514 +
          ((C1688 * C4966 + C1689 * C49252 + (C1886 + C1885 + C1884) * C4967 +
            (C1883 + C1882 + C1881) * C49094) *
               C49251 +
           ((C1695 + C1694 + C1693) * C4966 + (C1692 + C1691 + C1690) * C49252 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49271 * C1849) *
                C4967 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49271 * C1855) *
                C49094) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C20289 +
            (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
            C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
            C11177 * C20292 + C11176 * C49300) *
               C49251 +
           (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
            C21531) *
               C49054) *
              C48978 * C513 -
          ((C21904 + C21905 + C21906 + C21907 + C21908 + C21909 + C21910 +
            C21911) *
               C49054 +
           (C21531 + C21530 + C21529 + C21528 + C21527 + C21526 + C21525 +
            C21524) *
               C49251) *
              C48978 * C514 +
          ((C21911 + C21910 + C21909 + C21908 + C21907 + C21906 + C21905 +
            C21904) *
               C49251 +
           (C9188 * C20289 + C9189 * C20285 + C9570 * C20290 + C9569 * C20286 +
            C10582 * C20291 + C10581 * C20287 +
            (C9060 * C10733 + C48890 * C10734) * C20292 +
            (C9060 * C10735 + C48890 * C10736) * C49300) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C339 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C447 +
          (((C14858 + C14857 + C14856 + C14855) * C11277 +
            (C14854 + C14853 + C14852 + C14851) * C11278 +
            (C14850 + C14849 + C14848 + C14847) * C11279 +
            (C9568 * C4966 + C9567 * C49252 +
             (C9060 * C9809 + C48890 * C9812) * C4967 +
             (C9060 * C9813 + C48890 * C9815) * C49094) *
                C49294) *
               C49281 -
           ((C14709 + C14710 + C14711 + C14712) * C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C339 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C447 +
          (((C7107 * C4966 + C7108 * C49252 + (C3245 + C3246 + C3247) * C4967 +
             (C3248 + C3249 + C3250) * C49094) *
                C49251 +
            ((C1886 + C1885 + C1884) * C4966 +
             (C1883 + C1882 + C1881) * C49252 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49271 * C2308) *
                 C4967 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49271 * C2317) *
                 C49094) *
                C49054) *
               C49281 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            (C7109 * C49094 + C7110 * C4967 + (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C20289 +
             (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
             C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
             C11177 * C20292 + C11176 * C49300) *
                C49251 +
            (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
             C21531) *
                C49054) *
               C339 -
           ((C22042 + C22043 + C22044 + C22045 + C22046 + C22047 + C22048 +
             C22049) *
                C49054 +
            (C18055 * C49300 + C18054 * C20292 + C11176 * C20287 +
             C11177 * C20291 + C10310 * C20286 + C10309 * C20290 +
             C10308 * C20285 + C10307 * C20289) *
                C49251) *
               C49281) *
              C447 +
          (((C22049 + C22048 + C22047 + C22046 + C22045 + C22044 + C22043 +
             C22042) *
                C49251 +
            (C9572 * C20289 + C9571 * C20285 + C10115 * C20290 +
             C10116 * C20286 + C10755 * C20291 + C10754 * C20287 +
             (C9060 * C11164 + C48890 * C11167) * C20292 +
             (C9060 * C11168 + C48890 * C11170) * C49300) *
                C49054) *
               C49281 -
           ((C21904 + C21905 + C21906 + C21907 + C21908 + C21909 + C21910 +
             C21911) *
                C49054 +
            (C21531 + C21530 + C21529 + C21528 + C21527 + C21526 + C21525 +
             C21524) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C721 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C4966 + C10312 * C49252 + C10313 * C4967 +
             C10314 * C49094) *
                C11277 +
            (C10117 * C4966 + C10118 * C49252 + C10119 * C4967 +
             C10120 * C49094) *
                C11278 +
            (C10121 * C4966 + C10122 * C49252 + C10123 * C4967 +
             C10124 * C49094) *
                C11279 +
            (C14345 * C4966 + C14346 * C49252 +
             (C9060 * C10072 + C48890 * C10073) * C4967 +
             (C9060 * C10074 + C48890 * C10075) * C49094) *
                C49294) *
               C49281 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C721 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C2807 + C2808 + C2809) * C4966 +
             (C2810 + C2811 + C2812) * C49252 +
             (C2813 + C2814 + C2815) * C4967 +
             (C2816 + C2817 + C2818) * C49094) *
                C49251 +
            ((C6369 + C6370 + C6371) * C4966 +
             (C6372 + C6373 + C6374) * C49252 +
             (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2580 + C49271 * C2581) *
                 C4967 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2582 + C49271 * C2583) *
                 C49094) *
                C49054) *
               C49281 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C20289 +
             (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
             C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
             C11177 * C20292 + C11176 * C49300) *
                C49251 +
            (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
             C21531) *
                C49054) *
               C721 -
           ((C22042 + C22043 + C22044 + C22045 + C22046 + C22047 + C22048 +
             C22049) *
                C49054 +
            (C18055 * C49300 + C18054 * C20292 + C11176 * C20287 +
             C11177 * C20291 + C10310 * C20286 + C10309 * C20290 +
             C10308 * C20285 + C10307 * C20289) *
                C49251) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C20289 + C10312 * C20285 + C10313 * C20290 +
             C10314 * C20286 + C18056 * C20291 + C18057 * C20287 +
             C18058 * C20292 + C18059 * C49300) *
                C49251 +
            (C10117 * C20289 + C10118 * C20285 + C10119 * C20290 +
             C10120 * C20286 + C21542 * C20291 + C21543 * C20287 +
             (C9060 * C17947 + C48890 * C17948) * C20292 +
             (C9060 * C17949 + C48890 * C17950) * C49300) *
                C49054) *
               C49281 -
           ((C21545 + C21544 + C21537 + C21536 + C21535 + C21534 + C21533 +
             C21532) *
                C49054 +
            (C18057 * C49300 + C18056 * C20292 + C10314 * C20287 +
             C10313 * C20291 + C10312 * C20286 + C10311 * C20290 +
             (C9060 * C132 + C48890 * C141) * C20285 +
             (C9060 * C120 + C48890 * C127) * C20289) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C721 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C229 +
          (((C14858 + C14857 + C14856 + C14855) * C11277 +
            (C14854 + C14853 + C14852 + C14851) * C11278 +
            (C14850 + C14849 + C14848 + C14847) * C11279 +
            (C9568 * C4966 + C9567 * C49252 +
             (C9060 * C9809 + C48890 * C9812) * C4967 +
             (C9060 * C9813 + C48890 * C9815) * C49094) *
                C49294) *
               C49281 -
           ((C14709 + C14710 + C14711 + C14712) * C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C721 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C229 +
          (((C7107 * C4966 + C7108 * C49252 + (C3245 + C3246 + C3247) * C4967 +
             (C3248 + C3249 + C3250) * C49094) *
                C49251 +
            ((C1886 + C1885 + C1884) * C4966 +
             (C1883 + C1882 + C1881) * C49252 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49271 * C2308) *
                 C4967 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49271 * C2317) *
                 C49094) *
                C49054) *
               C49281 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            (C7109 * C49094 + C7110 * C4967 + (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C20289 +
             (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
             C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
             C11177 * C20292 + C11176 * C49300) *
                C49251 +
            (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
             C21531) *
                C49054) *
               C721 -
           ((C22042 + C22043 + C22044 + C22045 + C22046 + C22047 + C22048 +
             C22049) *
                C49054 +
            (C18055 * C49300 + C18054 * C20292 + C11176 * C20287 +
             C11177 * C20291 + C10310 * C20286 + C10309 * C20290 +
             C10308 * C20285 + C10307 * C20289) *
                C49251) *
               C49281) *
              C229 +
          (((C22049 + C22048 + C22047 + C22046 + C22045 + C22044 + C22043 +
             C22042) *
                C49251 +
            (C9572 * C20289 + C9571 * C20285 + C10115 * C20290 +
             C10116 * C20286 + C10755 * C20291 + C10754 * C20287 +
             (C9060 * C11164 + C48890 * C11167) * C20292 +
             (C9060 * C11168 + C48890 * C11170) * C49300) *
                C49054) *
               C49281 -
           ((C21904 + C21905 + C21906 + C21907 + C21908 + C21909 + C21910 +
             C21911) *
                C49054 +
            (C21531 + C21530 + C21529 + C21528 + C21527 + C21526 + C21525 +
             C21524) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
           C14716 * C49294) *
              C867 -
          ((C14847 + C14848 + C14849 + C14850) * C49294 +
           (C14851 + C14852 + C14853 + C14854) * C11279 +
           (C14855 + C14856 + C14857 + C14858) * C11278 +
           (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
            C10307 * C4966) *
               C11277) *
              C868 +
          ((C10309 * C4966 + C10310 * C49252 + C11177 * C4967 +
            C11176 * C49094) *
               C11277 +
           (C10113 * C4966 + C10114 * C49252 + C10757 * C4967 +
            C10756 * C49094) *
               C11278 +
           (C10115 * C4966 + C10116 * C49252 + C10755 * C4967 +
            C10754 * C49094) *
               C11279 +
           (C10582 * C4966 + C10581 * C49252 +
            (C9060 * C10733 + C48890 * C10734) * C4967 +
            (C9060 * C10735 + C48890 * C10736) * C49094) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            C7107 * C4967 + C7108 * C49094) *
               C49054) *
              C867 -
          (((C3250 + C3249 + C3248) * C49094 + (C3247 + C3246 + C3245) * C4967 +
            C7109 * C49252 + C7110 * C4966) *
               C49054 +
           ((C2806 + C2805 + C2804) * C49094 + (C2803 + C2802 + C2801) * C4967 +
            (C2800 + C2799 + C2798) * C49252 +
            (C2797 + C2796 + C2795) * C4966) *
               C49251) *
              C868 +
          ((C3679 * C4966 + C3680 * C49252 + (C3686 + C3685 + C3684) * C4967 +
            (C3683 + C3682 + C3681) * C49094) *
               C49251 +
           ((C3245 + C3246 + C3247) * C4966 + (C3248 + C3249 + C3250) * C49252 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C4967 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49094) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C20289 +
            (C9060 * C131 + C48890 * C140) * C20285 + C10307 * C20290 +
            C10308 * C20286 + C10309 * C20291 + C10310 * C20287 +
            C11177 * C20292 + C11176 * C49300) *
               C49251 +
           (C21524 + C21525 + C21526 + C21527 + C21528 + C21529 + C21530 +
            C21531) *
               C49054) *
              C867 -
          ((C22042 + C22043 + C22044 + C22045 + C22046 + C22047 + C22048 +
            C22049) *
               C49054 +
           (C18055 * C49300 + C18054 * C20292 + C11176 * C20287 +
            C11177 * C20291 + C10310 * C20286 + C10309 * C20290 +
            C10308 * C20285 + C10307 * C20289) *
               C49251) *
              C868 +
          ((C10309 * C20289 + C10310 * C20285 + C11177 * C20290 +
            C11176 * C20286 + C18054 * C20291 + C18055 * C20287 +
            C18531 * C20292 + C18530 * C49300) *
               C49251 +
           (C10113 * C20289 + C10114 * C20285 + C10757 * C20290 +
            C10756 * C20286 + C18294 * C20291 + C18295 * C20287 +
            (C9060 * C18285 + C48890 * C18286) * C20292 +
            (C9060 * C18287 + C48890 * C18288) * C49300) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C49007) *
                  C48996 * C48978 * C48961 * C110 -
              ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C132 + C101 * C141) *
                   C49007 +
               (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                C113 * C120 + C101 * C127) *
                   C118) *
                  C48996 * C48978 * C48961 * C111 +
              ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                C117 * C125 + C105 * C138) *
                   C118 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                C117 * C139 + C105 * C146) *
                   C49007) *
                  C48996 * C48978 * C48961 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49271 * C128) *
                    C118 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49271 * C142) *
                    C49007) *
                   C49319 +
               ((C1006 * C237 + C1000 * C248 + C1007 * C236 + C1001 * C247 +
                 C1008 * C235 + C49271 * C246) *
                    C118 +
                (C1006 * C243 + C1000 * C255 + C1007 * C242 + C1001 * C254 +
                 C1008 * C241 + C49271 * C253) *
                    C49007) *
                   C49307 +
               ((C1006 * C517 + C1000 * C522 + C1007 * C518 + C1001 * C523 +
                 C1008 * C519 + C49271 * C524) *
                    C118 +
                (C1006 * C527 + C1000 * C532 + C1007 * C528 + C1001 * C533 +
                 C1008 * C529 + C49271 * C534) *
                    C49007) *
                   C49284) *
                  C48978 * C48961 * C110 -
              (((C1008 * C530 + C49271 * C535 + C1007 * C529 + C1001 * C534 +
                 C1006 * C528 + C1000 * C533) *
                    C49007 +
                (C1008 * C520 + C49271 * C525 + C1007 * C519 + C1001 * C524 +
                 C1006 * C518 + C1000 * C523) *
                    C118) *
                   C49284 +
               ((C1008 * C240 + C49271 * C252 + C1007 * C241 + C1001 * C253 +
                 C1006 * C242 + C1000 * C254) *
                    C49007 +
                (C1008 * C234 + C49271 * C245 + C1007 * C235 + C1001 * C246 +
                 C1006 * C236 + C1000 * C247) *
                    C118) *
                   C49307 +
               ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
                 C1006 * C132 + C1000 * C141) *
                    C49007 +
                (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
                 C1006 * C120 + C1000 * C127) *
                    C118) *
                   C49319) *
                  C48978 * C48961 * C111 +
              (((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                 C1008 * C123 + C49271 * C130) *
                    C118 +
                (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                 C1008 * C135 + C49271 * C144) *
                    C49007) *
                   C49319 +
               ((C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
                 C1008 * C233 + C49271 * C244) *
                    C118 +
                (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
                 C1008 * C239 + C49271 * C251) *
                    C49007) *
                   C49307 +
               ((C1006 * C519 + C1000 * C524 + C1007 * C520 + C1001 * C525 +
                 C1008 * C521 + C49271 * C526) *
                    C118 +
                (C1006 * C529 + C1000 * C534 + C1007 * C530 + C1001 * C535 +
                 C1008 * C531 + C49271 * C536) *
                    C49007) *
                   C49284) *
                  C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                                C1001 * C127 + C1008 * C121 + C49271 * C128) *
                                   C2431 +
                               (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                                C1001 * C141 + C1008 * C133 + C49271 * C142) *
                                   C49320 +
                               (C1006 * C345 + C1000 * C356 + C1007 * C344 +
                                C1001 * C355 + C1008 * C343 + C49271 * C354) *
                                   C2432 +
                               (C1006 * C351 + C1000 * C363 + C1007 * C350 +
                                C1001 * C362 + C1008 * C349 + C49271 * C361) *
                                   C49309 +
                               (C1006 * C870 + C1000 * C875 + C1007 * C871 +
                                C1001 * C876 + C1008 * C872 + C49271 * C877) *
                                   C2433 +
                               (C1006 * C880 + C1000 * C885 + C1007 * C881 +
                                C1001 * C886 + C1008 * C882 + C49271 * C887) *
                                   C49287) *
                                  C48996 * C48978 * C48961 * C110 -
                              ((C1008 * C883 + C49271 * C888 + C1007 * C882 +
                                C1001 * C887 + C1006 * C881 + C1000 * C886) *
                                   C49287 +
                               (C1008 * C873 + C49271 * C878 + C1007 * C872 +
                                C1001 * C877 + C1006 * C871 + C1000 * C876) *
                                   C2433 +
                               (C1008 * C348 + C49271 * C360 + C1007 * C349 +
                                C1001 * C361 + C1006 * C350 + C1000 * C362) *
                                   C49309 +
                               (C1008 * C342 + C49271 * C353 + C1007 * C343 +
                                C1001 * C354 + C1006 * C344 + C1000 * C355) *
                                   C2432 +
                               (C1008 * C134 + C49271 * C143 + C1007 * C133 +
                                C1001 * C142 + C1006 * C132 + C1000 * C141) *
                                   C49320 +
                               (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                                C1001 * C128 + C1006 * C120 + C1000 * C127) *
                                   C2431) *
                                  C48996 * C48978 * C48961 * C111 +
                              ((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                                C1001 * C129 + C1008 * C123 + C49271 * C130) *
                                   C2431 +
                               (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                                C1001 * C143 + C1008 * C135 + C49271 * C144) *
                                   C49320 +
                               (C1006 * C343 + C1000 * C354 + C1007 * C342 +
                                C1001 * C353 + C1008 * C341 + C49271 * C352) *
                                   C2432 +
                               (C1006 * C349 + C1000 * C361 + C1007 * C348 +
                                C1001 * C360 + C1008 * C347 + C49271 * C359) *
                                   C49309 +
                               (C1006 * C872 + C1000 * C877 + C1007 * C873 +
                                C1001 * C878 + C1008 * C874 + C49271 * C879) *
                                   C2433 +
                               (C1006 * C882 + C1000 * C887 + C1007 * C883 +
                                C1001 * C888 + C1008 * C884 + C49271 * C889) *
                                   C49287) *
                                  C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7760 * C237 + C49316 * C248 + C7761 * C236 + C49303 * C247 +
             C7762 * C235 + C49271 * C246) *
                C118 +
            (C7760 * C243 + C49316 * C255 + C7761 * C242 + C49303 * C254 +
             C7762 * C241 + C49271 * C253) *
                C49007) *
               C7758 +
           ((C7760 * C517 + C49316 * C522 + C7761 * C518 + C49303 * C523 +
             C7762 * C519 + C49271 * C524) *
                C118 +
            (C7760 * C527 + C49316 * C532 + C7761 * C528 + C49303 * C533 +
             C7762 * C529 + C49271 * C534) *
                C49007) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C7762 * C530 + C49271 * C535 + C7761 * C529 + C49303 * C534 +
             C7760 * C528 + C49316 * C533) *
                C49007 +
            (C7762 * C520 + C49271 * C525 + C7761 * C519 + C49303 * C524 +
             C7760 * C518 + C49316 * C523) *
                C118) *
               C49284 +
           ((C7762 * C240 + C49271 * C252 + C7761 * C241 + C49303 * C253 +
             C7760 * C242 + C49316 * C254) *
                C49007 +
            (C7762 * C234 + C49271 * C245 + C7761 * C235 + C49303 * C246 +
             C7760 * C236 + C49316 * C247) *
                C118) *
               C7758 +
           ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C49007 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C118) *
               C7757) *
              C48978 * C48961 * C111 +
          (((C7760 * C121 + C49316 * C128 + C7761 * C122 + C49303 * C129 +
             C7762 * C123 + C49271 * C130) *
                C118 +
            (C7760 * C133 + C49316 * C142 + C7761 * C134 + C49303 * C143 +
             C7762 * C135 + C49271 * C144) *
                C49007) *
               C7757 +
           ((C7760 * C235 + C49316 * C246 + C7761 * C234 + C49303 * C245 +
             C7762 * C233 + C49271 * C244) *
                C118 +
            (C7760 * C241 + C49316 * C253 + C7761 * C240 + C49303 * C252 +
             C7762 * C239 + C49271 * C251) *
                C49007) *
               C7758 +
           ((C7760 * C519 + C49316 * C524 + C7761 * C520 + C49303 * C525 +
             C7762 * C521 + C49271 * C526) *
                C118 +
            (C7760 * C529 + C49316 * C534 + C7761 * C530 + C49303 * C535 +
             C7762 * C531 + C49271 * C536) *
                C49007) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           ((C9060 * C237 + C48890 * C248) * C118 +
            (C9060 * C243 + C48890 * C255) * C49007) *
               C9056 +
           ((C9060 * C517 + C48890 * C522) * C118 +
            (C9060 * C527 + C48890 * C532) * C49007) *
               C9057 +
           ((C9060 * C1157 + C48890 * C1164) * C118 +
            (C9060 * C1161 + C48890 * C1169) * C49007) *
               C9058 +
           ((C9060 * C1661 + C48890 * C1664) * C118 +
            (C9060 * C1667 + C48890 * C1670) * C49007) *
               C9059) *
              C48978 * C48961 * C110 -
          (((C9060 * C1668 + C48890 * C1671) * C49007 +
            (C9060 * C1662 + C48890 * C1665) * C118) *
               C9059 +
           ((C9060 * C1160 + C48890 * C1168) * C49007 +
            (C9060 * C1156 + C48890 * C1163) * C118) *
               C9058 +
           ((C9060 * C528 + C48890 * C533) * C49007 +
            (C9060 * C518 + C48890 * C523) * C118) *
               C9057 +
           ((C9060 * C242 + C48890 * C254) * C49007 +
            (C9060 * C236 + C48890 * C247) * C118) *
               C9056 +
           ((C9060 * C132 + C48890 * C141) * C49007 +
            (C9060 * C120 + C48890 * C127) * C118) *
               C9055) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C118 +
            (C9060 * C133 + C48890 * C142) * C49007) *
               C9055 +
           ((C9060 * C235 + C48890 * C246) * C118 +
            (C9060 * C241 + C48890 * C253) * C49007) *
               C9056 +
           ((C9060 * C519 + C48890 * C524) * C118 +
            (C9060 * C529 + C48890 * C534) * C49007) *
               C9057 +
           ((C9060 * C1155 + C48890 * C1162) * C118 +
            (C9060 * C1159 + C48890 * C1167) * C49007) *
               C9058 +
           ((C9060 * C1663 + C48890 * C1666) * C118 +
            (C9060 * C1669 + C48890 * C1672) * C49007) *
               C9059) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C2431 +
            (C9060 * C131 + C48890 * C140) * C49320 +
            (C9060 * C345 + C48890 * C356) * C2432 +
            (C9060 * C351 + C48890 * C363) * C49309 +
            (C9060 * C870 + C48890 * C875) * C2433 +
            (C9060 * C880 + C48890 * C885) * C49287) *
               C7757 +
           (C9184 * C2431 + C9185 * C49320 + C9574 * C2432 + C9573 * C49309 +
            (C9060 * C2294 + C48890 * C2300) * C2433 +
            (C9060 * C2303 + C48890 * C2312) * C49287) *
               C7758 +
           (C9186 * C2431 + C9187 * C49320 + C9572 * C2432 + C9571 * C49309 +
            (C9060 * C2297 + C48890 * C2306) * C2433 +
            (C9060 * C2309 + C48890 * C2315) * C49287) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C9060 * C2310 + C48890 * C2316) * C49287 +
            (C9060 * C2298 + C48890 * C2307) * C2433 +
            (C9060 * C1394 + C48890 * C1402) * C49309 +
            (C9060 * C1390 + C48890 * C1397) * C2432 + C9195 * C49320 +
            C9194 * C2431) *
               C49284 +
           ((C9060 * C2304 + C48890 * C2313) * C49287 +
            (C9060 * C2295 + C48890 * C2301) * C2433 +
            (C9060 * C630 + C48890 * C635) * C49309 +
            (C9060 * C620 + C48890 * C625) * C2432 + C9193 * C49320 +
            C9192 * C2431) *
               C7758 +
           ((C9060 * C881 + C48890 * C886) * C49287 +
            (C9060 * C871 + C48890 * C876) * C2433 +
            (C9060 * C350 + C48890 * C362) * C49309 +
            (C9060 * C344 + C48890 * C355) * C2432 +
            (C9060 * C132 + C48890 * C141) * C49320 +
            (C9060 * C120 + C48890 * C127) * C2431) *
               C7757) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C2431 +
            (C9060 * C133 + C48890 * C142) * C49320 +
            (C9060 * C343 + C48890 * C354) * C2432 +
            (C9060 * C349 + C48890 * C361) * C49309 +
            (C9060 * C872 + C48890 * C877) * C2433 +
            (C9060 * C882 + C48890 * C887) * C49287) *
               C7757 +
           ((C9060 * C235 + C48890 * C246) * C2431 +
            (C9060 * C241 + C48890 * C253) * C49320 +
            (C9060 * C621 + C48890 * C626) * C2432 +
            (C9060 * C631 + C48890 * C636) * C49309 +
            (C9060 * C2296 + C48890 * C2302) * C2433 +
            (C9060 * C2305 + C48890 * C2314) * C49287) *
               C7758 +
           ((C9060 * C519 + C48890 * C524) * C2431 +
            (C9060 * C529 + C48890 * C534) * C49320 +
            (C9060 * C1389 + C48890 * C1396) * C2432 +
            (C9060 * C1393 + C48890 * C1401) * C49309 +
            (C9060 * C2299 + C48890 * C2308) * C2433 +
            (C9060 * C2311 + C48890 * C2317) * C49287) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                                C49303 * C127 + C7762 * C121 + C49271 * C128) *
                                   C15329 +
                               (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                                C49303 * C141 + C7762 * C133 + C49271 * C142) *
                                   C15326 +
                               (C7760 * C345 + C49316 * C356 + C7761 * C344 +
                                C49303 * C355 + C7762 * C343 + C49271 * C354) *
                                   C15330 +
                               (C7760 * C351 + C49316 * C363 + C7761 * C350 +
                                C49303 * C362 + C7762 * C349 + C49271 * C361) *
                                   C15327 +
                               (C7760 * C870 + C49316 * C875 + C7761 * C871 +
                                C49303 * C876 + C7762 * C872 + C49271 * C877) *
                                   C15331 +
                               (C7760 * C880 + C49316 * C885 + C7761 * C881 +
                                C49303 * C886 + C7762 * C882 + C49271 * C887) *
                                   C49287) *
                                  C48996 * C48978 * C48961 * C110 -
                              ((C7762 * C883 + C49271 * C888 + C7761 * C882 +
                                C49303 * C887 + C7760 * C881 + C49316 * C886) *
                                   C49287 +
                               (C7762 * C873 + C49271 * C878 + C7761 * C872 +
                                C49303 * C877 + C7760 * C871 + C49316 * C876) *
                                   C15331 +
                               (C7762 * C348 + C49271 * C360 + C7761 * C349 +
                                C49303 * C361 + C7760 * C350 + C49316 * C362) *
                                   C15327 +
                               (C7762 * C342 + C49271 * C353 + C7761 * C343 +
                                C49303 * C354 + C7760 * C344 + C49316 * C355) *
                                   C15330 +
                               (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                                C49303 * C142 + C7760 * C132 + C49316 * C141) *
                                   C15326 +
                               (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                                C49303 * C128 + C7760 * C120 + C49316 * C127) *
                                   C15329) *
                                  C48996 * C48978 * C48961 * C111 +
                              ((C7760 * C121 + C49316 * C128 + C7761 * C122 +
                                C49303 * C129 + C7762 * C123 + C49271 * C130) *
                                   C15329 +
                               (C7760 * C133 + C49316 * C142 + C7761 * C134 +
                                C49303 * C143 + C7762 * C135 + C49271 * C144) *
                                   C15326 +
                               (C7760 * C343 + C49316 * C354 + C7761 * C342 +
                                C49303 * C353 + C7762 * C341 + C49271 * C352) *
                                   C15330 +
                               (C7760 * C349 + C49316 * C361 + C7761 * C348 +
                                C49303 * C360 + C7762 * C347 + C49271 * C359) *
                                   C15327 +
                               (C7760 * C872 + C49316 * C877 + C7761 * C873 +
                                C49303 * C878 + C7762 * C874 + C49271 * C879) *
                                   C15331 +
                               (C7760 * C882 + C49316 * C887 + C7761 * C883 +
                                C49303 * C888 + C7762 * C884 + C49271 * C889) *
                                   C49287) *
                                  C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C15329 +
            (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
            C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
               C49319 +
           (C9184 * C15329 + C9185 * C15326 + C9574 * C15330 + C9573 * C15327 +
            C10113 * C15331 + C10114 * C49287) *
               C49307 +
           (C9186 * C15329 + C9187 * C15326 + C9572 * C15330 + C9571 * C15327 +
            C10115 * C15331 + C10116 * C49287) *
               C49284) *
              C48978 * C48961 * C110 -
          ((C10124 * C49287 + C10123 * C15331 + C10122 * C15327 +
            C10121 * C15330 + C9195 * C15326 + C9194 * C15329) *
               C49284 +
           (C10120 * C49287 + C10119 * C15331 + C10118 * C15327 +
            C10117 * C15330 + C9193 * C15326 + C9192 * C15329) *
               C49307 +
           (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
            C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
            (C9060 * C120 + C48890 * C127) * C15329) *
               C49319) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C15329 +
            (C9060 * C133 + C48890 * C142) * C15326 +
            (C9060 * C343 + C48890 * C354) * C15330 +
            (C9060 * C349 + C48890 * C361) * C15327 +
            (C9060 * C872 + C48890 * C877) * C15331 +
            (C9060 * C882 + C48890 * C887) * C49287) *
               C49319 +
           ((C9060 * C235 + C48890 * C246) * C15329 +
            (C9060 * C241 + C48890 * C253) * C15326 +
            (C9060 * C621 + C48890 * C626) * C15330 +
            (C9060 * C631 + C48890 * C636) * C15327 +
            (C9060 * C2296 + C48890 * C2302) * C15331 +
            (C9060 * C2305 + C48890 * C2314) * C49287) *
               C49307 +
           ((C9060 * C519 + C48890 * C524) * C15329 +
            (C9060 * C529 + C48890 * C534) * C15326 +
            (C9060 * C1389 + C48890 * C1396) * C15330 +
            (C9060 * C1393 + C48890 * C1401) * C15327 +
            (C9060 * C2299 + C48890 * C2308) * C15331 +
            (C9060 * C2311 + C48890 * C2317) * C49287) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48890 * C126) * C17860 +
           (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
           C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
           C11177 * C17863 + C11176 * C17858 +
           (C9060 * C3652 + C48890 * C3655) * C17864 +
           (C9060 * C3658 + C48890 * C3661) * C17859) *
              C48996 * C48978 * C48961 * C110 -
          ((C9060 * C3659 + C48890 * C3662) * C17859 +
           (C9060 * C3653 + C48890 * C3656) * C17864 +
           (C9060 * C2735 + C48890 * C2743) * C17858 +
           (C9060 * C2731 + C48890 * C2738) * C17863 + C10314 * C17857 +
           C10313 * C17862 + C10312 * C17856 + C10311 * C17861 +
           (C9060 * C132 + C48890 * C141) * C17855 +
           (C9060 * C120 + C48890 * C127) * C17860) *
              C48996 * C48978 * C48961 * C111 +
          ((C9060 * C121 + C48890 * C128) * C17860 +
           (C9060 * C133 + C48890 * C142) * C17855 +
           (C9060 * C343 + C48890 * C354) * C17861 +
           (C9060 * C349 + C48890 * C361) * C17856 +
           (C9060 * C872 + C48890 * C877) * C17862 +
           (C9060 * C882 + C48890 * C887) * C17857 +
           (C9060 * C2730 + C48890 * C2737) * C17863 +
           (C9060 * C2734 + C48890 * C2742) * C17858 +
           (C9060 * C3654 + C48890 * C3657) * C17864 +
           (C9060 * C3660 + C48890 * C3663) * C17859) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C48978 * C229 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C49007 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48996 * C48978 * C49279) *
                  C231 +
              (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                 C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                 C117 * C238 + C105 * C249) *
                    C118 +
                (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                 C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                 C117 * C250 + C105 * C256) *
                    C49007) *
                   C48996 * C48978 * C49279 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C49007 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48996 * C48978 * C229) *
                  C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                ((C1226 + C1227 + C1228) * C118 +
                 (C1229 + C1230 + C1231) * C49007) *
                    C49284) *
                   C48978 * C229 -
               (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 +
                  C1001 * C1168 + C1006 * C1161 + C1000 * C1169) *
                     C49007 +
                 (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 +
                  C1001 * C1163 + C1006 * C1157 + C1000 * C1164) *
                     C118) *
                    C49284 +
                ((C1231 + C1230 + C1229) * C49007 +
                 (C1228 + C1227 + C1226) * C118) *
                    C49307 +
                ((C1225 + C1224 + C1223) * C49007 +
                 (C1222 + C1221 + C1220) * C118) *
                    C49319) *
                   C48978 * C49279) *
                  C231 +
              ((((C1232 + C1233 + C1234) * C118 +
                 (C1235 + C1236 + C1237) * C49007) *
                    C49319 +
                ((C1238 + C1239 + C1240) * C118 +
                 (C1241 + C1242 + C1243) * C49007) *
                    C49307 +
                ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 +
                  C1001 * C1162 + C1008 * C1158 + C49271 * C1165) *
                     C118 +
                 (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 +
                  C1001 * C1167 + C1008 * C1166 + C49271 * C1170) *
                     C49007) *
                    C49284) *
                   C48978 * C49279 -
               (((C1243 + C1242 + C1241) * C49007 +
                 (C1240 + C1239 + C1238) * C118) *
                    C49284 +
                ((C1237 + C1236 + C1235) * C49007 +
                 (C1234 + C1233 + C1232) * C118) *
                    C49307 +
                ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
                  C1006 * C132 + C1000 * C141) *
                     C49007 +
                 (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
                  C1006 * C120 + C1000 * C127) *
                     C118) *
                    C49319) *
                   C48978 * C229) *
                  C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C1006 * C345 + C1000 * C356 + C1007 * C344 + C1001 * C355 +
             C1008 * C343 + C49271 * C354) *
                C2432 +
            (C1006 * C351 + C1000 * C363 + C1007 * C350 + C1001 * C362 +
             C1008 * C349 + C49271 * C361) *
                C49309 +
            (C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
             C1008 * C872 + C49271 * C877) *
                C2433 +
            (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
             C1008 * C882 + C49271 * C887) *
                C49287) *
               C48996 * C48978 * C229 -
           ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C49287 +
            (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C1232 + C1233 + C1234) * C2431 + (C1235 + C1236 + C1237) * C49320 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49271 * C627) *
                C2432 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49271 * C637) *
                C49309 +
            (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
             C1008 * C2580 + C49271 * C2581) *
                C2433 +
            (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
             C1008 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C1008 * C883 + C49271 * C888 + C1007 * C882 + C1001 * C887 +
             C1006 * C881 + C1000 * C886) *
                C49287 +
            (C1008 * C873 + C49271 * C878 + C1007 * C872 + C1001 * C877 +
             C1006 * C871 + C1000 * C876) *
                C2433 +
            (C1008 * C348 + C49271 * C360 + C1007 * C349 + C1001 * C361 +
             C1006 * C350 + C1000 * C362) *
                C49309 +
            (C1008 * C342 + C49271 * C353 + C1007 * C343 + C1001 * C354 +
             C1006 * C344 + C1000 * C355) *
                C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C229 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C231 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C229 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C231 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 +
             (C9060 * C345 + C48890 * C356) * C2432 +
             (C9060 * C351 + C48890 * C363) * C49309 +
             (C9060 * C870 + C48890 * C875) * C2433 +
             (C9060 * C880 + C48890 * C885) * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C48978 * C229 -
           (((C9060 * C9811 + C48890 * C9814) * C49287 +
             (C9060 * C9808 + C48890 * C9810) * C2433 + C9569 * C49309 +
             C9570 * C2432 + C9189 * C49320 + C9188 * C2431) *
                C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C48978 * C49279) *
              C231 +
          (((C10093 + C10094 + C10129 + C10130 + C10131 + C10132) * C7757 +
            (C10103 + C10104 + C10133 + C10134 + C10135 + C10136) * C7758 +
            (C9196 * C2431 + C9197 * C49320 +
             (C9060 * C1845 + C48890 * C1848) * C2432 +
             (C9060 * C1851 + C48890 * C1854) * C49309 +
             (C9060 * C10072 + C48890 * C10073) * C2433 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            ((C9060 * C881 + C48890 * C886) * C49287 +
             (C9060 * C871 + C48890 * C876) * C2433 +
             (C9060 * C350 + C48890 * C362) * C49309 +
             (C9060 * C344 + C48890 * C355) * C2432 +
             (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C7760 * C345 + C49316 * C356 + C7761 * C344 + C49303 * C355 +
             C7762 * C343 + C49271 * C354) *
                C15330 +
            (C7760 * C351 + C49316 * C363 + C7761 * C350 + C49303 * C362 +
             C7762 * C349 + C49271 * C361) *
                C15327 +
            (C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C15331 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49287) *
               C48996 * C48978 * C229 -
           ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
             C7760 * C2303 + C49316 * C2312) *
                C49287 +
            (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
             C7760 * C2294 + C49316 * C2300) *
                C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C7970 + C7971 + C7972) * C15329 +
            (C7973 + C7974 + C7975) * C15326 +
            (C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
             C7762 * C622 + C49271 * C627) *
                C15330 +
            (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
             C7762 * C632 + C49271 * C637) *
                C15327 +
            (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 + C49303 * C2302 +
             C7762 * C2580 + C49271 * C2581) *
                C15331 +
            (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 + C49303 * C2314 +
             C7762 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C7762 * C883 + C49271 * C888 + C7761 * C882 + C49303 * C887 +
             C7760 * C881 + C49316 * C886) *
                C49287 +
            (C7762 * C873 + C49271 * C878 + C7761 * C872 + C49303 * C877 +
             C7760 * C871 + C49316 * C876) *
                C15331 +
            (C7762 * C348 + C49271 * C360 + C7761 * C349 + C49303 * C361 +
             C7760 * C350 + C49316 * C362) *
                C15327 +
            (C7762 * C342 + C49271 * C353 + C7761 * C343 + C49303 * C354 +
             C7760 * C344 + C49316 * C355) *
                C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C48978 * C229 -
           ((C10581 * C49287 + C10582 * C15331 + C9569 * C15327 +
             C9570 * C15330 + C9189 * C15326 + C9188 * C15329) *
                C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C48978 * C49279) *
              C231 +
          (((C16809 + C16810 + C16811 + C16812 + C16813 + C16814) * C49319 +
            (C16815 + C16816 + C16817 + C16818 + C16819 + C16820) * C49307 +
            (C9196 * C15329 + C9197 * C15326 + C14345 * C15330 +
             C14346 * C15327 + (C9060 * C10072 + C48890 * C10073) * C15331 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 +
            (C9060 * C3652 + C48890 * C3655) * C17864 +
            (C9060 * C3658 + C48890 * C3661) * C17859) *
               C48996 * C48978 * C229 -
           ((C9060 * C11166 + C48890 * C11169) * C17859 +
            (C9060 * C11163 + C48890 * C11165) * C17864 + C10756 * C17858 +
            C10757 * C17863 + C10114 * C17857 + C10113 * C17862 +
            C9573 * C17856 + C9574 * C17861 + C9185 * C17855 + C9184 * C17860) *
               C48996 * C48978 * C49279) *
              C231 +
          ((C9192 * C17860 + C9193 * C17855 + C10117 * C17861 +
            C10118 * C17856 + C10119 * C17862 + C10120 * C17857 +
            (C9060 * C3221 + C48890 * C3224) * C17863 +
            (C9060 * C3227 + C48890 * C3230) * C17858 +
            (C9060 * C17947 + C48890 * C17948) * C17864 +
            (C9060 * C17949 + C48890 * C17950) * C17859) *
               C48996 * C48978 * C49279 -
           ((C9060 * C3659 + C48890 * C3662) * C17859 +
            (C9060 * C3653 + C48890 * C3656) * C17864 +
            (C9060 * C2735 + C48890 * C2743) * C17858 +
            (C9060 * C2731 + C48890 * C2738) * C17863 + C10314 * C17857 +
            C10313 * C17862 + C10312 * C17856 + C10311 * C17861 +
            (C9060 * C132 + C48890 * C141) * C17855 +
            (C9060 * C120 + C48890 * C127) * C17860) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C339 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C49007 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48996 * C49281) *
                  C48961 * C231 +
              (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                 C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                 C117 * C346 + C105 * C357) *
                    C118 +
                (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                 C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                 C117 * C358 + C105 * C364) *
                    C49007) *
                   C48996 * C49281 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C49007 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48996 * C339) *
                  C48961 * C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                ((C1226 + C1227 + C1228) * C118 +
                 (C1229 + C1230 + C1231) * C49007) *
                    C49284) *
                   C339 -
               (((C1008 * C1393 + C49271 * C1401 + C1007 * C1394 +
                  C1001 * C1402 + C1006 * C1395 + C1000 * C1403) *
                     C49007 +
                 (C1008 * C1389 + C49271 * C1396 + C1007 * C1390 +
                  C1001 * C1397 + C1006 * C1391 + C1000 * C1398) *
                     C118) *
                    C49284 +
                ((C1008 * C631 + C49271 * C636 + C1007 * C630 + C1001 * C635 +
                  C1006 * C629 + C1000 * C634) *
                     C49007 +
                 (C1008 * C621 + C49271 * C626 + C1007 * C620 + C1001 * C625 +
                  C1006 * C619 + C1000 * C624) *
                     C118) *
                    C49307 +
                ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
                  C1006 * C351 + C1000 * C363) *
                     C49007 +
                 (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
                  C1006 * C345 + C1000 * C356) *
                     C118) *
                    C49319) *
                   C49281) *
                  C48961 * C231 +
              ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
                  C1008 * C342 + C49271 * C353) *
                     C118 +
                 (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
                  C1008 * C348 + C49271 * C360) *
                     C49007) *
                    C49319 +
                ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
                  C1008 * C622 + C49271 * C627) *
                     C118 +
                 (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
                  C1008 * C632 + C49271 * C637) *
                     C49007) *
                    C49307 +
                ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 +
                  C1001 * C1396 + C1008 * C1392 + C49271 * C1399) *
                     C118 +
                 (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 +
                  C1001 * C1401 + C1008 * C1400 + C49271 * C1404) *
                     C49007) *
                    C49284) *
                   C49281 -
               (((C1243 + C1242 + C1241) * C49007 +
                 (C1240 + C1239 + C1238) * C118) *
                    C49284 +
                ((C1237 + C1236 + C1235) * C49007 +
                 (C1234 + C1233 + C1232) * C118) *
                    C49307 +
                ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
                  C1006 * C132 + C1000 * C141) *
                     C49007 +
                 (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
                  C1006 * C120 + C1000 * C127) *
                     C118) *
                    C49319) *
                   C339) *
                  C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C339 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C2807 + C2808 + C2809) * C2431 + (C2810 + C2811 + C2812) * C49320 +
            (C2813 + C2814 + C2815) * C2432 + (C2816 + C2817 + C2818) * C49309 +
            (C1006 * C2731 + C1000 * C2738 + C1007 * C2730 + C1001 * C2737 +
             C1008 * C2733 + C49271 * C2740) *
                C2433 +
            (C1006 * C2735 + C1000 * C2743 + C1007 * C2734 + C1001 * C2742 +
             C1008 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C339 -
           (((C7762 * C1393 + C49271 * C1401 + C7761 * C1394 + C49303 * C1402 +
              C7760 * C1395 + C49316 * C1403) *
                 C49007 +
             (C7762 * C1389 + C49271 * C1396 + C7761 * C1390 + C49303 * C1397 +
              C7760 * C1391 + C49316 * C1398) *
                 C118) *
                C49284 +
            ((C7762 * C631 + C49271 * C636 + C7761 * C630 + C49303 * C635 +
              C7760 * C629 + C49316 * C634) *
                 C49007 +
             (C7762 * C621 + C49271 * C626 + C7761 * C620 + C49303 * C625 +
              C7760 * C619 + C49316 * C624) *
                 C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C231 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C339 -
           (((C9060 * C9299 + C48890 * C9303) * C49007 +
             (C9060 * C9297 + C48890 * C9300) * C118) *
                C9059 +
            ((C9060 * C1850 + C48890 * C1853) * C49007 +
             (C9060 * C1844 + C48890 * C1847) * C118) *
                C9058 +
            ((C9060 * C1395 + C48890 * C1403) * C49007 +
             (C9060 * C1391 + C48890 * C1398) * C118) *
                C9057 +
            ((C9060 * C629 + C48890 * C634) * C49007 +
             (C9060 * C619 + C48890 * C624) * C118) *
                C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C231 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C339 -
           (((C9060 * C10284 + C48890 * C10288) * C49287 +
             (C9060 * C10282 + C48890 * C10285) * C2433 + C10116 * C49309 +
             C10115 * C2432 + C9571 * C49320 + C9572 * C2431) *
                C49284 +
            ((C9060 * C3226 + C48890 * C3229) * C49287 +
             (C9060 * C3220 + C48890 * C3223) * C2433 + C10114 * C49309 +
             C10113 * C2432 + C9573 * C49320 + C9574 * C2431) *
                C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C48961 * C231 +
          (((C10311 * C2431 + C10312 * C49320 + C10313 * C2432 +
             C10314 * C49309 + (C9060 * C2731 + C48890 * C2738) * C2433 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C7757 +
            (C10117 * C2431 + C10118 * C49320 + C10119 * C2432 +
             C10120 * C49309 + (C9060 * C3221 + C48890 * C3224) * C2433 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C7758 +
            (C10121 * C2431 + C10122 * C49320 + C10123 * C2432 +
             C10124 * C49309 + (C9060 * C10283 + C48890 * C10286) * C2433 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C339 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C15685 + C15686 + C15687) * C15329 +
            (C15688 + C15689 + C15690) * C15326 +
            (C15691 + C15692 + C15693) * C15330 +
            (C15694 + C15695 + C15696) * C15327 +
            (C7760 * C2731 + C49316 * C2738 + C7761 * C2730 + C49303 * C2737 +
             C7762 * C2733 + C49271 * C2740) *
                C15331 +
            (C7760 * C2735 + C49316 * C2743 + C7761 * C2734 + C49303 * C2742 +
             C7762 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C339 -
           ((C10754 * C49287 + C10755 * C15331 + C10116 * C15327 +
             C10115 * C15330 + C9571 * C15326 + C9572 * C15329) *
                C49284 +
            (C10756 * C49287 + C10757 * C15331 + C10114 * C15327 +
             C10113 * C15330 + C9573 * C15326 + C9574 * C15329) *
                C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C48961 * C231 +
          (((C10311 * C15329 + C10312 * C15326 + C10313 * C15330 +
             C10314 * C15327 + (C9060 * C2731 + C48890 * C2738) * C15331 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C49319 +
            (C10117 * C15329 + C10118 * C15326 + C10119 * C15330 +
             C10120 * C15327 + (C9060 * C3221 + C48890 * C3224) * C15331 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C49307 +
            (C10121 * C15329 + C10122 * C15326 + C10123 * C15330 +
             C10124 * C15327 + (C9060 * C10283 + C48890 * C10286) * C15331 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
            C18055 * C17859) *
               C48996 * C339 -
           ((C9060 * C18035 + C48890 * C18039) * C17859 +
            (C9060 * C18033 + C48890 * C18036) * C17864 + C18055 * C17858 +
            C18054 * C17863 + C11176 * C17857 + C11177 * C17862 +
            C10310 * C17856 + C10309 * C17861 + C10308 * C17855 +
            C10307 * C17860) *
               C48996 * C49281) *
              C48961 * C231 +
          ((C10311 * C17860 + C10312 * C17855 + C10313 * C17861 +
            C10314 * C17856 + C18056 * C17862 + C18057 * C17857 +
            C18058 * C17863 + C18059 * C17858 +
            (C9060 * C18034 + C48890 * C18037) * C17864 +
            (C9060 * C18038 + C48890 * C18040) * C17859) *
               C48996 * C49281 -
           (C18059 * C17859 + C18058 * C17864 + C18057 * C17858 +
            C18056 * C17863 + C10314 * C17857 + C10313 * C17862 +
            C10312 * C17856 + C10311 * C17861 +
            (C9060 * C132 + C48890 * C141) * C17855 +
            (C9060 * C120 + C48890 * C127) * C17860) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C48978 * C447 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C49007 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48996 * C48978 * C49279) *
                  C449 +
              (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                 C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                 C117 * C238 + C105 * C249) *
                    C118 +
                (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                 C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                 C117 * C250 + C105 * C256) *
                    C49007) *
                   C48996 * C48978 * C49279 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C49007 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48996 * C48978 * C447) *
                  C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                ((C1226 + C1227 + C1228) * C118 +
                 (C1229 + C1230 + C1231) * C49007) *
                    C49284) *
                   C48978 * C447 -
               (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 +
                  C1001 * C1168 + C1006 * C1161 + C1000 * C1169) *
                     C49007 +
                 (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 +
                  C1001 * C1163 + C1006 * C1157 + C1000 * C1164) *
                     C118) *
                    C49284 +
                ((C1231 + C1230 + C1229) * C49007 +
                 (C1228 + C1227 + C1226) * C118) *
                    C49307 +
                ((C1225 + C1224 + C1223) * C49007 +
                 (C1222 + C1221 + C1220) * C118) *
                    C49319) *
                   C48978 * C49279) *
                  C449 +
              ((((C1232 + C1233 + C1234) * C118 +
                 (C1235 + C1236 + C1237) * C49007) *
                    C49319 +
                ((C1238 + C1239 + C1240) * C118 +
                 (C1241 + C1242 + C1243) * C49007) *
                    C49307 +
                ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 +
                  C1001 * C1162 + C1008 * C1158 + C49271 * C1165) *
                     C118 +
                 (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 +
                  C1001 * C1167 + C1008 * C1166 + C49271 * C1170) *
                     C49007) *
                    C49284) *
                   C48978 * C49279 -
               (((C1243 + C1242 + C1241) * C49007 +
                 (C1240 + C1239 + C1238) * C118) *
                    C49284 +
                ((C1237 + C1236 + C1235) * C49007 +
                 (C1234 + C1233 + C1232) * C118) *
                    C49307 +
                ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
                  C1006 * C132 + C1000 * C141) *
                     C49007 +
                 (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
                  C1006 * C120 + C1000 * C127) *
                     C118) *
                    C49319) *
                   C48978 * C447) *
                  C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C48978 * C447 -
           ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C49287 +
            (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C1232 + C1233 + C1234) * C2431 + (C1235 + C1236 + C1237) * C49320 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49271 * C627) *
                C2432 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49271 * C637) *
                C49309 +
            (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
             C1008 * C2580 + C49271 * C2581) *
                C2433 +
            (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
             C1008 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C447 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C449 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C447 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C449 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C48978 * C447 -
           (((C9060 * C9811 + C48890 * C9814) * C49287 +
             (C9060 * C9808 + C48890 * C9810) * C2433 + C9569 * C49309 +
             C9570 * C2432 + C9189 * C49320 + C9188 * C2431) *
                C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C48978 * C49279) *
              C449 +
          (((C10093 + C10094 + C10129 + C10130 + C10131 + C10132) * C7757 +
            (C10103 + C10104 + C10133 + C10134 + C10135 + C10136) * C7758 +
            (C9196 * C2431 + C9197 * C49320 +
             (C9060 * C1845 + C48890 * C1848) * C2432 +
             (C9060 * C1851 + C48890 * C1854) * C49309 +
             (C9060 * C10072 + C48890 * C10073) * C2433 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C48978 * C447 -
           ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
             C7760 * C2303 + C49316 * C2312) *
                C49287 +
            (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
             C7760 * C2294 + C49316 * C2300) *
                C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C7970 + C7971 + C7972) * C15329 +
            (C7973 + C7974 + C7975) * C15326 +
            (C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
             C7762 * C622 + C49271 * C627) *
                C15330 +
            (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
             C7762 * C632 + C49271 * C637) *
                C15327 +
            (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 + C49303 * C2302 +
             C7762 * C2580 + C49271 * C2581) *
                C15331 +
            (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 + C49303 * C2314 +
             C7762 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C48978 * C447 -
           ((C10581 * C49287 + C10582 * C15331 + C9569 * C15327 +
             C9570 * C15330 + C9189 * C15326 + C9188 * C15329) *
                C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C48978 * C49279) *
              C449 +
          (((C16809 + C16810 + C16811 + C16812 + C16813 + C16814) * C49319 +
            (C16815 + C16816 + C16817 + C16818 + C16819 + C16820) * C49307 +
            (C9196 * C15329 + C9197 * C15326 + C14345 * C15330 +
             C14346 * C15327 + (C9060 * C10072 + C48890 * C10073) * C15331 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
            C18055 * C17859) *
               C48996 * C48978 * C447 -
           ((C9060 * C11166 + C48890 * C11169) * C17859 +
            (C9060 * C11163 + C48890 * C11165) * C17864 + C10756 * C17858 +
            C10757 * C17863 + C10114 * C17857 + C10113 * C17862 +
            C9573 * C17856 + C9574 * C17861 + C9185 * C17855 + C9184 * C17860) *
               C48996 * C48978 * C49279) *
              C449 +
          ((C9192 * C17860 + C9193 * C17855 + C10117 * C17861 +
            C10118 * C17856 + C10119 * C17862 + C10120 * C17857 +
            (C9060 * C3221 + C48890 * C3224) * C17863 +
            (C9060 * C3227 + C48890 * C3230) * C17858 +
            (C9060 * C17947 + C48890 * C17948) * C17864 +
            (C9060 * C17949 + C48890 * C17950) * C17859) *
               C48996 * C48978 * C49279 -
           (C18059 * C17859 + C18058 * C17864 + C18057 * C17858 +
            C18056 * C17863 + C10314 * C17857 + C10313 * C17862 +
            C10312 * C17856 + C10311 * C17861 +
            (C9060 * C132 + C48890 * C141) * C17855 +
            (C9060 * C120 + C48890 * C127) * C17860) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C49007) *
                  C48996 * C48978 * C513 -
              ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                C113 * C243 + C101 * C255) *
                   C49007 +
               (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                C113 * C237 + C101 * C248) *
                   C118) *
                  C48996 * C48978 * C514 +
              ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
                C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
                C117 * C521 + C105 * C526) *
                   C118 +
               (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
                C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
                C117 * C531 + C105 * C536) *
                   C49007) *
                  C48996 * C48978 * C515) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49271 * C128) *
                    C118 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49271 * C142) *
                    C49007) *
                   C49319 +
               ((C1220 + C1221 + C1222) * C118 +
                (C1223 + C1224 + C1225) * C49007) *
                   C49307 +
               C1698 * C49284) *
                  C48978 * C513 -
              (((C1690 + C1691 + C1692) * C49007 +
                (C1693 + C1694 + C1695) * C118) *
                   C49284 +
               ((C1231 + C1230 + C1229) * C49007 +
                (C1228 + C1227 + C1226) * C118) *
                   C49307 +
               ((C1225 + C1224 + C1223) * C49007 +
                (C1222 + C1221 + C1220) * C118) *
                   C49319) *
                  C48978 * C514 +
              (C1698 * C49319 +
               ((C1695 + C1694 + C1693) * C118 +
                (C1692 + C1691 + C1690) * C49007) *
                   C49307 +
               ((C1006 * C1661 + C1000 * C1664 + C1007 * C1662 + C1001 * C1665 +
                 C1008 * C1663 + C49271 * C1666) *
                    C118 +
                (C1006 * C1667 + C1000 * C1670 + C1007 * C1668 + C1001 * C1671 +
                 C1008 * C1669 + C49271 * C1672) *
                    C49007) *
                   C49284) *
                  C48978 * C515) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49271 * C128) *
               C2431 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49271 * C142) *
               C49320 +
           (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
           (C2801 + C2802 + C2803) * C2433 + (C2804 + C2805 + C2806) * C49287) *
              C48996 * C48978 * C513 -
          ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
            C1006 * C2303 + C1000 * C2312) *
               C49287 +
           (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
            C1006 * C2294 + C1000 * C2300) *
               C2433 +
           (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
           (C1225 + C1224 + C1223) * C49320 + (C1222 + C1221 + C1220) * C2431) *
              C48996 * C48978 * C514 +
          (C1688 * C2431 + C1689 * C49320 + (C1886 + C1885 + C1884) * C2432 +
           (C1883 + C1882 + C1881) * C49309 +
           (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
            C1008 * C2299 + C49271 * C2308) *
               C2433 +
           (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
            C1008 * C2311 + C49271 * C2317) *
               C49287) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C48978 * C513 -
          (((C8400 + C8401 + C8402) * C49007 + (C8403 + C8404 + C8405) * C118) *
               C49284 +
           ((C7969 + C7968 + C7967) * C49007 + (C7966 + C7965 + C7964) * C118) *
               C7758 +
           ((C7963 + C7962 + C7961) * C49007 + (C7960 + C7959 + C7958) * C118) *
               C7757) *
              C48978 * C514 +
          (C8408 * C7757 +
           ((C8405 + C8404 + C8403) * C118 + (C8402 + C8401 + C8400) * C49007) *
               C7758 +
           ((C7760 * C1661 + C49316 * C1664 + C7761 * C1662 + C49303 * C1665 +
             C7762 * C1663 + C49271 * C1666) *
                C118 +
            (C7760 * C1667 + C49316 * C1670 + C7761 * C1668 + C49303 * C1671 +
             C7762 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C48978 * C513 -
          ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
           (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
           (C9201 + C9200) * C9055) *
              C48978 * C514 +
          (C9454 * C9055 + C9455 * C9056 + C9456 * C9057 +
           (C9464 + C9463) * C9058 +
           ((C9060 * C9449 + C48890 * C9450) * C118 +
            (C9060 * C9451 + C48890 * C9452) * C49007) *
               C9059) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C2431 +
            (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
            C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
               C7757 +
           (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
           C10587 * C49284) *
              C48978 * C513 -
          ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
           (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
           (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
              C48978 * C514 +
          (C10587 * C7757 +
           (C10579 + C10578 + C10577 + C10576 + C10585 + C10584) * C7758 +
           (C9190 * C2431 + C9191 * C49320 + C9568 * C2432 + C9567 * C49309 +
            (C9060 * C9809 + C48890 * C9812) * C2433 +
            (C9060 * C9813 + C48890 * C9815) * C49287) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
            C7762 * C121 + C49271 * C128) *
               C15329 +
           (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
            C7762 * C133 + C49271 * C142) *
               C15326 +
           (C15673 + C15674 + C15675) * C15330 +
           (C15676 + C15677 + C15678) * C15327 +
           (C15679 + C15680 + C15681) * C15331 +
           (C15682 + C15683 + C15684) * C49287) *
              C48996 * C48978 * C513 -
          ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
            C7760 * C2303 + C49316 * C2312) *
               C49287 +
           (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
            C7760 * C2294 + C49316 * C2300) *
               C15331 +
           (C8585 + C8586 + C8587) * C15327 + (C8588 + C8589 + C8590) * C15330 +
           (C7963 + C7962 + C7961) * C15326 +
           (C7960 + C7959 + C7958) * C15329) *
              C48996 * C48978 * C514 +
          (C8398 * C15329 + C8399 * C15326 + (C8584 + C8583 + C8582) * C15330 +
           (C8581 + C8580 + C8579) * C15327 +
           (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
            C7762 * C2299 + C49271 * C2308) *
               C15331 +
           (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
            C7762 * C2311 + C49271 * C2317) *
               C49287) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C15329 +
            (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
            C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
               C49319 +
           (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
           C17233 * C49284) *
              C48978 * C513 -
          ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
           (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
           (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
              C48978 * C514 +
          (C17233 * C49319 +
           (C17229 + C17228 + C17227 + C17226 + C17225 + C17224) * C49307 +
           (C9190 * C15329 + C9191 * C15326 + C9568 * C15330 + C9567 * C15327 +
            (C9060 * C9809 + C48890 * C9812) * C15331 +
            (C9060 * C9813 + C48890 * C9815) * C49287) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48890 * C126) * C17860 +
           (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
           C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
           C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
           C18055 * C17859) *
              C48996 * C48978 * C513 -
          ((C9060 * C11166 + C48890 * C11169) * C17859 +
           (C9060 * C11163 + C48890 * C11165) * C17864 + C10756 * C17858 +
           C10757 * C17863 + C10114 * C17857 + C10113 * C17862 +
           C9573 * C17856 + C9574 * C17861 + C9185 * C17855 + C9184 * C17860) *
              C48996 * C48978 * C514 +
          (C9186 * C17860 + C9187 * C17855 + C9572 * C17861 + C9571 * C17856 +
           C10115 * C17862 + C10116 * C17857 + C10755 * C17863 +
           C10754 * C17858 + (C9060 * C11164 + C48890 * C11167) * C17864 +
           (C9060 * C11168 + C48890 * C11170) * C17859) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C339 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C49007 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48996 * C49281) *
                  C447 +
              (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                 C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                 C117 * C623 + C105 * C628) *
                    C118 +
                (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                 C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                 C117 * C633 + C105 * C638) *
                    C49007) *
                   C48996 * C49281 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C49007 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48996 * C339) *
                  C49279) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                C1698 * C49284) *
                   C339 -
               (((C1881 + C1882 + C1883) * C49007 +
                 (C1884 + C1885 + C1886) * C118) *
                    C49284 +
                ((C1887 + C1888 + C1889) * C49007 +
                 (C1890 + C1891 + C1892) * C118) *
                    C49307 +
                ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
                  C1006 * C351 + C1000 * C363) *
                     C49007 +
                 (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
                  C1006 * C345 + C1000 * C356) *
                     C118) *
                    C49319) *
                   C49281) *
                  C447 +
              ((((C1892 + C1891 + C1890) * C118 +
                 (C1889 + C1888 + C1887) * C49007) *
                    C49319 +
                ((C1886 + C1885 + C1884) * C118 +
                 (C1883 + C1882 + C1881) * C49007) *
                    C49307 +
                ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 +
                  C1001 * C1848 + C1008 * C1846 + C49271 * C1849) *
                     C118 +
                 (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 +
                  C1001 * C1854 + C1008 * C1852 + C49271 * C1855) *
                     C49007) *
                    C49284) *
                   C49281 -
               (((C1690 + C1691 + C1692) * C49007 +
                 (C1693 + C1694 + C1695) * C118) *
                    C49284 +
                ((C1231 + C1230 + C1229) * C49007 +
                 (C1228 + C1227 + C1226) * C118) *
                    C49307 +
                ((C1225 + C1224 + C1223) * C49007 +
                 (C1222 + C1221 + C1220) * C118) *
                    C49319) *
                   C339) *
                  C49279) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C339 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C447 +
          (((C1892 + C1891 + C1890) * C2431 + (C1889 + C1888 + C1887) * C49320 +
            (C3245 + C3246 + C3247) * C2432 + (C3248 + C3249 + C3250) * C49309 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C2433 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C3250 + C3249 + C3248) * C49287 + (C3247 + C3246 + C3245) * C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C339 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C447 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C339 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C447 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C339 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C447 +
          (((C10753 + C10752 + C10751 + C10750 + C10761 + C10760) * C7757 +
            (C10745 + C10744 + C10743 + C10742 + C10759 + C10758) * C7758 +
            (C9570 * C2431 + C9569 * C49320 + C10582 * C2432 + C10581 * C49309 +
             (C9060 * C10733 + C48890 * C10734) * C2433 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C339 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C447 +
          (((C8590 + C8589 + C8588) * C15329 +
            (C8587 + C8586 + C8585) * C15326 +
            (C16111 + C16112 + C16113) * C15330 +
            (C16114 + C16115 + C16116) * C15327 +
            (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 + C49303 * C3224 +
             C7762 * C3222 + C49271 * C3225) *
                C15331 +
            (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 + C49303 * C3230 +
             C7762 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C16116 + C16115 + C16114) * C49287 +
            (C16113 + C16112 + C16111) * C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C339 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C447 +
          (((C17391 + C17390 + C17389 + C17388 + C17387 + C17386) * C49319 +
            (C17385 + C17384 + C17383 + C17382 + C17381 + C17380) * C49307 +
            (C9570 * C15329 + C9569 * C15326 + C10582 * C15330 +
             C10581 * C15327 + (C9060 * C10733 + C48890 * C10734) * C15331 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
            C18055 * C17859) *
               C48996 * C339 -
           ((C9060 * C18035 + C48890 * C18039) * C17859 +
            (C9060 * C18033 + C48890 * C18036) * C17864 + C18055 * C17858 +
            C18054 * C17863 + C11176 * C17857 + C11177 * C17862 +
            C10310 * C17856 + C10309 * C17861 + C10308 * C17855 +
            C10307 * C17860) *
               C48996 * C49281) *
              C447 +
          ((C9574 * C17860 + C9573 * C17855 + C10113 * C17861 +
            C10114 * C17856 + C10757 * C17862 + C10756 * C17857 +
            C18294 * C17863 + C18295 * C17858 +
            (C9060 * C18285 + C48890 * C18286) * C17864 +
            (C9060 * C18287 + C48890 * C18288) * C17859) *
               C48996 * C49281 -
           (C18295 * C17859 + C18294 * C17864 + C10756 * C17858 +
            C10757 * C17863 + C10114 * C17857 + C10113 * C17862 +
            C9573 * C17856 + C9574 * C17861 + C9185 * C17855 + C9184 * C17860) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C721 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C49007 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48996 * C49281) *
                  C48961 * C449 +
              (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                 C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                 C117 * C346 + C105 * C357) *
                    C118 +
                (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                 C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                 C117 * C358 + C105 * C364) *
                    C49007) *
                   C48996 * C49281 -
               ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                 C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C132 + C101 * C141) *
                    C49007 +
                (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                 C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                 C113 * C120 + C101 * C127) *
                    C118) *
                   C48996 * C721) *
                  C48961 * C49277) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                C1698 * C49284) *
                   C721 -
               (((C1881 + C1882 + C1883) * C49007 +
                 (C1884 + C1885 + C1886) * C118) *
                    C49284 +
                ((C1887 + C1888 + C1889) * C49007 +
                 (C1890 + C1891 + C1892) * C118) *
                    C49307 +
                ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
                  C1006 * C351 + C1000 * C363) *
                     C49007 +
                 (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
                  C1006 * C345 + C1000 * C356) *
                     C118) *
                    C49319) *
                   C49281) *
                  C48961 * C449 +
              ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
                  C1008 * C342 + C49271 * C353) *
                     C118 +
                 (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
                  C1008 * C348 + C49271 * C360) *
                     C49007) *
                    C49319 +
                ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
                  C1008 * C622 + C49271 * C627) *
                     C118 +
                 (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
                  C1008 * C632 + C49271 * C637) *
                     C49007) *
                    C49307 +
                ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 +
                  C1001 * C1396 + C1008 * C1392 + C49271 * C1399) *
                     C118 +
                 (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 +
                  C1001 * C1401 + C1008 * C1400 + C49271 * C1404) *
                     C49007) *
                    C49284) *
                   C49281 -
               (((C1243 + C1242 + C1241) * C49007 +
                 (C1240 + C1239 + C1238) * C118) *
                    C49284 +
                ((C1237 + C1236 + C1235) * C49007 +
                 (C1234 + C1233 + C1232) * C118) *
                    C49307 +
                ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
                  C1006 * C132 + C1000 * C141) *
                     C49007 +
                 (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
                  C1006 * C120 + C1000 * C127) *
                     C118) *
                    C49319) *
                   C721) *
                  C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C721 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C2807 + C2808 + C2809) * C2431 + (C2810 + C2811 + C2812) * C49320 +
            (C2813 + C2814 + C2815) * C2432 + (C2816 + C2817 + C2818) * C49309 +
            (C1006 * C2731 + C1000 * C2738 + C1007 * C2730 + C1001 * C2737 +
             C1008 * C2733 + C49271 * C2740) *
                C2433 +
            (C1006 * C2735 + C1000 * C2743 + C1007 * C2734 + C1001 * C2742 +
             C1008 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C449 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C449 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C721 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C2431 + C10312 * C49320 + C10313 * C2432 +
             C10314 * C49309 + (C9060 * C2731 + C48890 * C2738) * C2433 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C7757 +
            (C10117 * C2431 + C10118 * C49320 + C10119 * C2432 +
             C10120 * C49309 + (C9060 * C3221 + C48890 * C3224) * C2433 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C7758 +
            (C10121 * C2431 + C10122 * C49320 + C10123 * C2432 +
             C10124 * C49309 + (C9060 * C10283 + C48890 * C10286) * C2433 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C721 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C15685 + C15686 + C15687) * C15329 +
            (C15688 + C15689 + C15690) * C15326 +
            (C15691 + C15692 + C15693) * C15330 +
            (C15694 + C15695 + C15696) * C15327 +
            (C7760 * C2731 + C49316 * C2738 + C7761 * C2730 + C49303 * C2737 +
             C7762 * C2733 + C49271 * C2740) *
                C15331 +
            (C7760 * C2735 + C49316 * C2743 + C7761 * C2734 + C49303 * C2742 +
             C7762 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C721 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C15329 + C10312 * C15326 + C10313 * C15330 +
             C10314 * C15327 + (C9060 * C2731 + C48890 * C2738) * C15331 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C49319 +
            (C10117 * C15329 + C10118 * C15326 + C10119 * C15330 +
             C10120 * C15327 + (C9060 * C3221 + C48890 * C3224) * C15331 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C49307 +
            (C10121 * C15329 + C10122 * C15326 + C10123 * C15330 +
             C10124 * C15327 + (C9060 * C10283 + C48890 * C10286) * C15331 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
            C18055 * C17859) *
               C48996 * C721 -
           ((C9060 * C18035 + C48890 * C18039) * C17859 +
            (C9060 * C18033 + C48890 * C18036) * C17864 + C18055 * C17858 +
            C18054 * C17863 + C11176 * C17857 + C11177 * C17862 +
            C10310 * C17856 + C10309 * C17861 + C10308 * C17855 +
            C10307 * C17860) *
               C48996 * C49281) *
              C48961 * C449 +
          ((C10311 * C17860 + C10312 * C17855 + C10313 * C17861 +
            C10314 * C17856 + C18056 * C17862 + C18057 * C17857 +
            C18058 * C17863 + C18059 * C17858 +
            (C9060 * C18034 + C48890 * C18037) * C17864 +
            (C9060 * C18038 + C48890 * C18040) * C17859) *
               C48996 * C49281 -
           (C18059 * C17859 + C18058 * C17864 + C18057 * C17858 +
            C18056 * C17863 + C10314 * C17857 + C10313 * C17862 +
            C10312 * C17856 + C10311 * C17861 +
            (C9060 * C132 + C48890 * C141) * C17855 +
            (C9060 * C120 + C48890 * C127) * C17860) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                 C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                 C117 * C123 + C105 * C130) *
                    C118 +
                (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                 C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                 C117 * C135 + C105 * C144) *
                    C49007) *
                   C48996 * C721 -
               ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                 C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                 C113 * C351 + C101 * C363) *
                    C49007 +
                (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                 C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                 C113 * C345 + C101 * C356) *
                    C118) *
                   C48996 * C49281) *
                  C229 +
              (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                 C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                 C117 * C623 + C105 * C628) *
                    C118 +
                (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                 C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                 C117 * C633 + C105 * C638) *
                    C49007) *
                   C48996 * C49281 -
               ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                 C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                 C113 * C243 + C101 * C255) *
                    C49007 +
                (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                 C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                 C113 * C237 + C101 * C248) *
                    C118) *
                   C48996 * C721) *
                  C49279) *
             C48927 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                  C1008 * C121 + C49271 * C128) *
                     C118 +
                 (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                  C1008 * C133 + C49271 * C142) *
                     C49007) *
                    C49319 +
                ((C1220 + C1221 + C1222) * C118 +
                 (C1223 + C1224 + C1225) * C49007) *
                    C49307 +
                C1698 * C49284) *
                   C721 -
               (((C1881 + C1882 + C1883) * C49007 +
                 (C1884 + C1885 + C1886) * C118) *
                    C49284 +
                ((C1887 + C1888 + C1889) * C49007 +
                 (C1890 + C1891 + C1892) * C118) *
                    C49307 +
                ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
                  C1006 * C351 + C1000 * C363) *
                     C49007 +
                 (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
                  C1006 * C345 + C1000 * C356) *
                     C118) *
                    C49319) *
                   C49281) *
                  C229 +
              ((((C1892 + C1891 + C1890) * C118 +
                 (C1889 + C1888 + C1887) * C49007) *
                    C49319 +
                ((C1886 + C1885 + C1884) * C118 +
                 (C1883 + C1882 + C1881) * C49007) *
                    C49307 +
                ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 +
                  C1001 * C1848 + C1008 * C1846 + C49271 * C1849) *
                     C118 +
                 (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 +
                  C1001 * C1854 + C1008 * C1852 + C49271 * C1855) *
                     C49007) *
                    C49284) *
                   C49281 -
               (((C1690 + C1691 + C1692) * C49007 +
                 (C1693 + C1694 + C1695) * C118) *
                    C49284 +
                ((C1231 + C1230 + C1229) * C49007 +
                 (C1228 + C1227 + C1226) * C118) *
                    C49307 +
                ((C1225 + C1224 + C1223) * C49007 +
                 (C1222 + C1221 + C1220) * C118) *
                    C49319) *
                   C721) *
                  C49279) *
             C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C721 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C229 +
          (((C1892 + C1891 + C1890) * C2431 + (C1889 + C1888 + C1887) * C49320 +
            (C3245 + C3246 + C3247) * C2432 + (C3248 + C3249 + C3250) * C49309 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C2433 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C3250 + C3249 + C3248) * C49287 + (C3247 + C3246 + C3245) * C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C229 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C229 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C721 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C229 +
          (((C10753 + C10752 + C10751 + C10750 + C10761 + C10760) * C7757 +
            (C10745 + C10744 + C10743 + C10742 + C10759 + C10758) * C7758 +
            (C9570 * C2431 + C9569 * C49320 + C10582 * C2432 + C10581 * C49309 +
             (C9060 * C10733 + C48890 * C10734) * C2433 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C721 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C229 +
          (((C8590 + C8589 + C8588) * C15329 +
            (C8587 + C8586 + C8585) * C15326 +
            (C16111 + C16112 + C16113) * C15330 +
            (C16114 + C16115 + C16116) * C15327 +
            (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 + C49303 * C3224 +
             C7762 * C3222 + C49271 * C3225) *
                C15331 +
            (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 + C49303 * C3230 +
             C7762 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C16116 + C16115 + C16114) * C49287 +
            (C16113 + C16112 + C16111) * C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C721 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C229 +
          (((C17391 + C17390 + C17389 + C17388 + C17387 + C17386) * C49319 +
            (C17385 + C17384 + C17383 + C17382 + C17381 + C17380) * C49307 +
            (C9570 * C15329 + C9569 * C15326 + C10582 * C15330 +
             C10581 * C15327 + (C9060 * C10733 + C48890 * C10734) * C15331 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C17860 +
            (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
            C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
            C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
            C18055 * C17859) *
               C48996 * C721 -
           ((C9060 * C18035 + C48890 * C18039) * C17859 +
            (C9060 * C18033 + C48890 * C18036) * C17864 + C18055 * C17858 +
            C18054 * C17863 + C11176 * C17857 + C11177 * C17862 +
            C10310 * C17856 + C10309 * C17861 + C10308 * C17855 +
            C10307 * C17860) *
               C48996 * C49281) *
              C229 +
          ((C9574 * C17860 + C9573 * C17855 + C10113 * C17861 +
            C10114 * C17856 + C10757 * C17862 + C10756 * C17857 +
            C18294 * C17863 + C18295 * C17858 +
            (C9060 * C18285 + C48890 * C18286) * C17864 +
            (C9060 * C18287 + C48890 * C18288) * C17859) *
               C48996 * C49281 -
           (C18295 * C17859 + C18294 * C17864 + C10756 * C17858 +
            C10757 * C17863 + C10114 * C17857 + C10113 * C17862 +
            C9573 * C17856 + C9574 * C17861 + C9185 * C17855 + C9184 * C17860) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                C117 * C123 + C105 * C130) *
                   C118 +
               (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                C117 * C135 + C105 * C144) *
                   C49007) *
                  C48996 * C867 -
              ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                C113 * C351 + C101 * C363) *
                   C49007 +
               (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                C113 * C345 + C101 * C356) *
                   C118) *
                  C48996 * C868 +
              ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
                C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
                C117 * C874 + C105 * C879) *
                   C118 +
               (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
                C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
                C117 * C884 + C105 * C889) *
                   C49007) *
                  C48996 * C869) *
             C48961 * C48927 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                 C1008 * C121 + C49271 * C128) *
                    C118 +
                (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                 C1008 * C133 + C49271 * C142) *
                    C49007) *
                   C49319 +
               ((C1220 + C1221 + C1222) * C118 +
                (C1223 + C1224 + C1225) * C49007) *
                   C49307 +
               C1698 * C49284) *
                  C867 -
              (((C1881 + C1882 + C1883) * C49007 +
                (C1884 + C1885 + C1886) * C118) *
                   C49284 +
               ((C1887 + C1888 + C1889) * C49007 +
                (C1890 + C1891 + C1892) * C118) *
                   C49307 +
               ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
                 C1006 * C351 + C1000 * C363) *
                    C49007 +
                (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
                 C1006 * C345 + C1000 * C356) *
                    C118) *
                   C49319) *
                  C868 +
              (((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
                 C1008 * C872 + C49271 * C877) *
                    C118 +
                (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
                 C1008 * C882 + C49271 * C887) *
                    C49007) *
                   C49319 +
               ((C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
                 C1008 * C2296 + C49271 * C2302) *
                    C118 +
                (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
                 C1008 * C2305 + C49271 * C2314) *
                    C49007) *
                   C49307 +
               ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
                 C1008 * C2299 + C49271 * C2308) *
                    C118 +
                (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
                 C1008 * C2311 + C49271 * C2317) *
                    C49007) *
                   C49284) *
                  C869) *
             C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49271 * C128) *
               C2431 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49271 * C142) *
               C49320 +
           (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
           C3679 * C2433 + C3680 * C49287) *
              C48996 * C867 -
          ((C3681 + C3682 + C3683) * C49287 + (C3684 + C3685 + C3686) * C2433 +
           (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
           (C2800 + C2799 + C2798) * C49320 + (C2797 + C2796 + C2795) * C2431) *
              C48996 * C868 +
          (C3679 * C2431 + C3680 * C49320 + (C3686 + C3685 + C3684) * C2432 +
           (C3683 + C3682 + C3681) * C49309 +
           (C1006 * C3652 + C1000 * C3655 + C1007 * C3653 + C1001 * C3656 +
            C1008 * C3654 + C49271 * C3657) *
               C2433 +
           (C1006 * C3658 + C1000 * C3661 + C1007 * C3659 + C1001 * C3662 +
            C1008 * C3660 + C49271 * C3663) *
               C49287) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C867 -
          (((C8579 + C8580 + C8581) * C49007 + (C8582 + C8583 + C8584) * C118) *
               C49284 +
           ((C8585 + C8586 + C8587) * C49007 + (C8588 + C8589 + C8590) * C118) *
               C7758 +
           ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
             C7760 * C351 + C49316 * C363) *
                C49007 +
            (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
             C7760 * C345 + C49316 * C356) *
                C118) *
               C7757) *
              C868 +
          (((C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C118 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49007) *
               C7757 +
           ((C7760 * C2294 + C49316 * C2300 + C7761 * C2295 + C49303 * C2301 +
             C7762 * C2296 + C49271 * C2302) *
                C118 +
            (C7760 * C2303 + C49316 * C2312 + C7761 * C2304 + C49303 * C2313 +
             C7762 * C2305 + C49271 * C2314) *
                C49007) *
               C7758 +
           ((C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
             C7762 * C2299 + C49271 * C2308) *
                C118 +
            (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
             C7762 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C867 -
          ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
           (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
           ((C9060 * C351 + C48890 * C363) * C49007 +
            (C9060 * C345 + C48890 * C356) * C118) *
               C9055) *
              C868 +
          (((C9060 * C870 + C48890 * C875) * C118 +
            (C9060 * C880 + C48890 * C885) * C49007) *
               C9055 +
           ((C9060 * C2294 + C48890 * C2300) * C118 +
            (C9060 * C2303 + C48890 * C2312) * C49007) *
               C9056 +
           ((C9060 * C2297 + C48890 * C2306) * C118 +
            (C9060 * C2309 + C48890 * C2315) * C49007) *
               C9057 +
           ((C9060 * C9808 + C48890 * C9810) * C118 +
            (C9060 * C9811 + C48890 * C9814) * C49007) *
               C9058 +
           ((C9060 * C9809 + C48890 * C9812) * C118 +
            (C9060 * C9813 + C48890 * C9815) * C49007) *
               C9059) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C2431 +
            (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
            C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
               C7757 +
           (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
           C10587 * C49284) *
              C867 -
          ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
           (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
           (C11176 * C49287 + C11177 * C2433 + C10310 * C49309 +
            C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
               C7757) *
              C868 +
          ((C10309 * C2431 + C10310 * C49320 + C11177 * C2432 +
            C11176 * C49309 + (C9060 * C3652 + C48890 * C3655) * C2433 +
            (C9060 * C3658 + C48890 * C3661) * C49287) *
               C7757 +
           (C10113 * C2431 + C10114 * C49320 + C10757 * C2432 +
            C10756 * C49309 + (C9060 * C11163 + C48890 * C11165) * C2433 +
            (C9060 * C11166 + C48890 * C11169) * C49287) *
               C7758 +
           (C10115 * C2431 + C10116 * C49320 + C10755 * C2432 +
            C10754 * C49309 + (C9060 * C11164 + C48890 * C11167) * C2433 +
            (C9060 * C11168 + C48890 * C11170) * C49287) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
            C7762 * C121 + C49271 * C128) *
               C15329 +
           (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
            C7762 * C133 + C49271 * C142) *
               C15326 +
           (C15673 + C15674 + C15675) * C15330 +
           (C15676 + C15677 + C15678) * C15327 + C16533 * C15331 +
           C16534 * C49287) *
              C48996 * C867 -
          ((C16535 + C16536 + C16537) * C49287 +
           (C16538 + C16539 + C16540) * C15331 +
           (C15684 + C15683 + C15682) * C15327 +
           (C15681 + C15680 + C15679) * C15330 +
           (C15678 + C15677 + C15676) * C15326 +
           (C15675 + C15674 + C15673) * C15329) *
              C48996 * C868 +
          (C16533 * C15329 + C16534 * C15326 +
           (C16540 + C16539 + C16538) * C15330 +
           (C16537 + C16536 + C16535) * C15327 +
           (C7760 * C3652 + C49316 * C3655 + C7761 * C3653 + C49303 * C3656 +
            C7762 * C3654 + C49271 * C3657) *
               C15331 +
           (C7760 * C3658 + C49316 * C3661 + C7761 * C3659 + C49303 * C3662 +
            C7762 * C3660 + C49271 * C3663) *
               C49287) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C15329 +
            (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
            C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
               C49319 +
           (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
           C17233 * C49284) *
              C867 -
          ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
           (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
           (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
            C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
               C49319) *
              C868 +
          ((C10309 * C15329 + C10310 * C15326 + C11177 * C15330 +
            C11176 * C15327 + (C9060 * C3652 + C48890 * C3655) * C15331 +
            (C9060 * C3658 + C48890 * C3661) * C49287) *
               C49319 +
           (C10113 * C15329 + C10114 * C15326 + C10757 * C15330 +
            C10756 * C15327 + (C9060 * C11163 + C48890 * C11165) * C15331 +
            (C9060 * C11166 + C48890 * C11169) * C49287) *
               C49307 +
           (C10115 * C15329 + C10116 * C15326 + C10755 * C15330 +
            C10754 * C15327 + (C9060 * C11164 + C48890 * C11167) * C15331 +
            (C9060 * C11168 + C48890 * C11170) * C49287) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9060 * C119 + C48890 * C126) * C17860 +
           (C9060 * C131 + C48890 * C140) * C17855 + C10307 * C17861 +
           C10308 * C17856 + C10309 * C17862 + C10310 * C17857 +
           C11177 * C17863 + C11176 * C17858 + C18054 * C17864 +
           C18055 * C17859) *
              C48996 * C867 -
          (C18530 * C17859 + C18531 * C17864 + C18055 * C17858 +
           C18054 * C17863 + C11176 * C17857 + C11177 * C17862 +
           C10310 * C17856 + C10309 * C17861 + C10308 * C17855 +
           C10307 * C17860) *
              C48996 * C868 +
          (C10309 * C17860 + C10310 * C17855 + C11177 * C17861 +
           C11176 * C17856 + C18054 * C17862 + C18055 * C17857 +
           C18531 * C17863 + C18530 * C17858 +
           (C9060 * C18521 + C48890 * C18522) * C17864 +
           (C9060 * C18523 + C48890 * C18524) * C17859) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C47907 * C345 + C49229 * C356 + C47888 * C344 + C48900 * C355) *
                C4967 +
            (C47907 * C351 + C49229 * C363 + C47888 * C350 + C48900 * C362) *
                C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
               C7758 +
           (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
            (C12025 + C12024) * C49094) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C47888 * C1393 + C48900 * C1401 + C47907 * C1394 +
             C49229 * C1402) *
                C49094 +
            (C47888 * C1389 + C48900 * C1396 + C47907 * C1390 +
             C49229 * C1397) *
                C4967 +
            (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
               C49284 +
           ((C47888 * C631 + C48900 * C636 + C47907 * C630 + C49229 * C635) *
                C49094 +
            (C47888 * C621 + C48900 * C626 + C47907 * C620 + C49229 * C625) *
                C4967 +
            (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
               C7758 +
           ((C47888 * C349 + C48900 * C361 + C47907 * C350 + C49229 * C362) *
                C49094 +
            (C47888 * C343 + C48900 * C354 + C47907 * C344 + C49229 * C355) *
                C4967 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C49252 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C4966) *
               C7757) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C4966 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C49252 +
            (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
                C4967 +
            (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
                C49094) *
               C7757 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C4966 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C49252 +
            (C47907 * C621 + C49229 * C626 + C47888 * C622 + C48900 * C627) *
                C4967 +
            (C47907 * C631 + C49229 * C636 + C47888 * C632 + C48900 * C637) *
                C49094) *
               C7758 +
           ((C47907 * C519 + C49229 * C524 + C47888 * C520 + C48900 * C525) *
                C4966 +
            (C47907 * C529 + C49229 * C534 + C47888 * C530 + C48900 * C535) *
                C49252 +
            (C47907 * C1389 + C49229 * C1396 + C47888 * C1392 +
             C48900 * C1399) *
                C4967 +
            (C47907 * C1393 + C49229 * C1401 + C47888 * C1400 +
             C48900 * C1404) *
                C49094) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
            C3792 * C343 + C3786 * C354 + C3793 * C342 + C49288 * C353) *
               C4967 +
           (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
            C3792 * C349 + C3786 * C361 + C3793 * C348 + C49288 * C360) *
               C49094) *
              C48996 * C48978 * C48961 * C110 -
          ((C3793 * C347 + C49288 * C359 + C3792 * C348 + C3786 * C360 +
            C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
               C49094 +
           (C3793 * C341 + C49288 * C352 + C3792 * C342 + C3786 * C353 +
            C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
               C4967 +
           (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
            C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
               C49252 +
           (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
            C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
               C4966) *
              C48996 * C48978 * C48961 * C111 +
          ((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
            C3792 * C123 + C3786 * C130 + C3793 * C124 + C49288 * C137) *
               C4966 +
           (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
            C3792 * C135 + C3786 * C144 + C3793 * C136 + C49288 * C145) *
               C49252 +
           (C3790 * C343 + C3784 * C354 + C3791 * C342 + C3785 * C353 +
            C3792 * C341 + C3786 * C352 + C3793 * C346 + C49288 * C357) *
               C4967 +
           (C3790 * C349 + C3784 * C361 + C3791 * C348 + C3785 * C360 +
            C3792 * C347 + C3786 * C359 + C3793 * C358 + C49288 * C364) *
               C49094) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
               C20289 +
           (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
               C20285 +
           (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
           C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
           (C20185 + C20184) * C49300) *
              C48996 * C48978 * C48961 * C110 -
          ((C47888 * C2734 + C48900 * C2742 + C47907 * C2735 + C49229 * C2743) *
               C49300 +
           (C47888 * C2730 + C48900 * C2737 + C47907 * C2731 + C49229 * C2738) *
               C20292 +
           (C19089 + C19088) * C20287 + (C19087 + C19086) * C20291 +
           (C12971 + C12970) * C20286 + (C12969 + C12968) * C20290 +
           (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
               C20285 +
           (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
               C20289) *
              C48996 * C48978 * C48961 * C111 +
          ((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
               C20289 +
           (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
               C20285 +
           (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
               C20290 +
           (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
               C20286 +
           (C47907 * C872 + C49229 * C877 + C47888 * C873 + C48900 * C878) *
               C20291 +
           (C47907 * C882 + C49229 * C887 + C47888 * C883 + C48900 * C888) *
               C20287 +
           (C47907 * C2730 + C49229 * C2737 + C47888 * C2733 + C48900 * C2740) *
               C20292 +
           (C47907 * C2734 + C49229 * C2742 + C47888 * C2741 + C48900 * C2745) *
               C49300) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C47907 * C345 + C49229 * C356 + C47888 * C344 + C48900 * C355) *
                 C4967 +
             (C47907 * C351 + C49229 * C363 + C47888 * C350 + C48900 * C362) *
                 C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C48978 * C229 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
             (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
                C7758 +
            ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
             (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
                C7757) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C4966 + (C11476 + C11477) * C49252 +
             (C12746 + C12747) * C4967 + (C12748 + C12749) * C49094) *
                C7757 +
            ((C11478 + C11479) * C4966 + (C11480 + C11481) * C49252 +
             (C12750 + C12751) * C4967 + (C12752 + C12753) * C49094) *
                C7758 +
            ((C11482 + C11483) * C4966 + (C11484 + C11485) * C49252 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C47888 * C349 + C48900 * C361 + C47907 * C350 + C49229 * C362) *
                 C49094 +
             (C47888 * C343 + C48900 * C354 + C47907 * C344 + C49229 * C355) *
                 C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
             C3792 * C343 + C3786 * C354 + C3793 * C342 + C49288 * C353) *
                C4967 +
            (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
             C3792 * C349 + C3786 * C361 + C3793 * C348 + C49288 * C360) *
                C49094) *
               C48996 * C48978 * C229 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C3965 + C3966 + C3967 + C3968) * C4966 +
            (C3969 + C3970 + C3971 + C3972) * C49252 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                C4967 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C3793 * C347 + C49288 * C359 + C3792 * C348 + C3786 * C360 +
             C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                C49094 +
            (C3793 * C341 + C49288 * C352 + C3792 * C342 + C3786 * C353 +
             C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C48978 * C229 -
           ((C19636 + C19637) * C49300 + (C19638 + C19639) * C20292 +
            C19634 * C20287 + C19635 * C20291 + C13535 * C20286 +
            C13536 * C20290 + (C11465 + C11464) * C20285 +
            (C11463 + C11462) * C20289) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C11474 + C11475) * C20289 + (C11476 + C11477) * C20285 +
            (C12746 + C12747) * C20290 + (C12748 + C12749) * C20286 +
            (C18880 + C18881) * C20291 + (C18882 + C18883) * C20287 +
            (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
             C48900 * C3225) *
                C20292 +
            (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
             C48900 * C3231) *
                C49300) *
               C48996 * C48978 * C49279 -
           ((C47888 * C2734 + C48900 * C2742 + C47907 * C2735 +
             C49229 * C2743) *
                C49300 +
            (C47888 * C2730 + C48900 * C2737 + C47907 * C2731 +
             C49229 * C2738) *
                C20292 +
            (C19089 + C19088) * C20287 + (C19087 + C19086) * C20291 +
            (C12971 + C12970) * C20286 + (C12969 + C12968) * C20290 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C20285 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C20289) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C339 -
           (((C47888 * C2310 + C48900 * C2316 + C47907 * C2309 +
              C49229 * C2315) *
                 C49094 +
             (C47888 * C2298 + C48900 * C2307 + C47907 * C2297 +
              C49229 * C2306) *
                 C4967 +
             (C12024 + C12025) * C49252 + (C12026 + C12027) * C4966) *
                C49284 +
            ((C47888 * C2304 + C48900 * C2313 + C47907 * C2303 +
              C49229 * C2312) *
                 C49094 +
             (C47888 * C2295 + C48900 * C2301 + C47907 * C2294 +
              C49229 * C2300) *
                 C4967 +
             (C12028 + C12029) * C49252 + (C12030 + C12031) * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C48961 * C231 +
          ((((C12968 + C12969) * C4966 + (C12970 + C12971) * C49252 +
             (C47907 * C871 + C49229 * C876 + C47888 * C872 + C48900 * C877) *
                 C4967 +
             (C47907 * C881 + C49229 * C886 + C47888 * C882 + C48900 * C887) *
                 C49094) *
                C7757 +
            ((C12746 + C12747) * C4966 + (C12748 + C12749) * C49252 +
             (C47907 * C2295 + C49229 * C2301 + C47888 * C2296 +
              C48900 * C2302) *
                 C4967 +
             (C47907 * C2304 + C49229 * C2313 + C47888 * C2305 +
              C48900 * C2314) *
                 C49094) *
                C7758 +
            ((C12750 + C12751) * C4966 + (C12752 + C12753) * C49252 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C339 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C5269 + C5270 + C5271 + C5272) * C4966 +
            (C5273 + C5274 + C5275 + C5276) * C49252 +
            (C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
             C3792 * C873 + C3786 * C878 + C3793 * C874 + C49288 * C879) *
                C4967 +
            (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
             C3792 * C883 + C3786 * C888 + C3793 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C339 -
           ((C47888 * C3659 + C48900 * C3662 + C47907 * C3658 +
             C49229 * C3661) *
                C49300 +
            (C47888 * C3653 + C48900 * C3656 + C47907 * C3652 +
             C49229 * C3655) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C14087 + C14088) * C20286 + (C14089 + C14090) * C20290 +
            (C12967 + C12966) * C20285 + (C12965 + C12964) * C20289) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C12968 + C12969) * C20289 + (C12970 + C12971) * C20285 +
            (C19086 + C19087) * C20290 + (C19088 + C19089) * C20286 +
            (C20562 + C20563) * C20291 + (C20564 + C20565) * C20287 +
            (C47907 * C3653 + C49229 * C3656 + C47888 * C3654 +
             C48900 * C3657) *
                C20292 +
            (C47907 * C3659 + C49229 * C3662 + C47888 * C3660 +
             C48900 * C3663) *
                C49300) *
               C48996 * C49281 -
           ((C20565 + C20564) * C49300 + (C20563 + C20562) * C20292 +
            (C19089 + C19088) * C20287 + (C19087 + C19086) * C20291 +
            (C12971 + C12970) * C20286 + (C12969 + C12968) * C20290 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C20285 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C20289) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C48978 * C447 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
             (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
                C7758 +
            ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
             (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
                C7757) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C4966 + (C11476 + C11477) * C49252 +
             (C12746 + C12747) * C4967 + (C12748 + C12749) * C49094) *
                C7757 +
            ((C11478 + C11479) * C4966 + (C11480 + C11481) * C49252 +
             (C12750 + C12751) * C4967 + (C12752 + C12753) * C49094) *
                C7758 +
            ((C11482 + C11483) * C4966 + (C11484 + C11485) * C49252 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C48978 * C447 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C3965 + C3966 + C3967 + C3968) * C4966 +
            (C3969 + C3970 + C3971 + C3972) * C49252 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                C4967 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C48978 * C447 -
           ((C19636 + C19637) * C49300 + (C19638 + C19639) * C20292 +
            C19634 * C20287 + C19635 * C20291 + C13535 * C20286 +
            C13536 * C20290 + (C11465 + C11464) * C20285 +
            (C11463 + C11462) * C20289) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C11474 + C11475) * C20289 + (C11476 + C11477) * C20285 +
            (C12746 + C12747) * C20290 + (C12748 + C12749) * C20286 +
            (C18880 + C18881) * C20291 + (C18882 + C18883) * C20287 +
            (C47907 * C3221 + C49229 * C3224 + C47888 * C3222 +
             C48900 * C3225) *
                C20292 +
            (C47907 * C3227 + C49229 * C3230 + C47888 * C3228 +
             C48900 * C3231) *
                C49300) *
               C48996 * C48978 * C49279 -
           ((C20565 + C20564) * C49300 + (C20563 + C20562) * C20292 +
            (C19089 + C19088) * C20287 + (C19087 + C19086) * C20291 +
            (C12971 + C12970) * C20286 + (C12969 + C12968) * C20290 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C20285 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C20289) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
               C7758 +
           C13320 * C49284) *
              C48978 * C513 -
          (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
            (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
               C49284 +
           ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
            (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
               C7758 +
           ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
            (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
               C7757) *
              C48978 * C514 +
          (C13320 * C7757 +
           (C11846 * C4966 + C11847 * C49252 + (C12023 + C12022) * C4967 +
            (C12021 + C12020) * C49094) *
               C7758 +
           ((C11863 + C11862) * C4966 + (C11861 + C11860) * C49252 +
            (C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
             C48900 * C9301) *
                C4967 +
            (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
             C48900 * C9304) *
                C49094) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C5261 + C5262 + C5263 + C5264) * C4967 +
           (C5265 + C5266 + C5267 + C5268) * C49094) *
              C48996 * C48978 * C513 -
          ((C4501 + C4502 + C4503 + C4504) * C49094 +
           (C4505 + C4506 + C4507 + C4508) * C4967 +
           (C3964 + C3963 + C3962 + C3961) * C49252 +
           (C3960 + C3959 + C3958 + C3957) * C4966) *
              C48996 * C48978 * C514 +
          ((C4354 + C4353 + C4352 + C4351) * C4966 +
           (C4350 + C4349 + C4348 + C4347) * C49252 +
           (C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
            C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
               C4967 +
           (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
            C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
               C49094) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
               C20289 +
           (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
               C20285 +
           (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
           C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
           (C20185 + C20184) * C49300) *
              C48996 * C48978 * C513 -
          ((C19636 + C19637) * C49300 + (C19638 + C19639) * C20292 +
           C19634 * C20287 + C19635 * C20291 + C13535 * C20286 +
           C13536 * C20290 + (C11465 + C11464) * C20285 +
           (C11463 + C11462) * C20289) *
              C48996 * C48978 * C514 +
          (C11844 * C20289 + C11845 * C20285 + C13314 * C20290 +
           C13315 * C20286 + (C13540 + C13539) * C20291 +
           (C13538 + C13537) * C20287 +
           (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
            C48900 * C10286) *
               C20292 +
           (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
            C48900 * C10289) *
               C49300) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C339 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C447 +
          (((C13515 * C4966 + C13516 * C49252 + (C13544 + C13543) * C4967 +
             (C13542 + C13541) * C49094) *
                C7757 +
            (C13314 * C4966 + C13315 * C49252 + (C13540 + C13539) * C4967 +
             (C13538 + C13537) * C49094) *
                C7758 +
            ((C12023 + C12022) * C4966 + (C12021 + C12020) * C49252 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            (C13525 * C49094 + C13526 * C4967 + (C11469 + C11468) * C49252 +
             (C11467 + C11466) * C4966) *
                C7758 +
            (C13535 * C49094 + C13536 * C4967 + (C11465 + C11464) * C49252 +
             (C11463 + C11462) * C4966) *
                C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C339 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C447 +
          (((C4508 + C4507 + C4506 + C4505) * C4966 +
            (C4504 + C4503 + C4502 + C4501) * C49252 +
            (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C4967 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C339 -
           ((C47888 * C3659 + C48900 * C3662 + C47907 * C3658 +
             C49229 * C3661) *
                C49300 +
            (C47888 * C3653 + C48900 * C3656 + C47907 * C3652 +
             C49229 * C3655) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C14087 + C14088) * C20286 + (C14089 + C14090) * C20290 +
            (C12967 + C12966) * C20285 + (C12965 + C12964) * C20289) *
               C48996 * C49281) *
              C447 +
          ((C13515 * C20289 + C13516 * C20285 + C19624 * C20290 +
            C19625 * C20286 + (C19639 + C19638) * C20291 +
            (C19637 + C19636) * C20287 +
            (C47907 * C11163 + C49229 * C11165 + C47888 * C17947 +
             C48900 * C17948) *
                C20292 +
            (C47907 * C11166 + C49229 * C11169 + C47888 * C17949 +
             C48900 * C17950) *
                C49300) *
               C48996 * C49281 -
           ((C19636 + C19637) * C49300 + (C19638 + C19639) * C20292 +
            C19634 * C20287 + C19635 * C20291 + C13535 * C20286 +
            C13536 * C20290 + (C11465 + C11464) * C20285 +
            (C11463 + C11462) * C20289) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C48961 * C449 +
          ((((C12968 + C12969) * C4966 + (C12970 + C12971) * C49252 +
             (C47907 * C871 + C49229 * C876 + C47888 * C872 + C48900 * C877) *
                 C4967 +
             (C47907 * C881 + C49229 * C886 + C47888 * C882 + C48900 * C887) *
                 C49094) *
                C7757 +
            ((C12746 + C12747) * C4966 + (C12748 + C12749) * C49252 +
             (C47907 * C2295 + C49229 * C2301 + C47888 * C2296 +
              C48900 * C2302) *
                 C4967 +
             (C47907 * C2304 + C49229 * C2313 + C47888 * C2305 +
              C48900 * C2314) *
                 C49094) *
                C7758 +
            ((C12750 + C12751) * C4966 + (C12752 + C12753) * C49252 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C721 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C5269 + C5270 + C5271 + C5272) * C4966 +
            (C5273 + C5274 + C5275 + C5276) * C49252 +
            (C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
             C3792 * C873 + C3786 * C878 + C3793 * C874 + C49288 * C879) *
                C4967 +
            (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
             C3792 * C883 + C3786 * C888 + C3793 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C721 -
           ((C47888 * C3659 + C48900 * C3662 + C47907 * C3658 +
             C49229 * C3661) *
                C49300 +
            (C47888 * C3653 + C48900 * C3656 + C47907 * C3652 +
             C49229 * C3655) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C14087 + C14088) * C20286 + (C14089 + C14090) * C20290 +
            (C12967 + C12966) * C20285 + (C12965 + C12964) * C20289) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C12968 + C12969) * C20289 + (C12970 + C12971) * C20285 +
            (C19086 + C19087) * C20290 + (C19088 + C19089) * C20286 +
            (C20562 + C20563) * C20291 + (C20564 + C20565) * C20287 +
            (C47907 * C3653 + C49229 * C3656 + C47888 * C3654 +
             C48900 * C3657) *
                C20292 +
            (C47907 * C3659 + C49229 * C3662 + C47888 * C3660 +
             C48900 * C3663) *
                C49300) *
               C48996 * C49281 -
           ((C20565 + C20564) * C49300 + (C20563 + C20562) * C20292 +
            (C19089 + C19088) * C20287 + (C19087 + C19086) * C20291 +
            (C12971 + C12970) * C20286 + (C12969 + C12968) * C20290 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C20285 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C20289) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C229 +
          (((C13515 * C4966 + C13516 * C49252 + (C13544 + C13543) * C4967 +
             (C13542 + C13541) * C49094) *
                C7757 +
            (C13314 * C4966 + C13315 * C49252 + (C13540 + C13539) * C4967 +
             (C13538 + C13537) * C49094) *
                C7758 +
            ((C12023 + C12022) * C4966 + (C12021 + C12020) * C49252 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            (C13525 * C49094 + C13526 * C4967 + (C11469 + C11468) * C49252 +
             (C11467 + C11466) * C4966) *
                C7758 +
            (C13535 * C49094 + C13536 * C4967 + (C11465 + C11464) * C49252 +
             (C11463 + C11462) * C4966) *
                C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C721 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C229 +
          (((C4508 + C4507 + C4506 + C4505) * C4966 +
            (C4504 + C4503 + C4502 + C4501) * C49252 +
            (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C4967 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C20289 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C20285 +
            (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49300) *
               C48996 * C721 -
           ((C47888 * C3659 + C48900 * C3662 + C47907 * C3658 +
             C49229 * C3661) *
                C49300 +
            (C47888 * C3653 + C48900 * C3656 + C47907 * C3652 +
             C49229 * C3655) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C14087 + C14088) * C20286 + (C14089 + C14090) * C20290 +
            (C12967 + C12966) * C20285 + (C12965 + C12964) * C20289) *
               C48996 * C49281) *
              C229 +
          ((C13515 * C20289 + C13516 * C20285 + C19624 * C20290 +
            C19625 * C20286 + (C19639 + C19638) * C20291 +
            (C19637 + C19636) * C20287 +
            (C47907 * C11163 + C49229 * C11165 + C47888 * C17947 +
             C48900 * C17948) *
                C20292 +
            (C47907 * C11166 + C49229 * C11169 + C47888 * C17949 +
             C48900 * C17950) *
                C49300) *
               C48996 * C49281 -
           ((C19636 + C19637) * C49300 + (C19638 + C19639) * C20292 +
            C19634 * C20287 + C19635 * C20291 + C13535 * C20286 +
            C13536 * C20290 + (C11465 + C11464) * C20285 +
            (C11463 + C11462) * C20289) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            C13515 * C4967 + C13516 * C49094) *
               C7758 +
           C13320 * C49284) *
              C867 -
          (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
            C13525 * C49252 + C13526 * C4966) *
               C49284 +
           ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
            C13535 * C49252 + C13536 * C4966) *
               C7758 +
           ((C14087 + C14088) * C49094 + (C14089 + C14090) * C4967 +
            (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
               C7757) *
              C868 +
          (((C14090 + C14089) * C4966 + (C14088 + C14087) * C49252 +
            (C47907 * C2732 + C49229 * C2739 + C47888 * C2731 +
             C48900 * C2738) *
                C4967 +
            (C47907 * C2736 + C49229 * C2744 + C47888 * C2735 +
             C48900 * C2743) *
                C49094) *
               C7757 +
           ((C13544 + C13543) * C4966 + (C13542 + C13541) * C49252 +
            (C47907 * C3220 + C49229 * C3223 + C47888 * C3221 +
             C48900 * C3224) *
                C4967 +
            (C47907 * C3226 + C49229 * C3229 + C47888 * C3227 +
             C48900 * C3230) *
                C49094) *
               C7758 +
           ((C13540 + C13539) * C4966 + (C13538 + C13537) * C49252 +
            (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
             C48900 * C10286) *
                C4967 +
            (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
             C48900 * C10289) *
                C49094) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C5261 + C5262 + C5263 + C5264) * C4967 +
           (C5265 + C5266 + C5267 + C5268) * C49094) *
              C48996 * C867 -
          ((C6009 + C6010 + C6011 + C6012) * C49094 +
           (C6013 + C6014 + C6015 + C6016) * C4967 +
           (C5268 + C5267 + C5266 + C5265) * C49252 +
           (C5264 + C5263 + C5262 + C5261) * C4966) *
              C48996 * C868 +
          ((C6016 + C6015 + C6014 + C6013) * C4966 +
           (C6012 + C6011 + C6010 + C6009) * C49252 +
           (C3790 * C2732 + C3784 * C2739 + C3791 * C2731 + C3785 * C2738 +
            C3792 * C2730 + C3786 * C2737 + C3793 * C2733 + C49288 * C2740) *
               C4967 +
           (C3790 * C2736 + C3784 * C2744 + C3791 * C2735 + C3785 * C2743 +
            C3792 * C2734 + C3786 * C2742 + C3793 * C2741 + C49288 * C2745) *
               C49094) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
               C20289 +
           (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
               C20285 +
           (C12964 + C12965) * C20290 + (C12966 + C12967) * C20286 +
           C20174 * C20291 + C20175 * C20287 + C21282 * C20292 +
           C21283 * C49300) *
              C48996 * C867 -
          ((C21292 + C21293) * C49300 + (C21294 + C21295) * C20292 +
           (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
           (C14087 + C14088) * C20286 + (C14089 + C14090) * C20290 +
           (C12967 + C12966) * C20285 + (C12965 + C12964) * C20289) *
              C48996 * C868 +
          (C20174 * C20289 + C20175 * C20285 + C21282 * C20290 +
           C21283 * C20286 + (C21295 + C21294) * C20291 +
           (C21293 + C21292) * C20287 +
           (C47907 * C18033 + C49229 * C18036 + C47888 * C18034 +
            C48900 * C18037) *
               C20292 +
           (C47907 * C18035 + C49229 * C18039 + C47888 * C18038 +
            C48900 * C18040) *
               C49300) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                      C1001 * C127 + C1008 * C121 + C49271 * C128) *
                         C118 +
                     (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                      C1001 * C141 + C1008 * C133 + C49271 * C142) *
                         C49007) *
                        C49319 +
                    ((C1006 * C237 + C1000 * C248 + C1007 * C236 +
                      C1001 * C247 + C1008 * C235 + C49271 * C246) *
                         C118 +
                     (C1006 * C243 + C1000 * C255 + C1007 * C242 +
                      C1001 * C254 + C1008 * C241 + C49271 * C253) *
                         C49007) *
                        C49307 +
                    ((C1006 * C517 + C1000 * C522 + C1007 * C518 +
                      C1001 * C523 + C1008 * C519 + C49271 * C524) *
                         C118 +
                     (C1006 * C527 + C1000 * C532 + C1007 * C528 +
                      C1001 * C533 + C1008 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C1008 * C530 + C49271 * C535 + C1007 * C529 +
                      C1001 * C534 + C1006 * C528 + C1000 * C533) *
                         C49007 +
                     (C1008 * C520 + C49271 * C525 + C1007 * C519 +
                      C1001 * C524 + C1006 * C518 + C1000 * C523) *
                         C118) *
                        C49284 +
                    ((C1008 * C240 + C49271 * C252 + C1007 * C241 +
                      C1001 * C253 + C1006 * C242 + C1000 * C254) *
                         C49007 +
                     (C1008 * C234 + C49271 * C245 + C1007 * C235 +
                      C1001 * C246 + C1006 * C236 + C1000 * C247) *
                         C118) *
                        C49307 +
                    ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                      C1001 * C142 + C1006 * C132 + C1000 * C141) *
                         C49007 +
                     (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                      C1001 * C128 + C1006 * C120 + C1000 * C127) *
                         C118) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   (((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                      C1001 * C129 + C1008 * C123 + C49271 * C130) *
                         C118 +
                     (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                      C1001 * C143 + C1008 * C135 + C49271 * C144) *
                         C49007) *
                        C49319 +
                    ((C1006 * C235 + C1000 * C246 + C1007 * C234 +
                      C1001 * C245 + C1008 * C233 + C49271 * C244) *
                         C118 +
                     (C1006 * C241 + C1000 * C253 + C1007 * C240 +
                      C1001 * C252 + C1008 * C239 + C49271 * C251) *
                         C49007) *
                        C49307 +
                    ((C1006 * C519 + C1000 * C524 + C1007 * C520 +
                      C1001 * C525 + C1008 * C521 + C49271 * C526) *
                         C118 +
                     (C1006 * C529 + C1000 * C534 + C1007 * C530 +
                      C1001 * C535 + C1008 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C49007) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C49007 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C49007) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C118 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C49007) *
                        C7757 +
                    ((C7760 * C237 + C49316 * C248 + C7761 * C236 +
                      C49303 * C247 + C7762 * C235 + C49271 * C246) *
                         C118 +
                     (C7760 * C243 + C49316 * C255 + C7761 * C242 +
                      C49303 * C254 + C7762 * C241 + C49271 * C253) *
                         C49007) *
                        C7758 +
                    ((C7760 * C517 + C49316 * C522 + C7761 * C518 +
                      C49303 * C523 + C7762 * C519 + C49271 * C524) *
                         C118 +
                     (C7760 * C527 + C49316 * C532 + C7761 * C528 +
                      C49303 * C533 + C7762 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C7762 * C530 + C49271 * C535 + C7761 * C529 +
                      C49303 * C534 + C7760 * C528 + C49316 * C533) *
                         C49007 +
                     (C7762 * C520 + C49271 * C525 + C7761 * C519 +
                      C49303 * C524 + C7760 * C518 + C49316 * C523) *
                         C118) *
                        C49284 +
                    ((C7762 * C240 + C49271 * C252 + C7761 * C241 +
                      C49303 * C253 + C7760 * C242 + C49316 * C254) *
                         C49007 +
                     (C7762 * C234 + C49271 * C245 + C7761 * C235 +
                      C49303 * C246 + C7760 * C236 + C49316 * C247) *
                         C118) *
                        C7758 +
                    ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C49007 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C118) *
                        C7757) *
                       C48978 * C48961 * C111 +
                   (((C7760 * C121 + C49316 * C128 + C7761 * C122 +
                      C49303 * C129 + C7762 * C123 + C49271 * C130) *
                         C118 +
                     (C7760 * C133 + C49316 * C142 + C7761 * C134 +
                      C49303 * C143 + C7762 * C135 + C49271 * C144) *
                         C49007) *
                        C7757 +
                    ((C7760 * C235 + C49316 * C246 + C7761 * C234 +
                      C49303 * C245 + C7762 * C233 + C49271 * C244) *
                         C118 +
                     (C7760 * C241 + C49316 * C253 + C7761 * C240 +
                      C49303 * C252 + C7762 * C239 + C49271 * C251) *
                         C49007) *
                        C7758 +
                    ((C7760 * C519 + C49316 * C524 + C7761 * C520 +
                      C49303 * C525 + C7762 * C521 + C49271 * C526) *
                         C118 +
                     (C7760 * C529 + C49316 * C534 + C7761 * C530 +
                      C49303 * C535 + C7762 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48890 * C126) * C118 +
                     (C9060 * C131 + C48890 * C140) * C49007) *
                        C9055 +
                    ((C9060 * C237 + C48890 * C248) * C118 +
                     (C9060 * C243 + C48890 * C255) * C49007) *
                        C9056 +
                    ((C9060 * C517 + C48890 * C522) * C118 +
                     (C9060 * C527 + C48890 * C532) * C49007) *
                        C9057 +
                    ((C9060 * C1157 + C48890 * C1164) * C118 +
                     (C9060 * C1161 + C48890 * C1169) * C49007) *
                        C9058 +
                    ((C9060 * C1661 + C48890 * C1664) * C118 +
                     (C9060 * C1667 + C48890 * C1670) * C49007) *
                        C9059) *
                       C48978 * C48961 * C110 -
                   (((C9060 * C1668 + C48890 * C1671) * C49007 +
                     (C9060 * C1662 + C48890 * C1665) * C118) *
                        C9059 +
                    ((C9060 * C1160 + C48890 * C1168) * C49007 +
                     (C9060 * C1156 + C48890 * C1163) * C118) *
                        C9058 +
                    ((C9060 * C528 + C48890 * C533) * C49007 +
                     (C9060 * C518 + C48890 * C523) * C118) *
                        C9057 +
                    ((C9060 * C242 + C48890 * C254) * C49007 +
                     (C9060 * C236 + C48890 * C247) * C118) *
                        C9056 +
                    ((C9060 * C132 + C48890 * C141) * C49007 +
                     (C9060 * C120 + C48890 * C127) * C118) *
                        C9055) *
                       C48978 * C48961 * C111 +
                   (((C9060 * C121 + C48890 * C128) * C118 +
                     (C9060 * C133 + C48890 * C142) * C49007) *
                        C9055 +
                    ((C9060 * C235 + C48890 * C246) * C118 +
                     (C9060 * C241 + C48890 * C253) * C49007) *
                        C9056 +
                    ((C9060 * C519 + C48890 * C524) * C118 +
                     (C9060 * C529 + C48890 * C534) * C49007) *
                        C9057 +
                    ((C9060 * C1155 + C48890 * C1162) * C118 +
                     (C9060 * C1159 + C48890 * C1167) * C49007) *
                        C9058 +
                    ((C9060 * C1663 + C48890 * C1666) * C118 +
                     (C9060 * C1669 + C48890 * C1672) * C49007) *
                        C9059) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                     C49303 * C127 + C7762 * C121 + C49271 * C128) *
                        C15329 +
                    (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                     C49303 * C141 + C7762 * C133 + C49271 * C142) *
                        C15326 +
                    (C7760 * C345 + C49316 * C356 + C7761 * C344 +
                     C49303 * C355 + C7762 * C343 + C49271 * C354) *
                        C15330 +
                    (C7760 * C351 + C49316 * C363 + C7761 * C350 +
                     C49303 * C362 + C7762 * C349 + C49271 * C361) *
                        C15327 +
                    (C7760 * C870 + C49316 * C875 + C7761 * C871 +
                     C49303 * C876 + C7762 * C872 + C49271 * C877) *
                        C15331 +
                    (C7760 * C880 + C49316 * C885 + C7761 * C881 +
                     C49303 * C886 + C7762 * C882 + C49271 * C887) *
                        C49287) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C7762 * C883 + C49271 * C888 + C7761 * C882 +
                     C49303 * C887 + C7760 * C881 + C49316 * C886) *
                        C49287 +
                    (C7762 * C873 + C49271 * C878 + C7761 * C872 +
                     C49303 * C877 + C7760 * C871 + C49316 * C876) *
                        C15331 +
                    (C7762 * C348 + C49271 * C360 + C7761 * C349 +
                     C49303 * C361 + C7760 * C350 + C49316 * C362) *
                        C15327 +
                    (C7762 * C342 + C49271 * C353 + C7761 * C343 +
                     C49303 * C354 + C7760 * C344 + C49316 * C355) *
                        C15330 +
                    (C7762 * C134 + C49271 * C143 + C7761 * C133 +
                     C49303 * C142 + C7760 * C132 + C49316 * C141) *
                        C15326 +
                    (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                     C49303 * C128 + C7760 * C120 + C49316 * C127) *
                        C15329) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C7760 * C121 + C49316 * C128 + C7761 * C122 +
                     C49303 * C129 + C7762 * C123 + C49271 * C130) *
                        C15329 +
                    (C7760 * C133 + C49316 * C142 + C7761 * C134 +
                     C49303 * C143 + C7762 * C135 + C49271 * C144) *
                        C15326 +
                    (C7760 * C343 + C49316 * C354 + C7761 * C342 +
                     C49303 * C353 + C7762 * C341 + C49271 * C352) *
                        C15330 +
                    (C7760 * C349 + C49316 * C361 + C7761 * C348 +
                     C49303 * C360 + C7762 * C347 + C49271 * C359) *
                        C15327 +
                    (C7760 * C872 + C49316 * C877 + C7761 * C873 +
                     C49303 * C878 + C7762 * C874 + C49271 * C879) *
                        C15331 +
                    (C7760 * C882 + C49316 * C887 + C7761 * C883 +
                     C49303 * C888 + C7762 * C884 + C49271 * C889) *
                        C49287) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48890 * C126) * C15329 +
                     (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
                     C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                        C49319 +
                    (C9184 * C15329 + C9185 * C15326 + C9574 * C15330 +
                     C9573 * C15327 + C10113 * C15331 + C10114 * C49287) *
                        C49307 +
                    (C9186 * C15329 + C9187 * C15326 + C9572 * C15330 +
                     C9571 * C15327 + C10115 * C15331 + C10116 * C49287) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   ((C10124 * C49287 + C10123 * C15331 + C10122 * C15327 +
                     C10121 * C15330 + C9195 * C15326 + C9194 * C15329) *
                        C49284 +
                    (C10120 * C49287 + C10119 * C15331 + C10118 * C15327 +
                     C10117 * C15330 + C9193 * C15326 + C9192 * C15329) *
                        C49307 +
                    (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
                     C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
                     (C9060 * C120 + C48890 * C127) * C15329) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   (((C9060 * C121 + C48890 * C128) * C15329 +
                     (C9060 * C133 + C48890 * C142) * C15326 +
                     (C9060 * C343 + C48890 * C354) * C15330 +
                     (C9060 * C349 + C48890 * C361) * C15327 +
                     (C9060 * C872 + C48890 * C877) * C15331 +
                     (C9060 * C882 + C48890 * C887) * C49287) *
                        C49319 +
                    ((C9060 * C235 + C48890 * C246) * C15329 +
                     (C9060 * C241 + C48890 * C253) * C15326 +
                     (C9060 * C621 + C48890 * C626) * C15330 +
                     (C9060 * C631 + C48890 * C636) * C15327 +
                     (C9060 * C2296 + C48890 * C2302) * C15331 +
                     (C9060 * C2305 + C48890 * C2314) * C49287) *
                        C49307 +
                    ((C9060 * C519 + C48890 * C524) * C15329 +
                     (C9060 * C529 + C48890 * C534) * C15326 +
                     (C9060 * C1389 + C48890 * C1396) * C15330 +
                     (C9060 * C1393 + C48890 * C1401) * C15327 +
                     (C9060 * C2299 + C48890 * C2308) * C15331 +
                     (C9060 * C2311 + C48890 * C2317) * C49287) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C48978 * C229 -
           (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 + C1001 * C1168 +
              C1006 * C1161 + C1000 * C1169) *
                 C49007 +
             (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 + C1001 * C1163 +
              C1006 * C1157 + C1000 * C1164) *
                 C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C48978 * C49279) *
              C231 +
          ((((C1232 + C1233 + C1234) * C118 +
             (C1235 + C1236 + C1237) * C49007) *
                C49319 +
            ((C1238 + C1239 + C1240) * C118 +
             (C1241 + C1242 + C1243) * C49007) *
                C49307 +
            ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 + C1001 * C1162 +
              C1008 * C1158 + C49271 * C1165) *
                 C118 +
             (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 + C1001 * C1167 +
              C1008 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C48978 * C229 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C49007) *
               C48996 * C48978 * C49279 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C229 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C231 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C229 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C231 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C7760 * C345 + C49316 * C356 + C7761 * C344 + C49303 * C355 +
             C7762 * C343 + C49271 * C354) *
                C15330 +
            (C7760 * C351 + C49316 * C363 + C7761 * C350 + C49303 * C362 +
             C7762 * C349 + C49271 * C361) *
                C15327 +
            (C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C15331 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49287) *
               C48996 * C48978 * C229 -
           ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
             C7760 * C2303 + C49316 * C2312) *
                C49287 +
            (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
             C7760 * C2294 + C49316 * C2300) *
                C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C7970 + C7971 + C7972) * C15329 +
            (C7973 + C7974 + C7975) * C15326 +
            (C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
             C7762 * C622 + C49271 * C627) *
                C15330 +
            (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
             C7762 * C632 + C49271 * C637) *
                C15327 +
            (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 + C49303 * C2302 +
             C7762 * C2580 + C49271 * C2581) *
                C15331 +
            (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 + C49303 * C2314 +
             C7762 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C7762 * C883 + C49271 * C888 + C7761 * C882 + C49303 * C887 +
             C7760 * C881 + C49316 * C886) *
                C49287 +
            (C7762 * C873 + C49271 * C878 + C7761 * C872 + C49303 * C877 +
             C7760 * C871 + C49316 * C876) *
                C15331 +
            (C7762 * C348 + C49271 * C360 + C7761 * C349 + C49303 * C361 +
             C7760 * C350 + C49316 * C362) *
                C15327 +
            (C7762 * C342 + C49271 * C353 + C7761 * C343 + C49303 * C354 +
             C7760 * C344 + C49316 * C355) *
                C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C48978 * C229 -
           ((C10581 * C49287 + C10582 * C15331 + C9569 * C15327 +
             C9570 * C15330 + C9189 * C15326 + C9188 * C15329) *
                C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C48978 * C49279) *
              C231 +
          (((C16809 + C16810 + C16811 + C16812 + C16813 + C16814) * C49319 +
            (C16815 + C16816 + C16817 + C16818 + C16819 + C16820) * C49307 +
            (C9196 * C15329 + C9197 * C15326 + C14345 * C15330 +
             C14346 * C15327 + (C9060 * C10072 + C48890 * C10073) * C15331 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C339 -
           (((C1008 * C1393 + C49271 * C1401 + C1007 * C1394 + C1001 * C1402 +
              C1006 * C1395 + C1000 * C1403) *
                 C49007 +
             (C1008 * C1389 + C49271 * C1396 + C1007 * C1390 + C1001 * C1397 +
              C1006 * C1391 + C1000 * C1398) *
                 C118) *
                C49284 +
            ((C1008 * C631 + C49271 * C636 + C1007 * C630 + C1001 * C635 +
              C1006 * C629 + C1000 * C634) *
                 C49007 +
             (C1008 * C621 + C49271 * C626 + C1007 * C620 + C1001 * C625 +
              C1006 * C619 + C1000 * C624) *
                 C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C48961 * C231 +
          ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
              C1008 * C342 + C49271 * C353) *
                 C118 +
             (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
              C1008 * C348 + C49271 * C360) *
                 C49007) *
                C49319 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49271 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49271 * C637) *
                 C49007) *
                C49307 +
            ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C118 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C339 -
           (((C7762 * C1393 + C49271 * C1401 + C7761 * C1394 + C49303 * C1402 +
              C7760 * C1395 + C49316 * C1403) *
                 C49007 +
             (C7762 * C1389 + C49271 * C1396 + C7761 * C1390 + C49303 * C1397 +
              C7760 * C1391 + C49316 * C1398) *
                 C118) *
                C49284 +
            ((C7762 * C631 + C49271 * C636 + C7761 * C630 + C49303 * C635 +
              C7760 * C629 + C49316 * C634) *
                 C49007 +
             (C7762 * C621 + C49271 * C626 + C7761 * C620 + C49303 * C625 +
              C7760 * C619 + C49316 * C624) *
                 C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C231 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C339 -
           (((C9060 * C9299 + C48890 * C9303) * C49007 +
             (C9060 * C9297 + C48890 * C9300) * C118) *
                C9059 +
            ((C9060 * C1850 + C48890 * C1853) * C49007 +
             (C9060 * C1844 + C48890 * C1847) * C118) *
                C9058 +
            ((C9060 * C1395 + C48890 * C1403) * C49007 +
             (C9060 * C1391 + C48890 * C1398) * C118) *
                C9057 +
            ((C9060 * C629 + C48890 * C634) * C49007 +
             (C9060 * C619 + C48890 * C624) * C118) *
                C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C231 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C339 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C15685 + C15686 + C15687) * C15329 +
            (C15688 + C15689 + C15690) * C15326 +
            (C15691 + C15692 + C15693) * C15330 +
            (C15694 + C15695 + C15696) * C15327 +
            (C7760 * C2731 + C49316 * C2738 + C7761 * C2730 + C49303 * C2737 +
             C7762 * C2733 + C49271 * C2740) *
                C15331 +
            (C7760 * C2735 + C49316 * C2743 + C7761 * C2734 + C49303 * C2742 +
             C7762 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C339 -
           ((C10754 * C49287 + C10755 * C15331 + C10116 * C15327 +
             C10115 * C15330 + C9571 * C15326 + C9572 * C15329) *
                C49284 +
            (C10756 * C49287 + C10757 * C15331 + C10114 * C15327 +
             C10113 * C15330 + C9573 * C15326 + C9574 * C15329) *
                C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C48961 * C231 +
          (((C10311 * C15329 + C10312 * C15326 + C10313 * C15330 +
             C10314 * C15327 + (C9060 * C2731 + C48890 * C2738) * C15331 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C49319 +
            (C10117 * C15329 + C10118 * C15326 + C10119 * C15330 +
             C10120 * C15327 + (C9060 * C3221 + C48890 * C3224) * C15331 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C49307 +
            (C10121 * C15329 + C10122 * C15326 + C10123 * C15330 +
             C10124 * C15327 + (C9060 * C10283 + C48890 * C10286) * C15331 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C48978 * C447 -
           (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 + C1001 * C1168 +
              C1006 * C1161 + C1000 * C1169) *
                 C49007 +
             (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 + C1001 * C1163 +
              C1006 * C1157 + C1000 * C1164) *
                 C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C48978 * C49279) *
              C449 +
          ((((C1232 + C1233 + C1234) * C118 +
             (C1235 + C1236 + C1237) * C49007) *
                C49319 +
            ((C1238 + C1239 + C1240) * C118 +
             (C1241 + C1242 + C1243) * C49007) *
                C49307 +
            ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 + C1001 * C1162 +
              C1008 * C1158 + C49271 * C1165) *
                 C118 +
             (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 + C1001 * C1167 +
              C1008 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C48978 * C447 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C49007) *
               C48996 * C48978 * C49279 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C447 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C449 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C447 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C449 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C48978 * C447 -
           ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
             C7760 * C2303 + C49316 * C2312) *
                C49287 +
            (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
             C7760 * C2294 + C49316 * C2300) *
                C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C7970 + C7971 + C7972) * C15329 +
            (C7973 + C7974 + C7975) * C15326 +
            (C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
             C7762 * C622 + C49271 * C627) *
                C15330 +
            (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
             C7762 * C632 + C49271 * C637) *
                C15327 +
            (C7760 * C2295 + C49316 * C2301 + C7761 * C2296 + C49303 * C2302 +
             C7762 * C2580 + C49271 * C2581) *
                C15331 +
            (C7760 * C2304 + C49316 * C2313 + C7761 * C2305 + C49303 * C2314 +
             C7762 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            (C16803 + C16804 + C16805 + C16806 + C16807 + C16808) * C49284) *
               C48978 * C447 -
           ((C10581 * C49287 + C10582 * C15331 + C9569 * C15327 +
             C9570 * C15330 + C9189 * C15326 + C9188 * C15329) *
                C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C48978 * C49279) *
              C449 +
          (((C16809 + C16810 + C16811 + C16812 + C16813 + C16814) * C49319 +
            (C16815 + C16816 + C16817 + C16818 + C16819 + C16820) * C49307 +
            (C9196 * C15329 + C9197 * C15326 + C14345 * C15330 +
             C14346 * C15327 + (C9060 * C10072 + C48890 * C10073) * C15331 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C48978 * C513 -
          (((C1690 + C1691 + C1692) * C49007 + (C1693 + C1694 + C1695) * C118) *
               C49284 +
           ((C1231 + C1230 + C1229) * C49007 + (C1228 + C1227 + C1226) * C118) *
               C49307 +
           ((C1225 + C1224 + C1223) * C49007 + (C1222 + C1221 + C1220) * C118) *
               C49319) *
              C48978 * C514 +
          (C1698 * C49319 +
           ((C1695 + C1694 + C1693) * C118 + (C1692 + C1691 + C1690) * C49007) *
               C49307 +
           ((C1006 * C1661 + C1000 * C1664 + C1007 * C1662 + C1001 * C1665 +
             C1008 * C1663 + C49271 * C1666) *
                C118 +
            (C1006 * C1667 + C1000 * C1670 + C1007 * C1668 + C1001 * C1671 +
             C1008 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C48978 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C49007 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48996 * C48978 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C49007) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C48978 * C513 -
          (((C8400 + C8401 + C8402) * C49007 + (C8403 + C8404 + C8405) * C118) *
               C49284 +
           ((C7969 + C7968 + C7967) * C49007 + (C7966 + C7965 + C7964) * C118) *
               C7758 +
           ((C7963 + C7962 + C7961) * C49007 + (C7960 + C7959 + C7958) * C118) *
               C7757) *
              C48978 * C514 +
          (C8408 * C7757 +
           ((C8405 + C8404 + C8403) * C118 + (C8402 + C8401 + C8400) * C49007) *
               C7758 +
           ((C7760 * C1661 + C49316 * C1664 + C7761 * C1662 + C49303 * C1665 +
             C7762 * C1663 + C49271 * C1666) *
                C118 +
            (C7760 * C1667 + C49316 * C1670 + C7761 * C1668 + C49303 * C1671 +
             C7762 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C48978 * C513 -
          ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
           (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
           (C9201 + C9200) * C9055) *
              C48978 * C514 +
          (C9454 * C9055 + C9455 * C9056 + C9456 * C9057 +
           (C9464 + C9463) * C9058 +
           ((C9060 * C9449 + C48890 * C9450) * C118 +
            (C9060 * C9451 + C48890 * C9452) * C49007) *
               C9059) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
            C7762 * C121 + C49271 * C128) *
               C15329 +
           (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
            C7762 * C133 + C49271 * C142) *
               C15326 +
           (C15673 + C15674 + C15675) * C15330 +
           (C15676 + C15677 + C15678) * C15327 +
           (C15679 + C15680 + C15681) * C15331 +
           (C15682 + C15683 + C15684) * C49287) *
              C48996 * C48978 * C513 -
          ((C7762 * C2305 + C49271 * C2314 + C7761 * C2304 + C49303 * C2313 +
            C7760 * C2303 + C49316 * C2312) *
               C49287 +
           (C7762 * C2296 + C49271 * C2302 + C7761 * C2295 + C49303 * C2301 +
            C7760 * C2294 + C49316 * C2300) *
               C15331 +
           (C8585 + C8586 + C8587) * C15327 + (C8588 + C8589 + C8590) * C15330 +
           (C7963 + C7962 + C7961) * C15326 +
           (C7960 + C7959 + C7958) * C15329) *
              C48996 * C48978 * C514 +
          (C8398 * C15329 + C8399 * C15326 + (C8584 + C8583 + C8582) * C15330 +
           (C8581 + C8580 + C8579) * C15327 +
           (C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
            C7762 * C2299 + C49271 * C2308) *
               C15331 +
           (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
            C7762 * C2311 + C49271 * C2317) *
               C49287) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C15329 +
            (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
            C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
               C49319 +
           (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
           C17233 * C49284) *
              C48978 * C513 -
          ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
           (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
           (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
              C48978 * C514 +
          (C17233 * C49319 +
           (C17229 + C17228 + C17227 + C17226 + C17225 + C17224) * C49307 +
           (C9190 * C15329 + C9191 * C15326 + C9568 * C15330 + C9567 * C15327 +
            (C9060 * C9809 + C48890 * C9812) * C15331 +
            (C9060 * C9813 + C48890 * C9815) * C49287) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C339 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C447 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C49007) *
                C49319 +
            ((C1886 + C1885 + C1884) * C118 +
             (C1883 + C1882 + C1881) * C49007) *
                C49307 +
            ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
              C1008 * C1846 + C49271 * C1849) *
                 C118 +
             (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
              C1008 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1690 + C1691 + C1692) * C49007 +
             (C1693 + C1694 + C1695) * C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C447 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C339 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C447 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C339 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C447 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C339 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C447 +
          (((C8590 + C8589 + C8588) * C15329 +
            (C8587 + C8586 + C8585) * C15326 +
            (C16111 + C16112 + C16113) * C15330 +
            (C16114 + C16115 + C16116) * C15327 +
            (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 + C49303 * C3224 +
             C7762 * C3222 + C49271 * C3225) *
                C15331 +
            (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 + C49303 * C3230 +
             C7762 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C16116 + C16115 + C16114) * C49287 +
            (C16113 + C16112 + C16111) * C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C339 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C447 +
          (((C17391 + C17390 + C17389 + C17388 + C17387 + C17386) * C49319 +
            (C17385 + C17384 + C17383 + C17382 + C17381 + C17380) * C49307 +
            (C9570 * C15329 + C9569 * C15326 + C10582 * C15330 +
             C10581 * C15327 + (C9060 * C10733 + C48890 * C10734) * C15331 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C721 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C48961 * C449 +
          ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
              C1008 * C342 + C49271 * C353) *
                 C118 +
             (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
              C1008 * C348 + C49271 * C360) *
                 C49007) *
                C49319 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49271 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49271 * C637) *
                 C49007) *
                C49307 +
            ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C118 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C449 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C449 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C721 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C15685 + C15686 + C15687) * C15329 +
            (C15688 + C15689 + C15690) * C15326 +
            (C15691 + C15692 + C15693) * C15330 +
            (C15694 + C15695 + C15696) * C15327 +
            (C7760 * C2731 + C49316 * C2738 + C7761 * C2730 + C49303 * C2737 +
             C7762 * C2733 + C49271 * C2740) *
                C15331 +
            (C7760 * C2735 + C49316 * C2743 + C7761 * C2734 + C49303 * C2742 +
             C7762 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C15696 + C15695 + C15694) * C49287 +
            (C15693 + C15692 + C15691) * C15331 +
            (C15690 + C15689 + C15688) * C15327 +
            (C15687 + C15686 + C15685) * C15330 +
            (C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
             C7760 * C132 + C49316 * C141) *
                C15326 +
            (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
             C7760 * C120 + C49316 * C127) *
                C15329) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C721 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C15329 + C10312 * C15326 + C10313 * C15330 +
             C10314 * C15327 + (C9060 * C2731 + C48890 * C2738) * C15331 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C49319 +
            (C10117 * C15329 + C10118 * C15326 + C10119 * C15330 +
             C10120 * C15327 + (C9060 * C3221 + C48890 * C3224) * C15331 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C49307 +
            (C10121 * C15329 + C10122 * C15326 + C10123 * C15330 +
             C10124 * C15327 + (C9060 * C10283 + C48890 * C10286) * C15331 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C16820 + C16819 + C16818 + C16817 + C16816 + C16815) * C49284 +
            (C16814 + C16813 + C16812 + C16811 + C16810 + C16809) * C49307 +
            (C10314 * C49287 + C10313 * C15331 + C10312 * C15327 +
             C10311 * C15330 + (C9060 * C132 + C48890 * C141) * C15326 +
             (C9060 * C120 + C48890 * C127) * C15329) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C721 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C229 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C49007) *
                C49319 +
            ((C1886 + C1885 + C1884) * C118 +
             (C1883 + C1882 + C1881) * C49007) *
                C49307 +
            ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
              C1008 * C1846 + C49271 * C1849) *
                 C118 +
             (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
              C1008 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1690 + C1691 + C1692) * C49007 +
             (C1693 + C1694 + C1695) * C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C229 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C229 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C229 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C15329 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C15326 +
            (C15673 + C15674 + C15675) * C15330 +
            (C15676 + C15677 + C15678) * C15327 +
            (C15679 + C15680 + C15681) * C15331 +
            (C15682 + C15683 + C15684) * C49287) *
               C48996 * C721 -
           ((C7762 * C2734 + C49271 * C2742 + C7761 * C2735 + C49303 * C2743 +
             C7760 * C2736 + C49316 * C2744) *
                C49287 +
            (C7762 * C2730 + C49271 * C2737 + C7761 * C2731 + C49303 * C2738 +
             C7760 * C2732 + C49316 * C2739) *
                C15331 +
            (C15684 + C15683 + C15682) * C15327 +
            (C15681 + C15680 + C15679) * C15330 +
            (C15678 + C15677 + C15676) * C15326 +
            (C15675 + C15674 + C15673) * C15329) *
               C48996 * C49281) *
              C229 +
          (((C8590 + C8589 + C8588) * C15329 +
            (C8587 + C8586 + C8585) * C15326 +
            (C16111 + C16112 + C16113) * C15330 +
            (C16114 + C16115 + C16116) * C15327 +
            (C7760 * C3220 + C49316 * C3223 + C7761 * C3221 + C49303 * C3224 +
             C7762 * C3222 + C49271 * C3225) *
                C15331 +
            (C7760 * C3226 + C49316 * C3229 + C7761 * C3227 + C49303 * C3230 +
             C7762 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C16116 + C16115 + C16114) * C49287 +
            (C16113 + C16112 + C16111) * C15331 +
            (C8585 + C8586 + C8587) * C15327 +
            (C8588 + C8589 + C8590) * C15330 +
            (C7963 + C7962 + C7961) * C15326 +
            (C7960 + C7959 + C7958) * C15329) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C15329 +
             (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
             C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
                C49319 +
            (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
            C17233 * C49284) *
               C721 -
           ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
            (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
            (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
             C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
                C49319) *
               C49281) *
              C229 +
          (((C17391 + C17390 + C17389 + C17388 + C17387 + C17386) * C49319 +
            (C17385 + C17384 + C17383 + C17382 + C17381 + C17380) * C49307 +
            (C9570 * C15329 + C9569 * C15326 + C10582 * C15330 +
             C10581 * C15327 + (C9060 * C10733 + C48890 * C10734) * C15331 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C17224 + C17225 + C17226 + C17227 + C17228 + C17229) * C49284 +
            (C16808 + C16807 + C16806 + C16805 + C16804 + C16803) * C49307 +
            (C16802 + C16801 + C16800 + C16799 + C16798 + C16797) * C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C867 -
          (((C1881 + C1882 + C1883) * C49007 + (C1884 + C1885 + C1886) * C118) *
               C49284 +
           ((C1887 + C1888 + C1889) * C49007 + (C1890 + C1891 + C1892) * C118) *
               C49307 +
           ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49007 +
            (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C118) *
               C49319) *
              C868 +
          (((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
             C1008 * C872 + C49271 * C877) *
                C118 +
            (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
             C1008 * C882 + C49271 * C887) *
                C49007) *
               C49319 +
           ((C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
             C1008 * C2296 + C49271 * C2302) *
                C118 +
            (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
             C1008 * C2305 + C49271 * C2314) *
                C49007) *
               C49307 +
           ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
             C1008 * C2299 + C49271 * C2308) *
                C118 +
            (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
             C1008 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C49007 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48996 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C49007) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C867 -
          (((C8579 + C8580 + C8581) * C49007 + (C8582 + C8583 + C8584) * C118) *
               C49284 +
           ((C8585 + C8586 + C8587) * C49007 + (C8588 + C8589 + C8590) * C118) *
               C7758 +
           ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
             C7760 * C351 + C49316 * C363) *
                C49007 +
            (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
             C7760 * C345 + C49316 * C356) *
                C118) *
               C7757) *
              C868 +
          (((C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C118 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49007) *
               C7757 +
           ((C7760 * C2294 + C49316 * C2300 + C7761 * C2295 + C49303 * C2301 +
             C7762 * C2296 + C49271 * C2302) *
                C118 +
            (C7760 * C2303 + C49316 * C2312 + C7761 * C2304 + C49303 * C2313 +
             C7762 * C2305 + C49271 * C2314) *
                C49007) *
               C7758 +
           ((C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
             C7762 * C2299 + C49271 * C2308) *
                C118 +
            (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
             C7762 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C867 -
          ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
           (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
           ((C9060 * C351 + C48890 * C363) * C49007 +
            (C9060 * C345 + C48890 * C356) * C118) *
               C9055) *
              C868 +
          (((C9060 * C870 + C48890 * C875) * C118 +
            (C9060 * C880 + C48890 * C885) * C49007) *
               C9055 +
           ((C9060 * C2294 + C48890 * C2300) * C118 +
            (C9060 * C2303 + C48890 * C2312) * C49007) *
               C9056 +
           ((C9060 * C2297 + C48890 * C2306) * C118 +
            (C9060 * C2309 + C48890 * C2315) * C49007) *
               C9057 +
           ((C9060 * C9808 + C48890 * C9810) * C118 +
            (C9060 * C9811 + C48890 * C9814) * C49007) *
               C9058 +
           ((C9060 * C9809 + C48890 * C9812) * C118 +
            (C9060 * C9813 + C48890 * C9815) * C49007) *
               C9059) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
            C7762 * C121 + C49271 * C128) *
               C15329 +
           (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
            C7762 * C133 + C49271 * C142) *
               C15326 +
           (C15673 + C15674 + C15675) * C15330 +
           (C15676 + C15677 + C15678) * C15327 + C16533 * C15331 +
           C16534 * C49287) *
              C48996 * C867 -
          ((C16535 + C16536 + C16537) * C49287 +
           (C16538 + C16539 + C16540) * C15331 +
           (C15684 + C15683 + C15682) * C15327 +
           (C15681 + C15680 + C15679) * C15330 +
           (C15678 + C15677 + C15676) * C15326 +
           (C15675 + C15674 + C15673) * C15329) *
              C48996 * C868 +
          (C16533 * C15329 + C16534 * C15326 +
           (C16540 + C16539 + C16538) * C15330 +
           (C16537 + C16536 + C16535) * C15327 +
           (C7760 * C3652 + C49316 * C3655 + C7761 * C3653 + C49303 * C3656 +
            C7762 * C3654 + C49271 * C3657) *
               C15331 +
           (C7760 * C3658 + C49316 * C3661 + C7761 * C3659 + C49303 * C3662 +
            C7762 * C3660 + C49271 * C3663) *
               C49287) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C15329 +
            (C9060 * C131 + C48890 * C140) * C15326 + C10307 * C15330 +
            C10308 * C15327 + C10309 * C15331 + C10310 * C49287) *
               C49319 +
           (C16797 + C16798 + C16799 + C16800 + C16801 + C16802) * C49307 +
           C17233 * C49284) *
              C867 -
          ((C17380 + C17381 + C17382 + C17383 + C17384 + C17385) * C49284 +
           (C17386 + C17387 + C17388 + C17389 + C17390 + C17391) * C49307 +
           (C11176 * C49287 + C11177 * C15331 + C10310 * C15327 +
            C10309 * C15330 + C10308 * C15326 + C10307 * C15329) *
               C49319) *
              C868 +
          ((C10309 * C15329 + C10310 * C15326 + C11177 * C15330 +
            C11176 * C15327 + (C9060 * C3652 + C48890 * C3655) * C15331 +
            (C9060 * C3658 + C48890 * C3661) * C49287) *
               C49319 +
           (C10113 * C15329 + C10114 * C15326 + C10757 * C15330 +
            C10756 * C15327 + (C9060 * C11163 + C48890 * C11165) * C15331 +
            (C9060 * C11166 + C48890 * C11169) * C49287) *
               C49307 +
           (C10115 * C15329 + C10116 * C15326 + C10755 * C15330 +
            C10754 * C15327 + (C9060 * C11164 + C48890 * C11167) * C15331 +
            (C9060 * C11168 + C48890 * C11170) * C49287) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[135] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C31304 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C31302 +
                     (C28456 + C28457 + C28458) * C31305 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C49251 +
                    ((C26845 + C26846 + C26847) * C31304 +
                     (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                     C29019 * C49094) *
                        C49054) *
                       C48978 * C48961 * C110 -
                   (((C28237 + C28236 + C28235) * C49094 +
                     (C28234 + C28233 + C28232) * C31305 +
                     (C26862 + C26861 + C26860) * C31302 +
                     (C26859 + C26858 + C26857) * C31304) *
                        C49054 +
                    ((C28467 + C28466 + C28465) * C49094 +
                     (C28464 + C28463 + C28462) * C31305 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C31302 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C31304) *
                        C49251) *
                       C48978 * C48961 * C111 +
                   (((C47917 * C121 + C48895 * C128 + C47913 * C122 +
                      C48903 * C129 + C47923 * C123 + C26643 * C130) *
                         C31304 +
                     (C47917 * C133 + C48895 * C142 + C47913 * C134 +
                      C48903 * C143 + C47923 * C135 + C26643 * C144) *
                         C31302 +
                     (C47917 * C343 + C48895 * C354 + C47913 * C342 +
                      C48903 * C353 + C47923 * C341 + C26643 * C352) *
                         C31305 +
                     (C47917 * C349 + C48895 * C361 + C47913 * C348 +
                      C48903 * C360 + C47923 * C347 + C26643 * C359) *
                         C49094) *
                        C49251 +
                    ((C47917 * C235 + C48895 * C246 + C47913 * C234 +
                      C48903 * C245 + C47923 * C233 + C26643 * C244) *
                         C31304 +
                     (C47917 * C241 + C48895 * C253 + C47913 * C240 +
                      C48903 * C252 + C47923 * C239 + C26643 * C251) *
                         C31302 +
                     (C47917 * C621 + C48895 * C626 + C47913 * C622 +
                      C48903 * C627 + C47923 * C623 + C26643 * C628) *
                         C31305 +
                     (C47917 * C631 + C48895 * C636 + C47913 * C632 +
                      C48903 * C637 + C47923 * C633 + C26643 * C638) *
                         C49094) *
                        C49054) *
                       C48978 * C48961 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[136] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C48978 * C229 -
                    (((C27466 + C27467 + C27468) * C49094 +
                      (C27469 + C27470 + C27471) * C31305 +
                      (C26856 + C26855 + C26854) * C31302 +
                      (C26853 + C26852 + C26851) * C31304) *
                         C49054 +
                     (C29026 * C49094 + C29027 * C31305 +
                      (C26850 + C26849 + C26848) * C31302 +
                      (C26847 + C26846 + C26845) * C31304) *
                         C49251) *
                        C48978 * C49279) *
                       C231 +
                   ((((C26857 + C26858 + C26859) * C31304 +
                      (C26860 + C26861 + C26862) * C31302 +
                      (C28232 + C28233 + C28234) * C31305 +
                      (C28235 + C28236 + C28237) * C49094) *
                         C49251 +
                     ((C26863 + C26864 + C26865) * C31304 +
                      (C26866 + C26867 + C26868) * C31302 +
                      (C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                       C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                          C31305 +
                      (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                       C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                          C49094) *
                         C49054) *
                        C48978 * C49279 -
                    (((C28237 + C28236 + C28235) * C49094 +
                      (C28234 + C28233 + C28232) * C31305 +
                      (C26862 + C26861 + C26860) * C31302 +
                      (C26859 + C26858 + C26857) * C31304) *
                         C49054 +
                     ((C28467 + C28466 + C28465) * C49094 +
                      (C28464 + C28463 + C28462) * C31305 +
                      (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                       C48903 * C142 + C47917 * C132 + C48895 * C141) *
                          C31302 +
                      (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                       C48903 * C128 + C47917 * C120 + C48895 * C127) *
                          C31304) *
                         C49251) *
                        C48978 * C229) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[137] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C339 -
                    (((C29020 + C29021 + C29022) * C49094 +
                      (C29023 + C29024 + C29025) * C31305 + C29026 * C31302 +
                      C29027 * C31304) *
                         C49054 +
                     ((C29574 + C29575 + C29576) * C49094 +
                      (C29577 + C29578 + C29579) * C31305 +
                      (C28461 + C28460 + C28459) * C31302 +
                      (C28458 + C28457 + C28456) * C31304) *
                         C49251) *
                        C49281) *
                       C48961 * C231 +
                   ((((C28462 + C28463 + C28464) * C31304 +
                      (C28465 + C28466 + C28467) * C31302 +
                      (C47917 * C871 + C48895 * C876 + C47913 * C872 +
                       C48903 * C877 + C47923 * C873 + C26643 * C878) *
                          C31305 +
                      (C47917 * C881 + C48895 * C886 + C47913 * C882 +
                       C48903 * C887 + C47923 * C883 + C26643 * C888) *
                          C49094) *
                         C49251 +
                     ((C28232 + C28233 + C28234) * C31304 +
                      (C28235 + C28236 + C28237) * C31302 +
                      (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                       C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                          C31305 +
                      (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                       C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C28237 + C28236 + C28235) * C49094 +
                      (C28234 + C28233 + C28232) * C31305 +
                      (C26862 + C26861 + C26860) * C31302 +
                      (C26859 + C26858 + C26857) * C31304) *
                         C49054 +
                     ((C28467 + C28466 + C28465) * C49094 +
                      (C28464 + C28463 + C28462) * C31305 +
                      (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                       C48903 * C142 + C47917 * C132 + C48895 * C141) *
                          C31302 +
                      (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                       C48903 * C128 + C47917 * C120 + C48895 * C127) *
                          C31304) *
                         C49251) *
                        C339) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[138] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C48978 * C447 -
                    (((C27466 + C27467 + C27468) * C49094 +
                      (C27469 + C27470 + C27471) * C31305 +
                      (C26856 + C26855 + C26854) * C31302 +
                      (C26853 + C26852 + C26851) * C31304) *
                         C49054 +
                     (C29026 * C49094 + C29027 * C31305 +
                      (C26850 + C26849 + C26848) * C31302 +
                      (C26847 + C26846 + C26845) * C31304) *
                         C49251) *
                        C48978 * C49279) *
                       C449 +
                   ((((C26857 + C26858 + C26859) * C31304 +
                      (C26860 + C26861 + C26862) * C31302 +
                      (C28232 + C28233 + C28234) * C31305 +
                      (C28235 + C28236 + C28237) * C49094) *
                         C49251 +
                     ((C26863 + C26864 + C26865) * C31304 +
                      (C26866 + C26867 + C26868) * C31302 +
                      (C47917 * C1390 + C48895 * C1397 + C47913 * C1389 +
                       C48903 * C1396 + C47923 * C1392 + C26643 * C1399) *
                          C31305 +
                      (C47917 * C1394 + C48895 * C1402 + C47913 * C1393 +
                       C48903 * C1401 + C47923 * C1400 + C26643 * C1404) *
                          C49094) *
                         C49054) *
                        C48978 * C49279 -
                    (((C28237 + C28236 + C28235) * C49094 +
                      (C28234 + C28233 + C28232) * C31305 +
                      (C26862 + C26861 + C26860) * C31302 +
                      (C26859 + C26858 + C26857) * C31304) *
                         C49054 +
                     ((C28467 + C28466 + C28465) * C49094 +
                      (C28464 + C28463 + C28462) * C31305 +
                      (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                       C48903 * C142 + C47917 * C132 + C48895 * C141) *
                          C31302 +
                      (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                       C48903 * C128 + C47917 * C120 + C48895 * C127) *
                          C31304) *
                         C49251) *
                        C48978 * C447) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C31304 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C31302 +
                     (C28456 + C28457 + C28458) * C31305 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C49251 +
                    ((C26845 + C26846 + C26847) * C31304 +
                     (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                     C29019 * C49094) *
                        C49054) *
                       C48978 * C513 -
                   (((C27466 + C27467 + C27468) * C49094 +
                     (C27469 + C27470 + C27471) * C31305 +
                     (C26856 + C26855 + C26854) * C31302 +
                     (C26853 + C26852 + C26851) * C31304) *
                        C49054 +
                    (C29026 * C49094 + C29027 * C31305 +
                     (C26850 + C26849 + C26848) * C31302 +
                     (C26847 + C26846 + C26845) * C31304) *
                        C49251) *
                       C48978 * C514 +
                   ((C27285 * C31304 + C27286 * C31302 +
                     (C27471 + C27470 + C27469) * C31305 +
                     (C27468 + C27467 + C27466) * C49094) *
                        C49251 +
                    ((C27292 + C27291 + C27290) * C31304 +
                     (C27289 + C27288 + C27287) * C31302 +
                     (C47917 * C1844 + C48895 * C1847 + C47913 * C1845 +
                      C48903 * C1848 + C47923 * C1846 + C26643 * C1849) *
                         C31305 +
                     (C47917 * C1850 + C48895 * C1853 + C47913 * C1851 +
                      C48903 * C1854 + C47923 * C1852 + C26643 * C1855) *
                         C49094) *
                        C49054) *
                       C48978 * C515) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C339 -
                    (((C29020 + C29021 + C29022) * C49094 +
                      (C29023 + C29024 + C29025) * C31305 + C29026 * C31302 +
                      C29027 * C31304) *
                         C49054 +
                     ((C29574 + C29575 + C29576) * C49094 +
                      (C29577 + C29578 + C29579) * C31305 +
                      (C28461 + C28460 + C28459) * C31302 +
                      (C28458 + C28457 + C28456) * C31304) *
                         C49251) *
                        C49281) *
                       C447 +
                   (((C29018 * C31304 + C29019 * C31302 +
                      (C29025 + C29024 + C29023) * C31305 +
                      (C29022 + C29021 + C29020) * C49094) *
                         C49251 +
                     ((C27471 + C27470 + C27469) * C31304 +
                      (C27468 + C27467 + C27466) * C31302 +
                      (C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                       C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                          C31305 +
                      (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                       C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C27466 + C27467 + C27468) * C49094 +
                      (C27469 + C27470 + C27471) * C31305 +
                      (C26856 + C26855 + C26854) * C31302 +
                      (C26853 + C26852 + C26851) * C31304) *
                         C49054 +
                     (C29026 * C49094 + C29027 * C31305 +
                      (C26850 + C26849 + C26848) * C31302 +
                      (C26847 + C26846 + C26845) * C31304) *
                         C49251) *
                        C339) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C721 -
                    (((C29020 + C29021 + C29022) * C49094 +
                      (C29023 + C29024 + C29025) * C31305 + C29026 * C31302 +
                      C29027 * C31304) *
                         C49054 +
                     ((C29574 + C29575 + C29576) * C49094 +
                      (C29577 + C29578 + C29579) * C31305 +
                      (C28461 + C28460 + C28459) * C31302 +
                      (C28458 + C28457 + C28456) * C31304) *
                         C49251) *
                        C49281) *
                       C48961 * C449 +
                   ((((C28462 + C28463 + C28464) * C31304 +
                      (C28465 + C28466 + C28467) * C31302 +
                      (C47917 * C871 + C48895 * C876 + C47913 * C872 +
                       C48903 * C877 + C47923 * C873 + C26643 * C878) *
                          C31305 +
                      (C47917 * C881 + C48895 * C886 + C47913 * C882 +
                       C48903 * C887 + C47923 * C883 + C26643 * C888) *
                          C49094) *
                         C49251 +
                     ((C28232 + C28233 + C28234) * C31304 +
                      (C28235 + C28236 + C28237) * C31302 +
                      (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                       C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                          C31305 +
                      (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                       C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C28237 + C28236 + C28235) * C49094 +
                      (C28234 + C28233 + C28232) * C31305 +
                      (C26862 + C26861 + C26860) * C31302 +
                      (C26859 + C26858 + C26857) * C31304) *
                         C49054 +
                     ((C28467 + C28466 + C28465) * C49094 +
                      (C28464 + C28463 + C28462) * C31305 +
                      (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                       C48903 * C142 + C47917 * C132 + C48895 * C141) *
                          C31302 +
                      (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                       C48903 * C128 + C47917 * C120 + C48895 * C127) *
                          C31304) *
                         C49251) *
                        C721) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                       C48903 * C127 + C47923 * C121 + C26643 * C128) *
                          C31304 +
                      (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                       C48903 * C141 + C47923 * C133 + C26643 * C142) *
                          C31302 +
                      (C28456 + C28457 + C28458) * C31305 +
                      (C28459 + C28460 + C28461) * C49094) *
                         C49251 +
                     ((C26845 + C26846 + C26847) * C31304 +
                      (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                      C29019 * C49094) *
                         C49054) *
                        C721 -
                    (((C29020 + C29021 + C29022) * C49094 +
                      (C29023 + C29024 + C29025) * C31305 + C29026 * C31302 +
                      C29027 * C31304) *
                         C49054 +
                     ((C29574 + C29575 + C29576) * C49094 +
                      (C29577 + C29578 + C29579) * C31305 +
                      (C28461 + C28460 + C28459) * C31302 +
                      (C28458 + C28457 + C28456) * C31304) *
                         C49251) *
                        C49281) *
                       C229 +
                   (((C29018 * C31304 + C29019 * C31302 +
                      (C29025 + C29024 + C29023) * C31305 +
                      (C29022 + C29021 + C29020) * C49094) *
                         C49251 +
                     ((C27471 + C27470 + C27469) * C31304 +
                      (C27468 + C27467 + C27466) * C31302 +
                      (C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                       C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                          C31305 +
                      (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                       C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C27466 + C27467 + C27468) * C49094 +
                      (C27469 + C27470 + C27471) * C31305 +
                      (C26856 + C26855 + C26854) * C31302 +
                      (C26853 + C26852 + C26851) * C31304) *
                         C49054 +
                     (C29026 * C49094 + C29027 * C31305 +
                      (C26850 + C26849 + C26848) * C31302 +
                      (C26847 + C26846 + C26845) * C31304) *
                         C49251) *
                        C721) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C31304 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C31302 +
                     (C28456 + C28457 + C28458) * C31305 +
                     (C28459 + C28460 + C28461) * C49094) *
                        C49251 +
                    ((C26845 + C26846 + C26847) * C31304 +
                     (C26848 + C26849 + C26850) * C31302 + C29018 * C31305 +
                     C29019 * C49094) *
                        C49054) *
                       C867 -
                   (((C29020 + C29021 + C29022) * C49094 +
                     (C29023 + C29024 + C29025) * C31305 + C29026 * C31302 +
                     C29027 * C31304) *
                        C49054 +
                    ((C29574 + C29575 + C29576) * C49094 +
                     (C29577 + C29578 + C29579) * C31305 +
                     (C28461 + C28460 + C28459) * C31302 +
                     (C28458 + C28457 + C28456) * C31304) *
                        C49251) *
                       C868 +
                   (((C29579 + C29578 + C29577) * C31304 +
                     (C29576 + C29575 + C29574) * C31302 +
                     (C47917 * C2732 + C48895 * C2739 + C47913 * C2731 +
                      C48903 * C2738 + C47923 * C2730 + C26643 * C2737) *
                         C31305 +
                     (C47917 * C2736 + C48895 * C2744 + C47913 * C2735 +
                      C48903 * C2743 + C47923 * C2734 + C26643 * C2742) *
                         C49094) *
                        C49251 +
                    ((C29025 + C29024 + C29023) * C31304 +
                     (C29022 + C29021 + C29020) * C31302 +
                     (C47917 * C3220 + C48895 * C3223 + C47913 * C3221 +
                      C48903 * C3224 + C47923 * C3222 + C26643 * C3225) *
                         C31305 +
                     (C47917 * C3226 + C48895 * C3229 + C47913 * C3227 +
                      C48903 * C3230 + C47923 * C3228 + C26643 * C3231) *
                         C49094) *
                        C49054) *
                       C869) *
                  C48961 * C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C48044 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49090 +
            (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
            C26518 * C48050 + C26519 * C36785) *
               C49251 +
           ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
            C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
            C25967 * C36785) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C25175 + C25174) * C36785 + (C25173 + C25172) * C48050 +
            (C25171 + C25170) * C49097 + (C25169 + C25168) * C48036 +
            (C23887 + C23886) * C49090 + (C23885 + C23884) * C48044) *
               C49054 +
           ((C25417 + C25416) * C36785 + (C25415 + C25414) * C48050 +
            (C25413 + C25412) * C49097 + (C25411 + C25410) * C48036 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49090 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C48044) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C48044 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C49090 +
            (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
                C48036 +
            (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
                C49097 +
            (C23691 * C872 + C23685 * C877 + C23692 * C873 + C48900 * C878) *
                C48050 +
            (C23691 * C882 + C23685 * C887 + C23692 * C883 + C48900 * C888) *
                C36785) *
               C49251 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C48044 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C49090 +
            (C23691 * C621 + C23685 * C626 + C23692 * C622 + C48900 * C627) *
                C48036 +
            (C23691 * C631 + C23685 * C636 + C23692 * C632 + C48900 * C637) *
                C49097 +
            (C23691 * C2296 + C23685 * C2302 + C23692 * C2580 +
             C48900 * C2581) *
                C48050 +
            (C23691 * C2305 + C23685 * C2314 + C23692 * C2582 +
             C48900 * C2583) *
                C36785) *
               C49054) *
              C48978 * C48961 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C48978 * C229 -
           (((C25766 + C25767) * C36785 + (C25768 + C25769) * C48050 +
             C30669 * C49097 + C30670 * C48036 + (C23879 + C23878) * C49090 +
             (C23877 + C23876) * C48044) *
                C49054 +
            (C25976 * C36785 + C25977 * C48050 + C25978 * C49097 +
             C25979 * C48036 + (C23875 + C23874) * C49090 +
             (C23873 + C23872) * C48044) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C48044 + (C23886 + C23887) * C49090 +
             (C25168 + C25169) * C48036 + (C25170 + C25171) * C49097 +
             (C25172 + C25173) * C48050 + (C25174 + C25175) * C36785) *
                C49251 +
            ((C23888 + C23889) * C48044 + (C23890 + C23891) * C49090 +
             (C29928 + C29929) * C48036 + (C29930 + C29931) * C49097 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C48050 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C36785) *
                C49054) *
               C48978 * C49279 -
           (((C25175 + C25174) * C36785 + (C25173 + C25172) * C48050 +
             (C25171 + C25170) * C49097 + (C25169 + C25168) * C48036 +
             (C23887 + C23886) * C49090 + (C23885 + C23884) * C48044) *
                C49054 +
            ((C25417 + C25416) * C36785 + (C25415 + C25414) * C48050 +
             (C25413 + C25412) * C49097 + (C25411 + C25410) * C48036 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49090 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C48044) *
                C49251) *
               C48978 * C229) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C339 -
           (((C25980 + C25981) * C36785 + (C25982 + C25983) * C48050 +
             C25976 * C49097 + C25977 * C48036 + C25978 * C49090 +
             C25979 * C48044) *
                C49054 +
            ((C26528 + C26529) * C36785 + (C26530 + C26531) * C48050 +
             (C25409 + C25408) * C49097 + (C25407 + C25406) * C48036 +
             (C25405 + C25404) * C49090 + (C25403 + C25402) * C48044) *
                C49251) *
               C49281) *
              C48961 * C231 +
          ((((C25410 + C25411) * C48044 + (C25412 + C25413) * C49090 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49097 +
             (C34338 + C34339) * C48050 + (C34340 + C34341) * C36785) *
                C49251 +
            ((C25168 + C25169) * C48044 + (C25170 + C25171) * C49090 +
             (C25172 + C25173) * C48036 + (C25174 + C25175) * C49097 +
             (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
              C48900 * C3225) *
                 C48050 +
             (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
              C48900 * C3231) *
                 C36785) *
                C49054) *
               C49281 -
           (((C25175 + C25174) * C36785 + (C25173 + C25172) * C48050 +
             (C25171 + C25170) * C49097 + (C25169 + C25168) * C48036 +
             (C23887 + C23886) * C49090 + (C23885 + C23884) * C48044) *
                C49054 +
            ((C25417 + C25416) * C36785 + (C25415 + C25414) * C48050 +
             (C25413 + C25412) * C49097 + (C25411 + C25410) * C48036 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49090 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C48044) *
                C49251) *
               C339) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C48978 * C447 -
           (((C25766 + C25767) * C36785 + (C25768 + C25769) * C48050 +
             C30669 * C49097 + C30670 * C48036 + (C23879 + C23878) * C49090 +
             (C23877 + C23876) * C48044) *
                C49054 +
            (C25976 * C36785 + C25977 * C48050 + C25978 * C49097 +
             C25979 * C48036 + (C23875 + C23874) * C49090 +
             (C23873 + C23872) * C48044) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C48044 + (C23886 + C23887) * C49090 +
             (C25168 + C25169) * C48036 + (C25170 + C25171) * C49097 +
             (C25172 + C25173) * C48050 + (C25174 + C25175) * C36785) *
                C49251 +
            ((C23888 + C23889) * C48044 + (C23890 + C23891) * C49090 +
             (C29928 + C29929) * C48036 + (C29930 + C29931) * C49097 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C48050 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C36785) *
                C49054) *
               C48978 * C49279 -
           (((C25175 + C25174) * C36785 + (C25173 + C25172) * C48050 +
             (C25171 + C25170) * C49097 + (C25169 + C25168) * C48036 +
             (C23887 + C23886) * C49090 + (C23885 + C23884) * C48044) *
                C49054 +
            ((C25417 + C25416) * C36785 + (C25415 + C25414) * C48050 +
             (C25413 + C25412) * C49097 + (C25411 + C25410) * C48036 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49090 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C48044) *
                C49251) *
               C48978 * C447) *
              C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C48044 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49090 +
            (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
            C26518 * C48050 + C26519 * C36785) *
               C49251 +
           ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
            C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
            C25967 * C36785) *
               C49054) *
              C48978 * C513 -
          (((C25766 + C25767) * C36785 + (C25768 + C25769) * C48050 +
            C30669 * C49097 + C30670 * C48036 + (C23879 + C23878) * C49090 +
            (C23877 + C23876) * C48044) *
               C49054 +
           (C25976 * C36785 + C25977 * C48050 + C25978 * C49097 +
            C25979 * C48036 + (C23875 + C23874) * C49090 +
            (C23873 + C23872) * C48044) *
               C49251) *
              C48978 * C514 +
          ((C24254 * C48044 + C24255 * C49090 + C30468 * C48036 +
            C30469 * C49097 + (C25769 + C25768) * C48050 +
            (C25767 + C25766) * C36785) *
               C49251 +
           (C24256 * C48044 + C24257 * C49090 + (C24433 + C24432) * C48036 +
            (C24431 + C24430) * C49097 +
            (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
             C48900 * C10073) *
                C48050 +
            (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
             C48900 * C10075) *
                C36785) *
               C49054) *
              C48978 * C515) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C339 -
           (((C25980 + C25981) * C36785 + (C25982 + C25983) * C48050 +
             C25976 * C49097 + C25977 * C48036 + C25978 * C49090 +
             C25979 * C48044) *
                C49054 +
            ((C26528 + C26529) * C36785 + (C26530 + C26531) * C48050 +
             (C25409 + C25408) * C49097 + (C25407 + C25406) * C48036 +
             (C25405 + C25404) * C49090 + (C25403 + C25402) * C48044) *
                C49251) *
               C49281) *
              C447 +
          (((C25964 * C48044 + C25965 * C49090 + C25966 * C48036 +
             C25967 * C49097 + (C25983 + C25982) * C48050 +
             (C25981 + C25980) * C36785) *
                C49251 +
            (C30468 * C48044 + C30469 * C49090 + (C25769 + C25768) * C48036 +
             (C25767 + C25766) * C49097 +
             (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
              C48900 * C10286) *
                 C48050 +
             (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
              C48900 * C10289) *
                 C36785) *
                C49054) *
               C49281 -
           (((C25766 + C25767) * C36785 + (C25768 + C25769) * C48050 +
             C30669 * C49097 + C30670 * C48036 + (C23879 + C23878) * C49090 +
             (C23877 + C23876) * C48044) *
                C49054 +
            (C25976 * C36785 + C25977 * C48050 + C25978 * C49097 +
             C25979 * C48036 + (C23875 + C23874) * C49090 +
             (C23873 + C23872) * C48044) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C721 -
           (((C25980 + C25981) * C36785 + (C25982 + C25983) * C48050 +
             C25976 * C49097 + C25977 * C48036 + C25978 * C49090 +
             C25979 * C48044) *
                C49054 +
            ((C26528 + C26529) * C36785 + (C26530 + C26531) * C48050 +
             (C25409 + C25408) * C49097 + (C25407 + C25406) * C48036 +
             (C25405 + C25404) * C49090 + (C25403 + C25402) * C48044) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C25410 + C25411) * C48044 + (C25412 + C25413) * C49090 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49097 +
             (C34338 + C34339) * C48050 + (C34340 + C34341) * C36785) *
                C49251 +
            ((C25168 + C25169) * C48044 + (C25170 + C25171) * C49090 +
             (C25172 + C25173) * C48036 + (C25174 + C25175) * C49097 +
             (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
              C48900 * C3225) *
                 C48050 +
             (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
              C48900 * C3231) *
                 C36785) *
                C49054) *
               C49281 -
           (((C25175 + C25174) * C36785 + (C25173 + C25172) * C48050 +
             (C25171 + C25170) * C49097 + (C25169 + C25168) * C48036 +
             (C23887 + C23886) * C49090 + (C23885 + C23884) * C48044) *
                C49054 +
            ((C25417 + C25416) * C36785 + (C25415 + C25414) * C48050 +
             (C25413 + C25412) * C49097 + (C25411 + C25410) * C48036 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C49090 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C48044) *
                C49251) *
               C721) *
              C48961 * C49277)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C48044 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C49090 +
             (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
             C26518 * C48050 + C26519 * C36785) *
                C49251 +
            ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
             C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
             C25967 * C36785) *
                C49054) *
               C721 -
           (((C25980 + C25981) * C36785 + (C25982 + C25983) * C48050 +
             C25976 * C49097 + C25977 * C48036 + C25978 * C49090 +
             C25979 * C48044) *
                C49054 +
            ((C26528 + C26529) * C36785 + (C26530 + C26531) * C48050 +
             (C25409 + C25408) * C49097 + (C25407 + C25406) * C48036 +
             (C25405 + C25404) * C49090 + (C25403 + C25402) * C48044) *
                C49251) *
               C49281) *
              C229 +
          (((C25964 * C48044 + C25965 * C49090 + C25966 * C48036 +
             C25967 * C49097 + (C25983 + C25982) * C48050 +
             (C25981 + C25980) * C36785) *
                C49251 +
            (C30468 * C48044 + C30469 * C49090 + (C25769 + C25768) * C48036 +
             (C25767 + C25766) * C49097 +
             (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
              C48900 * C10286) *
                 C48050 +
             (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
              C48900 * C10289) *
                 C36785) *
                C49054) *
               C49281 -
           (((C25766 + C25767) * C36785 + (C25768 + C25769) * C48050 +
             C30669 * C49097 + C30670 * C48036 + (C23879 + C23878) * C49090 +
             (C23877 + C23876) * C48044) *
                C49054 +
            (C25976 * C36785 + C25977 * C48050 + C25978 * C49097 +
             C25979 * C48036 + (C23875 + C23874) * C49090 +
             (C23873 + C23872) * C48044) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C48044 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49090 +
            (C25402 + C25403) * C48036 + (C25404 + C25405) * C49097 +
            C26518 * C48050 + C26519 * C36785) *
               C49251 +
           ((C23872 + C23873) * C48044 + (C23874 + C23875) * C49090 +
            C25964 * C48036 + C25965 * C49097 + C25966 * C48050 +
            C25967 * C36785) *
               C49054) *
              C867 -
          (((C25980 + C25981) * C36785 + (C25982 + C25983) * C48050 +
            C25976 * C49097 + C25977 * C48036 + C25978 * C49090 +
            C25979 * C48044) *
               C49054 +
           ((C26528 + C26529) * C36785 + (C26530 + C26531) * C48050 +
            (C25409 + C25408) * C49097 + (C25407 + C25406) * C48036 +
            (C25405 + C25404) * C49090 + (C25403 + C25402) * C48044) *
               C49251) *
              C868 +
          ((C26518 * C48044 + C26519 * C49090 + C35058 * C48036 +
            C35059 * C49097 + (C35071 + C35070) * C48050 +
            (C35069 + C35068) * C36785) *
               C49251 +
           (C25966 * C48044 + C25967 * C49090 + (C25983 + C25982) * C48036 +
            (C25981 + C25980) * C49097 +
            (C23691 * C11163 + C23685 * C11165 + C23692 * C17947 +
             C48900 * C17948) *
                C48050 +
            (C23691 * C11166 + C23685 * C11169 + C23692 * C17949 +
             C48900 * C17950) *
                C36785) *
               C49054) *
              C869) *
         C48961 * C48927) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
            C30469 * C49094) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
            (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
               C49284 +
           ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
            (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
               C49307 +
           ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C31302 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C31304) *
               C49319) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C31304 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C31302 +
            (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
                C31305 +
            (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
                C49094) *
               C49319 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C31304 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C31302 +
            (C23691 * C621 + C23685 * C626 + C23692 * C622 + C48900 * C627) *
                C31305 +
            (C23691 * C631 + C23685 * C636 + C23692 * C632 + C48900 * C637) *
                C49094) *
               C49307 +
           ((C23691 * C519 + C23685 * C524 + C23692 * C520 + C48900 * C525) *
                C31304 +
            (C23691 * C529 + C23685 * C534 + C23692 * C530 + C48900 * C535) *
                C31302 +
            (C23691 * C1389 + C23685 * C1396 + C23692 * C1392 +
             C48900 * C1399) *
                C31305 +
            (C23691 * C1393 + C23685 * C1401 + C23692 * C1400 +
             C48900 * C1404) *
                C49094) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C22511 * C345 + C49325 * C356 + C22512 * C344 + C49318 * C355 +
            C22513 * C343 + C49305 * C354 + C22514 * C342 + C49288 * C353) *
               C31305 +
           (C22511 * C351 + C49325 * C363 + C22512 * C350 + C49318 * C362 +
            C22513 * C349 + C49305 * C361 + C22514 * C348 + C49288 * C360) *
               C49094) *
              C48996 * C48978 * C48961 * C110 -
          ((C22514 * C347 + C49288 * C359 + C22513 * C348 + C49305 * C360 +
            C22512 * C349 + C49318 * C361 + C22511 * C350 + C49325 * C362) *
               C49094 +
           (C22514 * C341 + C49288 * C352 + C22513 * C342 + C49305 * C353 +
            C22512 * C343 + C49318 * C354 + C22511 * C344 + C49325 * C355) *
               C31305 +
           (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
            C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
               C31302 +
           (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
            C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
               C31304) *
              C48996 * C48978 * C48961 * C111 +
          ((C22511 * C121 + C49325 * C128 + C22512 * C122 + C49318 * C129 +
            C22513 * C123 + C49305 * C130 + C22514 * C124 + C49288 * C137) *
               C31304 +
           (C22511 * C133 + C49325 * C142 + C22512 * C134 + C49318 * C143 +
            C22513 * C135 + C49305 * C144 + C22514 * C136 + C49288 * C145) *
               C31302 +
           (C22511 * C343 + C49325 * C354 + C22512 * C342 + C49318 * C353 +
            C22513 * C341 + C49305 * C352 + C22514 * C346 + C49288 * C357) *
               C31305 +
           (C22511 * C349 + C49325 * C361 + C22512 * C348 + C49318 * C360 +
            C22513 * C347 + C49305 * C359 + C22514 * C358 + C49288 * C364) *
               C49094) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
               C34065 +
           (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
               C49327 +
           (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
           C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
           (C26529 + C26528) * C49300) *
              C48996 * C48978 * C48961 * C110 -
          ((C23692 * C2734 + C48900 * C2742 + C23691 * C2735 + C23685 * C2743) *
               C49300 +
           (C23692 * C2730 + C48900 * C2737 + C23691 * C2731 + C23685 * C2738) *
               C34068 +
           (C25417 + C25416) * C49315 + (C25415 + C25414) * C34067 +
           (C25413 + C25412) * C49324 + (C25411 + C25410) * C34066 +
           (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
               C49327 +
           (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
               C34065) *
              C48996 * C48978 * C48961 * C111 +
          ((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
               C34065 +
           (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
               C49327 +
           (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
               C34066 +
           (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
               C49324 +
           (C23691 * C872 + C23685 * C877 + C23692 * C873 + C48900 * C878) *
               C34067 +
           (C23691 * C882 + C23685 * C887 + C23692 * C883 + C48900 * C888) *
               C49315 +
           (C23691 * C2730 + C23685 * C2737 + C23692 * C2733 + C48900 * C2740) *
               C34068 +
           (C23691 * C2734 + C23685 * C2742 + C23692 * C2741 + C48900 * C2745) *
               C49300) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C48978 * C229 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C31304 + (C23886 + C23887) * C31302 +
             (C25168 + C25169) * C31305 + (C25170 + C25171) * C49094) *
                C49319 +
            ((C23888 + C23889) * C31304 + (C23890 + C23891) * C31302 +
             (C29928 + C29929) * C31305 + (C29930 + C29931) * C49094) *
                C49307 +
            ((C23892 + C23893) * C31304 + (C23894 + C23895) * C31302 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C22511 * C345 + C49325 * C356 + C22512 * C344 + C49318 * C355 +
             C22513 * C343 + C49305 * C354 + C22514 * C342 + C49288 * C353) *
                C31305 +
            (C22511 * C351 + C49325 * C363 + C22512 * C350 + C49318 * C362 +
             C22513 * C349 + C49305 * C361 + C22514 * C348 + C49288 * C360) *
                C49094) *
               C48996 * C48978 * C229 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C22686 + C22687 + C22688 + C22689) * C31304 +
            (C22690 + C22691 + C22692 + C22693) * C31302 +
            (C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
             C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                C31305 +
            (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
             C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C22514 * C347 + C49288 * C359 + C22513 * C348 + C49305 * C360 +
             C22512 * C349 + C49318 * C361 + C22511 * C350 + C49325 * C362) *
                C49094 +
            (C22514 * C341 + C49288 * C352 + C22513 * C342 + C49305 * C353 +
             C22512 * C343 + C49318 * C354 + C22511 * C344 + C49325 * C355) *
                C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C48978 * C229 -
           ((C25980 + C25981) * C49300 + (C25982 + C25983) * C34068 +
            C25976 * C49315 + C25977 * C34067 + C25978 * C49324 +
            C25979 * C34066 + (C23875 + C23874) * C49327 +
            (C23873 + C23872) * C34065) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C23884 + C23885) * C34065 + (C23886 + C23887) * C49327 +
            (C25168 + C25169) * C34066 + (C25170 + C25171) * C49324 +
            (C25172 + C25173) * C34067 + (C25174 + C25175) * C49315 +
            (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
             C48900 * C3225) *
                C34068 +
            (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
             C48900 * C3231) *
                C49300) *
               C48996 * C48978 * C49279 -
           ((C23692 * C2734 + C48900 * C2742 + C23691 * C2735 +
             C23685 * C2743) *
                C49300 +
            (C23692 * C2730 + C48900 * C2737 + C23691 * C2731 +
             C23685 * C2738) *
                C34068 +
            (C25417 + C25416) * C49315 + (C25415 + C25414) * C34067 +
            (C25413 + C25412) * C49324 + (C25411 + C25410) * C34066 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49327 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C34065) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C48961 * C231 +
          ((((C25410 + C25411) * C31304 + (C25412 + C25413) * C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49094) *
                C49319 +
            ((C25168 + C25169) * C31304 + (C25170 + C25171) * C31302 +
             (C25172 + C25173) * C31305 + (C25174 + C25175) * C49094) *
                C49307 +
            ((C29928 + C29929) * C31304 + (C29930 + C29931) * C31302 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C339 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C31607 + C31608 + C31609 + C31610) * C31304 +
            (C31611 + C31612 + C31613 + C31614) * C31302 +
            (C22511 * C871 + C49325 * C876 + C22512 * C872 + C49318 * C877 +
             C22513 * C873 + C49305 * C878 + C22514 * C874 + C49288 * C879) *
                C31305 +
            (C22511 * C881 + C49325 * C886 + C22512 * C882 + C49318 * C887 +
             C22513 * C883 + C49305 * C888 + C22514 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C339 -
           ((C23692 * C3659 + C48900 * C3662 + C23691 * C3658 +
             C23685 * C3661) *
                C49300 +
            (C23692 * C3653 + C48900 * C3656 + C23691 * C3652 +
             C23685 * C3655) *
                C34068 +
            (C26528 + C26529) * C49315 + (C26530 + C26531) * C34067 +
            (C25409 + C25408) * C49324 + (C25407 + C25406) * C34066 +
            (C25405 + C25404) * C49327 + (C25403 + C25402) * C34065) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C25410 + C25411) * C34065 + (C25412 + C25413) * C49327 +
            (C25414 + C25415) * C34066 + (C25416 + C25417) * C49324 +
            (C34338 + C34339) * C34067 + (C34340 + C34341) * C49315 +
            (C23691 * C3653 + C23685 * C3656 + C23692 * C3654 +
             C48900 * C3657) *
                C34068 +
            (C23691 * C3659 + C23685 * C3662 + C23692 * C3660 +
             C48900 * C3663) *
                C49300) *
               C48996 * C49281 -
           ((C34341 + C34340) * C49300 + (C34339 + C34338) * C34068 +
            (C25417 + C25416) * C49315 + (C25415 + C25414) * C34067 +
            (C25413 + C25412) * C49324 + (C25411 + C25410) * C34066 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49327 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C34065) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C48978 * C447 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C31304 + (C23886 + C23887) * C31302 +
             (C25168 + C25169) * C31305 + (C25170 + C25171) * C49094) *
                C49319 +
            ((C23888 + C23889) * C31304 + (C23890 + C23891) * C31302 +
             (C29928 + C29929) * C31305 + (C29930 + C29931) * C49094) *
                C49307 +
            ((C23892 + C23893) * C31304 + (C23894 + C23895) * C31302 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C48978 * C447 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C22686 + C22687 + C22688 + C22689) * C31304 +
            (C22690 + C22691 + C22692 + C22693) * C31302 +
            (C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
             C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                C31305 +
            (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
             C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C48978 * C447 -
           ((C25980 + C25981) * C49300 + (C25982 + C25983) * C34068 +
            C25976 * C49315 + C25977 * C34067 + C25978 * C49324 +
            C25979 * C34066 + (C23875 + C23874) * C49327 +
            (C23873 + C23872) * C34065) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C23884 + C23885) * C34065 + (C23886 + C23887) * C49327 +
            (C25168 + C25169) * C34066 + (C25170 + C25171) * C49324 +
            (C25172 + C25173) * C34067 + (C25174 + C25175) * C49315 +
            (C23691 * C3221 + C23685 * C3224 + C23692 * C3222 +
             C48900 * C3225) *
                C34068 +
            (C23691 * C3227 + C23685 * C3230 + C23692 * C3228 +
             C48900 * C3231) *
                C49300) *
               C48996 * C48978 * C49279 -
           ((C34341 + C34340) * C49300 + (C34339 + C34338) * C34068 +
            (C25417 + C25416) * C49315 + (C25415 + C25414) * C34067 +
            (C25413 + C25412) * C49324 + (C25411 + C25410) * C34066 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49327 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C34065) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           C33235 * C49284) *
              C48978 * C513 -
          (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
            (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
               C49284 +
           (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
            (C23877 + C23876) * C31304) *
               C49307 +
           (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
            (C23873 + C23872) * C31304) *
               C49319) *
              C48978 * C514 +
          (C33235 * C49319 +
           (C24256 * C31304 + C24257 * C31302 + (C24433 + C24432) * C31305 +
            (C24431 + C24430) * C49094) *
               C49307 +
           ((C24273 + C24272) * C31304 + (C24271 + C24270) * C31302 +
            (C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
             C48900 * C9301) *
                C31305 +
            (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
             C48900 * C9304) *
                C49094) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C31599 + C31600 + C31601 + C31602) * C31305 +
           (C31603 + C31604 + C31605 + C31606) * C49094) *
              C48996 * C48978 * C513 -
          ((C23222 + C23223 + C23224 + C23225) * C49094 +
           (C23226 + C23227 + C23228 + C23229) * C31305 +
           (C22685 + C22684 + C22683 + C22682) * C31302 +
           (C22681 + C22680 + C22679 + C22678) * C31304) *
              C48996 * C48978 * C514 +
          ((C23075 + C23074 + C23073 + C23072) * C31304 +
           (C23071 + C23070 + C23069 + C23068) * C31302 +
           (C22511 * C1391 + C49325 * C1398 + C22512 * C1390 + C49318 * C1397 +
            C22513 * C1389 + C49305 * C1396 + C22514 * C1392 + C49288 * C1399) *
               C31305 +
           (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 + C49318 * C1402 +
            C22513 * C1393 + C49305 * C1401 + C22514 * C1400 + C49288 * C1404) *
               C49094) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
               C34065 +
           (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
               C49327 +
           (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
           C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
           (C26529 + C26528) * C49300) *
              C48996 * C48978 * C513 -
          ((C25980 + C25981) * C49300 + (C25982 + C25983) * C34068 +
           C25976 * C49315 + C25977 * C34067 + C25978 * C49324 +
           C25979 * C34066 + (C23875 + C23874) * C49327 +
           (C23873 + C23872) * C34065) *
              C48996 * C48978 * C514 +
          (C24254 * C34065 + C24255 * C49327 + C30468 * C34066 +
           C30469 * C49324 + (C25769 + C25768) * C34067 +
           (C25767 + C25766) * C49315 +
           (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
            C48900 * C10286) *
               C34068 +
           (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
            C48900 * C10289) *
               C49300) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C447 +
          (((C25964 * C31304 + C25965 * C31302 + C25966 * C31305 +
             C25967 * C49094) *
                C49319 +
            (C30468 * C31304 + C30469 * C31302 + (C25769 + C25768) * C31305 +
             (C25767 + C25766) * C49094) *
                C49307 +
            ((C24433 + C24432) * C31304 + (C24431 + C24430) * C31302 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C339 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C447 +
          (((C23229 + C23228 + C23227 + C23226) * C31304 +
            (C23225 + C23224 + C23223 + C23222) * C31302 +
            (C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C31305 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C339 -
           ((C23692 * C3659 + C48900 * C3662 + C23691 * C3658 +
             C23685 * C3661) *
                C49300 +
            (C23692 * C3653 + C48900 * C3656 + C23691 * C3652 +
             C23685 * C3655) *
                C34068 +
            (C26528 + C26529) * C49315 + (C26530 + C26531) * C34067 +
            (C25409 + C25408) * C49324 + (C25407 + C25406) * C34066 +
            (C25405 + C25404) * C49327 + (C25403 + C25402) * C34065) *
               C48996 * C49281) *
              C447 +
          ((C25964 * C34065 + C25965 * C49327 + C25966 * C34066 +
            C25967 * C49324 + (C25983 + C25982) * C34067 +
            (C25981 + C25980) * C49315 +
            (C23691 * C11163 + C23685 * C11165 + C23692 * C17947 +
             C48900 * C17948) *
                C34068 +
            (C23691 * C11166 + C23685 * C11169 + C23692 * C17949 +
             C48900 * C17950) *
                C49300) *
               C48996 * C49281 -
           ((C25980 + C25981) * C49300 + (C25982 + C25983) * C34068 +
            C25976 * C49315 + C25977 * C34067 + C25978 * C49324 +
            C25979 * C34066 + (C23875 + C23874) * C49327 +
            (C23873 + C23872) * C34065) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C48961 * C449 +
          ((((C25410 + C25411) * C31304 + (C25412 + C25413) * C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49094) *
                C49319 +
            ((C25168 + C25169) * C31304 + (C25170 + C25171) * C31302 +
             (C25172 + C25173) * C31305 + (C25174 + C25175) * C49094) *
                C49307 +
            ((C29928 + C29929) * C31304 + (C29930 + C29931) * C31302 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C721 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C31607 + C31608 + C31609 + C31610) * C31304 +
            (C31611 + C31612 + C31613 + C31614) * C31302 +
            (C22511 * C871 + C49325 * C876 + C22512 * C872 + C49318 * C877 +
             C22513 * C873 + C49305 * C878 + C22514 * C874 + C49288 * C879) *
                C31305 +
            (C22511 * C881 + C49325 * C886 + C22512 * C882 + C49318 * C887 +
             C22513 * C883 + C49305 * C888 + C22514 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C721 -
           ((C23692 * C3659 + C48900 * C3662 + C23691 * C3658 +
             C23685 * C3661) *
                C49300 +
            (C23692 * C3653 + C48900 * C3656 + C23691 * C3652 +
             C23685 * C3655) *
                C34068 +
            (C26528 + C26529) * C49315 + (C26530 + C26531) * C34067 +
            (C25409 + C25408) * C49324 + (C25407 + C25406) * C34066 +
            (C25405 + C25404) * C49327 + (C25403 + C25402) * C34065) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C25410 + C25411) * C34065 + (C25412 + C25413) * C49327 +
            (C25414 + C25415) * C34066 + (C25416 + C25417) * C49324 +
            (C34338 + C34339) * C34067 + (C34340 + C34341) * C49315 +
            (C23691 * C3653 + C23685 * C3656 + C23692 * C3654 +
             C48900 * C3657) *
                C34068 +
            (C23691 * C3659 + C23685 * C3662 + C23692 * C3660 +
             C48900 * C3663) *
                C49300) *
               C48996 * C49281 -
           ((C34341 + C34340) * C49300 + (C34339 + C34338) * C34068 +
            (C25417 + C25416) * C49315 + (C25415 + C25414) * C34067 +
            (C25413 + C25412) * C49324 + (C25411 + C25410) * C34066 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C49327 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C34065) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C229 +
          (((C25964 * C31304 + C25965 * C31302 + C25966 * C31305 +
             C25967 * C49094) *
                C49319 +
            (C30468 * C31304 + C30469 * C31302 + (C25769 + C25768) * C31305 +
             (C25767 + C25766) * C49094) *
                C49307 +
            ((C24433 + C24432) * C31304 + (C24431 + C24430) * C31302 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C721 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C229 +
          (((C23229 + C23228 + C23227 + C23226) * C31304 +
            (C23225 + C23224 + C23223 + C23222) * C31302 +
            (C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C31305 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C34065 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C49327 +
            (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
            C26518 * C34067 + C26519 * C49315 + (C26531 + C26530) * C34068 +
            (C26529 + C26528) * C49300) *
               C48996 * C721 -
           ((C23692 * C3659 + C48900 * C3662 + C23691 * C3658 +
             C23685 * C3661) *
                C49300 +
            (C23692 * C3653 + C48900 * C3656 + C23691 * C3652 +
             C23685 * C3655) *
                C34068 +
            (C26528 + C26529) * C49315 + (C26530 + C26531) * C34067 +
            (C25409 + C25408) * C49324 + (C25407 + C25406) * C34066 +
            (C25405 + C25404) * C49327 + (C25403 + C25402) * C34065) *
               C48996 * C49281) *
              C229 +
          ((C25964 * C34065 + C25965 * C49327 + C25966 * C34066 +
            C25967 * C49324 + (C25983 + C25982) * C34067 +
            (C25981 + C25980) * C49315 +
            (C23691 * C11163 + C23685 * C11165 + C23692 * C17947 +
             C48900 * C17948) *
                C34068 +
            (C23691 * C11166 + C23685 * C11169 + C23692 * C17949 +
             C48900 * C17950) *
                C49300) *
               C48996 * C49281 -
           ((C25980 + C25981) * C49300 + (C25982 + C25983) * C34068 +
            C25976 * C49315 + C25977 * C34067 + C25978 * C49324 +
            C25979 * C34066 + (C23875 + C23874) * C49327 +
            (C23873 + C23872) * C34065) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           C33235 * C49284) *
              C867 -
          (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
            C30669 * C31302 + C30670 * C31304) *
               C49284 +
           (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
            C25979 * C31304) *
               C49307 +
           ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
            (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
               C49319) *
              C868 +
          ((C26518 * C31304 + C26519 * C31302 + (C26531 + C26530) * C31305 +
            (C26529 + C26528) * C49094) *
               C49319 +
           (C25966 * C31304 + C25967 * C31302 + (C25983 + C25982) * C31305 +
            (C25981 + C25980) * C49094) *
               C49307 +
           ((C25769 + C25768) * C31304 + (C25767 + C25766) * C31302 +
            (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
             C48900 * C10286) *
                C31305 +
            (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
             C48900 * C10289) *
                C49094) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C31599 + C31600 + C31601 + C31602) * C31305 +
           (C31603 + C31604 + C31605 + C31606) * C49094) *
              C48996 * C867 -
          ((C32347 + C32348 + C32349 + C32350) * C49094 +
           (C32351 + C32352 + C32353 + C32354) * C31305 +
           (C31606 + C31605 + C31604 + C31603) * C31302 +
           (C31602 + C31601 + C31600 + C31599) * C31304) *
              C48996 * C868 +
          ((C32354 + C32353 + C32352 + C32351) * C31304 +
           (C32350 + C32349 + C32348 + C32347) * C31302 +
           (C22511 * C2732 + C49325 * C2739 + C22512 * C2731 + C49318 * C2738 +
            C22513 * C2730 + C49305 * C2737 + C22514 * C2733 + C49288 * C2740) *
               C31305 +
           (C22511 * C2736 + C49325 * C2744 + C22512 * C2735 + C49318 * C2743 +
            C22513 * C2734 + C49305 * C2742 + C22514 * C2741 + C49288 * C2745) *
               C49094) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
               C34065 +
           (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
               C49327 +
           (C25402 + C25403) * C34066 + (C25404 + C25405) * C49324 +
           C26518 * C34067 + C26519 * C49315 + C35058 * C34068 +
           C35059 * C49300) *
              C48996 * C867 -
          ((C35068 + C35069) * C49300 + (C35070 + C35071) * C34068 +
           (C26528 + C26529) * C49315 + (C26530 + C26531) * C34067 +
           (C25409 + C25408) * C49324 + (C25407 + C25406) * C34066 +
           (C25405 + C25404) * C49327 + (C25403 + C25402) * C34065) *
              C48996 * C868 +
          (C26518 * C34065 + C26519 * C49327 + C35058 * C34066 +
           C35059 * C49324 + (C35071 + C35070) * C34067 +
           (C35069 + C35068) * C49315 +
           (C23691 * C18033 + C23685 * C18036 + C23692 * C18034 +
            C48900 * C18037) *
               C34068 +
           (C23691 * C18035 + C23685 * C18039 + C23692 * C18038 +
            C48900 * C18040) *
               C49300) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[162] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C48044 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49090 +
                    (C28456 + C28457 + C28458) * C48036 +
                    (C28459 + C28460 + C28461) * C49097 +
                    (C29579 + C29578 + C29577) * C48050 +
                    (C29576 + C29575 + C29574) * C36785) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C47923 * C883 + C26643 * C888 + C47913 * C882 +
                     C48903 * C887 + C47917 * C881 + C48895 * C886) *
                        C36785 +
                    (C47923 * C873 + C26643 * C878 + C47913 * C872 +
                     C48903 * C877 + C47917 * C871 + C48895 * C876) *
                        C48050 +
                    (C28467 + C28466 + C28465) * C49097 +
                    (C28464 + C28463 + C28462) * C48036 +
                    (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                     C48903 * C142 + C47917 * C132 + C48895 * C141) *
                        C49090 +
                    (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                     C48903 * C128 + C47917 * C120 + C48895 * C127) *
                        C48044) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C47917 * C121 + C48895 * C128 + C47913 * C122 +
                     C48903 * C129 + C47923 * C123 + C26643 * C130) *
                        C48044 +
                    (C47917 * C133 + C48895 * C142 + C47913 * C134 +
                     C48903 * C143 + C47923 * C135 + C26643 * C144) *
                        C49090 +
                    (C47917 * C343 + C48895 * C354 + C47913 * C342 +
                     C48903 * C353 + C47923 * C341 + C26643 * C352) *
                        C48036 +
                    (C47917 * C349 + C48895 * C361 + C47913 * C348 +
                     C48903 * C360 + C47923 * C347 + C26643 * C359) *
                        C49097 +
                    (C47917 * C872 + C48895 * C877 + C47913 * C873 +
                     C48903 * C878 + C47923 * C874 + C26643 * C879) *
                        C48050 +
                    (C47917 * C882 + C48895 * C887 + C47913 * C883 +
                     C48903 * C888 + C47923 * C884 + C26643 * C889) *
                        C36785) *
                       C48996 * C48978 * C48961 * C112)) /
                 (p * q * std::sqrt(p + q));
    d2ee[163] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C48978 * C229 -
                    ((C29020 + C29021 + C29022) * C36785 +
                     (C29023 + C29024 + C29025) * C48050 + C29026 * C49097 +
                     C29027 * C48036 + (C26850 + C26849 + C26848) * C49090 +
                     (C26847 + C26846 + C26845) * C48044) *
                        C48996 * C48978 * C49279) *
                       C231 +
                   (((C26857 + C26858 + C26859) * C48044 +
                     (C26860 + C26861 + C26862) * C49090 +
                     (C28232 + C28233 + C28234) * C48036 +
                     (C28235 + C28236 + C28237) * C49097 +
                     (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                      C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                         C48050 +
                     (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                      C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                         C36785) *
                        C48996 * C48978 * C49279 -
                    ((C47923 * C883 + C26643 * C888 + C47913 * C882 +
                      C48903 * C887 + C47917 * C881 + C48895 * C886) *
                         C36785 +
                     (C47923 * C873 + C26643 * C878 + C47913 * C872 +
                      C48903 * C877 + C47917 * C871 + C48895 * C876) *
                         C48050 +
                     (C28467 + C28466 + C28465) * C49097 +
                     (C28464 + C28463 + C28462) * C48036 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49090 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C48044) *
                        C48996 * C48978 * C229) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C339 -
                    ((C47923 * C2734 + C26643 * C2742 + C47913 * C2735 +
                      C48903 * C2743 + C47917 * C2736 + C48895 * C2744) *
                         C36785 +
                     (C47923 * C2730 + C26643 * C2737 + C47913 * C2731 +
                      C48903 * C2738 + C47917 * C2732 + C48895 * C2739) *
                         C48050 +
                     (C29574 + C29575 + C29576) * C49097 +
                     (C29577 + C29578 + C29579) * C48036 +
                     (C28461 + C28460 + C28459) * C49090 +
                     (C28458 + C28457 + C28456) * C48044) *
                        C48996 * C49281) *
                       C48961 * C231 +
                   (((C28462 + C28463 + C28464) * C48044 +
                     (C28465 + C28466 + C28467) * C49090 +
                     (C37094 + C37095 + C37096) * C48036 +
                     (C37097 + C37098 + C37099) * C49097 +
                     (C47917 * C2731 + C48895 * C2738 + C47913 * C2730 +
                      C48903 * C2737 + C47923 * C2733 + C26643 * C2740) *
                         C48050 +
                     (C47917 * C2735 + C48895 * C2743 + C47913 * C2734 +
                      C48903 * C2742 + C47923 * C2741 + C26643 * C2745) *
                         C36785) *
                        C48996 * C49281 -
                    ((C37099 + C37098 + C37097) * C36785 +
                     (C37096 + C37095 + C37094) * C48050 +
                     (C28467 + C28466 + C28465) * C49097 +
                     (C28464 + C28463 + C28462) * C48036 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49090 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C48044) *
                        C48996 * C339) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C48978 * C447 -
                    ((C29020 + C29021 + C29022) * C36785 +
                     (C29023 + C29024 + C29025) * C48050 + C29026 * C49097 +
                     C29027 * C48036 + (C26850 + C26849 + C26848) * C49090 +
                     (C26847 + C26846 + C26845) * C48044) *
                        C48996 * C48978 * C49279) *
                       C449 +
                   (((C26857 + C26858 + C26859) * C48044 +
                     (C26860 + C26861 + C26862) * C49090 +
                     (C28232 + C28233 + C28234) * C48036 +
                     (C28235 + C28236 + C28237) * C49097 +
                     (C47917 * C2295 + C48895 * C2301 + C47913 * C2296 +
                      C48903 * C2302 + C47923 * C2580 + C26643 * C2581) *
                         C48050 +
                     (C47917 * C2304 + C48895 * C2313 + C47913 * C2305 +
                      C48903 * C2314 + C47923 * C2582 + C26643 * C2583) *
                         C36785) *
                        C48996 * C48978 * C49279 -
                    ((C37099 + C37098 + C37097) * C36785 +
                     (C37096 + C37095 + C37094) * C48050 +
                     (C28467 + C28466 + C28465) * C49097 +
                     (C28464 + C28463 + C28462) * C48036 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49090 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C48044) *
                        C48996 * C48978 * C447) *
                       C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C48044 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49090 +
                    (C28456 + C28457 + C28458) * C48036 +
                    (C28459 + C28460 + C28461) * C49097 +
                    (C29579 + C29578 + C29577) * C48050 +
                    (C29576 + C29575 + C29574) * C36785) *
                       C48996 * C48978 * C513 -
                   ((C29020 + C29021 + C29022) * C36785 +
                    (C29023 + C29024 + C29025) * C48050 + C29026 * C49097 +
                    C29027 * C48036 + (C26850 + C26849 + C26848) * C49090 +
                    (C26847 + C26846 + C26845) * C48044) *
                       C48996 * C48978 * C514 +
                   (C27285 * C48044 + C27286 * C49090 +
                    (C27471 + C27470 + C27469) * C48036 +
                    (C27468 + C27467 + C27466) * C49097 +
                    (C47917 * C2297 + C48895 * C2306 + C47913 * C2298 +
                     C48903 * C2307 + C47923 * C2299 + C26643 * C2308) *
                        C48050 +
                    (C47917 * C2309 + C48895 * C2315 + C47913 * C2310 +
                     C48903 * C2316 + C47923 * C2311 + C26643 * C2317) *
                        C36785) *
                       C48996 * C48978 * C515) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C339 -
                    ((C47923 * C2734 + C26643 * C2742 + C47913 * C2735 +
                      C48903 * C2743 + C47917 * C2736 + C48895 * C2744) *
                         C36785 +
                     (C47923 * C2730 + C26643 * C2737 + C47913 * C2731 +
                      C48903 * C2738 + C47917 * C2732 + C48895 * C2739) *
                         C48050 +
                     (C29574 + C29575 + C29576) * C49097 +
                     (C29577 + C29578 + C29579) * C48036 +
                     (C28461 + C28460 + C28459) * C49090 +
                     (C28458 + C28457 + C28456) * C48044) *
                        C48996 * C49281) *
                       C447 +
                   ((C29018 * C48044 + C29019 * C49090 +
                     (C29025 + C29024 + C29023) * C48036 +
                     (C29022 + C29021 + C29020) * C49097 +
                     (C47917 * C3220 + C48895 * C3223 + C47913 * C3221 +
                      C48903 * C3224 + C47923 * C3222 + C26643 * C3225) *
                         C48050 +
                     (C47917 * C3226 + C48895 * C3229 + C47913 * C3227 +
                      C48903 * C3230 + C47923 * C3228 + C26643 * C3231) *
                         C36785) *
                        C48996 * C49281 -
                    ((C29020 + C29021 + C29022) * C36785 +
                     (C29023 + C29024 + C29025) * C48050 + C29026 * C49097 +
                     C29027 * C48036 + (C26850 + C26849 + C26848) * C49090 +
                     (C26847 + C26846 + C26845) * C48044) *
                        C48996 * C339) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C721 -
                    ((C47923 * C2734 + C26643 * C2742 + C47913 * C2735 +
                      C48903 * C2743 + C47917 * C2736 + C48895 * C2744) *
                         C36785 +
                     (C47923 * C2730 + C26643 * C2737 + C47913 * C2731 +
                      C48903 * C2738 + C47917 * C2732 + C48895 * C2739) *
                         C48050 +
                     (C29574 + C29575 + C29576) * C49097 +
                     (C29577 + C29578 + C29579) * C48036 +
                     (C28461 + C28460 + C28459) * C49090 +
                     (C28458 + C28457 + C28456) * C48044) *
                        C48996 * C49281) *
                       C48961 * C449 +
                   (((C28462 + C28463 + C28464) * C48044 +
                     (C28465 + C28466 + C28467) * C49090 +
                     (C37094 + C37095 + C37096) * C48036 +
                     (C37097 + C37098 + C37099) * C49097 +
                     (C47917 * C2731 + C48895 * C2738 + C47913 * C2730 +
                      C48903 * C2737 + C47923 * C2733 + C26643 * C2740) *
                         C48050 +
                     (C47917 * C2735 + C48895 * C2743 + C47913 * C2734 +
                      C48903 * C2742 + C47923 * C2741 + C26643 * C2745) *
                         C36785) *
                        C48996 * C49281 -
                    ((C37099 + C37098 + C37097) * C36785 +
                     (C37096 + C37095 + C37094) * C48050 +
                     (C28467 + C28466 + C28465) * C49097 +
                     (C28464 + C28463 + C28462) * C48036 +
                     (C47923 * C134 + C26643 * C143 + C47913 * C133 +
                      C48903 * C142 + C47917 * C132 + C48895 * C141) *
                         C49090 +
                     (C47923 * C122 + C26643 * C129 + C47913 * C121 +
                      C48903 * C128 + C47917 * C120 + C48895 * C127) *
                         C48044) *
                        C48996 * C721) *
                       C48961 * C49277)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                      C48903 * C127 + C47923 * C121 + C26643 * C128) *
                         C48044 +
                     (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                      C48903 * C141 + C47923 * C133 + C26643 * C142) *
                         C49090 +
                     (C28456 + C28457 + C28458) * C48036 +
                     (C28459 + C28460 + C28461) * C49097 +
                     (C29579 + C29578 + C29577) * C48050 +
                     (C29576 + C29575 + C29574) * C36785) *
                        C48996 * C721 -
                    ((C47923 * C2734 + C26643 * C2742 + C47913 * C2735 +
                      C48903 * C2743 + C47917 * C2736 + C48895 * C2744) *
                         C36785 +
                     (C47923 * C2730 + C26643 * C2737 + C47913 * C2731 +
                      C48903 * C2738 + C47917 * C2732 + C48895 * C2739) *
                         C48050 +
                     (C29574 + C29575 + C29576) * C49097 +
                     (C29577 + C29578 + C29579) * C48036 +
                     (C28461 + C28460 + C28459) * C49090 +
                     (C28458 + C28457 + C28456) * C48044) *
                        C48996 * C49281) *
                       C229 +
                   ((C29018 * C48044 + C29019 * C49090 +
                     (C29025 + C29024 + C29023) * C48036 +
                     (C29022 + C29021 + C29020) * C49097 +
                     (C47917 * C3220 + C48895 * C3223 + C47913 * C3221 +
                      C48903 * C3224 + C47923 * C3222 + C26643 * C3225) *
                         C48050 +
                     (C47917 * C3226 + C48895 * C3229 + C47913 * C3227 +
                      C48903 * C3230 + C47923 * C3228 + C26643 * C3231) *
                         C36785) *
                        C48996 * C49281 -
                    ((C29020 + C29021 + C29022) * C36785 +
                     (C29023 + C29024 + C29025) * C48050 + C29026 * C49097 +
                     C29027 * C48036 + (C26850 + C26849 + C26848) * C49090 +
                     (C26847 + C26846 + C26845) * C48044) *
                        C48996 * C721) *
                       C49279) *
                  C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C47917 * C119 + C48895 * C126 + C47913 * C120 +
                     C48903 * C127 + C47923 * C121 + C26643 * C128) *
                        C48044 +
                    (C47917 * C131 + C48895 * C140 + C47913 * C132 +
                     C48903 * C141 + C47923 * C133 + C26643 * C142) *
                        C49090 +
                    (C28456 + C28457 + C28458) * C48036 +
                    (C28459 + C28460 + C28461) * C49097 + C37918 * C48050 +
                    C37919 * C36785) *
                       C48996 * C867 -
                   ((C37920 + C37921 + C37922) * C36785 +
                    (C37923 + C37924 + C37925) * C48050 +
                    (C29574 + C29575 + C29576) * C49097 +
                    (C29577 + C29578 + C29579) * C48036 +
                    (C28461 + C28460 + C28459) * C49090 +
                    (C28458 + C28457 + C28456) * C48044) *
                       C48996 * C868 +
                   (C37918 * C48044 + C37919 * C49090 +
                    (C37925 + C37924 + C37923) * C48036 +
                    (C37922 + C37921 + C37920) * C49097 +
                    (C47917 * C3652 + C48895 * C3655 + C47913 * C3653 +
                     C48903 * C3656 + C47923 * C3654 + C26643 * C3657) *
                        C48050 +
                    (C47917 * C3658 + C48895 * C3661 + C47913 * C3659 +
                     C48903 * C3662 + C47923 * C3660 + C26643 * C3663) *
                        C36785) *
                       C48996 * C869) *
                  C48961 * C48927) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C22511 * C345 + C49325 * C356 + C22512 * C344 + C49318 * C355 +
            C22513 * C343 + C49305 * C354 + C22514 * C342 + C49288 * C353) *
               C31305 +
           (C22511 * C351 + C49325 * C363 + C22512 * C350 + C49318 * C362 +
            C22513 * C349 + C49305 * C361 + C22514 * C348 + C49288 * C360) *
               C49094) *
              C48996 * C48978 * C48961 * C110 -
          ((C22514 * C347 + C49288 * C359 + C22513 * C348 + C49305 * C360 +
            C22512 * C349 + C49318 * C361 + C22511 * C350 + C49325 * C362) *
               C49094 +
           (C22514 * C341 + C49288 * C352 + C22513 * C342 + C49305 * C353 +
            C22512 * C343 + C49318 * C354 + C22511 * C344 + C49325 * C355) *
               C31305 +
           (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
            C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
               C31302 +
           (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
            C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
               C31304) *
              C48996 * C48978 * C48961 * C111 +
          ((C22511 * C121 + C49325 * C128 + C22512 * C122 + C49318 * C129 +
            C22513 * C123 + C49305 * C130 + C22514 * C124 + C49288 * C137) *
               C31304 +
           (C22511 * C133 + C49325 * C142 + C22512 * C134 + C49318 * C143 +
            C22513 * C135 + C49305 * C144 + C22514 * C136 + C49288 * C145) *
               C31302 +
           (C22511 * C343 + C49325 * C354 + C22512 * C342 + C49318 * C353 +
            C22513 * C341 + C49305 * C352 + C22514 * C346 + C49288 * C357) *
               C31305 +
           (C22511 * C349 + C49325 * C361 + C22512 * C348 + C49318 * C360 +
            C22513 * C347 + C49305 * C359 + C22514 * C358 + C49288 * C364) *
               C49094) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
            C30469 * C49094) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
            (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
               C49284 +
           ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
            (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
               C49307 +
           ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
            (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                C31302 +
            (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                C31304) *
               C49319) *
              C48978 * C48961 * C111 +
          (((C23691 * C121 + C23685 * C128 + C23692 * C122 + C48900 * C129) *
                C31304 +
            (C23691 * C133 + C23685 * C142 + C23692 * C134 + C48900 * C143) *
                C31302 +
            (C23691 * C343 + C23685 * C354 + C23692 * C342 + C48900 * C353) *
                C31305 +
            (C23691 * C349 + C23685 * C361 + C23692 * C348 + C48900 * C360) *
                C49094) *
               C49319 +
           ((C23691 * C235 + C23685 * C246 + C23692 * C234 + C48900 * C245) *
                C31304 +
            (C23691 * C241 + C23685 * C253 + C23692 * C240 + C48900 * C252) *
                C31302 +
            (C23691 * C621 + C23685 * C626 + C23692 * C622 + C48900 * C627) *
                C31305 +
            (C23691 * C631 + C23685 * C636 + C23692 * C632 + C48900 * C637) *
                C49094) *
               C49307 +
           ((C23691 * C519 + C23685 * C524 + C23692 * C520 + C48900 * C525) *
                C31304 +
            (C23691 * C529 + C23685 * C534 + C23692 * C530 + C48900 * C535) *
                C31302 +
            (C23691 * C1389 + C23685 * C1396 + C23692 * C1392 +
             C48900 * C1399) *
                C31305 +
            (C23691 * C1393 + C23685 * C1401 + C23692 * C1400 +
             C48900 * C1404) *
                C49094) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C22511 * C345 + C49325 * C356 + C22512 * C344 + C49318 * C355 +
             C22513 * C343 + C49305 * C354 + C22514 * C342 + C49288 * C353) *
                C31305 +
            (C22511 * C351 + C49325 * C363 + C22512 * C350 + C49318 * C362 +
             C22513 * C349 + C49305 * C361 + C22514 * C348 + C49288 * C360) *
                C49094) *
               C48996 * C48978 * C229 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C22686 + C22687 + C22688 + C22689) * C31304 +
            (C22690 + C22691 + C22692 + C22693) * C31302 +
            (C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
             C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                C31305 +
            (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
             C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C22514 * C347 + C49288 * C359 + C22513 * C348 + C49305 * C360 +
             C22512 * C349 + C49318 * C361 + C22511 * C350 + C49325 * C362) *
                C49094 +
            (C22514 * C341 + C49288 * C352 + C22513 * C342 + C49305 * C353 +
             C22512 * C343 + C49318 * C354 + C22511 * C344 + C49325 * C355) *
                C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C48978 * C229 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C48978 * C49279) *
              C231 +
          ((((C23884 + C23885) * C31304 + (C23886 + C23887) * C31302 +
             (C25168 + C25169) * C31305 + (C25170 + C25171) * C49094) *
                C49319 +
            ((C23888 + C23889) * C31304 + (C23890 + C23891) * C31302 +
             (C29928 + C29929) * C31305 + (C29930 + C29931) * C49094) *
                C49307 +
            ((C23892 + C23893) * C31304 + (C23894 + C23895) * C31302 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C339 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C31607 + C31608 + C31609 + C31610) * C31304 +
            (C31611 + C31612 + C31613 + C31614) * C31302 +
            (C22511 * C871 + C49325 * C876 + C22512 * C872 + C49318 * C877 +
             C22513 * C873 + C49305 * C878 + C22514 * C874 + C49288 * C879) *
                C31305 +
            (C22511 * C881 + C49325 * C886 + C22512 * C882 + C49318 * C887 +
             C22513 * C883 + C49305 * C888 + C22514 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C48961 * C231 +
          ((((C25410 + C25411) * C31304 + (C25412 + C25413) * C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49094) *
                C49319 +
            ((C25168 + C25169) * C31304 + (C25170 + C25171) * C31302 +
             (C25172 + C25173) * C31305 + (C25174 + C25175) * C49094) *
                C49307 +
            ((C29928 + C29929) * C31304 + (C29930 + C29931) * C31302 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C48978 * C447 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C22686 + C22687 + C22688 + C22689) * C31304 +
            (C22690 + C22691 + C22692 + C22693) * C31302 +
            (C22511 * C620 + C49325 * C625 + C22512 * C621 + C49318 * C626 +
             C22513 * C622 + C49305 * C627 + C22514 * C623 + C49288 * C628) *
                C31305 +
            (C22511 * C630 + C49325 * C635 + C22512 * C631 + C49318 * C636 +
             C22513 * C632 + C49305 * C637 + C22514 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            (C24254 * C31304 + C24255 * C31302 + C30468 * C31305 +
             C30469 * C49094) *
                C49284) *
               C48978 * C447 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C48978 * C49279) *
              C449 +
          ((((C23884 + C23885) * C31304 + (C23886 + C23887) * C31302 +
             (C25168 + C25169) * C31305 + (C25170 + C25171) * C49094) *
                C49319 +
            ((C23888 + C23889) * C31304 + (C23890 + C23891) * C31302 +
             (C29928 + C29929) * C31305 + (C29930 + C29931) * C49094) *
                C49307 +
            ((C23892 + C23893) * C31304 + (C23894 + C23895) * C31302 +
             (C23691 * C1845 + C23685 * C1848 + C23692 * C1846 +
              C48900 * C1849) *
                 C31305 +
             (C23691 * C1851 + C23685 * C1854 + C23692 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C31599 + C31600 + C31601 + C31602) * C31305 +
           (C31603 + C31604 + C31605 + C31606) * C49094) *
              C48996 * C48978 * C513 -
          ((C23222 + C23223 + C23224 + C23225) * C49094 +
           (C23226 + C23227 + C23228 + C23229) * C31305 +
           (C22685 + C22684 + C22683 + C22682) * C31302 +
           (C22681 + C22680 + C22679 + C22678) * C31304) *
              C48996 * C48978 * C514 +
          ((C23075 + C23074 + C23073 + C23072) * C31304 +
           (C23071 + C23070 + C23069 + C23068) * C31302 +
           (C22511 * C1391 + C49325 * C1398 + C22512 * C1390 + C49318 * C1397 +
            C22513 * C1389 + C49305 * C1396 + C22514 * C1392 + C49288 * C1399) *
               C31305 +
           (C22511 * C1395 + C49325 * C1403 + C22512 * C1394 + C49318 * C1402 +
            C22513 * C1393 + C49305 * C1401 + C22514 * C1400 + C49288 * C1404) *
               C49094) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           C33235 * C49284) *
              C48978 * C513 -
          (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
            (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
               C49284 +
           (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
            (C23877 + C23876) * C31304) *
               C49307 +
           (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
            (C23873 + C23872) * C31304) *
               C49319) *
              C48978 * C514 +
          (C33235 * C49319 +
           (C24256 * C31304 + C24257 * C31302 + (C24433 + C24432) * C31305 +
            (C24431 + C24430) * C49094) *
               C49307 +
           ((C24273 + C24272) * C31304 + (C24271 + C24270) * C31302 +
            (C23691 * C9297 + C23685 * C9300 + C23692 * C9298 +
             C48900 * C9301) *
                C31305 +
            (C23691 * C9299 + C23685 * C9303 + C23692 * C9302 +
             C48900 * C9304) *
                C49094) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C339 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C447 +
          (((C23229 + C23228 + C23227 + C23226) * C31304 +
            (C23225 + C23224 + C23223 + C23222) * C31302 +
            (C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C31305 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C339 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C447 +
          (((C25964 * C31304 + C25965 * C31302 + C25966 * C31305 +
             C25967 * C49094) *
                C49319 +
            (C30468 * C31304 + C30469 * C31302 + (C25769 + C25768) * C31305 +
             (C25767 + C25766) * C49094) *
                C49307 +
            ((C24433 + C24432) * C31304 + (C24431 + C24430) * C31302 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C721 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C31607 + C31608 + C31609 + C31610) * C31304 +
            (C31611 + C31612 + C31613 + C31614) * C31302 +
            (C22511 * C871 + C49325 * C876 + C22512 * C872 + C49318 * C877 +
             C22513 * C873 + C49305 * C878 + C22514 * C874 + C49288 * C879) *
                C31305 +
            (C22511 * C881 + C49325 * C886 + C22512 * C882 + C49318 * C887 +
             C22513 * C883 + C49305 * C888 + C22514 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C31614 + C31613 + C31612 + C31611) * C49094 +
            (C31610 + C31609 + C31608 + C31607) * C31305 +
            (C22514 * C135 + C49288 * C144 + C22513 * C134 + C49305 * C143 +
             C22512 * C133 + C49318 * C142 + C22511 * C132 + C49325 * C141) *
                C31302 +
            (C22514 * C123 + C49288 * C130 + C22513 * C122 + C49305 * C129 +
             C22512 * C121 + C49318 * C128 + C22511 * C120 + C49325 * C127) *
                C31304) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C48961 * C449 +
          ((((C25410 + C25411) * C31304 + (C25412 + C25413) * C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49094) *
                C49319 +
            ((C25168 + C25169) * C31304 + (C25170 + C25171) * C31302 +
             (C25172 + C25173) * C31305 + (C25174 + C25175) * C49094) *
                C49307 +
            ((C29928 + C29929) * C31304 + (C29930 + C29931) * C31302 +
             (C23691 * C2298 + C23685 * C2307 + C23692 * C2299 +
              C48900 * C2308) *
                 C31305 +
             (C23691 * C2310 + C23685 * C2316 + C23692 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C29931 + C29930) * C49094 + (C29929 + C29928) * C31305 +
             (C23891 + C23890) * C31302 + (C23889 + C23888) * C31304) *
                C49284 +
            ((C25171 + C25170) * C49094 + (C25169 + C25168) * C31305 +
             (C23887 + C23886) * C31302 + (C23885 + C23884) * C31304) *
                C49307 +
            ((C25413 + C25412) * C49094 + (C25411 + C25410) * C31305 +
             (C23692 * C133 + C48900 * C142 + C23691 * C132 + C23685 * C141) *
                 C31302 +
             (C23692 * C121 + C48900 * C128 + C23691 * C120 + C23685 * C127) *
                 C31304) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
             C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
                C31304 +
            (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
             C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
                C31302 +
            (C31599 + C31600 + C31601 + C31602) * C31305 +
            (C31603 + C31604 + C31605 + C31606) * C49094) *
               C48996 * C721 -
           ((C22514 * C883 + C49288 * C888 + C22513 * C882 + C49305 * C887 +
             C22512 * C881 + C49318 * C886 + C22511 * C880 + C49325 * C885) *
                C49094 +
            (C22514 * C873 + C49288 * C878 + C22513 * C872 + C49305 * C877 +
             C22512 * C871 + C49318 * C876 + C22511 * C870 + C49325 * C875) *
                C31305 +
            (C31606 + C31605 + C31604 + C31603) * C31302 +
            (C31602 + C31601 + C31600 + C31599) * C31304) *
               C48996 * C49281) *
              C229 +
          (((C23229 + C23228 + C23227 + C23226) * C31304 +
            (C23225 + C23224 + C23223 + C23222) * C31302 +
            (C22511 * C2294 + C49325 * C2300 + C22512 * C2295 + C49318 * C2301 +
             C22513 * C2296 + C49305 * C2302 + C22514 * C2580 +
             C49288 * C2581) *
                C31305 +
            (C22511 * C2303 + C49325 * C2312 + C22512 * C2304 + C49318 * C2313 +
             C22513 * C2305 + C49305 * C2314 + C22514 * C2582 +
             C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C23222 + C23223 + C23224 + C23225) * C49094 +
            (C23226 + C23227 + C23228 + C23229) * C31305 +
            (C22685 + C22684 + C22683 + C22682) * C31302 +
            (C22681 + C22680 + C22679 + C22678) * C31304) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                 C31304 +
             (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                 C31302 +
             (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
                C49319 +
            ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
             C25964 * C31305 + C25965 * C49094) *
                C49307 +
            C33235 * C49284) *
               C721 -
           (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
             C30669 * C31302 + C30670 * C31304) *
                C49284 +
            (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
             C25979 * C31304) *
                C49307 +
            ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
             (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
                C49319) *
               C49281) *
              C229 +
          (((C25964 * C31304 + C25965 * C31302 + C25966 * C31305 +
             C25967 * C49094) *
                C49319 +
            (C30468 * C31304 + C30469 * C31302 + (C25769 + C25768) * C31305 +
             (C25767 + C25766) * C49094) *
                C49307 +
            ((C24433 + C24432) * C31304 + (C24431 + C24430) * C31302 +
             (C23691 * C9808 + C23685 * C9810 + C23692 * C10072 +
              C48900 * C10073) *
                 C31305 +
             (C23691 * C9811 + C23685 * C9814 + C23692 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C24430 + C24431) * C49094 + (C24432 + C24433) * C31305 +
             (C23883 + C23882) * C31302 + (C23881 + C23880) * C31304) *
                C49284 +
            (C30669 * C49094 + C30670 * C31305 + (C23879 + C23878) * C31302 +
             (C23877 + C23876) * C31304) *
                C49307 +
            (C25978 * C49094 + C25979 * C31305 + (C23875 + C23874) * C31302 +
             (C23873 + C23872) * C31304) *
                C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C119 + C49325 * C126 + C22512 * C120 + C49318 * C127 +
            C22513 * C121 + C49305 * C128 + C22514 * C122 + C49288 * C129) *
               C31304 +
           (C22511 * C131 + C49325 * C140 + C22512 * C132 + C49318 * C141 +
            C22513 * C133 + C49305 * C142 + C22514 * C134 + C49288 * C143) *
               C31302 +
           (C31599 + C31600 + C31601 + C31602) * C31305 +
           (C31603 + C31604 + C31605 + C31606) * C49094) *
              C48996 * C867 -
          ((C32347 + C32348 + C32349 + C32350) * C49094 +
           (C32351 + C32352 + C32353 + C32354) * C31305 +
           (C31606 + C31605 + C31604 + C31603) * C31302 +
           (C31602 + C31601 + C31600 + C31599) * C31304) *
              C48996 * C868 +
          ((C32354 + C32353 + C32352 + C32351) * C31304 +
           (C32350 + C32349 + C32348 + C32347) * C31302 +
           (C22511 * C2732 + C49325 * C2739 + C22512 * C2731 + C49318 * C2738 +
            C22513 * C2730 + C49305 * C2737 + C22514 * C2733 + C49288 * C2740) *
               C31305 +
           (C22511 * C2736 + C49325 * C2744 + C22512 * C2735 + C49318 * C2743 +
            C22513 * C2734 + C49305 * C2742 + C22514 * C2741 + C49288 * C2745) *
               C49094) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23691 * C119 + C23685 * C126 + C23692 * C120 + C48900 * C127) *
                C31304 +
            (C23691 * C131 + C23685 * C140 + C23692 * C132 + C48900 * C141) *
                C31302 +
            (C25402 + C25403) * C31305 + (C25404 + C25405) * C49094) *
               C49319 +
           ((C23872 + C23873) * C31304 + (C23874 + C23875) * C31302 +
            C25964 * C31305 + C25965 * C49094) *
               C49307 +
           C33235 * C49284) *
              C867 -
          (((C25766 + C25767) * C49094 + (C25768 + C25769) * C31305 +
            C30669 * C31302 + C30670 * C31304) *
               C49284 +
           (C25976 * C49094 + C25977 * C31305 + C25978 * C31302 +
            C25979 * C31304) *
               C49307 +
           ((C25409 + C25408) * C49094 + (C25407 + C25406) * C31305 +
            (C25405 + C25404) * C31302 + (C25403 + C25402) * C31304) *
               C49319) *
              C868 +
          ((C26518 * C31304 + C26519 * C31302 + (C26531 + C26530) * C31305 +
            (C26529 + C26528) * C49094) *
               C49319 +
           (C25966 * C31304 + C25967 * C31302 + (C25983 + C25982) * C31305 +
            (C25981 + C25980) * C49094) *
               C49307 +
           ((C25769 + C25768) * C31304 + (C25767 + C25766) * C31302 +
            (C23691 * C10282 + C23685 * C10285 + C23692 * C10283 +
             C48900 * C10286) *
                C31305 +
            (C23691 * C10284 + C23685 * C10288 + C23692 * C10287 +
             C48900 * C10289) *
                C49094) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3790 * C237 + C3784 * C248 + C3791 * C236 + C3785 * C247 +
             C3792 * C235 + C3786 * C246 + C3793 * C234 + C49288 * C245) *
                C118 +
            (C3790 * C243 + C3784 * C255 + C3791 * C242 + C3785 * C254 +
             C3792 * C241 + C3786 * C253 + C3793 * C240 + C49288 * C252) *
                C49007) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C3793 * C239 + C49288 * C251 + C3792 * C240 + C3786 * C252 +
             C3791 * C241 + C3785 * C253 + C3790 * C242 + C3784 * C254) *
                C49007 +
            (C3793 * C233 + C49288 * C244 + C3792 * C234 + C3786 * C245 +
             C3791 * C235 + C3785 * C246 + C3790 * C236 + C3784 * C247) *
                C118) *
               C49054 +
           ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49007 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C118) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
             C3792 * C123 + C3786 * C130 + C3793 * C124 + C49288 * C137) *
                C118 +
            (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
             C3792 * C135 + C3786 * C144 + C3793 * C136 + C49288 * C145) *
                C49007) *
               C49251 +
           ((C3790 * C235 + C3784 * C246 + C3791 * C234 + C3785 * C245 +
             C3792 * C233 + C3786 * C244 + C3793 * C238 + C49288 * C249) *
                C118 +
            (C3790 * C241 + C3784 * C253 + C3791 * C240 + C3785 * C252 +
             C3792 * C239 + C3786 * C251 + C3793 * C250 + C49288 * C256) *
                C49007) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C47907 * C237 + C49229 * C248 + C47888 * C236 + C48900 * C247) *
                C118 +
            (C47907 * C243 + C49229 * C255 + C47888 * C242 + C48900 * C254) *
                C49007) *
               C11278 +
           ((C47907 * C517 + C49229 * C522 + C47888 * C518 + C48900 * C523) *
                C118 +
            (C47907 * C527 + C49229 * C532 + C47888 * C528 + C48900 * C533) *
                C49007) *
               C11279 +
           ((C47907 * C1157 + C49229 * C1164 + C47888 * C1156 +
             C48900 * C1163) *
                C118 +
            (C47907 * C1161 + C49229 * C1169 + C47888 * C1160 +
             C48900 * C1168) *
                C49007) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C47888 * C1159 + C48900 * C1167 + C47907 * C1160 +
             C49229 * C1168) *
                C49007 +
            (C47888 * C1155 + C48900 * C1162 + C47907 * C1156 +
             C49229 * C1163) *
                C118) *
               C49294 +
           ((C47888 * C529 + C48900 * C534 + C47907 * C528 + C49229 * C533) *
                C49007 +
            (C47888 * C519 + C48900 * C524 + C47907 * C518 + C49229 * C523) *
                C118) *
               C11279 +
           ((C47888 * C241 + C48900 * C253 + C47907 * C242 + C49229 * C254) *
                C49007 +
            (C47888 * C235 + C48900 * C246 + C47907 * C236 + C49229 * C247) *
                C118) *
               C11278 +
           ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C49007 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C118) *
               C11277) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C118 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C49007) *
               C11277 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C118 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C49007) *
               C11278 +
           ((C47907 * C519 + C49229 * C524 + C47888 * C520 + C48900 * C525) *
                C118 +
            (C47907 * C529 + C49229 * C534 + C47888 * C530 + C48900 * C535) *
                C49007) *
               C11279 +
           ((C47907 * C1155 + C49229 * C1162 + C47888 * C1158 +
             C48900 * C1165) *
                C118 +
            (C47907 * C1159 + C49229 * C1167 + C47888 * C1166 +
             C48900 * C1170) *
                C49007) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C48978 * C229 -
           (((C3793 * C530 + C49288 * C535 + C3792 * C529 + C3786 * C534 +
              C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                 C49007 +
             (C3793 * C520 + C49288 * C525 + C3792 * C519 + C3786 * C524 +
              C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                 C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C3965 + C3966 + C3967 + C3968) * C118 +
             (C3969 + C3970 + C3971 + C3972) * C49007) *
                C49251 +
            ((C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
              C3792 * C520 + C3786 * C525 + C3793 * C521 + C49288 * C526) *
                 C118 +
             (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
              C3792 * C530 + C3786 * C535 + C3793 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C48978 * C229 -
           (((C47888 * C1668 + C48900 * C1671 + C47907 * C1667 +
              C49229 * C1670) *
                 C49007 +
             (C47888 * C1662 + C48900 * C1665 + C47907 * C1661 +
              C49229 * C1664) *
                 C118) *
                C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C118 + (C11476 + C11477) * C49007) * C11277 +
            ((C11478 + C11479) * C118 + (C11480 + C11481) * C49007) * C11278 +
            ((C11482 + C11483) * C118 + (C11484 + C11485) * C49007) * C11279 +
            ((C47907 * C1662 + C49229 * C1665 + C47888 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C47907 * C1668 + C49229 * C1671 + C47888 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C339 -
           (((C3793 * C632 + C49288 * C637 + C3792 * C631 + C3786 * C636 +
              C3791 * C630 + C3785 * C635 + C3790 * C629 + C3784 * C634) *
                 C49007 +
             (C3793 * C622 + C49288 * C627 + C3792 * C621 + C3786 * C626 +
              C3791 * C620 + C3785 * C625 + C3790 * C619 + C3784 * C624) *
                 C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C48961 * C231 +
          ((((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
              C3792 * C342 + C3786 * C353 + C3793 * C341 + C49288 * C352) *
                 C118 +
             (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
              C3792 * C348 + C3786 * C360 + C3793 * C347 + C49288 * C359) *
                 C49007) *
                C49251 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C339 -
           (((C47888 * C1851 + C48900 * C1854 + C47907 * C1850 +
              C49229 * C1853) *
                 C49007 +
             (C47888 * C1845 + C48900 * C1848 + C47907 * C1844 +
              C49229 * C1847) *
                 C118) *
                C49294 +
            ((C47888 * C1394 + C48900 * C1402 + C47907 * C1395 +
              C49229 * C1403) *
                 C49007 +
             (C47888 * C1390 + C48900 * C1397 + C47907 * C1391 +
              C49229 * C1398) *
                 C118) *
                C11279 +
            ((C47888 * C630 + C48900 * C635 + C47907 * C629 + C49229 * C634) *
                 C49007 +
             (C47888 * C620 + C48900 * C625 + C47907 * C619 + C49229 * C624) *
                 C118) *
                C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C48961 * C231 +
          ((((C47907 * C344 + C49229 * C355 + C47888 * C343 + C48900 * C354) *
                 C118 +
             (C47907 * C350 + C49229 * C362 + C47888 * C349 + C48900 * C361) *
                 C49007) *
                C11277 +
            ((C47907 * C620 + C49229 * C625 + C47888 * C621 + C48900 * C626) *
                 C118 +
             (C47907 * C630 + C49229 * C635 + C47888 * C631 + C48900 * C636) *
                 C49007) *
                C11278 +
            ((C47907 * C1390 + C49229 * C1397 + C47888 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C47907 * C1394 + C49229 * C1402 + C47888 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C11279 +
            ((C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C48978 * C447 -
           (((C3793 * C530 + C49288 * C535 + C3792 * C529 + C3786 * C534 +
              C3791 * C528 + C3785 * C533 + C3790 * C527 + C3784 * C532) *
                 C49007 +
             (C3793 * C520 + C49288 * C525 + C3792 * C519 + C3786 * C524 +
              C3791 * C518 + C3785 * C523 + C3790 * C517 + C3784 * C522) *
                 C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C3965 + C3966 + C3967 + C3968) * C118 +
             (C3969 + C3970 + C3971 + C3972) * C49007) *
                C49251 +
            ((C3790 * C518 + C3784 * C523 + C3791 * C519 + C3785 * C524 +
              C3792 * C520 + C3786 * C525 + C3793 * C521 + C49288 * C526) *
                 C118 +
             (C3790 * C528 + C3784 * C533 + C3791 * C529 + C3785 * C534 +
              C3792 * C530 + C3786 * C535 + C3793 * C531 + C49288 * C536) *
                 C49007) *
                C49054) *
               C48978 * C49279 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            ((C11466 + C11467) * C118 + (C11468 + C11469) * C49007) * C11279 +
            ((C11470 + C11471) * C118 + (C11472 + C11473) * C49007) * C49294) *
               C48978 * C447 -
           (((C47888 * C1668 + C48900 * C1671 + C47907 * C1667 +
              C49229 * C1670) *
                 C49007 +
             (C47888 * C1662 + C48900 * C1665 + C47907 * C1661 +
              C49229 * C1664) *
                 C118) *
                C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C118 + (C11476 + C11477) * C49007) * C11277 +
            ((C11478 + C11479) * C118 + (C11480 + C11481) * C49007) * C11278 +
            ((C11482 + C11483) * C118 + (C11484 + C11485) * C49007) * C11279 +
            ((C47907 * C1662 + C49229 * C1665 + C47888 * C1663 +
              C48900 * C1666) *
                 C118 +
             (C47907 * C1668 + C49229 * C1671 + C47888 * C1669 +
              C48900 * C1672) *
                 C49007) *
                C49294) *
               C48978 * C49279 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3957 + C3958 + C3959 + C3960) * C118 +
            (C3961 + C3962 + C3963 + C3964) * C49007) *
               C49054) *
              C48978 * C513 -
          (((C4347 + C4348 + C4349 + C4350) * C49007 +
            (C4351 + C4352 + C4353 + C4354) * C118) *
               C49054 +
           ((C3964 + C3963 + C3962 + C3961) * C49007 +
            (C3960 + C3959 + C3958 + C3957) * C118) *
               C49251) *
              C48978 * C514 +
          (((C4354 + C4353 + C4352 + C4351) * C118 +
            (C4350 + C4349 + C4348 + C4347) * C49007) *
               C49251 +
           ((C3790 * C1157 + C3784 * C1164 + C3791 * C1156 + C3785 * C1163 +
             C3792 * C1155 + C3786 * C1162 + C3793 * C1158 + C49288 * C1165) *
                C118 +
            (C3790 * C1161 + C3784 * C1169 + C3791 * C1160 + C3785 * C1168 +
             C3792 * C1159 + C3786 * C1167 + C3793 * C1166 + C49288 * C1170) *
                C49007) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
           C11864 * C11279 + C11865 * C49294) *
              C48978 * C513 -
          (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
           ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
           ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
           ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
              C48978 * C514 +
          (C11864 * C11277 + C11865 * C11278 +
           ((C11863 + C11862) * C118 + (C11861 + C11860) * C49007) * C11279 +
           ((C47907 * C9143 + C49229 * C9146 + C47888 * C9144 +
             C48900 * C9147) *
                C118 +
            (C47907 * C9145 + C49229 * C9149 + C47888 * C9148 +
             C48900 * C9150) *
                C49007) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C339 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C447 +
          ((((C4508 + C4507 + C4506 + C4505) * C118 +
             (C4504 + C4503 + C4502 + C4501) * C49007) *
                C49251 +
            ((C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
              C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
                 C118 +
             (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
              C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C4347 + C4348 + C4349 + C4350) * C49007 +
             (C4351 + C4352 + C4353 + C4354) * C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C339 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C447 +
          ((((C12031 + C12030) * C118 + (C12029 + C12028) * C49007) * C11277 +
            ((C12027 + C12026) * C118 + (C12025 + C12024) * C49007) * C11278 +
            ((C12023 + C12022) * C118 + (C12021 + C12020) * C49007) * C11279 +
            ((C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C721 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C3790 * C344 + C3784 * C355 + C3791 * C343 + C3785 * C354 +
              C3792 * C342 + C3786 * C353 + C3793 * C341 + C49288 * C352) *
                 C118 +
             (C3790 * C350 + C3784 * C362 + C3791 * C349 + C3785 * C361 +
              C3792 * C348 + C3786 * C360 + C3793 * C347 + C49288 * C359) *
                 C49007) *
                C49251 +
            ((C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
              C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                 C118 +
             (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
              C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                 C49007) *
                C49054) *
               C49281 -
           (((C3972 + C3971 + C3970 + C3969) * C49007 +
             (C3968 + C3967 + C3966 + C3965) * C118) *
                C49054 +
            ((C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
              C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                 C49007 +
             (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
              C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                 C118) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C721 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C48961 * C449 +
          ((((C47907 * C344 + C49229 * C355 + C47888 * C343 + C48900 * C354) *
                 C118 +
             (C47907 * C350 + C49229 * C362 + C47888 * C349 + C48900 * C361) *
                 C49007) *
                C11277 +
            ((C47907 * C620 + C49229 * C625 + C47888 * C621 + C48900 * C626) *
                 C118 +
             (C47907 * C630 + C49229 * C635 + C47888 * C631 + C48900 * C636) *
                 C49007) *
                C11278 +
            ((C47907 * C1390 + C49229 * C1397 + C47888 * C1389 +
              C48900 * C1396) *
                 C118 +
             (C47907 * C1394 + C49229 * C1402 + C47888 * C1393 +
              C48900 * C1401) *
                 C49007) *
                C11279 +
            ((C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C118 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11485 + C11484) * C49007 + (C11483 + C11482) * C118) * C49294 +
            ((C11481 + C11480) * C49007 + (C11479 + C11478) * C118) * C11279 +
            ((C11477 + C11476) * C49007 + (C11475 + C11474) * C118) * C11278 +
            ((C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49007 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C118) *
                C11277) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
              C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                 C118 +
             (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
              C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                 C49007) *
                C49251 +
            ((C3957 + C3958 + C3959 + C3960) * C118 +
             (C3961 + C3962 + C3963 + C3964) * C49007) *
                C49054) *
               C721 -
           (((C4501 + C4502 + C4503 + C4504) * C49007 +
             (C4505 + C4506 + C4507 + C4508) * C118) *
                C49054 +
            ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
              C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                 C49007 +
             (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
              C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                 C118) *
                C49251) *
               C49281) *
              C229 +
          ((((C4508 + C4507 + C4506 + C4505) * C118 +
             (C4504 + C4503 + C4502 + C4501) * C49007) *
                C49251 +
            ((C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
              C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
                 C118 +
             (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
              C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
                 C49007) *
                C49054) *
               C49281 -
           (((C4347 + C4348 + C4349 + C4350) * C49007 +
             (C4351 + C4352 + C4353 + C4354) * C118) *
                C49054 +
            ((C3964 + C3963 + C3962 + C3961) * C49007 +
             (C3960 + C3959 + C3958 + C3957) * C118) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C118 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49007) *
                C11277 +
            ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
            C11864 * C11279 + C11865 * C49294) *
               C721 -
           (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
            ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
            ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
            ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                 C49007 +
             (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                 C118) *
                C11277) *
               C49281) *
              C229 +
          ((((C12031 + C12030) * C118 + (C12029 + C12028) * C49007) * C11277 +
            ((C12027 + C12026) * C118 + (C12025 + C12024) * C49007) * C11278 +
            ((C12023 + C12022) * C118 + (C12021 + C12020) * C49007) * C11279 +
            ((C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
              C48900 * C9301) *
                 C118 +
             (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
              C48900 * C9304) *
                 C49007) *
                C49294) *
               C49281 -
           (((C11860 + C11861) * C49007 + (C11862 + C11863) * C118) * C49294 +
            ((C11473 + C11472) * C49007 + (C11471 + C11470) * C118) * C11279 +
            ((C11469 + C11468) * C49007 + (C11467 + C11466) * C118) * C11278 +
            ((C11465 + C11464) * C49007 + (C11463 + C11462) * C118) * C11277) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C118 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49007) *
               C49251 +
           ((C3957 + C3958 + C3959 + C3960) * C118 +
            (C3961 + C3962 + C3963 + C3964) * C49007) *
               C49054) *
              C867 -
          (((C4501 + C4502 + C4503 + C4504) * C49007 +
            (C4505 + C4506 + C4507 + C4508) * C118) *
               C49054 +
           ((C3793 * C348 + C49288 * C360 + C3792 * C349 + C3786 * C361 +
             C3791 * C350 + C3785 * C362 + C3790 * C351 + C3784 * C363) *
                C49007 +
            (C3793 * C342 + C49288 * C353 + C3792 * C343 + C3786 * C354 +
             C3791 * C344 + C3785 * C355 + C3790 * C345 + C3784 * C356) *
                C118) *
               C49251) *
              C868 +
          (((C3790 * C870 + C3784 * C875 + C3791 * C871 + C3785 * C876 +
             C3792 * C872 + C3786 * C877 + C3793 * C873 + C49288 * C878) *
                C118 +
            (C3790 * C880 + C3784 * C885 + C3791 * C881 + C3785 * C886 +
             C3792 * C882 + C3786 * C887 + C3793 * C883 + C49288 * C888) *
                C49007) *
               C49251 +
           ((C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C118 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49007) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C118 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49007) *
               C11277 +
           ((C11462 + C11463) * C118 + (C11464 + C11465) * C49007) * C11278 +
           C11864 * C11279 + C11865 * C49294) *
              C867 -
          (((C12020 + C12021) * C49007 + (C12022 + C12023) * C118) * C49294 +
           ((C12024 + C12025) * C49007 + (C12026 + C12027) * C118) * C11279 +
           ((C12028 + C12029) * C49007 + (C12030 + C12031) * C118) * C11278 +
           ((C47888 * C350 + C48900 * C362 + C47907 * C351 + C49229 * C363) *
                C49007 +
            (C47888 * C344 + C48900 * C355 + C47907 * C345 + C49229 * C356) *
                C118) *
               C11277) *
              C868 +
          (((C47907 * C870 + C49229 * C875 + C47888 * C871 + C48900 * C876) *
                C118 +
            (C47907 * C880 + C49229 * C885 + C47888 * C881 + C48900 * C886) *
                C49007) *
               C11277 +
           ((C47907 * C2294 + C49229 * C2300 + C47888 * C2295 +
             C48900 * C2301) *
                C118 +
            (C47907 * C2303 + C49229 * C2312 + C47888 * C2304 +
             C48900 * C2313) *
                C49007) *
               C11278 +
           ((C47907 * C2297 + C49229 * C2306 + C47888 * C2298 +
             C48900 * C2307) *
                C118 +
            (C47907 * C2309 + C49229 * C2315 + C47888 * C2310 +
             C48900 * C2316) *
                C49007) *
               C11279 +
           ((C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
             C48900 * C10073) *
                C118 +
            (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
             C48900 * C10075) *
                C49007) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            (C1892 + C1891 + C1890) * C4967 +
            (C1889 + C1888 + C1887) * C49094) *
               C49054) *
              C48978 * C48961 * C110 -
          (((C1008 * C632 + C49271 * C637 + C1007 * C631 + C1001 * C636 +
             C1006 * C630 + C1000 * C635) *
                C49094 +
            (C1008 * C622 + C49271 * C627 + C1007 * C621 + C1001 * C626 +
             C1006 * C620 + C1000 * C625) *
                C4967 +
            (C1237 + C1236 + C1235) * C49252 +
            (C1234 + C1233 + C1232) * C4966) *
               C49054 +
           ((C2812 + C2811 + C2810) * C49094 + (C2809 + C2808 + C2807) * C4967 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49252 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C4966) *
               C49251) *
              C48978 * C48961 * C111 +
          (((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
             C1008 * C123 + C49271 * C130) *
                C4966 +
            (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
             C1008 * C135 + C49271 * C144) *
                C49252 +
            (C1006 * C343 + C1000 * C354 + C1007 * C342 + C1001 * C353 +
             C1008 * C341 + C49271 * C352) *
                C4967 +
            (C1006 * C349 + C1000 * C361 + C1007 * C348 + C1001 * C360 +
             C1008 * C347 + C49271 * C359) *
                C49094) *
               C49251 +
           ((C1006 * C235 + C1000 * C246 + C1007 * C234 + C1001 * C245 +
             C1008 * C233 + C49271 * C244) *
                C4966 +
            (C1006 * C241 + C1000 * C253 + C1007 * C240 + C1001 * C252 +
             C1008 * C239 + C49271 * C251) *
                C49252 +
            (C1006 * C621 + C1000 * C626 + C1007 * C622 + C1001 * C627 +
             C1008 * C623 + C49271 * C628) *
                C4967 +
            (C1006 * C631 + C1000 * C636 + C1007 * C632 + C1001 * C637 +
             C1008 * C633 + C49271 * C638) *
                C49094) *
               C49054) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C9184 * C4966 + C9185 * C49252 + C9574 * C4967 + C9573 * C49094) *
               C11278 +
           (C9186 * C4966 + C9187 * C49252 + C9572 * C4967 + C9571 * C49094) *
               C11279 +
           (C9188 * C4966 + C9189 * C49252 + C9570 * C4967 + C9569 * C49094) *
               C49294) *
              C48978 * C48961 * C110 -
          (((C9060 * C1851 + C48890 * C1854) * C49094 +
            (C9060 * C1845 + C48890 * C1848) * C4967 + C9197 * C49252 +
            C9196 * C4966) *
               C49294 +
           (C10122 * C49094 + C10121 * C4967 + C9195 * C49252 + C9194 * C4966) *
               C11279 +
           (C10118 * C49094 + C10117 * C4967 + C9193 * C49252 + C9192 * C4966) *
               C11278 +
           (C10312 * C49094 + C10311 * C4967 +
            (C9060 * C132 + C48890 * C141) * C49252 +
            (C9060 * C120 + C48890 * C127) * C4966) *
               C11277) *
              C48978 * C48961 * C111 +
          (((C9060 * C121 + C48890 * C128) * C4966 +
            (C9060 * C133 + C48890 * C142) * C49252 +
            (C9060 * C343 + C48890 * C354) * C4967 +
            (C9060 * C349 + C48890 * C361) * C49094) *
               C11277 +
           ((C9060 * C235 + C48890 * C246) * C4966 +
            (C9060 * C241 + C48890 * C253) * C49252 +
            (C9060 * C621 + C48890 * C626) * C4967 +
            (C9060 * C631 + C48890 * C636) * C49094) *
               C11278 +
           ((C9060 * C519 + C48890 * C524) * C4966 +
            (C9060 * C529 + C48890 * C534) * C49252 +
            (C9060 * C1389 + C48890 * C1396) * C4967 +
            (C9060 * C1393 + C48890 * C1401) * C49094) *
               C11279 +
           ((C9060 * C1155 + C48890 * C1162) * C4966 +
            (C9060 * C1159 + C48890 * C1167) * C49252 +
            (C9060 * C1846 + C48890 * C1849) * C4967 +
            (C9060 * C1852 + C48890 * C1855) * C49094) *
               C49294) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 +
             (C1892 + C1891 + C1890) * C4967 +
             (C1889 + C1888 + C1887) * C49094) *
                C49054) *
               C48978 * C229 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            ((C1887 + C1888 + C1889) * C49094 +
             (C1890 + C1891 + C1892) * C4967 +
             (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C48978 * C49279) *
              C231 +
          ((((C1232 + C1233 + C1234) * C4966 +
             (C1235 + C1236 + C1237) * C49252 +
             (C6369 + C6370 + C6371) * C4967 +
             (C6372 + C6373 + C6374) * C49094) *
                C49251 +
            ((C1238 + C1239 + C1240) * C4966 +
             (C1241 + C1242 + C1243) * C49252 +
             (C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C4967 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49094) *
                C49054) *
               C48978 * C49279 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 +
            (C14323 + C14324 + C14325 + C14326) * C11279 +
            (C14327 + C14328 + C14329 + C14330) * C49294) *
               C48978 * C229 -
           ((C9567 * C49094 + C9568 * C4967 + C9191 * C49252 + C9190 * C4966) *
                C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C48978 * C49279) *
              C231 +
          (((C14331 + C14332 + C14333 + C14334) * C11277 +
            (C14335 + C14336 + C14337 + C14338) * C11278 +
            (C14339 + C14340 + C14347 + C14348) * C11279 +
            (C9198 * C4966 + C9199 * C49252 +
             (C9060 * C9298 + C48890 * C9301) * C4967 +
             (C9060 * C9302 + C48890 * C9304) * C49094) *
                C49294) *
               C48978 * C49279 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C4966 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49252 +
                      (C2795 + C2796 + C2797) * C4967 +
                      (C2798 + C2799 + C2800) * C49094) *
                         C49251 +
                     ((C1220 + C1221 + C1222) * C4966 +
                      (C1223 + C1224 + C1225) * C49252 +
                      (C1892 + C1891 + C1890) * C4967 +
                      (C1889 + C1888 + C1887) * C49094) *
                         C49054) *
                        C339 -
                    (((C3250 + C3249 + C3248) * C49094 +
                      (C3247 + C3246 + C3245) * C4967 +
                      (C1887 + C1888 + C1889) * C49252 +
                      (C1890 + C1891 + C1892) * C4966) *
                         C49054 +
                     ((C2806 + C2805 + C2804) * C49094 +
                      (C2803 + C2802 + C2801) * C4967 +
                      (C2800 + C2799 + C2798) * C49252 +
                      (C2797 + C2796 + C2795) * C4966) *
                         C49251) *
                        C49281) *
                       C48961 * C231 +
                   ((((C2807 + C2808 + C2809) * C4966 +
                      (C2810 + C2811 + C2812) * C49252 +
                      (C2813 + C2814 + C2815) * C4967 +
                      (C2816 + C2817 + C2818) * C49094) *
                         C49251 +
                     ((C6369 + C6370 + C6371) * C4966 +
                      (C6372 + C6373 + C6374) * C49252 +
                      (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 +
                       C1001 * C2302 + C1008 * C2580 + C49271 * C2581) *
                          C4967 +
                      (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 +
                       C1001 * C2314 + C1008 * C2582 + C49271 * C2583) *
                          C49094) *
                         C49054) *
                        C49281 -
                    (((C6374 + C6373 + C6372) * C49094 +
                      (C6371 + C6370 + C6369) * C4967 +
                      (C1237 + C1236 + C1235) * C49252 +
                      (C1234 + C1233 + C1232) * C4966) *
                         C49054 +
                     ((C2812 + C2811 + C2810) * C49094 +
                      (C2809 + C2808 + C2807) * C4967 +
                      (C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49252 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C4966) *
                         C49251) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C4966 +
                      (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
                      C10308 * C49094) *
                         C11277 +
                     (C14319 + C14320 + C14321 + C14322) * C11278 +
                     (C14323 + C14324 + C14325 + C14326) * C11279 +
                     (C14327 + C14328 + C14329 + C14330) * C49294) *
                        C339 -
                    ((C10581 * C49094 + C10582 * C4967 + C9569 * C49252 +
                      C9570 * C4966) *
                         C49294 +
                     (C10116 * C49094 + C10115 * C4967 + C9571 * C49252 +
                      C9572 * C4966) *
                         C11279 +
                     (C10114 * C49094 + C10113 * C4967 + C9573 * C49252 +
                      C9574 * C4966) *
                         C11278 +
                     (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
                      C10307 * C4966) *
                         C11277) *
                        C49281) *
                       C48961 * C231 +
                   (((C10311 * C4966 + C10312 * C49252 + C10313 * C4967 +
                      C10314 * C49094) *
                         C11277 +
                     (C10117 * C4966 + C10118 * C49252 + C10119 * C4967 +
                      C10120 * C49094) *
                         C11278 +
                     (C10121 * C4966 + C10122 * C49252 + C10123 * C4967 +
                      C10124 * C49094) *
                         C11279 +
                     (C14345 * C4966 + C14346 * C49252 +
                      (C9060 * C10072 + C48890 * C10073) * C4967 +
                      (C9060 * C10074 + C48890 * C10075) * C49094) *
                         C49294) *
                        C49281 -
                    ((C14348 + C14347 + C14340 + C14339) * C49294 +
                     (C14338 + C14337 + C14336 + C14335) * C11279 +
                     (C14334 + C14333 + C14332 + C14331) * C11278 +
                     (C10312 * C49094 + C10311 * C4967 +
                      (C9060 * C132 + C48890 * C141) * C49252 +
                      (C9060 * C120 + C48890 * C127) * C4966) *
                         C11277) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 +
             (C1892 + C1891 + C1890) * C4967 +
             (C1889 + C1888 + C1887) * C49094) *
                C49054) *
               C48978 * C447 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            ((C1887 + C1888 + C1889) * C49094 +
             (C1890 + C1891 + C1892) * C4967 +
             (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C48978 * C49279) *
              C449 +
          ((((C1232 + C1233 + C1234) * C4966 +
             (C1235 + C1236 + C1237) * C49252 +
             (C6369 + C6370 + C6371) * C4967 +
             (C6372 + C6373 + C6374) * C49094) *
                C49251 +
            ((C1238 + C1239 + C1240) * C4966 +
             (C1241 + C1242 + C1243) * C49252 +
             (C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C4967 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49094) *
                C49054) *
               C48978 * C49279 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 +
            (C14323 + C14324 + C14325 + C14326) * C11279 +
            (C14327 + C14328 + C14329 + C14330) * C49294) *
               C48978 * C447 -
           ((C9567 * C49094 + C9568 * C4967 + C9191 * C49252 + C9190 * C4966) *
                C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C48978 * C49279) *
              C449 +
          (((C14331 + C14332 + C14333 + C14334) * C11277 +
            (C14335 + C14336 + C14337 + C14338) * C11278 +
            (C14339 + C14340 + C14347 + C14348) * C11279 +
            (C9198 * C4966 + C9199 * C49252 +
             (C9060 * C9298 + C48890 * C9301) * C4967 +
             (C9060 * C9302 + C48890 * C9304) * C49094) *
                C49294) *
               C48978 * C49279 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            (C1892 + C1891 + C1890) * C4967 +
            (C1889 + C1888 + C1887) * C49094) *
               C49054) *
              C48978 * C513 -
          (((C1881 + C1882 + C1883) * C49094 + (C1884 + C1885 + C1886) * C4967 +
            (C1231 + C1230 + C1229) * C49252 +
            (C1228 + C1227 + C1226) * C4966) *
               C49054 +
           ((C1887 + C1888 + C1889) * C49094 + (C1890 + C1891 + C1892) * C4967 +
            (C1225 + C1224 + C1223) * C49252 +
            (C1222 + C1221 + C1220) * C4966) *
               C49251) *
              C48978 * C514 +
          ((C1688 * C4966 + C1689 * C49252 + (C1886 + C1885 + C1884) * C4967 +
            (C1883 + C1882 + C1881) * C49094) *
               C49251 +
           ((C1695 + C1694 + C1693) * C4966 + (C1692 + C1691 + C1690) * C49252 +
            (C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
             C1008 * C1846 + C49271 * C1849) *
                C4967 +
            (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
             C1008 * C1852 + C49271 * C1855) *
                C49094) *
               C49054) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
           C14716 * C49294) *
              C48978 * C513 -
          ((C14709 + C14710 + C14711 + C14712) * C49294 +
           (C14330 + C14329 + C14328 + C14327) * C11279 +
           (C14326 + C14325 + C14324 + C14323) * C11278 +
           (C14322 + C14321 + C14320 + C14319) * C11277) *
              C48978 * C514 +
          (C14715 * C11277 + C14716 * C11278 +
           (C14712 + C14711 + C14710 + C14709) * C11279 +
           (C9462 * C4966 + C9461 * C49252 +
            (C9060 * C9546 + C48890 * C9547) * C4967 +
            (C9060 * C9548 + C48890 * C9549) * C49094) *
               C49294) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C339 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C447 +
          (((C7107 * C4966 + C7108 * C49252 + (C3245 + C3246 + C3247) * C4967 +
             (C3248 + C3249 + C3250) * C49094) *
                C49251 +
            ((C1886 + C1885 + C1884) * C4966 +
             (C1883 + C1882 + C1881) * C49252 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49271 * C2308) *
                 C4967 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49271 * C2317) *
                 C49094) *
                C49054) *
               C49281 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            (C7109 * C49094 + C7110 * C4967 + (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C339 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C447 +
          (((C14858 + C14857 + C14856 + C14855) * C11277 +
            (C14854 + C14853 + C14852 + C14851) * C11278 +
            (C14850 + C14849 + C14848 + C14847) * C11279 +
            (C9568 * C4966 + C9567 * C49252 +
             (C9060 * C9809 + C48890 * C9812) * C4967 +
             (C9060 * C9813 + C48890 * C9815) * C49094) *
                C49294) *
               C49281 -
           ((C14709 + C14710 + C14711 + C14712) * C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C721 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C48961 * C449 +
          ((((C2807 + C2808 + C2809) * C4966 +
             (C2810 + C2811 + C2812) * C49252 +
             (C2813 + C2814 + C2815) * C4967 +
             (C2816 + C2817 + C2818) * C49094) *
                C49251 +
            ((C6369 + C6370 + C6371) * C4966 +
             (C6372 + C6373 + C6374) * C49252 +
             (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
              C1008 * C2580 + C49271 * C2581) *
                 C4967 +
             (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
              C1008 * C2582 + C49271 * C2583) *
                 C49094) *
                C49054) *
               C49281 -
           (((C6374 + C6373 + C6372) * C49094 +
             (C6371 + C6370 + C6369) * C4967 +
             (C1237 + C1236 + C1235) * C49252 +
             (C1234 + C1233 + C1232) * C4966) *
                C49054 +
            ((C2812 + C2811 + C2810) * C49094 +
             (C2809 + C2808 + C2807) * C4967 +
             (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49252 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C4966) *
                C49251) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C721 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C4966 + C10312 * C49252 + C10313 * C4967 +
             C10314 * C49094) *
                C11277 +
            (C10117 * C4966 + C10118 * C49252 + C10119 * C4967 +
             C10120 * C49094) *
                C11278 +
            (C10121 * C4966 + C10122 * C49252 + C10123 * C4967 +
             C10124 * C49094) *
                C11279 +
            (C14345 * C4966 + C14346 * C49252 +
             (C9060 * C10072 + C48890 * C10073) * C4967 +
             (C9060 * C10074 + C48890 * C10075) * C49094) *
                C49294) *
               C49281 -
           ((C14348 + C14347 + C14340 + C14339) * C49294 +
            (C14338 + C14337 + C14336 + C14335) * C11279 +
            (C14334 + C14333 + C14332 + C14331) * C11278 +
            (C10312 * C49094 + C10311 * C4967 +
             (C9060 * C132 + C48890 * C141) * C49252 +
             (C9060 * C120 + C48890 * C127) * C4966) *
                C11277) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C4966 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49252 +
             (C2795 + C2796 + C2797) * C4967 +
             (C2798 + C2799 + C2800) * C49094) *
                C49251 +
            ((C1220 + C1221 + C1222) * C4966 +
             (C1223 + C1224 + C1225) * C49252 + C7107 * C4967 +
             C7108 * C49094) *
                C49054) *
               C721 -
           (((C3250 + C3249 + C3248) * C49094 +
             (C3247 + C3246 + C3245) * C4967 + C7109 * C49252 + C7110 * C4966) *
                C49054 +
            ((C2806 + C2805 + C2804) * C49094 +
             (C2803 + C2802 + C2801) * C4967 +
             (C2800 + C2799 + C2798) * C49252 +
             (C2797 + C2796 + C2795) * C4966) *
                C49251) *
               C49281) *
              C229 +
          (((C7107 * C4966 + C7108 * C49252 + (C3245 + C3246 + C3247) * C4967 +
             (C3248 + C3249 + C3250) * C49094) *
                C49251 +
            ((C1886 + C1885 + C1884) * C4966 +
             (C1883 + C1882 + C1881) * C49252 +
             (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
              C1008 * C2299 + C49271 * C2308) *
                 C4967 +
             (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
              C1008 * C2311 + C49271 * C2317) *
                 C49094) *
                C49054) *
               C49281 -
           (((C1881 + C1882 + C1883) * C49094 +
             (C1884 + C1885 + C1886) * C4967 +
             (C1231 + C1230 + C1229) * C49252 +
             (C1228 + C1227 + C1226) * C4966) *
                C49054 +
            (C7109 * C49094 + C7110 * C4967 + (C1225 + C1224 + C1223) * C49252 +
             (C1222 + C1221 + C1220) * C4966) *
                C49251) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C4966 +
             (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
             C10308 * C49094) *
                C11277 +
            (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
            C14716 * C49294) *
               C721 -
           ((C14847 + C14848 + C14849 + C14850) * C49294 +
            (C14851 + C14852 + C14853 + C14854) * C11279 +
            (C14855 + C14856 + C14857 + C14858) * C11278 +
            (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
             C10307 * C4966) *
                C11277) *
               C49281) *
              C229 +
          (((C14858 + C14857 + C14856 + C14855) * C11277 +
            (C14854 + C14853 + C14852 + C14851) * C11278 +
            (C14850 + C14849 + C14848 + C14847) * C11279 +
            (C9568 * C4966 + C9567 * C49252 +
             (C9060 * C9809 + C48890 * C9812) * C4967 +
             (C9060 * C9813 + C48890 * C9815) * C49094) *
                C49294) *
               C49281 -
           ((C14709 + C14710 + C14711 + C14712) * C49294 +
            (C14330 + C14329 + C14328 + C14327) * C11279 +
            (C14326 + C14325 + C14324 + C14323) * C11278 +
            (C14322 + C14321 + C14320 + C14319) * C11277) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C4966 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49252 +
            (C2795 + C2796 + C2797) * C4967 +
            (C2798 + C2799 + C2800) * C49094) *
               C49251 +
           ((C1220 + C1221 + C1222) * C4966 + (C1223 + C1224 + C1225) * C49252 +
            C7107 * C4967 + C7108 * C49094) *
               C49054) *
              C867 -
          (((C3250 + C3249 + C3248) * C49094 + (C3247 + C3246 + C3245) * C4967 +
            C7109 * C49252 + C7110 * C4966) *
               C49054 +
           ((C2806 + C2805 + C2804) * C49094 + (C2803 + C2802 + C2801) * C4967 +
            (C2800 + C2799 + C2798) * C49252 +
            (C2797 + C2796 + C2795) * C4966) *
               C49251) *
              C868 +
          ((C3679 * C4966 + C3680 * C49252 + (C3686 + C3685 + C3684) * C4967 +
            (C3683 + C3682 + C3681) * C49094) *
               C49251 +
           ((C3245 + C3246 + C3247) * C4966 + (C3248 + C3249 + C3250) * C49252 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C4967 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49094) *
               C49054) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C4966 +
            (C9060 * C131 + C48890 * C140) * C49252 + C10307 * C4967 +
            C10308 * C49094) *
               C11277 +
           (C14319 + C14320 + C14321 + C14322) * C11278 + C14715 * C11279 +
           C14716 * C49294) *
              C867 -
          ((C14847 + C14848 + C14849 + C14850) * C49294 +
           (C14851 + C14852 + C14853 + C14854) * C11279 +
           (C14855 + C14856 + C14857 + C14858) * C11278 +
           (C10310 * C49094 + C10309 * C4967 + C10308 * C49252 +
            C10307 * C4966) *
               C11277) *
              C868 +
          ((C10309 * C4966 + C10310 * C49252 + C11177 * C4967 +
            C11176 * C49094) *
               C11277 +
           (C10113 * C4966 + C10114 * C49252 + C10757 * C4967 +
            C10756 * C49094) *
               C11278 +
           (C10115 * C4966 + C10116 * C49252 + C10755 * C4967 +
            C10754 * C49094) *
               C11279 +
           (C10582 * C4966 + C10581 * C49252 +
            (C9060 * C10733 + C48890 * C10734) * C4967 +
            (C9060 * C10735 + C48890 * C10736) * C49094) *
               C49294) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[198] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                      C1001 * C127 + C1008 * C121 + C49271 * C128) *
                         C118 +
                     (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                      C1001 * C141 + C1008 * C133 + C49271 * C142) *
                         C49007) *
                        C49319 +
                    ((C1006 * C237 + C1000 * C248 + C1007 * C236 +
                      C1001 * C247 + C1008 * C235 + C49271 * C246) *
                         C118 +
                     (C1006 * C243 + C1000 * C255 + C1007 * C242 +
                      C1001 * C254 + C1008 * C241 + C49271 * C253) *
                         C49007) *
                        C49307 +
                    ((C1006 * C517 + C1000 * C522 + C1007 * C518 +
                      C1001 * C523 + C1008 * C519 + C49271 * C524) *
                         C118 +
                     (C1006 * C527 + C1000 * C532 + C1007 * C528 +
                      C1001 * C533 + C1008 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C1008 * C530 + C49271 * C535 + C1007 * C529 +
                      C1001 * C534 + C1006 * C528 + C1000 * C533) *
                         C49007 +
                     (C1008 * C520 + C49271 * C525 + C1007 * C519 +
                      C1001 * C524 + C1006 * C518 + C1000 * C523) *
                         C118) *
                        C49284 +
                    ((C1008 * C240 + C49271 * C252 + C1007 * C241 +
                      C1001 * C253 + C1006 * C242 + C1000 * C254) *
                         C49007 +
                     (C1008 * C234 + C49271 * C245 + C1007 * C235 +
                      C1001 * C246 + C1006 * C236 + C1000 * C247) *
                         C118) *
                        C49307 +
                    ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                      C1001 * C142 + C1006 * C132 + C1000 * C141) *
                         C49007 +
                     (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                      C1001 * C128 + C1006 * C120 + C1000 * C127) *
                         C118) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   (((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                      C1001 * C129 + C1008 * C123 + C49271 * C130) *
                         C118 +
                     (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                      C1001 * C143 + C1008 * C135 + C49271 * C144) *
                         C49007) *
                        C49319 +
                    ((C1006 * C235 + C1000 * C246 + C1007 * C234 +
                      C1001 * C245 + C1008 * C233 + C49271 * C244) *
                         C118 +
                     (C1006 * C241 + C1000 * C253 + C1007 * C240 +
                      C1001 * C252 + C1008 * C239 + C49271 * C251) *
                         C49007) *
                        C49307 +
                    ((C1006 * C519 + C1000 * C524 + C1007 * C520 +
                      C1001 * C525 + C1008 * C521 + C49271 * C526) *
                         C118 +
                     (C1006 * C529 + C1000 * C534 + C1007 * C530 +
                      C1001 * C535 + C1008 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C49007) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C49007 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C49007) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
                     C1008 * C121 + C49271 * C128) *
                        C2431 +
                    (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
                     C1008 * C133 + C49271 * C142) *
                        C49320 +
                    (C1006 * C345 + C1000 * C356 + C1007 * C344 + C1001 * C355 +
                     C1008 * C343 + C49271 * C354) *
                        C2432 +
                    (C1006 * C351 + C1000 * C363 + C1007 * C350 + C1001 * C362 +
                     C1008 * C349 + C49271 * C361) *
                        C49309 +
                    (C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
                     C1008 * C872 + C49271 * C877) *
                        C2433 +
                    (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
                     C1008 * C882 + C49271 * C887) *
                        C49287) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C1008 * C883 + C49271 * C888 + C1007 * C882 +
                     C1001 * C887 + C1006 * C881 + C1000 * C886) *
                        C49287 +
                    (C1008 * C873 + C49271 * C878 + C1007 * C872 +
                     C1001 * C877 + C1006 * C871 + C1000 * C876) *
                        C2433 +
                    (C1008 * C348 + C49271 * C360 + C1007 * C349 +
                     C1001 * C361 + C1006 * C350 + C1000 * C362) *
                        C49309 +
                    (C1008 * C342 + C49271 * C353 + C1007 * C343 +
                     C1001 * C354 + C1006 * C344 + C1000 * C355) *
                        C2432 +
                    (C1008 * C134 + C49271 * C143 + C1007 * C133 +
                     C1001 * C142 + C1006 * C132 + C1000 * C141) *
                        C49320 +
                    (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                     C1001 * C128 + C1006 * C120 + C1000 * C127) *
                        C2431) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C1006 * C121 + C1000 * C128 + C1007 * C122 + C1001 * C129 +
                     C1008 * C123 + C49271 * C130) *
                        C2431 +
                    (C1006 * C133 + C1000 * C142 + C1007 * C134 + C1001 * C143 +
                     C1008 * C135 + C49271 * C144) *
                        C49320 +
                    (C1006 * C343 + C1000 * C354 + C1007 * C342 + C1001 * C353 +
                     C1008 * C341 + C49271 * C352) *
                        C2432 +
                    (C1006 * C349 + C1000 * C361 + C1007 * C348 + C1001 * C360 +
                     C1008 * C347 + C49271 * C359) *
                        C49309 +
                    (C1006 * C872 + C1000 * C877 + C1007 * C873 + C1001 * C878 +
                     C1008 * C874 + C49271 * C879) *
                        C2433 +
                    (C1006 * C882 + C1000 * C887 + C1007 * C883 + C1001 * C888 +
                     C1008 * C884 + C49271 * C889) *
                        C49287) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C118 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C49007) *
                        C7757 +
                    ((C7760 * C237 + C49316 * C248 + C7761 * C236 +
                      C49303 * C247 + C7762 * C235 + C49271 * C246) *
                         C118 +
                     (C7760 * C243 + C49316 * C255 + C7761 * C242 +
                      C49303 * C254 + C7762 * C241 + C49271 * C253) *
                         C49007) *
                        C7758 +
                    ((C7760 * C517 + C49316 * C522 + C7761 * C518 +
                      C49303 * C523 + C7762 * C519 + C49271 * C524) *
                         C118 +
                     (C7760 * C527 + C49316 * C532 + C7761 * C528 +
                      C49303 * C533 + C7762 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C7762 * C530 + C49271 * C535 + C7761 * C529 +
                      C49303 * C534 + C7760 * C528 + C49316 * C533) *
                         C49007 +
                     (C7762 * C520 + C49271 * C525 + C7761 * C519 +
                      C49303 * C524 + C7760 * C518 + C49316 * C523) *
                         C118) *
                        C49284 +
                    ((C7762 * C240 + C49271 * C252 + C7761 * C241 +
                      C49303 * C253 + C7760 * C242 + C49316 * C254) *
                         C49007 +
                     (C7762 * C234 + C49271 * C245 + C7761 * C235 +
                      C49303 * C246 + C7760 * C236 + C49316 * C247) *
                         C118) *
                        C7758 +
                    ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C49007 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C118) *
                        C7757) *
                       C48978 * C48961 * C111 +
                   (((C7760 * C121 + C49316 * C128 + C7761 * C122 +
                      C49303 * C129 + C7762 * C123 + C49271 * C130) *
                         C118 +
                     (C7760 * C133 + C49316 * C142 + C7761 * C134 +
                      C49303 * C143 + C7762 * C135 + C49271 * C144) *
                         C49007) *
                        C7757 +
                    ((C7760 * C235 + C49316 * C246 + C7761 * C234 +
                      C49303 * C245 + C7762 * C233 + C49271 * C244) *
                         C118 +
                     (C7760 * C241 + C49316 * C253 + C7761 * C240 +
                      C49303 * C252 + C7762 * C239 + C49271 * C251) *
                         C49007) *
                        C7758 +
                    ((C7760 * C519 + C49316 * C524 + C7761 * C520 +
                      C49303 * C525 + C7762 * C521 + C49271 * C526) *
                         C118 +
                     (C7760 * C529 + C49316 * C534 + C7761 * C530 +
                      C49303 * C535 + C7762 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48890 * C126) * C118 +
                     (C9060 * C131 + C48890 * C140) * C49007) *
                        C9055 +
                    ((C9060 * C237 + C48890 * C248) * C118 +
                     (C9060 * C243 + C48890 * C255) * C49007) *
                        C9056 +
                    ((C9060 * C517 + C48890 * C522) * C118 +
                     (C9060 * C527 + C48890 * C532) * C49007) *
                        C9057 +
                    ((C9060 * C1157 + C48890 * C1164) * C118 +
                     (C9060 * C1161 + C48890 * C1169) * C49007) *
                        C9058 +
                    ((C9060 * C1661 + C48890 * C1664) * C118 +
                     (C9060 * C1667 + C48890 * C1670) * C49007) *
                        C9059) *
                       C48978 * C48961 * C110 -
                   (((C9060 * C1668 + C48890 * C1671) * C49007 +
                     (C9060 * C1662 + C48890 * C1665) * C118) *
                        C9059 +
                    ((C9060 * C1160 + C48890 * C1168) * C49007 +
                     (C9060 * C1156 + C48890 * C1163) * C118) *
                        C9058 +
                    ((C9060 * C528 + C48890 * C533) * C49007 +
                     (C9060 * C518 + C48890 * C523) * C118) *
                        C9057 +
                    ((C9060 * C242 + C48890 * C254) * C49007 +
                     (C9060 * C236 + C48890 * C247) * C118) *
                        C9056 +
                    ((C9060 * C132 + C48890 * C141) * C49007 +
                     (C9060 * C120 + C48890 * C127) * C118) *
                        C9055) *
                       C48978 * C48961 * C111 +
                   (((C9060 * C121 + C48890 * C128) * C118 +
                     (C9060 * C133 + C48890 * C142) * C49007) *
                        C9055 +
                    ((C9060 * C235 + C48890 * C246) * C118 +
                     (C9060 * C241 + C48890 * C253) * C49007) *
                        C9056 +
                    ((C9060 * C519 + C48890 * C524) * C118 +
                     (C9060 * C529 + C48890 * C534) * C49007) *
                        C9057 +
                    ((C9060 * C1155 + C48890 * C1162) * C118 +
                     (C9060 * C1159 + C48890 * C1167) * C49007) *
                        C9058 +
                    ((C9060 * C1663 + C48890 * C1666) * C118 +
                     (C9060 * C1669 + C48890 * C1672) * C49007) *
                        C9059) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48890 * C126) * C2431 +
                     (C9060 * C131 + C48890 * C140) * C49320 +
                     (C9060 * C345 + C48890 * C356) * C2432 +
                     (C9060 * C351 + C48890 * C363) * C49309 +
                     (C9060 * C870 + C48890 * C875) * C2433 +
                     (C9060 * C880 + C48890 * C885) * C49287) *
                        C7757 +
                    (C9184 * C2431 + C9185 * C49320 + C9574 * C2432 +
                     C9573 * C49309 + (C9060 * C2294 + C48890 * C2300) * C2433 +
                     (C9060 * C2303 + C48890 * C2312) * C49287) *
                        C7758 +
                    (C9186 * C2431 + C9187 * C49320 + C9572 * C2432 +
                     C9571 * C49309 + (C9060 * C2297 + C48890 * C2306) * C2433 +
                     (C9060 * C2309 + C48890 * C2315) * C49287) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C9060 * C2310 + C48890 * C2316) * C49287 +
                     (C9060 * C2298 + C48890 * C2307) * C2433 +
                     (C9060 * C1394 + C48890 * C1402) * C49309 +
                     (C9060 * C1390 + C48890 * C1397) * C2432 + C9195 * C49320 +
                     C9194 * C2431) *
                        C49284 +
                    ((C9060 * C2304 + C48890 * C2313) * C49287 +
                     (C9060 * C2295 + C48890 * C2301) * C2433 +
                     (C9060 * C630 + C48890 * C635) * C49309 +
                     (C9060 * C620 + C48890 * C625) * C2432 + C9193 * C49320 +
                     C9192 * C2431) *
                        C7758 +
                    ((C9060 * C881 + C48890 * C886) * C49287 +
                     (C9060 * C871 + C48890 * C876) * C2433 +
                     (C9060 * C350 + C48890 * C362) * C49309 +
                     (C9060 * C344 + C48890 * C355) * C2432 +
                     (C9060 * C132 + C48890 * C141) * C49320 +
                     (C9060 * C120 + C48890 * C127) * C2431) *
                        C7757) *
                       C48978 * C48961 * C111 +
                   (((C9060 * C121 + C48890 * C128) * C2431 +
                     (C9060 * C133 + C48890 * C142) * C49320 +
                     (C9060 * C343 + C48890 * C354) * C2432 +
                     (C9060 * C349 + C48890 * C361) * C49309 +
                     (C9060 * C872 + C48890 * C877) * C2433 +
                     (C9060 * C882 + C48890 * C887) * C49287) *
                        C7757 +
                    ((C9060 * C235 + C48890 * C246) * C2431 +
                     (C9060 * C241 + C48890 * C253) * C49320 +
                     (C9060 * C621 + C48890 * C626) * C2432 +
                     (C9060 * C631 + C48890 * C636) * C49309 +
                     (C9060 * C2296 + C48890 * C2302) * C2433 +
                     (C9060 * C2305 + C48890 * C2314) * C49287) *
                        C7758 +
                    ((C9060 * C519 + C48890 * C524) * C2431 +
                     (C9060 * C529 + C48890 * C534) * C49320 +
                     (C9060 * C1389 + C48890 * C1396) * C2432 +
                     (C9060 * C1393 + C48890 * C1401) * C49309 +
                     (C9060 * C2299 + C48890 * C2308) * C2433 +
                     (C9060 * C2311 + C48890 * C2317) * C49287) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C48978 * C229 -
           (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 + C1001 * C1168 +
              C1006 * C1161 + C1000 * C1169) *
                 C49007 +
             (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 + C1001 * C1163 +
              C1006 * C1157 + C1000 * C1164) *
                 C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C48978 * C49279) *
              C231 +
          ((((C1232 + C1233 + C1234) * C118 +
             (C1235 + C1236 + C1237) * C49007) *
                C49319 +
            ((C1238 + C1239 + C1240) * C118 +
             (C1241 + C1242 + C1243) * C49007) *
                C49307 +
            ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 + C1001 * C1162 +
              C1008 * C1158 + C49271 * C1165) *
                 C118 +
             (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 + C1001 * C1167 +
              C1008 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C48978 * C229 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C49007) *
               C48996 * C48978 * C49279 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C1006 * C345 + C1000 * C356 + C1007 * C344 + C1001 * C355 +
             C1008 * C343 + C49271 * C354) *
                C2432 +
            (C1006 * C351 + C1000 * C363 + C1007 * C350 + C1001 * C362 +
             C1008 * C349 + C49271 * C361) *
                C49309 +
            (C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
             C1008 * C872 + C49271 * C877) *
                C2433 +
            (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
             C1008 * C882 + C49271 * C887) *
                C49287) *
               C48996 * C48978 * C229 -
           ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C49287 +
            (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C1232 + C1233 + C1234) * C2431 + (C1235 + C1236 + C1237) * C49320 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49271 * C627) *
                C2432 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49271 * C637) *
                C49309 +
            (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
             C1008 * C2580 + C49271 * C2581) *
                C2433 +
            (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
             C1008 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C1008 * C883 + C49271 * C888 + C1007 * C882 + C1001 * C887 +
             C1006 * C881 + C1000 * C886) *
                C49287 +
            (C1008 * C873 + C49271 * C878 + C1007 * C872 + C1001 * C877 +
             C1006 * C871 + C1000 * C876) *
                C2433 +
            (C1008 * C348 + C49271 * C360 + C1007 * C349 + C1001 * C361 +
             C1006 * C350 + C1000 * C362) *
                C49309 +
            (C1008 * C342 + C49271 * C353 + C1007 * C343 + C1001 * C354 +
             C1006 * C344 + C1000 * C355) *
                C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C229 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C231 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C229 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C231 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 +
             (C9060 * C345 + C48890 * C356) * C2432 +
             (C9060 * C351 + C48890 * C363) * C49309 +
             (C9060 * C870 + C48890 * C875) * C2433 +
             (C9060 * C880 + C48890 * C885) * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C48978 * C229 -
           (((C9060 * C9811 + C48890 * C9814) * C49287 +
             (C9060 * C9808 + C48890 * C9810) * C2433 + C9569 * C49309 +
             C9570 * C2432 + C9189 * C49320 + C9188 * C2431) *
                C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C48978 * C49279) *
              C231 +
          (((C10093 + C10094 + C10129 + C10130 + C10131 + C10132) * C7757 +
            (C10103 + C10104 + C10133 + C10134 + C10135 + C10136) * C7758 +
            (C9196 * C2431 + C9197 * C49320 +
             (C9060 * C1845 + C48890 * C1848) * C2432 +
             (C9060 * C1851 + C48890 * C1854) * C49309 +
             (C9060 * C10072 + C48890 * C10073) * C2433 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            ((C9060 * C881 + C48890 * C886) * C49287 +
             (C9060 * C871 + C48890 * C876) * C2433 +
             (C9060 * C350 + C48890 * C362) * C49309 +
             (C9060 * C344 + C48890 * C355) * C2432 +
             (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C339 -
           (((C1008 * C1393 + C49271 * C1401 + C1007 * C1394 + C1001 * C1402 +
              C1006 * C1395 + C1000 * C1403) *
                 C49007 +
             (C1008 * C1389 + C49271 * C1396 + C1007 * C1390 + C1001 * C1397 +
              C1006 * C1391 + C1000 * C1398) *
                 C118) *
                C49284 +
            ((C1008 * C631 + C49271 * C636 + C1007 * C630 + C1001 * C635 +
              C1006 * C629 + C1000 * C634) *
                 C49007 +
             (C1008 * C621 + C49271 * C626 + C1007 * C620 + C1001 * C625 +
              C1006 * C619 + C1000 * C624) *
                 C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C48961 * C231 +
          ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
              C1008 * C342 + C49271 * C353) *
                 C118 +
             (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
              C1008 * C348 + C49271 * C360) *
                 C49007) *
                C49319 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49271 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49271 * C637) *
                 C49007) *
                C49307 +
            ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C118 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C339 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C2807 + C2808 + C2809) * C2431 + (C2810 + C2811 + C2812) * C49320 +
            (C2813 + C2814 + C2815) * C2432 + (C2816 + C2817 + C2818) * C49309 +
            (C1006 * C2731 + C1000 * C2738 + C1007 * C2730 + C1001 * C2737 +
             C1008 * C2733 + C49271 * C2740) *
                C2433 +
            (C1006 * C2735 + C1000 * C2743 + C1007 * C2734 + C1001 * C2742 +
             C1008 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C339 -
           (((C7762 * C1393 + C49271 * C1401 + C7761 * C1394 + C49303 * C1402 +
              C7760 * C1395 + C49316 * C1403) *
                 C49007 +
             (C7762 * C1389 + C49271 * C1396 + C7761 * C1390 + C49303 * C1397 +
              C7760 * C1391 + C49316 * C1398) *
                 C118) *
                C49284 +
            ((C7762 * C631 + C49271 * C636 + C7761 * C630 + C49303 * C635 +
              C7760 * C629 + C49316 * C634) *
                 C49007 +
             (C7762 * C621 + C49271 * C626 + C7761 * C620 + C49303 * C625 +
              C7760 * C619 + C49316 * C624) *
                 C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C231 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C339 -
           (((C9060 * C9299 + C48890 * C9303) * C49007 +
             (C9060 * C9297 + C48890 * C9300) * C118) *
                C9059 +
            ((C9060 * C1850 + C48890 * C1853) * C49007 +
             (C9060 * C1844 + C48890 * C1847) * C118) *
                C9058 +
            ((C9060 * C1395 + C48890 * C1403) * C49007 +
             (C9060 * C1391 + C48890 * C1398) * C118) *
                C9057 +
            ((C9060 * C629 + C48890 * C634) * C49007 +
             (C9060 * C619 + C48890 * C624) * C118) *
                C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C231 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C339 -
           (((C9060 * C10284 + C48890 * C10288) * C49287 +
             (C9060 * C10282 + C48890 * C10285) * C2433 + C10116 * C49309 +
             C10115 * C2432 + C9571 * C49320 + C9572 * C2431) *
                C49284 +
            ((C9060 * C3226 + C48890 * C3229) * C49287 +
             (C9060 * C3220 + C48890 * C3223) * C2433 + C10114 * C49309 +
             C10113 * C2432 + C9573 * C49320 + C9574 * C2431) *
                C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C48961 * C231 +
          (((C10311 * C2431 + C10312 * C49320 + C10313 * C2432 +
             C10314 * C49309 + (C9060 * C2731 + C48890 * C2738) * C2433 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C7757 +
            (C10117 * C2431 + C10118 * C49320 + C10119 * C2432 +
             C10120 * C49309 + (C9060 * C3221 + C48890 * C3224) * C2433 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C7758 +
            (C10121 * C2431 + C10122 * C49320 + C10123 * C2432 +
             C10124 * C49309 + (C9060 * C10283 + C48890 * C10286) * C2433 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            ((C1226 + C1227 + C1228) * C118 +
             (C1229 + C1230 + C1231) * C49007) *
                C49284) *
               C48978 * C447 -
           (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 + C1001 * C1168 +
              C1006 * C1161 + C1000 * C1169) *
                 C49007 +
             (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 + C1001 * C1163 +
              C1006 * C1157 + C1000 * C1164) *
                 C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C48978 * C49279) *
              C449 +
          ((((C1232 + C1233 + C1234) * C118 +
             (C1235 + C1236 + C1237) * C49007) *
                C49319 +
            ((C1238 + C1239 + C1240) * C118 +
             (C1241 + C1242 + C1243) * C49007) *
                C49307 +
            ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 + C1001 * C1162 +
              C1008 * C1158 + C49271 * C1165) *
                 C118 +
             (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 + C1001 * C1167 +
              C1008 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C48978 * C447 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
             C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
             C117 * C238 + C105 * C249) *
                C118 +
            (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
             C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
             C117 * C250 + C105 * C256) *
                C49007) *
               C48996 * C48978 * C49279 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C48978 * C447 -
           ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
             C1006 * C2303 + C1000 * C2312) *
                C49287 +
            (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
             C1006 * C2294 + C1000 * C2300) *
                C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C1232 + C1233 + C1234) * C2431 + (C1235 + C1236 + C1237) * C49320 +
            (C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
             C1008 * C622 + C49271 * C627) *
                C2432 +
            (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
             C1008 * C632 + C49271 * C637) *
                C49309 +
            (C1006 * C2295 + C1000 * C2301 + C1007 * C2296 + C1001 * C2302 +
             C1008 * C2580 + C49271 * C2581) *
                C2433 +
            (C1006 * C2304 + C1000 * C2313 + C1007 * C2305 + C1001 * C2314 +
             C1008 * C2582 + C49271 * C2583) *
                C49287) *
               C48996 * C48978 * C49279 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            ((C7964 + C7965 + C7966) * C118 +
             (C7967 + C7968 + C7969) * C49007) *
                C49284) *
               C48978 * C447 -
           (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 + C49303 * C1168 +
              C7760 * C1161 + C49316 * C1169) *
                 C49007 +
             (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 + C49303 * C1163 +
              C7760 * C1157 + C49316 * C1164) *
                 C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C48978 * C49279) *
              C449 +
          ((((C7970 + C7971 + C7972) * C118 +
             (C7973 + C7974 + C7975) * C49007) *
                C7757 +
            ((C7976 + C7977 + C7978) * C118 +
             (C7979 + C7980 + C7981) * C49007) *
                C7758 +
            ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 + C49303 * C1162 +
              C7762 * C1158 + C49271 * C1165) *
                 C118 +
             (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 + C49303 * C1167 +
              C7762 * C1166 + C49271 * C1170) *
                 C49007) *
                C49284) *
               C48978 * C49279 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
            (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
               C48978 * C447 -
           (((C9060 * C9145 + C48890 * C9149) * C49007 +
             (C9060 * C9143 + C48890 * C9146) * C118) *
                C9059 +
            (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
            (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
               C48978 * C49279) *
              C449 +
          (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
            (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
            ((C9060 * C9144 + C48890 * C9147) * C118 +
             (C9060 * C9148 + C48890 * C9150) * C49007) *
                C9059) *
               C48978 * C49279 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            (C10085 + C10086 + C10087 + C10088 + C10127 + C10128) * C49284) *
               C48978 * C447 -
           (((C9060 * C9811 + C48890 * C9814) * C49287 +
             (C9060 * C9808 + C48890 * C9810) * C2433 + C9569 * C49309 +
             C9570 * C2432 + C9189 * C49320 + C9188 * C2431) *
                C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C48978 * C49279) *
              C449 +
          (((C10093 + C10094 + C10129 + C10130 + C10131 + C10132) * C7757 +
            (C10103 + C10104 + C10133 + C10134 + C10135 + C10136) * C7758 +
            (C9196 * C2431 + C9197 * C49320 +
             (C9060 * C1845 + C48890 * C1848) * C2432 +
             (C9060 * C1851 + C48890 * C1854) * C49309 +
             (C9060 * C10072 + C48890 * C10073) * C2433 +
             (C9060 * C10074 + C48890 * C10075) * C49287) *
                C49284) *
               C48978 * C49279 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C48978 * C513 -
          (((C1690 + C1691 + C1692) * C49007 + (C1693 + C1694 + C1695) * C118) *
               C49284 +
           ((C1231 + C1230 + C1229) * C49007 + (C1228 + C1227 + C1226) * C118) *
               C49307 +
           ((C1225 + C1224 + C1223) * C49007 + (C1222 + C1221 + C1220) * C118) *
               C49319) *
              C48978 * C514 +
          (C1698 * C49319 +
           ((C1695 + C1694 + C1693) * C118 + (C1692 + C1691 + C1690) * C49007) *
               C49307 +
           ((C1006 * C1661 + C1000 * C1664 + C1007 * C1662 + C1001 * C1665 +
             C1008 * C1663 + C49271 * C1666) *
                C118 +
            (C1006 * C1667 + C1000 * C1670 + C1007 * C1668 + C1001 * C1671 +
             C1008 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C48978 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C49007 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48996 * C48978 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C49007) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49271 * C128) *
               C2431 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49271 * C142) *
               C49320 +
           (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
           (C2801 + C2802 + C2803) * C2433 + (C2804 + C2805 + C2806) * C49287) *
              C48996 * C48978 * C513 -
          ((C1008 * C2305 + C49271 * C2314 + C1007 * C2304 + C1001 * C2313 +
            C1006 * C2303 + C1000 * C2312) *
               C49287 +
           (C1008 * C2296 + C49271 * C2302 + C1007 * C2295 + C1001 * C2301 +
            C1006 * C2294 + C1000 * C2300) *
               C2433 +
           (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
           (C1225 + C1224 + C1223) * C49320 + (C1222 + C1221 + C1220) * C2431) *
              C48996 * C48978 * C514 +
          (C1688 * C2431 + C1689 * C49320 + (C1886 + C1885 + C1884) * C2432 +
           (C1883 + C1882 + C1881) * C49309 +
           (C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
            C1008 * C2299 + C49271 * C2308) *
               C2433 +
           (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
            C1008 * C2311 + C49271 * C2317) *
               C49287) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C48978 * C513 -
          (((C8400 + C8401 + C8402) * C49007 + (C8403 + C8404 + C8405) * C118) *
               C49284 +
           ((C7969 + C7968 + C7967) * C49007 + (C7966 + C7965 + C7964) * C118) *
               C7758 +
           ((C7963 + C7962 + C7961) * C49007 + (C7960 + C7959 + C7958) * C118) *
               C7757) *
              C48978 * C514 +
          (C8408 * C7757 +
           ((C8405 + C8404 + C8403) * C118 + (C8402 + C8401 + C8400) * C49007) *
               C7758 +
           ((C7760 * C1661 + C49316 * C1664 + C7761 * C1662 + C49303 * C1665 +
             C7762 * C1663 + C49271 * C1666) *
                C118 +
            (C7760 * C1667 + C49316 * C1670 + C7761 * C1668 + C49303 * C1671 +
             C7762 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C48978 * C513 -
          ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
           (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
           (C9201 + C9200) * C9055) *
              C48978 * C514 +
          (C9454 * C9055 + C9455 * C9056 + C9456 * C9057 +
           (C9464 + C9463) * C9058 +
           ((C9060 * C9449 + C48890 * C9450) * C118 +
            (C9060 * C9451 + C48890 * C9452) * C49007) *
               C9059) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C2431 +
            (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
            C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
               C7757 +
           (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
           C10587 * C49284) *
              C48978 * C513 -
          ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
           (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
           (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
              C48978 * C514 +
          (C10587 * C7757 +
           (C10579 + C10578 + C10577 + C10576 + C10585 + C10584) * C7758 +
           (C9190 * C2431 + C9191 * C49320 + C9568 * C2432 + C9567 * C49309 +
            (C9060 * C9809 + C48890 * C9812) * C2433 +
            (C9060 * C9813 + C48890 * C9815) * C49287) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C339 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C447 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C49007) *
                C49319 +
            ((C1886 + C1885 + C1884) * C118 +
             (C1883 + C1882 + C1881) * C49007) *
                C49307 +
            ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
              C1008 * C1846 + C49271 * C1849) *
                 C118 +
             (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
              C1008 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1690 + C1691 + C1692) * C49007 +
             (C1693 + C1694 + C1695) * C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C339 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C447 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C339 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C447 +
          (((C1892 + C1891 + C1890) * C2431 + (C1889 + C1888 + C1887) * C49320 +
            (C3245 + C3246 + C3247) * C2432 + (C3248 + C3249 + C3250) * C49309 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C2433 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C3250 + C3249 + C3248) * C49287 + (C3247 + C3246 + C3245) * C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C339 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C447 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C339 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C447 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C339 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C447 +
          (((C10753 + C10752 + C10751 + C10750 + C10761 + C10760) * C7757 +
            (C10745 + C10744 + C10743 + C10742 + C10759 + C10758) * C7758 +
            (C9570 * C2431 + C9569 * C49320 + C10582 * C2432 + C10581 * C49309 +
             (C9060 * C10733 + C48890 * C10734) * C2433 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C721 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C48961 * C449 +
          ((((C1006 * C344 + C1000 * C355 + C1007 * C343 + C1001 * C354 +
              C1008 * C342 + C49271 * C353) *
                 C118 +
             (C1006 * C350 + C1000 * C362 + C1007 * C349 + C1001 * C361 +
              C1008 * C348 + C49271 * C360) *
                 C49007) *
                C49319 +
            ((C1006 * C620 + C1000 * C625 + C1007 * C621 + C1001 * C626 +
              C1008 * C622 + C49271 * C627) *
                 C118 +
             (C1006 * C630 + C1000 * C635 + C1007 * C631 + C1001 * C636 +
              C1008 * C632 + C49271 * C637) *
                 C49007) *
                C49307 +
            ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 + C1001 * C1396 +
              C1008 * C1392 + C49271 * C1399) *
                 C118 +
             (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 + C1001 * C1401 +
              C1008 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1243 + C1242 + C1241) * C49007 +
             (C1240 + C1239 + C1238) * C118) *
                C49284 +
            ((C1237 + C1236 + C1235) * C49007 +
             (C1234 + C1233 + C1232) * C118) *
                C49307 +
            ((C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
              C1006 * C132 + C1000 * C141) *
                 C49007 +
             (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
              C1006 * C120 + C1000 * C127) *
                 C118) *
                C49319) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
             C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
             C117 * C346 + C105 * C357) *
                C118 +
            (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
             C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
             C117 * C358 + C105 * C364) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
             C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
             C113 * C132 + C101 * C141) *
                C49007 +
            (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
             C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
             C113 * C120 + C101 * C127) *
                C118) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C721 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C2807 + C2808 + C2809) * C2431 + (C2810 + C2811 + C2812) * C49320 +
            (C2813 + C2814 + C2815) * C2432 + (C2816 + C2817 + C2818) * C49309 +
            (C1006 * C2731 + C1000 * C2738 + C1007 * C2730 + C1001 * C2737 +
             C1008 * C2733 + C49271 * C2740) *
                C2433 +
            (C1006 * C2735 + C1000 * C2743 + C1007 * C2734 + C1001 * C2742 +
             C1008 * C2741 + C49271 * C2745) *
                C49287) *
               C48996 * C49281 -
           ((C2818 + C2817 + C2816) * C49287 + (C2815 + C2814 + C2813) * C2433 +
            (C2812 + C2811 + C2810) * C49309 + (C2809 + C2808 + C2807) * C2432 +
            (C1008 * C134 + C49271 * C143 + C1007 * C133 + C1001 * C142 +
             C1006 * C132 + C1000 * C141) *
                C49320 +
            (C1008 * C122 + C49271 * C129 + C1007 * C121 + C1001 * C128 +
             C1006 * C120 + C1000 * C127) *
                C2431) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C48961 * C449 +
          ((((C7760 * C344 + C49316 * C355 + C7761 * C343 + C49303 * C354 +
              C7762 * C342 + C49271 * C353) *
                 C118 +
             (C7760 * C350 + C49316 * C362 + C7761 * C349 + C49303 * C361 +
              C7762 * C348 + C49271 * C360) *
                 C49007) *
                C7757 +
            ((C7760 * C620 + C49316 * C625 + C7761 * C621 + C49303 * C626 +
              C7762 * C622 + C49271 * C627) *
                 C118 +
             (C7760 * C630 + C49316 * C635 + C7761 * C631 + C49303 * C636 +
              C7762 * C632 + C49271 * C637) *
                 C49007) *
                C7758 +
            ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 + C49303 * C1396 +
              C7762 * C1392 + C49271 * C1399) *
                 C118 +
             (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 + C49303 * C1401 +
              C7762 * C1400 + C49271 * C1404) *
                 C49007) *
                C49284) *
               C49281 -
           (((C7981 + C7980 + C7979) * C49007 +
             (C7978 + C7977 + C7976) * C118) *
                C49284 +
            ((C7975 + C7974 + C7973) * C49007 +
             (C7972 + C7971 + C7970) * C118) *
                C7758 +
            ((C7762 * C134 + C49271 * C143 + C7761 * C133 + C49303 * C142 +
              C7760 * C132 + C49316 * C141) *
                 C49007 +
             (C7762 * C122 + C49271 * C129 + C7761 * C121 + C49303 * C128 +
              C7760 * C120 + C49316 * C127) *
                 C118) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C48961 * C449 +
          ((((C9060 * C344 + C48890 * C355) * C118 +
             (C9060 * C350 + C48890 * C362) * C49007) *
                C9055 +
            ((C9060 * C620 + C48890 * C625) * C118 +
             (C9060 * C630 + C48890 * C635) * C49007) *
                C9056 +
            ((C9060 * C1390 + C48890 * C1397) * C118 +
             (C9060 * C1394 + C48890 * C1402) * C49007) *
                C9057 +
            ((C9060 * C1845 + C48890 * C1848) * C118 +
             (C9060 * C1851 + C48890 * C1854) * C49007) *
                C9058 +
            ((C9060 * C9298 + C48890 * C9301) * C118 +
             (C9060 * C9302 + C48890 * C9304) * C49007) *
                C9059) *
               C49281 -
           ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
            (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
            ((C9060 * C132 + C48890 * C141) * C49007 +
             (C9060 * C120 + C48890 * C127) * C118) *
                C9055) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C721 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C48961 * C449 +
          (((C10311 * C2431 + C10312 * C49320 + C10313 * C2432 +
             C10314 * C49309 + (C9060 * C2731 + C48890 * C2738) * C2433 +
             (C9060 * C2735 + C48890 * C2743) * C49287) *
                C7757 +
            (C10117 * C2431 + C10118 * C49320 + C10119 * C2432 +
             C10120 * C49309 + (C9060 * C3221 + C48890 * C3224) * C2433 +
             (C9060 * C3227 + C48890 * C3230) * C49287) *
                C7758 +
            (C10121 * C2431 + C10122 * C49320 + C10123 * C2432 +
             C10124 * C49309 + (C9060 * C10283 + C48890 * C10286) * C2433 +
             (C9060 * C10287 + C48890 * C10289) * C49287) *
                C49284) *
               C49281 -
           ((C10136 + C10135 + C10134 + C10133 + C10104 + C10103) * C49284 +
            (C10132 + C10131 + C10130 + C10129 + C10094 + C10093) * C7758 +
            (C10314 * C49287 + C10313 * C2433 + C10312 * C49309 +
             C10311 * C2432 + (C9060 * C132 + C48890 * C141) * C49320 +
             (C9060 * C120 + C48890 * C127) * C2431) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
              C1008 * C121 + C49271 * C128) *
                 C118 +
             (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
              C1008 * C133 + C49271 * C142) *
                 C49007) *
                C49319 +
            ((C1220 + C1221 + C1222) * C118 +
             (C1223 + C1224 + C1225) * C49007) *
                C49307 +
            C1698 * C49284) *
               C721 -
           (((C1881 + C1882 + C1883) * C49007 +
             (C1884 + C1885 + C1886) * C118) *
                C49284 +
            ((C1887 + C1888 + C1889) * C49007 +
             (C1890 + C1891 + C1892) * C118) *
                C49307 +
            ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
              C1006 * C351 + C1000 * C363) *
                 C49007 +
             (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
              C1006 * C345 + C1000 * C356) *
                 C118) *
                C49319) *
               C49281) *
              C229 +
          ((((C1892 + C1891 + C1890) * C118 +
             (C1889 + C1888 + C1887) * C49007) *
                C49319 +
            ((C1886 + C1885 + C1884) * C118 +
             (C1883 + C1882 + C1881) * C49007) *
                C49307 +
            ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 + C1001 * C1848 +
              C1008 * C1846 + C49271 * C1849) *
                 C118 +
             (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 + C1001 * C1854 +
              C1008 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C1690 + C1691 + C1692) * C49007 +
             (C1693 + C1694 + C1695) * C118) *
                C49284 +
            ((C1231 + C1230 + C1229) * C49007 +
             (C1228 + C1227 + C1226) * C118) *
                C49307 +
            ((C1225 + C1224 + C1223) * C49007 +
             (C1222 + C1221 + C1220) * C118) *
                C49319) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
             C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
             C117 * C123 + C105 * C130) *
                C118 +
            (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
             C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
             C117 * C135 + C105 * C144) *
                C49007) *
               C48996 * C721 -
           ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
             C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
             C113 * C351 + C101 * C363) *
                C49007 +
            (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
             C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
             C113 * C345 + C101 * C356) *
                C118) *
               C48996 * C49281) *
              C229 +
          (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
             C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
             C117 * C623 + C105 * C628) *
                C118 +
            (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
             C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
             C117 * C633 + C105 * C638) *
                C49007) *
               C48996 * C49281 -
           ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
             C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
             C113 * C243 + C101 * C255) *
                C49007 +
            (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
             C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
             C113 * C237 + C101 * C248) *
                C118) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C2431 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49320 +
            (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
            (C2801 + C2802 + C2803) * C2433 +
            (C2804 + C2805 + C2806) * C49287) *
               C48996 * C721 -
           ((C1008 * C2734 + C49271 * C2742 + C1007 * C2735 + C1001 * C2743 +
             C1006 * C2736 + C1000 * C2744) *
                C49287 +
            (C1008 * C2730 + C49271 * C2737 + C1007 * C2731 + C1001 * C2738 +
             C1006 * C2732 + C1000 * C2739) *
                C2433 +
            (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
            (C2800 + C2799 + C2798) * C49320 +
            (C2797 + C2796 + C2795) * C2431) *
               C48996 * C49281) *
              C229 +
          (((C1892 + C1891 + C1890) * C2431 + (C1889 + C1888 + C1887) * C49320 +
            (C3245 + C3246 + C3247) * C2432 + (C3248 + C3249 + C3250) * C49309 +
            (C1006 * C3220 + C1000 * C3223 + C1007 * C3221 + C1001 * C3224 +
             C1008 * C3222 + C49271 * C3225) *
                C2433 +
            (C1006 * C3226 + C1000 * C3229 + C1007 * C3227 + C1001 * C3230 +
             C1008 * C3228 + C49271 * C3231) *
                C49287) *
               C48996 * C49281 -
           ((C3250 + C3249 + C3248) * C49287 + (C3247 + C3246 + C3245) * C2433 +
            (C1887 + C1888 + C1889) * C49309 + (C1890 + C1891 + C1892) * C2432 +
            (C1225 + C1224 + C1223) * C49320 +
            (C1222 + C1221 + C1220) * C2431) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
              C7762 * C121 + C49271 * C128) *
                 C118 +
             (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
              C7762 * C133 + C49271 * C142) *
                 C49007) *
                C7757 +
            ((C7958 + C7959 + C7960) * C118 +
             (C7961 + C7962 + C7963) * C49007) *
                C7758 +
            C8408 * C49284) *
               C721 -
           (((C8579 + C8580 + C8581) * C49007 +
             (C8582 + C8583 + C8584) * C118) *
                C49284 +
            ((C8585 + C8586 + C8587) * C49007 +
             (C8588 + C8589 + C8590) * C118) *
                C7758 +
            ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
              C7760 * C351 + C49316 * C363) *
                 C49007 +
             (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
              C7760 * C345 + C49316 * C356) *
                 C118) *
                C7757) *
               C49281) *
              C229 +
          ((((C8590 + C8589 + C8588) * C118 +
             (C8587 + C8586 + C8585) * C49007) *
                C7757 +
            ((C8584 + C8583 + C8582) * C118 +
             (C8581 + C8580 + C8579) * C49007) *
                C7758 +
            ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 + C49303 * C1848 +
              C7762 * C1846 + C49271 * C1849) *
                 C118 +
             (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 + C49303 * C1854 +
              C7762 * C1852 + C49271 * C1855) *
                 C49007) *
                C49284) *
               C49281 -
           (((C8400 + C8401 + C8402) * C49007 +
             (C8403 + C8404 + C8405) * C118) *
                C49284 +
            ((C7969 + C7968 + C7967) * C49007 +
             (C7966 + C7965 + C7964) * C118) *
                C7758 +
            ((C7963 + C7962 + C7961) * C49007 +
             (C7960 + C7959 + C7958) * C118) *
                C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C118 +
             (C9060 * C131 + C48890 * C140) * C49007) *
                C9055 +
            (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
            C9456 * C9059) *
               C721 -
           ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
            (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
            ((C9060 * C351 + C48890 * C363) * C49007 +
             (C9060 * C345 + C48890 * C356) * C118) *
                C9055) *
               C49281) *
              C229 +
          (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
            (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
            ((C9060 * C9546 + C48890 * C9547) * C118 +
             (C9060 * C9548 + C48890 * C9549) * C49007) *
                C9059) *
               C49281 -
           ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
            (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
            (C9201 + C9200) * C9055) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9060 * C119 + C48890 * C126) * C2431 +
             (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
             C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
                C7757 +
            (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
            C10587 * C49284) *
               C721 -
           ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
            (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
            ((C9060 * C2736 + C48890 * C2744) * C49287 +
             (C9060 * C2732 + C48890 * C2739) * C2433 + C10310 * C49309 +
             C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
                C7757) *
               C49281) *
              C229 +
          (((C10753 + C10752 + C10751 + C10750 + C10761 + C10760) * C7757 +
            (C10745 + C10744 + C10743 + C10742 + C10759 + C10758) * C7758 +
            (C9570 * C2431 + C9569 * C49320 + C10582 * C2432 + C10581 * C49309 +
             (C9060 * C10733 + C48890 * C10734) * C2433 +
             (C9060 * C10735 + C48890 * C10736) * C49287) *
                C49284) *
               C49281 -
           ((C10584 + C10585 + C10576 + C10577 + C10578 + C10579) * C49284 +
            (C10128 + C10127 + C10088 + C10087 + C10086 + C10085) * C7758 +
            (C10126 + C10125 + C10080 + C10079 + C10078 + C10077) * C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C867 -
          (((C1881 + C1882 + C1883) * C49007 + (C1884 + C1885 + C1886) * C118) *
               C49284 +
           ((C1887 + C1888 + C1889) * C49007 + (C1890 + C1891 + C1892) * C118) *
               C49307 +
           ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49007 +
            (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C118) *
               C49319) *
              C868 +
          (((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
             C1008 * C872 + C49271 * C877) *
                C118 +
            (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
             C1008 * C882 + C49271 * C887) *
                C49007) *
               C49319 +
           ((C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
             C1008 * C2296 + C49271 * C2302) *
                C118 +
            (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
             C1008 * C2305 + C49271 * C2314) *
                C49007) *
               C49307 +
           ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
             C1008 * C2299 + C49271 * C2308) *
                C118 +
            (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
             C1008 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C49007 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48996 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C49007) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
            C1008 * C121 + C49271 * C128) *
               C2431 +
           (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
            C1008 * C133 + C49271 * C142) *
               C49320 +
           (C2795 + C2796 + C2797) * C2432 + (C2798 + C2799 + C2800) * C49309 +
           C3679 * C2433 + C3680 * C49287) *
              C48996 * C867 -
          ((C3681 + C3682 + C3683) * C49287 + (C3684 + C3685 + C3686) * C2433 +
           (C2806 + C2805 + C2804) * C49309 + (C2803 + C2802 + C2801) * C2432 +
           (C2800 + C2799 + C2798) * C49320 + (C2797 + C2796 + C2795) * C2431) *
              C48996 * C868 +
          (C3679 * C2431 + C3680 * C49320 + (C3686 + C3685 + C3684) * C2432 +
           (C3683 + C3682 + C3681) * C49309 +
           (C1006 * C3652 + C1000 * C3655 + C1007 * C3653 + C1001 * C3656 +
            C1008 * C3654 + C49271 * C3657) *
               C2433 +
           (C1006 * C3658 + C1000 * C3661 + C1007 * C3659 + C1001 * C3662 +
            C1008 * C3660 + C49271 * C3663) *
               C49287) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C867 -
          (((C8579 + C8580 + C8581) * C49007 + (C8582 + C8583 + C8584) * C118) *
               C49284 +
           ((C8585 + C8586 + C8587) * C49007 + (C8588 + C8589 + C8590) * C118) *
               C7758 +
           ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
             C7760 * C351 + C49316 * C363) *
                C49007 +
            (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
             C7760 * C345 + C49316 * C356) *
                C118) *
               C7757) *
              C868 +
          (((C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C118 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49007) *
               C7757 +
           ((C7760 * C2294 + C49316 * C2300 + C7761 * C2295 + C49303 * C2301 +
             C7762 * C2296 + C49271 * C2302) *
                C118 +
            (C7760 * C2303 + C49316 * C2312 + C7761 * C2304 + C49303 * C2313 +
             C7762 * C2305 + C49271 * C2314) *
                C49007) *
               C7758 +
           ((C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
             C7762 * C2299 + C49271 * C2308) *
                C118 +
            (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
             C7762 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C867 -
          ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
           (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
           ((C9060 * C351 + C48890 * C363) * C49007 +
            (C9060 * C345 + C48890 * C356) * C118) *
               C9055) *
              C868 +
          (((C9060 * C870 + C48890 * C875) * C118 +
            (C9060 * C880 + C48890 * C885) * C49007) *
               C9055 +
           ((C9060 * C2294 + C48890 * C2300) * C118 +
            (C9060 * C2303 + C48890 * C2312) * C49007) *
               C9056 +
           ((C9060 * C2297 + C48890 * C2306) * C118 +
            (C9060 * C2309 + C48890 * C2315) * C49007) *
               C9057 +
           ((C9060 * C9808 + C48890 * C9810) * C118 +
            (C9060 * C9811 + C48890 * C9814) * C49007) *
               C9058 +
           ((C9060 * C9809 + C48890 * C9812) * C118 +
            (C9060 * C9813 + C48890 * C9815) * C49007) *
               C9059) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C2431 +
            (C9060 * C131 + C48890 * C140) * C49320 + C10307 * C2432 +
            C10308 * C49309 + C10309 * C2433 + C10310 * C49287) *
               C7757 +
           (C10077 + C10078 + C10079 + C10080 + C10125 + C10126) * C7758 +
           C10587 * C49284) *
              C867 -
          ((C10758 + C10759 + C10742 + C10743 + C10744 + C10745) * C49284 +
           (C10760 + C10761 + C10750 + C10751 + C10752 + C10753) * C7758 +
           (C11176 * C49287 + C11177 * C2433 + C10310 * C49309 +
            C10309 * C2432 + C10308 * C49320 + C10307 * C2431) *
               C7757) *
              C868 +
          ((C10309 * C2431 + C10310 * C49320 + C11177 * C2432 +
            C11176 * C49309 + (C9060 * C3652 + C48890 * C3655) * C2433 +
            (C9060 * C3658 + C48890 * C3661) * C49287) *
               C7757 +
           (C10113 * C2431 + C10114 * C49320 + C10757 * C2432 +
            C10756 * C49309 + (C9060 * C11163 + C48890 * C11165) * C2433 +
            (C9060 * C11166 + C48890 * C11169) * C49287) *
               C7758 +
           (C10115 * C2431 + C10116 * C49320 + C10755 * C2432 +
            C10754 * C49309 + (C9060 * C11164 + C48890 * C11167) * C2433 +
            (C9060 * C11168 + C48890 * C11170) * C49287) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
            C3792 * C343 + C3786 * C354 + C3793 * C342 + C49288 * C353) *
               C4967 +
           (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
            C3792 * C349 + C3786 * C361 + C3793 * C348 + C49288 * C360) *
               C49094) *
              C48996 * C48978 * C48961 * C110 -
          ((C3793 * C347 + C49288 * C359 + C3792 * C348 + C3786 * C360 +
            C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
               C49094 +
           (C3793 * C341 + C49288 * C352 + C3792 * C342 + C3786 * C353 +
            C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
               C4967 +
           (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
            C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
               C49252 +
           (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
            C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
               C4966) *
              C48996 * C48978 * C48961 * C111 +
          ((C3790 * C121 + C3784 * C128 + C3791 * C122 + C3785 * C129 +
            C3792 * C123 + C3786 * C130 + C3793 * C124 + C49288 * C137) *
               C4966 +
           (C3790 * C133 + C3784 * C142 + C3791 * C134 + C3785 * C143 +
            C3792 * C135 + C3786 * C144 + C3793 * C136 + C49288 * C145) *
               C49252 +
           (C3790 * C343 + C3784 * C354 + C3791 * C342 + C3785 * C353 +
            C3792 * C341 + C3786 * C352 + C3793 * C346 + C49288 * C357) *
               C4967 +
           (C3790 * C349 + C3784 * C361 + C3791 * C348 + C3785 * C360 +
            C3792 * C347 + C3786 * C359 + C3793 * C358 + C49288 * C364) *
               C49094) *
              C48996 * C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C47907 * C345 + C49229 * C356 + C47888 * C344 + C48900 * C355) *
                C4967 +
            (C47907 * C351 + C49229 * C363 + C47888 * C350 + C48900 * C362) *
                C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
               C7758 +
           (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
            (C12025 + C12024) * C49094) *
               C49284) *
              C48978 * C48961 * C110 -
          (((C47888 * C1393 + C48900 * C1401 + C47907 * C1394 +
             C49229 * C1402) *
                C49094 +
            (C47888 * C1389 + C48900 * C1396 + C47907 * C1390 +
             C49229 * C1397) *
                C4967 +
            (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
               C49284 +
           ((C47888 * C631 + C48900 * C636 + C47907 * C630 + C49229 * C635) *
                C49094 +
            (C47888 * C621 + C48900 * C626 + C47907 * C620 + C49229 * C625) *
                C4967 +
            (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
               C7758 +
           ((C47888 * C349 + C48900 * C361 + C47907 * C350 + C49229 * C362) *
                C49094 +
            (C47888 * C343 + C48900 * C354 + C47907 * C344 + C49229 * C355) *
                C4967 +
            (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                C49252 +
            (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                C4966) *
               C7757) *
              C48978 * C48961 * C111 +
          (((C47907 * C121 + C49229 * C128 + C47888 * C122 + C48900 * C129) *
                C4966 +
            (C47907 * C133 + C49229 * C142 + C47888 * C134 + C48900 * C143) *
                C49252 +
            (C47907 * C343 + C49229 * C354 + C47888 * C342 + C48900 * C353) *
                C4967 +
            (C47907 * C349 + C49229 * C361 + C47888 * C348 + C48900 * C360) *
                C49094) *
               C7757 +
           ((C47907 * C235 + C49229 * C246 + C47888 * C234 + C48900 * C245) *
                C4966 +
            (C47907 * C241 + C49229 * C253 + C47888 * C240 + C48900 * C252) *
                C49252 +
            (C47907 * C621 + C49229 * C626 + C47888 * C622 + C48900 * C627) *
                C4967 +
            (C47907 * C631 + C49229 * C636 + C47888 * C632 + C48900 * C637) *
                C49094) *
               C7758 +
           ((C47907 * C519 + C49229 * C524 + C47888 * C520 + C48900 * C525) *
                C4966 +
            (C47907 * C529 + C49229 * C534 + C47888 * C530 + C48900 * C535) *
                C49252 +
            (C47907 * C1389 + C49229 * C1396 + C47888 * C1392 +
             C48900 * C1399) *
                C4967 +
            (C47907 * C1393 + C49229 * C1401 + C47888 * C1400 +
             C48900 * C1404) *
                C49094) *
               C49284) *
              C48978 * C48961 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C3790 * C345 + C3784 * C356 + C3791 * C344 + C3785 * C355 +
             C3792 * C343 + C3786 * C354 + C3793 * C342 + C49288 * C353) *
                C4967 +
            (C3790 * C351 + C3784 * C363 + C3791 * C350 + C3785 * C362 +
             C3792 * C349 + C3786 * C361 + C3793 * C348 + C49288 * C360) *
                C49094) *
               C48996 * C48978 * C229 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C48978 * C49279) *
              C231 +
          (((C3965 + C3966 + C3967 + C3968) * C4966 +
            (C3969 + C3970 + C3971 + C3972) * C49252 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                C4967 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C3793 * C347 + C49288 * C359 + C3792 * C348 + C3786 * C360 +
             C3791 * C349 + C3785 * C361 + C3790 * C350 + C3784 * C362) *
                C49094 +
            (C3793 * C341 + C49288 * C352 + C3792 * C342 + C3786 * C353 +
             C3791 * C343 + C3785 * C354 + C3790 * C344 + C3784 * C355) *
                C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C47907 * C345 + C49229 * C356 + C47888 * C344 + C48900 * C355) *
                 C4967 +
             (C47907 * C351 + C49229 * C363 + C47888 * C350 + C48900 * C362) *
                 C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C48978 * C229 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
             (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
                C7758 +
            ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
             (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
                C7757) *
               C48978 * C49279) *
              C231 +
          ((((C11474 + C11475) * C4966 + (C11476 + C11477) * C49252 +
             (C12746 + C12747) * C4967 + (C12748 + C12749) * C49094) *
                C7757 +
            ((C11478 + C11479) * C4966 + (C11480 + C11481) * C49252 +
             (C12750 + C12751) * C4967 + (C12752 + C12753) * C49094) *
                C7758 +
            ((C11482 + C11483) * C4966 + (C11484 + C11485) * C49252 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C47888 * C349 + C48900 * C361 + C47907 * C350 + C49229 * C362) *
                 C49094 +
             (C47888 * C343 + C48900 * C354 + C47907 * C344 + C49229 * C355) *
                 C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C48978 * C229) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C339 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C48961 * C231 +
          (((C5269 + C5270 + C5271 + C5272) * C4966 +
            (C5273 + C5274 + C5275 + C5276) * C49252 +
            (C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
             C3792 * C873 + C3786 * C878 + C3793 * C874 + C49288 * C879) *
                C4967 +
            (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
             C3792 * C883 + C3786 * C888 + C3793 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C339 -
           (((C47888 * C2310 + C48900 * C2316 + C47907 * C2309 +
              C49229 * C2315) *
                 C49094 +
             (C47888 * C2298 + C48900 * C2307 + C47907 * C2297 +
              C49229 * C2306) *
                 C4967 +
             (C12024 + C12025) * C49252 + (C12026 + C12027) * C4966) *
                C49284 +
            ((C47888 * C2304 + C48900 * C2313 + C47907 * C2303 +
              C49229 * C2312) *
                 C49094 +
             (C47888 * C2295 + C48900 * C2301 + C47907 * C2294 +
              C49229 * C2300) *
                 C4967 +
             (C12028 + C12029) * C49252 + (C12030 + C12031) * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C48961 * C231 +
          ((((C12968 + C12969) * C4966 + (C12970 + C12971) * C49252 +
             (C47907 * C871 + C49229 * C876 + C47888 * C872 + C48900 * C877) *
                 C4967 +
             (C47907 * C881 + C49229 * C886 + C47888 * C882 + C48900 * C887) *
                 C49094) *
                C7757 +
            ((C12746 + C12747) * C4966 + (C12748 + C12749) * C49252 +
             (C47907 * C2295 + C49229 * C2301 + C47888 * C2296 +
              C48900 * C2302) *
                 C4967 +
             (C47907 * C2304 + C49229 * C2313 + C47888 * C2305 +
              C48900 * C2314) *
                 C49094) *
                C7758 +
            ((C12750 + C12751) * C4966 + (C12752 + C12753) * C49252 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C339) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C48978 * C447 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C48978 * C49279) *
              C449 +
          (((C3965 + C3966 + C3967 + C3968) * C4966 +
            (C3969 + C3970 + C3971 + C3972) * C49252 +
            (C3790 * C620 + C3784 * C625 + C3791 * C621 + C3785 * C626 +
             C3792 * C622 + C3786 * C627 + C3793 * C623 + C49288 * C628) *
                C4967 +
            (C3790 * C630 + C3784 * C635 + C3791 * C631 + C3785 * C636 +
             C3792 * C632 + C3786 * C637 + C3793 * C633 + C49288 * C638) *
                C49094) *
               C48996 * C48978 * C49279 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
                C7758 +
            (C11844 * C4966 + C11845 * C49252 + (C12027 + C12026) * C4967 +
             (C12025 + C12024) * C49094) *
                C49284) *
               C48978 * C447 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
             (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
                C7758 +
            ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
             (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
                C7757) *
               C48978 * C49279) *
              C449 +
          ((((C11474 + C11475) * C4966 + (C11476 + C11477) * C49252 +
             (C12746 + C12747) * C4967 + (C12748 + C12749) * C49094) *
                C7757 +
            ((C11478 + C11479) * C4966 + (C11480 + C11481) * C49252 +
             (C12750 + C12751) * C4967 + (C12752 + C12753) * C49094) *
                C7758 +
            ((C11482 + C11483) * C4966 + (C11484 + C11485) * C49252 +
             (C47907 * C1845 + C49229 * C1848 + C47888 * C1846 +
              C48900 * C1849) *
                 C4967 +
             (C47907 * C1851 + C49229 * C1854 + C47888 * C1852 +
              C48900 * C1855) *
                 C49094) *
                C49284) *
               C48978 * C49279 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C48978 * C447) *
              C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C5261 + C5262 + C5263 + C5264) * C4967 +
           (C5265 + C5266 + C5267 + C5268) * C49094) *
              C48996 * C48978 * C513 -
          ((C4501 + C4502 + C4503 + C4504) * C49094 +
           (C4505 + C4506 + C4507 + C4508) * C4967 +
           (C3964 + C3963 + C3962 + C3961) * C49252 +
           (C3960 + C3959 + C3958 + C3957) * C4966) *
              C48996 * C48978 * C514 +
          ((C4354 + C4353 + C4352 + C4351) * C4966 +
           (C4350 + C4349 + C4348 + C4347) * C49252 +
           (C3790 * C1391 + C3784 * C1398 + C3791 * C1390 + C3785 * C1397 +
            C3792 * C1389 + C3786 * C1396 + C3793 * C1392 + C49288 * C1399) *
               C4967 +
           (C3790 * C1395 + C3784 * C1403 + C3791 * C1394 + C3785 * C1402 +
            C3792 * C1393 + C3786 * C1401 + C3793 * C1400 + C49288 * C1404) *
               C49094) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            (C12031 + C12030) * C4967 + (C12029 + C12028) * C49094) *
               C7758 +
           C13320 * C49284) *
              C48978 * C513 -
          (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
            (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
               C49284 +
           ((C12024 + C12025) * C49094 + (C12026 + C12027) * C4967 +
            (C11469 + C11468) * C49252 + (C11467 + C11466) * C4966) *
               C7758 +
           ((C12028 + C12029) * C49094 + (C12030 + C12031) * C4967 +
            (C11465 + C11464) * C49252 + (C11463 + C11462) * C4966) *
               C7757) *
              C48978 * C514 +
          (C13320 * C7757 +
           (C11846 * C4966 + C11847 * C49252 + (C12023 + C12022) * C4967 +
            (C12021 + C12020) * C49094) *
               C7758 +
           ((C11863 + C11862) * C4966 + (C11861 + C11860) * C49252 +
            (C47907 * C9297 + C49229 * C9300 + C47888 * C9298 +
             C48900 * C9301) *
                C4967 +
            (C47907 * C9299 + C49229 * C9303 + C47888 * C9302 +
             C48900 * C9304) *
                C49094) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C339 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C447 +
          (((C4508 + C4507 + C4506 + C4505) * C4966 +
            (C4504 + C4503 + C4502 + C4501) * C49252 +
            (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C4967 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C339 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C447 +
          (((C13515 * C4966 + C13516 * C49252 + (C13544 + C13543) * C4967 +
             (C13542 + C13541) * C49094) *
                C7757 +
            (C13314 * C4966 + C13315 * C49252 + (C13540 + C13539) * C4967 +
             (C13538 + C13537) * C49094) *
                C7758 +
            ((C12023 + C12022) * C4966 + (C12021 + C12020) * C49252 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            (C13525 * C49094 + C13526 * C4967 + (C11469 + C11468) * C49252 +
             (C11467 + C11466) * C4966) *
                C7758 +
            (C13535 * C49094 + C13536 * C4967 + (C11465 + C11464) * C49252 +
             (C11463 + C11462) * C4966) *
                C7757) *
               C339) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C721 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C48961 * C449 +
          (((C5269 + C5270 + C5271 + C5272) * C4966 +
            (C5273 + C5274 + C5275 + C5276) * C49252 +
            (C3790 * C871 + C3784 * C876 + C3791 * C872 + C3785 * C877 +
             C3792 * C873 + C3786 * C878 + C3793 * C874 + C49288 * C879) *
                C4967 +
            (C3790 * C881 + C3784 * C886 + C3791 * C882 + C3785 * C887 +
             C3792 * C883 + C3786 * C888 + C3793 * C884 + C49288 * C889) *
                C49094) *
               C48996 * C49281 -
           ((C5276 + C5275 + C5274 + C5273) * C49094 +
            (C5272 + C5271 + C5270 + C5269) * C4967 +
            (C3793 * C135 + C49288 * C144 + C3792 * C134 + C3786 * C143 +
             C3791 * C133 + C3785 * C142 + C3790 * C132 + C3784 * C141) *
                C49252 +
            (C3793 * C123 + C49288 * C130 + C3792 * C122 + C3786 * C129 +
             C3791 * C121 + C3785 * C128 + C3790 * C120 + C3784 * C127) *
                C4966) *
               C48996 * C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C48961 * C449 +
          ((((C12968 + C12969) * C4966 + (C12970 + C12971) * C49252 +
             (C47907 * C871 + C49229 * C876 + C47888 * C872 + C48900 * C877) *
                 C4967 +
             (C47907 * C881 + C49229 * C886 + C47888 * C882 + C48900 * C887) *
                 C49094) *
                C7757 +
            ((C12746 + C12747) * C4966 + (C12748 + C12749) * C49252 +
             (C47907 * C2295 + C49229 * C2301 + C47888 * C2296 +
              C48900 * C2302) *
                 C4967 +
             (C47907 * C2304 + C49229 * C2313 + C47888 * C2305 +
              C48900 * C2314) *
                 C49094) *
                C7758 +
            ((C12750 + C12751) * C4966 + (C12752 + C12753) * C49252 +
             (C47907 * C2298 + C49229 * C2307 + C47888 * C2299 +
              C48900 * C2308) *
                 C4967 +
             (C47907 * C2310 + C49229 * C2316 + C47888 * C2311 +
              C48900 * C2317) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12753 + C12752) * C49094 + (C12751 + C12750) * C4967 +
             (C11481 + C11480) * C49252 + (C11479 + C11478) * C4966) *
                C49284 +
            ((C12749 + C12748) * C49094 + (C12747 + C12746) * C4967 +
             (C11477 + C11476) * C49252 + (C11475 + C11474) * C4966) *
                C7758 +
            ((C12971 + C12970) * C49094 + (C12969 + C12968) * C4967 +
             (C47888 * C133 + C48900 * C142 + C47907 * C132 + C49229 * C141) *
                 C49252 +
             (C47888 * C121 + C48900 * C128 + C47907 * C120 + C49229 * C127) *
                 C4966) *
                C7757) *
               C721) *
              C48961 * C49277)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
             C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
                C4966 +
            (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
             C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
                C49252 +
            (C5261 + C5262 + C5263 + C5264) * C4967 +
            (C5265 + C5266 + C5267 + C5268) * C49094) *
               C48996 * C721 -
           ((C3793 * C883 + C49288 * C888 + C3792 * C882 + C3786 * C887 +
             C3791 * C881 + C3785 * C886 + C3790 * C880 + C3784 * C885) *
                C49094 +
            (C3793 * C873 + C49288 * C878 + C3792 * C872 + C3786 * C877 +
             C3791 * C871 + C3785 * C876 + C3790 * C870 + C3784 * C875) *
                C4967 +
            (C5268 + C5267 + C5266 + C5265) * C49252 +
            (C5264 + C5263 + C5262 + C5261) * C4966) *
               C48996 * C49281) *
              C229 +
          (((C4508 + C4507 + C4506 + C4505) * C4966 +
            (C4504 + C4503 + C4502 + C4501) * C49252 +
            (C3790 * C2294 + C3784 * C2300 + C3791 * C2295 + C3785 * C2301 +
             C3792 * C2296 + C3786 * C2302 + C3793 * C2580 + C49288 * C2581) *
                C4967 +
            (C3790 * C2303 + C3784 * C2312 + C3791 * C2304 + C3785 * C2313 +
             C3792 * C2305 + C3786 * C2314 + C3793 * C2582 + C49288 * C2583) *
                C49094) *
               C48996 * C49281 -
           ((C4501 + C4502 + C4503 + C4504) * C49094 +
            (C4505 + C4506 + C4507 + C4508) * C4967 +
            (C3964 + C3963 + C3962 + C3961) * C49252 +
            (C3960 + C3959 + C3958 + C3957) * C4966) *
               C48996 * C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                 C4966 +
             (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                 C49252 +
             (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
                C7757 +
            ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
             C13515 * C4967 + C13516 * C49094) *
                C7758 +
            C13320 * C49284) *
               C721 -
           (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
             C13525 * C49252 + C13526 * C4966) *
                C49284 +
            ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
             C13535 * C49252 + C13536 * C4966) *
                C7758 +
            ((C47888 * C881 + C48900 * C886 + C47907 * C880 + C49229 * C885) *
                 C49094 +
             (C47888 * C871 + C48900 * C876 + C47907 * C870 + C49229 * C875) *
                 C4967 +
             (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
                C7757) *
               C49281) *
              C229 +
          (((C13515 * C4966 + C13516 * C49252 + (C13544 + C13543) * C4967 +
             (C13542 + C13541) * C49094) *
                C7757 +
            (C13314 * C4966 + C13315 * C49252 + (C13540 + C13539) * C4967 +
             (C13538 + C13537) * C49094) *
                C7758 +
            ((C12023 + C12022) * C4966 + (C12021 + C12020) * C49252 +
             (C47907 * C9808 + C49229 * C9810 + C47888 * C10072 +
              C48900 * C10073) *
                 C4967 +
             (C47907 * C9811 + C49229 * C9814 + C47888 * C10074 +
              C48900 * C10075) *
                 C49094) *
                C49284) *
               C49281 -
           (((C12020 + C12021) * C49094 + (C12022 + C12023) * C4967 +
             (C11473 + C11472) * C49252 + (C11471 + C11470) * C4966) *
                C49284 +
            (C13525 * C49094 + C13526 * C4967 + (C11469 + C11468) * C49252 +
             (C11467 + C11466) * C4966) *
                C7758 +
            (C13535 * C49094 + C13536 * C4967 + (C11465 + C11464) * C49252 +
             (C11463 + C11462) * C4966) *
                C7757) *
               C721) *
              C49279) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3790 * C119 + C3784 * C126 + C3791 * C120 + C3785 * C127 +
            C3792 * C121 + C3786 * C128 + C3793 * C122 + C49288 * C129) *
               C4966 +
           (C3790 * C131 + C3784 * C140 + C3791 * C132 + C3785 * C141 +
            C3792 * C133 + C3786 * C142 + C3793 * C134 + C49288 * C143) *
               C49252 +
           (C5261 + C5262 + C5263 + C5264) * C4967 +
           (C5265 + C5266 + C5267 + C5268) * C49094) *
              C48996 * C867 -
          ((C6009 + C6010 + C6011 + C6012) * C49094 +
           (C6013 + C6014 + C6015 + C6016) * C4967 +
           (C5268 + C5267 + C5266 + C5265) * C49252 +
           (C5264 + C5263 + C5262 + C5261) * C4966) *
              C48996 * C868 +
          ((C6016 + C6015 + C6014 + C6013) * C4966 +
           (C6012 + C6011 + C6010 + C6009) * C49252 +
           (C3790 * C2732 + C3784 * C2739 + C3791 * C2731 + C3785 * C2738 +
            C3792 * C2730 + C3786 * C2737 + C3793 * C2733 + C49288 * C2740) *
               C4967 +
           (C3790 * C2736 + C3784 * C2744 + C3791 * C2735 + C3785 * C2743 +
            C3792 * C2734 + C3786 * C2742 + C3793 * C2741 + C49288 * C2745) *
               C49094) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47907 * C119 + C49229 * C126 + C47888 * C120 + C48900 * C127) *
                C4966 +
            (C47907 * C131 + C49229 * C140 + C47888 * C132 + C48900 * C141) *
                C49252 +
            (C12964 + C12965) * C4967 + (C12966 + C12967) * C49094) *
               C7757 +
           ((C11462 + C11463) * C4966 + (C11464 + C11465) * C49252 +
            C13515 * C4967 + C13516 * C49094) *
               C7758 +
           C13320 * C49284) *
              C867 -
          (((C13537 + C13538) * C49094 + (C13539 + C13540) * C4967 +
            C13525 * C49252 + C13526 * C4966) *
               C49284 +
           ((C13541 + C13542) * C49094 + (C13543 + C13544) * C4967 +
            C13535 * C49252 + C13536 * C4966) *
               C7758 +
           ((C14087 + C14088) * C49094 + (C14089 + C14090) * C4967 +
            (C12967 + C12966) * C49252 + (C12965 + C12964) * C4966) *
               C7757) *
              C868 +
          (((C14090 + C14089) * C4966 + (C14088 + C14087) * C49252 +
            (C47907 * C2732 + C49229 * C2739 + C47888 * C2731 +
             C48900 * C2738) *
                C4967 +
            (C47907 * C2736 + C49229 * C2744 + C47888 * C2735 +
             C48900 * C2743) *
                C49094) *
               C7757 +
           ((C13544 + C13543) * C4966 + (C13542 + C13541) * C49252 +
            (C47907 * C3220 + C49229 * C3223 + C47888 * C3221 +
             C48900 * C3224) *
                C4967 +
            (C47907 * C3226 + C49229 * C3229 + C47888 * C3227 +
             C48900 * C3230) *
                C49094) *
               C7758 +
           ((C13540 + C13539) * C4966 + (C13538 + C13537) * C49252 +
            (C47907 * C10282 + C49229 * C10285 + C47888 * C10283 +
             C48900 * C10286) *
                C4967 +
            (C47907 * C10284 + C49229 * C10288 + C47888 * C10287 +
             C48900 * C10289) *
                C49094) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                     C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                     C117 * C123 + C105 * C130) *
                        C118 +
                    (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                     C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                     C117 * C135 + C105 * C144) *
                        C49007) *
                       C48996 * C48978 * C48961 * C110 -
                   ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                     C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C132 + C101 * C141) *
                        C49007 +
                    (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                     C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                     C113 * C120 + C101 * C127) *
                        C118) *
                       C48996 * C48978 * C48961 * C111 +
                   ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130 + C116 * C124 + C104 * C137 +
                     C117 * C125 + C105 * C138) *
                        C118 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C135 + C103 * C144 + C116 * C136 + C104 * C145 +
                     C117 * C139 + C105 * C146) *
                        C49007) *
                       C48996 * C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                      C1001 * C127 + C1008 * C121 + C49271 * C128) *
                         C118 +
                     (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                      C1001 * C141 + C1008 * C133 + C49271 * C142) *
                         C49007) *
                        C49319 +
                    ((C1006 * C237 + C1000 * C248 + C1007 * C236 +
                      C1001 * C247 + C1008 * C235 + C49271 * C246) *
                         C118 +
                     (C1006 * C243 + C1000 * C255 + C1007 * C242 +
                      C1001 * C254 + C1008 * C241 + C49271 * C253) *
                         C49007) *
                        C49307 +
                    ((C1006 * C517 + C1000 * C522 + C1007 * C518 +
                      C1001 * C523 + C1008 * C519 + C49271 * C524) *
                         C118 +
                     (C1006 * C527 + C1000 * C532 + C1007 * C528 +
                      C1001 * C533 + C1008 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C1008 * C530 + C49271 * C535 + C1007 * C529 +
                      C1001 * C534 + C1006 * C528 + C1000 * C533) *
                         C49007 +
                     (C1008 * C520 + C49271 * C525 + C1007 * C519 +
                      C1001 * C524 + C1006 * C518 + C1000 * C523) *
                         C118) *
                        C49284 +
                    ((C1008 * C240 + C49271 * C252 + C1007 * C241 +
                      C1001 * C253 + C1006 * C242 + C1000 * C254) *
                         C49007 +
                     (C1008 * C234 + C49271 * C245 + C1007 * C235 +
                      C1001 * C246 + C1006 * C236 + C1000 * C247) *
                         C118) *
                        C49307 +
                    ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                      C1001 * C142 + C1006 * C132 + C1000 * C141) *
                         C49007 +
                     (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                      C1001 * C128 + C1006 * C120 + C1000 * C127) *
                         C118) *
                        C49319) *
                       C48978 * C48961 * C111 +
                   (((C1006 * C121 + C1000 * C128 + C1007 * C122 +
                      C1001 * C129 + C1008 * C123 + C49271 * C130) *
                         C118 +
                     (C1006 * C133 + C1000 * C142 + C1007 * C134 +
                      C1001 * C143 + C1008 * C135 + C49271 * C144) *
                         C49007) *
                        C49319 +
                    ((C1006 * C235 + C1000 * C246 + C1007 * C234 +
                      C1001 * C245 + C1008 * C233 + C49271 * C244) *
                         C118 +
                     (C1006 * C241 + C1000 * C253 + C1007 * C240 +
                      C1001 * C252 + C1008 * C239 + C49271 * C251) *
                         C49007) *
                        C49307 +
                    ((C1006 * C519 + C1000 * C524 + C1007 * C520 +
                      C1001 * C525 + C1008 * C521 + C49271 * C526) *
                         C118 +
                     (C1006 * C529 + C1000 * C534 + C1007 * C530 +
                      C1001 * C535 + C1008 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                      C49303 * C127 + C7762 * C121 + C49271 * C128) *
                         C118 +
                     (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                      C49303 * C141 + C7762 * C133 + C49271 * C142) *
                         C49007) *
                        C7757 +
                    ((C7760 * C237 + C49316 * C248 + C7761 * C236 +
                      C49303 * C247 + C7762 * C235 + C49271 * C246) *
                         C118 +
                     (C7760 * C243 + C49316 * C255 + C7761 * C242 +
                      C49303 * C254 + C7762 * C241 + C49271 * C253) *
                         C49007) *
                        C7758 +
                    ((C7760 * C517 + C49316 * C522 + C7761 * C518 +
                      C49303 * C523 + C7762 * C519 + C49271 * C524) *
                         C118 +
                     (C7760 * C527 + C49316 * C532 + C7761 * C528 +
                      C49303 * C533 + C7762 * C529 + C49271 * C534) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C110 -
                   (((C7762 * C530 + C49271 * C535 + C7761 * C529 +
                      C49303 * C534 + C7760 * C528 + C49316 * C533) *
                         C49007 +
                     (C7762 * C520 + C49271 * C525 + C7761 * C519 +
                      C49303 * C524 + C7760 * C518 + C49316 * C523) *
                         C118) *
                        C49284 +
                    ((C7762 * C240 + C49271 * C252 + C7761 * C241 +
                      C49303 * C253 + C7760 * C242 + C49316 * C254) *
                         C49007 +
                     (C7762 * C234 + C49271 * C245 + C7761 * C235 +
                      C49303 * C246 + C7760 * C236 + C49316 * C247) *
                         C118) *
                        C7758 +
                    ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                      C49303 * C142 + C7760 * C132 + C49316 * C141) *
                         C49007 +
                     (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                      C49303 * C128 + C7760 * C120 + C49316 * C127) *
                         C118) *
                        C7757) *
                       C48978 * C48961 * C111 +
                   (((C7760 * C121 + C49316 * C128 + C7761 * C122 +
                      C49303 * C129 + C7762 * C123 + C49271 * C130) *
                         C118 +
                     (C7760 * C133 + C49316 * C142 + C7761 * C134 +
                      C49303 * C143 + C7762 * C135 + C49271 * C144) *
                         C49007) *
                        C7757 +
                    ((C7760 * C235 + C49316 * C246 + C7761 * C234 +
                      C49303 * C245 + C7762 * C233 + C49271 * C244) *
                         C118 +
                     (C7760 * C241 + C49316 * C253 + C7761 * C240 +
                      C49303 * C252 + C7762 * C239 + C49271 * C251) *
                         C49007) *
                        C7758 +
                    ((C7760 * C519 + C49316 * C524 + C7761 * C520 +
                      C49303 * C525 + C7762 * C521 + C49271 * C526) *
                         C118 +
                     (C7760 * C529 + C49316 * C534 + C7761 * C530 +
                      C49303 * C535 + C7762 * C531 + C49271 * C536) *
                         C49007) *
                        C49284) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C9060 * C119 + C48890 * C126) * C118 +
                     (C9060 * C131 + C48890 * C140) * C49007) *
                        C9055 +
                    ((C9060 * C237 + C48890 * C248) * C118 +
                     (C9060 * C243 + C48890 * C255) * C49007) *
                        C9056 +
                    ((C9060 * C517 + C48890 * C522) * C118 +
                     (C9060 * C527 + C48890 * C532) * C49007) *
                        C9057 +
                    ((C9060 * C1157 + C48890 * C1164) * C118 +
                     (C9060 * C1161 + C48890 * C1169) * C49007) *
                        C9058 +
                    ((C9060 * C1661 + C48890 * C1664) * C118 +
                     (C9060 * C1667 + C48890 * C1670) * C49007) *
                        C9059) *
                       C48978 * C48961 * C110 -
                   (((C9060 * C1668 + C48890 * C1671) * C49007 +
                     (C9060 * C1662 + C48890 * C1665) * C118) *
                        C9059 +
                    ((C9060 * C1160 + C48890 * C1168) * C49007 +
                     (C9060 * C1156 + C48890 * C1163) * C118) *
                        C9058 +
                    ((C9060 * C528 + C48890 * C533) * C49007 +
                     (C9060 * C518 + C48890 * C523) * C118) *
                        C9057 +
                    ((C9060 * C242 + C48890 * C254) * C49007 +
                     (C9060 * C236 + C48890 * C247) * C118) *
                        C9056 +
                    ((C9060 * C132 + C48890 * C141) * C49007 +
                     (C9060 * C120 + C48890 * C127) * C118) *
                        C9055) *
                       C48978 * C48961 * C111 +
                   (((C9060 * C121 + C48890 * C128) * C118 +
                     (C9060 * C133 + C48890 * C142) * C49007) *
                        C9055 +
                    ((C9060 * C235 + C48890 * C246) * C118 +
                     (C9060 * C241 + C48890 * C253) * C49007) *
                        C9056 +
                    ((C9060 * C519 + C48890 * C524) * C118 +
                     (C9060 * C529 + C48890 * C534) * C49007) *
                        C9057 +
                    ((C9060 * C1155 + C48890 * C1162) * C118 +
                     (C9060 * C1159 + C48890 * C1167) * C49007) *
                        C9058 +
                    ((C9060 * C1663 + C48890 * C1666) * C118 +
                     (C9060 * C1669 + C48890 * C1672) * C49007) *
                        C9059) *
                       C48978 * C48961 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C48978 * C229 -
                    ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                      C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                      C113 * C243 + C101 * C255) *
                         C49007 +
                     (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                      C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                      C113 * C237 + C101 * C248) *
                         C118) *
                        C48996 * C48978 * C49279) *
                       C231 +
                   (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                      C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                      C117 * C238 + C105 * C249) *
                         C118 +
                     (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                      C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                      C117 * C250 + C105 * C256) *
                         C49007) *
                        C48996 * C48978 * C49279 -
                    ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                      C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C132 + C101 * C141) *
                         C49007 +
                     (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                      C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                      C113 * C120 + C101 * C127) *
                         C118) *
                        C48996 * C48978 * C229) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     ((C1226 + C1227 + C1228) * C118 +
                      (C1229 + C1230 + C1231) * C49007) *
                         C49284) *
                        C48978 * C229 -
                    (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 +
                       C1001 * C1168 + C1006 * C1161 + C1000 * C1169) *
                          C49007 +
                      (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 +
                       C1001 * C1163 + C1006 * C1157 + C1000 * C1164) *
                          C118) *
                         C49284 +
                     ((C1231 + C1230 + C1229) * C49007 +
                      (C1228 + C1227 + C1226) * C118) *
                         C49307 +
                     ((C1225 + C1224 + C1223) * C49007 +
                      (C1222 + C1221 + C1220) * C118) *
                         C49319) *
                        C48978 * C49279) *
                       C231 +
                   ((((C1232 + C1233 + C1234) * C118 +
                      (C1235 + C1236 + C1237) * C49007) *
                         C49319 +
                     ((C1238 + C1239 + C1240) * C118 +
                      (C1241 + C1242 + C1243) * C49007) *
                         C49307 +
                     ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 +
                       C1001 * C1162 + C1008 * C1158 + C49271 * C1165) *
                          C118 +
                      (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 +
                       C1001 * C1167 + C1008 * C1166 + C49271 * C1170) *
                          C49007) *
                         C49284) *
                        C48978 * C49279 -
                    (((C1243 + C1242 + C1241) * C49007 +
                      (C1240 + C1239 + C1238) * C118) *
                         C49284 +
                     ((C1237 + C1236 + C1235) * C49007 +
                      (C1234 + C1233 + C1232) * C118) *
                         C49307 +
                     ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49007 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C118) *
                         C49319) *
                        C48978 * C229) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     ((C7964 + C7965 + C7966) * C118 +
                      (C7967 + C7968 + C7969) * C49007) *
                         C49284) *
                        C48978 * C229 -
                    (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 +
                       C49303 * C1168 + C7760 * C1161 + C49316 * C1169) *
                          C49007 +
                      (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 +
                       C49303 * C1163 + C7760 * C1157 + C49316 * C1164) *
                          C118) *
                         C49284 +
                     ((C7969 + C7968 + C7967) * C49007 +
                      (C7966 + C7965 + C7964) * C118) *
                         C7758 +
                     ((C7963 + C7962 + C7961) * C49007 +
                      (C7960 + C7959 + C7958) * C118) *
                         C7757) *
                        C48978 * C49279) *
                       C231 +
                   ((((C7970 + C7971 + C7972) * C118 +
                      (C7973 + C7974 + C7975) * C49007) *
                         C7757 +
                     ((C7976 + C7977 + C7978) * C118 +
                      (C7979 + C7980 + C7981) * C49007) *
                         C7758 +
                     ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 +
                       C49303 * C1162 + C7762 * C1158 + C49271 * C1165) *
                          C118 +
                      (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 +
                       C49303 * C1167 + C7762 * C1166 + C49271 * C1170) *
                          C49007) *
                         C49284) *
                        C48978 * C49279 -
                    (((C7981 + C7980 + C7979) * C49007 +
                      (C7978 + C7977 + C7976) * C118) *
                         C49284 +
                     ((C7975 + C7974 + C7973) * C49007 +
                      (C7972 + C7971 + C7970) * C118) *
                         C7758 +
                     ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                       C49303 * C142 + C7760 * C132 + C49316 * C141) *
                          C49007 +
                      (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                       C49303 * C128 + C7760 * C120 + C49316 * C127) *
                          C118) *
                         C7757) *
                        C48978 * C229) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
                     (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
                        C48978 * C229 -
                    (((C9060 * C9145 + C48890 * C9149) * C49007 +
                      (C9060 * C9143 + C48890 * C9146) * C118) *
                         C9059 +
                     (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
                     (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
                        C48978 * C49279) *
                       C231 +
                   (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
                     (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
                     ((C9060 * C9144 + C48890 * C9147) * C118 +
                      (C9060 * C9148 + C48890 * C9150) * C49007) *
                         C9059) *
                        C48978 * C49279 -
                    ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
                     (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
                     ((C9060 * C132 + C48890 * C141) * C49007 +
                      (C9060 * C120 + C48890 * C127) * C118) *
                         C9055) *
                        C48978 * C229) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C339 -
                    ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                      C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                      C113 * C351 + C101 * C363) *
                         C49007 +
                     (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                      C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                      C113 * C345 + C101 * C356) *
                         C118) *
                        C48996 * C49281) *
                       C48961 * C231 +
                   (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                      C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                      C117 * C346 + C105 * C357) *
                         C118 +
                     (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                      C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                      C117 * C358 + C105 * C364) *
                         C49007) *
                        C48996 * C49281 -
                    ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                      C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C132 + C101 * C141) *
                         C49007 +
                     (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                      C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                      C113 * C120 + C101 * C127) *
                         C118) *
                        C48996 * C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     ((C1226 + C1227 + C1228) * C118 +
                      (C1229 + C1230 + C1231) * C49007) *
                         C49284) *
                        C339 -
                    (((C1008 * C1393 + C49271 * C1401 + C1007 * C1394 +
                       C1001 * C1402 + C1006 * C1395 + C1000 * C1403) *
                          C49007 +
                      (C1008 * C1389 + C49271 * C1396 + C1007 * C1390 +
                       C1001 * C1397 + C1006 * C1391 + C1000 * C1398) *
                          C118) *
                         C49284 +
                     ((C1008 * C631 + C49271 * C636 + C1007 * C630 +
                       C1001 * C635 + C1006 * C629 + C1000 * C634) *
                          C49007 +
                      (C1008 * C621 + C49271 * C626 + C1007 * C620 +
                       C1001 * C625 + C1006 * C619 + C1000 * C624) *
                          C118) *
                         C49307 +
                     ((C1008 * C349 + C49271 * C361 + C1007 * C350 +
                       C1001 * C362 + C1006 * C351 + C1000 * C363) *
                          C49007 +
                      (C1008 * C343 + C49271 * C354 + C1007 * C344 +
                       C1001 * C355 + C1006 * C345 + C1000 * C356) *
                          C118) *
                         C49319) *
                        C49281) *
                       C48961 * C231 +
                   ((((C1006 * C344 + C1000 * C355 + C1007 * C343 +
                       C1001 * C354 + C1008 * C342 + C49271 * C353) *
                          C118 +
                      (C1006 * C350 + C1000 * C362 + C1007 * C349 +
                       C1001 * C361 + C1008 * C348 + C49271 * C360) *
                          C49007) *
                         C49319 +
                     ((C1006 * C620 + C1000 * C625 + C1007 * C621 +
                       C1001 * C626 + C1008 * C622 + C49271 * C627) *
                          C118 +
                      (C1006 * C630 + C1000 * C635 + C1007 * C631 +
                       C1001 * C636 + C1008 * C632 + C49271 * C637) *
                          C49007) *
                         C49307 +
                     ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 +
                       C1001 * C1396 + C1008 * C1392 + C49271 * C1399) *
                          C118 +
                      (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 +
                       C1001 * C1401 + C1008 * C1400 + C49271 * C1404) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C1243 + C1242 + C1241) * C49007 +
                      (C1240 + C1239 + C1238) * C118) *
                         C49284 +
                     ((C1237 + C1236 + C1235) * C49007 +
                      (C1234 + C1233 + C1232) * C118) *
                         C49307 +
                     ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49007 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C118) *
                         C49319) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     ((C7964 + C7965 + C7966) * C118 +
                      (C7967 + C7968 + C7969) * C49007) *
                         C49284) *
                        C339 -
                    (((C7762 * C1393 + C49271 * C1401 + C7761 * C1394 +
                       C49303 * C1402 + C7760 * C1395 + C49316 * C1403) *
                          C49007 +
                      (C7762 * C1389 + C49271 * C1396 + C7761 * C1390 +
                       C49303 * C1397 + C7760 * C1391 + C49316 * C1398) *
                          C118) *
                         C49284 +
                     ((C7762 * C631 + C49271 * C636 + C7761 * C630 +
                       C49303 * C635 + C7760 * C629 + C49316 * C634) *
                          C49007 +
                      (C7762 * C621 + C49271 * C626 + C7761 * C620 +
                       C49303 * C625 + C7760 * C619 + C49316 * C624) *
                          C118) *
                         C7758 +
                     ((C7762 * C349 + C49271 * C361 + C7761 * C350 +
                       C49303 * C362 + C7760 * C351 + C49316 * C363) *
                          C49007 +
                      (C7762 * C343 + C49271 * C354 + C7761 * C344 +
                       C49303 * C355 + C7760 * C345 + C49316 * C356) *
                          C118) *
                         C7757) *
                        C49281) *
                       C48961 * C231 +
                   ((((C7760 * C344 + C49316 * C355 + C7761 * C343 +
                       C49303 * C354 + C7762 * C342 + C49271 * C353) *
                          C118 +
                      (C7760 * C350 + C49316 * C362 + C7761 * C349 +
                       C49303 * C361 + C7762 * C348 + C49271 * C360) *
                          C49007) *
                         C7757 +
                     ((C7760 * C620 + C49316 * C625 + C7761 * C621 +
                       C49303 * C626 + C7762 * C622 + C49271 * C627) *
                          C118 +
                      (C7760 * C630 + C49316 * C635 + C7761 * C631 +
                       C49303 * C636 + C7762 * C632 + C49271 * C637) *
                          C49007) *
                         C7758 +
                     ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                       C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                          C118 +
                      (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                       C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C7981 + C7980 + C7979) * C49007 +
                      (C7978 + C7977 + C7976) * C118) *
                         C49284 +
                     ((C7975 + C7974 + C7973) * C49007 +
                      (C7972 + C7971 + C7970) * C118) *
                         C7758 +
                     ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                       C49303 * C142 + C7760 * C132 + C49316 * C141) *
                          C49007 +
                      (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                       C49303 * C128 + C7760 * C120 + C49316 * C127) *
                          C118) *
                         C7757) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
                     (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
                        C339 -
                    (((C9060 * C9299 + C48890 * C9303) * C49007 +
                      (C9060 * C9297 + C48890 * C9300) * C118) *
                         C9059 +
                     ((C9060 * C1850 + C48890 * C1853) * C49007 +
                      (C9060 * C1844 + C48890 * C1847) * C118) *
                         C9058 +
                     ((C9060 * C1395 + C48890 * C1403) * C49007 +
                      (C9060 * C1391 + C48890 * C1398) * C118) *
                         C9057 +
                     ((C9060 * C629 + C48890 * C634) * C49007 +
                      (C9060 * C619 + C48890 * C624) * C118) *
                         C9056 +
                     ((C9060 * C351 + C48890 * C363) * C49007 +
                      (C9060 * C345 + C48890 * C356) * C118) *
                         C9055) *
                        C49281) *
                       C48961 * C231 +
                   ((((C9060 * C344 + C48890 * C355) * C118 +
                      (C9060 * C350 + C48890 * C362) * C49007) *
                         C9055 +
                     ((C9060 * C620 + C48890 * C625) * C118 +
                      (C9060 * C630 + C48890 * C635) * C49007) *
                         C9056 +
                     ((C9060 * C1390 + C48890 * C1397) * C118 +
                      (C9060 * C1394 + C48890 * C1402) * C49007) *
                         C9057 +
                     ((C9060 * C1845 + C48890 * C1848) * C118 +
                      (C9060 * C1851 + C48890 * C1854) * C49007) *
                         C9058 +
                     ((C9060 * C9298 + C48890 * C9301) * C118 +
                      (C9060 * C9302 + C48890 * C9304) * C49007) *
                         C9059) *
                        C49281 -
                    ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
                     (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
                     ((C9060 * C132 + C48890 * C141) * C49007 +
                      (C9060 * C120 + C48890 * C127) * C118) *
                         C9055) *
                        C339) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C48978 * C447 -
                    ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                      C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                      C113 * C243 + C101 * C255) *
                         C49007 +
                     (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                      C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                      C113 * C237 + C101 * C248) *
                         C118) *
                        C48996 * C48978 * C49279) *
                       C449 +
                   (((C113 * C236 + C101 * C247 + C114 * C235 + C102 * C246 +
                      C115 * C234 + C103 * C245 + C116 * C233 + C104 * C244 +
                      C117 * C238 + C105 * C249) *
                         C118 +
                     (C113 * C242 + C101 * C254 + C114 * C241 + C102 * C253 +
                      C115 * C240 + C103 * C252 + C116 * C239 + C104 * C251 +
                      C117 * C250 + C105 * C256) *
                         C49007) *
                        C48996 * C48978 * C49279 -
                    ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                      C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C132 + C101 * C141) *
                         C49007 +
                     (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                      C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                      C113 * C120 + C101 * C127) *
                         C118) *
                        C48996 * C48978 * C447) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     ((C1226 + C1227 + C1228) * C118 +
                      (C1229 + C1230 + C1231) * C49007) *
                         C49284) *
                        C48978 * C447 -
                    (((C1008 * C1159 + C49271 * C1167 + C1007 * C1160 +
                       C1001 * C1168 + C1006 * C1161 + C1000 * C1169) *
                          C49007 +
                      (C1008 * C1155 + C49271 * C1162 + C1007 * C1156 +
                       C1001 * C1163 + C1006 * C1157 + C1000 * C1164) *
                          C118) *
                         C49284 +
                     ((C1231 + C1230 + C1229) * C49007 +
                      (C1228 + C1227 + C1226) * C118) *
                         C49307 +
                     ((C1225 + C1224 + C1223) * C49007 +
                      (C1222 + C1221 + C1220) * C118) *
                         C49319) *
                        C48978 * C49279) *
                       C449 +
                   ((((C1232 + C1233 + C1234) * C118 +
                      (C1235 + C1236 + C1237) * C49007) *
                         C49319 +
                     ((C1238 + C1239 + C1240) * C118 +
                      (C1241 + C1242 + C1243) * C49007) *
                         C49307 +
                     ((C1006 * C1156 + C1000 * C1163 + C1007 * C1155 +
                       C1001 * C1162 + C1008 * C1158 + C49271 * C1165) *
                          C118 +
                      (C1006 * C1160 + C1000 * C1168 + C1007 * C1159 +
                       C1001 * C1167 + C1008 * C1166 + C49271 * C1170) *
                          C49007) *
                         C49284) *
                        C48978 * C49279 -
                    (((C1243 + C1242 + C1241) * C49007 +
                      (C1240 + C1239 + C1238) * C118) *
                         C49284 +
                     ((C1237 + C1236 + C1235) * C49007 +
                      (C1234 + C1233 + C1232) * C118) *
                         C49307 +
                     ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49007 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C118) *
                         C49319) *
                        C48978 * C447) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     ((C7964 + C7965 + C7966) * C118 +
                      (C7967 + C7968 + C7969) * C49007) *
                         C49284) *
                        C48978 * C447 -
                    (((C7762 * C1159 + C49271 * C1167 + C7761 * C1160 +
                       C49303 * C1168 + C7760 * C1161 + C49316 * C1169) *
                          C49007 +
                      (C7762 * C1155 + C49271 * C1162 + C7761 * C1156 +
                       C49303 * C1163 + C7760 * C1157 + C49316 * C1164) *
                          C118) *
                         C49284 +
                     ((C7969 + C7968 + C7967) * C49007 +
                      (C7966 + C7965 + C7964) * C118) *
                         C7758 +
                     ((C7963 + C7962 + C7961) * C49007 +
                      (C7960 + C7959 + C7958) * C118) *
                         C7757) *
                        C48978 * C49279) *
                       C449 +
                   ((((C7970 + C7971 + C7972) * C118 +
                      (C7973 + C7974 + C7975) * C49007) *
                         C7757 +
                     ((C7976 + C7977 + C7978) * C118 +
                      (C7979 + C7980 + C7981) * C49007) *
                         C7758 +
                     ((C7760 * C1156 + C49316 * C1163 + C7761 * C1155 +
                       C49303 * C1162 + C7762 * C1158 + C49271 * C1165) *
                          C118 +
                      (C7760 * C1160 + C49316 * C1168 + C7761 * C1159 +
                       C49303 * C1167 + C7762 * C1166 + C49271 * C1170) *
                          C49007) *
                         C49284) *
                        C48978 * C49279 -
                    (((C7981 + C7980 + C7979) * C49007 +
                      (C7978 + C7977 + C7976) * C118) *
                         C49284 +
                     ((C7975 + C7974 + C7973) * C49007 +
                      (C7972 + C7971 + C7970) * C118) *
                         C7758 +
                     ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                       C49303 * C142 + C7760 * C132 + C49316 * C141) *
                          C49007 +
                      (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                       C49303 * C128 + C7760 * C120 + C49316 * C127) *
                          C118) *
                         C7757) *
                        C48978 * C447) *
                       C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + (C9202 + C9203) * C9057 +
                     (C9204 + C9205) * C9058 + (C9206 + C9207) * C9059) *
                        C48978 * C447 -
                    (((C9060 * C9145 + C48890 * C9149) * C49007 +
                      (C9060 * C9143 + C48890 * C9146) * C118) *
                         C9059 +
                     (C9207 + C9206) * C9058 + (C9205 + C9204) * C9057 +
                     (C9203 + C9202) * C9056 + (C9201 + C9200) * C9055) *
                        C48978 * C49279) *
                       C449 +
                   (((C9208 + C9209) * C9055 + (C9210 + C9211) * C9056 +
                     (C9212 + C9213) * C9057 + (C9214 + C9215) * C9058 +
                     ((C9060 * C9144 + C48890 * C9147) * C118 +
                      (C9060 * C9148 + C48890 * C9150) * C49007) *
                         C9059) *
                        C48978 * C49279 -
                    ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
                     (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
                     ((C9060 * C132 + C48890 * C141) * C49007 +
                      (C9060 * C120 + C48890 * C127) * C118) *
                         C9055) *
                        C48978 * C447) *
                       C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C48978 * C513 -
          ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
            C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
            C113 * C243 + C101 * C255) *
               C49007 +
           (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
            C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
            C113 * C237 + C101 * C248) *
               C118) *
              C48996 * C48978 * C514 +
          ((C113 * C517 + C101 * C522 + C114 * C518 + C102 * C523 +
            C115 * C519 + C103 * C524 + C116 * C520 + C104 * C525 +
            C117 * C521 + C105 * C526) *
               C118 +
           (C113 * C527 + C101 * C532 + C114 * C528 + C102 * C533 +
            C115 * C529 + C103 * C534 + C116 * C530 + C104 * C535 +
            C117 * C531 + C105 * C536) *
               C49007) *
              C48996 * C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C48978 * C513 -
          (((C1690 + C1691 + C1692) * C49007 + (C1693 + C1694 + C1695) * C118) *
               C49284 +
           ((C1231 + C1230 + C1229) * C49007 + (C1228 + C1227 + C1226) * C118) *
               C49307 +
           ((C1225 + C1224 + C1223) * C49007 + (C1222 + C1221 + C1220) * C118) *
               C49319) *
              C48978 * C514 +
          (C1698 * C49319 +
           ((C1695 + C1694 + C1693) * C118 + (C1692 + C1691 + C1690) * C49007) *
               C49307 +
           ((C1006 * C1661 + C1000 * C1664 + C1007 * C1662 + C1001 * C1665 +
             C1008 * C1663 + C49271 * C1666) *
                C118 +
            (C1006 * C1667 + C1000 * C1670 + C1007 * C1668 + C1001 * C1671 +
             C1008 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C48978 * C513 -
          (((C8400 + C8401 + C8402) * C49007 + (C8403 + C8404 + C8405) * C118) *
               C49284 +
           ((C7969 + C7968 + C7967) * C49007 + (C7966 + C7965 + C7964) * C118) *
               C7758 +
           ((C7963 + C7962 + C7961) * C49007 + (C7960 + C7959 + C7958) * C118) *
               C7757) *
              C48978 * C514 +
          (C8408 * C7757 +
           ((C8405 + C8404 + C8403) * C118 + (C8402 + C8401 + C8400) * C49007) *
               C7758 +
           ((C7760 * C1661 + C49316 * C1664 + C7761 * C1662 + C49303 * C1665 +
             C7762 * C1663 + C49271 * C1666) *
                C118 +
            (C7760 * C1667 + C49316 * C1670 + C7761 * C1668 + C49303 * C1671 +
             C7762 * C1669 + C49271 * C1672) *
                C49007) *
               C49284) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C48978 * C513 -
          ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
           (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
           (C9201 + C9200) * C9055) *
              C48978 * C514 +
          (C9454 * C9055 + C9455 * C9056 + C9456 * C9057 +
           (C9464 + C9463) * C9058 +
           ((C9060 * C9449 + C48890 * C9450) * C118 +
            (C9060 * C9451 + C48890 * C9452) * C49007) *
               C9059) *
              C48978 * C515) *
         C48927) /
            (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C339 -
                    ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                      C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                      C113 * C351 + C101 * C363) *
                         C49007 +
                     (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                      C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                      C113 * C345 + C101 * C356) *
                         C118) *
                        C48996 * C49281) *
                       C447 +
                   (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                      C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                      C117 * C623 + C105 * C628) *
                         C118 +
                     (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                      C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                      C117 * C633 + C105 * C638) *
                         C49007) *
                        C48996 * C49281 -
                    ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                      C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                      C113 * C243 + C101 * C255) *
                         C49007 +
                     (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                      C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                      C113 * C237 + C101 * C248) *
                         C118) *
                        C48996 * C339) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     C1698 * C49284) *
                        C339 -
                    (((C1881 + C1882 + C1883) * C49007 +
                      (C1884 + C1885 + C1886) * C118) *
                         C49284 +
                     ((C1887 + C1888 + C1889) * C49007 +
                      (C1890 + C1891 + C1892) * C118) *
                         C49307 +
                     ((C1008 * C349 + C49271 * C361 + C1007 * C350 +
                       C1001 * C362 + C1006 * C351 + C1000 * C363) *
                          C49007 +
                      (C1008 * C343 + C49271 * C354 + C1007 * C344 +
                       C1001 * C355 + C1006 * C345 + C1000 * C356) *
                          C118) *
                         C49319) *
                        C49281) *
                       C447 +
                   ((((C1892 + C1891 + C1890) * C118 +
                      (C1889 + C1888 + C1887) * C49007) *
                         C49319 +
                     ((C1886 + C1885 + C1884) * C118 +
                      (C1883 + C1882 + C1881) * C49007) *
                         C49307 +
                     ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 +
                       C1001 * C1848 + C1008 * C1846 + C49271 * C1849) *
                          C118 +
                      (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 +
                       C1001 * C1854 + C1008 * C1852 + C49271 * C1855) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C1690 + C1691 + C1692) * C49007 +
                      (C1693 + C1694 + C1695) * C118) *
                         C49284 +
                     ((C1231 + C1230 + C1229) * C49007 +
                      (C1228 + C1227 + C1226) * C118) *
                         C49307 +
                     ((C1225 + C1224 + C1223) * C49007 +
                      (C1222 + C1221 + C1220) * C118) *
                         C49319) *
                        C339) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     C8408 * C49284) *
                        C339 -
                    (((C8579 + C8580 + C8581) * C49007 +
                      (C8582 + C8583 + C8584) * C118) *
                         C49284 +
                     ((C8585 + C8586 + C8587) * C49007 +
                      (C8588 + C8589 + C8590) * C118) *
                         C7758 +
                     ((C7762 * C349 + C49271 * C361 + C7761 * C350 +
                       C49303 * C362 + C7760 * C351 + C49316 * C363) *
                          C49007 +
                      (C7762 * C343 + C49271 * C354 + C7761 * C344 +
                       C49303 * C355 + C7760 * C345 + C49316 * C356) *
                          C118) *
                         C7757) *
                        C49281) *
                       C447 +
                   ((((C8590 + C8589 + C8588) * C118 +
                      (C8587 + C8586 + C8585) * C49007) *
                         C7757 +
                     ((C8584 + C8583 + C8582) * C118 +
                      (C8581 + C8580 + C8579) * C49007) *
                         C7758 +
                     ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 +
                       C49303 * C1848 + C7762 * C1846 + C49271 * C1849) *
                          C118 +
                      (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 +
                       C49303 * C1854 + C7762 * C1852 + C49271 * C1855) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C8400 + C8401 + C8402) * C49007 +
                      (C8403 + C8404 + C8405) * C118) *
                         C49284 +
                     ((C7969 + C7968 + C7967) * C49007 +
                      (C7966 + C7965 + C7964) * C118) *
                         C7758 +
                     ((C7963 + C7962 + C7961) * C49007 +
                      (C7960 + C7959 + C7958) * C118) *
                         C7757) *
                        C339) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
                     C9456 * C9059) *
                        C339 -
                    ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
                     (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
                     ((C9060 * C351 + C48890 * C363) * C49007 +
                      (C9060 * C345 + C48890 * C356) * C118) *
                         C9055) *
                        C49281) *
                       C447 +
                   (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
                     (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
                     ((C9060 * C9546 + C48890 * C9547) * C118 +
                      (C9060 * C9548 + C48890 * C9549) * C49007) *
                         C9059) *
                        C49281 -
                    ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
                     (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
                     (C9201 + C9200) * C9055) *
                        C339) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C721 -
                    ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                      C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                      C113 * C351 + C101 * C363) *
                         C49007 +
                     (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                      C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                      C113 * C345 + C101 * C356) *
                         C118) *
                        C48996 * C49281) *
                       C48961 * C449 +
                   (((C113 * C344 + C101 * C355 + C114 * C343 + C102 * C354 +
                      C115 * C342 + C103 * C353 + C116 * C341 + C104 * C352 +
                      C117 * C346 + C105 * C357) *
                         C118 +
                     (C113 * C350 + C101 * C362 + C114 * C349 + C102 * C361 +
                      C115 * C348 + C103 * C360 + C116 * C347 + C104 * C359 +
                      C117 * C358 + C105 * C364) *
                         C49007) *
                        C48996 * C49281 -
                    ((C117 * C136 + C105 * C145 + C116 * C135 + C104 * C144 +
                      C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C132 + C101 * C141) *
                         C49007 +
                     (C117 * C124 + C105 * C137 + C116 * C123 + C104 * C130 +
                      C115 * C122 + C103 * C129 + C114 * C121 + C102 * C128 +
                      C113 * C120 + C101 * C127) *
                         C118) *
                        C48996 * C721) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     C1698 * C49284) *
                        C721 -
                    (((C1881 + C1882 + C1883) * C49007 +
                      (C1884 + C1885 + C1886) * C118) *
                         C49284 +
                     ((C1887 + C1888 + C1889) * C49007 +
                      (C1890 + C1891 + C1892) * C118) *
                         C49307 +
                     ((C1008 * C349 + C49271 * C361 + C1007 * C350 +
                       C1001 * C362 + C1006 * C351 + C1000 * C363) *
                          C49007 +
                      (C1008 * C343 + C49271 * C354 + C1007 * C344 +
                       C1001 * C355 + C1006 * C345 + C1000 * C356) *
                          C118) *
                         C49319) *
                        C49281) *
                       C48961 * C449 +
                   ((((C1006 * C344 + C1000 * C355 + C1007 * C343 +
                       C1001 * C354 + C1008 * C342 + C49271 * C353) *
                          C118 +
                      (C1006 * C350 + C1000 * C362 + C1007 * C349 +
                       C1001 * C361 + C1008 * C348 + C49271 * C360) *
                          C49007) *
                         C49319 +
                     ((C1006 * C620 + C1000 * C625 + C1007 * C621 +
                       C1001 * C626 + C1008 * C622 + C49271 * C627) *
                          C118 +
                      (C1006 * C630 + C1000 * C635 + C1007 * C631 +
                       C1001 * C636 + C1008 * C632 + C49271 * C637) *
                          C49007) *
                         C49307 +
                     ((C1006 * C1390 + C1000 * C1397 + C1007 * C1389 +
                       C1001 * C1396 + C1008 * C1392 + C49271 * C1399) *
                          C118 +
                      (C1006 * C1394 + C1000 * C1402 + C1007 * C1393 +
                       C1001 * C1401 + C1008 * C1400 + C49271 * C1404) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C1243 + C1242 + C1241) * C49007 +
                      (C1240 + C1239 + C1238) * C118) *
                         C49284 +
                     ((C1237 + C1236 + C1235) * C49007 +
                      (C1234 + C1233 + C1232) * C118) *
                         C49307 +
                     ((C1008 * C134 + C49271 * C143 + C1007 * C133 +
                       C1001 * C142 + C1006 * C132 + C1000 * C141) *
                          C49007 +
                      (C1008 * C122 + C49271 * C129 + C1007 * C121 +
                       C1001 * C128 + C1006 * C120 + C1000 * C127) *
                          C118) *
                         C49319) *
                        C721) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     C8408 * C49284) *
                        C721 -
                    (((C8579 + C8580 + C8581) * C49007 +
                      (C8582 + C8583 + C8584) * C118) *
                         C49284 +
                     ((C8585 + C8586 + C8587) * C49007 +
                      (C8588 + C8589 + C8590) * C118) *
                         C7758 +
                     ((C7762 * C349 + C49271 * C361 + C7761 * C350 +
                       C49303 * C362 + C7760 * C351 + C49316 * C363) *
                          C49007 +
                      (C7762 * C343 + C49271 * C354 + C7761 * C344 +
                       C49303 * C355 + C7760 * C345 + C49316 * C356) *
                          C118) *
                         C7757) *
                        C49281) *
                       C48961 * C449 +
                   ((((C7760 * C344 + C49316 * C355 + C7761 * C343 +
                       C49303 * C354 + C7762 * C342 + C49271 * C353) *
                          C118 +
                      (C7760 * C350 + C49316 * C362 + C7761 * C349 +
                       C49303 * C361 + C7762 * C348 + C49271 * C360) *
                          C49007) *
                         C7757 +
                     ((C7760 * C620 + C49316 * C625 + C7761 * C621 +
                       C49303 * C626 + C7762 * C622 + C49271 * C627) *
                          C118 +
                      (C7760 * C630 + C49316 * C635 + C7761 * C631 +
                       C49303 * C636 + C7762 * C632 + C49271 * C637) *
                          C49007) *
                         C7758 +
                     ((C7760 * C1390 + C49316 * C1397 + C7761 * C1389 +
                       C49303 * C1396 + C7762 * C1392 + C49271 * C1399) *
                          C118 +
                      (C7760 * C1394 + C49316 * C1402 + C7761 * C1393 +
                       C49303 * C1401 + C7762 * C1400 + C49271 * C1404) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C7981 + C7980 + C7979) * C49007 +
                      (C7978 + C7977 + C7976) * C118) *
                         C49284 +
                     ((C7975 + C7974 + C7973) * C49007 +
                      (C7972 + C7971 + C7970) * C118) *
                         C7758 +
                     ((C7762 * C134 + C49271 * C143 + C7761 * C133 +
                       C49303 * C142 + C7760 * C132 + C49316 * C141) *
                          C49007 +
                      (C7762 * C122 + C49271 * C129 + C7761 * C121 +
                       C49303 * C128 + C7760 * C120 + C49316 * C127) *
                          C118) *
                         C7757) *
                        C721) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
                     C9456 * C9059) *
                        C721 -
                    ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
                     (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
                     ((C9060 * C351 + C48890 * C363) * C49007 +
                      (C9060 * C345 + C48890 * C356) * C118) *
                         C9055) *
                        C49281) *
                       C48961 * C449 +
                   ((((C9060 * C344 + C48890 * C355) * C118 +
                      (C9060 * C350 + C48890 * C362) * C49007) *
                         C9055 +
                     ((C9060 * C620 + C48890 * C625) * C118 +
                      (C9060 * C630 + C48890 * C635) * C49007) *
                         C9056 +
                     ((C9060 * C1390 + C48890 * C1397) * C118 +
                      (C9060 * C1394 + C48890 * C1402) * C49007) *
                         C9057 +
                     ((C9060 * C1845 + C48890 * C1848) * C118 +
                      (C9060 * C1851 + C48890 * C1854) * C49007) *
                         C9058 +
                     ((C9060 * C9298 + C48890 * C9301) * C118 +
                      (C9060 * C9302 + C48890 * C9304) * C49007) *
                         C9059) *
                        C49281 -
                    ((C9215 + C9214) * C9059 + (C9213 + C9212) * C9058 +
                     (C9211 + C9210) * C9057 + (C9209 + C9208) * C9056 +
                     ((C9060 * C132 + C48890 * C141) * C49007 +
                      (C9060 * C120 + C48890 * C127) * C118) *
                         C9055) *
                        C721) *
                       C48961 * C49277)) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
                      C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
                      C117 * C123 + C105 * C130) *
                         C118 +
                     (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
                      C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
                      C117 * C135 + C105 * C144) *
                         C49007) *
                        C48996 * C721 -
                    ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
                      C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
                      C113 * C351 + C101 * C363) *
                         C49007 +
                     (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
                      C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
                      C113 * C345 + C101 * C356) *
                         C118) *
                        C48996 * C49281) *
                       C229 +
                   (((C113 * C619 + C101 * C624 + C114 * C620 + C102 * C625 +
                      C115 * C621 + C103 * C626 + C116 * C622 + C104 * C627 +
                      C117 * C623 + C105 * C628) *
                         C118 +
                     (C113 * C629 + C101 * C634 + C114 * C630 + C102 * C635 +
                      C115 * C631 + C103 * C636 + C116 * C632 + C104 * C637 +
                      C117 * C633 + C105 * C638) *
                         C49007) *
                        C48996 * C49281 -
                    ((C117 * C239 + C105 * C251 + C116 * C240 + C104 * C252 +
                      C115 * C241 + C103 * C253 + C114 * C242 + C102 * C254 +
                      C113 * C243 + C101 * C255) *
                         C49007 +
                     (C117 * C233 + C105 * C244 + C116 * C234 + C104 * C245 +
                      C115 * C235 + C103 * C246 + C114 * C236 + C102 * C247 +
                      C113 * C237 + C101 * C248) *
                         C118) *
                        C48996 * C721) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C1006 * C119 + C1000 * C126 + C1007 * C120 +
                       C1001 * C127 + C1008 * C121 + C49271 * C128) *
                          C118 +
                      (C1006 * C131 + C1000 * C140 + C1007 * C132 +
                       C1001 * C141 + C1008 * C133 + C49271 * C142) *
                          C49007) *
                         C49319 +
                     ((C1220 + C1221 + C1222) * C118 +
                      (C1223 + C1224 + C1225) * C49007) *
                         C49307 +
                     C1698 * C49284) *
                        C721 -
                    (((C1881 + C1882 + C1883) * C49007 +
                      (C1884 + C1885 + C1886) * C118) *
                         C49284 +
                     ((C1887 + C1888 + C1889) * C49007 +
                      (C1890 + C1891 + C1892) * C118) *
                         C49307 +
                     ((C1008 * C349 + C49271 * C361 + C1007 * C350 +
                       C1001 * C362 + C1006 * C351 + C1000 * C363) *
                          C49007 +
                      (C1008 * C343 + C49271 * C354 + C1007 * C344 +
                       C1001 * C355 + C1006 * C345 + C1000 * C356) *
                          C118) *
                         C49319) *
                        C49281) *
                       C229 +
                   ((((C1892 + C1891 + C1890) * C118 +
                      (C1889 + C1888 + C1887) * C49007) *
                         C49319 +
                     ((C1886 + C1885 + C1884) * C118 +
                      (C1883 + C1882 + C1881) * C49007) *
                         C49307 +
                     ((C1006 * C1844 + C1000 * C1847 + C1007 * C1845 +
                       C1001 * C1848 + C1008 * C1846 + C49271 * C1849) *
                          C118 +
                      (C1006 * C1850 + C1000 * C1853 + C1007 * C1851 +
                       C1001 * C1854 + C1008 * C1852 + C49271 * C1855) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C1690 + C1691 + C1692) * C49007 +
                      (C1693 + C1694 + C1695) * C118) *
                         C49284 +
                     ((C1231 + C1230 + C1229) * C49007 +
                      (C1228 + C1227 + C1226) * C118) *
                         C49307 +
                     ((C1225 + C1224 + C1223) * C49007 +
                      (C1222 + C1221 + C1220) * C118) *
                         C49319) *
                        C721) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C7760 * C119 + C49316 * C126 + C7761 * C120 +
                       C49303 * C127 + C7762 * C121 + C49271 * C128) *
                          C118 +
                      (C7760 * C131 + C49316 * C140 + C7761 * C132 +
                       C49303 * C141 + C7762 * C133 + C49271 * C142) *
                          C49007) *
                         C7757 +
                     ((C7958 + C7959 + C7960) * C118 +
                      (C7961 + C7962 + C7963) * C49007) *
                         C7758 +
                     C8408 * C49284) *
                        C721 -
                    (((C8579 + C8580 + C8581) * C49007 +
                      (C8582 + C8583 + C8584) * C118) *
                         C49284 +
                     ((C8585 + C8586 + C8587) * C49007 +
                      (C8588 + C8589 + C8590) * C118) *
                         C7758 +
                     ((C7762 * C349 + C49271 * C361 + C7761 * C350 +
                       C49303 * C362 + C7760 * C351 + C49316 * C363) *
                          C49007 +
                      (C7762 * C343 + C49271 * C354 + C7761 * C344 +
                       C49303 * C355 + C7760 * C345 + C49316 * C356) *
                          C118) *
                         C7757) *
                        C49281) *
                       C229 +
                   ((((C8590 + C8589 + C8588) * C118 +
                      (C8587 + C8586 + C8585) * C49007) *
                         C7757 +
                     ((C8584 + C8583 + C8582) * C118 +
                      (C8581 + C8580 + C8579) * C49007) *
                         C7758 +
                     ((C7760 * C1844 + C49316 * C1847 + C7761 * C1845 +
                       C49303 * C1848 + C7762 * C1846 + C49271 * C1849) *
                          C118 +
                      (C7760 * C1850 + C49316 * C1853 + C7761 * C1851 +
                       C49303 * C1854 + C7762 * C1852 + C49271 * C1855) *
                          C49007) *
                         C49284) *
                        C49281 -
                    (((C8400 + C8401 + C8402) * C49007 +
                      (C8403 + C8404 + C8405) * C118) *
                         C49284 +
                     ((C7969 + C7968 + C7967) * C49007 +
                      (C7966 + C7965 + C7964) * C118) *
                         C7758 +
                     ((C7963 + C7962 + C7961) * C49007 +
                      (C7960 + C7959 + C7958) * C118) *
                         C7757) *
                        C721) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C9060 * C119 + C48890 * C126) * C118 +
                      (C9060 * C131 + C48890 * C140) * C49007) *
                         C9055 +
                     (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
                     C9456 * C9059) *
                        C721 -
                    ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
                     (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
                     ((C9060 * C351 + C48890 * C363) * C49007 +
                      (C9060 * C345 + C48890 * C356) * C118) *
                         C9055) *
                        C49281) *
                       C229 +
                   (((C9582 + C9581) * C9055 + (C9580 + C9579) * C9056 +
                     (C9578 + C9577) * C9057 + (C9576 + C9575) * C9058 +
                     ((C9060 * C9546 + C48890 * C9547) * C118 +
                      (C9060 * C9548 + C48890 * C9549) * C49007) *
                         C9059) *
                        C49281 -
                    ((C9463 + C9464) * C9059 + (C9207 + C9206) * C9058 +
                     (C9205 + C9204) * C9057 + (C9203 + C9202) * C9056 +
                     (C9201 + C9200) * C9055) *
                        C721) *
                       C49279) *
                  C48927) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C127 +
            C115 * C121 + C103 * C128 + C116 * C122 + C104 * C129 +
            C117 * C123 + C105 * C130) *
               C118 +
           (C113 * C131 + C101 * C140 + C114 * C132 + C102 * C141 +
            C115 * C133 + C103 * C142 + C116 * C134 + C104 * C143 +
            C117 * C135 + C105 * C144) *
               C49007) *
              C48996 * C867 -
          ((C117 * C347 + C105 * C359 + C116 * C348 + C104 * C360 +
            C115 * C349 + C103 * C361 + C114 * C350 + C102 * C362 +
            C113 * C351 + C101 * C363) *
               C49007 +
           (C117 * C341 + C105 * C352 + C116 * C342 + C104 * C353 +
            C115 * C343 + C103 * C354 + C114 * C344 + C102 * C355 +
            C113 * C345 + C101 * C356) *
               C118) *
              C48996 * C868 +
          ((C113 * C870 + C101 * C875 + C114 * C871 + C102 * C876 +
            C115 * C872 + C103 * C877 + C116 * C873 + C104 * C878 +
            C117 * C874 + C105 * C879) *
               C118 +
           (C113 * C880 + C101 * C885 + C114 * C881 + C102 * C886 +
            C115 * C882 + C103 * C887 + C116 * C883 + C104 * C888 +
            C117 * C884 + C105 * C889) *
               C49007) *
              C48996 * C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1006 * C119 + C1000 * C126 + C1007 * C120 + C1001 * C127 +
             C1008 * C121 + C49271 * C128) *
                C118 +
            (C1006 * C131 + C1000 * C140 + C1007 * C132 + C1001 * C141 +
             C1008 * C133 + C49271 * C142) *
                C49007) *
               C49319 +
           ((C1220 + C1221 + C1222) * C118 + (C1223 + C1224 + C1225) * C49007) *
               C49307 +
           C1698 * C49284) *
              C867 -
          (((C1881 + C1882 + C1883) * C49007 + (C1884 + C1885 + C1886) * C118) *
               C49284 +
           ((C1887 + C1888 + C1889) * C49007 + (C1890 + C1891 + C1892) * C118) *
               C49307 +
           ((C1008 * C349 + C49271 * C361 + C1007 * C350 + C1001 * C362 +
             C1006 * C351 + C1000 * C363) *
                C49007 +
            (C1008 * C343 + C49271 * C354 + C1007 * C344 + C1001 * C355 +
             C1006 * C345 + C1000 * C356) *
                C118) *
               C49319) *
              C868 +
          (((C1006 * C870 + C1000 * C875 + C1007 * C871 + C1001 * C876 +
             C1008 * C872 + C49271 * C877) *
                C118 +
            (C1006 * C880 + C1000 * C885 + C1007 * C881 + C1001 * C886 +
             C1008 * C882 + C49271 * C887) *
                C49007) *
               C49319 +
           ((C1006 * C2294 + C1000 * C2300 + C1007 * C2295 + C1001 * C2301 +
             C1008 * C2296 + C49271 * C2302) *
                C118 +
            (C1006 * C2303 + C1000 * C2312 + C1007 * C2304 + C1001 * C2313 +
             C1008 * C2305 + C49271 * C2314) *
                C49007) *
               C49307 +
           ((C1006 * C2297 + C1000 * C2306 + C1007 * C2298 + C1001 * C2307 +
             C1008 * C2299 + C49271 * C2308) *
                C118 +
            (C1006 * C2309 + C1000 * C2315 + C1007 * C2310 + C1001 * C2316 +
             C1008 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7760 * C119 + C49316 * C126 + C7761 * C120 + C49303 * C127 +
             C7762 * C121 + C49271 * C128) *
                C118 +
            (C7760 * C131 + C49316 * C140 + C7761 * C132 + C49303 * C141 +
             C7762 * C133 + C49271 * C142) *
                C49007) *
               C7757 +
           ((C7958 + C7959 + C7960) * C118 + (C7961 + C7962 + C7963) * C49007) *
               C7758 +
           C8408 * C49284) *
              C867 -
          (((C8579 + C8580 + C8581) * C49007 + (C8582 + C8583 + C8584) * C118) *
               C49284 +
           ((C8585 + C8586 + C8587) * C49007 + (C8588 + C8589 + C8590) * C118) *
               C7758 +
           ((C7762 * C349 + C49271 * C361 + C7761 * C350 + C49303 * C362 +
             C7760 * C351 + C49316 * C363) *
                C49007 +
            (C7762 * C343 + C49271 * C354 + C7761 * C344 + C49303 * C355 +
             C7760 * C345 + C49316 * C356) *
                C118) *
               C7757) *
              C868 +
          (((C7760 * C870 + C49316 * C875 + C7761 * C871 + C49303 * C876 +
             C7762 * C872 + C49271 * C877) *
                C118 +
            (C7760 * C880 + C49316 * C885 + C7761 * C881 + C49303 * C886 +
             C7762 * C882 + C49271 * C887) *
                C49007) *
               C7757 +
           ((C7760 * C2294 + C49316 * C2300 + C7761 * C2295 + C49303 * C2301 +
             C7762 * C2296 + C49271 * C2302) *
                C118 +
            (C7760 * C2303 + C49316 * C2312 + C7761 * C2304 + C49303 * C2313 +
             C7762 * C2305 + C49271 * C2314) *
                C49007) *
               C7758 +
           ((C7760 * C2297 + C49316 * C2306 + C7761 * C2298 + C49303 * C2307 +
             C7762 * C2299 + C49271 * C2308) *
                C118 +
            (C7760 * C2309 + C49316 * C2315 + C7761 * C2310 + C49303 * C2316 +
             C7762 * C2311 + C49271 * C2317) *
                C49007) *
               C49284) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9060 * C119 + C48890 * C126) * C118 +
            (C9060 * C131 + C48890 * C140) * C49007) *
               C9055 +
           (C9200 + C9201) * C9056 + C9454 * C9057 + C9455 * C9058 +
           C9456 * C9059) *
              C867 -
          ((C9575 + C9576) * C9059 + (C9577 + C9578) * C9058 +
           (C9579 + C9580) * C9057 + (C9581 + C9582) * C9056 +
           ((C9060 * C351 + C48890 * C363) * C49007 +
            (C9060 * C345 + C48890 * C356) * C118) *
               C9055) *
              C868 +
          (((C9060 * C870 + C48890 * C875) * C118 +
            (C9060 * C880 + C48890 * C885) * C49007) *
               C9055 +
           ((C9060 * C2294 + C48890 * C2300) * C118 +
            (C9060 * C2303 + C48890 * C2312) * C49007) *
               C9056 +
           ((C9060 * C2297 + C48890 * C2306) * C118 +
            (C9060 * C2309 + C48890 * C2315) * C49007) *
               C9057 +
           ((C9060 * C9808 + C48890 * C9810) * C118 +
            (C9060 * C9811 + C48890 * C9814) * C49007) *
               C9058 +
           ((C9060 * C9809 + C48890 * C9812) * C118 +
            (C9060 * C9813 + C48890 * C9815) * C49007) *
               C9059) *
              C869) *
         C48961 * C48927) /
            (p * q * std::sqrt(p + q));
}
