/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AA_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_11_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47859 = ae * be;
    const double C47858 = ae + be;
    const double C47857 = 0 * be;
    const double C47856 = yA - yB;
    const double C47876 = 0 * be;
    const double C47875 = zA - zB;
    const double C47916 = 0 * ae;
    const double C47911 = 0 * be;
    const double C47910 = 0 * be;
    const double C47961 = 0 * be;
    const double C48003 = 0 * ae;
    const double C47998 = 0 * be;
    const double C47997 = 0 * be;
    const double C48048 = 0 * be;
    const double C48110 = std::pow(ae, 2);
    const double C48109 = yP - yQ;
    const double C48108 = zP - zQ;
    const double C48107 = p + q;
    const double C48106 = p * q;
    const double C48118 = bs[4];
    const double C48116 = xP - xQ;
    const double C48123 = bs[5];
    const double C48130 = bs[6];
    const double C48138 = bs[7];
    const double C48178 = bs[3];
    const double C48593 = bs[2];
    const double C115 = bs[0];
    const double C48928 = xA - xB;
    const double C48963 = ce + de;
    const double C48962 = ce * de;
    const double C48961 = xC - xD;
    const double C48976 = yC - yD;
    const double C48985 = zC - zD;
    const double C47860 = std::pow(C47858, 2);
    const double C47894 = 2 * C47858;
    const double C47912 = C47857 / C47858;
    const double C47861 = C47859 * C47856;
    const double C47913 = C47856 * C47857;
    const double C49026 = std::pow(C47856, 2);
    const double C49084 = C47856 * be;
    const double C49082 = C47856 * ae;
    const double C47999 = C47876 / C47858;
    const double C47877 = C47859 * C47875;
    const double C48000 = C47875 * C47876;
    const double C49043 = std::pow(C47875, 2);
    const double C49126 = C47875 * be;
    const double C49124 = C47875 * ae;
    const double C47923 = C47916 / C47858;
    const double C47918 = C47856 * C47911;
    const double C47962 = C47961 / C47858;
    const double C48010 = C48003 / C47858;
    const double C48005 = C47875 * C47998;
    const double C48049 = C48048 / C47858;
    const double C48162 = C48109 * ae;
    const double C48259 = std::pow(C48109, 2);
    const double C48112 = C48108 * C48109;
    const double C48147 = C48108 * ae;
    const double C48334 = std::pow(C48108, 2);
    const double C48111 = 2 * C48106;
    const double C48124 = std::pow(C48116, 2);
    const double C48931 = C48928 * be;
    const double C48930 = C48928 * ae;
    const double C48929 = std::pow(C48928, 2);
    const double C48973 = 2 * C48963;
    const double C49281 = std::pow(C48963, 2);
    const double C48964 = std::pow(C48961, 2);
    const double C49280 = C48961 * de;
    const double C49279 = C48961 * ce;
    const double C48998 = std::pow(C48976, 2);
    const double C49285 = C48976 * de;
    const double C49283 = C48976 * ce;
    const double C49015 = std::pow(C48985, 2);
    const double C49286 = C48985 * de;
    const double C49284 = C48985 * ce;
    const double C47862 = 2 * C47860;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C47860;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C47860;
    const double C49277 = 4 * C47860;
    const double C48943 = std::pow(C47894, -1);
    const double C49278 = C47860 * C47894;
    const double C49274 = std::pow(C47894, -2);
    const double C47921 = C47913 / C47858;
    const double C49027 = C49026 * C47859;
    const double C49287 = std::pow(C49082, 2);
    const double C48008 = C48000 / C47858;
    const double C49044 = C49043 * C47859;
    const double C49289 = std::pow(C49124, 2);
    const double C47924 = C47918 / C47858;
    const double C48011 = C48005 / C47858;
    const double C48163 = C48123 * C48162;
    const double C48166 = C48118 * C48162;
    const double C48172 = C48130 * C48162;
    const double C48211 = C48178 * C48162;
    const double C48226 = C48138 * C48162;
    const double C48114 = C48112 * C48110;
    const double C48148 = C48123 * C48147;
    const double C48151 = C48118 * C48147;
    const double C48157 = C48130 * C48147;
    const double C48179 = C48178 * C48147;
    const double C48194 = C48138 * C48147;
    const double C48113 = C48111 / C48107;
    const double C122 = (-(bs[1] * C48162 * C48111) / C48107) / C47858;
    const double C123 = (-(bs[1] * C48147 * C48111) / C48107) / C47858;
    const double C116 = -(C48116 * bs[1] * C48111) / C48107;
    const double C276 = -(C48109 * bs[1] * C48111) / C48107;
    const double C416 = -(C48108 * bs[1] * C48111) / C48107;
    const double C49267 = std::pow(C48930, 2);
    const double C48932 = C48929 * C47859;
    const double C49282 = std::pow(C48973, -1);
    const double C49316 = 2 * C49281;
    const double C48965 = C48964 * C48962;
    const double C48999 = C48998 * C48962;
    const double C49016 = C49015 * C48962;
    const double C47915 = C47857 / C47862;
    const double C47920 = C47911 / C47862;
    const double C47919 = C47910 / C47862;
    const double C48002 = C47876 / C47862;
    const double C48007 = C47998 / C47862;
    const double C48006 = C47997 / C47862;
    const double C49313 = C47858 * C49277;
    const double C49314 = 4 * C49278;
    const double C47925 = 0 - C47921;
    const double C49028 = C49027 / C47858;
    const double C48012 = 0 - C48008;
    const double C49045 = C49044 / C47858;
    const double C47928 = 0 - C47924;
    const double C48015 = 0 - C48011;
    const double C48119 = C48118 * C48114;
    const double C48126 = C48123 * C48114;
    const double C48131 = C48130 * C48114;
    const double C48140 = C48138 * C48114;
    const double C48117 = std::pow(C48113, 4);
    const double C48122 = -C48113;
    const double C48129 = std::pow(C48113, 6);
    const double C138 =
        (std::pow(-C48113, 3) * bs[3] * C48114 +
         std::pow(C48113, 4) * bs[4] * C48114 * std::pow(xP - xQ, 2)) /
        C47860;
    const double C48592 = std::pow(C48113, 2);
    const double C124 =
        (C48116 * std::pow(C48113, 2) * bs[2] * C48162) / C47858;
    const double C125 =
        (C48116 * std::pow(C48113, 2) * bs[2] * C48147) / C47858;
    const double C286 =
        (C48109 * std::pow(C48113, 2) * bs[2] * C48147) / C47858;
    const double C287 =
        (C48109 * std::pow(C48113, 2) * bs[2] * C48162) / C47858 -
        (ae * bs[1] * C48111) / (C48107 * C47858);
    const double C426 =
        (C48108 * std::pow(C48113, 2) * bs[2] * C48147) / C47858 -
        (ae * bs[1] * C48111) / (C48107 * C47858);
    const double C427 =
        (C48108 * std::pow(C48113, 2) * bs[2] * C48162) / C47858;
    const double C48933 = C48932 / C47858;
    const double C48966 = C48965 / C48963;
    const double C49000 = C48999 / C48963;
    const double C49017 = C49016 / C48963;
    const double C47929 = C47925 * ae;
    const double C49029 = -C49028;
    const double C48016 = C48012 * ae;
    const double C49046 = -C49045;
    const double C47932 = C47928 * ae;
    const double C48019 = C48015 * ae;
    const double C48120 = C48117 * C48119;
    const double C48152 = C48117 * C48151;
    const double C48167 = C48117 * C48166;
    const double C48207 = C48118 * C48117;
    const double C48125 = std::pow(C48122, 5);
    const double C48137 = std::pow(C48122, 7);
    const double C48177 = std::pow(C48122, 3);
    const double C294 = (ae * std::pow(C48113, 2) * bs[2] * C48147 +
                         C48109 * std::pow(C48122, 3) * bs[3] * C48114) /
                        C47860;
    const double C434 = (ae * std::pow(C48113, 2) * bs[2] * C48162 +
                         C48108 * std::pow(C48122, 3) * bs[3] * C48114) /
                        C47860;
    const double C48132 = C48129 * C48131;
    const double C48158 = C48129 * C48157;
    const double C48173 = C48129 * C48172;
    const double C48249 = C48130 * C48129;
    const double C48594 = C48593 * C48592;
    const double C48934 = -C48933;
    const double C48967 = -C48966;
    const double C49001 = -C49000;
    const double C49018 = -C49017;
    const double C47933 = C47929 / C47858;
    const double C49030 = std::exp(C49029);
    const double C48020 = C48016 / C47858;
    const double C49047 = std::exp(C49046);
    const double C47936 = C47932 / C47858;
    const double C48023 = C48019 / C47858;
    const double C139 = (2 * C48116 * C48120 +
                         C48116 * (C48120 + std::pow(-C48113, 5) * bs[5] *
                                                C48114 * std::pow(C48116, 2))) /
                        C47860;
    const double C293 = (ae * C48116 * std::pow(C48122, 3) * bs[3] * C48147 +
                         C48109 * C48116 * C48120) /
                        C47860;
    const double C433 = (ae * C48116 * std::pow(C48122, 3) * bs[3] * C48162 +
                         C48108 * C48116 * C48120) /
                        C47860;
    const double C48182 = C48116 * C48152;
    const double C48257 = ae * C48152;
    const double C48256 = C48109 * C48152;
    const double C48701 = C48108 * C48152;
    const double C48214 = C48116 * C48167;
    const double C48281 = C48109 * C48167;
    const double C48332 = ae * C48167;
    const double C48331 = C48108 * C48167;
    const double C48244 = C48116 * C48207;
    const double C48287 = C48109 * C48207;
    const double C48286 = C48207 * ae;
    const double C48600 = C48207 * C48124;
    const double C48651 = C48207 * C48259;
    const double C48703 = C48207 * C48334;
    const double C48776 = C48108 * C48207;
    const double C48127 = C48125 * C48126;
    const double C48149 = C48125 * C48148;
    const double C48164 = C48125 * C48163;
    const double C48209 = C48123 * C48125;
    const double C48141 = C48137 * C48140;
    const double C48196 = C48137 * C48194;
    const double C48228 = C48137 * C48226;
    const double C48180 = C48177 * C48179;
    const double C48212 = C48177 * C48211;
    const double C48246 = C48178 * C48177;
    const double C48133 = C48132 * C48124;
    const double C48136 = C48116 * C48132;
    const double C48355 = C48109 * C48132;
    const double C48492 = C48108 * C48132;
    const double C48159 = C48158 * C48124;
    const double C48193 = C48116 * C48158;
    const double C48356 = C48158 * C48259;
    const double C48393 = ae * C48158;
    const double C48392 = C48109 * C48158;
    const double C48819 = C48108 * C48158;
    const double C48174 = C48173 * C48124;
    const double C48225 = C48116 * C48173;
    const double C48412 = C48109 * C48173;
    const double C48493 = C48173 * C48334;
    const double C48535 = ae * C48173;
    const double C48534 = C48108 * C48173;
    const double C48251 = C48249 * C48124;
    const double C48386 = C48116 * C48249;
    const double C48415 = C48249 * C48259;
    const double C48436 = C48109 * C48249;
    const double C48435 = C48249 * ae;
    const double C48822 = C48249 * C48334;
    const double C117 = C48594 * C48124 - (bs[1] * C48111) / C48107;
    const double C275 = C48109 * C48116 * C48594;
    const double C415 = C48108 * C48116 * C48594;
    const double C620 = C48594 * C48259 - (bs[1] * C48111) / C48107;
    const double C722 = C48108 * C48109 * C48594;
    const double C973 = C48594 * C48334 - (bs[1] * C48111) / C48107;
    const double C48935 = std::exp(C48934);
    const double C48968 = std::exp(C48967);
    const double C49002 = std::exp(C49001);
    const double C49019 = std::exp(C49018);
    const double C47937 = C47933 - C47920;
    const double C151 = C49030 * C138;
    const double C147 = C49030 * C137;
    const double C145 = C49030 * C124;
    const double C2930 = C49030 * C434;
    const double C2928 = C49030 * C427;
    const double C47863 = C47861 * C49030;
    const double C113 = -(2 * ae * be * (yA - yB) * C49030) / (ae + be);
    const double C49083 = C49030 / C47894;
    const double C49085 = C49030 * C49082;
    const double C49092 = C48943 * C49030;
    const double C49293 = C49030 * C49084;
    const double C49324 = C49274 * C49030;
    const double C49322 = C49030 * C49287;
    const double C48024 = C48020 - C48007;
    const double C47878 = C47877 * C49047;
    const double C114 = -(2 * ae * be * (zA - zB) * C49047) / (ae + be);
    const double C49125 = C49047 / C47894;
    const double C49127 = C49047 * C49124;
    const double C49134 = C48943 * C49047;
    const double C49299 = C49047 * C49126;
    const double C49327 = C49274 * C49047;
    const double C49325 = C49047 * C49289;
    const double C47940 = C47936 - C47919;
    const double C48027 = C48023 - C48006;
    const double C155 = C49030 * C139;
    const double C310 = C49030 * C293;
    const double C450 = C49030 * C433;
    const double C48295 = C48244 * ae;
    const double C48604 = 2 * C48244;
    const double C48655 = C48109 * C48244;
    const double C48709 = C48108 * C48244;
    const double C48289 = C48287 * ae;
    const double C48722 = 2 * C48287;
    const double C48757 = C48108 * C48287;
    const double C48781 = 2 * C48776;
    const double C48779 = C48776 * ae;
    const double C48237 = C48116 * C48127;
    const double C48258 = C48109 * C48127;
    const double C48333 = C48108 * C48127;
    const double C140 =
        (3 * (C48120 + C48127 * C48124) +
         C48116 * (2 * C48116 * C48127 +
                   C48116 * (C48127 +
                             std::pow(C48113, 6) * bs[6] * C48114 * C48124))) /
        C47860;
    const double C292 =
        (ae * (std::pow(C48122, 3) * bs[3] * C48147 + C48152 * C48124) +
         C48109 * (C48120 + C48127 * C48124)) /
        C47860;
    const double C432 =
        (ae * (std::pow(C48122, 3) * bs[3] * C48162 + C48167 * C48124) +
         C48108 * (C48120 + C48127 * C48124)) /
        C47860;
    const double C636 = (C48116 * C48120 + ae * C48109 * C48182 +
                         C48109 * (ae * C48182 + C48109 * C48116 * C48127)) /
                        C47860;
    const double C738 =
        (ae * (C48109 * C48116 * C48167 + C48116 * C48178 * C48177 * ae) +
         C48108 * (ae * C48182 + C48109 * C48116 * C48127)) /
        C47860;
    const double C989 = (C48116 * C48120 + ae * C48108 * C48214 +
                         C48108 * (ae * C48214 + C48108 * C48116 * C48127)) /
                        C47860;
    const double C48184 = C48149 * C48124;
    const double C48187 = C48116 * C48149;
    const double C48261 = C48149 * C48259;
    const double C48354 = ae * C48149;
    const double C48353 = C48109 * C48149;
    const double C48775 = C48108 * C48149;
    const double C48216 = C48164 * C48124;
    const double C48219 = C48116 * C48164;
    const double C48285 = C48109 * C48164;
    const double C48336 = C48164 * C48334;
    const double C48491 = ae * C48164;
    const double C48490 = C48108 * C48164;
    const double C48241 = C48209 * C48124;
    const double C48248 = C48116 * C48209;
    const double C48383 = C48209 * C48259;
    const double C48414 = C48109 * C48209;
    const double C48413 = C48209 * ae;
    const double C48777 = C48209 * C48334;
    const double C48820 = C48108 * C48209;
    const double C48142 = C48141 * C48124;
    const double C48369 = C48116 * C48141;
    const double C48394 = C48109 * C48141;
    const double C48536 = C48108 * C48141;
    const double C48197 = C48196 * C48124;
    const double C48370 = C48116 * C48196;
    const double C48396 = C48196 * C48259;
    const double C48229 = C48228 * C48124;
    const double C48434 = C48109 * C48228;
    const double C48452 = C48116 * C48228;
    const double C48538 = C48228 * C48334;
    const double C635 = (C48177 * C48178 * C48114 + ae * C48109 * C48180 +
                         C48109 * (ae * C48180 + C48109 * C48120)) /
                        C47860;
    const double C737 = (ae * (C48109 * C48177 * C48178 * C48162 +
                               bs[2] * std::pow(C48113, 2) * ae) +
                         C48108 * (ae * C48180 + C48109 * C48120)) /
                        C47860;
    const double C1333 = (2 * (ae * C48180 + C48109 * C48120) +
                          ae * (C48180 + C48152 * std::pow(C48109, 2)) +
                          C48109 * (C48120 + ae * C48109 * C48152 +
                                    C48109 * (ae * C48152 + C48109 * C48127))) /
                         C47860;
    const double C127 =
        (std::pow(C48113, 2) * bs[2] * C48147 + C48180 * C48124) / C47858;
    const double C129 =
        (2 * C48116 * C48180 + C48116 * (C48180 + C48152 * C48124)) / C47858;
    const double C282 = (C48109 * (C48180 + C48152 * C48124)) / C47858;
    const double C284 = (C48109 * C48116 * C48180) / C47858;
    const double C424 =
        (C48108 * C48116 * C48180 + C48116 * bs[2] * std::pow(C48113, 2) * ae) /
        C47858;
    const double C626 = (C48592 * C48593 * C48147 + C48180 * C48259) / C47858;
    const double C628 = (C48116 * C48180 + C48182 * C48259) / C47858;
    const double C728 =
        (C48108 * C48109 * C48180 + C48109 * C48594 * ae) / C47858;
    const double C979 =
        (C48592 * C48593 * C48147 + C48108 * (C48108 * C48180 + C48594 * ae) +
         C48108 * C48594 * ae) /
        C47858;
    const double C1327 =
        (2 * C48109 * C48180 + C48109 * (C48180 + C48152 * C48259)) / C47858;
    const double C988 = (C48177 * C48178 * C48114 + ae * C48108 * C48212 +
                         C48108 * (ae * C48212 + C48108 * C48120)) /
                        C47860;
    const double C2924 = (2 * (ae * C48212 + C48108 * C48120) +
                          ae * (C48212 + C48167 * std::pow(C48108, 2)) +
                          C48108 * (C48120 + ae * C48108 * C48167 +
                                    C48108 * (ae * C48167 + C48108 * C48127))) /
                         C47860;
    const double C126 =
        (std::pow(C48113, 2) * bs[2] * C48162 + C48212 * C48124) / C47858;
    const double C128 =
        (2 * C48116 * C48212 + C48116 * (C48212 + C48167 * C48124)) / C47858;
    const double C285 =
        (C48109 * C48116 * C48212 + C48116 * bs[2] * std::pow(C48113, 2) * ae) /
        C47858;
    const double C423 = (C48108 * (C48212 + C48167 * C48124)) / C47858;
    const double C425 = (C48108 * C48116 * C48212) / C47858;
    const double C625 =
        (C48592 * C48593 * C48162 + C48109 * (C48109 * C48212 + C48594 * ae) +
         C48109 * C48594 * ae) /
        C47858;
    const double C727 = (C48108 * (C48109 * C48212 + C48594 * ae)) / C47858;
    const double C978 = (C48592 * C48593 * C48162 + C48212 * C48334) / C47858;
    const double C980 = (C48116 * C48212 + C48214 * C48334) / C47858;
    const double C2919 =
        (2 * C48108 * C48212 + C48108 * (C48212 + C48167 * C48334)) / C47858;
    const double C48282 = C48246 * ae;
    const double C1531 =
        (ae * (C48212 + C48109 * (C48109 * C48167 + C48246 * ae) +
               C48109 * C48246 * ae) +
         C48108 * (C48120 + ae * C48109 * C48152 +
                   C48109 * (ae * C48152 + C48109 * C48127))) /
        C47860;
    const double C48597 = C48116 * C48246;
    const double C48601 = C48246 + C48600;
    const double C48650 = C48109 * C48246;
    const double C48652 = C48246 + C48651;
    const double C48702 = C48108 * C48246;
    const double C48705 = C48246 + C48703;
    const double C283 = (C48109 * (C48212 + C48167 * C48124) +
                         (bs[2] * std::pow(C48113, 2) + C48246 * C48124) * ae) /
                        C47858;
    const double C422 = (C48108 * (C48180 + C48152 * C48124) +
                         (bs[2] * std::pow(C48113, 2) + C48246 * C48124) * ae) /
                        C47858;
    const double C1525 = (C48108 * (C48180 + C48152 * C48259) +
                          (C48594 + C48246 * C48259) * ae) /
                         C47858;
    const double C118 =
        2 * C48116 * C48594 + C48116 * (C48594 + C48246 * C48124);
    const double C274 = C48109 * (C48594 + C48246 * C48124);
    const double C414 = C48108 * (C48594 + C48246 * C48124);
    const double C1321 =
        2 * C48109 * C48594 + C48109 * (C48594 + C48246 * C48259);
    const double C1519 = C48108 * (C48594 + C48246 * C48259);
    const double C2912 =
        2 * C48108 * C48594 + C48108 * (C48594 + C48246 * C48334);
    const double C48134 = C48127 + C48133;
    const double C48139 = 2 * C48136;
    const double C48266 = C48109 * C48136;
    const double C48341 = C48108 * C48136;
    const double C48160 = C48149 + C48159;
    const double C48195 = 2 * C48193;
    const double C48267 = C48193 * C48259;
    const double C48368 = ae * C48193;
    const double C48367 = C48109 * C48193;
    const double C48790 = C48108 * C48193;
    const double C48360 = C48149 + C48356;
    const double C48400 = 2 * C48392;
    const double C48398 = ae * C48392;
    const double C48804 = C48108 * C48392;
    const double C48175 = C48164 + C48174;
    const double C48227 = 2 * C48225;
    const double C48298 = C48109 * C48225;
    const double C48342 = C48225 * C48334;
    const double C48505 = ae * C48225;
    const double C48504 = C48108 * C48225;
    const double C48497 = C48164 + C48493;
    const double C48542 = 2 * C48534;
    const double C48540 = ae * C48534;
    const double C48252 = C48209 + C48251;
    const double C48387 = C48386 * C48259;
    const double C48454 = C48109 * C48386;
    const double C48453 = C48386 * ae;
    const double C48792 = C48386 * C48334;
    const double C48418 = C48209 + C48415;
    const double C48440 = C48436 * ae;
    const double C48806 = C48436 * C48334;
    const double C48826 = C48209 + C48822;
    const double C48937 = C48935 * C48930;
    const double C48936 = C48935 / C47894;
    const double C48945 = C48943 * C48935;
    const double C49270 = C48935 * C48931;
    const double C49311 = C49274 * C48935;
    const double C49305 = C48935 * C49267;
    const double C49317 = C49282 * C48968;
    const double C49315 = C48968 * C49279;
    const double C270 = -(C48968 * C49280) / C48963;
    const double C49319 = C49282 * C49002;
    const double C49318 = C49002 * C49283;
    const double C550 = -(C49002 * C49285) / C48963;
    const double C49321 = C49282 * C49019;
    const double C49320 = C49019 * C49284;
    const double C824 = -(C49019 * C49286) / C48963;
    const double C47942 = C47937 / C47894;
    const double C47941 = C47856 * C47937;
    const double C47895 = 2 * C47863;
    const double C47917 = C47863 / C47860;
    const double C1111 = ((0 * ae) / C47858 - C47863 / C47860) / (2 * C47858) +
                         (0 * ae) / C47858;
    const double C3912 =
        ((C49030 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
        C47857 / C47862;
    const double C3913 = (0 * ae) / C47858 - C47863 / C47860;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C311 = C113 * C275;
    const double C451 = C113 * C415;
    const double C2931 = C113 * C973;
    const double C2929 = C113 * C426;
    const double C2927 = C113 * C416;
    const double C3377 = C113 * C722;
    const double C7961 = (C49030 * std::pow(C49084, 2)) / C47860 + C49083;
    const double C49086 = C49085 * C49084;
    const double C49091 = C49085 / C47862;
    const double C49291 = C49085 / C47858;
    const double C49288 = C48943 * C49085;
    const double C3922 = C49092 * C293;
    const double C22521 = C49092 * C293;
    const double C1110 =
        (((C49030 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
         C47857 / C47862) /
            (2 * C47858) +
        ((C47856 * ((0 * ae) / C47858 - C47863 / C47860) + C49092) * ae) /
            C47858;
    const double C49093 = C49092 * C49084;
    const double C49297 = C49082 * C49092;
    const double C49296 = 2 * C49092;
    const double C49334 = C49092 / C49277;
    const double C9265 = C49092 / C49314;
    const double C26643 = C49092 / C47894;
    const double C49330 = C49293 / C47858;
    const double C7962 = (-2 * C48943 * C49293) / C47858;
    const double C49346 = C49322 / C47860;
    const double C48029 = C48024 / C47894;
    const double C48028 = C47875 * C48024;
    const double C47982 = 2 * C47878;
    const double C48004 = C47878 / C47860;
    const double C2536 = ((0 * ae) / C47858 - C47878 / C47860) / (2 * C47858) +
                         (0 * ae) / C47858;
    const double C5120 =
        ((C49047 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
        C47876 / C47862;
    const double C5121 = (0 * ae) / C47858 - C47878 / C47860;
    const double C15326 = (C49047 * std::pow(C49126, 2)) / C47860 + C49125;
    const double C49128 = C49127 * C49126;
    const double C49133 = C49127 / C47862;
    const double C49292 = C49127 / C47858;
    const double C49290 = C48943 * C49127;
    const double C2535 =
        (((C49047 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
         C47876 / C47862) /
            (2 * C47858) +
        ((C47875 * ((0 * ae) / C47858 - C47878 / C47860) + C49134) * ae) /
            C47858;
    const double C49135 = C49134 * C49126;
    const double C49303 = C49124 * C49134;
    const double C49302 = 2 * C49134;
    const double C49340 = C49134 / C49277;
    const double C17859 = C49134 / C49314;
    const double C36791 = C49134 / C47894;
    const double C49336 = C49299 / C47858;
    const double C15327 = (-2 * C48943 * C49299) / C47858;
    const double C49348 = C49325 / C47860;
    const double C47946 = C47940 + C47912;
    const double C48033 = C48027 + C47999;
    const double C48260 = C48257 + C48258;
    const double C48335 = C48332 + C48333;
    const double C159 = C49030 * C140;
    const double C306 = C49030 * C292;
    const double C3930 = C49092 * C292;
    const double C22529 = C49092 * C292;
    const double C446 = C49030 * C432;
    const double C1124 = C49324 * C636;
    const double C4120 = C49092 * C636;
    const double C7982 = C49324 * C636;
    const double C22719 = C49092 * C636;
    const double C2744 = C49030 * C738;
    const double C4286 = C49092 * C738;
    const double C22885 = C49092 * C738;
    const double C2545 = C49030 * C989;
    const double C48185 = C48152 + C48184;
    const double C48189 = 2 * C48187;
    const double C48265 = ae * C48187;
    const double C48264 = C48109 * C48187;
    const double C1332 = (2 * (ae * C48182 + C48109 * C48237) +
                          ae * (C48182 + C48187 * std::pow(C48109, 2)) +
                          C48109 * (C48237 + ae * C48109 * C48187 +
                                    C48109 * (ae * C48187 + C48109 * C48136))) /
                         C47860;
    const double C48708 = C48108 * C48187;
    const double C1325 =
        (2 * C48109 * C48182 + C48109 * (C48182 + C48187 * C48259)) / C47858;
    const double C48262 = C48152 + C48261;
    const double C48358 = C48354 + C48355;
    const double C48359 = 2 * C48353;
    const double C48357 = ae * C48353;
    const double C48756 = C48108 * C48353;
    const double C48778 = C48775 + C48286;
    const double C48217 = C48167 + C48216;
    const double C48221 = 2 * C48219;
    const double C48294 = C48109 * C48219;
    const double C48340 = ae * C48219;
    const double C48339 = C48108 * C48219;
    const double C1530 =
        (ae * (C48214 + C48109 * (C48109 * C48219 + C48244 * ae) +
               C48109 * C48244 * ae) +
         C48108 * (C48237 + ae * C48109 * C48187 +
                   C48109 * (ae * C48187 + C48109 * C48136))) /
        C47860;
    const double C2923 = (2 * (ae * C48214 + C48108 * C48237) +
                          ae * (C48214 + C48219 * std::pow(C48108, 2)) +
                          C48108 * (C48237 + ae * C48108 * C48219 +
                                    C48108 * (ae * C48219 + C48108 * C48136))) /
                         C47860;
    const double C2917 =
        (2 * C48108 * C48214 + C48108 * (C48214 + C48219 * C48334)) / C47858;
    const double C48288 = C48285 + C48286;
    const double C48337 = C48167 + C48336;
    const double C48495 = C48491 + C48492;
    const double C48496 = 2 * C48490;
    const double C48494 = ae * C48490;
    const double C48242 = C48207 + C48241;
    const double C48250 = 2 * C48248;
    const double C48300 = C48109 * C48248;
    const double C48299 = C48248 * ae;
    const double C48656 = C48248 * C48259;
    const double C48710 = C48248 * C48334;
    const double C48791 = C48108 * C48248;
    const double C48384 = C48207 + C48383;
    const double C48419 = 2 * C48414;
    const double C48417 = C48414 * ae;
    const double C48758 = C48414 * C48334;
    const double C48805 = C48108 * C48414;
    const double C48416 = C48412 + C48413;
    const double C48824 = C48819 + C48413;
    const double C48780 = C48207 + C48777;
    const double C48827 = 2 * C48820;
    const double C48825 = C48820 * ae;
    const double C48143 = C48132 + C48142;
    const double C48372 = C48109 * C48369;
    const double C48506 = C48108 * C48369;
    const double C48399 = C48393 + C48394;
    const double C48541 = C48535 + C48536;
    const double C48198 = C48158 + C48197;
    const double C48374 = C48370 * C48259;
    const double C48401 = C48158 + C48396;
    const double C48230 = C48173 + C48229;
    const double C48439 = C48434 + C48435;
    const double C48456 = C48109 * C48452;
    const double C48507 = C48452 * C48334;
    const double C48543 = C48173 + C48538;
    const double C3380 = C49030 * C737;
    const double C6725 = C49092 * C737;
    const double C25389 = C49092 * C737;
    const double C150 = C113 * C127;
    const double C154 = C113 * C129;
    const double C305 = C113 * C282;
    const double C309 = C113 * C284;
    const double C449 = C113 * C424;
    const double C3379 = C113 * C728;
    const double C2933 = C113 * C979;
    const double C2934 = C49030 * C988;
    const double C3804 = C49030 * C2924;
    const double C149 = C49030 * C126;
    const double C153 = C49030 * C128;
    const double C312 = C49030 * C285;
    const double C3918 = C49092 * C285;
    const double C22517 = C49092 * C285;
    const double C448 = C49030 * C423;
    const double C452 = C49030 * C425;
    const double C3378 = C49030 * C727;
    const double C6721 = C49092 * C727;
    const double C25385 = C49092 * C727;
    const double C2932 = C49030 * C978;
    const double C2543 = C49030 * C980;
    const double C3806 = C49030 * C2919;
    const double C48283 = C48281 + C48282;
    const double C48704 = C48701 + C48282;
    const double C2918 =
        (2 * (C48108 * C48180 + C48594 * ae) +
         C48108 * (C48180 + C48108 * (C48108 * C48152 + C48282) +
                   C48108 * C48246 * ae) +
         (C48594 + C48246 * C48334) * ae) /
        C47858;
    const double C7301 = C49092 * C1531;
    const double C10346 = C49324 * C1531;
    const double C16889 = C49324 * C1531;
    const double C25967 = C49092 * C1531;
    const double C627 =
        (C48116 * C48212 + C48109 * (C48109 * C48214 + C48597 * ae) +
         C48109 * C48597 * ae) /
        C47858;
    const double C729 = (C48108 * (C48109 * C48214 + C48597 * ae)) / C47858;
    const double C730 =
        (C48108 * C48109 * C48182 + C48109 * C48597 * ae) / C47858;
    const double C981 =
        (C48116 * C48180 + C48108 * (C48108 * C48182 + C48597 * ae) +
         C48108 * C48597 * ae) /
        C47858;
    const double C1523 = (C48108 * (C48182 + C48187 * C48259) +
                          (C48597 + C48244 * C48259) * ae) /
                         C47858;
    const double C2916 =
        (2 * (C48108 * C48182 + C48597 * ae) +
         C48108 * (C48182 + C48108 * (C48108 * C48187 + C48295) +
                   C48108 * C48244 * ae) +
         (C48597 + C48244 * C48334) * ae) /
        C47858;
    const double C621 = C48116 * C48594 + C48597 * C48259;
    const double C723 = C48108 * C48109 * C48597;
    const double C974 = C48116 * C48594 + C48597 * C48334;
    const double C1320 =
        2 * C48109 * C48597 + C48109 * (C48597 + C48244 * C48259);
    const double C1518 = C48108 * (C48597 + C48244 * C48259);
    const double C2399 = C48109 * C48597 + C48655 * C48334;
    const double C2911 =
        2 * C48108 * C48597 + C48108 * (C48597 + C48244 * C48334);
    const double C119 = 3 * (C48594 + C48246 * C48124) +
                        C48116 * (2 * C48597 + C48116 * C48601);
    const double C273 = C48109 * (2 * C48597 + C48116 * C48601);
    const double C413 = C48108 * (2 * C48597 + C48116 * C48601);
    const double C622 = C48594 + C48246 * C48124 + C48601 * C48259;
    const double C724 = C48108 * C48109 * C48601;
    const double C975 = C48594 + C48246 * C48124 + C48601 * C48334;
    const double C2405 =
        (C48109 * C48180 + C48108 * (C48108 * C48256 + C48650 * ae) +
         C48108 * C48650 * ae) /
        C47858;
    const double C3368 =
        (2 * (C48108 * C48256 + C48650 * ae) +
         C48108 * (C48256 + C48108 * (C48108 * C48353 + C48289) +
                   C48108 * C48287 * ae) +
         (C48650 + C48287 * C48334) * ae) /
        C47858;
    const double C2397 = C48109 * C48594 + C48650 * C48334;
    const double C3364 =
        2 * C48108 * C48650 + C48108 * (C48650 + C48287 * C48334);
    const double C1825 = 3 * (C48594 + C48246 * C48259) +
                         C48109 * (2 * C48650 + C48109 * C48652);
    const double C1983 = C48108 * (2 * C48650 + C48109 * C48652);
    const double C2398 = C48594 + C48246 * C48259 + C48652 * C48334;
    const double C3790 = 3 * (C48594 + C48246 * C48334) +
                         C48108 * (2 * C48702 + C48108 * C48705);
    const double C308 = C49030 * C283;
    const double C3926 = C49092 * C283;
    const double C22525 = C49092 * C283;
    const double C445 = C113 * C422;
    const double C152 = C113 * C118;
    const double C307 = C113 * C274;
    const double C447 = C113 * C414;
    const double C3805 = C113 * C2912;
    const double C141 =
        (4 * (2 * C48116 * C48127 + C48116 * C48134) +
         C48116 * (3 * C48134 +
                   C48116 * (2 * C48116 * C48132 +
                             C48116 * (C48132 + std::pow(C48122, 7) * bs[7] *
                                                    C48114 * C48124)))) /
        C47860;
    const double C291 =
        (ae * (2 * C48116 * C48152 + C48116 * (C48152 + C48149 * C48124)) +
         C48109 * (2 * C48116 * C48127 + C48116 * C48134)) /
        C47860;
    const double C431 =
        (ae * (2 * C48116 * C48167 + C48116 * (C48167 + C48164 * C48124)) +
         C48108 * (2 * C48116 * C48127 + C48116 * C48134)) /
        C47860;
    const double C48188 = C48116 * C48160;
    const double C48192 = 3 * C48160;
    const double C48272 = ae * C48160;
    const double C48271 = C48109 * C48160;
    const double C48715 = C48108 * C48160;
    const double C48269 = C48187 + C48267;
    const double C48373 = 2 * C48367;
    const double C48371 = ae * C48367;
    const double C48769 = C48108 * C48367;
    const double C48363 = C48109 * C48360;
    const double C48395 = 3 * C48360;
    const double C48391 = ae * C48360;
    const double C48762 = C48108 * C48360;
    const double C48402 = C48132 + C48398;
    const double C48220 = C48116 * C48175;
    const double C48224 = 3 * C48175;
    const double C48307 = C48109 * C48175;
    const double C48347 = ae * C48175;
    const double C48346 = C48108 * C48175;
    const double C48344 = C48219 + C48342;
    const double C48510 = 2 * C48504;
    const double C48508 = ae * C48504;
    const double C48500 = C48108 * C48497;
    const double C48537 = 3 * C48497;
    const double C48533 = ae * C48497;
    const double C48544 = C48132 + C48540;
    const double C48253 = C48116 * C48252;
    const double C48313 = C48109 * C48252;
    const double C48312 = C48252 * ae;
    const double C48661 = C48252 * C48259;
    const double C48717 = C48252 * C48334;
    const double C48388 = C48248 + C48387;
    const double C48457 = C48454 * ae;
    const double C48771 = C48454 * C48334;
    const double C48795 = C48248 + C48792;
    const double C48421 = C48109 * C48418;
    const double C48437 = C48418 * ae;
    const double C48764 = C48418 * C48334;
    const double C48809 = C48414 + C48806;
    const double C48829 = C48108 * C48826;
    const double C48938 = C48937 * C48931;
    const double C48944 = C48937 / C47862;
    const double C49271 = C48943 * C48937;
    const double C49269 = C48937 / C47858;
    const double C1106 = (C48935 * std::pow(C48931, 2)) / C47860 + C48936;
    const double C48946 = C48945 * C48931;
    const double C49275 = C48930 * C48945;
    const double C49273 = 2 * C48945;
    const double C49328 = C48945 / C49277;
    const double C107 = C48945 / C49314;
    const double C26646 = C48945 / C47894;
    const double C49307 = C49270 / C47858;
    const double C1107 = (-2 * C48943 * C49270) / C47858;
    const double C49341 = C49305 / C47860;
    const double C112 = C49317 / C48973;
    const double C110 = C48968 / C48973 - (C49315 * C49280) / C49281;
    const double C111 = C49315 / C49316 - (C49317 * C49280) / C48963;
    const double C552 = C49315 / C48963;
    const double C618 = C49319 / C48973;
    const double C268 = C49318 / C48963;
    const double C616 = C49002 / C48973 - (C49318 * C49285) / C49281;
    const double C617 = C49318 / C49316 - (C49319 * C49285) / C48963;
    const double C972 = C49321 / C48973;
    const double C410 = C49320 / C48963;
    const double C970 = C49019 / C48973 - (C49320 * C49286) / C49281;
    const double C971 = C49320 / C49316 - (C49321 * C49286) / C48963;
    const double C47947 = C47941 + 0;
    const double C47914 = C47856 * C47895;
    const double C7968 =
        ((-C47857 / C47858) / C47894 -
         ((C49030 - (C47856 * C47895) / C47858) * be) / C47858) /
            C47894 -
        ((C47856 * ((-C47895 / C47858) / C47894 - (0 * be) / C47858) + C49092) *
         be) /
            C47858;
    const double C7969 =
        ((-C47895 / C47858) / C47894 - (0 * be) / C47858) / C47894 -
        (0 * be) / C47858;
    const double C22512 = (-C47895 / C47858) / C47894 - (0 * be) / C47858;
    const double C47927 = C47923 - C47917;
    const double C1123 = C1111 * C628;
    const double C16888 = C1111 * C1525;
    const double C16882 = C1111 * C1519;
    const double C3935 = C3912 * C129;
    const double C3931 = C3912 * C118;
    const double C3927 = C3912 * C127;
    const double C3923 = C3912 * C117;
    const double C3919 = C3912 * C125;
    const double C3915 = C3912 * C116;
    const double C4125 = C3912 * C275;
    const double C4121 = C3912 * C284;
    const double C4117 = C3912 * C274;
    const double C4113 = C3912 * C282;
    const double C4291 = C3912 * C415;
    const double C4287 = C3912 * C424;
    const double C4283 = C3912 * C414;
    const double C4279 = C3912 * C422;
    const double C6722 = C3912 * C426;
    const double C6718 = C3912 * C416;
    const double C7298 = C3912 * C728;
    const double C7294 = C3912 * C722;
    const double C7846 = C3912 * C973;
    const double C7842 = C3912 * C979;
    const double C20182 = C3912 * C2912;
    const double C3929 = C3913 * C282;
    const double C3925 = C3913 * C274;
    const double C3921 = C3913 * C284;
    const double C3917 = C3913 * C275;
    const double C4119 = C3913 * C628;
    const double C6724 = C3913 * C728;
    const double C6720 = C3913 * C722;
    const double C7300 = C3913 * C1525;
    const double C7296 = C3913 * C1519;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C2952 = C2929 + C2930;
    const double C2951 = C2927 + C2928;
    const double C8006 = C7961 * C128;
    const double C8000 = C7961 * C139;
    const double C7990 = C7961 * C138;
    const double C7984 = C7961 * C126;
    const double C7978 = C7961 * C137;
    const double C7972 = C7961 * C124;
    const double C8201 = C7961 * C285;
    const double C8195 = C7961 * C293;
    const double C8189 = C7961 * C283;
    const double C8183 = C7961 * C292;
    const double C8383 = C7961 * C425;
    const double C8377 = C7961 * C433;
    const double C8371 = C7961 * C423;
    const double C8365 = C7961 * C432;
    const double C10366 = C7961 * C989;
    const double C10360 = C7961 * C980;
    const double C10354 = C7961 * C988;
    const double C10348 = C7961 * C978;
    const double C10342 = C7961 * C434;
    const double C10336 = C7961 * C427;
    const double C10802 = C7961 * C737;
    const double C10796 = C7961 * C727;
    const double C11254 = C7961 * C2919;
    const double C11248 = C7961 * C2924;
    const double C12788 = C7961 * C738;
    const double C49087 = C49086 / C47860;
    const double C3942 = C49291 * C140;
    const double C3936 = C49291 * C139;
    const double C3932 = C49291 * C128;
    const double C3928 = C49291 * C138;
    const double C3924 = C49291 * C126;
    const double C3920 = C49291 * C137;
    const double C3916 = C49291 * C124;
    const double C4126 = C49291 * C285;
    const double C4122 = C49291 * C293;
    const double C4118 = C49291 * C283;
    const double C4114 = C49291 * C292;
    const double C4292 = C49291 * C425;
    const double C4288 = C49291 * C433;
    const double C4284 = C49291 * C423;
    const double C4280 = C49291 * C432;
    const double C6511 = C49291 * C738;
    const double C6745 = C49291 * C980;
    const double C6741 = C49291 * C989;
    const double C6723 = C49291 * C434;
    const double C6719 = C49291 * C427;
    const double C7299 = C49291 * C737;
    const double C7295 = C49291 * C727;
    const double C7847 = C49291 * C978;
    const double C7843 = C49291 * C988;
    const double C20183 = C49291 * C2919;
    const double C20179 = C49291 * C2924;
    const double C1109 =
        (((0 - (C47856 * C47857) / C47858) * ae) / C47858 - (0 * be) / C47862) /
            (2 * C47858) +
        ((C47856 * (((C49030 - (C47856 * 2 * C47863) / C47858) * ae) / C47858 -
                    C47857 / C47862) +
          C49291) *
         ae) /
            C47858 +
        (0 * ae) / C47858 - C47863 / C47860;
    const double C49323 = 2 * C49288;
    const double C1133 = C1110 * C282;
    const double C1127 = C1110 * C274;
    const double C1121 = C1110 * C284;
    const double C1115 = C1110 * C275;
    const double C1350 = C1110 * C628;
    const double C16886 = C1110 * C728;
    const double C16880 = C1110 * C722;
    const double C17342 = C1110 * C1525;
    const double C17336 = C1110 * C1519;
    const double C49094 = C49093 / C47858;
    const double C49333 = C49297 / C47862;
    const double C26662 = C26643 * C636;
    const double C30068 = C26643 * C1531;
    const double C49350 = C49291 - C49330;
    const double C22505 = -C49330;
    const double C7992 = C7962 * C292;
    const double C7986 = C7962 * C283;
    const double C7980 = C7962 * C293;
    const double C7974 = C7962 * C285;
    const double C8193 = C7962 * C636;
    const double C8375 = C7962 * C738;
    const double C10344 = C7962 * C737;
    const double C10338 = C7962 * C727;
    const double C10804 = C7962 * C1531;
    const double C49359 = C49346 + C49083;
    const double C48034 = C48028 + 0;
    const double C48001 = C47875 * C47982;
    const double C15330 =
        ((-C47876 / C47858) / C47894 -
         ((C49047 - (C47875 * C47982) / C47858) * be) / C47858) /
            C47894 -
        ((C47875 * ((-C47982 / C47858) / C47894 - (0 * be) / C47858) + C49134) *
         be) /
            C47858;
    const double C15331 =
        ((-C47982 / C47858) / C47894 - (0 * be) / C47858) / C47894 -
        (0 * be) / C47858;
    const double C31305 = (-C47982 / C47858) / C47894 - (0 * be) / C47858;
    const double C48014 = C48010 - C48004;
    const double C49129 = C49128 / C47860;
    const double C2534 =
        (((0 - (C47875 * C47876) / C47858) * ae) / C47858 - (0 * be) / C47862) /
            (2 * C47858) +
        ((C47875 * (((C49047 - (C47875 * 2 * C47878) / C47858) * ae) / C47858 -
                    C47876 / C47862) +
          C49292) *
         ae) /
            C47858 +
        (0 * ae) / C47858 - C47878 / C47860;
    const double C49326 = 2 * C49290;
    const double C49136 = C49135 / C47858;
    const double C49339 = C49303 / C47862;
    const double C49353 = C49292 - C49336;
    const double C31302 = -C49336;
    const double C49360 = C49348 + C49125;
    const double C47950 = C47946 / C47894;
    const double C48037 = C48033 / C47894;
    const double C637 = (C48120 + C48127 * C48124 + ae * C48109 * C48185 +
                         C48109 * (ae * C48185 + C48109 * C48134)) /
                        C47860;
    const double C739 =
        (ae * (C48109 * (C48167 + C48164 * C48124) +
               (C48178 * C48177 + C48118 * C48117 * C48124) * ae) +
         C48108 * (ae * C48185 + C48109 * C48134)) /
        C47860;
    const double C131 = (3 * (C48180 + C48152 * C48124) +
                         C48116 * (2 * C48182 + C48116 * C48185)) /
                        C47858;
    const double C280 = (C48109 * (2 * C48182 + C48116 * C48185)) / C47858;
    const double C420 =
        (C48108 * (2 * C48182 + C48116 * C48185) +
         (2 * C48116 * C48246 + C48116 * (C48246 + C48207 * C48124)) * ae) /
        C47858;
    const double C630 = (C48180 + C48152 * C48124 + C48185 * C48259) / C47858;
    const double C732 =
        (C48108 * C48109 * C48185 + C48109 * C48601 * ae) / C47858;
    const double C983 =
        (C48180 + C48152 * C48124 + C48108 * (C48108 * C48185 + C48601 * ae) +
         C48108 * C48601 * ae) /
        C47858;
    const double C1323 =
        (2 * C48109 * C48185 + C48109 * (C48185 + C48160 * C48259)) / C47858;
    const double C48268 = C48265 + C48266;
    const double C2409 =
        (C48109 * C48182 + C48108 * (C48108 * C48264 + C48655 * ae) +
         C48108 * C48655 * ae) /
        C47858;
    const double C1349 = C49324 * C1332;
    const double C8191 = C49324 * C1332;
    const double C11386 = C49334 * C1332;
    const double C23743 = C49334 * C1332;
    const double C26871 = C26643 * C1332;
    const double C48711 = C48708 + C48295;
    const double C1348 = C1111 * C1325;
    const double C1834 =
        (3 * (C48120 + ae * C48256 + C48109 * C48260) +
         ae * (2 * C48256 + C48109 * C48262) +
         C48109 * (2 * C48260 + ae * C48262 +
                   C48109 * (C48127 + ae * C48109 * C48149 +
                             C48109 * (ae * C48149 + C48109 * C48132)))) /
        C47860;
    const double C1992 =
        (ae * (2 * (C48109 * C48167 + C48246 * ae) +
               C48109 * (C48167 + C48109 * (C48109 * C48164 + C48207 * ae) +
                         C48109 * C48207 * ae) +
               (C48246 + C48207 * C48259) * ae) +
         C48108 * (2 * C48260 + ae * C48262 +
                   C48109 * (C48127 + ae * C48109 * C48149 +
                             C48109 * (ae * C48149 + C48109 * C48132)))) /
        C47860;
    const double C1829 = (3 * (C48180 + C48152 * C48259) +
                          C48109 * (2 * C48256 + C48109 * C48262)) /
                         C47858;
    const double C1987 = (C48108 * (2 * C48256 + C48109 * C48262) +
                          (2 * C48650 + C48109 * C48652) * ae) /
                         C47858;
    const double C2406 =
        (C48180 + C48152 * C48259 + C48108 * (C48108 * C48262 + C48652 * ae) +
         C48108 * C48652 * ae) /
        C47858;
    const double C48362 = C48109 * C48358;
    const double C48390 = 2 * C48358;
    const double C48471 = C48108 * C48358;
    const double C48361 = C48127 + C48357;
    const double C48759 = C48756 + C48289;
    const double C48782 = C48108 * C48778;
    const double C48818 = 2 * C48778;
    const double C990 = (C48120 + C48127 * C48124 + ae * C48108 * C48217 +
                         C48108 * (ae * C48217 + C48108 * C48134)) /
                        C47860;
    const double C130 = (3 * (C48212 + C48167 * C48124) +
                         C48116 * (2 * C48214 + C48116 * C48217)) /
                        C47858;
    const double C281 =
        (C48109 * (2 * C48214 + C48116 * C48217) +
         (2 * C48116 * C48246 + C48116 * (C48246 + C48207 * C48124)) * ae) /
        C47858;
    const double C421 = (C48108 * (2 * C48214 + C48116 * C48217)) / C47858;
    const double C629 =
        (C48212 + C48167 * C48124 + C48109 * (C48109 * C48217 + C48601 * ae) +
         C48109 * C48601 * ae) /
        C47858;
    const double C731 = (C48108 * (C48109 * C48217 + C48601 * ae)) / C47858;
    const double C982 = (C48212 + C48167 * C48124 + C48217 * C48334) / C47858;
    const double C2915 =
        (2 * C48108 * C48217 + C48108 * (C48217 + C48175 * C48334)) / C47858;
    const double C48296 = C48294 + C48295;
    const double C48343 = C48340 + C48341;
    const double C1547 = C49324 * C1530;
    const double C6509 = C49092 * C1530;
    const double C8373 = C49324 * C1530;
    const double C12786 = C7962 * C1530;
    const double C25173 = C49092 * C1530;
    const double C27053 = C26643 * C1530;
    const double C2944 = C49030 * C2923;
    const double C19083 = C49291 * C2923;
    const double C2946 = C49030 * C2917;
    const double C19087 = C49291 * C2917;
    const double C48290 = C48109 * C48288;
    const double C48426 = 2 * C48288;
    const double C48470 = ae * C48288;
    const double C48469 = C48108 * C48288;
    const double C3799 =
        (3 * (C48120 + ae * C48331 + C48108 * C48335) +
         ae * (2 * C48331 + C48108 * C48337) +
         C48108 * (2 * C48335 + ae * C48337 +
                   C48108 * (C48127 + ae * C48108 * C48164 +
                             C48108 * (ae * C48164 + C48108 * C48132)))) /
        C47860;
    const double C3793 = (3 * (C48212 + C48167 * C48334) +
                          C48108 * (2 * C48331 + C48108 * C48337)) /
                         C47858;
    const double C48499 = C48108 * C48495;
    const double C48532 = 2 * C48495;
    const double C48498 = C48127 + C48494;
    const double C48308 = C48242 * ae;
    const double C48605 = C48116 * C48242;
    const double C48609 = 3 * C48242;
    const double C48660 = C48109 * C48242;
    const double C48716 = C48108 * C48242;
    const double C1521 = (C48108 * (C48185 + C48160 * C48259) +
                          (C48601 + C48242 * C48259) * ae) /
                         C47858;
    const double C1319 =
        2 * C48109 * C48601 + C48109 * (C48601 + C48242 * C48259);
    const double C1517 = C48108 * (C48601 + C48242 * C48259);
    const double C2910 =
        2 * C48108 * C48601 + C48108 * (C48601 + C48242 * C48334);
    const double C48302 = C48300 * ae;
    const double C48726 = 2 * C48300;
    const double C48770 = C48108 * C48300;
    const double C3365 =
        2 * C48108 * C48655 + C48108 * (C48655 + C48300 * C48334);
    const double C48301 = C48298 + C48299;
    const double C48793 = C48790 + C48299;
    const double C48657 = C48244 + C48656;
    const double C48712 = C48244 + C48710;
    const double C48796 = 2 * C48791;
    const double C48794 = C48791 * ae;
    const double C48428 = C48384 * ae;
    const double C48723 = C48109 * C48384;
    const double C48735 = 3 * C48384;
    const double C48763 = C48108 * C48384;
    const double C10326 =
        2 * C48108 * C48652 + C48108 * (C48652 + C48384 * C48334);
    const double C48807 = C48804 + C48417;
    const double C48760 = C48287 + C48758;
    const double C48810 = 2 * C48805;
    const double C48808 = C48805 * ae;
    const double C48420 = C48109 * C48416;
    const double C48433 = 2 * C48416;
    const double C48472 = C48416 * C48334;
    const double C48519 = ae * C48416;
    const double C48518 = C48108 * C48416;
    const double C48828 = C48108 * C48824;
    const double C48783 = C48108 * C48780;
    const double C48823 = 3 * C48780;
    const double C48821 = C48780 * ae;
    const double C48144 = C48116 * C48143;
    const double C48273 = C48109 * C48143;
    const double C48348 = C48108 * C48143;
    const double C1331 = (2 * (ae * C48185 + C48109 * C48134) +
                          ae * (C48185 + C48160 * std::pow(C48109, 2)) +
                          C48109 * (C48134 + ae * C48109 * C48160 +
                                    C48109 * (ae * C48160 + C48109 * C48143))) /
                         C47860;
    const double C1529 =
        (ae * (C48217 + C48109 * (C48109 * C48175 + C48242 * ae) +
               C48109 * C48242 * ae) +
         C48108 * (C48134 + ae * C48109 * C48160 +
                   C48109 * (ae * C48160 + C48109 * C48143))) /
        C47860;
    const double C2922 = (2 * (ae * C48217 + C48108 * C48134) +
                          ae * (C48217 + C48175 * std::pow(C48108, 2)) +
                          C48108 * (C48134 + ae * C48108 * C48175 +
                                    C48108 * (ae * C48175 + C48108 * C48143))) /
                         C47860;
    const double C48376 = C48368 + C48372;
    const double C48509 = C48505 + C48506;
    const double C48403 = C48109 * C48399;
    const double C48520 = C48108 * C48399;
    const double C48545 = C48108 * C48541;
    const double C48199 = C48116 * C48198;
    const double C48274 = C48198 * C48259;
    const double C48377 = C48193 + C48374;
    const double C48404 = C48109 * C48401;
    const double C48231 = C48116 * C48230;
    const double C48311 = C48109 * C48230;
    const double C48349 = C48230 * C48334;
    const double C48441 = C48109 * C48439;
    const double C48521 = C48439 * C48334;
    const double C48458 = C48456 + C48453;
    const double C48511 = C48225 + C48507;
    const double C48546 = C48108 * C48543;
    const double C167 = C150 + C151;
    const double C169 = C154 + C155;
    const double C317 = C305 + C306;
    const double C319 = C309 + C310;
    const double C459 = C449 + C450;
    const double C3386 = C3379 + C3380;
    const double C2954 = C2933 + C2934;
    const double C166 = C148 + C149;
    const double C320 = C311 + C312;
    const double C460 = C451 + C452;
    const double C3385 = C3377 + C3378;
    const double C2953 = C2931 + C2932;
    const double C2415 = (ae * C48180 + C48109 * C48120 + ae * C48108 * C48283 +
                          C48108 * (ae * C48283 + C48108 * C48260)) /
                         C47860;
    const double C3373 =
        (2 * (ae * C48283 + C48108 * C48260) +
         ae * (C48283 + C48288 * std::pow(C48108, 2)) +
         C48108 * (C48260 + ae * C48108 * C48288 +
                   C48108 * (ae * C48288 +
                             C48108 * (ae * C48149 + C48109 * C48132)))) /
        C47860;
    const double C1328 =
        (2 * (C48109 * C48212 + C48594 * ae) +
         C48109 * (C48212 + C48109 * C48283 + C48109 * C48246 * ae) +
         (C48594 + C48246 * C48259) * ae) /
        C47858;
    const double C1526 =
        (C48108 * (C48212 + C48109 * C48283 + C48109 * C48246 * ae)) / C47858;
    const double C2403 =
        (C48109 * C48212 + C48594 * ae + C48283 * C48334) / C47858;
    const double C3367 =
        (2 * C48108 * C48283 + C48108 * (C48283 + C48288 * C48334)) / C47858;
    const double C3794 =
        (3 * (C48180 + C48108 * C48704 + C48702 * ae) +
         C48108 * (2 * C48704 +
                   C48108 * (C48152 + C48108 * (C48108 * C48149 + C48286) +
                             C48108 * C48207 * ae) +
                   C48705 * ae) +
         (2 * C48702 + C48108 * C48705) * ae) /
        C47858;
    const double C3803 = C113 * C2918;
    const double C20178 = C3912 * C2918;
    const double C1118 = C49324 * C627;
    const double C4124 = C49092 * C627;
    const double C7976 = C49324 * C627;
    const double C8199 = C7962 * C627;
    const double C22723 = C49092 * C627;
    const double C26656 = C26643 * C627;
    const double C2746 = C49030 * C729;
    const double C4290 = C49092 * C729;
    const double C6515 = C49291 * C729;
    const double C8381 = C7962 * C729;
    const double C12794 = C7961 * C729;
    const double C22889 = C49092 * C729;
    const double C1548 = C1110 * C730;
    const double C2743 = C113 * C730;
    const double C4285 = C3913 * C730;
    const double C6510 = C3912 * C730;
    const double C2544 = C113 * C981;
    const double C6740 = C3912 * C981;
    const double C1546 = C1111 * C1523;
    const double C6508 = C3913 * C1523;
    const double C32671 = C1110 * C1523;
    const double C2943 = C113 * C2916;
    const double C19082 = C3912 * C2916;
    const double C1117 = C1111 * C621;
    const double C1356 = C1110 * C621;
    const double C4123 = C3913 * C621;
    const double C1554 = C1110 * C723;
    const double C2745 = C113 * C723;
    const double C4289 = C3913 * C723;
    const double C6514 = C3912 * C723;
    const double C2542 = C113 * C974;
    const double C6744 = C3912 * C974;
    const double C1354 = C1111 * C1320;
    const double C1552 = C1111 * C1518;
    const double C6512 = C3913 * C1518;
    const double C32677 = C1110 * C1518;
    const double C2741 = C113 * C2399;
    const double C6742 = C3913 * C2399;
    const double C16904 = C1110 * C2399;
    const double C18878 = C3912 * C2399;
    const double C2945 = C113 * C2911;
    const double C19086 = C3912 * C2911;
    const double C156 = C113 * C119;
    const double C3945 = C3912 * C119;
    const double C303 = C113 * C273;
    const double C1145 = C1110 * C273;
    const double C3933 = C3913 * C273;
    const double C4109 = C3912 * C273;
    const double C443 = C113 * C413;
    const double C4275 = C3912 * C413;
    const double C1129 = C1111 * C622;
    const double C1344 = C1110 * C622;
    const double C4115 = C3913 * C622;
    const double C1542 = C1110 * C724;
    const double C2735 = C113 * C724;
    const double C4281 = C3913 * C724;
    const double C6506 = C3912 * C724;
    const double C2550 = C113 * C975;
    const double C6734 = C3912 * C975;
    const double C3383 = C113 * C2405;
    const double C7840 = C3913 * C2405;
    const double C16898 = C1110 * C2405;
    const double C19632 = C3912 * C2405;
    const double C17776 = C1110 * C3368;
    const double C18286 = C113 * C3368;
    const double C20176 = C3913 * C3368;
    const double C22028 = C3912 * C3368;
    const double C3381 = C113 * C2397;
    const double C7844 = C3913 * C2397;
    const double C16892 = C1110 * C2397;
    const double C19628 = C3912 * C2397;
    const double C17782 = C1110 * C3364;
    const double C18284 = C113 * C3364;
    const double C20180 = C3913 * C3364;
    const double C22024 = C3912 * C3364;
    const double C17338 = C1111 * C1983;
    const double C16894 = C1111 * C2398;
    const double C17348 = C1110 * C2398;
    const double C19630 = C3913 * C2398;
    const double C18042 = C113 * C3790;
    const double C22402 = C3912 * C3790;
    const double C457 = C445 + C446;
    const double C168 = C152 + C153;
    const double C318 = C307 + C308;
    const double C458 = C447 + C448;
    const double C3808 = C3805 + C3806;
    const double C161 = C49030 * C141;
    const double C302 = C49030 * C291;
    const double C3938 = C49092 * C291;
    const double C4106 = C49291 * C291;
    const double C7998 = C7962 * C291;
    const double C22537 = C49092 * C291;
    const double C442 = C49030 * C431;
    const double C4272 = C49291 * C431;
    const double C48190 = C48189 + C48188;
    const double C1831 = (3 * (C48182 + C48187 * C48259) +
                          C48109 * (2 * C48264 + C48109 * C48269)) /
                         C47858;
    const double C48375 = C48136 + C48371;
    const double C48365 = C48359 + C48363;
    const double C48222 = C48221 + C48220;
    const double C3795 = (3 * (C48214 + C48219 * C48334) +
                          C48108 * (2 * C48339 + C48108 * C48344)) /
                         C47858;
    const double C48512 = C48136 + C48508;
    const double C48502 = C48496 + C48500;
    const double C48254 = C48250 + C48253;
    const double C48315 = C48313 * ae;
    const double C48662 = C48242 + C48661;
    const double C48719 = C48242 + C48717;
    const double C48455 = C48388 * ae;
    const double C48727 = C48109 * C48388;
    const double C48773 = C48300 + C48771;
    const double C48798 = C48108 * C48795;
    const double C48423 = C48419 + C48421;
    const double C48766 = C48384 + C48764;
    const double C48812 = C48108 * C48809;
    const double C48831 = C48827 + C48829;
    const double C48939 = C48938 / C47860;
    const double C49308 = 2 * C49271;
    const double C48947 = C48946 / C47858;
    const double C49312 = C49275 / C47862;
    const double C49342 = C49269 - C49307;
    const double C23721 = -C49307;
    const double C49356 = C49341 + C48936;
    const double C47951 = C47947 * be;
    const double C47922 = C47914 / C47858;
    const double C8003 = C7968 * C273;
    const double C7991 = C7968 * C282;
    const double C7985 = C7968 * C274;
    const double C7979 = C7968 * C284;
    const double C7973 = C7968 * C275;
    const double C8198 = C7968 * C621;
    const double C8192 = C7968 * C628;
    const double C8186 = C7968 * C622;
    const double C8380 = C7968 * C723;
    const double C8374 = C7968 * C730;
    const double C8368 = C7968 * C724;
    const double C10361 = C7968 * C2399;
    const double C10355 = C7968 * C2405;
    const double C10349 = C7968 * C2397;
    const double C10343 = C7968 * C728;
    const double C10337 = C7968 * C722;
    const double C10809 = C7968 * C2398;
    const double C10803 = C7968 * C1525;
    const double C10797 = C7968 * C1519;
    const double C11251 = C7968 * C3364;
    const double C11245 = C7968 * C3368;
    const double C12791 = C7968 * C1518;
    const double C12785 = C7968 * C1523;
    const double C7987 = C7969 * C622;
    const double C7981 = C7969 * C628;
    const double C7975 = C7969 * C621;
    const double C8196 = C7969 * C1320;
    const double C8190 = C7969 * C1325;
    const double C8378 = C7969 * C1518;
    const double C8372 = C7969 * C1523;
    const double C10351 = C7969 * C2398;
    const double C10345 = C7969 * C1525;
    const double C10339 = C7969 * C1519;
    const double C10799 = C7969 * C1983;
    const double C22532 = C22512 * C273;
    const double C22528 = C22512 * C282;
    const double C22524 = C22512 * C274;
    const double C22520 = C22512 * C284;
    const double C22516 = C22512 * C275;
    const double C22722 = C22512 * C621;
    const double C22718 = C22512 * C628;
    const double C22714 = C22512 * C622;
    const double C22888 = C22512 * C723;
    const double C22884 = C22512 * C730;
    const double C22880 = C22512 * C724;
    const double C24948 = C22512 * C2399;
    const double C25176 = C22512 * C1518;
    const double C25172 = C22512 * C1523;
    const double C25396 = C22512 * C2405;
    const double C25392 = C22512 * C2397;
    const double C25388 = C22512 * C728;
    const double C25384 = C22512 * C722;
    const double C25970 = C22512 * C2398;
    const double C25966 = C22512 * C1525;
    const double C25962 = C22512 * C1519;
    const double C26524 = C22512 * C3364;
    const double C26520 = C22512 * C3368;
    const double C47931 = C47856 * C47927;
    const double C47960 = C47927 / C47894;
    const double C1154 = C1123 + C1124;
    const double C16919 = C16888 + C16889;
    const double C3954 = C3929 + C3930;
    const double C3952 = C3925 + C3926;
    const double C3950 = C3921 + C3922;
    const double C3948 = C3917 + C3918;
    const double C4135 = C4119 + C4120;
    const double C6751 = C6724 + C6725;
    const double C6749 = C6720 + C6721;
    const double C7305 = C7300 + C7301;
    const double C175 = C165 * C49047;
    const double C5124 = C165 * C49292;
    const double C15334 = C165 * C15326;
    const double C174 = C164 * C114;
    const double C5123 = C164 * C5120;
    const double C49088 = C49083 - C49087;
    const double C3957 = C3935 + C3936;
    const double C3955 = C3931 + C3932;
    const double C3953 = C3927 + C3928;
    const double C3951 = C3923 + C3924;
    const double C3949 = C3919 + C3920;
    const double C3947 = C3915 + C3916;
    const double C4138 = C4125 + C4126;
    const double C4136 = C4121 + C4122;
    const double C4134 = C4117 + C4118;
    const double C4132 = C4113 + C4114;
    const double C4304 = C4291 + C4292;
    const double C4302 = C4287 + C4288;
    const double C4300 = C4283 + C4284;
    const double C4298 = C4279 + C4280;
    const double C6750 = C6722 + C6723;
    const double C6748 = C6718 + C6719;
    const double C7304 = C7298 + C7299;
    const double C7302 = C7294 + C7295;
    const double C7851 = C7846 + C7847;
    const double C7849 = C7842 + C7843;
    const double C20187 = C20182 + C20183;
    const double C1147 = C1109 * C118;
    const double C1141 = C1109 * C129;
    const double C1131 = C1109 * C127;
    const double C1125 = C1109 * C117;
    const double C1119 = C1109 * C125;
    const double C1113 = C1109 * C116;
    const double C1358 = C1109 * C275;
    const double C1352 = C1109 * C284;
    const double C1346 = C1109 * C274;
    const double C1340 = C1109 * C282;
    const double C1556 = C1109 * C415;
    const double C1550 = C1109 * C424;
    const double C1544 = C1109 * C414;
    const double C1538 = C1109 * C422;
    const double C16908 = C1109 * C981;
    const double C16902 = C1109 * C974;
    const double C16896 = C1109 * C979;
    const double C16890 = C1109 * C973;
    const double C16884 = C1109 * C426;
    const double C16878 = C1109 * C416;
    const double C17352 = C1109 * C2405;
    const double C17346 = C1109 * C2397;
    const double C17340 = C1109 * C728;
    const double C17334 = C1109 * C722;
    const double C17784 = C1109 * C2912;
    const double C17778 = C1109 * C2918;
    const double C32679 = C1109 * C723;
    const double C32673 = C1109 * C730;
    const double C49347 = C49323 / C47858;
    const double C49095 = C49091 - C49094;
    const double C49361 = C49350 / C47894;
    const double C22541 = C22505 * C140;
    const double C22535 = C22505 * C139;
    const double C22531 = C22505 * C128;
    const double C22527 = C22505 * C138;
    const double C22523 = C22505 * C126;
    const double C22519 = C22505 * C137;
    const double C22515 = C22505 * C124;
    const double C22725 = C22505 * C285;
    const double C22721 = C22505 * C293;
    const double C22717 = C22505 * C283;
    const double C22713 = C22505 * C292;
    const double C22705 = C22505 * C291;
    const double C22891 = C22505 * C425;
    const double C22887 = C22505 * C433;
    const double C22883 = C22505 * C423;
    const double C22879 = C22505 * C432;
    const double C22871 = C22505 * C431;
    const double C24951 = C22505 * C989;
    const double C24947 = C22505 * C980;
    const double C25179 = C22505 * C729;
    const double C25175 = C22505 * C738;
    const double C25409 = C22505 * C2917;
    const double C25405 = C22505 * C2923;
    const double C25395 = C22505 * C988;
    const double C25391 = C22505 * C978;
    const double C25387 = C22505 * C434;
    const double C25383 = C22505 * C427;
    const double C25965 = C22505 * C737;
    const double C25961 = C22505 * C727;
    const double C26527 = C22505 * C2919;
    const double C26523 = C22505 * C2924;
    const double C7967 =
        ((-(0 * be) / C47858) / C47894 -
         ((0 - (C47856 * C47857) / C47858) * be) / C47858) /
            C47894 -
        ((C47856 * ((-C47857 / C47858) / C47894 -
                    ((C49030 - (C47856 * C47895) / C47858) * be) / C47858) +
          C22505) *
         be) /
            C47858 +
        (-C47895 / C47858) / C47894 - (0 * be) / C47858;
    const double C1148 = C49359 * C128;
    const double C1142 = C49359 * C139;
    const double C1132 = C49359 * C138;
    const double C1126 = C49359 * C126;
    const double C1120 = C49359 * C137;
    const double C1114 = C49359 * C124;
    const double C1359 = C49359 * C285;
    const double C1353 = C49359 * C293;
    const double C1347 = C49359 * C283;
    const double C1341 = C49359 * C292;
    const double C1557 = C49359 * C425;
    const double C1551 = C49359 * C433;
    const double C1545 = C49359 * C423;
    const double C1539 = C49359 * C432;
    const double C16909 = C49359 * C989;
    const double C16903 = C49359 * C980;
    const double C16897 = C49359 * C988;
    const double C16891 = C49359 * C978;
    const double C16885 = C49359 * C434;
    const double C16879 = C49359 * C427;
    const double C17341 = C49359 * C737;
    const double C17335 = C49359 * C727;
    const double C17785 = C49359 * C2919;
    const double C17779 = C49359 * C2924;
    const double C32680 = C49359 * C729;
    const double C32674 = C49359 * C738;
    const double C48038 = C48034 * be;
    const double C48009 = C48001 / C47858;
    const double C48018 = C47875 * C48014;
    const double C48047 = C48014 / C47894;
    const double C49130 = C49125 - C49129;
    const double C2538 = C164 * C2534;
    const double C49349 = C49326 / C47858;
    const double C49137 = C49133 - C49136;
    const double C49363 = C49353 / C47894;
    const double C31308 = C165 * C31302;
    const double C15329 =
        ((-(0 * be) / C47858) / C47894 -
         ((0 - (C47875 * C47876) / C47858) * be) / C47858) /
            C47894 -
        ((C47875 * ((-C47876 / C47858) / C47894 -
                    ((C49047 - (C47875 * C47982) / C47858) * be) / C47858) +
          C31302) *
         be) /
            C47858 +
        (-C47982 / C47858) / C47894 - (0 * be) / C47858;
    const double C2539 = C165 * C49360;
    const double C1136 = C49324 * C637;
    const double C4112 = C49092 * C637;
    const double C7994 = C49324 * C637;
    const double C8181 = C7962 * C637;
    const double C22711 = C49092 * C637;
    const double C26674 = C26643 * C637;
    const double C2734 = C49030 * C739;
    const double C4278 = C49092 * C739;
    const double C6503 = C49291 * C739;
    const double C8363 = C7962 * C739;
    const double C22877 = C49092 * C739;
    const double C28232 = C22505 * C739;
    const double C158 = C113 * C131;
    const double C3941 = C3912 * C131;
    const double C301 = C113 * C280;
    const double C1139 = C1110 * C280;
    const double C3937 = C3913 * C280;
    const double C4105 = C3912 * C280;
    const double C7997 = C7968 * C280;
    const double C22536 = C22512 * C280;
    const double C441 = C113 * C420;
    const double C4271 = C3912 * C420;
    const double C1135 = C1111 * C630;
    const double C1338 = C1110 * C630;
    const double C4111 = C3913 * C630;
    const double C7993 = C7969 * C630;
    const double C8180 = C7968 * C630;
    const double C22710 = C22512 * C630;
    const double C1536 = C1110 * C732;
    const double C2733 = C113 * C732;
    const double C4277 = C3913 * C732;
    const double C6502 = C3912 * C732;
    const double C8362 = C7968 * C732;
    const double C22876 = C22512 * C732;
    const double C2552 = C113 * C983;
    const double C6730 = C3912 * C983;
    const double C1336 = C1111 * C1323;
    const double C8178 = C7969 * C1323;
    const double C1835 =
        (3 * (C48237 + ae * C48264 + C48109 * C48268) +
         ae * (2 * C48264 + C48109 * C48269) +
         C48109 *
             (2 * C48268 + ae * C48269 +
              C48109 * (C48136 + ae * C48109 * C48193 +
                        C48109 * (ae * C48193 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C1993 =
        (ae * (2 * (C48109 * C48219 + C48244 * ae) +
               C48109 * (C48219 + C48109 * (C48109 * C48225 + C48248 * ae) +
                         C48109 * C48248 * ae) +
               (C48244 + C48248 * C48259) * ae) +
         C48108 *
             (2 * C48268 + ae * C48269 +
              C48109 * (C48136 + ae * C48109 * C48193 +
                        C48109 * (ae * C48193 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C2739 = C113 * C2409;
    const double C6738 = C3913 * C2409;
    const double C10367 = C7968 * C2409;
    const double C16910 = C1110 * C2409;
    const double C18874 = C3912 * C2409;
    const double C24952 = C22512 * C2409;
    const double C1366 = C1348 + C1349;
    const double C10806 = C49324 * C1992;
    const double C14444 = C49334 * C1992;
    const double C17345 = C49324 * C1992;
    const double C30646 = C26643 * C1992;
    const double C41523 = C49334 * C1992;
    const double C10805 = C7969 * C1987;
    const double C17344 = C1111 * C1987;
    const double C10357 = C7969 * C2406;
    const double C10815 = C7968 * C2406;
    const double C16900 = C1111 * C2406;
    const double C17354 = C1110 * C2406;
    const double C19634 = C3913 * C2406;
    const double C25974 = C22512 * C2406;
    const double C48397 = C48390 + C48391;
    const double C48364 = C48361 + C48362;
    const double C48784 = C48152 + C48782;
    const double C2553 = C49030 * C990;
    const double C6731 = C49291 * C990;
    const double C24957 = C22505 * C990;
    const double C157 = C49030 * C130;
    const double C3946 = C49291 * C130;
    const double C22545 = C22505 * C130;
    const double C304 = C49030 * C281;
    const double C3934 = C49092 * C281;
    const double C4110 = C49291 * C281;
    const double C8004 = C7962 * C281;
    const double C22533 = C49092 * C281;
    const double C22709 = C22505 * C281;
    const double C444 = C49030 * C421;
    const double C4276 = C49291 * C421;
    const double C22875 = C22505 * C421;
    const double C1130 = C49324 * C629;
    const double C4116 = C49092 * C629;
    const double C7988 = C49324 * C629;
    const double C8187 = C7962 * C629;
    const double C22715 = C49092 * C629;
    const double C26668 = C26643 * C629;
    const double C2736 = C49030 * C731;
    const double C4282 = C49092 * C731;
    const double C6507 = C49291 * C731;
    const double C8369 = C7962 * C731;
    const double C22881 = C49092 * C731;
    const double C28236 = C22505 * C731;
    const double C2551 = C49030 * C982;
    const double C6735 = C49291 * C982;
    const double C24961 = C22505 * C982;
    const double C2938 = C49030 * C2915;
    const double C2417 = (ae * C48182 + C48109 * C48237 + ae * C48108 * C48296 +
                          C48108 * (ae * C48296 + C48108 * C48268)) /
                         C47860;
    const double C1326 =
        (2 * (C48109 * C48214 + C48597 * ae) +
         C48109 * (C48214 + C48109 * C48296 + C48109 * C48244 * ae) +
         (C48597 + C48244 * C48259) * ae) /
        C47858;
    const double C1524 =
        (C48108 * (C48214 + C48109 * C48296 + C48109 * C48244 * ae)) / C47858;
    const double C2407 =
        (C48109 * C48214 + C48597 * ae + C48296 * C48334) / C47858;
    const double C3800 =
        (3 * (C48237 + ae * C48339 + C48108 * C48343) +
         ae * (2 * C48339 + C48108 * C48344) +
         C48108 *
             (2 * C48343 + ae * C48344 +
              C48108 * (C48136 + ae * C48108 * C48225 +
                        C48108 * (ae * C48225 + C48108 * C48116 * C48141)))) /
        C47860;
    const double C48291 = C48167 + C48290;
    const double C48473 = C48470 + C48471;
    const double C18045 = C49030 * C3799;
    const double C22399 = C49291 * C3799;
    const double C43387 = C22505 * C3799;
    const double C18043 = C49030 * C3793;
    const double C22403 = C49291 * C3793;
    const double C43391 = C22505 * C3793;
    const double C48539 = C48532 + C48533;
    const double C48501 = C48498 + C48499;
    const double C48309 = C48307 + C48308;
    const double C48718 = C48715 + C48308;
    const double C2914 =
        (2 * (C48108 * C48185 + C48601 * ae) +
         C48108 * (C48185 + C48108 * (C48108 * C48160 + C48308) +
                   C48108 * C48242 * ae) +
         (C48601 + C48242 * C48334) * ae) /
        C47858;
    const double C48606 = C48604 + C48605;
    const double C2413 =
        (C48109 * C48185 + C48108 * (C48108 * C48271 + C48660 * ae) +
         C48108 * C48660 * ae) /
        C47858;
    const double C2401 = C48109 * C48601 + C48660 * C48334;
    const double C3366 =
        2 * C48108 * C48660 + C48108 * (C48660 + C48313 * C48334);
    const double C1534 = C1111 * C1521;
    const double C6500 = C3913 * C1521;
    const double C8360 = C7969 * C1521;
    const double C28229 = C22512 * C1521;
    const double C1342 = C1111 * C1319;
    const double C8184 = C7969 * C1319;
    const double C1540 = C1111 * C1517;
    const double C6504 = C3913 * C1517;
    const double C8366 = C7969 * C1517;
    const double C28233 = C22512 * C1517;
    const double C2937 = C113 * C2910;
    const double C48772 = C48769 + C48302;
    const double C3370 =
        (2 * (C48108 * C48264 + C48655 * ae) +
         C48108 * (C48264 + C48108 * (C48108 * C48367 + C48302) +
                   C48108 * C48300 * ae) +
         (C48655 + C48300 * C48334) * ae) /
        C47858;
    const double C19084 = C3913 * C3365;
    const double C20442 = C113 * C3365;
    const double C25406 = C22512 * C3365;
    const double C48303 = C48109 * C48301;
    const double C48451 = 2 * C48301;
    const double C48484 = ae * C48301;
    const double C48483 = C48108 * C48301;
    const double C3374 =
        (2 * (ae * C48296 + C48108 * C48268) +
         ae * (C48296 + C48301 * std::pow(C48108, 2)) +
         C48108 *
             (C48268 + ae * C48108 * C48301 +
              C48108 * (ae * C48301 +
                        C48108 * (ae * C48193 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C3369 =
        (2 * C48108 * C48296 + C48108 * (C48296 + C48301 * C48334)) / C47858;
    const double C48797 = C48108 * C48793;
    const double C1989 = (C48108 * (2 * C48264 + C48109 * C48269) +
                          (2 * C48655 + C48109 * C48657) * ae) /
                         C47858;
    const double C2410 =
        (C48182 + C48187 * C48259 + C48108 * (C48108 * C48269 + C48657 * ae) +
         C48108 * C48657 * ae) /
        C47858;
    const double C1826 = 3 * (C48597 + C48244 * C48259) +
                         C48109 * (2 * C48655 + C48109 * C48657);
    const double C1984 = C48108 * (2 * C48655 + C48109 * C48657);
    const double C2400 = C48597 + C48244 * C48259 + C48657 * C48334;
    const double C10327 =
        2 * C48108 * C48657 + C48108 * (C48657 + C48388 * C48334);
    const double C3796 =
        (3 * (C48182 + C48108 * C48711 + C48709 * ae) +
         C48108 * (2 * C48711 +
                   C48108 * (C48187 + C48108 * (C48108 * C48193 + C48299) +
                             C48108 * C48248 * ae) +
                   C48712 * ae) +
         (2 * C48709 + C48108 * C48712) * ae) /
        C47858;
    const double C3791 = 3 * (C48597 + C48244 * C48334) +
                         C48108 * (2 * C48709 + C48108 * C48712);
    const double C48765 = C48762 + C48428;
    const double C10328 =
        (2 * (C48108 * C48262 + C48652 * ae) +
         C48108 * (C48262 + C48108 * (C48108 * C48360 + C48428) +
                   C48108 * C48384 * ae) +
         (C48652 + C48384 * C48334) * ae) /
        C47858;
    const double C48724 = C48722 + C48723;
    const double C11249 = C7969 * C10326;
    const double C17780 = C1111 * C10326;
    const double C22026 = C3913 * C10326;
    const double C43014 = C22512 * C10326;
    const double C48811 = C48108 * C48807;
    const double C11236 =
        (3 * (C48256 + C48108 * C48759 + C48757 * ae) +
         C48108 * (2 * C48759 +
                   C48108 * (C48353 + C48108 * (C48108 * C48392 + C48417) +
                             C48108 * C48414 * ae) +
                   C48760 * ae) +
         (2 * C48757 + C48108 * C48760) * ae) /
        C47858;
    const double C11232 = 3 * (C48650 + C48287 * C48334) +
                          C48108 * (2 * C48757 + C48108 * C48760);
    const double C48422 = C48164 + C48420;
    const double C48474 = C48288 + C48472;
    const double C48524 = 2 * C48518;
    const double C48522 = ae * C48518;
    const double C48830 = C48149 + C48828;
    const double C48785 = C48781 + C48783;
    const double C48145 = C48139 + C48144;
    const double C48275 = C48272 + C48273;
    const double C48350 = C48347 + C48348;
    const double C1337 = C49324 * C1331;
    const double C8179 = C49324 * C1331;
    const double C11388 = C49334 * C1331;
    const double C23745 = C49334 * C1331;
    const double C26859 = C26643 * C1331;
    const double C1535 = C49324 * C1529;
    const double C6501 = C49092 * C1529;
    const double C8361 = C49324 * C1529;
    const double C27041 = C26643 * C1529;
    const double C28230 = C49092 * C1529;
    const double C2936 = C49030 * C2922;
    const double C48378 = C48109 * C48376;
    const double C48485 = C48108 * C48376;
    const double C48513 = C48108 * C48509;
    const double C48405 = C48402 + C48403;
    const double C48523 = C48519 + C48520;
    const double C48547 = C48544 + C48545;
    const double C48200 = C48195 + C48199;
    const double C48276 = C48160 + C48274;
    const double C48379 = C48109 * C48377;
    const double C48406 = C48400 + C48404;
    const double C48232 = C48227 + C48231;
    const double C48314 = C48311 + C48312;
    const double C48351 = C48175 + C48349;
    const double C48442 = C48173 + C48441;
    const double C48525 = C48416 + C48521;
    const double C48459 = C48109 * C48458;
    const double C48486 = C48458 * C48334;
    const double C48514 = C48108 * C48511;
    const double C48548 = C48542 + C48546;
    const double C177 = C167 * C49047;
    const double C2547 = C167 * C49360;
    const double C5128 = C167 * C49292;
    const double C15340 = C167 * C15326;
    const double C31312 = C167 * C31302;
    const double C179 = C169 * C49047;
    const double C2560 = C169 * C49360;
    const double C5132 = C169 * C49292;
    const double C15349 = C169 * C15326;
    const double C31316 = C169 * C31302;
    const double C325 = C317 * C49047;
    const double C2737 = C317 * C49360;
    const double C5283 = C317 * C49292;
    const double C15506 = C317 * C15326;
    const double C31465 = C317 * C31302;
    const double C327 = C319 * C49047;
    const double C2747 = C319 * C49360;
    const double C5287 = C319 * C49292;
    const double C15512 = C319 * C15326;
    const double C31469 = C319 * C31302;
    const double C467 = C459 * C49047;
    const double C2949 = C459 * C49360;
    const double C5126 = C459 * C49134;
    const double C5433 = C459 * C49292;
    const double C15336 = C459 * C15327;
    const double C15670 = C459 * C15326;
    const double C31310 = C459 * C49134;
    const double C31611 = C459 * C31302;
    const double C176 = C166 * C114;
    const double C2546 = C166 * C2534;
    const double C5127 = C166 * C5120;
    const double C328 = C320 * C114;
    const double C2748 = C320 * C2534;
    const double C5288 = C320 * C5120;
    const double C468 = C460 * C114;
    const double C2540 = C460 * C2535;
    const double C2950 = C460 * C2534;
    const double C5125 = C460 * C5121;
    const double C5434 = C460 * C5120;
    const double C15335 = C460 * C15330;
    const double C31309 = C460 * C31305;
    const double C3384 = C49030 * C2415;
    const double C7841 = C49092 * C2415;
    const double C10356 = C7962 * C2415;
    const double C10814 = C7961 * C2415;
    const double C17353 = C49359 * C2415;
    const double C19633 = C49291 * C2415;
    const double C25397 = C49092 * C2415;
    const double C25973 = C22505 * C2415;
    const double C11246 = C7962 * C3373;
    const double C18287 = C49030 * C3373;
    const double C20177 = C49092 * C3373;
    const double C22029 = C49291 * C3373;
    const double C26521 = C49092 * C3373;
    const double C43017 = C22505 * C3373;
    const double C7297 = C49092 * C1526;
    const double C10340 = C49324 * C1526;
    const double C10798 = C7962 * C1526;
    const double C16883 = C49324 * C1526;
    const double C25963 = C49092 * C1526;
    const double C30062 = C26643 * C1526;
    const double C3382 = C49030 * C2403;
    const double C7845 = C49092 * C2403;
    const double C10350 = C7962 * C2403;
    const double C10808 = C7961 * C2403;
    const double C17347 = C49359 * C2403;
    const double C19629 = C49291 * C2403;
    const double C25393 = C49092 * C2403;
    const double C25969 = C22505 * C2403;
    const double C11252 = C7962 * C3367;
    const double C18285 = C49030 * C3367;
    const double C20181 = C49092 * C3367;
    const double C22025 = C49291 * C3367;
    const double C26525 = C49092 * C3367;
    const double C43013 = C22505 * C3367;
    const double C18044 = C113 * C3794;
    const double C22398 = C3912 * C3794;
    const double C3807 = C3803 + C3804;
    const double C20185 = C20178 + C20179;
    const double C2755 = C2743 + C2744;
    const double C4301 = C4285 + C4286;
    const double C6521 = C6510 + C6511;
    const double C2563 = C2544 + C2545;
    const double C6757 = C6740 + C6741;
    const double C1564 = C1546 + C1547;
    const double C6520 = C6508 + C6509;
    const double C2957 = C2943 + C2944;
    const double C19091 = C19082 + C19083;
    const double C1151 = C1117 + C1118;
    const double C4137 = C4123 + C4124;
    const double C2756 = C2745 + C2746;
    const double C4303 = C4289 + C4290;
    const double C6523 = C6514 + C6515;
    const double C2562 = C2542 + C2543;
    const double C6759 = C6744 + C6745;
    const double C2958 = C2945 + C2946;
    const double C19093 = C19086 + C19087;
    const double C465 = C457 * C49047;
    const double C2941 = C457 * C49360;
    const double C5130 = C457 * C49134;
    const double C5429 = C457 * C49292;
    const double C15342 = C457 * C15327;
    const double C15664 = C457 * C15326;
    const double C31314 = C457 * C49134;
    const double C31607 = C457 * C31302;
    const double C178 = C168 * C114;
    const double C2561 = C168 * C2534;
    const double C5131 = C168 * C5120;
    const double C326 = C318 * C114;
    const double C2738 = C318 * C2534;
    const double C5284 = C318 * C5120;
    const double C466 = C458 * C114;
    const double C2548 = C458 * C2535;
    const double C2942 = C458 * C2534;
    const double C5129 = C458 * C5121;
    const double C5430 = C458 * C5120;
    const double C15341 = C458 * C15330;
    const double C31313 = C458 * C31305;
    const double C132 = (4 * (2 * C48182 + C48116 * C48185) +
                         C48116 * (3 * C48185 + C48116 * C48190)) /
                        C47858;
    const double C278 = (C48109 * (3 * C48185 + C48116 * C48190)) / C47858;
    const double C418 = (C48108 * (3 * C48185 + C48116 * C48190) +
                         (3 * (C48246 + C48207 * C48124) +
                          C48116 * (2 * C48244 + C48116 * C48242)) *
                             ae) /
                        C47858;
    const double C632 =
        (2 * C48182 + C48116 * C48185 + C48190 * C48259) / C47858;
    const double C9356 = (4 * (2 * C48256 + C48109 * C48262) +
                          C48109 * (3 * C48262 + C48109 * C48365)) /
                         C47858;
    const double C133 = (4 * (2 * C48214 + C48116 * C48217) +
                         C48116 * (3 * C48217 + C48116 * C48222)) /
                        C47858;
    const double C279 = (C48109 * (3 * C48217 + C48116 * C48222) +
                         (3 * (C48246 + C48207 * C48124) +
                          C48116 * (2 * C48244 + C48116 * C48242)) *
                             ae) /
                        C47858;
    const double C419 = (C48108 * (3 * C48217 + C48116 * C48222)) / C47858;
    const double C984 =
        (2 * C48214 + C48116 * C48217 + C48222 * C48334) / C47858;
    const double C18047 = C49030 * C3795;
    const double C18036 = (4 * (2 * C48331 + C48108 * C48337) +
                           C48108 * (3 * C48337 + C48108 * C48502)) /
                          C47858;
    const double C48321 = C48254 * ae;
    const double C48610 = C48116 * C48254;
    const double C48684 = C48109 * C48254;
    const double C3372 =
        (2 * (C48108 * C48271 + C48660 * ae) +
         C48108 * (C48271 + C48108 * (C48108 * C48109 * C48198 + C48315) +
                   C48108 * C48313 * ae) +
         (C48660 + C48313 * C48334) * ae) /
        C47858;
    const double C1827 = 3 * (C48601 + C48242 * C48259) +
                         C48109 * (2 * C48660 + C48109 * C48662);
    const double C1985 = C48108 * (2 * C48660 + C48109 * C48662);
    const double C2402 = C48601 + C48242 * C48259 + C48662 * C48334;
    const double C3792 = 3 * (C48601 + C48242 * C48334) +
                         C48108 * (2 * C48716 + C48108 * C48719);
    const double C10331 =
        (2 * (C48108 * C48269 + C48657 * ae) +
         C48108 * (C48269 + C48108 * (C48108 * C48377 + C48455) +
                   C48108 * C48388 * ae) +
         (C48657 + C48388 * C48334) * ae) /
        C47858;
    const double C48728 = C48726 + C48727;
    const double C17947 = 3 * (C48655 + C48300 * C48334) +
                          C48108 * (2 * C48770 + C48108 * C48773);
    const double C48800 = C48796 + C48798;
    const double C48438 = C48423 * ae;
    const double C48736 = C48109 * C48423;
    const double C11233 = 3 * (C48652 + C48384 * C48334) +
                          C48108 * (2 * C48763 + C48108 * C48766);
    const double C48814 = C48810 + C48812;
    const double C48833 = C48108 * C48831;
    const double C48940 = C48936 - C48939;
    const double C49343 = C49308 / C47858;
    const double C48948 = C48944 - C48947;
    const double C49357 = C49342 / C47894;
    const double C47953 = C47951 / C47858;
    const double C47926 = C49030 - C47922;
    const double C8017 = C7991 + C7992;
    const double C8014 = C7985 + C7986;
    const double C8011 = C7979 + C7980;
    const double C8008 = C7973 + C7974;
    const double C8212 = C8198 + C8199;
    const double C8209 = C8192 + C8193;
    const double C8394 = C8380 + C8381;
    const double C8391 = C8374 + C8375;
    const double C10375 = C10343 + C10344;
    const double C10372 = C10337 + C10338;
    const double C10823 = C10803 + C10804;
    const double C12796 = C12785 + C12786;
    const double C8012 = C7981 + C7982;
    const double C8009 = C7975 + C7976;
    const double C8208 = C8190 + C8191;
    const double C8390 = C8372 + C8373;
    const double C10376 = C10345 + C10346;
    const double C22553 = C22528 + C22529;
    const double C22551 = C22524 + C22525;
    const double C22549 = C22520 + C22521;
    const double C22547 = C22516 + C22517;
    const double C22736 = C22722 + C22723;
    const double C22734 = C22718 + C22719;
    const double C22902 = C22888 + C22889;
    const double C22900 = C22884 + C22885;
    const double C25184 = C25172 + C25173;
    const double C25417 = C25388 + C25389;
    const double C25415 = C25384 + C25385;
    const double C25979 = C25966 + C25967;
    const double C47935 = C47931 + C49092;
    const double C47963 = C47960 - C47962;
    const double C26686 = C49088 * C128;
    const double C26680 = C49088 * C139;
    const double C26670 = C49088 * C138;
    const double C26664 = C49088 * C126;
    const double C26658 = C49088 * C137;
    const double C26652 = C49088 * C124;
    const double C26881 = C49088 * C285;
    const double C26875 = C49088 * C293;
    const double C26869 = C49088 * C283;
    const double C26863 = C49088 * C292;
    const double C27063 = C49088 * C425;
    const double C27057 = C49088 * C433;
    const double C27051 = C49088 * C423;
    const double C27045 = C49088 * C432;
    const double C29856 = C49088 * C729;
    const double C29850 = C49088 * C738;
    const double C30082 = C49088 * C980;
    const double C30076 = C49088 * C989;
    const double C30064 = C49088 * C434;
    const double C30058 = C49088 * C427;
    const double C30642 = C49088 * C737;
    const double C30636 = C49088 * C727;
    const double C31198 = C49088 * C978;
    const double C31192 = C49088 * C988;
    const double C47411 = C49088 * C2415;
    const double C47405 = C49088 * C2403;
    const double C47837 = C49088 * C2919;
    const double C47831 = C49088 * C2924;
    const double C49294 = C49088 * C49082;
    const double C49332 = C49296 + C49088;
    const double C3964 = C3953 + C3954;
    const double C3963 = C3951 + C3952;
    const double C1146 = C49347 * C281;
    const double C1140 = C49347 * C291;
    const double C1134 = C49347 * C292;
    const double C1128 = C49347 * C283;
    const double C1122 = C49347 * C293;
    const double C1116 = C49347 * C285;
    const double C1357 = C49347 * C627;
    const double C1351 = C49347 * C636;
    const double C1345 = C49347 * C629;
    const double C1339 = C49347 * C637;
    const double C1555 = C49347 * C729;
    const double C1549 = C49347 * C738;
    const double C1543 = C49347 * C731;
    const double C1537 = C49347 * C739;
    const double C16899 = C49347 * C2415;
    const double C16893 = C49347 * C2403;
    const double C16887 = C49347 * C737;
    const double C16881 = C49347 * C727;
    const double C17343 = C49347 * C1531;
    const double C17337 = C49347 * C1526;
    const double C17783 = C49347 * C3367;
    const double C17777 = C49347 * C3373;
    const double C32672 = C49347 * C1530;
    const double C26684 = C49095 * C281;
    const double C26678 = C49095 * C291;
    const double C26672 = C49095 * C292;
    const double C26666 = C49095 * C283;
    const double C26660 = C49095 * C293;
    const double C26654 = C49095 * C285;
    const double C26879 = C49095 * C627;
    const double C26873 = C49095 * C636;
    const double C26867 = C49095 * C629;
    const double C26861 = C49095 * C637;
    const double C27061 = C49095 * C729;
    const double C27055 = C49095 * C738;
    const double C27049 = C49095 * C731;
    const double C27043 = C49095 * C739;
    const double C29848 = C49095 * C1530;
    const double C30066 = C49095 * C737;
    const double C30060 = C49095 * C727;
    const double C30644 = C49095 * C1531;
    const double C30638 = C49095 * C1526;
    const double C31196 = C49095 * C2403;
    const double C31190 = C49095 * C2415;
    const double C47835 = C49095 * C3367;
    const double C47829 = C49095 * C3373;
    const double C49298 = C49095 / C47894;
    const double C49295 = C49095 * C49082;
    const double C11360 = C49361 - (C49088 * C49084) / C47858;
    const double C8005 = C7967 * C118;
    const double C7999 = C7967 * C129;
    const double C7989 = C7967 * C127;
    const double C7983 = C7967 * C117;
    const double C7977 = C7967 * C125;
    const double C7971 = C7967 * C116;
    const double C8200 = C7967 * C275;
    const double C8194 = C7967 * C284;
    const double C8188 = C7967 * C274;
    const double C8182 = C7967 * C282;
    const double C8382 = C7967 * C415;
    const double C8376 = C7967 * C424;
    const double C8370 = C7967 * C414;
    const double C8364 = C7967 * C422;
    const double C10365 = C7967 * C981;
    const double C10359 = C7967 * C974;
    const double C10353 = C7967 * C979;
    const double C10347 = C7967 * C973;
    const double C10341 = C7967 * C426;
    const double C10335 = C7967 * C416;
    const double C10813 = C7967 * C2405;
    const double C10807 = C7967 * C2397;
    const double C10801 = C7967 * C728;
    const double C10795 = C7967 * C722;
    const double C11253 = C7967 * C2912;
    const double C11247 = C7967 * C2918;
    const double C12793 = C7967 * C723;
    const double C12787 = C7967 * C730;
    const double C1166 = C1147 + C1148;
    const double C1163 = C1141 + C1142;
    const double C1158 = C1131 + C1132;
    const double C1155 = C1125 + C1126;
    const double C1152 = C1119 + C1120;
    const double C1149 = C1113 + C1114;
    const double C1371 = C1358 + C1359;
    const double C1368 = C1352 + C1353;
    const double C1365 = C1346 + C1347;
    const double C1362 = C1340 + C1341;
    const double C1569 = C1556 + C1557;
    const double C1566 = C1550 + C1551;
    const double C1563 = C1544 + C1545;
    const double C1560 = C1538 + C1539;
    const double C16929 = C16908 + C16909;
    const double C16926 = C16902 + C16903;
    const double C16923 = C16896 + C16897;
    const double C16920 = C16890 + C16891;
    const double C16917 = C16884 + C16885;
    const double C16914 = C16878 + C16879;
    const double C17361 = C17340 + C17341;
    const double C17358 = C17334 + C17335;
    const double C17793 = C17784 + C17785;
    const double C17790 = C17778 + C17779;
    const double C32686 = C32679 + C32680;
    const double C32683 = C32673 + C32674;
    const double C48040 = C48038 / C47858;
    const double C48013 = C49047 - C48009;
    const double C48022 = C48018 + C49134;
    const double C48050 = C48047 - C48049;
    const double C36812 = C169 * C49130;
    const double C36803 = C167 * C49130;
    const double C36797 = C165 * C49130;
    const double C36975 = C319 * C49130;
    const double C36969 = C317 * C49130;
    const double C37133 = C459 * C49130;
    const double C37127 = C457 * C49130;
    const double C49300 = C49130 * C49124;
    const double C49338 = C49302 + C49130;
    const double C2549 = C457 * C49349;
    const double C2541 = C459 * C49349;
    const double C36805 = C457 * C49137;
    const double C36799 = C459 * C49137;
    const double C49304 = C49137 / C47894;
    const double C49301 = C49137 * C49124;
    const double C20285 = C49363 - (C49130 * C49126) / C47858;
    const double C15350 = C168 * C15329;
    const double C15339 = C166 * C15329;
    const double C15333 = C164 * C15329;
    const double C15513 = C320 * C15329;
    const double C15507 = C318 * C15329;
    const double C15671 = C460 * C15329;
    const double C15665 = C458 * C15329;
    const double C171 = C158 + C159;
    const double C3960 = C3941 + C3942;
    const double C315 = C301 + C302;
    const double C3958 = C3937 + C3938;
    const double C4128 = C4105 + C4106;
    const double C8020 = C7997 + C7998;
    const double C22557 = C22536 + C22537;
    const double C455 = C441 + C442;
    const double C4294 = C4271 + C4272;
    const double C1160 = C1135 + C1136;
    const double C4131 = C4111 + C4112;
    const double C8018 = C7993 + C7994;
    const double C8203 = C8180 + C8181;
    const double C22730 = C22710 + C22711;
    const double C2751 = C2733 + C2734;
    const double C4297 = C4277 + C4278;
    const double C6517 = C6502 + C6503;
    const double C8385 = C8362 + C8363;
    const double C22896 = C22876 + C22877;
    const double C11550 = C49334 * C1835;
    const double C23907 = C49334 * C1835;
    const double C11704 = C49334 * C1993;
    const double C12784 = C49324 * C1993;
    const double C24061 = C49334 * C1993;
    const double C29846 = C26643 * C1993;
    const double C32670 = C49324 * C1993;
    const double C10824 = C10805 + C10806;
    const double C17363 = C17344 + C17345;
    const double C9360 =
        (4 * (2 * C48260 + ae * C48262 + C48109 * C48364) +
         ae * (3 * C48262 + C48109 * C48365) +
         C48109 *
             (3 * C48364 + ae * C48365 +
              C48109 * (2 * C48358 + ae * C48360 +
                        C48109 * (C48132 + ae * C48109 * C48158 +
                                  C48109 * (ae * C48158 + C48109 * C48141))))) /
        C47860;
    const double C48786 = C48784 + C48779;
    const double C2566 = C2552 + C2553;
    const double C6753 = C6730 + C6731;
    const double C170 = C156 + C157;
    const double C3962 = C3945 + C3946;
    const double C316 = C303 + C304;
    const double C3956 = C3933 + C3934;
    const double C4130 = C4109 + C4110;
    const double C8023 = C8003 + C8004;
    const double C22555 = C22532 + C22533;
    const double C456 = C443 + C444;
    const double C4296 = C4275 + C4276;
    const double C1157 = C1129 + C1130;
    const double C4133 = C4115 + C4116;
    const double C8015 = C7987 + C7988;
    const double C8206 = C8186 + C8187;
    const double C22732 = C22714 + C22715;
    const double C2752 = C2735 + C2736;
    const double C4299 = C4281 + C4282;
    const double C6519 = C6506 + C6507;
    const double C8388 = C8368 + C8369;
    const double C22898 = C22880 + C22881;
    const double C2565 = C2550 + C2551;
    const double C6755 = C6734 + C6735;
    const double C2740 = C49030 * C2417;
    const double C6739 = C49092 * C2417;
    const double C10368 = C7962 * C2417;
    const double C16911 = C49347 * C2417;
    const double C18875 = C49291 * C2417;
    const double C24953 = C49092 * C2417;
    const double C25167 = C22505 * C2417;
    const double C30074 = C49095 * C2417;
    const double C1355 = C49324 * C1326;
    const double C8197 = C49324 * C1326;
    const double C11378 = C49334 * C1326;
    const double C23735 = C49334 * C1326;
    const double C26877 = C26643 * C1326;
    const double C1553 = C49324 * C1524;
    const double C6513 = C49092 * C1524;
    const double C8379 = C49324 * C1524;
    const double C12792 = C7962 * C1524;
    const double C25177 = C49092 * C1524;
    const double C27059 = C26643 * C1524;
    const double C29854 = C49095 * C1524;
    const double C32678 = C49347 * C1524;
    const double C2742 = C49030 * C2407;
    const double C6743 = C49092 * C2407;
    const double C10362 = C7962 * C2407;
    const double C16905 = C49347 * C2407;
    const double C18879 = C49291 * C2407;
    const double C24949 = C49092 * C2407;
    const double C25171 = C22505 * C2407;
    const double C30080 = C49095 * C2407;
    const double C18049 = C49030 * C3800;
    const double C48292 = C48291 + C48289;
    const double C18050 = C18042 + C18043;
    const double C22407 = C22402 + C22403;
    const double C18039 =
        (4 * (2 * C48335 + ae * C48337 + C48108 * C48501) +
         ae * (3 * C48337 + C48108 * C48502) +
         C48108 *
             (3 * C48501 + ae * C48502 +
              C48108 * (2 * C48495 + ae * C48497 +
                        C48108 * (C48132 + ae * C48108 * C48173 +
                                  C48108 * (ae * C48173 + C48108 * C48141))))) /
        C47860;
    const double C1324 =
        (2 * (C48109 * C48217 + C48601 * ae) +
         C48109 * (C48217 + C48109 * C48309 + C48109 * C48242 * ae) +
         (C48601 + C48242 * C48259) * ae) /
        C47858;
    const double C1522 =
        (C48108 * (C48217 + C48109 * C48309 + C48109 * C48242 * ae)) / C47858;
    const double C2411 =
        (C48109 * C48217 + C48601 * ae + C48309 * C48334) / C47858;
    const double C3798 =
        (3 * (C48185 + C48108 * C48718 + C48716 * ae) +
         C48108 * (2 * C48718 +
                   C48108 * (C48160 + C48108 * (C48108 * C48198 + C48312) +
                             C48108 * C48252 * ae) +
                   C48719 * ae) +
         (2 * C48716 + C48108 * C48719) * ae) /
        C47858;
    const double C2935 = C113 * C2914;
    const double C631 =
        (2 * C48214 + C48116 * C48217 +
         C48109 * (C48109 * C48222 + C48606 * ae) + C48109 * C48606 * ae) /
        C47858;
    const double C733 = (C48108 * (C48109 * C48222 + C48606 * ae)) / C47858;
    const double C734 =
        (C48108 * C48109 * C48190 + C48109 * C48606 * ae) / C47858;
    const double C985 =
        (2 * C48182 + C48116 * C48185 +
         C48108 * (C48108 * C48190 + C48606 * ae) + C48108 * C48606 * ae) /
        C47858;
    const double C120 = 4 * (2 * C48597 + C48116 * C48601) +
                        C48116 * (3 * C48601 + C48116 * C48606);
    const double C272 = C48109 * (3 * C48601 + C48116 * C48606);
    const double C412 = C48108 * (3 * C48601 + C48116 * C48606);
    const double C623 = 2 * C48597 + C48116 * C48601 + C48606 * C48259;
    const double C725 = C48108 * C48109 * C48606;
    const double C976 = 2 * C48597 + C48116 * C48601 + C48606 * C48334;
    const double C1322 =
        2 * C48109 * C48606 + C48109 * (C48606 + C48254 * C48259);
    const double C1520 = C48108 * (C48606 + C48254 * C48259);
    const double C2913 =
        2 * C48108 * C48606 + C48108 * (C48606 + C48254 * C48334);
    const double C2729 = C113 * C2413;
    const double C6728 = C3913 * C2413;
    const double C24954 = C22512 * C2413;
    const double C2731 = C113 * C2401;
    const double C6732 = C3913 * C2401;
    const double C24958 = C22512 * C2401;
    const double C2956 = C2937 + C2938;
    const double C17949 =
        (3 * (C48264 + C48108 * C48772 + C48770 * ae) +
         C48108 *
             (2 * C48772 +
              C48108 * (C48367 + C48108 * (C48108 * C48109 * C48370 + C48457) +
                        C48108 * C48454 * ae) +
              C48773 * ae) +
         (2 * C48770 + C48108 * C48773) * ae) /
        C47858;
    const double C19080 = C3913 * C3370;
    const double C20440 = C113 * C3370;
    const double C25402 = C22512 * C3370;
    const double C48304 = C48219 + C48303;
    const double C19081 = C49092 * C3374;
    const double C20441 = C49030 * C3374;
    const double C25403 = C49092 * C3374;
    const double C19085 = C49092 * C3369;
    const double C20443 = C49030 * C3369;
    const double C25407 = C49092 * C3369;
    const double C48799 = C48187 + C48797;
    const double C12783 = C7969 * C1989;
    const double C32669 = C1111 * C1989;
    const double C10369 = C7969 * C2410;
    const double C16912 = C1111 * C2410;
    const double C18872 = C3913 * C2410;
    const double C25164 = C22512 * C2410;
    const double C12789 = C7969 * C1984;
    const double C32675 = C1111 * C1984;
    const double C10363 = C7969 * C2400;
    const double C16906 = C1111 * C2400;
    const double C18876 = C3913 * C2400;
    const double C25168 = C22512 * C2400;
    const double C18048 = C113 * C3796;
    const double C18046 = C113 * C3791;
    const double C11237 =
        (3 * (C48262 + C48108 * C48765 + C48763 * ae) +
         C48108 * (2 * C48765 +
                   C48108 * (C48360 + C48108 * (C48108 * C48401 + C48437) +
                             C48108 * C48418 * ae) +
                   C48766 * ae) +
         (2 * C48763 + C48108 * C48766) * ae) /
        C47858;
    const double C11243 = C7969 * C10328;
    const double C17774 = C1111 * C10328;
    const double C22030 = C3913 * C10328;
    const double C43018 = C22512 * C10328;
    const double C9446 = (C48108 * (3 * C48262 + C48109 * C48365) +
                          (3 * C48652 + C48109 * C48724) * ae) /
                         C47858;
    const double C9916 =
        (2 * C48256 + C48109 * C48262 +
         C48108 * (C48108 * C48365 + C48724 * ae) + C48108 * C48724 * ae) /
        C47858;
    const double C9354 = 4 * (2 * C48650 + C48109 * C48652) +
                         C48109 * (3 * C48652 + C48109 * C48724);
    const double C9444 = C48108 * (3 * C48652 + C48109 * C48724);
    const double C9912 = 2 * C48650 + C48109 * C48652 + C48724 * C48334;
    const double C10790 =
        2 * C48108 * C48724 + C48108 * (C48724 + C48423 * C48334);
    const double C48813 = C48353 + C48811;
    const double C18290 = C113 * C11236;
    const double C22396 = C3913 * C11236;
    const double C43384 = C22512 * C11236;
    const double C18288 = C113 * C11232;
    const double C22400 = C3913 * C11232;
    const double C43388 = C22512 * C11232;
    const double C48424 = C48422 + C48417;
    const double C11238 =
        (3 * (C48260 + ae * C48469 + C48108 * C48473) +
         ae * (2 * C48469 + C48108 * C48474) +
         C48108 * (2 * C48473 + ae * C48474 +
                   C48108 * (C48358 + ae * C48108 * C48416 +
                             C48108 * (ae * C48416 + C48108 * C48399)))) /
        C47860;
    const double C11234 = (3 * (C48283 + C48288 * C48334) +
                           C48108 * (2 * C48469 + C48108 * C48474)) /
                          C47858;
    const double C48526 = C48358 + C48522;
    const double C48832 = C48830 + C48825;
    const double C18033 = 4 * (2 * C48702 + C48108 * C48705) +
                          C48108 * (3 * C48705 + C48108 * C48785);
    const double C142 =
        (5 * (3 * C48134 + C48116 * C48145) +
         C48116 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C290 =
        (ae * (3 * (C48117 * C48118 * C48147 + C48149 * C48124) +
               C48116 *
                   (2 * C48116 * C48149 +
                    C48116 * (C48149 + C48129 * C48130 * C48147 * C48124))) +
         C48109 * (3 * C48134 + C48116 * C48145)) /
        C47860;
    const double C295 =
        (ae * (4 * (2 * C48116 * C48149 + C48116 * C48160) +
               C48116 * (3 * C48160 +
                         C48116 * (2 * C48116 * C48158 +
                                   C48116 * (C48158 + C48137 * C48138 * C48147 *
                                                          C48124)))) +
         C48109 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C430 =
        (ae * (3 * (C48117 * C48118 * C48162 + C48164 * C48124) +
               C48116 *
                   (2 * C48116 * C48164 +
                    C48116 * (C48164 + C48129 * C48130 * C48162 * C48124))) +
         C48108 * (3 * C48134 + C48116 * C48145)) /
        C47860;
    const double C435 =
        (ae * (4 * (2 * C48116 * C48164 + C48116 * C48175) +
               C48116 * (3 * C48175 +
                         C48116 * (2 * C48116 * C48173 +
                                   C48116 * (C48173 + C48137 * C48138 * C48162 *
                                                          C48124)))) +
         C48108 * (4 * C48145 +
                   C48116 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C638 =
        (2 * C48116 * C48127 + C48116 * C48134 + ae * C48109 * C48190 +
         C48109 * (ae * C48190 + C48109 * C48145)) /
        C47860;
    const double C740 =
        (ae * (C48109 * (2 * C48116 * C48164 + C48116 * C48175) +
               (2 * C48116 * C48207 +
                C48116 * (C48207 + C48123 * C48125 * C48124)) *
                   ae) +
         C48108 * (ae * C48190 + C48109 * C48145)) /
        C47860;
    const double C991 =
        (2 * C48116 * C48127 + C48116 * C48134 + ae * C48108 * C48222 +
         C48108 * (ae * C48222 + C48108 * C48145)) /
        C47860;
    const double C2419 = (ae * C48185 + C48109 * C48134 + ae * C48108 * C48309 +
                          C48108 * (ae * C48309 + C48108 * C48275)) /
                         C47860;
    const double C1360 = C1336 + C1337;
    const double C8202 = C8178 + C8179;
    const double C1558 = C1534 + C1535;
    const double C6516 = C6500 + C6501;
    const double C8384 = C8360 + C8361;
    const double C28237 = C28229 + C28230;
    const double C48380 = C48375 + C48378;
    const double C48487 = C48484 + C48485;
    const double C48515 = C48512 + C48513;
    const double C48407 = C48109 * C48405;
    const double C48478 = C48108 * C48405;
    const double C48527 = C48108 * C48523;
    const double C48549 = C48108 * C48547;
    const double C48201 = C48116 * C48200;
    const double C1334 =
        (2 * (ae * C48190 + C48109 * C48145) +
         ae * (C48190 + C48200 * std::pow(C48109, 2)) +
         C48109 * (C48145 + ae * C48109 * C48200 +
                   C48109 * (ae * C48200 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1330 =
        (2 * C48109 * C48190 + C48109 * (C48190 + C48200 * C48259)) / C47858;
    const double C1528 = (C48108 * (C48190 + C48200 * C48259) +
                          (C48606 + C48254 * C48259) * ae) /
                         C47858;
    const double C1836 =
        (3 * (C48134 + ae * C48271 + C48109 * C48275) +
         ae * (2 * C48271 + C48109 * C48276) +
         C48109 * (2 * C48275 + ae * C48276 +
                   C48109 * (C48143 + ae * C48109 * C48198 +
                             C48109 * (ae * C48198 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1994 =
        (ae * (2 * (C48109 * C48175 + C48242 * ae) +
               C48109 * (C48175 + C48109 * (C48109 * C48230 + C48252 * ae) +
                         C48109 * C48252 * ae) +
               (C48242 + C48252 * C48259) * ae) +
         C48108 * (2 * C48275 + ae * C48276 +
                   C48109 * (C48143 + ae * C48109 * C48198 +
                             C48109 * (ae * C48198 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1833 = (3 * (C48185 + C48160 * C48259) +
                          C48109 * (2 * C48271 + C48109 * C48276)) /
                         C47858;
    const double C1991 = (C48108 * (2 * C48271 + C48109 * C48276) +
                          (2 * C48660 + C48109 * C48662) * ae) /
                         C47858;
    const double C2414 =
        (C48185 + C48160 * C48259 + C48108 * (C48108 * C48276 + C48662 * ae) +
         C48108 * C48662 * ae) /
        C47858;
    const double C48381 = C48373 + C48379;
    const double C48408 = C48109 * C48406;
    const double C48233 = C48116 * C48232;
    const double C48320 = C48109 * C48232;
    const double C1532 =
        (ae * (C48222 + C48109 * (C48109 * C48232 + C48254 * ae) +
               C48109 * C48254 * ae) +
         C48108 * (C48145 + ae * C48109 * C48200 +
                   C48109 * (ae * C48200 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C2925 =
        (2 * (ae * C48222 + C48108 * C48145) +
         ae * (C48222 + C48232 * std::pow(C48108, 2)) +
         C48108 * (C48145 + ae * C48108 * C48232 +
                   C48108 * (ae * C48232 +
                             C48108 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C2920 =
        (2 * C48108 * C48222 + C48108 * (C48222 + C48232 * C48334)) / C47858;
    const double C48316 = C48109 * C48314;
    const double C3375 =
        (2 * (ae * C48309 + C48108 * C48275) +
         ae * (C48309 + C48314 * std::pow(C48108, 2)) +
         C48108 * (C48275 + ae * C48108 * C48314 +
                   C48108 * (ae * C48314 +
                             C48108 * (ae * C48198 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C3371 =
        (2 * C48108 * C48309 + C48108 * (C48309 + C48314 * C48334)) / C47858;
    const double C3801 =
        (3 * (C48134 + ae * C48346 + C48108 * C48350) +
         ae * (2 * C48346 + C48108 * C48351) +
         C48108 * (2 * C48350 + ae * C48351 +
                   C48108 * (C48143 + ae * C48108 * C48230 +
                             C48108 * (ae * C48230 +
                                       C48108 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C3797 = (3 * (C48217 + C48175 * C48334) +
                          C48108 * (2 * C48346 + C48108 * C48351)) /
                         C47858;
    const double C48443 = C48442 + C48440;
    const double C48528 = C48108 * C48525;
    const double C48460 = C48225 + C48459;
    const double C48488 = C48301 + C48486;
    const double C48516 = C48510 + C48514;
    const double C48550 = C48108 * C48548;
    const double C184 = C176 + C177;
    const double C2564 = C2546 + C2547;
    const double C5139 = C5127 + C5128;
    const double C3388 = C3383 + C3384;
    const double C7848 = C7840 + C7841;
    const double C10381 = C10355 + C10356;
    const double C17367 = C17352 + C17353;
    const double C19638 = C19632 + C19633;
    const double C25421 = C25396 + C25397;
    const double C11258 = C11245 + C11246;
    const double C18293 = C18286 + C18287;
    const double C20184 = C20176 + C20177;
    const double C22034 = C22028 + C22029;
    const double C26528 = C26520 + C26521;
    const double C7303 = C7296 + C7297;
    const double C10373 = C10339 + C10340;
    const double C10820 = C10797 + C10798;
    const double C16916 = C16882 + C16883;
    const double C25977 = C25962 + C25963;
    const double C3387 = C3381 + C3382;
    const double C7850 = C7844 + C7845;
    const double C10378 = C10349 + C10350;
    const double C17364 = C17346 + C17347;
    const double C19636 = C19628 + C19629;
    const double C25419 = C25392 + C25393;
    const double C11261 = C11251 + C11252;
    const double C18292 = C18284 + C18285;
    const double C20186 = C20180 + C20181;
    const double C22032 = C22024 + C22025;
    const double C26530 = C26524 + C26525;
    const double C18051 = C18044 + C18045;
    const double C22405 = C22398 + C22399;
    const double C2763 = C2755 * C49349;
    const double C5285 = C2755 * C49134;
    const double C15510 = C2755 * C15327;
    const double C31467 = C2755 * C49134;
    const double C36973 = C2755 * C49137;
    const double C6746 = C4301 + C4302;
    const double C6727 = C4302 + C4301;
    const double C2570 = C2563 * C49327;
    const double C2947 = C2563 * C49349;
    const double C5431 = C2563 * C49134;
    const double C15338 = C2563 * C49327;
    const double C15668 = C2563 * C15327;
    const double C31609 = C2563 * C49134;
    const double C36801 = C2563 * C36791;
    const double C37131 = C2563 * C49137;
    const double C2961 = C2957 * C49327;
    const double C15666 = C2957 * C49327;
    const double C20301 = C2957 * C49340;
    const double C34070 = C2957 * C49340;
    const double C37129 = C2957 * C36791;
    const double C2764 = C2756 * C2535;
    const double C5286 = C2756 * C5121;
    const double C15511 = C2756 * C15330;
    const double C31468 = C2756 * C31305;
    const double C6747 = C4303 + C4304;
    const double C6726 = C4304 + C4303;
    const double C2569 = C2562 * C2536;
    const double C2948 = C2562 * C2535;
    const double C5432 = C2562 * C5121;
    const double C15337 = C2562 * C15331;
    const double C15669 = C2562 * C15330;
    const double C31610 = C2562 * C31305;
    const double C2962 = C2958 * C2536;
    const double C15667 = C2958 * C15331;
    const double C185 = C178 + C179;
    const double C5140 = C5131 + C5132;
    const double C160 = C113 * C132;
    const double C297 = C113 * C278;
    const double C3939 = C3913 * C278;
    const double C22538 = C22512 * C278;
    const double C437 = C113 * C418;
    const double C1137 = C1111 * C632;
    const double C4103 = C3913 * C632;
    const double C7995 = C7969 * C632;
    const double C22702 = C22512 * C632;
    const double C163 = C49030 * C133;
    const double C300 = C49030 * C279;
    const double C3944 = C49092 * C279;
    const double C22543 = C49092 * C279;
    const double C440 = C49030 * C419;
    const double C2557 = C49030 * C984;
    const double C18529 = C49030 * C18036;
    const double C2921 =
        (2 * (C48108 * C48190 + C48606 * ae) +
         C48108 * (C48190 + C48108 * (C48108 * C48200 + C48321) +
                   C48108 * C48254 * ae) +
         (C48606 + C48254 * C48334) * ae) /
        C47858;
    const double C48611 = C48609 + C48610;
    const double C2726 =
        (C48109 * C48190 + C48108 * (C48108 * C48109 * C48200 + C48684 * ae) +
         C48108 * C48684 * ae) /
        C47858;
    const double C2724 = C48109 * C48606 + C48684 * C48334;
    const double C9355 = 4 * (2 * C48655 + C48109 * C48657) +
                         C48109 * (3 * C48657 + C48109 * C48728);
    const double C9445 = C48108 * (3 * C48657 + C48109 * C48728);
    const double C10176 = 2 * C48655 + C48109 * C48657 + C48728 * C48334;
    const double C18034 = 4 * (2 * C48709 + C48108 * C48712) +
                          C48108 * (3 * C48712 + C48108 * C48800);
    const double C10792 =
        (2 * (C48108 * C48365 + C48724 * ae) +
         C48108 * (C48365 + C48108 * (C48108 * C48406 + C48438) +
                   C48108 * C48423 * ae) +
         (C48724 + C48423 * C48334) * ae) /
        C47858;
    const double C48737 = C48735 + C48736;
    const double C18279 = 4 * (2 * C48757 + C48108 * C48760) +
                          C48108 * (3 * C48760 + C48108 * C48814);
    const double C48835 = C48823 + C48833;
    const double C49268 = C48940 * C48930;
    const double C49310 = C49273 + C48940;
    const double C49276 = C48948 / C47894;
    const double C49272 = C48948 * C48930;
    const double C3908 = C49357 - (C48940 * C48931) / C47858;
    const double C47955 = C47950 - C47953;
    const double C47930 = C47926 * ae;
    const double C22511 = (-C47912) / C47894 - (C47926 * be) / C47858;
    const double C47939 = C47935 * be;
    const double C26675 = C47963 * C632;
    const double C26673 = C47963 * C630;
    const double C26667 = C47963 * C622;
    const double C26661 = C47963 * C628;
    const double C26655 = C47963 * C621;
    const double C26876 = C47963 * C1320;
    const double C26870 = C47963 * C1325;
    const double C26864 = C47963 * C1319;
    const double C26858 = C47963 * C1323;
    const double C27058 = C47963 * C1518;
    const double C27052 = C47963 * C1523;
    const double C27046 = C47963 * C1517;
    const double C27040 = C47963 * C1521;
    const double C29851 = C47963 * C1984;
    const double C29845 = C47963 * C1989;
    const double C30077 = C47963 * C2400;
    const double C30071 = C47963 * C2410;
    const double C30067 = C47963 * C1525;
    const double C30061 = C47963 * C1519;
    const double C30645 = C47963 * C1987;
    const double C30639 = C47963 * C1983;
    const double C31193 = C47963 * C2398;
    const double C31187 = C47963 * C2406;
    const double C47832 = C47963 * C10326;
    const double C47826 = C47963 * C10328;
    const double C9271 =
        (C47963 / C47894 + (0 * ae) / C47858) / C47894 - (0 * be) / C47858;
    const double C11369 = C47963 / C47894 - (0 * be) / C47858;
    const double C23726 = C47963 / C47894 + (0 * ae) / C47858;
    const double C49329 = C49294 / C47858;
    const double C49351 = C49332 / C47894;
    const double C3968 = C3964 * C49047;
    const double C6298 = C3964 * C49292;
    const double C35218 = C3964 * C31302;
    const double C3967 = C3963 * C114;
    const double C6297 = C3963 * C5120;
    const double C1165 = C1145 + C1146;
    const double C1162 = C1139 + C1140;
    const double C1159 = C1133 + C1134;
    const double C1156 = C1127 + C1128;
    const double C1153 = C1121 + C1122;
    const double C1150 = C1115 + C1116;
    const double C1370 = C1356 + C1357;
    const double C1367 = C1350 + C1351;
    const double C1364 = C1344 + C1345;
    const double C1361 = C1338 + C1339;
    const double C1568 = C1554 + C1555;
    const double C1565 = C1548 + C1549;
    const double C1562 = C1542 + C1543;
    const double C1559 = C1536 + C1537;
    const double C16924 = C16898 + C16899;
    const double C16921 = C16892 + C16893;
    const double C16918 = C16886 + C16887;
    const double C16915 = C16880 + C16881;
    const double C17362 = C17342 + C17343;
    const double C17359 = C17336 + C17337;
    const double C17792 = C17782 + C17783;
    const double C17789 = C17776 + C17777;
    const double C32682 = C32671 + C32672;
    const double C49352 = C49333 + C49298;
    const double C11362 = C49298 - C49093 / C47862;
    const double C49331 = C49295 / C47858;
    const double C11402 = C11360 * C126;
    const double C11394 = C11360 * C138;
    const double C11380 = C11360 * C137;
    const double C11372 = C11360 * C124;
    const double C11564 = C11360 * C285;
    const double C11556 = C11360 * C293;
    const double C11718 = C11360 * C425;
    const double C11710 = C11360 * C433;
    const double C14438 = C11360 * C434;
    const double C14430 = C11360 * C427;
    const double C14820 = C11360 * C737;
    const double C14812 = C11360 * C727;
    const double C15208 = C11360 * C978;
    const double C15200 = C11360 * C988;
    const double C8024 = C8005 + C8006;
    const double C8021 = C7999 + C8000;
    const double C8016 = C7989 + C7990;
    const double C8013 = C7983 + C7984;
    const double C8010 = C7977 + C7978;
    const double C8007 = C7971 + C7972;
    const double C8213 = C8200 + C8201;
    const double C8210 = C8194 + C8195;
    const double C8207 = C8188 + C8189;
    const double C8204 = C8182 + C8183;
    const double C8395 = C8382 + C8383;
    const double C8392 = C8376 + C8377;
    const double C8389 = C8370 + C8371;
    const double C8386 = C8364 + C8365;
    const double C10386 = C10365 + C10366;
    const double C10383 = C10359 + C10360;
    const double C10380 = C10353 + C10354;
    const double C10377 = C10347 + C10348;
    const double C10374 = C10341 + C10342;
    const double C10371 = C10335 + C10336;
    const double C10828 = C10813 + C10814;
    const double C10825 = C10807 + C10808;
    const double C10822 = C10801 + C10802;
    const double C10819 = C10795 + C10796;
    const double C11262 = C11253 + C11254;
    const double C11259 = C11247 + C11248;
    const double C12800 = C12793 + C12794;
    const double C12797 = C12787 + C12788;
    const double C48042 = C48037 - C48040;
    const double C48017 = C48013 * ae;
    const double C31304 = (-C47999) / C47894 - (C48013 * be) / C47858;
    const double C48026 = C48022 * be;
    const double C36800 = C2562 * C48050;
    const double C37130 = C2958 * C48050;
    const double C17864 =
        (C48050 / C47894 + (0 * ae) / C47858) / C47894 - (0 * be) / C47858;
    const double C20292 = C48050 / C47894 - (0 * be) / C47858;
    const double C34061 = C48050 / C47894 + (0 * ae) / C47858;
    const double C49335 = C49300 / C47858;
    const double C49354 = C49338 / C47894;
    const double C49355 = C49339 + C49304;
    const double C20287 = C49304 - C49135 / C47862;
    const double C49337 = C49301 / C47858;
    const double C20308 = C167 * C20285;
    const double C20295 = C165 * C20285;
    const double C20448 = C319 * C20285;
    const double C20590 = C459 * C20285;
    const double C15351 = C15339 + C15340;
    const double C181 = C171 * C49047;
    const double C5137 = C171 * C49292;
    const double C31321 = C171 * C31302;
    const double C323 = C315 * C49047;
    const double C5279 = C315 * C49292;
    const double C31461 = C315 * C31302;
    const double C3966 = C3957 + C3958;
    const double C463 = C455 * C49047;
    const double C2558 = C455 * C49349;
    const double C5134 = C455 * C49134;
    const double C5425 = C455 * C49292;
    const double C15347 = C455 * C15327;
    const double C31318 = C455 * C49134;
    const double C31603 = C455 * C31302;
    const double C36810 = C455 * C49137;
    const double C2759 = C2751 * C49349;
    const double C5281 = C2751 * C49134;
    const double C15504 = C2751 * C15327;
    const double C31463 = C2751 * C49134;
    const double C36967 = C2751 * C49137;
    const double C6300 = C4298 + C4297;
    const double C6736 = C4297 + C4298;
    const double C18035 =
        (4 * (2 * C48704 + C48108 * C48786 + C48705 * ae) +
         C48108 *
             (3 * C48786 +
              C48108 * (2 * C48778 +
                        C48108 * (C48149 + C48108 * (C48108 * C48158 + C48413) +
                                  C48108 * C48209 * ae) +
                        C48780 * ae) +
              C48785 * ae) +
         (3 * C48705 + C48108 * C48785) * ae) /
        C47858;
    const double C2573 = C2566 * C49327;
    const double C2939 = C2566 * C49349;
    const double C5427 = C2566 * C49134;
    const double C15344 = C2566 * C49327;
    const double C15662 = C2566 * C15327;
    const double C31605 = C2566 * C49134;
    const double C36807 = C2566 * C36791;
    const double C37125 = C2566 * C49137;
    const double C180 = C170 * C114;
    const double C5138 = C170 * C5120;
    const double C324 = C316 * C114;
    const double C5280 = C316 * C5120;
    const double C3965 = C3955 + C3956;
    const double C464 = C456 * C114;
    const double C2559 = C456 * C2535;
    const double C5133 = C456 * C5121;
    const double C5426 = C456 * C5120;
    const double C15348 = C456 * C15330;
    const double C31317 = C456 * C31305;
    const double C2760 = C2752 * C2535;
    const double C5282 = C2752 * C5121;
    const double C15505 = C2752 * C15330;
    const double C31464 = C2752 * C31305;
    const double C6299 = C4300 + C4299;
    const double C6737 = C4299 + C4300;
    const double C2572 = C2565 * C2536;
    const double C2940 = C2565 * C2535;
    const double C5428 = C2565 * C5121;
    const double C15343 = C2565 * C15331;
    const double C15663 = C2565 * C15330;
    const double C31606 = C2565 * C31305;
    const double C36806 = C2565 * C48050;
    const double C2753 = C2739 + C2740;
    const double C6756 = C6738 + C6739;
    const double C10387 = C10367 + C10368;
    const double C16930 = C16910 + C16911;
    const double C18881 = C18874 + C18875;
    const double C24965 = C24952 + C24953;
    const double C1369 = C1354 + C1355;
    const double C8211 = C8196 + C8197;
    const double C1567 = C1552 + C1553;
    const double C6522 = C6512 + C6513;
    const double C8393 = C8378 + C8379;
    const double C12799 = C12791 + C12792;
    const double C25186 = C25176 + C25177;
    const double C32685 = C32677 + C32678;
    const double C2754 = C2741 + C2742;
    const double C6758 = C6742 + C6743;
    const double C10384 = C10361 + C10362;
    const double C16927 = C16904 + C16905;
    const double C18883 = C18878 + C18879;
    const double C24963 = C24948 + C24949;
    const double C2416 =
        (C48120 + ae * C48256 + C48109 * C48260 + ae * C48108 * C48292 +
         C48108 * (ae * C48292 +
                   C48108 * (C48127 + ae * C48109 * C48149 +
                             C48109 * (ae * C48149 + C48109 * C48132)))) /
        C47860;
    const double C9450 =
        (ae * (3 * C48292 +
               C48109 * (2 * C48288 +
                         C48109 * (C48164 +
                                   C48109 * (C48109 * C48173 + C48209 * ae) +
                                   C48109 * C48209 * ae) +
                         C48384 * ae) +
               (2 * C48287 + C48109 * C48384) * ae) +
         C48108 *
             (3 * C48364 + ae * C48365 +
              C48109 * (2 * C48358 + ae * C48360 +
                        C48109 * (C48132 + ae * C48109 * C48158 +
                                  C48109 * (ae * C48158 + C48109 * C48141))))) /
        C47860;
    const double C1828 =
        (3 * (C48212 + C48109 * C48283 + C48650 * ae) +
         C48109 * (2 * C48283 + C48109 * C48292 + C48652 * ae) +
         (2 * C48650 + C48109 * C48652) * ae) /
        C47858;
    const double C1986 =
        (C48108 * (2 * C48283 + C48109 * C48292 + C48652 * ae)) / C47858;
    const double C2404 =
        (C48212 + C48109 * C48283 + C48650 * ae + C48292 * C48334) / C47858;
    const double C18527 = C49030 * C18039;
    const double C1343 = C49324 * C1324;
    const double C8185 = C49324 * C1324;
    const double C11396 = C49334 * C1324;
    const double C23753 = C49334 * C1324;
    const double C26865 = C26643 * C1324;
    const double C1541 = C49324 * C1522;
    const double C6505 = C49092 * C1522;
    const double C8367 = C49324 * C1522;
    const double C27047 = C26643 * C1522;
    const double C28234 = C49092 * C1522;
    const double C2732 = C49030 * C2411;
    const double C6733 = C49092 * C2411;
    const double C24959 = C49092 * C2411;
    const double C2955 = C2935 + C2936;
    const double C1144 = C49324 * C631;
    const double C4108 = C49092 * C631;
    const double C8002 = C49324 * C631;
    const double C22707 = C49092 * C631;
    const double C26682 = C26643 * C631;
    const double C4274 = C49092 * C733;
    const double C5278 = C49030 * C733;
    const double C22873 = C49092 * C733;
    const double C4269 = C3913 * C734;
    const double C5275 = C113 * C734;
    const double C22868 = C22512 * C734;
    const double C2554 = C113 * C985;
    const double C162 = C113 * C120;
    const double C299 = C113 * C272;
    const double C3943 = C3913 * C272;
    const double C22542 = C22512 * C272;
    const double C439 = C113 * C412;
    const double C1143 = C1111 * C623;
    const double C4107 = C3913 * C623;
    const double C8001 = C7969 * C623;
    const double C22706 = C22512 * C623;
    const double C26681 = C47963 * C623;
    const double C4273 = C3913 * C725;
    const double C5277 = C113 * C725;
    const double C22872 = C22512 * C725;
    const double C2556 = C113 * C976;
    const double C2960 = C2956 * C2536;
    const double C15661 = C2956 * C15331;
    const double C37124 = C2956 * C48050;
    const double C48305 = C48304 + C48302;
    const double C19090 = C19080 + C19081;
    const double C20450 = C20440 + C20441;
    const double C25422 = C25402 + C25403;
    const double C19092 = C19084 + C19085;
    const double C20451 = C20442 + C20443;
    const double C25424 = C25406 + C25407;
    const double C48801 = C48799 + C48794;
    const double C12795 = C12783 + C12784;
    const double C32681 = C32669 + C32670;
    const double C18053 = C18048 + C18049;
    const double C18052 = C18046 + C18047;
    const double C10817 = C7969 * C9916;
    const double C17356 = C1111 * C9916;
    const double C47414 = C47963 * C9916;
    const double C10811 = C7969 * C9912;
    const double C17350 = C1111 * C9912;
    const double C47408 = C47963 * C9912;
    const double C48815 = C48813 + C48808;
    const double C48427 = C48109 * C48424;
    const double C48432 = 3 * C48424;
    const double C48477 = ae * C48424;
    const double C48476 = C48108 * C48424;
    const double C10332 =
        (2 * (ae * C48292 + C48108 * C48364) + ae * (C48292 + C48424 * C48334) +
         C48108 * (C48364 + ae * C48108 * C48424 +
                   C48108 * (ae * C48424 + C48108 * C48405))) /
        C47860;
    const double C10329 =
        (2 * C48108 * C48292 + C48108 * (C48292 + C48424 * C48334)) / C47858;
    const double C18291 = C49030 * C11238;
    const double C22397 = C49092 * C11238;
    const double C43385 = C49092 * C11238;
    const double C18289 = C49030 * C11234;
    const double C22401 = C49092 * C11234;
    const double C43389 = C49092 * C11234;
    const double C48834 = C48108 * C48832;
    const double C18528 = C113 * C18033;
    const double C298 = C49030 * C290;
    const double C3940 = C49092 * C290;
    const double C22539 = C49092 * C290;
    const double C438 = C49030 * C430;
    const double C1138 = C49324 * C638;
    const double C4104 = C49092 * C638;
    const double C7996 = C49324 * C638;
    const double C22703 = C49092 * C638;
    const double C26676 = C26643 * C638;
    const double C4270 = C49092 * C740;
    const double C5276 = C49030 * C740;
    const double C22869 = C49092 * C740;
    const double C2555 = C49030 * C991;
    const double C2730 = C49030 * C2419;
    const double C6729 = C49092 * C2419;
    const double C24955 = C49092 * C2419;
    const double C48409 = C48397 + C48407;
    const double C48529 = C48526 + C48527;
    const double C48551 = C48539 + C48549;
    const double C48202 = C48192 + C48201;
    const double C9361 =
        (4 * (2 * C48268 + ae * C48269 + C48109 * C48380) +
         ae * (3 * C48269 + C48109 * C48381) +
         C48109 * (3 * C48380 + ae * C48381 +
                   C48109 * (2 * C48376 + ae * C48377 +
                             C48109 * (C48369 + ae * C48109 * C48370 +
                                       C48109 * (ae * C48370 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C9359 = (4 * (2 * C48264 + C48109 * C48269) +
                          C48109 * (3 * C48269 + C48109 * C48381)) /
                         C47858;
    const double C9449 = (C48108 * (3 * C48269 + C48109 * C48381) +
                          (3 * C48657 + C48109 * C48728) * ae) /
                         C47858;
    const double C10178 =
        (2 * C48264 + C48109 * C48269 +
         C48108 * (C48108 * C48381 + C48728 * ae) + C48108 * C48728 * ae) /
        C47858;
    const double C48410 = C48395 + C48408;
    const double C48234 = C48224 + C48233;
    const double C48322 = C48320 + C48321;
    const double C48317 = C48175 + C48316;
    const double C48444 = C48109 * C48443;
    const double C48479 = C48443 * C48334;
    const double C48530 = C48524 + C48528;
    const double C48461 = C48460 + C48457;
    const double C17950 =
        (3 * (C48268 + ae * C48483 + C48108 * C48487) +
         ae * (2 * C48483 + C48108 * C48488) +
         C48108 * (2 * C48487 + ae * C48488 +
                   C48108 * (C48376 + ae * C48108 * C48458 +
                             C48108 * (ae * C48458 +
                                       C48108 * (ae * C48370 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C17948 = (3 * (C48296 + C48301 * C48334) +
                           C48108 * (2 * C48483 + C48108 * C48488)) /
                          C47858;
    const double C18040 =
        (4 * (2 * C48343 + ae * C48344 + C48108 * C48515) +
         ae * (3 * C48344 + C48108 * C48516) +
         C48108 * (3 * C48515 + ae * C48516 +
                   C48108 * (2 * C48509 + ae * C48511 +
                             C48108 * (C48369 + ae * C48108 * C48452 +
                                       C48108 * (ae * C48452 +
                                                 C48108 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C18037 = (4 * (2 * C48339 + C48108 * C48344) +
                           C48108 * (3 * C48344 + C48108 * C48516)) /
                          C47858;
    const double C48552 = C48537 + C48550;
    const double C2571 = C2564 + C2548;
    const double C5141 = C5139 + C5129;
    const double C20175 = C7849 + C7848;
    const double C22395 = C20185 + C20184;
    const double C20174 = C7851 + C7850;
    const double C22394 = C20187 + C20186;
    const double C172 = C160 + C161;
    const double C121 = 5 * (3 * C48601 + C48116 * C48606) +
                        C48116 * (4 * C48606 + C48116 * C48611);
    const double C277 = C48109 * (4 * C48606 + C48116 * C48611);
    const double C417 = C48108 * (4 * C48606 + C48116 * C48611);
    const double C624 = 3 * C48601 + C48116 * C48606 + C48611 * C48259;
    const double C726 = C48108 * C48109 * C48611;
    const double C977 = 3 * C48601 + C48116 * C48606 + C48611 * C48334;
    const double C9596 = 5 * (3 * C48652 + C48109 * C48724) +
                         C48109 * (4 * C48724 + C48109 * C48737);
    const double C9682 = C48108 * (4 * C48724 + C48109 * C48737);
    const double C9913 = 3 * C48652 + C48109 * C48724 + C48737 * C48334;
    const double C18521 = 5 * (3 * C48705 + C48108 * C48785) +
                          C48108 * (4 * C48785 + C48108 * C48835);
    const double C49306 = C49268 / C47858;
    const double C49344 = C49310 / C47894;
    const double C49345 = C49312 + C49276;
    const double C3910 = C49276 - C48946 / C47862;
    const double C49309 = C49272 / C47858;
    const double C47934 = C47930 / C47858;
    const double C22544 = C22511 * C119;
    const double C22540 = C22511 * C131;
    const double C22534 = C22511 * C129;
    const double C22530 = C22511 * C118;
    const double C22526 = C22511 * C127;
    const double C22522 = C22511 * C117;
    const double C22518 = C22511 * C125;
    const double C22514 = C22511 * C116;
    const double C22724 = C22511 * C275;
    const double C22720 = C22511 * C284;
    const double C22716 = C22511 * C274;
    const double C22712 = C22511 * C282;
    const double C22708 = C22511 * C273;
    const double C22704 = C22511 * C280;
    const double C22890 = C22511 * C415;
    const double C22886 = C22511 * C424;
    const double C22882 = C22511 * C414;
    const double C22878 = C22511 * C422;
    const double C22874 = C22511 * C413;
    const double C22870 = C22511 * C420;
    const double C24960 = C22511 * C975;
    const double C24956 = C22511 * C983;
    const double C24950 = C22511 * C981;
    const double C24946 = C22511 * C974;
    const double C25178 = C22511 * C723;
    const double C25174 = C22511 * C730;
    const double C25170 = C22511 * C2399;
    const double C25166 = C22511 * C2409;
    const double C25408 = C22511 * C2911;
    const double C25404 = C22511 * C2916;
    const double C25394 = C22511 * C979;
    const double C25390 = C22511 * C973;
    const double C25386 = C22511 * C426;
    const double C25382 = C22511 * C416;
    const double C25972 = C22511 * C2405;
    const double C25968 = C22511 * C2397;
    const double C25964 = C22511 * C728;
    const double C25960 = C22511 * C722;
    const double C26526 = C22511 * C2912;
    const double C26522 = C22511 * C2918;
    const double C28235 = C22511 * C724;
    const double C28231 = C22511 * C732;
    const double C43016 = C22511 * C3368;
    const double C43012 = C22511 * C3364;
    const double C43390 = C22511 * C3790;
    const double C43386 = C22511 * C3794;
    const double C47945 = C47939 / C47858;
    const double C26698 = C26673 + C26674;
    const double C26695 = C26667 + C26668;
    const double C26692 = C26661 + C26662;
    const double C26689 = C26655 + C26656;
    const double C26891 = C26876 + C26877;
    const double C26888 = C26870 + C26871;
    const double C26882 = C26858 + C26859;
    const double C27073 = C27058 + C27059;
    const double C27070 = C27052 + C27053;
    const double C27064 = C27040 + C27041;
    const double C29857 = C29845 + C29846;
    const double C30090 = C30067 + C30068;
    const double C30087 = C30061 + C30062;
    const double C30652 = C30645 + C30646;
    const double C11395 = C11369 * C1319;
    const double C11387 = C11369 * C1323;
    const double C11385 = C11369 * C1325;
    const double C11377 = C11369 * C1320;
    const double C11557 = C11369 * C1826;
    const double C11549 = C11369 * C1831;
    const double C11711 = C11369 * C1984;
    const double C11703 = C11369 * C1989;
    const double C14443 = C11369 * C1987;
    const double C14435 = C11369 * C1983;
    const double C14825 = C11369 * C9446;
    const double C14817 = C11369 * C9444;
    const double C15201 = C11369 * C9912;
    const double C15193 = C11369 * C9916;
    const double C23752 = C23726 * C1319;
    const double C23744 = C23726 * C1323;
    const double C23742 = C23726 * C1325;
    const double C23734 = C23726 * C1320;
    const double C23914 = C23726 * C1826;
    const double C23906 = C23726 * C1831;
    const double C24068 = C23726 * C1984;
    const double C24060 = C23726 * C1989;
    const double C41522 = C23726 * C1987;
    const double C41514 = C23726 * C1983;
    const double C41904 = C23726 * C9446;
    const double C41896 = C23726 * C9444;
    const double C42280 = C23726 * C9912;
    const double C42272 = C23726 * C9916;
    const double C49366 = C49329 + C49361;
    const double C11361 = C49351 - (C49095 * C49084) / C47858;
    const double C3971 = C3967 + C3968;
    const double C6301 = C6297 + C6298;
    const double C1168 = C1158 + C1159;
    const double C1167 = C1155 + C1156;
    const double C32884 = C1568 + C1569;
    const double C32881 = C1569 + C1568;
    const double C32883 = C1565 + C1566;
    const double C32882 = C1566 + C1565;
    const double C17773 = C16923 + C16924;
    const double C17772 = C16920 + C16921;
    const double C23755 = C49352 * C629;
    const double C23747 = C49352 * C637;
    const double C23741 = C49352 * C636;
    const double C23733 = C49352 * C627;
    const double C23917 = C49352 * C1326;
    const double C23909 = C49352 * C1332;
    const double C24071 = C49352 * C1524;
    const double C24063 = C49352 * C1530;
    const double C41521 = C49352 * C1531;
    const double C41513 = C49352 * C1526;
    const double C41903 = C49352 * C1992;
    const double C9264 = C49352 / C47894 - C49093 / C49313;
    const double C11398 = C11362 * C629;
    const double C11390 = C11362 * C637;
    const double C11384 = C11362 * C636;
    const double C11376 = C11362 * C627;
    const double C11560 = C11362 * C1326;
    const double C11552 = C11362 * C1332;
    const double C11714 = C11362 * C1524;
    const double C11706 = C11362 * C1530;
    const double C14442 = C11362 * C1531;
    const double C14434 = C11362 * C1526;
    const double C14824 = C11362 * C1992;
    const double C49362 = C49331 + C49351;
    const double C8026 = C8016 + C8017;
    const double C8025 = C8013 + C8014;
    const double C12998 = C8394 + C8395;
    const double C12995 = C8395 + C8394;
    const double C12997 = C8391 + C8392;
    const double C12996 = C8392 + C8391;
    const double C11242 = C10380 + C10381;
    const double C11241 = C10377 + C10378;
    const double C48021 = C48017 / C47858;
    const double C31322 = C170 * C31304;
    const double C31315 = C168 * C31304;
    const double C31311 = C166 * C31304;
    const double C31307 = C164 * C31304;
    const double C31470 = C320 * C31304;
    const double C31466 = C318 * C31304;
    const double C31462 = C316 * C31304;
    const double C31612 = C460 * C31304;
    const double C31608 = C458 * C31304;
    const double C31604 = C456 * C31304;
    const double C35217 = C3963 * C31304;
    const double C48032 = C48026 / C47858;
    const double C20303 = C2956 * C20292;
    const double C20300 = C2958 * C20292;
    const double C34072 = C2956 * C34061;
    const double C34069 = C2958 * C34061;
    const double C49367 = C49335 + C49363;
    const double C20286 = C49354 - (C49137 * C49126) / C47858;
    const double C34073 = C2566 * C49355;
    const double C34068 = C2563 * C49355;
    const double C34349 = C2957 * C49355;
    const double C17858 = C49355 / C47894 - C49135 / C49313;
    const double C20304 = C2566 * C20287;
    const double C20299 = C2563 * C20287;
    const double C20586 = C2957 * C20287;
    const double C49364 = C49337 + C49354;
    const double C15352 = C15351 + C15341;
    const double C3970 = C3966 * C49047;
    const double C6303 = C6300 * C49134;
    const double C35220 = C6300 * C49134;
    const double C18526 = C113 * C18035;
    const double C186 = C180 + C181;
    const double C3969 = C3965 * C114;
    const double C5142 = C5140 + C5133;
    const double C6302 = C6299 * C5121;
    const double C35219 = C6299 * C31305;
    const double C2761 = C2753 * C49327;
    const double C15508 = C2753 * C49327;
    const double C20444 = C2753 * C20287;
    const double C34211 = C2753 * C49355;
    const double C36971 = C2753 * C36791;
    const double C19088 = C6756 + C6757;
    const double C19079 = C6757 + C6756;
    const double C2762 = C2754 * C2536;
    const double C15509 = C2754 * C15331;
    const double C36972 = C2754 * C48050;
    const double C19089 = C6758 + C6759;
    const double C19078 = C6759 + C6758;
    const double C10358 = C49324 * C2416;
    const double C10816 = C7962 * C2416;
    const double C15196 = C11362 * C2416;
    const double C16901 = C49324 * C2416;
    const double C17355 = C49347 * C2416;
    const double C19635 = C49092 * C2416;
    const double C25975 = C49092 * C2416;
    const double C31188 = C26643 * C2416;
    const double C42275 = C49352 * C2416;
    const double C47413 = C49095 * C2416;
    const double C14826 = C49334 * C9450;
    const double C41905 = C49334 * C9450;
    const double C10800 = C49324 * C1986;
    const double C14436 = C49334 * C1986;
    const double C14816 = C11362 * C1986;
    const double C17339 = C49324 * C1986;
    const double C30640 = C26643 * C1986;
    const double C41515 = C49334 * C1986;
    const double C41895 = C49352 * C1986;
    const double C10352 = C49324 * C2404;
    const double C10810 = C7962 * C2404;
    const double C15204 = C11362 * C2404;
    const double C16895 = C49324 * C2404;
    const double C17349 = C49347 * C2404;
    const double C19631 = C49092 * C2404;
    const double C25971 = C49092 * C2404;
    const double C31194 = C26643 * C2404;
    const double C42283 = C49352 * C2404;
    const double C47407 = C49095 * C2404;
    const double C1363 = C1342 + C1343;
    const double C8205 = C8184 + C8185;
    const double C26885 = C26864 + C26865;
    const double C1561 = C1540 + C1541;
    const double C6518 = C6504 + C6505;
    const double C8387 = C8366 + C8367;
    const double C27067 = C27046 + C27047;
    const double C28239 = C28233 + C28234;
    const double C2750 = C2731 + C2732;
    const double C6754 = C6732 + C6733;
    const double C24968 = C24958 + C24959;
    const double C2959 = C2955 * C49327;
    const double C15660 = C2955 * C49327;
    const double C20302 = C2955 * C49340;
    const double C34071 = C2955 * C49340;
    const double C37123 = C2955 * C36791;
    const double C173 = C162 + C163;
    const double C314 = C299 + C300;
    const double C3961 = C3943 + C3944;
    const double C22560 = C22542 + C22543;
    const double C454 = C439 + C440;
    const double C1164 = C1143 + C1144;
    const double C4129 = C4107 + C4108;
    const double C8022 = C8001 + C8002;
    const double C22728 = C22706 + C22707;
    const double C26702 = C26681 + C26682;
    const double C4295 = C4273 + C4274;
    const double C5290 = C5277 + C5278;
    const double C22894 = C22872 + C22873;
    const double C2568 = C2556 + C2557;
    const double C2418 =
        (C48237 + ae * C48264 + C48109 * C48268 + ae * C48108 * C48305 +
         C48108 *
             (ae * C48305 +
              C48108 * (C48136 + ae * C48109 * C48193 +
                        C48109 * (ae * C48193 + C48109 * C48116 * C48141)))) /
        C47860;
    const double C9451 =
        (ae * (3 * C48305 +
               C48109 * (2 * C48301 +
                         C48109 * (C48225 +
                                   C48109 * (C48109 * C48116 * C48228 +
                                             C48386 * ae) +
                                   C48109 * C48386 * ae) +
                         C48388 * ae) +
               (2 * C48300 + C48109 * C48388) * ae) +
         C48108 * (3 * C48380 + ae * C48381 +
                   C48109 * (2 * C48376 + ae * C48377 +
                             C48109 * (C48369 + ae * C48109 * C48370 +
                                       C48109 * (ae * C48370 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C1830 =
        (3 * (C48214 + C48109 * C48296 + C48655 * ae) +
         C48109 * (2 * C48296 + C48109 * C48305 + C48657 * ae) +
         (2 * C48655 + C48109 * C48657) * ae) /
        C47858;
    const double C1988 =
        (C48108 * (2 * C48296 + C48109 * C48305 + C48657 * ae)) / C47858;
    const double C2408 =
        (C48214 + C48109 * C48296 + C48655 * ae + C48305 * C48334) / C47858;
    const double C20452 = C20450 * C49340;
    const double C34209 = C20450 * C49340;
    const double C20453 = C20451 * C20292;
    const double C34210 = C20451 * C34061;
    const double C18038 =
        (4 * (2 * C48711 + C48108 * C48801 + C48712 * ae) +
         C48108 *
             (3 * C48801 +
              C48108 * (2 * C48793 +
                        C48108 * (C48193 + C48108 * (C48108 * C48370 + C48453) +
                                  C48108 * C48386 * ae) +
                        C48795 * ae) +
              C48800 * ae) +
         (3 * C48712 + C48108 * C48800) * ae) /
        C47858;
    const double C20584 = C18053 * C49340;
    const double C34347 = C18053 * C49340;
    const double C20585 = C18052 * C20292;
    const double C34348 = C18052 * C34061;
    const double C18281 =
        (4 * (2 * C48759 + C48108 * C48815 + C48760 * ae) +
         C48108 *
             (3 * C48815 +
              C48108 * (2 * C48807 +
                        C48108 * (C48392 +
                                  C48108 * (C48108 * C48109 * C48196 + C48440) +
                                  C48108 * C48436 * ae) +
                        C48809 * ae) +
              C48814 * ae) +
         (3 * C48760 + C48108 * C48814) * ae) /
        C47858;
    const double C48429 = C48426 + C48427;
    const double C48480 = C48477 + C48478;
    const double C11244 = C49324 * C10332;
    const double C17775 = C49324 * C10332;
    const double C22031 = C49092 * C10332;
    const double C43019 = C49092 * C10332;
    const double C47827 = C26643 * C10332;
    const double C11250 = C49324 * C10329;
    const double C17781 = C49324 * C10329;
    const double C22027 = C49092 * C10329;
    const double C43015 = C49092 * C10329;
    const double C47833 = C26643 * C10329;
    const double C18295 = C18290 + C18291;
    const double C22404 = C22396 + C22397;
    const double C43392 = C43384 + C43385;
    const double C18294 = C18288 + C18289;
    const double C22406 = C22400 + C22401;
    const double C43394 = C43388 + C43389;
    const double C48836 = C48818 + C48834;
    const double C18531 = C18528 + C18529;
    const double C313 = C297 + C298;
    const double C3959 = C3939 + C3940;
    const double C22558 = C22538 + C22539;
    const double C453 = C437 + C438;
    const double C1161 = C1137 + C1138;
    const double C4127 = C4103 + C4104;
    const double C8019 = C7995 + C7996;
    const double C22726 = C22702 + C22703;
    const double C26699 = C26675 + C26676;
    const double C4293 = C4269 + C4270;
    const double C5289 = C5275 + C5276;
    const double C22892 = C22868 + C22869;
    const double C2567 = C2554 + C2555;
    const double C2749 = C2729 + C2730;
    const double C6752 = C6728 + C6729;
    const double C24966 = C24954 + C24955;
    const double C639 =
        (3 * C48134 + C48116 * C48145 + ae * C48109 * C48202 +
         C48109 * (ae * C48202 +
                   C48109 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C741 =
        (ae * (C48109 * (3 * C48175 +
                         C48116 * (2 * C48116 * C48173 +
                                   C48116 * (C48173 + C48137 * C48138 * C48162 *
                                                          C48124))) +
               (3 * (C48207 + C48209 * C48124) +
                C48116 * (2 * C48116 * C48209 +
                          C48116 * (C48209 + C48130 * C48129 * C48124))) *
                   ae) +
         C48108 * (ae * C48202 +
                   C48109 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C135 = (5 * (3 * C48185 + C48116 * C48190) +
                         C48116 * (4 * C48190 + C48116 * C48202)) /
                        C47858;
    const double C289 = (C48109 * (4 * C48190 + C48116 * C48202)) / C47858;
    const double C429 = (C48108 * (4 * C48190 + C48116 * C48202) +
                         (4 * (2 * C48244 + C48116 * C48242) +
                          C48116 * (3 * C48242 + C48116 * C48254)) *
                             ae) /
                        C47858;
    const double C634 =
        (3 * C48185 + C48116 * C48190 + C48202 * C48259) / C47858;
    const double C736 =
        (C48108 * C48109 * C48202 + C48109 * C48611 * ae) / C47858;
    const double C987 =
        (3 * C48185 + C48116 * C48190 +
         C48108 * (C48108 * C48202 + C48611 * ae) + C48108 * C48611 * ae) /
        C47858;
    const double C9599 =
        (5 * (3 * C48364 + ae * C48365 + C48109 * C48409) +
         ae * (4 * C48365 + C48109 * C48410) +
         C48109 *
             (4 * C48409 + ae * C48410 +
              C48109 *
                  (3 * C48405 + ae * C48406 +
                   C48109 * (2 * C48399 + ae * C48401 +
                             C48109 * (C48141 + ae * C48109 * C48196 +
                                       C48109 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C9685 =
        (ae * (4 * (2 * C48288 + C48109 * C48424 + C48384 * ae) +
               C48109 * (3 * C48424 +
                         C48109 * (2 * C48416 +
                                   C48109 * (C48173 +
                                             C48109 * (C48109 * C48228 +
                                                       C48249 * ae) +
                                             C48109 * C48249 * ae) +
                                   C48418 * ae) +
                         C48423 * ae) +
               (3 * C48384 + C48109 * C48423) * ae) +
         C48108 *
             (4 * C48409 + ae * C48410 +
              C48109 *
                  (3 * C48405 + ae * C48406 +
                   C48109 * (2 * C48399 + ae * C48401 +
                             C48109 * (C48141 + ae * C48109 * C48196 +
                                       C48109 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C9598 = (5 * (3 * C48262 + C48109 * C48365) +
                          C48109 * (4 * C48365 + C48109 * C48410)) /
                         C47858;
    const double C9684 = (C48108 * (4 * C48365 + C48109 * C48410) +
                          (4 * C48724 + C48109 * C48737) * ae) /
                         C47858;
    const double C9917 =
        (3 * C48262 + C48109 * C48365 +
         C48108 * (C48108 * C48410 + C48737 * ae) + C48108 * C48737 * ae) /
        C47858;
    const double C992 =
        (3 * C48134 + C48116 * C48145 + ae * C48108 * C48234 +
         C48108 * (ae * C48234 +
                   C48108 * (3 * C48143 +
                             C48116 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C134 = (5 * (3 * C48217 + C48116 * C48222) +
                         C48116 * (4 * C48222 + C48116 * C48234)) /
                        C47858;
    const double C288 = (C48109 * (4 * C48222 + C48116 * C48234) +
                         (4 * (2 * C48244 + C48116 * C48242) +
                          C48116 * (3 * C48242 + C48116 * C48254)) *
                             ae) /
                        C47858;
    const double C428 = (C48108 * (4 * C48222 + C48116 * C48234)) / C47858;
    const double C633 =
        (3 * C48217 + C48116 * C48222 +
         C48109 * (C48109 * C48234 + C48611 * ae) + C48109 * C48611 * ae) /
        C47858;
    const double C735 = (C48108 * (C48109 * C48234 + C48611 * ae)) / C47858;
    const double C986 =
        (3 * C48217 + C48116 * C48222 + C48234 * C48334) / C47858;
    const double C2727 =
        (ae * C48190 + C48109 * C48145 + ae * C48108 * C48322 +
         C48108 * (ae * C48322 +
                   C48108 * (ae * C48200 +
                             C48109 * (2 * C48116 * C48141 +
                                       C48116 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1329 =
        (2 * (C48109 * C48222 + C48606 * ae) +
         C48109 * (C48222 + C48109 * C48322 + C48109 * C48254 * ae) +
         (C48606 + C48254 * C48259) * ae) /
        C47858;
    const double C1527 =
        (C48108 * (C48222 + C48109 * C48322 + C48109 * C48254 * ae)) / C47858;
    const double C2725 =
        (C48109 * C48222 + C48606 * ae + C48322 * C48334) / C47858;
    const double C48318 = C48317 + C48315;
    const double C48445 = C48433 + C48444;
    const double C48481 = C48424 + C48479;
    const double C18282 =
        (4 * (2 * C48473 + ae * C48474 + C48108 * C48529) +
         ae * (3 * C48474 + C48108 * C48530) +
         C48108 *
             (3 * C48529 + ae * C48530 +
              C48108 *
                  (2 * C48523 + ae * C48525 +
                   C48108 * (C48399 + ae * C48108 * C48439 +
                             C48108 * (ae * C48439 +
                                       C48108 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C18280 = (4 * (2 * C48469 + C48108 * C48474) +
                           C48108 * (3 * C48474 + C48108 * C48530)) /
                          C47858;
    const double C48462 = C48109 * C48461;
    const double C10333 =
        (2 * (ae * C48305 + C48108 * C48380) + ae * (C48305 + C48461 * C48334) +
         C48108 * (C48380 + ae * C48108 * C48461 +
                   C48108 * (ae * C48461 +
                             C48108 * (C48369 + ae * C48109 * C48370 +
                                       C48109 * (ae * C48370 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C10330 =
        (2 * C48108 * C48305 + C48108 * (C48305 + C48461 * C48334)) / C47858;
    const double C18524 =
        (5 * (3 * C48501 + ae * C48502 + C48108 * C48551) +
         ae * (4 * C48502 + C48108 * C48552) +
         C48108 *
             (4 * C48551 + ae * C48552 +
              C48108 *
                  (3 * C48547 + ae * C48548 +
                   C48108 * (2 * C48541 + ae * C48543 +
                             C48108 * (C48141 + ae * C48108 * C48228 +
                                       C48108 * (ae * C48228 +
                                                 C48108 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C18522 = (5 * (3 * C48337 + C48108 * C48502) +
                           C48108 * (4 * C48502 + C48108 * C48552)) /
                          C47858;
    const double C2576 = C2571 + C2549;
    const double C5143 = C5141 + C5130;
    const double C182 = C172 * C49047;
    const double C49365 = C49306 + C49357;
    const double C3909 = C49344 - (C48948 * C48931) / C47858;
    const double C106 = C49345 / C47894 - C48946 / C49313;
    const double C49358 = C49309 + C49344;
    const double C47938 = C47934 - C47915;
    const double C22561 = C22544 + C22545;
    const double C22559 = C22540 + C22541;
    const double C22556 = C22534 + C22535;
    const double C22554 = C22530 + C22531;
    const double C22552 = C22526 + C22527;
    const double C22550 = C22522 + C22523;
    const double C22548 = C22518 + C22519;
    const double C22546 = C22514 + C22515;
    const double C22737 = C22724 + C22725;
    const double C22735 = C22720 + C22721;
    const double C22733 = C22716 + C22717;
    const double C22731 = C22712 + C22713;
    const double C22729 = C22708 + C22709;
    const double C22727 = C22704 + C22705;
    const double C22903 = C22890 + C22891;
    const double C22901 = C22886 + C22887;
    const double C22899 = C22882 + C22883;
    const double C22897 = C22878 + C22879;
    const double C22895 = C22874 + C22875;
    const double C22893 = C22870 + C22871;
    const double C24969 = C24960 + C24961;
    const double C24967 = C24956 + C24957;
    const double C24964 = C24950 + C24951;
    const double C24962 = C24946 + C24947;
    const double C25187 = C25178 + C25179;
    const double C25185 = C25174 + C25175;
    const double C25183 = C25170 + C25171;
    const double C25181 = C25166 + C25167;
    const double C25425 = C25408 + C25409;
    const double C25423 = C25404 + C25405;
    const double C25420 = C25394 + C25395;
    const double C25418 = C25390 + C25391;
    const double C25416 = C25386 + C25387;
    const double C25414 = C25382 + C25383;
    const double C25982 = C25972 + C25973;
    const double C25980 = C25968 + C25969;
    const double C25978 = C25964 + C25965;
    const double C25976 = C25960 + C25961;
    const double C26531 = C26526 + C26527;
    const double C26529 = C26522 + C26523;
    const double C28240 = C28235 + C28236;
    const double C28238 = C28231 + C28232;
    const double C43022 = C43016 + C43017;
    const double C43020 = C43012 + C43013;
    const double C43395 = C43390 + C43391;
    const double C43393 = C43386 + C43387;
    const double C11415 = C11395 + C11396;
    const double C11411 = C11387 + C11388;
    const double C11410 = C11385 + C11386;
    const double C11406 = C11377 + C11378;
    const double C11565 = C11549 + C11550;
    const double C11719 = C11703 + C11704;
    const double C14452 = C14443 + C14444;
    const double C23772 = C23752 + C23753;
    const double C23768 = C23744 + C23745;
    const double C23767 = C23742 + C23743;
    const double C23763 = C23734 + C23735;
    const double C23922 = C23906 + C23907;
    const double C24076 = C24060 + C24061;
    const double C41531 = C41522 + C41523;
    const double C23759 = C49366 * C126;
    const double C23751 = C49366 * C138;
    const double C23737 = C49366 * C137;
    const double C23729 = C49366 * C124;
    const double C23921 = C49366 * C285;
    const double C23913 = C49366 * C293;
    const double C24075 = C49366 * C425;
    const double C24067 = C49366 * C433;
    const double C41517 = C49366 * C434;
    const double C41509 = C49366 * C427;
    const double C41899 = C49366 * C737;
    const double C41891 = C49366 * C727;
    const double C42287 = C49366 * C978;
    const double C42279 = C49366 * C988;
    const double C9261 =
        (C49359 + 2 * C49088) / C47894 - (C49366 * C49084) / C47858;
    const double C11400 = C11361 * C283;
    const double C11392 = C11361 * C292;
    const double C11382 = C11361 * C293;
    const double C11374 = C11361 * C285;
    const double C11562 = C11361 * C627;
    const double C11554 = C11361 * C636;
    const double C11716 = C11361 * C729;
    const double C11708 = C11361 * C738;
    const double C14440 = C11361 * C737;
    const double C14432 = C11361 * C727;
    const double C14822 = C11361 * C1531;
    const double C14814 = C11361 * C1526;
    const double C15206 = C11361 * C2403;
    const double C15198 = C11361 * C2415;
    const double C1170 = C1168 + C1160;
    const double C1169 = C1167 + C1157;
    const double C32888 = C1567 + C32884;
    const double C32885 = C32881 + C1567;
    const double C32887 = C1564 + C32883;
    const double C32886 = C32882 + C1564;
    const double C23757 = C49362 * C283;
    const double C23749 = C49362 * C292;
    const double C23739 = C49362 * C293;
    const double C23731 = C49362 * C285;
    const double C23919 = C49362 * C627;
    const double C23911 = C49362 * C636;
    const double C24073 = C49362 * C729;
    const double C24065 = C49362 * C738;
    const double C41519 = C49362 * C737;
    const double C41511 = C49362 * C727;
    const double C41901 = C49362 * C1531;
    const double C41893 = C49362 * C1526;
    const double C42285 = C49362 * C2403;
    const double C42277 = C49362 * C2415;
    const double C9262 =
        (C49347 + 2 * C49095 + C49366) / C47894 - (C49362 * C49084) / C47858;
    const double C9263 = (C49324 + C49092 / C47858 + C49362) / C47894 -
                         (C49352 * C49084) / C47858;
    const double C8028 = C8026 + C8018;
    const double C8027 = C8025 + C8015;
    const double C13002 = C8393 + C12998;
    const double C12999 = C12995 + C8393;
    const double C13001 = C8390 + C12997;
    const double C13000 = C12996 + C8390;
    const double C48025 = C48021 - C48002;
    const double C31324 = C31315 + C31316;
    const double C31323 = C31311 + C31312;
    const double C35221 = C35217 + C35218;
    const double C34077 = C167 * C49367;
    const double C34064 = C165 * C49367;
    const double C34215 = C319 * C49367;
    const double C34353 = C459 * C49367;
    const double C17855 =
        (C49360 + 2 * C49130) / C47894 - (C49367 * C49126) / C47858;
    const double C20306 = C457 * C20286;
    const double C20297 = C459 * C20286;
    const double C20446 = C2755 * C20286;
    const double C20588 = C2563 * C20286;
    const double C34075 = C457 * C49364;
    const double C34066 = C459 * C49364;
    const double C34213 = C2755 * C49364;
    const double C34351 = C2563 * C49364;
    const double C17856 =
        (C49349 + 2 * C49137 + C49367) / C47894 - (C49364 * C49126) / C47858;
    const double C17857 = (C49327 + C49134 / C47858 + C49364) / C47894 -
                          (C49355 * C49126) / C47858;
    const double C15353 = C15352 + C15342;
    const double C18530 = C18526 + C18527;
    const double C3972 = C3969 + C3970;
    const double C5144 = C5142 + C5134;
    const double C6304 = C6301 + C6302;
    const double C10382 = C10357 + C10358;
    const double C10829 = C10815 + C10816;
    const double C16925 = C16900 + C16901;
    const double C17368 = C17354 + C17355;
    const double C19639 = C19634 + C19635;
    const double C25983 = C25974 + C25975;
    const double C31199 = C31187 + C31188;
    const double C14834 = C14825 + C14826;
    const double C41913 = C41904 + C41905;
    const double C10821 = C10799 + C10800;
    const double C14448 = C14435 + C14436;
    const double C17360 = C17338 + C17339;
    const double C30649 = C30639 + C30640;
    const double C41527 = C41514 + C41515;
    const double C10379 = C10351 + C10352;
    const double C10826 = C10809 + C10810;
    const double C16922 = C16894 + C16895;
    const double C17365 = C17348 + C17349;
    const double C19637 = C19630 + C19631;
    const double C25981 = C25970 + C25971;
    const double C31202 = C31193 + C31194;
    const double C2758 = C2750 * C2536;
    const double C15503 = C2750 * C15331;
    const double C36966 = C2750 * C48050;
    const double C183 = C173 * C114;
    const double C322 = C314 * C114;
    const double C462 = C454 * C114;
    const double C5136 = C454 * C5121;
    const double C31320 = C454 * C31305;
    const double C5292 = C5290 * C5121;
    const double C31460 = C5290 * C31305;
    const double C2575 = C2568 * C2536;
    const double C5424 = C2568 * C5121;
    const double C15346 = C2568 * C15331;
    const double C31602 = C2568 * C31305;
    const double C36809 = C2568 * C48050;
    const double C10370 = C49324 * C2418;
    const double C16913 = C49324 * C2418;
    const double C18873 = C49092 * C2418;
    const double C25165 = C49092 * C2418;
    const double C30072 = C26643 * C2418;
    const double C11558 = C49334 * C1830;
    const double C23915 = C49334 * C1830;
    const double C11712 = C49334 * C1988;
    const double C12790 = C49324 * C1988;
    const double C24069 = C49334 * C1988;
    const double C29852 = C26643 * C1988;
    const double C32676 = C49324 * C1988;
    const double C10364 = C49324 * C2408;
    const double C16907 = C49324 * C2408;
    const double C18877 = C49092 * C2408;
    const double C25169 = C49092 * C2408;
    const double C30078 = C26643 * C2408;
    const double C48430 = C48429 + C48428;
    const double C11257 = C11243 + C11244;
    const double C17788 = C17774 + C17775;
    const double C22035 = C22030 + C22031;
    const double C43023 = C43018 + C43019;
    const double C47840 = C47826 + C47827;
    const double C11260 = C11249 + C11250;
    const double C17791 = C17780 + C17781;
    const double C22033 = C22026 + C22027;
    const double C43021 = C43014 + C43015;
    const double C47843 = C47832 + C47833;
    const double C48837 = C48836 + C48821;
    const double C321 = C313 * C49047;
    const double C461 = C453 * C49047;
    const double C5135 = C453 * C49134;
    const double C31319 = C453 * C49134;
    const double C5291 = C5289 * C49134;
    const double C31459 = C5289 * C49134;
    const double C2574 = C2567 * C49327;
    const double C5423 = C2567 * C49134;
    const double C15345 = C2567 * C49327;
    const double C31601 = C2567 * C49134;
    const double C36808 = C2567 * C36791;
    const double C2757 = C2749 * C49327;
    const double C15502 = C2749 * C49327;
    const double C36965 = C2749 * C36791;
    const double C2420 =
        (C48134 + ae * C48271 + C48109 * C48275 + ae * C48108 * C48318 +
         C48108 * (ae * C48318 +
                   C48108 * (C48143 + ae * C48109 * C48198 +
                             C48109 * (ae * C48198 +
                                       C48109 * (C48141 + std::pow(C48113, 8) *
                                                              bs[8] * C48114 *
                                                              C48124))))) /
        C47860;
    const double C1832 =
        (3 * (C48217 + C48109 * C48309 + C48660 * ae) +
         C48109 * (2 * C48309 + C48109 * C48318 + C48662 * ae) +
         (2 * C48660 + C48109 * C48662) * ae) /
        C47858;
    const double C1990 =
        (C48108 * (2 * C48309 + C48109 * C48318 + C48662 * ae)) / C47858;
    const double C2412 =
        (C48217 + C48109 * C48309 + C48660 * ae + C48318 * C48334) / C47858;
    const double C48446 = C48445 + C48437;
    const double C11239 =
        (3 * (C48364 + ae * C48476 + C48108 * C48480) +
         ae * (2 * C48476 + C48108 * C48481) +
         C48108 *
             (2 * C48480 + ae * C48481 +
              C48108 *
                  (C48405 + ae * C48108 * C48443 +
                   C48108 * (ae * C48443 +
                             C48108 * (C48141 + ae * C48109 * C48196 +
                                       C48109 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C11235 = (3 * (C48292 + C48424 * C48334) +
                           C48108 * (2 * C48476 + C48108 * C48481)) /
                          C47858;
    const double C48463 = C48451 + C48462;
    const double C2577 = C2576 + C2572;
    const double C103 =
        (C49356 + 2 * C48940) / C47894 - (C49365 * C48931) / C47858;
    const double C104 =
        (C49343 + 2 * C48948 + C49365) / C47894 - (C49358 * C48931) / C47858;
    const double C105 = (C49311 + C48945 / C47858 + C49358) / C47894 -
                        (C49345 * C48931) / C47858;
    const double C47944 = C47938 / C47894;
    const double C47943 = C47856 * C47938;
    const double C22565 = C22556 + C22557;
    const double C22564 = C22554 + C22555;
    const double C22563 = C22552 + C22553;
    const double C22562 = C22550 + C22551;
    const double C25413 = C22902 + C22903;
    const double C25398 = C22903 + C22902;
    const double C25412 = C22900 + C22901;
    const double C25399 = C22901 + C22900;
    const double C28028 = C22899 + C22898;
    const double C28436 = C22898 + C22899;
    const double C28029 = C22897 + C22896;
    const double C28435 = C22896 + C22897;
    const double C25410 = C24965 + C24964;
    const double C25401 = C24964 + C24965;
    const double C25411 = C24963 + C24962;
    const double C25400 = C24962 + C24963;
    const double C26519 = C25420 + C25421;
    const double C26518 = C25418 + C25419;
    const double C43382 = C26531 + C26530;
    const double C43383 = C26529 + C26528;
    const double C1172 = C1170 * C49047;
    const double C1171 = C1169 * C114;
    const double C8030 = C8028 * C49047;
    const double C8029 = C8027 * C114;
    const double C48031 = C48025 / C47894;
    const double C48030 = C47875 * C48025;
    const double C31326 = C31324 + C31317;
    const double C31325 = C31323 + C31313;
    const double C35222 = C35221 + C35219;
    const double C15354 = C15353 + C15343;
    const double C6305 = C6304 + C6303;
    const double C11256 = C11242 + C10382;
    const double C17787 = C17773 + C16925;
    const double C11255 = C11241 + C10379;
    const double C17786 = C17772 + C16922;
    const double C10388 = C10369 + C10370;
    const double C16931 = C16912 + C16913;
    const double C18880 = C18872 + C18873;
    const double C25180 = C25164 + C25165;
    const double C30093 = C30071 + C30072;
    const double C11569 = C11557 + C11558;
    const double C23926 = C23914 + C23915;
    const double C11723 = C11711 + C11712;
    const double C12798 = C12789 + C12790;
    const double C24080 = C24068 + C24069;
    const double C29860 = C29851 + C29852;
    const double C32684 = C32675 + C32676;
    const double C10385 = C10363 + C10364;
    const double C16928 = C16906 + C16907;
    const double C18882 = C18876 + C18877;
    const double C25182 = C25168 + C25169;
    const double C30096 = C30077 + C30078;
    const double C9918 =
        (2 * C48260 + ae * C48262 + C48109 * C48364 + ae * C48108 * C48430 +
         C48108 * (ae * C48430 + C48108 * C48409)) /
        C47860;
    const double C9357 =
        (4 * (2 * C48283 + C48109 * C48292 + C48652 * ae) +
         C48109 * (3 * C48292 + C48109 * C48430 + C48724 * ae) +
         (3 * C48652 + C48109 * C48724) * ae) /
        C47858;
    const double C9447 =
        (C48108 * (3 * C48292 + C48109 * C48430 + C48724 * ae)) / C47858;
    const double C9914 =
        (2 * C48283 + C48109 * C48292 + C48652 * ae + C48430 * C48334) / C47858;
    const double C18523 =
        (5 * (3 * C48786 + C48108 * C48837 + C48785 * ae) +
         C48108 *
             (4 * C48837 +
              C48108 *
                  (3 * C48832 +
                   C48108 *
                       (2 * C48824 +
                        C48108 * (C48158 + C48108 * (C48108 * C48196 + C48435) +
                                  C48108 * C48249 * ae) +
                        C48826 * ae) +
                   C48831 * ae) +
              C48835 * ae) +
         (4 * C48785 + C48108 * C48835) * ae) /
        C47858;
    const double C48447 = C48109 * C48446;
    const double C10793 =
        (2 * (ae * C48430 + C48108 * C48409) + ae * (C48430 + C48446 * C48334) +
         C48108 *
             (C48409 + ae * C48108 * C48446 +
              C48108 *
                  (ae * C48446 +
                   C48108 * (2 * C48399 + ae * C48401 +
                             C48109 * (C48141 + ae * C48109 * C48196 +
                                       C48109 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C10791 =
        (2 * C48108 * C48430 + C48108 * (C48430 + C48446 * C48334)) / C47858;
    const double C48464 = C48463 + C48455;
    const double C2578 = C2577 + C2573;
    const double C47949 = C47944 - C47945;
    const double C47948 = C47943 + C49291;
    const double C22569 = C22565 * C49047;
    const double C22568 = C22564 * C114;
    const double C22567 = C22563 * C49047;
    const double C28027 = C22563 * C49292;
    const double C39688 = C22563 * C31302;
    const double C22566 = C22562 * C114;
    const double C28026 = C22562 * C5120;
    const double C39687 = C22562 * C31304;
    const double C28031 = C28028 * C5121;
    const double C39689 = C28028 * C31305;
    const double C28032 = C28029 * C49134;
    const double C39690 = C28029 * C49134;
    const double C1173 = C1171 + C1172;
    const double C8031 = C8029 + C8030;
    const double C48036 = C48031 - C48032;
    const double C48035 = C48030 + C49292;
    const double C31328 = C31326 + C31318;
    const double C31327 = C31325 + C31314;
    const double C35223 = C35222 + C35220;
    const double C15355 = C15354 + C15344;
    const double C10818 = C49324 * C9918;
    const double C15194 = C49334 * C9918;
    const double C17357 = C49324 * C9918;
    const double C42273 = C49334 * C9918;
    const double C47415 = C26643 * C9918;
    const double C14818 = C49334 * C9447;
    const double C41897 = C49334 * C9447;
    const double C10812 = C49324 * C9914;
    const double C15202 = C49334 * C9914;
    const double C17351 = C49324 * C9914;
    const double C42281 = C49334 * C9914;
    const double C47409 = C26643 * C9914;
    const double C48448 = C48432 + C48447;
    const double C10179 =
        (2 * C48268 + ae * C48269 + C48109 * C48380 + ae * C48108 * C48464 +
         C48108 * (ae * C48464 +
                   C48108 * (2 * C48376 + ae * C48377 +
                             C48109 * (C48369 + ae * C48109 * C48370 +
                                       C48109 * (ae * C48370 +
                                                 C48109 * C48116 *
                                                     std::pow(C48113, 8) *
                                                     bs[8] * C48114))))) /
        C47860;
    const double C9358 =
        (4 * (2 * C48296 + C48109 * C48305 + C48657 * ae) +
         C48109 * (3 * C48305 + C48109 * C48464 + C48728 * ae) +
         (3 * C48657 + C48109 * C48728) * ae) /
        C47858;
    const double C9448 =
        (C48108 * (3 * C48305 + C48109 * C48464 + C48728 * ae)) / C47858;
    const double C10177 =
        (2 * C48296 + C48109 * C48305 + C48657 * ae + C48464 * C48334) / C47858;
    const double C26683 = C47949 * C273;
    const double C26677 = C47949 * C280;
    const double C26671 = C47949 * C282;
    const double C26665 = C47949 * C274;
    const double C26659 = C47949 * C284;
    const double C26653 = C47949 * C275;
    const double C26878 = C47949 * C621;
    const double C26872 = C47949 * C628;
    const double C26866 = C47949 * C622;
    const double C26860 = C47949 * C630;
    const double C27060 = C47949 * C723;
    const double C27054 = C47949 * C730;
    const double C27048 = C47949 * C724;
    const double C27042 = C47949 * C732;
    const double C29853 = C47949 * C1518;
    const double C29847 = C47949 * C1523;
    const double C30079 = C47949 * C2399;
    const double C30073 = C47949 * C2409;
    const double C30065 = C47949 * C728;
    const double C30059 = C47949 * C722;
    const double C30643 = C47949 * C1525;
    const double C30637 = C47949 * C1519;
    const double C31195 = C47949 * C2397;
    const double C31189 = C47949 * C2405;
    const double C47412 = C47949 * C2406;
    const double C47406 = C47949 * C2398;
    const double C47834 = C47949 * C3364;
    const double C47828 = C47949 * C3368;
    const double C9270 =
        (C47949 / C47894 + ((C47856 * C47963 + C26643) * ae) / C47858) /
            C47894 -
        ((C47856 * (C47963 / C47894 + (0 * ae) / C47858) + C49334) * be) /
            C47858;
    const double C11368 =
        C47949 / C47894 - ((C47856 * C47963 + C26643) * be) / C47858;
    const double C23725 =
        C47949 / C47894 + ((C47856 * C47963 + C26643) * ae) / C47858;
    const double C47952 = C47948 * be;
    const double C22571 = C22568 + C22569;
    const double C22570 = C22566 + C22567;
    const double C28030 = C28026 + C28027;
    const double C39691 = C39687 + C39688;
    const double C36811 = C456 * C48036;
    const double C36804 = C458 * C48036;
    const double C36798 = C460 * C48036;
    const double C36974 = C2756 * C48036;
    const double C36968 = C2752 * C48036;
    const double C37132 = C2562 * C48036;
    const double C37126 = C2565 * C48036;
    const double C17863 =
        (C48036 / C47894 + ((C47875 * C48050 + C36791) * ae) / C47858) /
            C47894 -
        ((C47875 * (C48050 / C47894 + (0 * ae) / C47858) + C49340) * be) /
            C47858;
    const double C20291 =
        C48036 / C47894 - ((C47875 * C48050 + C36791) * be) / C47858;
    const double C34060 =
        C48036 / C47894 + ((C47875 * C48050 + C36791) * ae) / C47858;
    const double C48039 = C48035 * be;
    const double C10830 = C10817 + C10818;
    const double C15209 = C15193 + C15194;
    const double C17369 = C17356 + C17357;
    const double C42288 = C42272 + C42273;
    const double C47421 = C47414 + C47415;
    const double C14830 = C14817 + C14818;
    const double C41909 = C41896 + C41897;
    const double C10827 = C10811 + C10812;
    const double C15213 = C15201 + C15202;
    const double C17366 = C17350 + C17351;
    const double C42292 = C42280 + C42281;
    const double C47418 = C47408 + C47409;
    const double C48449 = C48448 + C48438;
    const double C26703 = C26683 + C26684;
    const double C26700 = C26677 + C26678;
    const double C26697 = C26671 + C26672;
    const double C26694 = C26665 + C26666;
    const double C26691 = C26659 + C26660;
    const double C26688 = C26653 + C26654;
    const double C26892 = C26878 + C26879;
    const double C26889 = C26872 + C26873;
    const double C26886 = C26866 + C26867;
    const double C26883 = C26860 + C26861;
    const double C27074 = C27060 + C27061;
    const double C27071 = C27054 + C27055;
    const double C27068 = C27048 + C27049;
    const double C27065 = C27042 + C27043;
    const double C29861 = C29853 + C29854;
    const double C29858 = C29847 + C29848;
    const double C30097 = C30079 + C30080;
    const double C30094 = C30073 + C30074;
    const double C30089 = C30065 + C30066;
    const double C30086 = C30059 + C30060;
    const double C30651 = C30643 + C30644;
    const double C30648 = C30637 + C30638;
    const double C31203 = C31195 + C31196;
    const double C31200 = C31189 + C31190;
    const double C47420 = C47412 + C47413;
    const double C47417 = C47406 + C47407;
    const double C47844 = C47834 + C47835;
    const double C47841 = C47828 + C47829;
    const double C11397 = C11368 * C622;
    const double C11389 = C11368 * C630;
    const double C11383 = C11368 * C628;
    const double C11375 = C11368 * C621;
    const double C11559 = C11368 * C1320;
    const double C11551 = C11368 * C1325;
    const double C11713 = C11368 * C1518;
    const double C11705 = C11368 * C1523;
    const double C14441 = C11368 * C1525;
    const double C14433 = C11368 * C1519;
    const double C14823 = C11368 * C1987;
    const double C14815 = C11368 * C1983;
    const double C15203 = C11368 * C2398;
    const double C15195 = C11368 * C2406;
    const double C23754 = C23725 * C622;
    const double C23746 = C23725 * C630;
    const double C23740 = C23725 * C628;
    const double C23732 = C23725 * C621;
    const double C23916 = C23725 * C1320;
    const double C23908 = C23725 * C1325;
    const double C24070 = C23725 * C1518;
    const double C24062 = C23725 * C1523;
    const double C41520 = C23725 * C1525;
    const double C41512 = C23725 * C1519;
    const double C41902 = C23725 * C1987;
    const double C41894 = C23725 * C1983;
    const double C42282 = C23725 * C2398;
    const double C42274 = C23725 * C2406;
    const double C47954 = C47952 / C47858;
    const double C28033 = C28030 + C28031;
    const double C39692 = C39691 + C39689;
    const double C20305 = C2565 * C20291;
    const double C20298 = C2562 * C20291;
    const double C20445 = C2754 * C20291;
    const double C20587 = C2958 * C20291;
    const double C34074 = C2565 * C34060;
    const double C34067 = C2562 * C34060;
    const double C34212 = C2754 * C34060;
    const double C34350 = C2958 * C34060;
    const double C48041 = C48039 / C47858;
    const double C9919 =
        (3 * C48364 + ae * C48365 + C48109 * C48409 + ae * C48108 * C48449 +
         C48108 *
             (ae * C48449 +
              C48108 *
                  (3 * C48405 + ae * C48406 +
                   C48109 * (2 * C48399 + ae * C48401 +
                             C48109 * (C48141 + ae * C48109 * C48196 +
                                       C48109 * (ae * C48196 +
                                                 C48109 * std::pow(C48113, 8) *
                                                     bs[8] * C48114)))))) /
        C47860;
    const double C9597 =
        (5 * (3 * C48292 + C48109 * C48430 + C48724 * ae) +
         C48109 * (4 * C48430 + C48109 * C48449 + C48737 * ae) +
         (4 * C48724 + C48109 * C48737) * ae) /
        C47858;
    const double C9683 =
        (C48108 * (4 * C48430 + C48109 * C48449 + C48737 * ae)) / C47858;
    const double C9915 =
        (3 * C48292 + C48109 * C48430 + C48724 * ae + C48449 * C48334) / C47858;
    const double C11416 = C11397 + C11398;
    const double C11412 = C11389 + C11390;
    const double C11409 = C11383 + C11384;
    const double C11405 = C11375 + C11376;
    const double C11570 = C11559 + C11560;
    const double C11566 = C11551 + C11552;
    const double C11724 = C11713 + C11714;
    const double C11720 = C11705 + C11706;
    const double C14451 = C14441 + C14442;
    const double C14447 = C14433 + C14434;
    const double C14833 = C14823 + C14824;
    const double C14829 = C14815 + C14816;
    const double C15214 = C15203 + C15204;
    const double C15210 = C15195 + C15196;
    const double C23773 = C23754 + C23755;
    const double C23769 = C23746 + C23747;
    const double C23766 = C23740 + C23741;
    const double C23762 = C23732 + C23733;
    const double C23927 = C23916 + C23917;
    const double C23923 = C23908 + C23909;
    const double C24081 = C24070 + C24071;
    const double C24077 = C24062 + C24063;
    const double C41530 = C41520 + C41521;
    const double C41526 = C41512 + C41513;
    const double C41912 = C41902 + C41903;
    const double C41908 = C41894 + C41895;
    const double C42293 = C42282 + C42283;
    const double C42289 = C42274 + C42275;
    const double C47956 = C47942 - C47954;
    const double C28034 = C28033 + C28032;
    const double C39693 = C39692 + C39690;
    const double C48043 = C48029 - C48041;
    const double C47957 = C47956 + C47927;
    const double C48044 = C48043 + C48014;
    const double C26685 = C47957 * C118;
    const double C26679 = C47957 * C129;
    const double C26669 = C47957 * C127;
    const double C26663 = C47957 * C117;
    const double C26657 = C47957 * C125;
    const double C26651 = C47957 * C116;
    const double C26880 = C47957 * C275;
    const double C26874 = C47957 * C284;
    const double C26868 = C47957 * C274;
    const double C26862 = C47957 * C282;
    const double C27062 = C47957 * C415;
    const double C27056 = C47957 * C424;
    const double C27050 = C47957 * C414;
    const double C27044 = C47957 * C422;
    const double C29855 = C47957 * C723;
    const double C29849 = C47957 * C730;
    const double C30081 = C47957 * C974;
    const double C30075 = C47957 * C981;
    const double C30063 = C47957 * C426;
    const double C30057 = C47957 * C416;
    const double C30641 = C47957 * C728;
    const double C30635 = C47957 * C722;
    const double C31197 = C47957 * C973;
    const double C31191 = C47957 * C979;
    const double C47410 = C47957 * C2405;
    const double C47404 = C47957 * C2397;
    const double C47836 = C47957 * C2912;
    const double C47830 = C47957 * C2918;
    const double C9267 =
        (((((0 - (C47856 * C47910) / C47858) * ae) / C47858 -
           (0 * be) / C47862 + (2 * C47911) / C47858) /
              C47894 -
          ((C47856 * C47946 + 0) * be) / C47858 + C47920 - C47933) /
             C47894 +
         ((C47856 * C47955 + 0) * ae) / C47858) /
            C47894 -
        ((C47856 * (C47955 / C47894 +
                    ((C47856 * C47957 + C49088) * ae) / C47858 + C47949) +
          C49366) *
         be) /
            C47858 +
        C47957 / C47894 + ((C47856 * C47949 + C49095) * ae) / C47858 +
        2 * (C47927 / C47894 - (0 * be) / C47858);
    const double C9268 =
        (C47955 / C47894 + ((C47856 * C47957 + C49088) * ae) / C47858 +
         C47949) /
            C47894 -
        ((C47856 * (C47957 / C47894 +
                    ((C47856 * C47949 + C49095) * ae) / C47858 + 2 * C47963) +
          C49362) *
         be) /
            C47858 +
        2 * (C47949 / C47894 + ((C47856 * C47963 + C26643) * ae) / C47858);
    const double C9269 =
        (C47957 / C47894 + ((C47856 * C47949 + C49095) * ae) / C47858 +
         2 * C47963) /
            C47894 -
        ((C47856 *
              (C47949 / C47894 + ((C47856 * C47963 + C26643) * ae) / C47858) +
          C49352) *
         be) /
            C47858 +
        3 * (C47963 / C47894 + (0 * ae) / C47858);
    const double C11366 =
        C47955 / C47894 - ((C47856 * C47957 + C49088) * be) / C47858 + C47949;
    const double C11367 = C47957 / C47894 -
                          ((C47856 * C47949 + C49095) * be) / C47858 +
                          2 * C47963;
    const double C23723 =
        C47955 / C47894 + ((C47856 * C47957 + C49088) * ae) / C47858 + C47949;
    const double C23724 = C47957 / C47894 +
                          ((C47856 * C47949 + C49095) * ae) / C47858 +
                          2 * C47963;
    const double C36813 = C168 * C48044;
    const double C36802 = C166 * C48044;
    const double C36796 = C164 * C48044;
    const double C36976 = C320 * C48044;
    const double C36970 = C318 * C48044;
    const double C37134 = C460 * C48044;
    const double C37128 = C458 * C48044;
    const double C17860 =
        (((((0 - (C47875 * C47997) / C47858) * ae) / C47858 -
           (0 * be) / C47862 + (2 * C47998) / C47858) /
              C47894 -
          ((C47875 * C48033 + 0) * be) / C47858 + C48007 - C48020) /
             C47894 +
         ((C47875 * C48042 + 0) * ae) / C47858) /
            C47894 -
        ((C47875 * (C48042 / C47894 +
                    ((C47875 * C48044 + C49130) * ae) / C47858 + C48036) +
          C49367) *
         be) /
            C47858 +
        C48044 / C47894 + ((C47875 * C48036 + C49137) * ae) / C47858 +
        2 * (C48014 / C47894 - (0 * be) / C47858);
    const double C17861 =
        (C48042 / C47894 + ((C47875 * C48044 + C49130) * ae) / C47858 +
         C48036) /
            C47894 -
        ((C47875 * (C48044 / C47894 +
                    ((C47875 * C48036 + C49137) * ae) / C47858 + 2 * C48050) +
          C49364) *
         be) /
            C47858 +
        2 * (C48036 / C47894 + ((C47875 * C48050 + C36791) * ae) / C47858);
    const double C17862 =
        (C48044 / C47894 + ((C47875 * C48036 + C49137) * ae) / C47858 +
         2 * C48050) /
            C47894 -
        ((C47875 *
              (C48036 / C47894 + ((C47875 * C48050 + C36791) * ae) / C47858) +
          C49355) *
         be) /
            C47858 +
        3 * (C48050 / C47894 + (0 * ae) / C47858);
    const double C20289 =
        C48042 / C47894 - ((C47875 * C48044 + C49130) * be) / C47858 + C48036;
    const double C20290 = C48044 / C47894 -
                          ((C47875 * C48036 + C49137) * be) / C47858 +
                          2 * C48050;
    const double C34058 =
        C48042 / C47894 + ((C47875 * C48044 + C49130) * ae) / C47858 + C48036;
    const double C34059 = C48044 / C47894 +
                          ((C47875 * C48036 + C49137) * ae) / C47858 +
                          2 * C48050;
    const double C26704 = C26685 + C26686;
    const double C26701 = C26679 + C26680;
    const double C26696 = C26669 + C26670;
    const double C26693 = C26663 + C26664;
    const double C26690 = C26657 + C26658;
    const double C26687 = C26651 + C26652;
    const double C26893 = C26880 + C26881;
    const double C26890 = C26874 + C26875;
    const double C26887 = C26868 + C26869;
    const double C26884 = C26862 + C26863;
    const double C27075 = C27062 + C27063;
    const double C27072 = C27056 + C27057;
    const double C27069 = C27050 + C27051;
    const double C27066 = C27044 + C27045;
    const double C29862 = C29855 + C29856;
    const double C29859 = C29849 + C29850;
    const double C30098 = C30081 + C30082;
    const double C30095 = C30075 + C30076;
    const double C30088 = C30063 + C30064;
    const double C30085 = C30057 + C30058;
    const double C30650 = C30641 + C30642;
    const double C30647 = C30635 + C30636;
    const double C31204 = C31197 + C31198;
    const double C31201 = C31191 + C31192;
    const double C47419 = C47410 + C47411;
    const double C47416 = C47404 + C47405;
    const double C47845 = C47836 + C47837;
    const double C47842 = C47830 + C47831;
    const double C11401 = C11366 * C117;
    const double C11393 = C11366 * C127;
    const double C11379 = C11366 * C125;
    const double C11371 = C11366 * C116;
    const double C11563 = C11366 * C275;
    const double C11555 = C11366 * C284;
    const double C11717 = C11366 * C415;
    const double C11709 = C11366 * C424;
    const double C14437 = C11366 * C426;
    const double C14429 = C11366 * C416;
    const double C14819 = C11366 * C728;
    const double C14811 = C11366 * C722;
    const double C15207 = C11366 * C973;
    const double C15199 = C11366 * C979;
    const double C11399 = C11367 * C274;
    const double C11391 = C11367 * C282;
    const double C11381 = C11367 * C284;
    const double C11373 = C11367 * C275;
    const double C11561 = C11367 * C621;
    const double C11553 = C11367 * C628;
    const double C11715 = C11367 * C723;
    const double C11707 = C11367 * C730;
    const double C14439 = C11367 * C728;
    const double C14431 = C11367 * C722;
    const double C14821 = C11367 * C1525;
    const double C14813 = C11367 * C1519;
    const double C15205 = C11367 * C2397;
    const double C15197 = C11367 * C2405;
    const double C23758 = C23723 * C117;
    const double C23750 = C23723 * C127;
    const double C23736 = C23723 * C125;
    const double C23728 = C23723 * C116;
    const double C23920 = C23723 * C275;
    const double C23912 = C23723 * C284;
    const double C24074 = C23723 * C415;
    const double C24066 = C23723 * C424;
    const double C41516 = C23723 * C426;
    const double C41508 = C23723 * C416;
    const double C41898 = C23723 * C728;
    const double C41890 = C23723 * C722;
    const double C42286 = C23723 * C973;
    const double C42278 = C23723 * C979;
    const double C23756 = C23724 * C274;
    const double C23748 = C23724 * C282;
    const double C23738 = C23724 * C284;
    const double C23730 = C23724 * C275;
    const double C23918 = C23724 * C621;
    const double C23910 = C23724 * C628;
    const double C24072 = C23724 * C723;
    const double C24064 = C23724 * C730;
    const double C41518 = C23724 * C728;
    const double C41510 = C23724 * C722;
    const double C41900 = C23724 * C1525;
    const double C41892 = C23724 * C1519;
    const double C42284 = C23724 * C2397;
    const double C42276 = C23724 * C2405;
    const double C36814 = C36802 + C36803;
    const double C20309 = C166 * C20289;
    const double C20294 = C164 * C20289;
    const double C20449 = C320 * C20289;
    const double C20591 = C460 * C20289;
    const double C20307 = C458 * C20290;
    const double C20296 = C460 * C20290;
    const double C20447 = C2756 * C20290;
    const double C20589 = C2562 * C20290;
    const double C34078 = C166 * C34058;
    const double C34063 = C164 * C34058;
    const double C34216 = C320 * C34058;
    const double C34354 = C460 * C34058;
    const double C34076 = C458 * C34059;
    const double C34065 = C460 * C34059;
    const double C34214 = C2756 * C34059;
    const double C34352 = C2562 * C34059;
    const double C26706 = C26696 + C26697;
    const double C26705 = C26693 + C26694;
    const double C30084 = C27074 + C27075;
    const double C30069 = C27075 + C27074;
    const double C30083 = C27071 + C27072;
    const double C30070 = C27072 + C27071;
    const double C47824 = C31204 + C31203;
    const double C47825 = C31201 + C31200;
    const double C11418 = C11401 + C11402;
    const double C11414 = C11393 + C11394;
    const double C11407 = C11379 + C11380;
    const double C11403 = C11371 + C11372;
    const double C11572 = C11563 + C11564;
    const double C11568 = C11555 + C11556;
    const double C11726 = C11717 + C11718;
    const double C11722 = C11709 + C11710;
    const double C14449 = C14437 + C14438;
    const double C14445 = C14429 + C14430;
    const double C14831 = C14819 + C14820;
    const double C14827 = C14811 + C14812;
    const double C15216 = C15207 + C15208;
    const double C15212 = C15199 + C15200;
    const double C11417 = C11399 + C11400;
    const double C11413 = C11391 + C11392;
    const double C11408 = C11381 + C11382;
    const double C11404 = C11373 + C11374;
    const double C11571 = C11561 + C11562;
    const double C11567 = C11553 + C11554;
    const double C11725 = C11715 + C11716;
    const double C11721 = C11707 + C11708;
    const double C14450 = C14439 + C14440;
    const double C14446 = C14431 + C14432;
    const double C14832 = C14821 + C14822;
    const double C14828 = C14813 + C14814;
    const double C15215 = C15205 + C15206;
    const double C15211 = C15197 + C15198;
    const double C23775 = C23758 + C23759;
    const double C23771 = C23750 + C23751;
    const double C23764 = C23736 + C23737;
    const double C23760 = C23728 + C23729;
    const double C23929 = C23920 + C23921;
    const double C23925 = C23912 + C23913;
    const double C24083 = C24074 + C24075;
    const double C24079 = C24066 + C24067;
    const double C41528 = C41516 + C41517;
    const double C41524 = C41508 + C41509;
    const double C41910 = C41898 + C41899;
    const double C41906 = C41890 + C41891;
    const double C42295 = C42286 + C42287;
    const double C42291 = C42278 + C42279;
    const double C23774 = C23756 + C23757;
    const double C23770 = C23748 + C23749;
    const double C23765 = C23738 + C23739;
    const double C23761 = C23730 + C23731;
    const double C23928 = C23918 + C23919;
    const double C23924 = C23910 + C23911;
    const double C24082 = C24072 + C24073;
    const double C24078 = C24064 + C24065;
    const double C41529 = C41518 + C41519;
    const double C41525 = C41510 + C41511;
    const double C41911 = C41900 + C41901;
    const double C41907 = C41892 + C41893;
    const double C42294 = C42284 + C42285;
    const double C42290 = C42276 + C42277;
    const double C36815 = C36814 + C36804;
    const double C26708 = C26706 + C26698;
    const double C26707 = C26705 + C26695;
    const double C30100 = C27073 + C30084;
    const double C30091 = C30069 + C27073;
    const double C30099 = C27070 + C30083;
    const double C30092 = C30070 + C27070;
    const double C47838 = C47824 + C31202;
    const double C47839 = C47825 + C31199;
    const double C36816 = C36815 + C36805;
    const double C26710 = C26708 * C49047;
    const double C26709 = C26707 * C114;
    const double C36817 = C36816 + C36806;
    const double C26711 = C26709 + C26710;
    const double C36818 = C36817 + C36807;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C114 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49047) *
                      C48940 +
                  ((C26687 + C26688 + C26689) * C114 +
                   (C26690 + C26691 + C26692) * C49047) *
                      C48948 +
                  C26711 * C26646) *
                     C49019 * C49002 * C110 -
                 (((C26699 + C26700 + C26701) * C49047 +
                   (C26702 + C26703 + C26704) * C114) *
                      C26646 +
                  ((C26698 + C26697 + C26696) * C49047 +
                   (C26695 + C26694 + C26693) * C114) *
                      C48948 +
                  ((C26692 + C26691 + C26690) * C49047 +
                   (C26689 + C26688 + C26687) * C114) *
                      C48940) *
                     C49019 * C49002 * C111 +
                 (C26711 * C48940 +
                  ((C26704 + C26703 + C26702) * C114 +
                   (C26701 + C26700 + C26699) * C49047) *
                      C48948 +
                  ((C47957 * C119 + C49088 * C130 + C47949 * C272 +
                    C49095 * C279 + C47963 * C624 + C26643 * C633) *
                       C114 +
                   (C47957 * C131 + C49088 * C140 + C47949 * C278 +
                    C49095 * C290 + C47963 * C634 + C26643 * C639) *
                       C49047) *
                      C26646) *
                     C49019 * C49002 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C49019 * C268 -
                  (((C26882 + C26883 + C26884) * C49047 +
                    (C26885 + C26886 + C26887) * C114) *
                       C26646 +
                   ((C26888 + C26889 + C26890) * C49047 +
                    (C26891 + C26892 + C26893) * C114) *
                       C48948 +
                   ((C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49047 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C114) *
                       C48940) *
                      C49019 * C49319) *
                     C270 +
                 ((((C26893 + C26892 + C26891) * C114 +
                    (C26890 + C26889 + C26888) * C49047) *
                       C48940 +
                   ((C26887 + C26886 + C26885) * C114 +
                    (C26884 + C26883 + C26882) * C49047) *
                       C48948 +
                   ((C47957 * C273 + C49088 * C281 + C47949 * C623 +
                     C49095 * C631 + C47963 * C1322 + C26643 * C1329) *
                        C114 +
                    (C47957 * C280 + C49088 * C291 + C47949 * C632 +
                     C49095 * C638 + C47963 * C1330 + C26643 * C1334) *
                        C49047) *
                       C26646) *
                      C49019 * C49319 -
                  (((C26699 + C26700 + C26701) * C49047 +
                    (C26702 + C26703 + C26704) * C114) *
                       C26646 +
                   ((C26698 + C26697 + C26696) * C49047 +
                    (C26695 + C26694 + C26693) * C114) *
                       C48948 +
                   ((C26692 + C26691 + C26690) * C49047 +
                    (C26689 + C26688 + C26687) * C114) *
                       C48940) *
                      C49019 * C268) *
                     C49317)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C410 -
                  (((C27064 + C27065 + C27066) * C49047 +
                    (C27067 + C27068 + C27069) * C114) *
                       C26646 +
                   ((C27070 + C27071 + C27072) * C49047 +
                    (C27073 + C27074 + C27075) * C114) *
                       C48948 +
                   ((C47963 * C1525 + C26643 * C1531 + C47949 * C728 +
                     C49095 * C737 + C47957 * C426 + C49088 * C434) *
                        C49047 +
                    (C47963 * C1519 + C26643 * C1526 + C47949 * C722 +
                     C49095 * C727 + C47957 * C416 + C49088 * C427) *
                        C114) *
                       C48940) *
                      C49321) *
                     C49002 * C270 +
                 ((((C27075 + C27074 + C27073) * C114 +
                    (C27072 + C27071 + C27070) * C49047) *
                       C48940 +
                   ((C27069 + C27068 + C27067) * C114 +
                    (C27066 + C27065 + C27064) * C49047) *
                       C48948 +
                   ((C47957 * C413 + C49088 * C421 + C47949 * C725 +
                     C49095 * C733 + C47963 * C1520 + C26643 * C1527) *
                        C114 +
                    (C47957 * C420 + C49088 * C431 + C47949 * C734 +
                     C49095 * C740 + C47963 * C1528 + C26643 * C1532) *
                        C49047) *
                       C26646) *
                      C49321 -
                  (((C26699 + C26700 + C26701) * C49047 +
                    (C26702 + C26703 + C26704) * C114) *
                       C26646 +
                   ((C26698 + C26697 + C26696) * C49047 +
                    (C26695 + C26694 + C26693) * C114) *
                       C48948 +
                   ((C26692 + C26691 + C26690) * C49047 +
                    (C26689 + C26688 + C26687) * C114) *
                       C48940) *
                      C410) *
                     C49002 * C49317)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C49019 * C550 -
                  (((C26882 + C26883 + C26884) * C49047 +
                    (C26885 + C26886 + C26887) * C114) *
                       C26646 +
                   ((C26888 + C26889 + C26890) * C49047 +
                    (C26891 + C26892 + C26893) * C114) *
                       C48948 +
                   ((C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49047 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C114) *
                       C48940) *
                      C49019 * C49319) *
                     C552 +
                 ((((C26893 + C26892 + C26891) * C114 +
                    (C26890 + C26889 + C26888) * C49047) *
                       C48940 +
                   ((C26887 + C26886 + C26885) * C114 +
                    (C26884 + C26883 + C26882) * C49047) *
                       C48948 +
                   ((C47957 * C273 + C49088 * C281 + C47949 * C623 +
                     C49095 * C631 + C47963 * C1322 + C26643 * C1329) *
                        C114 +
                    (C47957 * C280 + C49088 * C291 + C47949 * C632 +
                     C49095 * C638 + C47963 * C1330 + C26643 * C1334) *
                        C49047) *
                       C26646) *
                      C49019 * C49319 -
                  (((C26699 + C26700 + C26701) * C49047 +
                    (C26702 + C26703 + C26704) * C114) *
                       C26646 +
                   ((C26698 + C26697 + C26696) * C49047 +
                    (C26695 + C26694 + C26693) * C114) *
                       C48948 +
                   ((C26692 + C26691 + C26690) * C49047 +
                    (C26689 + C26688 + C26687) * C114) *
                       C48940) *
                      C49019 * C550) *
                     C49317)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C114 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49047) *
                      C48940 +
                  ((C26687 + C26688 + C26689) * C114 +
                   (C26690 + C26691 + C26692) * C49047) *
                      C48948 +
                  C26711 * C26646) *
                     C49019 * C616 -
                 (((C26882 + C26883 + C26884) * C49047 +
                   (C26885 + C26886 + C26887) * C114) *
                      C26646 +
                  ((C26888 + C26889 + C26890) * C49047 +
                   (C26891 + C26892 + C26893) * C114) *
                      C48948 +
                  ((C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                    C49095 * C635 + C47957 * C286 + C49088 * C294) *
                       C49047 +
                   (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                    C49095 * C625 + C47957 * C276 + C49088 * C287) *
                       C114) *
                      C48940) *
                     C49019 * C617 +
                 (((C47957 * C620 + C49088 * C625 + C47949 * C1321 +
                    C49095 * C1328 + C47963 * C1825 + C26643 * C1828) *
                       C114 +
                   (C47957 * C626 + C49088 * C635 + C47949 * C1327 +
                    C49095 * C1333 + C47963 * C1829 + C26643 * C1834) *
                       C49047) *
                      C48940 +
                  ((C47957 * C621 + C49088 * C627 + C47949 * C1320 +
                    C49095 * C1326 + C47963 * C1826 + C26643 * C1830) *
                       C114 +
                   (C47957 * C628 + C49088 * C636 + C47949 * C1325 +
                    C49095 * C1332 + C47963 * C1831 + C26643 * C1835) *
                       C49047) *
                      C48948 +
                  ((C47957 * C622 + C49088 * C629 + C47949 * C1319 +
                    C49095 * C1324 + C47963 * C1827 + C26643 * C1832) *
                       C114 +
                   (C47957 * C630 + C49088 * C637 + C47949 * C1323 +
                    C49095 * C1331 + C47963 * C1833 + C26643 * C1836) *
                       C49047) *
                      C26646) *
                     C49019 * C618) *
                C48968) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C410 -
                  (((C27064 + C27065 + C27066) * C49047 +
                    (C27067 + C27068 + C27069) * C114) *
                       C26646 +
                   ((C27070 + C27071 + C27072) * C49047 +
                    (C27073 + C27074 + C27075) * C114) *
                       C48948 +
                   ((C47963 * C1525 + C26643 * C1531 + C47949 * C728 +
                     C49095 * C737 + C47957 * C426 + C49088 * C434) *
                        C49047 +
                    (C47963 * C1519 + C26643 * C1526 + C47949 * C722 +
                     C49095 * C727 + C47957 * C416 + C49088 * C427) *
                        C114) *
                       C48940) *
                      C49321) *
                     C550 +
                 ((((C47957 * C722 + C49088 * C727 + C47949 * C1519 +
                     C49095 * C1526 + C47963 * C1983 + C26643 * C1986) *
                        C114 +
                    (C47957 * C728 + C49088 * C737 + C47949 * C1525 +
                     C49095 * C1531 + C47963 * C1987 + C26643 * C1992) *
                        C49047) *
                       C48940 +
                   ((C47957 * C723 + C49088 * C729 + C47949 * C1518 +
                     C49095 * C1524 + C47963 * C1984 + C26643 * C1988) *
                        C114 +
                    (C47957 * C730 + C49088 * C738 + C47949 * C1523 +
                     C49095 * C1530 + C47963 * C1989 + C26643 * C1993) *
                        C49047) *
                       C48948 +
                   ((C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                     C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                        C114 +
                    (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                     C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                        C49047) *
                       C26646) *
                      C49321 -
                  (((C26882 + C26883 + C26884) * C49047 +
                    (C26885 + C26886 + C26887) * C114) *
                       C26646 +
                   ((C26888 + C26889 + C26890) * C49047 +
                    (C26891 + C26892 + C26893) * C114) *
                       C48948 +
                   ((C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49047 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C114) *
                       C48940) *
                      C410) *
                     C49319) *
                C48968) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C824 -
                  (((C27064 + C27065 + C27066) * C49047 +
                    (C27067 + C27068 + C27069) * C114) *
                       C26646 +
                   ((C27070 + C27071 + C27072) * C49047 +
                    (C27073 + C27074 + C27075) * C114) *
                       C48948 +
                   ((C47963 * C1525 + C26643 * C1531 + C47949 * C728 +
                     C49095 * C737 + C47957 * C426 + C49088 * C434) *
                        C49047 +
                    (C47963 * C1519 + C26643 * C1526 + C47949 * C722 +
                     C49095 * C727 + C47957 * C416 + C49088 * C427) *
                        C114) *
                       C48940) *
                      C49321) *
                     C49002 * C552 +
                 ((((C27075 + C27074 + C27073) * C114 +
                    (C27072 + C27071 + C27070) * C49047) *
                       C48940 +
                   ((C27069 + C27068 + C27067) * C114 +
                    (C27066 + C27065 + C27064) * C49047) *
                       C48948 +
                   ((C47957 * C413 + C49088 * C421 + C47949 * C725 +
                     C49095 * C733 + C47963 * C1520 + C26643 * C1527) *
                        C114 +
                    (C47957 * C420 + C49088 * C431 + C47949 * C734 +
                     C49095 * C740 + C47963 * C1528 + C26643 * C1532) *
                        C49047) *
                       C26646) *
                      C49321 -
                  (((C26699 + C26700 + C26701) * C49047 +
                    (C26702 + C26703 + C26704) * C114) *
                       C26646 +
                   ((C26698 + C26697 + C26696) * C49047 +
                    (C26695 + C26694 + C26693) * C114) *
                       C48948 +
                   ((C26692 + C26691 + C26690) * C49047 +
                    (C26689 + C26688 + C26687) * C114) *
                       C48940) *
                      C824) *
                     C49002 * C49317)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C114 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49047) *
                       C48940 +
                   ((C26687 + C26688 + C26689) * C114 +
                    (C26690 + C26691 + C26692) * C49047) *
                       C48948 +
                   C26711 * C26646) *
                      C824 -
                  (((C27064 + C27065 + C27066) * C49047 +
                    (C27067 + C27068 + C27069) * C114) *
                       C26646 +
                   ((C27070 + C27071 + C27072) * C49047 +
                    (C27073 + C27074 + C27075) * C114) *
                       C48948 +
                   ((C47963 * C1525 + C26643 * C1531 + C47949 * C728 +
                     C49095 * C737 + C47957 * C426 + C49088 * C434) *
                        C49047 +
                    (C47963 * C1519 + C26643 * C1526 + C47949 * C722 +
                     C49095 * C727 + C47957 * C416 + C49088 * C427) *
                        C114) *
                       C48940) *
                      C49321) *
                     C268 +
                 ((((C47957 * C722 + C49088 * C727 + C47949 * C1519 +
                     C49095 * C1526 + C47963 * C1983 + C26643 * C1986) *
                        C114 +
                    (C47957 * C728 + C49088 * C737 + C47949 * C1525 +
                     C49095 * C1531 + C47963 * C1987 + C26643 * C1992) *
                        C49047) *
                       C48940 +
                   ((C47957 * C723 + C49088 * C729 + C47949 * C1518 +
                     C49095 * C1524 + C47963 * C1984 + C26643 * C1988) *
                        C114 +
                    (C47957 * C730 + C49088 * C738 + C47949 * C1523 +
                     C49095 * C1530 + C47963 * C1989 + C26643 * C1993) *
                        C49047) *
                       C48948 +
                   ((C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                     C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                        C114 +
                    (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                     C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                        C49047) *
                       C26646) *
                      C49321 -
                  (((C26882 + C26883 + C26884) * C49047 +
                    (C26885 + C26886 + C26887) * C114) *
                       C26646 +
                   ((C26888 + C26889 + C26890) * C49047 +
                    (C26891 + C26892 + C26893) * C114) *
                       C48948 +
                   ((C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49047 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C114) *
                       C48940) *
                      C824) *
                     C49319) *
                C48968) /
               (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C114 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49047) *
                      C48940 +
                  ((C26687 + C26688 + C26689) * C114 +
                   (C26690 + C26691 + C26692) * C49047) *
                      C48948 +
                  C26711 * C26646) *
                     C970 -
                 (((C27064 + C27065 + C27066) * C49047 +
                   (C27067 + C27068 + C27069) * C114) *
                      C26646 +
                  ((C27070 + C27071 + C27072) * C49047 +
                   (C27073 + C27074 + C27075) * C114) *
                      C48948 +
                  ((C47963 * C1525 + C26643 * C1531 + C47949 * C728 +
                    C49095 * C737 + C47957 * C426 + C49088 * C434) *
                       C49047 +
                   (C47963 * C1519 + C26643 * C1526 + C47949 * C722 +
                    C49095 * C727 + C47957 * C416 + C49088 * C427) *
                       C114) *
                      C48940) *
                     C971 +
                 (((C47957 * C973 + C49088 * C978 + C47949 * C2397 +
                    C49095 * C2403 + C47963 * C2398 + C26643 * C2404) *
                       C114 +
                   (C47957 * C979 + C49088 * C988 + C47949 * C2405 +
                    C49095 * C2415 + C47963 * C2406 + C26643 * C2416) *
                       C49047) *
                      C48940 +
                  ((C47957 * C974 + C49088 * C980 + C47949 * C2399 +
                    C49095 * C2407 + C47963 * C2400 + C26643 * C2408) *
                       C114 +
                   (C47957 * C981 + C49088 * C989 + C47949 * C2409 +
                    C49095 * C2417 + C47963 * C2410 + C26643 * C2418) *
                       C49047) *
                      C48948 +
                  ((C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                    C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                       C114 +
                   (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                    C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                       C49047) *
                      C26646) *
                     C972) *
                C49002 * C48968) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C5120 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49292 +
                   (C47957 * C416 + C49088 * C427 + C47949 * C722 +
                    C49095 * C727 + C47963 * C1519 + C26643 * C1526) *
                       C5121 +
                   (C47957 * C426 + C49088 * C434 + C47949 * C728 +
                    C49095 * C737 + C47963 * C1525 + C26643 * C1531) *
                       C49134) *
                      C23721 +
                  ((C26687 + C26688 + C26689) * C5120 +
                   (C26690 + C26691 + C26692) * C49292 +
                   (C27075 + C27074 + C27073) * C5121 +
                   (C27072 + C27071 + C27070) * C49134) *
                      C48945) *
                     C49019 * C49002 * C110 -
                 (((C27064 + C27065 + C27066) * C49134 +
                   (C27067 + C27068 + C27069) * C5121 +
                   (C26698 + C26697 + C26696) * C49292 +
                   (C26695 + C26694 + C26693) * C5120) *
                      C48945 +
                  ((C27070 + C27071 + C27072) * C49134 +
                   (C27073 + C27074 + C27075) * C5121 +
                   (C26692 + C26691 + C26690) * C49292 +
                   (C26689 + C26688 + C26687) * C5120) *
                      C23721) *
                     C49019 * C49002 * C111 +
                 ((C26707 * C5120 + C26708 * C49292 +
                   (C27069 + C27068 + C27067) * C5121 +
                   (C27066 + C27065 + C27064) * C49134) *
                      C23721 +
                  ((C26704 + C26703 + C26702) * C5120 +
                   (C26701 + C26700 + C26699) * C49292 +
                   (C47957 * C413 + C49088 * C421 + C47949 * C725 +
                    C49095 * C733 + C47963 * C1520 + C26643 * C1527) *
                       C5121 +
                   (C47957 * C420 + C49088 * C431 + C47949 * C734 +
                    C49095 * C740 + C47963 * C1528 + C26643 * C1532) *
                       C49134) *
                      C48945) *
                     C49019 * C49002 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C47957 * C416 + C49088 * C427 + C47949 * C722 +
                      C49095 * C727 + C47963 * C1519 + C26643 * C1526) *
                         C5121 +
                     (C47957 * C426 + C49088 * C434 + C47949 * C728 +
                      C49095 * C737 + C47963 * C1525 + C26643 * C1531) *
                         C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 +
                     (C27075 + C27074 + C27073) * C5121 +
                     (C27072 + C27071 + C27070) * C49134) *
                        C48945) *
                       C49019 * C268 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C5121 +
                     (C26888 + C26889 + C26890) * C49292 +
                     (C26891 + C26892 + C26893) * C5120) *
                        C48945 +
                    ((C47963 * C1987 + C26643 * C1992 + C47949 * C1525 +
                      C49095 * C1531 + C47957 * C728 + C49088 * C737) *
                         C49134 +
                     (C47963 * C1983 + C26643 * C1986 + C47949 * C1519 +
                      C49095 * C1526 + C47957 * C722 + C49088 * C727) *
                         C5121 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C49292 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C5120) *
                        C23721) *
                       C49019 * C49319) *
                      C270 +
                  ((((C26893 + C26892 + C26891) * C5120 +
                     (C26890 + C26889 + C26888) * C49292 +
                     (C29862 + C29861 + C29860) * C5121 +
                     (C29859 + C29858 + C29857) * C49134) *
                        C23721 +
                    ((C26887 + C26886 + C26885) * C5120 +
                     (C26884 + C26883 + C26882) * C49292 +
                     (C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                      C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                         C5121 +
                     (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                      C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                         C49134) *
                        C48945) *
                       C49019 * C49319 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C5121 +
                     (C26698 + C26697 + C26696) * C49292 +
                     (C26695 + C26694 + C26693) * C5120) *
                        C48945 +
                    ((C27070 + C27071 + C27072) * C49134 +
                     (C27073 + C27074 + C27075) * C5121 +
                     (C26692 + C26691 + C26690) * C49292 +
                     (C26689 + C26688 + C26687) * C5120) *
                        C23721) *
                       C49019 * C268) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C30085 + C30086 + C30087) * C5121 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                     C30092 * C49134) *
                        C48945) *
                       C410 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C5121 + C30099 * C49292 +
                     C30100 * C5120) *
                        C48945 +
                    ((C47963 * C2406 + C26643 * C2416 + C47949 * C2405 +
                      C49095 * C2415 + C47957 * C979 + C49088 * C988) *
                         C49134 +
                     (C47963 * C2398 + C26643 * C2404 + C47949 * C2397 +
                      C49095 * C2403 + C47957 * C973 + C49088 * C978) *
                         C5121 +
                     (C30090 + C30089 + C30088) * C49292 +
                     (C30087 + C30086 + C30085) * C5120) *
                        C23721) *
                       C49321) *
                      C49002 * C270 +
                  (((C30091 * C5120 + C30092 * C49292 +
                     (C30098 + C30097 + C30096) * C5121 +
                     (C30095 + C30094 + C30093) * C49134) *
                        C23721 +
                    ((C27069 + C27068 + C27067) * C5120 +
                     (C27066 + C27065 + C27064) * C49292 +
                     (C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                      C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                         C5121 +
                     (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                      C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C5121 +
                     (C26698 + C26697 + C26696) * C49292 +
                     (C26695 + C26694 + C26693) * C5120) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C5121 +
                     (C26692 + C26691 + C26690) * C49292 +
                     (C26689 + C26688 + C26687) * C5120) *
                        C23721) *
                       C410) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[12] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C30085 + C30086 + C30087) * C5121 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                     C30092 * C49134) *
                        C48945) *
                       C49019 * C550 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C5121 +
                     (C26888 + C26889 + C26890) * C49292 +
                     (C26891 + C26892 + C26893) * C5120) *
                        C48945 +
                    ((C47963 * C1987 + C26643 * C1992 + C47949 * C1525 +
                      C49095 * C1531 + C47957 * C728 + C49088 * C737) *
                         C49134 +
                     (C47963 * C1983 + C26643 * C1986 + C47949 * C1519 +
                      C49095 * C1526 + C47957 * C722 + C49088 * C727) *
                         C5121 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C49292 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C5120) *
                        C23721) *
                       C49019 * C49319) *
                      C552 +
                  ((((C26893 + C26892 + C26891) * C5120 +
                     (C26890 + C26889 + C26888) * C49292 +
                     (C29862 + C29861 + C29860) * C5121 +
                     (C29859 + C29858 + C29857) * C49134) *
                        C23721 +
                    ((C26887 + C26886 + C26885) * C5120 +
                     (C26884 + C26883 + C26882) * C49292 +
                     (C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                      C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                         C5121 +
                     (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                      C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                         C49134) *
                        C48945) *
                       C49019 * C49319 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C5121 +
                     (C26698 + C26697 + C26696) * C49292 +
                     (C26695 + C26694 + C26693) * C5120) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C5121 +
                     (C26692 + C26691 + C26690) * C49292 +
                     (C26689 + C26688 + C26687) * C5120) *
                        C23721) *
                       C49019 * C550) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C5120 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49292 +
                    (C30085 + C30086 + C30087) * C5121 +
                    (C30088 + C30089 + C30090) * C49134) *
                       C23721 +
                   ((C26687 + C26688 + C26689) * C5120 +
                    (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                    C30092 * C49134) *
                       C48945) *
                      C49019 * C616 -
                  (((C29857 + C29858 + C29859) * C49134 +
                    (C29860 + C29861 + C29862) * C5121 +
                    (C26888 + C26889 + C26890) * C49292 +
                    (C26891 + C26892 + C26893) * C5120) *
                       C48945 +
                   ((C47963 * C1987 + C26643 * C1992 + C47949 * C1525 +
                     C49095 * C1531 + C47957 * C728 + C49088 * C737) *
                        C49134 +
                    (C47963 * C1983 + C26643 * C1986 + C47949 * C1519 +
                     C49095 * C1526 + C47957 * C722 + C49088 * C727) *
                        C5121 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49292 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C5120) *
                       C23721) *
                      C49019 * C617 +
                  (((C47957 * C620 + C49088 * C625 + C47949 * C1321 +
                     C49095 * C1328 + C47963 * C1825 + C26643 * C1828) *
                        C5120 +
                    (C47957 * C626 + C49088 * C635 + C47949 * C1327 +
                     C49095 * C1333 + C47963 * C1829 + C26643 * C1834) *
                        C49292 +
                    (C47957 * C1519 + C49088 * C1526 + C47949 * C1983 +
                     C49095 * C1986 + C47963 * C9444 + C26643 * C9447) *
                        C5121 +
                    (C47957 * C1525 + C49088 * C1531 + C47949 * C1987 +
                     C49095 * C1992 + C47963 * C9446 + C26643 * C9450) *
                        C49134) *
                       C23721 +
                   ((C47957 * C621 + C49088 * C627 + C47949 * C1320 +
                     C49095 * C1326 + C47963 * C1826 + C26643 * C1830) *
                        C5120 +
                    (C47957 * C628 + C49088 * C636 + C47949 * C1325 +
                     C49095 * C1332 + C47963 * C1831 + C26643 * C1835) *
                        C49292 +
                    (C47957 * C1518 + C49088 * C1524 + C47949 * C1984 +
                     C49095 * C1988 + C47963 * C9445 + C26643 * C9448) *
                        C5121 +
                    (C47957 * C1523 + C49088 * C1530 + C47949 * C1989 +
                     C49095 * C1993 + C47963 * C9449 + C26643 * C9451) *
                        C49134) *
                       C48945) *
                      C49019 * C618) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C30085 + C30086 + C30087) * C5121 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                     C30092 * C49134) *
                        C48945) *
                       C410 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C5121 + C30099 * C49292 +
                     C30100 * C5120) *
                        C48945 +
                    ((C47963 * C2406 + C26643 * C2416 + C47949 * C2405 +
                      C49095 * C2415 + C47957 * C979 + C49088 * C988) *
                         C49134 +
                     (C47963 * C2398 + C26643 * C2404 + C47949 * C2397 +
                      C49095 * C2403 + C47957 * C973 + C49088 * C978) *
                         C5121 +
                     (C30090 + C30089 + C30088) * C49292 +
                     (C30087 + C30086 + C30085) * C5120) *
                        C23721) *
                       C49321) *
                      C550 +
                  ((((C30647 + C30648 + C30649) * C5120 +
                     (C30650 + C30651 + C30652) * C49292 +
                     (C47957 * C2397 + C49088 * C2403 + C47949 * C2398 +
                      C49095 * C2404 + C47963 * C9912 + C26643 * C9914) *
                         C5121 +
                     (C47957 * C2405 + C49088 * C2415 + C47949 * C2406 +
                      C49095 * C2416 + C47963 * C9916 + C26643 * C9918) *
                         C49134) *
                        C23721 +
                    ((C29862 + C29861 + C29860) * C5120 +
                     (C29859 + C29858 + C29857) * C49292 +
                     (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                      C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                         C5121 +
                     (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                      C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C5121 +
                     (C26888 + C26889 + C26890) * C49292 +
                     (C26891 + C26892 + C26893) * C5120) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C5121 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C49292 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C5120) *
                        C23721) *
                       C410) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C30085 + C30086 + C30087) * C5121 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                     C30092 * C49134) *
                        C48945) *
                       C824 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C5121 + C30099 * C49292 +
                     C30100 * C5120) *
                        C48945 +
                    ((C47963 * C2406 + C26643 * C2416 + C47949 * C2405 +
                      C49095 * C2415 + C47957 * C979 + C49088 * C988) *
                         C49134 +
                     (C47963 * C2398 + C26643 * C2404 + C47949 * C2397 +
                      C49095 * C2403 + C47957 * C973 + C49088 * C978) *
                         C5121 +
                     (C30090 + C30089 + C30088) * C49292 +
                     (C30087 + C30086 + C30085) * C5120) *
                        C23721) *
                       C49321) *
                      C49002 * C552 +
                  (((C30091 * C5120 + C30092 * C49292 +
                     (C30098 + C30097 + C30096) * C5121 +
                     (C30095 + C30094 + C30093) * C49134) *
                        C23721 +
                    ((C27069 + C27068 + C27067) * C5120 +
                     (C27066 + C27065 + C27064) * C49292 +
                     (C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                      C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                         C5121 +
                     (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                      C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C5121 +
                     (C26698 + C26697 + C26696) * C49292 +
                     (C26695 + C26694 + C26693) * C5120) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C5121 +
                     (C26692 + C26691 + C26690) * C49292 +
                     (C26689 + C26688 + C26687) * C5120) *
                        C23721) *
                       C824) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C5120 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C49292 +
                     (C30085 + C30086 + C30087) * C5121 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C23721 +
                    ((C26687 + C26688 + C26689) * C5120 +
                     (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                     C30092 * C49134) *
                        C48945) *
                       C824 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C5121 + C30099 * C49292 +
                     C30100 * C5120) *
                        C48945 +
                    ((C47963 * C2406 + C26643 * C2416 + C47949 * C2405 +
                      C49095 * C2415 + C47957 * C979 + C49088 * C988) *
                         C49134 +
                     (C47963 * C2398 + C26643 * C2404 + C47949 * C2397 +
                      C49095 * C2403 + C47957 * C973 + C49088 * C978) *
                         C5121 +
                     (C30090 + C30089 + C30088) * C49292 +
                     (C30087 + C30086 + C30085) * C5120) *
                        C23721) *
                       C49321) *
                      C268 +
                  ((((C30647 + C30648 + C30649) * C5120 +
                     (C30650 + C30651 + C30652) * C49292 +
                     (C47957 * C2397 + C49088 * C2403 + C47949 * C2398 +
                      C49095 * C2404 + C47963 * C9912 + C26643 * C9914) *
                         C5121 +
                     (C47957 * C2405 + C49088 * C2415 + C47949 * C2406 +
                      C49095 * C2416 + C47963 * C9916 + C26643 * C9918) *
                         C49134) *
                        C23721 +
                    ((C29862 + C29861 + C29860) * C5120 +
                     (C29859 + C29858 + C29857) * C49292 +
                     (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                      C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                         C5121 +
                     (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                      C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C5121 +
                     (C26888 + C26889 + C26890) * C49292 +
                     (C26891 + C26892 + C26893) * C5120) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C5121 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C49292 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C5120) *
                        C23721) *
                       C824) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C5120 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49292 +
                    (C30085 + C30086 + C30087) * C5121 +
                    (C30088 + C30089 + C30090) * C49134) *
                       C23721 +
                   ((C26687 + C26688 + C26689) * C5120 +
                    (C26690 + C26691 + C26692) * C49292 + C30091 * C5121 +
                    C30092 * C49134) *
                       C48945) *
                      C970 -
                  (((C30093 + C30094 + C30095) * C49134 +
                    (C30096 + C30097 + C30098) * C5121 + C30099 * C49292 +
                    C30100 * C5120) *
                       C48945 +
                   ((C31199 + C31200 + C31201) * C49134 +
                    (C31202 + C31203 + C31204) * C5121 +
                    (C30090 + C30089 + C30088) * C49292 +
                    (C30087 + C30086 + C30085) * C5120) *
                       C23721) *
                      C971 +
                  (((C31204 + C31203 + C31202) * C5120 +
                    (C31201 + C31200 + C31199) * C49292 +
                    (C47957 * C2912 + C49088 * C2919 + C47949 * C3364 +
                     C49095 * C3367 + C47963 * C10326 + C26643 * C10329) *
                        C5121 +
                    (C47957 * C2918 + C49088 * C2924 + C47949 * C3368 +
                     C49095 * C3373 + C47963 * C10328 + C26643 * C10332) *
                        C49134) *
                       C23721 +
                   ((C30098 + C30097 + C30096) * C5120 +
                    (C30095 + C30094 + C30093) * C49292 +
                    (C47957 * C2911 + C49088 * C2917 + C47949 * C3365 +
                     C49095 * C3369 + C47963 * C10327 + C26643 * C10330) *
                        C5121 +
                    (C47957 * C2916 + C49088 * C2923 + C47949 * C3370 +
                     C49095 * C3374 + C47963 * C10331 + C26643 * C10333) *
                        C49134) *
                       C48945) *
                      C972) *
                 C49002 * C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C23768 + C23769 + C23770 + C23771) * C49047 +
            (C23772 + C23773 + C23774 + C23775) * C114) *
               C48945 +
           ((C23767 + C23766 + C23765 + C23764) * C49047 +
            (C23763 + C23762 + C23761 + C23760) * C114) *
               C23721) *
              C49019 * C49002 * C111 +
          (((C23775 + C23774 + C23773 + C23772) * C114 +
            (C23771 + C23770 + C23769 + C23768) * C49047) *
               C23721 +
           ((C23723 * C118 + C49366 * C128 + C23724 * C273 + C49362 * C281 +
             C23725 * C623 + C49352 * C631 + C23726 * C1322 + C49334 * C1329) *
                C114 +
            (C23723 * C129 + C49366 * C139 + C23724 * C280 + C49362 * C291 +
             C23725 * C632 + C49352 * C638 + C23726 * C1330 + C49334 * C1334) *
                C49047) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C49019 * C49002 * C110 -
          (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
           ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
           ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
           ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
              C49019 * C49002 * C111 +
          (C22570 * C49365 + C22571 * C49358 +
           ((C22561 + C22560) * C114 + (C22559 + C22558) * C49047) * C49345 +
           ((C22511 * C120 + C22505 * C133 + C22512 * C277 + C49092 * C288) *
                C114 +
            (C22511 * C132 + C22505 * C141 + C22512 * C289 + C49092 * C295) *
                C49047) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C2534 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49360 +
            (C22511 * C416 + C22505 * C427 + C22512 * C722 + C49092 * C727) *
                C2535 +
            (C22511 * C426 + C22505 * C434 + C22512 * C728 + C49092 * C737) *
                C49349 +
            (C22511 * C973 + C22505 * C978 + C22512 * C2397 + C49092 * C2403) *
                C2536 +
            (C22511 * C979 + C22505 * C988 + C22512 * C2405 + C49092 * C2415) *
                C49327) *
               C23721 +
           ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
            (C22903 + C22902) * C2535 + (C22901 + C22900) * C49349 +
            (C24962 + C24963) * C2536 + (C24964 + C24965) * C49327) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C24966 + C24967) * C49327 + (C24968 + C24969) * C2536 +
            (C22896 + C22897) * C49349 + (C22898 + C22899) * C2535 +
            (C22553 + C22552) * C49360 + (C22551 + C22550) * C2534) *
               C48945 +
           ((C24965 + C24964) * C49327 + (C24963 + C24962) * C2536 +
            (C22900 + C22901) * C49349 + (C22902 + C22903) * C2535 +
            (C22549 + C22548) * C49360 + (C22547 + C22546) * C2534) *
               C23721) *
              C49019 * C49002 * C111 +
          ((C22562 * C2534 + C22563 * C49360 + (C22899 + C22898) * C2535 +
            (C22897 + C22896) * C49349 + (C24969 + C24968) * C2536 +
            (C24967 + C24966) * C49327) *
               C23721 +
           (C22564 * C2534 + C22565 * C49360 + (C22895 + C22894) * C2535 +
            (C22893 + C22892) * C49349 +
            (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                C2536 +
            (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                C49327) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C49019 * C268 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C49019 * C49319) *
              C270 +
          ((((C23929 + C23928 + C23927 + C23926) * C114 +
             (C23925 + C23924 + C23923 + C23922) * C49047) *
                C23721 +
            ((C23723 * C274 + C49366 * C283 + C23724 * C622 + C49362 * C629 +
              C23725 * C1319 + C49352 * C1324 + C23726 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C23723 * C282 + C49366 * C292 + C23724 * C630 + C49362 * C637 +
              C23725 * C1323 + C49352 * C1331 + C23726 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C49019 * C268 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C114 + (C22735 + C22734) * C49047) * C49365 +
            ((C22733 + C22732) * C114 + (C22731 + C22730) * C49047) * C49358 +
            ((C22729 + C22728) * C114 + (C22727 + C22726) * C49047) * C49345 +
            ((C22511 * C272 + C22505 * C279 + C22512 * C624 + C49092 * C633) *
                 C114 +
             (C22511 * C278 + C22505 * C290 + C22512 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C22511 * C416 + C22505 * C427 + C22512 * C722 + C49092 * C727) *
                 C2535 +
             (C22511 * C426 + C22505 * C434 + C22512 * C728 + C49092 * C737) *
                 C49349 +
             (C22511 * C973 + C22505 * C978 + C22512 * C2397 + C49092 * C2403) *
                 C2536 +
             (C22511 * C979 + C22505 * C988 + C22512 * C2405 + C49092 * C2415) *
                 C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             (C22903 + C22902) * C2535 + (C22901 + C22900) * C49349 +
             (C24962 + C24963) * C2536 + (C24964 + C24965) * C49327) *
                C48945) *
               C49019 * C268 -
           (((C25180 + C25181) * C49327 + (C25182 + C25183) * C2536 +
             (C25184 + C25185) * C49349 + (C25186 + C25187) * C2535 +
             (C22734 + C22735) * C49360 + (C22736 + C22737) * C2534) *
                C48945 +
            ((C22512 * C2406 + C49092 * C2416 + C22511 * C2405 +
              C22505 * C2415) *
                 C49327 +
             (C22512 * C2398 + C49092 * C2404 + C22511 * C2397 +
              C22505 * C2403) *
                 C2536 +
             (C22512 * C1525 + C49092 * C1531 + C22511 * C728 + C22505 * C737) *
                 C49349 +
             (C22512 * C1519 + C49092 * C1526 + C22511 * C722 + C22505 * C727) *
                 C2535 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49360 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C2534) *
                C23721) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C2534 + (C22735 + C22734) * C49360 +
             (C25187 + C25186) * C2535 + (C25185 + C25184) * C49349 +
             (C25183 + C25182) * C2536 + (C25181 + C25180) * C49327) *
                C23721 +
            ((C22733 + C22732) * C2534 + (C22731 + C22730) * C49360 +
             (C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C2535 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49349 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C2536 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49327) *
                C48945) *
               C49019 * C49319 -
           (((C24966 + C24967) * C49327 + (C24968 + C24969) * C2536 +
             (C22896 + C22897) * C49349 + (C22898 + C22899) * C2535 +
             (C22553 + C22552) * C49360 + (C22551 + C22550) * C2534) *
                C48945 +
            ((C24965 + C24964) * C49327 + (C24963 + C24962) * C2536 +
             (C22900 + C22901) * C49349 + (C22902 + C22903) * C2535 +
             (C22549 + C22548) * C49360 + (C22547 + C22546) * C2534) *
                C23721) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C410 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C49002 * C270 +
          ((((C24083 + C24082 + C24081 + C24080) * C114 +
             (C24079 + C24078 + C24077 + C24076) * C49047) *
                C23721 +
            ((C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
              C23725 * C1517 + C49352 * C1522 + C23726 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
              C23725 * C1521 + C49352 * C1529 + C23726 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C410 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C49002 * C270 +
          ((((C22903 + C22902) * C114 + (C22901 + C22900) * C49047) * C49365 +
            ((C22899 + C22898) * C114 + (C22897 + C22896) * C49047) * C49358 +
            ((C22895 + C22894) * C114 + (C22893 + C22892) * C49047) * C49345 +
            ((C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                 C114 +
             (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
             (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
             C25401 * C49327) *
                C48945) *
               C410 -
           (((C25422 + C25423) * C49327 + (C25424 + C25425) * C2536 +
             C25410 * C49349 + C25411 * C2535 + C25412 * C49360 +
             C25413 * C2534) *
                C48945 +
            ((C22512 * C3368 + C49092 * C3373 + C22511 * C2918 +
              C22505 * C2924) *
                 C49327 +
             (C22512 * C3364 + C49092 * C3367 + C22511 * C2912 +
              C22505 * C2919) *
                 C2536 +
             (C25421 + C25420) * C49349 + (C25419 + C25418) * C2535 +
             (C25417 + C25416) * C49360 + (C25415 + C25414) * C2534) *
                C23721) *
               C49321) *
              C49002 * C270 +
          (((C25398 * C2534 + C25399 * C49360 + C25400 * C2535 +
             C25401 * C49349 + (C25425 + C25424) * C2536 +
             (C25423 + C25422) * C49327) *
                C23721 +
            ((C22899 + C22898) * C2534 + (C22897 + C22896) * C49360 +
             (C24969 + C24968) * C2535 + (C24967 + C24966) * C49349 +
             (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
              C49092 * C3371) *
                 C2536 +
             (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
              C49092 * C3375) *
                 C49327) *
                C48945) *
               C49321 -
           (((C24966 + C24967) * C49327 + (C24968 + C24969) * C2536 +
             (C22896 + C22897) * C49349 + (C22898 + C22899) * C2535 +
             (C22553 + C22552) * C49360 + (C22551 + C22550) * C2534) *
                C48945 +
            (C25410 * C49327 + C25411 * C2536 + C25412 * C49349 +
             C25413 * C2535 + (C22549 + C22548) * C49360 +
             (C22547 + C22546) * C2534) *
                C23721) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C49019 * C550 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C49019 * C49319) *
              C552 +
          ((((C23929 + C23928 + C23927 + C23926) * C114 +
             (C23925 + C23924 + C23923 + C23922) * C49047) *
                C23721 +
            ((C23723 * C274 + C49366 * C283 + C23724 * C622 + C49362 * C629 +
              C23725 * C1319 + C49352 * C1324 + C23726 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C23723 * C282 + C49366 * C292 + C23724 * C630 + C49362 * C637 +
              C23725 * C1323 + C49352 * C1331 + C23726 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C49019 * C550 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C114 + (C22735 + C22734) * C49047) * C49365 +
            ((C22733 + C22732) * C114 + (C22731 + C22730) * C49047) * C49358 +
            ((C22729 + C22728) * C114 + (C22727 + C22726) * C49047) * C49345 +
            ((C22511 * C272 + C22505 * C279 + C22512 * C624 + C49092 * C633) *
                 C114 +
             (C22511 * C278 + C22505 * C290 + C22512 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
             (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
             C25401 * C49327) *
                C48945) *
               C49019 * C550 -
           (((C25180 + C25181) * C49327 + (C25182 + C25183) * C2536 +
             (C25184 + C25185) * C49349 + (C25186 + C25187) * C2535 +
             (C22734 + C22735) * C49360 + (C22736 + C22737) * C2534) *
                C48945 +
            ((C22512 * C2406 + C49092 * C2416 + C22511 * C2405 +
              C22505 * C2415) *
                 C49327 +
             (C22512 * C2398 + C49092 * C2404 + C22511 * C2397 +
              C22505 * C2403) *
                 C2536 +
             (C22512 * C1525 + C49092 * C1531 + C22511 * C728 + C22505 * C737) *
                 C49349 +
             (C22512 * C1519 + C49092 * C1526 + C22511 * C722 + C22505 * C727) *
                 C2535 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49360 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C2534) *
                C23721) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C2534 + (C22735 + C22734) * C49360 +
             (C25187 + C25186) * C2535 + (C25185 + C25184) * C49349 +
             (C25183 + C25182) * C2536 + (C25181 + C25180) * C49327) *
                C23721 +
            ((C22733 + C22732) * C2534 + (C22731 + C22730) * C49360 +
             (C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C2535 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49349 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C2536 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49327) *
                C48945) *
               C49019 * C49319 -
           (((C24966 + C24967) * C49327 + (C24968 + C24969) * C2536 +
             (C22896 + C22897) * C49349 + (C22898 + C22899) * C2535 +
             (C22553 + C22552) * C49360 + (C22551 + C22550) * C2534) *
                C48945 +
            (C25410 * C49327 + C25411 * C2536 + C25412 * C49349 +
             C25413 * C2535 + (C22549 + C22548) * C49360 +
             (C22547 + C22546) * C2534) *
                C23721) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C49019 * C616 -
          (((C23922 + C23923 + C23924 + C23925) * C49047 +
            (C23926 + C23927 + C23928 + C23929) * C114) *
               C48945 +
           ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C49047 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C114) *
               C23721) *
              C49019 * C617 +
          (((C23723 * C620 + C49366 * C625 + C23724 * C1321 + C49362 * C1328 +
             C23725 * C1825 + C49352 * C1828 + C23726 * C9354 +
             C49334 * C9357) *
                C114 +
            (C23723 * C626 + C49366 * C635 + C23724 * C1327 + C49362 * C1333 +
             C23725 * C1829 + C49352 * C1834 + C23726 * C9356 +
             C49334 * C9360) *
                C49047) *
               C23721 +
           ((C23723 * C621 + C49366 * C627 + C23724 * C1320 + C49362 * C1326 +
             C23725 * C1826 + C49352 * C1830 + C23726 * C9355 +
             C49334 * C9358) *
                C114 +
            (C23723 * C628 + C49366 * C636 + C23724 * C1325 + C49362 * C1332 +
             C23725 * C1831 + C49352 * C1835 + C23726 * C9359 +
             C49334 * C9361) *
                C49047) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C49019 * C616 -
          (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
           ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
           ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
           ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49047 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C114) *
               C49365) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C114 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C49047) *
               C49365 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C114 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C49047) *
               C49358 +
           ((C22511 * C622 + C22505 * C629 + C22512 * C1319 + C49092 * C1324) *
                C114 +
            (C22511 * C630 + C22505 * C637 + C22512 * C1323 + C49092 * C1331) *
                C49047) *
               C49345 +
           ((C22511 * C623 + C22505 * C631 + C22512 * C1322 + C49092 * C1329) *
                C114 +
            (C22511 * C632 + C22505 * C638 + C22512 * C1330 + C49092 * C1334) *
                C49047) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C2534 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49360 +
            (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
            (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
               C23721 +
           ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
            C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
            C25401 * C49327) *
               C48945) *
              C49019 * C616 -
          (((C25180 + C25181) * C49327 + (C25182 + C25183) * C2536 +
            (C25184 + C25185) * C49349 + (C25186 + C25187) * C2535 +
            (C22734 + C22735) * C49360 + (C22736 + C22737) * C2534) *
               C48945 +
           ((C22512 * C2406 + C49092 * C2416 + C22511 * C2405 +
             C22505 * C2415) *
                C49327 +
            (C22512 * C2398 + C49092 * C2404 + C22511 * C2397 +
             C22505 * C2403) *
                C2536 +
            (C22512 * C1525 + C49092 * C1531 + C22511 * C728 + C22505 * C737) *
                C49349 +
            (C22512 * C1519 + C49092 * C1526 + C22511 * C722 + C22505 * C727) *
                C2535 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49360 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C2534) *
               C23721) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C2534 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C49360 +
            (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 +
             C49092 * C1986) *
                C2535 +
            (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 +
             C49092 * C1992) *
                C49349 +
            (C22511 * C2398 + C22505 * C2404 + C22512 * C9912 +
             C49092 * C9914) *
                C2536 +
            (C22511 * C2406 + C22505 * C2416 + C22512 * C9916 +
             C49092 * C9918) *
                C49327) *
               C23721 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C2534 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C49360 +
            (C22511 * C1518 + C22505 * C1524 + C22512 * C1984 +
             C49092 * C1988) *
                C2535 +
            (C22511 * C1523 + C22505 * C1530 + C22512 * C1989 +
             C49092 * C1993) *
                C49349 +
            (C22511 * C2400 + C22505 * C2408 + C22512 * C10176 +
             C49092 * C10177) *
                C2536 +
            (C22511 * C2410 + C22505 * C2418 + C22512 * C10178 +
             C49092 * C10179) *
                C49327) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C410 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C550 +
          ((((C23723 * C722 + C49366 * C727 + C23724 * C1519 + C49362 * C1526 +
              C23725 * C1983 + C49352 * C1986 + C23726 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C23723 * C728 + C49366 * C737 + C23724 * C1525 + C49362 * C1531 +
              C23725 * C1987 + C49352 * C1992 + C23726 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C23721 +
            ((C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
              C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
              C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C410 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C550 +
          ((((C22511 * C722 + C22505 * C727 + C22512 * C1519 + C49092 * C1526) *
                 C114 +
             (C22511 * C728 + C22505 * C737 + C22512 * C1525 + C49092 * C1531) *
                 C49047) *
                C49365 +
            ((C22511 * C723 + C22505 * C729 + C22512 * C1518 + C49092 * C1524) *
                 C114 +
             (C22511 * C730 + C22505 * C738 + C22512 * C1523 + C49092 * C1530) *
                 C49047) *
                C49358 +
            ((C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C114 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49047) *
                C49345 +
            ((C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C114 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
             (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
             C25401 * C49327) *
                C48945) *
               C410 -
           (((C25422 + C25423) * C49327 + (C25424 + C25425) * C2536 +
             C25410 * C49349 + C25411 * C2535 + C25412 * C49360 +
             C25413 * C2534) *
                C48945 +
            ((C22512 * C3368 + C49092 * C3373 + C22511 * C2918 +
              C22505 * C2924) *
                 C49327 +
             (C22512 * C3364 + C49092 * C3367 + C22511 * C2912 +
              C22505 * C2919) *
                 C2536 +
             (C25421 + C25420) * C49349 + (C25419 + C25418) * C2535 +
             (C25417 + C25416) * C49360 + (C25415 + C25414) * C2534) *
                C23721) *
               C49321) *
              C550 +
          ((((C25976 + C25977) * C2534 + (C25978 + C25979) * C49360 +
             (C25980 + C25981) * C2535 + (C25982 + C25983) * C49349 +
             (C22511 * C3364 + C22505 * C3367 + C22512 * C10326 +
              C49092 * C10329) *
                 C2536 +
             (C22511 * C3368 + C22505 * C3373 + C22512 * C10328 +
              C49092 * C10332) *
                 C49327) *
                C23721 +
            ((C25187 + C25186) * C2534 + (C25185 + C25184) * C49360 +
             (C25183 + C25182) * C2535 + (C25181 + C25180) * C49349 +
             (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
              C49092 * C10330) *
                 C2536 +
             (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
              C49092 * C10333) *
                 C49327) *
                C48945) *
               C49321 -
           (((C25180 + C25181) * C49327 + (C25182 + C25183) * C2536 +
             (C25184 + C25185) * C49349 + (C25186 + C25187) * C2535 +
             (C22734 + C22735) * C49360 + (C22736 + C22737) * C2534) *
                C48945 +
            ((C25983 + C25982) * C49327 + (C25981 + C25980) * C2536 +
             (C25979 + C25978) * C49349 + (C25977 + C25976) * C2535 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49360 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C2534) *
                C23721) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C824 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C49002 * C552 +
          ((((C24083 + C24082 + C24081 + C24080) * C114 +
             (C24079 + C24078 + C24077 + C24076) * C49047) *
                C23721 +
            ((C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
              C23725 * C1517 + C49352 * C1522 + C23726 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
              C23725 * C1521 + C49352 * C1529 + C23726 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C824 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C49002 * C552 +
          ((((C22903 + C22902) * C114 + (C22901 + C22900) * C49047) * C49365 +
            ((C22899 + C22898) * C114 + (C22897 + C22896) * C49047) * C49358 +
            ((C22895 + C22894) * C114 + (C22893 + C22892) * C49047) * C49345 +
            ((C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                 C114 +
             (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
             (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
             C25401 * C49327) *
                C48945) *
               C824 -
           (((C25422 + C25423) * C49327 + (C25424 + C25425) * C2536 +
             C25410 * C49349 + C25411 * C2535 + C25412 * C49360 +
             C25413 * C2534) *
                C48945 +
            ((C22512 * C3368 + C49092 * C3373 + C22511 * C2918 +
              C22505 * C2924) *
                 C49327 +
             (C22512 * C3364 + C49092 * C3367 + C22511 * C2912 +
              C22505 * C2919) *
                 C2536 +
             (C25421 + C25420) * C49349 + (C25419 + C25418) * C2535 +
             (C25417 + C25416) * C49360 + (C25415 + C25414) * C2534) *
                C23721) *
               C49321) *
              C49002 * C552 +
          (((C25398 * C2534 + C25399 * C49360 + C25400 * C2535 +
             C25401 * C49349 + (C25425 + C25424) * C2536 +
             (C25423 + C25422) * C49327) *
                C23721 +
            ((C22899 + C22898) * C2534 + (C22897 + C22896) * C49360 +
             (C24969 + C24968) * C2535 + (C24967 + C24966) * C49349 +
             (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
              C49092 * C3371) *
                 C2536 +
             (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
              C49092 * C3375) *
                 C49327) *
                C48945) *
               C49321 -
           (((C24966 + C24967) * C49327 + (C24968 + C24969) * C2536 +
             (C22896 + C22897) * C49349 + (C22898 + C22899) * C2535 +
             (C22553 + C22552) * C49360 + (C22551 + C22550) * C2534) *
                C48945 +
            (C25410 * C49327 + C25411 * C2536 + C25412 * C49349 +
             C25413 * C2535 + (C22549 + C22548) * C49360 +
             (C22547 + C22546) * C2534) *
                C23721) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C824 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C268 +
          ((((C23723 * C722 + C49366 * C727 + C23724 * C1519 + C49362 * C1526 +
              C23725 * C1983 + C49352 * C1986 + C23726 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C23723 * C728 + C49366 * C737 + C23724 * C1525 + C49362 * C1531 +
              C23725 * C1987 + C49352 * C1992 + C23726 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C23721 +
            ((C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
              C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
              C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C824 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C268 +
          ((((C22511 * C722 + C22505 * C727 + C22512 * C1519 + C49092 * C1526) *
                 C114 +
             (C22511 * C728 + C22505 * C737 + C22512 * C1525 + C49092 * C1531) *
                 C49047) *
                C49365 +
            ((C22511 * C723 + C22505 * C729 + C22512 * C1518 + C49092 * C1524) *
                 C114 +
             (C22511 * C730 + C22505 * C738 + C22512 * C1523 + C49092 * C1530) *
                 C49047) *
                C49358 +
            ((C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C114 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49047) *
                C49345 +
            ((C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C114 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C2534 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49360 +
             (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
             (C25418 + C25419) * C2536 + (C25420 + C25421) * C49327) *
                C23721 +
            ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
             C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
             C25401 * C49327) *
                C48945) *
               C824 -
           (((C25422 + C25423) * C49327 + (C25424 + C25425) * C2536 +
             C25410 * C49349 + C25411 * C2535 + C25412 * C49360 +
             C25413 * C2534) *
                C48945 +
            ((C22512 * C3368 + C49092 * C3373 + C22511 * C2918 +
              C22505 * C2924) *
                 C49327 +
             (C22512 * C3364 + C49092 * C3367 + C22511 * C2912 +
              C22505 * C2919) *
                 C2536 +
             (C25421 + C25420) * C49349 + (C25419 + C25418) * C2535 +
             (C25417 + C25416) * C49360 + (C25415 + C25414) * C2534) *
                C23721) *
               C49321) *
              C268 +
          ((((C25976 + C25977) * C2534 + (C25978 + C25979) * C49360 +
             (C25980 + C25981) * C2535 + (C25982 + C25983) * C49349 +
             (C22511 * C3364 + C22505 * C3367 + C22512 * C10326 +
              C49092 * C10329) *
                 C2536 +
             (C22511 * C3368 + C22505 * C3373 + C22512 * C10328 +
              C49092 * C10332) *
                 C49327) *
                C23721 +
            ((C25187 + C25186) * C2534 + (C25185 + C25184) * C49360 +
             (C25183 + C25182) * C2535 + (C25181 + C25180) * C49349 +
             (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
              C49092 * C10330) *
                 C2536 +
             (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
              C49092 * C10333) *
                 C49327) *
                C48945) *
               C49321 -
           (((C25180 + C25181) * C49327 + (C25182 + C25183) * C2536 +
             (C25184 + C25185) * C49349 + (C25186 + C25187) * C2535 +
             (C22734 + C22735) * C49360 + (C22736 + C22737) * C2534) *
                C48945 +
            ((C25983 + C25982) * C49327 + (C25981 + C25980) * C2536 +
             (C25979 + C25978) * C49349 + (C25977 + C25976) * C2535 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49360 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C2534) *
                C23721) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C970 -
          (((C24076 + C24077 + C24078 + C24079) * C49047 +
            (C24080 + C24081 + C24082 + C24083) * C114) *
               C48945 +
           ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 + C49352 * C1531 +
             C23724 * C728 + C49362 * C737 + C23723 * C426 + C49366 * C434) *
                C49047 +
            (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 + C49352 * C1526 +
             C23724 * C722 + C49362 * C727 + C23723 * C416 + C49366 * C427) *
                C114) *
               C23721) *
              C971 +
          (((C23723 * C973 + C49366 * C978 + C23724 * C2397 + C49362 * C2403 +
             C23725 * C2398 + C49352 * C2404 + C23726 * C9912 +
             C49334 * C9914) *
                C114 +
            (C23723 * C979 + C49366 * C988 + C23724 * C2405 + C49362 * C2415 +
             C23725 * C2406 + C49352 * C2416 + C23726 * C9916 +
             C49334 * C9918) *
                C49047) *
               C23721 +
           ((C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C114 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49047) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C970 -
          (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
           ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
           ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
           ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                C49047 +
            (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                C114) *
               C49365) *
              C971 +
          (((C22511 * C973 + C22505 * C978 + C22512 * C2397 + C49092 * C2403) *
                C114 +
            (C22511 * C979 + C22505 * C988 + C22512 * C2405 + C49092 * C2415) *
                C49047) *
               C49365 +
           ((C22511 * C974 + C22505 * C980 + C22512 * C2399 + C49092 * C2407) *
                C114 +
            (C22511 * C981 + C22505 * C989 + C22512 * C2409 + C49092 * C2417) *
                C49047) *
               C49358 +
           ((C22511 * C975 + C22505 * C982 + C22512 * C2401 + C49092 * C2411) *
                C114 +
            (C22511 * C983 + C22505 * C990 + C22512 * C2413 + C49092 * C2419) *
                C49047) *
               C49345 +
           ((C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                C114 +
            (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                C49047) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C2534 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49360 +
            (C25414 + C25415) * C2535 + (C25416 + C25417) * C49349 +
            C26518 * C2536 + C26519 * C49327) *
               C23721 +
           ((C22546 + C22547) * C2534 + (C22548 + C22549) * C49360 +
            C25398 * C2535 + C25399 * C49349 + C25400 * C2536 +
            C25401 * C49327) *
               C48945) *
              C970 -
          (((C25422 + C25423) * C49327 + (C25424 + C25425) * C2536 +
            C25410 * C49349 + C25411 * C2535 + C25412 * C49360 +
            C25413 * C2534) *
               C48945 +
           ((C26528 + C26529) * C49327 + (C26530 + C26531) * C2536 +
            (C25421 + C25420) * C49349 + (C25419 + C25418) * C2535 +
            (C25417 + C25416) * C49360 + (C25415 + C25414) * C2534) *
               C23721) *
              C971 +
          ((C26518 * C2534 + C26519 * C49360 + (C26531 + C26530) * C2535 +
            (C26529 + C26528) * C49349 +
            (C22511 * C3790 + C22505 * C3793 + C22512 * C11232 +
             C49092 * C11234) *
                C2536 +
            (C22511 * C3794 + C22505 * C3799 + C22512 * C11236 +
             C49092 * C11238) *
                C49327) *
               C23721 +
           (C25400 * C2534 + C25401 * C49360 + (C25425 + C25424) * C2535 +
            (C25423 + C25422) * C49349 +
            (C22511 * C3791 + C22505 * C3795 + C22512 * C17947 +
             C49092 * C17948) *
                C2536 +
            (C22511 * C3796 + C22505 * C3800 + C22512 * C17949 +
             C49092 * C17950) *
                C49327) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C5120 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49292 +
            (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
               C48940 +
           ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
            C25398 * C5121 + C25399 * C49134) *
               C48948 +
           C28034 * C26646) *
              C49019 * C49002 * C110 -
          (((C22892 + C22893) * C49134 + (C22894 + C22895) * C5121 +
            (C22557 + C22556) * C49292 + (C22555 + C22554) * C5120) *
               C26646 +
           ((C22896 + C22897) * C49134 + (C22898 + C22899) * C5121 +
            (C22553 + C22552) * C49292 + (C22551 + C22550) * C5120) *
               C48948 +
           (C25412 * C49134 + C25413 * C5121 + (C22549 + C22548) * C49292 +
            (C22547 + C22546) * C5120) *
               C48940) *
              C49019 * C49002 * C111 +
          (C28034 * C48940 +
           (C22564 * C5120 + C22565 * C49292 + (C22895 + C22894) * C5121 +
            (C22893 + C22892) * C49134) *
               C48948 +
           ((C22561 + C22560) * C5120 + (C22559 + C22558) * C49292 +
            (C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                C5121 +
            (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                C49134) *
               C26646) *
              C49019 * C49002 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C49019 * C268 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C5121 +
             (C22730 + C22731) * C49292 + (C22732 + C22733) * C5120) *
                C26646 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C5121 +
             (C22734 + C22735) * C49292 + (C22736 + C22737) * C5120) *
                C48948 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C5121 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49292 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C5120) *
                C48940) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C5120 + (C22735 + C22734) * C49292 +
             (C25187 + C25186) * C5121 + (C25185 + C25184) * C49134) *
                C48940 +
            ((C22733 + C22732) * C5120 + (C22731 + C22730) * C49292 +
             (C28240 + C28239) * C5121 + (C28238 + C28237) * C49134) *
                C48948 +
            ((C22729 + C22728) * C5120 + (C22727 + C22726) * C49292 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C5121 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C26646) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C5121 +
             (C22557 + C22556) * C49292 + (C22555 + C22554) * C5120) *
                C26646 +
            ((C22896 + C22897) * C49134 + (C22898 + C22899) * C5121 +
             (C22553 + C22552) * C49292 + (C22551 + C22550) * C5120) *
                C48948 +
            (C25412 * C49134 + C25413 * C5121 + (C22549 + C22548) * C49292 +
             (C22547 + C22546) * C5120) *
                C48940) *
               C49019 * C268) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C5121 +
             C28435 * C49292 + C28436 * C5120) *
                C26646 +
            (C25410 * C49134 + C25411 * C5121 + C25412 * C49292 +
             C25413 * C5120) *
                C48948 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C5121 +
             (C25417 + C25416) * C49292 + (C25415 + C25414) * C5120) *
                C48940) *
               C49321) *
              C49002 * C270 +
          (((C25398 * C5120 + C25399 * C49292 + C25400 * C5121 +
             C25401 * C49134) *
                C48940 +
            (C28028 * C5120 + C28029 * C49292 + (C24969 + C24968) * C5121 +
             (C24967 + C24966) * C49134) *
                C48948 +
            ((C22895 + C22894) * C5120 + (C22893 + C22892) * C49292 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C5121 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C26646) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C5121 +
             (C22557 + C22556) * C49292 + (C22555 + C22554) * C5120) *
                C26646 +
            (C28435 * C49134 + C28436 * C5121 + (C22553 + C22552) * C49292 +
             (C22551 + C22550) * C5120) *
                C48948 +
            (C25412 * C49134 + C25413 * C5121 + (C22549 + C22548) * C49292 +
             (C22547 + C22546) * C5120) *
                C48940) *
               C410) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C49019 * C550 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C5121 +
             (C22730 + C22731) * C49292 + (C22732 + C22733) * C5120) *
                C26646 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C5121 +
             (C22734 + C22735) * C49292 + (C22736 + C22737) * C5120) *
                C48948 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C5121 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49292 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C5120) *
                C48940) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C5120 + (C22735 + C22734) * C49292 +
             (C25187 + C25186) * C5121 + (C25185 + C25184) * C49134) *
                C48940 +
            ((C22733 + C22732) * C5120 + (C22731 + C22730) * C49292 +
             (C28240 + C28239) * C5121 + (C28238 + C28237) * C49134) *
                C48948 +
            ((C22729 + C22728) * C5120 + (C22727 + C22726) * C49292 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C5121 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C26646) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C5121 +
             (C22557 + C22556) * C49292 + (C22555 + C22554) * C5120) *
                C26646 +
            (C28435 * C49134 + C28436 * C5121 + (C22553 + C22552) * C49292 +
             (C22551 + C22550) * C5120) *
                C48948 +
            (C25412 * C49134 + C25413 * C5121 + (C22549 + C22548) * C49292 +
             (C22547 + C22546) * C5120) *
                C48940) *
               C49019 * C550) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C5120 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49292 +
            (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
               C48940 +
           ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
            C25398 * C5121 + C25399 * C49134) *
               C48948 +
           C28034 * C26646) *
              C49019 * C616 -
          (((C28237 + C28238) * C49134 + (C28239 + C28240) * C5121 +
            (C22730 + C22731) * C49292 + (C22732 + C22733) * C5120) *
               C26646 +
           ((C25184 + C25185) * C49134 + (C25186 + C25187) * C5121 +
            (C22734 + C22735) * C49292 + (C22736 + C22737) * C5120) *
               C48948 +
           ((C25979 + C25978) * C49134 + (C25977 + C25976) * C5121 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49292 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C5120) *
               C48940) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C5120 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C49292 +
            (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 +
             C49092 * C1986) *
                C5121 +
            (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 +
             C49092 * C1992) *
                C49134) *
               C48940 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C5120 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C49292 +
            (C22511 * C1518 + C22505 * C1524 + C22512 * C1984 +
             C49092 * C1988) *
                C5121 +
            (C22511 * C1523 + C22505 * C1530 + C22512 * C1989 +
             C49092 * C1993) *
                C49134) *
               C48948 +
           ((C22511 * C622 + C22505 * C629 + C22512 * C1319 + C49092 * C1324) *
                C5120 +
            (C22511 * C630 + C22505 * C637 + C22512 * C1323 + C49092 * C1331) *
                C49292 +
            (C22511 * C1517 + C22505 * C1522 + C22512 * C1985 +
             C49092 * C1990) *
                C5121 +
            (C22511 * C1521 + C22505 * C1529 + C22512 * C1991 +
             C49092 * C1994) *
                C49134) *
               C26646) *
              C49019 * C618) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C5121 +
             C28435 * C49292 + C28436 * C5120) *
                C26646 +
            (C25410 * C49134 + C25411 * C5121 + C25412 * C49292 +
             C25413 * C5120) *
                C48948 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C5121 +
             (C25417 + C25416) * C49292 + (C25415 + C25414) * C5120) *
                C48940) *
               C49321) *
              C550 +
          ((((C25976 + C25977) * C5120 + (C25978 + C25979) * C49292 +
             (C25980 + C25981) * C5121 + (C25982 + C25983) * C49134) *
                C48940 +
            ((C25187 + C25186) * C5120 + (C25185 + C25184) * C49292 +
             (C25183 + C25182) * C5121 + (C25181 + C25180) * C49134) *
                C48948 +
            ((C28240 + C28239) * C5120 + (C28238 + C28237) * C49292 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C5121 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C26646) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C5121 +
             (C22730 + C22731) * C49292 + (C22732 + C22733) * C5120) *
                C26646 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C5121 +
             (C22734 + C22735) * C49292 + (C22736 + C22737) * C5120) *
                C48948 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C5121 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49292 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C5120) *
                C48940) *
               C410) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C5121 +
             C28435 * C49292 + C28436 * C5120) *
                C26646 +
            (C25410 * C49134 + C25411 * C5121 + C25412 * C49292 +
             C25413 * C5120) *
                C48948 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C5121 +
             (C25417 + C25416) * C49292 + (C25415 + C25414) * C5120) *
                C48940) *
               C49321) *
              C49002 * C552 +
          (((C25398 * C5120 + C25399 * C49292 + C25400 * C5121 +
             C25401 * C49134) *
                C48940 +
            (C28028 * C5120 + C28029 * C49292 + (C24969 + C24968) * C5121 +
             (C24967 + C24966) * C49134) *
                C48948 +
            ((C22895 + C22894) * C5120 + (C22893 + C22892) * C49292 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C5121 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C26646) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C5121 +
             (C22557 + C22556) * C49292 + (C22555 + C22554) * C5120) *
                C26646 +
            (C28435 * C49134 + C28436 * C5121 + (C22553 + C22552) * C49292 +
             (C22551 + C22550) * C5120) *
                C48948 +
            (C25412 * C49134 + C25413 * C5121 + (C22549 + C22548) * C49292 +
             (C22547 + C22546) * C5120) *
                C48940) *
               C824) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C5120 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49292 +
             (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
                C48940 +
            ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
             C25398 * C5121 + C25399 * C49134) *
                C48948 +
            C28034 * C26646) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C5121 +
             C28435 * C49292 + C28436 * C5120) *
                C26646 +
            (C25410 * C49134 + C25411 * C5121 + C25412 * C49292 +
             C25413 * C5120) *
                C48948 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C5121 +
             (C25417 + C25416) * C49292 + (C25415 + C25414) * C5120) *
                C48940) *
               C49321) *
              C268 +
          ((((C25976 + C25977) * C5120 + (C25978 + C25979) * C49292 +
             (C25980 + C25981) * C5121 + (C25982 + C25983) * C49134) *
                C48940 +
            ((C25187 + C25186) * C5120 + (C25185 + C25184) * C49292 +
             (C25183 + C25182) * C5121 + (C25181 + C25180) * C49134) *
                C48948 +
            ((C28240 + C28239) * C5120 + (C28238 + C28237) * C49292 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C5121 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C26646) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C5121 +
             (C22730 + C22731) * C49292 + (C22732 + C22733) * C5120) *
                C26646 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C5121 +
             (C22734 + C22735) * C49292 + (C22736 + C22737) * C5120) *
                C48948 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C5121 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49292 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C5120) *
                C48940) *
               C824) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C5120 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49292 +
            (C25414 + C25415) * C5121 + (C25416 + C25417) * C49134) *
               C48940 +
           ((C22546 + C22547) * C5120 + (C22548 + C22549) * C49292 +
            C25398 * C5121 + C25399 * C49134) *
               C48948 +
           C28034 * C26646) *
              C970 -
          (((C24966 + C24967) * C49134 + (C24968 + C24969) * C5121 +
            C28435 * C49292 + C28436 * C5120) *
               C26646 +
           (C25410 * C49134 + C25411 * C5121 + C25412 * C49292 +
            C25413 * C5120) *
               C48948 +
           ((C25421 + C25420) * C49134 + (C25419 + C25418) * C5121 +
            (C25417 + C25416) * C49292 + (C25415 + C25414) * C5120) *
               C48940) *
              C971 +
          ((C26518 * C5120 + C26519 * C49292 + (C26531 + C26530) * C5121 +
            (C26529 + C26528) * C49134) *
               C48940 +
           (C25400 * C5120 + C25401 * C49292 + (C25425 + C25424) * C5121 +
            (C25423 + C25422) * C49134) *
               C48948 +
           ((C24969 + C24968) * C5120 + (C24967 + C24966) * C49292 +
            (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
             C49092 * C3371) *
                C5121 +
            (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
             C49092 * C3375) *
                C49134) *
               C26646) *
              C972) *
         C49002 * C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C49019 * C49002 * C110 -
          (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
           ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
           ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
           ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
              C49019 * C49002 * C111 +
          (C22570 * C49365 + C22571 * C49358 +
           ((C22561 + C22560) * C114 + (C22559 + C22558) * C49047) * C49345 +
           ((C22511 * C120 + C22505 * C133 + C22512 * C277 + C49092 * C288) *
                C114 +
            (C22511 * C132 + C22505 * C141 + C22512 * C289 + C49092 * C295) *
                C49047) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C23768 + C23769 + C23770 + C23771) * C49047 +
            (C23772 + C23773 + C23774 + C23775) * C114) *
               C48945 +
           ((C23767 + C23766 + C23765 + C23764) * C49047 +
            (C23763 + C23762 + C23761 + C23760) * C114) *
               C23721) *
              C49019 * C49002 * C111 +
          (((C23775 + C23774 + C23773 + C23772) * C114 +
            (C23771 + C23770 + C23769 + C23768) * C49047) *
               C23721 +
           ((C23723 * C118 + C49366 * C128 + C23724 * C273 + C49362 * C281 +
             C23725 * C623 + C49352 * C631 + C23726 * C1322 + C49334 * C1329) *
                C114 +
            (C23723 * C129 + C49366 * C139 + C23724 * C280 + C49362 * C291 +
             C23725 * C632 + C49352 * C638 + C23726 * C1330 + C49334 * C1334) *
                C49047) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C49019 * C268 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C114 + (C22735 + C22734) * C49047) * C49365 +
            ((C22733 + C22732) * C114 + (C22731 + C22730) * C49047) * C49358 +
            ((C22729 + C22728) * C114 + (C22727 + C22726) * C49047) * C49345 +
            ((C22511 * C272 + C22505 * C279 + C22512 * C624 + C49092 * C633) *
                 C114 +
             (C22511 * C278 + C22505 * C290 + C22512 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C49019 * C268 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C49019 * C49319) *
              C270 +
          ((((C23929 + C23928 + C23927 + C23926) * C114 +
             (C23925 + C23924 + C23923 + C23922) * C49047) *
                C23721 +
            ((C23723 * C274 + C49366 * C283 + C23724 * C622 + C49362 * C629 +
              C23725 * C1319 + C49352 * C1324 + C23726 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C23723 * C282 + C49366 * C292 + C23724 * C630 + C49362 * C637 +
              C23725 * C1323 + C49352 * C1331 + C23726 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C410 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C49002 * C270 +
          ((((C22903 + C22902) * C114 + (C22901 + C22900) * C49047) * C49365 +
            ((C22899 + C22898) * C114 + (C22897 + C22896) * C49047) * C49358 +
            ((C22895 + C22894) * C114 + (C22893 + C22892) * C49047) * C49345 +
            ((C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                 C114 +
             (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C410 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C49002 * C270 +
          ((((C24083 + C24082 + C24081 + C24080) * C114 +
             (C24079 + C24078 + C24077 + C24076) * C49047) *
                C23721 +
            ((C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
              C23725 * C1517 + C49352 * C1522 + C23726 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
              C23725 * C1521 + C49352 * C1529 + C23726 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C49019 * C550 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C114 + (C22735 + C22734) * C49047) * C49365 +
            ((C22733 + C22732) * C114 + (C22731 + C22730) * C49047) * C49358 +
            ((C22729 + C22728) * C114 + (C22727 + C22726) * C49047) * C49345 +
            ((C22511 * C272 + C22505 * C279 + C22512 * C624 + C49092 * C633) *
                 C114 +
             (C22511 * C278 + C22505 * C290 + C22512 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C49019 * C550 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C49019 * C49319) *
              C552 +
          ((((C23929 + C23928 + C23927 + C23926) * C114 +
             (C23925 + C23924 + C23923 + C23922) * C49047) *
                C23721 +
            ((C23723 * C274 + C49366 * C283 + C23724 * C622 + C49362 * C629 +
              C23725 * C1319 + C49352 * C1324 + C23726 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C23723 * C282 + C49366 * C292 + C23724 * C630 + C49362 * C637 +
              C23725 * C1323 + C49352 * C1331 + C23726 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C49019 * C616 -
          (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
           ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
           ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
           ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49047 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C114) *
               C49365) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C114 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C49047) *
               C49365 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C114 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C49047) *
               C49358 +
           ((C22511 * C622 + C22505 * C629 + C22512 * C1319 + C49092 * C1324) *
                C114 +
            (C22511 * C630 + C22505 * C637 + C22512 * C1323 + C49092 * C1331) *
                C49047) *
               C49345 +
           ((C22511 * C623 + C22505 * C631 + C22512 * C1322 + C49092 * C1329) *
                C114 +
            (C22511 * C632 + C22505 * C638 + C22512 * C1330 + C49092 * C1334) *
                C49047) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C49019 * C616 -
          (((C23922 + C23923 + C23924 + C23925) * C49047 +
            (C23926 + C23927 + C23928 + C23929) * C114) *
               C48945 +
           ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C49047 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C114) *
               C23721) *
              C49019 * C617 +
          (((C23723 * C620 + C49366 * C625 + C23724 * C1321 + C49362 * C1328 +
             C23725 * C1825 + C49352 * C1828 + C23726 * C9354 +
             C49334 * C9357) *
                C114 +
            (C23723 * C626 + C49366 * C635 + C23724 * C1327 + C49362 * C1333 +
             C23725 * C1829 + C49352 * C1834 + C23726 * C9356 +
             C49334 * C9360) *
                C49047) *
               C23721 +
           ((C23723 * C621 + C49366 * C627 + C23724 * C1320 + C49362 * C1326 +
             C23725 * C1826 + C49352 * C1830 + C23726 * C9355 +
             C49334 * C9358) *
                C114 +
            (C23723 * C628 + C49366 * C636 + C23724 * C1325 + C49362 * C1332 +
             C23725 * C1831 + C49352 * C1835 + C23726 * C9359 +
             C49334 * C9361) *
                C49047) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C410 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C550 +
          ((((C22511 * C722 + C22505 * C727 + C22512 * C1519 + C49092 * C1526) *
                 C114 +
             (C22511 * C728 + C22505 * C737 + C22512 * C1525 + C49092 * C1531) *
                 C49047) *
                C49365 +
            ((C22511 * C723 + C22505 * C729 + C22512 * C1518 + C49092 * C1524) *
                 C114 +
             (C22511 * C730 + C22505 * C738 + C22512 * C1523 + C49092 * C1530) *
                 C49047) *
                C49358 +
            ((C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C114 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49047) *
                C49345 +
            ((C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C114 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C410 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C550 +
          ((((C23723 * C722 + C49366 * C727 + C23724 * C1519 + C49362 * C1526 +
              C23725 * C1983 + C49352 * C1986 + C23726 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C23723 * C728 + C49366 * C737 + C23724 * C1525 + C49362 * C1531 +
              C23725 * C1987 + C49352 * C1992 + C23726 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C23721 +
            ((C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
              C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
              C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C824 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C49002 * C552 +
          ((((C22903 + C22902) * C114 + (C22901 + C22900) * C49047) * C49365 +
            ((C22899 + C22898) * C114 + (C22897 + C22896) * C49047) * C49358 +
            ((C22895 + C22894) * C114 + (C22893 + C22892) * C49047) * C49345 +
            ((C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                 C114 +
             (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22558 + C22559) * C49047 + (C22560 + C22561) * C114) * C49328 +
            ((C22557 + C22556) * C49047 + (C22555 + C22554) * C114) * C49345 +
            ((C22553 + C22552) * C49047 + (C22551 + C22550) * C114) * C49358 +
            ((C22549 + C22548) * C49047 + (C22547 + C22546) * C114) * C49365) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C824 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C49002 * C552 +
          ((((C24083 + C24082 + C24081 + C24080) * C114 +
             (C24079 + C24078 + C24077 + C24076) * C49047) *
                C23721 +
            ((C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
              C23725 * C1517 + C49352 * C1522 + C23726 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
              C23725 * C1521 + C49352 * C1529 + C23726 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23768 + C23769 + C23770 + C23771) * C49047 +
             (C23772 + C23773 + C23774 + C23775) * C114) *
                C48945 +
            ((C23767 + C23766 + C23765 + C23764) * C49047 +
             (C23763 + C23762 + C23761 + C23760) * C114) *
                C23721) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C114 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49047) *
                C49365 +
            ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
            C22570 * C49345 + C22571 * C49328) *
               C824 -
           (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
            ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
            ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
            ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                 C49047 +
             (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                 C114) *
                C49365) *
               C49321) *
              C268 +
          ((((C22511 * C722 + C22505 * C727 + C22512 * C1519 + C49092 * C1526) *
                 C114 +
             (C22511 * C728 + C22505 * C737 + C22512 * C1525 + C49092 * C1531) *
                 C49047) *
                C49365 +
            ((C22511 * C723 + C22505 * C729 + C22512 * C1518 + C49092 * C1524) *
                 C114 +
             (C22511 * C730 + C22505 * C738 + C22512 * C1523 + C49092 * C1530) *
                 C49047) *
                C49358 +
            ((C22511 * C724 + C22505 * C731 + C22512 * C1517 + C49092 * C1522) *
                 C114 +
             (C22511 * C732 + C22505 * C739 + C22512 * C1521 + C49092 * C1529) *
                 C49047) *
                C49345 +
            ((C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C114 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C22726 + C22727) * C49047 + (C22728 + C22729) * C114) * C49328 +
            ((C22730 + C22731) * C49047 + (C22732 + C22733) * C114) * C49345 +
            ((C22734 + C22735) * C49047 + (C22736 + C22737) * C114) * C49358 +
            ((C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49047 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C114) *
                C49365) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
              C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                 C114 +
             (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
              C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                 C49047) *
                C23721 +
            ((C23760 + C23761 + C23762 + C23763) * C114 +
             (C23764 + C23765 + C23766 + C23767) * C49047) *
                C48945) *
               C824 -
           (((C24076 + C24077 + C24078 + C24079) * C49047 +
             (C24080 + C24081 + C24082 + C24083) * C114) *
                C48945 +
            ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 +
              C49352 * C1531 + C23724 * C728 + C49362 * C737 + C23723 * C426 +
              C49366 * C434) *
                 C49047 +
             (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 +
              C49352 * C1526 + C23724 * C722 + C49362 * C727 + C23723 * C416 +
              C49366 * C427) *
                 C114) *
                C23721) *
               C49321) *
              C268 +
          ((((C23723 * C722 + C49366 * C727 + C23724 * C1519 + C49362 * C1526 +
              C23725 * C1983 + C49352 * C1986 + C23726 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C23723 * C728 + C49366 * C737 + C23724 * C1525 + C49362 * C1531 +
              C23725 * C1987 + C49352 * C1992 + C23726 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C23721 +
            ((C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
              C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
              C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C23922 + C23923 + C23924 + C23925) * C49047 +
             (C23926 + C23927 + C23928 + C23929) * C114) *
                C48945 +
            ((C23726 * C1829 + C49334 * C1834 + C23725 * C1327 +
              C49352 * C1333 + C23724 * C626 + C49362 * C635 + C23723 * C286 +
              C49366 * C294) *
                 C49047 +
             (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 +
              C49352 * C1328 + C23724 * C620 + C49362 * C625 + C23723 * C276 +
              C49366 * C287) *
                 C114) *
                C23721) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C114 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49047) *
               C49365 +
           ((C22546 + C22547) * C114 + (C22548 + C22549) * C49047) * C49358 +
           C22570 * C49345 + C22571 * C49328) *
              C970 -
          (((C22892 + C22893) * C49047 + (C22894 + C22895) * C114) * C49328 +
           ((C22896 + C22897) * C49047 + (C22898 + C22899) * C114) * C49345 +
           ((C22900 + C22901) * C49047 + (C22902 + C22903) * C114) * C49358 +
           ((C22512 * C728 + C49092 * C737 + C22511 * C426 + C22505 * C434) *
                C49047 +
            (C22512 * C722 + C49092 * C727 + C22511 * C416 + C22505 * C427) *
                C114) *
               C49365) *
              C971 +
          (((C22511 * C973 + C22505 * C978 + C22512 * C2397 + C49092 * C2403) *
                C114 +
            (C22511 * C979 + C22505 * C988 + C22512 * C2405 + C49092 * C2415) *
                C49047) *
               C49365 +
           ((C22511 * C974 + C22505 * C980 + C22512 * C2399 + C49092 * C2407) *
                C114 +
            (C22511 * C981 + C22505 * C989 + C22512 * C2409 + C49092 * C2417) *
                C49047) *
               C49358 +
           ((C22511 * C975 + C22505 * C982 + C22512 * C2401 + C49092 * C2411) *
                C114 +
            (C22511 * C983 + C22505 * C990 + C22512 * C2413 + C49092 * C2419) *
                C49047) *
               C49345 +
           ((C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                C114 +
            (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                C49047) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C114 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C49047) *
               C23721 +
           ((C23760 + C23761 + C23762 + C23763) * C114 +
            (C23764 + C23765 + C23766 + C23767) * C49047) *
               C48945) *
              C970 -
          (((C24076 + C24077 + C24078 + C24079) * C49047 +
            (C24080 + C24081 + C24082 + C24083) * C114) *
               C48945 +
           ((C23726 * C1987 + C49334 * C1992 + C23725 * C1525 + C49352 * C1531 +
             C23724 * C728 + C49362 * C737 + C23723 * C426 + C49366 * C434) *
                C49047 +
            (C23726 * C1983 + C49334 * C1986 + C23725 * C1519 + C49352 * C1526 +
             C23724 * C722 + C49362 * C727 + C23723 * C416 + C49366 * C427) *
                C114) *
               C23721) *
              C971 +
          (((C23723 * C973 + C49366 * C978 + C23724 * C2397 + C49362 * C2403 +
             C23725 * C2398 + C49352 * C2404 + C23726 * C9912 +
             C49334 * C9914) *
                C114 +
            (C23723 * C979 + C49366 * C988 + C23724 * C2405 + C49362 * C2415 +
             C23725 * C2406 + C49352 * C2416 + C23726 * C9916 +
             C49334 * C9918) *
                C49047) *
               C23721 +
           ((C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C114 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49047) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C31304 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C31302 +
                    (C30085 + C30086 + C30087) * C31305 +
                    (C30088 + C30089 + C30090) * C49134) *
                       C49269 +
                   ((C26687 + C26688 + C26689) * C31304 +
                    (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                    C30092 * C49134) *
                       C48945) *
                      C49019 * C49002 * C110 -
                  (((C27064 + C27065 + C27066) * C49134 +
                    (C27067 + C27068 + C27069) * C31305 +
                    (C26698 + C26697 + C26696) * C31302 +
                    (C26695 + C26694 + C26693) * C31304) *
                       C48945 +
                   (C30099 * C49134 + C30100 * C31305 +
                    (C26692 + C26691 + C26690) * C31302 +
                    (C26689 + C26688 + C26687) * C31304) *
                       C49269) *
                      C49019 * C49002 * C111 +
                  ((C26707 * C31304 + C26708 * C31302 +
                    (C27069 + C27068 + C27067) * C31305 +
                    (C27066 + C27065 + C27064) * C49134) *
                       C49269 +
                   ((C26704 + C26703 + C26702) * C31304 +
                    (C26701 + C26700 + C26699) * C31302 +
                    (C47957 * C413 + C49088 * C421 + C47949 * C725 +
                     C49095 * C733 + C47963 * C1520 + C26643 * C1527) *
                        C31305 +
                    (C47957 * C420 + C49088 * C431 + C47949 * C734 +
                     C49095 * C740 + C47963 * C1528 + C26643 * C1532) *
                        C49134) *
                       C48945) *
                      C49019 * C49002 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C49019 * C268 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C31305 +
                     (C26888 + C26889 + C26890) * C31302 +
                     (C26891 + C26892 + C26893) * C31304) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C31305 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C31302 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C31304) *
                        C49269) *
                       C49019 * C49319) *
                      C270 +
                  ((((C26893 + C26892 + C26891) * C31304 +
                     (C26890 + C26889 + C26888) * C31302 +
                     (C29862 + C29861 + C29860) * C31305 +
                     (C29859 + C29858 + C29857) * C49134) *
                        C49269 +
                    ((C26887 + C26886 + C26885) * C31304 +
                     (C26884 + C26883 + C26882) * C31302 +
                     (C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                      C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                         C31305 +
                     (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                      C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                         C49134) *
                        C48945) *
                       C49019 * C49319 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C31305 +
                     (C26698 + C26697 + C26696) * C31302 +
                     (C26695 + C26694 + C26693) * C31304) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C31305 +
                     (C26692 + C26691 + C26690) * C31302 +
                     (C26689 + C26688 + C26687) * C31304) *
                        C49269) *
                       C49019 * C268) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C410 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C31305 + C30099 * C31302 +
                     C30100 * C31304) *
                        C48945 +
                    ((C31199 + C31200 + C31201) * C49134 +
                     (C31202 + C31203 + C31204) * C31305 +
                     (C30090 + C30089 + C30088) * C31302 +
                     (C30087 + C30086 + C30085) * C31304) *
                        C49269) *
                       C49321) *
                      C49002 * C270 +
                  (((C30091 * C31304 + C30092 * C31302 +
                     (C30098 + C30097 + C30096) * C31305 +
                     (C30095 + C30094 + C30093) * C49134) *
                        C49269 +
                    ((C27069 + C27068 + C27067) * C31304 +
                     (C27066 + C27065 + C27064) * C31302 +
                     (C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                      C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                         C31305 +
                     (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                      C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C31305 +
                     (C26698 + C26697 + C26696) * C31302 +
                     (C26695 + C26694 + C26693) * C31304) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C31305 +
                     (C26692 + C26691 + C26690) * C31302 +
                     (C26689 + C26688 + C26687) * C31304) *
                        C49269) *
                       C410) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C49019 * C550 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C31305 +
                     (C26888 + C26889 + C26890) * C31302 +
                     (C26891 + C26892 + C26893) * C31304) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C31305 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C31302 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C31304) *
                        C49269) *
                       C49019 * C49319) *
                      C552 +
                  ((((C26893 + C26892 + C26891) * C31304 +
                     (C26890 + C26889 + C26888) * C31302 +
                     (C29862 + C29861 + C29860) * C31305 +
                     (C29859 + C29858 + C29857) * C49134) *
                        C49269 +
                    ((C26887 + C26886 + C26885) * C31304 +
                     (C26884 + C26883 + C26882) * C31302 +
                     (C47957 * C724 + C49088 * C731 + C47949 * C1517 +
                      C49095 * C1522 + C47963 * C1985 + C26643 * C1990) *
                         C31305 +
                     (C47957 * C732 + C49088 * C739 + C47949 * C1521 +
                      C49095 * C1529 + C47963 * C1991 + C26643 * C1994) *
                         C49134) *
                        C48945) *
                       C49019 * C49319 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C31305 +
                     (C26698 + C26697 + C26696) * C31302 +
                     (C26695 + C26694 + C26693) * C31304) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C31305 +
                     (C26692 + C26691 + C26690) * C31302 +
                     (C26689 + C26688 + C26687) * C31304) *
                        C49269) *
                       C49019 * C550) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C31304 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C31302 +
                    (C30085 + C30086 + C30087) * C31305 +
                    (C30088 + C30089 + C30090) * C49134) *
                       C49269 +
                   ((C26687 + C26688 + C26689) * C31304 +
                    (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                    C30092 * C49134) *
                       C48945) *
                      C49019 * C616 -
                  (((C29857 + C29858 + C29859) * C49134 +
                    (C29860 + C29861 + C29862) * C31305 +
                    (C26888 + C26889 + C26890) * C31302 +
                    (C26891 + C26892 + C26893) * C31304) *
                       C48945 +
                   ((C30652 + C30651 + C30650) * C49134 +
                    (C30649 + C30648 + C30647) * C31305 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C31302 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C31304) *
                       C49269) *
                      C49019 * C617 +
                  (((C47957 * C620 + C49088 * C625 + C47949 * C1321 +
                     C49095 * C1328 + C47963 * C1825 + C26643 * C1828) *
                        C31304 +
                    (C47957 * C626 + C49088 * C635 + C47949 * C1327 +
                     C49095 * C1333 + C47963 * C1829 + C26643 * C1834) *
                        C31302 +
                    (C47957 * C1519 + C49088 * C1526 + C47949 * C1983 +
                     C49095 * C1986 + C47963 * C9444 + C26643 * C9447) *
                        C31305 +
                    (C47957 * C1525 + C49088 * C1531 + C47949 * C1987 +
                     C49095 * C1992 + C47963 * C9446 + C26643 * C9450) *
                        C49134) *
                       C49269 +
                   ((C47957 * C621 + C49088 * C627 + C47949 * C1320 +
                     C49095 * C1326 + C47963 * C1826 + C26643 * C1830) *
                        C31304 +
                    (C47957 * C628 + C49088 * C636 + C47949 * C1325 +
                     C49095 * C1332 + C47963 * C1831 + C26643 * C1835) *
                        C31302 +
                    (C47957 * C1518 + C49088 * C1524 + C47949 * C1984 +
                     C49095 * C1988 + C47963 * C9445 + C26643 * C9448) *
                        C31305 +
                    (C47957 * C1523 + C49088 * C1530 + C47949 * C1989 +
                     C49095 * C1993 + C47963 * C9449 + C26643 * C9451) *
                        C49134) *
                       C48945) *
                      C49019 * C618) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C410 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C31305 + C30099 * C31302 +
                     C30100 * C31304) *
                        C48945 +
                    ((C31199 + C31200 + C31201) * C49134 +
                     (C31202 + C31203 + C31204) * C31305 +
                     (C30090 + C30089 + C30088) * C31302 +
                     (C30087 + C30086 + C30085) * C31304) *
                        C49269) *
                       C49321) *
                      C550 +
                  ((((C30647 + C30648 + C30649) * C31304 +
                     (C30650 + C30651 + C30652) * C31302 +
                     (C47957 * C2397 + C49088 * C2403 + C47949 * C2398 +
                      C49095 * C2404 + C47963 * C9912 + C26643 * C9914) *
                         C31305 +
                     (C47957 * C2405 + C49088 * C2415 + C47949 * C2406 +
                      C49095 * C2416 + C47963 * C9916 + C26643 * C9918) *
                         C49134) *
                        C49269 +
                    ((C29862 + C29861 + C29860) * C31304 +
                     (C29859 + C29858 + C29857) * C31302 +
                     (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                      C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                         C31305 +
                     (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                      C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C31305 +
                     (C26888 + C26889 + C26890) * C31302 +
                     (C26891 + C26892 + C26893) * C31304) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C31305 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C31302 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C31304) *
                        C49269) *
                       C410) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C824 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C31305 + C30099 * C31302 +
                     C30100 * C31304) *
                        C48945 +
                    ((C31199 + C31200 + C31201) * C49134 +
                     (C31202 + C31203 + C31204) * C31305 +
                     (C30090 + C30089 + C30088) * C31302 +
                     (C30087 + C30086 + C30085) * C31304) *
                        C49269) *
                       C49321) *
                      C49002 * C552 +
                  (((C30091 * C31304 + C30092 * C31302 +
                     (C30098 + C30097 + C30096) * C31305 +
                     (C30095 + C30094 + C30093) * C49134) *
                        C49269 +
                    ((C27069 + C27068 + C27067) * C31304 +
                     (C27066 + C27065 + C27064) * C31302 +
                     (C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                      C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                         C31305 +
                     (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                      C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C27064 + C27065 + C27066) * C49134 +
                     (C27067 + C27068 + C27069) * C31305 +
                     (C26698 + C26697 + C26696) * C31302 +
                     (C26695 + C26694 + C26693) * C31304) *
                        C48945 +
                    (C30099 * C49134 + C30100 * C31305 +
                     (C26692 + C26691 + C26690) * C31302 +
                     (C26689 + C26688 + C26687) * C31304) *
                        C49269) *
                       C824) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                      C49095 * C287 + C47963 * C620 + C26643 * C625) *
                         C31304 +
                     (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                      C49095 * C294 + C47963 * C626 + C26643 * C635) *
                         C31302 +
                     (C30085 + C30086 + C30087) * C31305 +
                     (C30088 + C30089 + C30090) * C49134) *
                        C49269 +
                    ((C26687 + C26688 + C26689) * C31304 +
                     (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                     C30092 * C49134) *
                        C48945) *
                       C824 -
                   (((C30093 + C30094 + C30095) * C49134 +
                     (C30096 + C30097 + C30098) * C31305 + C30099 * C31302 +
                     C30100 * C31304) *
                        C48945 +
                    ((C31199 + C31200 + C31201) * C49134 +
                     (C31202 + C31203 + C31204) * C31305 +
                     (C30090 + C30089 + C30088) * C31302 +
                     (C30087 + C30086 + C30085) * C31304) *
                        C49269) *
                       C49321) *
                      C268 +
                  ((((C30647 + C30648 + C30649) * C31304 +
                     (C30650 + C30651 + C30652) * C31302 +
                     (C47957 * C2397 + C49088 * C2403 + C47949 * C2398 +
                      C49095 * C2404 + C47963 * C9912 + C26643 * C9914) *
                         C31305 +
                     (C47957 * C2405 + C49088 * C2415 + C47949 * C2406 +
                      C49095 * C2416 + C47963 * C9916 + C26643 * C9918) *
                         C49134) *
                        C49269 +
                    ((C29862 + C29861 + C29860) * C31304 +
                     (C29859 + C29858 + C29857) * C31302 +
                     (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                      C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                         C31305 +
                     (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                      C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                         C49134) *
                        C48945) *
                       C49321 -
                   (((C29857 + C29858 + C29859) * C49134 +
                     (C29860 + C29861 + C29862) * C31305 +
                     (C26888 + C26889 + C26890) * C31302 +
                     (C26891 + C26892 + C26893) * C31304) *
                        C48945 +
                    ((C30652 + C30651 + C30650) * C49134 +
                     (C30649 + C30648 + C30647) * C31305 +
                     (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                      C49095 * C635 + C47957 * C286 + C49088 * C294) *
                         C31302 +
                     (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                      C49095 * C625 + C47957 * C276 + C49088 * C287) *
                         C31304) *
                        C49269) *
                       C824) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C31304 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C31302 +
                    (C30085 + C30086 + C30087) * C31305 +
                    (C30088 + C30089 + C30090) * C49134) *
                       C49269 +
                   ((C26687 + C26688 + C26689) * C31304 +
                    (C26690 + C26691 + C26692) * C31302 + C30091 * C31305 +
                    C30092 * C49134) *
                       C48945) *
                      C970 -
                  (((C30093 + C30094 + C30095) * C49134 +
                    (C30096 + C30097 + C30098) * C31305 + C30099 * C31302 +
                    C30100 * C31304) *
                       C48945 +
                   ((C31199 + C31200 + C31201) * C49134 +
                    (C31202 + C31203 + C31204) * C31305 +
                    (C30090 + C30089 + C30088) * C31302 +
                    (C30087 + C30086 + C30085) * C31304) *
                       C49269) *
                      C971 +
                  (((C31204 + C31203 + C31202) * C31304 +
                    (C31201 + C31200 + C31199) * C31302 +
                    (C47957 * C2912 + C49088 * C2919 + C47949 * C3364 +
                     C49095 * C3367 + C47963 * C10326 + C26643 * C10329) *
                        C31305 +
                    (C47957 * C2918 + C49088 * C2924 + C47949 * C3368 +
                     C49095 * C3373 + C47963 * C10328 + C26643 * C10332) *
                        C49134) *
                       C49269 +
                   ((C30098 + C30097 + C30096) * C31304 +
                    (C30095 + C30094 + C30093) * C31302 +
                    (C47957 * C2911 + C49088 * C2917 + C47949 * C3365 +
                     C49095 * C3369 + C47963 * C10327 + C26643 * C10330) *
                        C31305 +
                    (C47957 * C2916 + C49088 * C2923 + C47949 * C3370 +
                     C49095 * C3374 + C47963 * C10331 + C26643 * C10333) *
                        C49134) *
                       C48945) *
                      C972) *
                 C49002 * C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C48044 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49130 +
                   (C30085 + C30086 + C30087) * C48036 +
                   (C30088 + C30089 + C30090) * C49137 +
                   (C31204 + C31203 + C31202) * C48050 +
                   (C31201 + C31200 + C31199) * C36791) *
                      C48935 * C49019 * C49002 * C110 -
                  ((C30093 + C30094 + C30095) * C36791 +
                   (C30096 + C30097 + C30098) * C48050 + C30099 * C49137 +
                   C30100 * C48036 + (C26692 + C26691 + C26690) * C49130 +
                   (C26689 + C26688 + C26687) * C48044) *
                      C48935 * C49019 * C49002 * C111 +
                  (C26707 * C48044 + C26708 * C49130 +
                   (C27069 + C27068 + C27067) * C48036 +
                   (C27066 + C27065 + C27064) * C49137 +
                   (C47957 * C975 + C49088 * C982 + C47949 * C2401 +
                    C49095 * C2411 + C47963 * C2402 + C26643 * C2412) *
                       C48050 +
                   (C47957 * C983 + C49088 * C990 + C47949 * C2413 +
                    C49095 * C2419 + C47963 * C2414 + C26643 * C2420) *
                       C36791) *
                      C48935 * C49019 * C49002 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C49019 * C268 -
                   ((C47963 * C9916 + C26643 * C9918 + C47949 * C2406 +
                     C49095 * C2416 + C47957 * C2405 + C49088 * C2415) *
                        C36791 +
                    (C47963 * C9912 + C26643 * C9914 + C47949 * C2398 +
                     C49095 * C2404 + C47957 * C2397 + C49088 * C2403) *
                        C48050 +
                    (C30652 + C30651 + C30650) * C49137 +
                    (C30649 + C30648 + C30647) * C48036 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49130 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C48044) *
                       C48935 * C49019 * C49319) *
                      C270 +
                  (((C26893 + C26892 + C26891) * C48044 +
                    (C26890 + C26889 + C26888) * C49130 +
                    (C29862 + C29861 + C29860) * C48036 +
                    (C29859 + C29858 + C29857) * C49137 +
                    (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                     C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                        C48050 +
                    (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                     C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                        C36791) *
                       C48935 * C49019 * C49319 -
                   ((C30093 + C30094 + C30095) * C36791 +
                    (C30096 + C30097 + C30098) * C48050 + C30099 * C49137 +
                    C30100 * C48036 + (C26692 + C26691 + C26690) * C49130 +
                    (C26689 + C26688 + C26687) * C48044) *
                       C48935 * C49019 * C268) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C410 -
                   ((C47963 * C10328 + C26643 * C10332 + C47949 * C3368 +
                     C49095 * C3373 + C47957 * C2918 + C49088 * C2924) *
                        C36791 +
                    (C47963 * C10326 + C26643 * C10329 + C47949 * C3364 +
                     C49095 * C3367 + C47957 * C2912 + C49088 * C2919) *
                        C48050 +
                    (C31199 + C31200 + C31201) * C49137 +
                    (C31202 + C31203 + C31204) * C48036 +
                    (C30090 + C30089 + C30088) * C49130 +
                    (C30087 + C30086 + C30085) * C48044) *
                       C48935 * C49321) *
                      C49002 * C270 +
                  ((C30091 * C48044 + C30092 * C49130 +
                    (C30098 + C30097 + C30096) * C48036 +
                    (C30095 + C30094 + C30093) * C49137 +
                    (C47957 * C2911 + C49088 * C2917 + C47949 * C3365 +
                     C49095 * C3369 + C47963 * C10327 + C26643 * C10330) *
                        C48050 +
                    (C47957 * C2916 + C49088 * C2923 + C47949 * C3370 +
                     C49095 * C3374 + C47963 * C10331 + C26643 * C10333) *
                        C36791) *
                       C48935 * C49321 -
                   ((C30093 + C30094 + C30095) * C36791 +
                    (C30096 + C30097 + C30098) * C48050 + C30099 * C49137 +
                    C30100 * C48036 + (C26692 + C26691 + C26690) * C49130 +
                    (C26689 + C26688 + C26687) * C48044) *
                       C48935 * C410) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C49019 * C550 -
                   ((C47963 * C9916 + C26643 * C9918 + C47949 * C2406 +
                     C49095 * C2416 + C47957 * C2405 + C49088 * C2415) *
                        C36791 +
                    (C47963 * C9912 + C26643 * C9914 + C47949 * C2398 +
                     C49095 * C2404 + C47957 * C2397 + C49088 * C2403) *
                        C48050 +
                    (C30652 + C30651 + C30650) * C49137 +
                    (C30649 + C30648 + C30647) * C48036 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49130 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C48044) *
                       C48935 * C49019 * C49319) *
                      C552 +
                  (((C26893 + C26892 + C26891) * C48044 +
                    (C26890 + C26889 + C26888) * C49130 +
                    (C29862 + C29861 + C29860) * C48036 +
                    (C29859 + C29858 + C29857) * C49137 +
                    (C47957 * C2399 + C49088 * C2407 + C47949 * C2400 +
                     C49095 * C2408 + C47963 * C10176 + C26643 * C10177) *
                        C48050 +
                    (C47957 * C2409 + C49088 * C2417 + C47949 * C2410 +
                     C49095 * C2418 + C47963 * C10178 + C26643 * C10179) *
                        C36791) *
                       C48935 * C49019 * C49319 -
                   ((C30093 + C30094 + C30095) * C36791 +
                    (C30096 + C30097 + C30098) * C48050 + C30099 * C49137 +
                    C30100 * C48036 + (C26692 + C26691 + C26690) * C49130 +
                    (C26689 + C26688 + C26687) * C48044) *
                       C48935 * C49019 * C550) *
                      C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C48044 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49130 +
                   (C30085 + C30086 + C30087) * C48036 +
                   (C30088 + C30089 + C30090) * C49137 +
                   (C31204 + C31203 + C31202) * C48050 +
                   (C31201 + C31200 + C31199) * C36791) *
                      C48935 * C49019 * C616 -
                  ((C47963 * C9916 + C26643 * C9918 + C47949 * C2406 +
                    C49095 * C2416 + C47957 * C2405 + C49088 * C2415) *
                       C36791 +
                   (C47963 * C9912 + C26643 * C9914 + C47949 * C2398 +
                    C49095 * C2404 + C47957 * C2397 + C49088 * C2403) *
                       C48050 +
                   (C30652 + C30651 + C30650) * C49137 +
                   (C30649 + C30648 + C30647) * C48036 +
                   (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                    C49095 * C635 + C47957 * C286 + C49088 * C294) *
                       C49130 +
                   (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                    C49095 * C625 + C47957 * C276 + C49088 * C287) *
                       C48044) *
                      C48935 * C49019 * C617 +
                  ((C47957 * C620 + C49088 * C625 + C47949 * C1321 +
                    C49095 * C1328 + C47963 * C1825 + C26643 * C1828) *
                       C48044 +
                   (C47957 * C626 + C49088 * C635 + C47949 * C1327 +
                    C49095 * C1333 + C47963 * C1829 + C26643 * C1834) *
                       C49130 +
                   (C47957 * C1519 + C49088 * C1526 + C47949 * C1983 +
                    C49095 * C1986 + C47963 * C9444 + C26643 * C9447) *
                       C48036 +
                   (C47957 * C1525 + C49088 * C1531 + C47949 * C1987 +
                    C49095 * C1992 + C47963 * C9446 + C26643 * C9450) *
                       C49137 +
                   (C47957 * C2398 + C49088 * C2404 + C47949 * C9912 +
                    C49095 * C9914 + C47963 * C9913 + C26643 * C9915) *
                       C48050 +
                   (C47957 * C2406 + C49088 * C2416 + C47949 * C9916 +
                    C49095 * C9918 + C47963 * C9917 + C26643 * C9919) *
                       C36791) *
                      C48935 * C49019 * C618) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C410 -
                   ((C47963 * C10328 + C26643 * C10332 + C47949 * C3368 +
                     C49095 * C3373 + C47957 * C2918 + C49088 * C2924) *
                        C36791 +
                    (C47963 * C10326 + C26643 * C10329 + C47949 * C3364 +
                     C49095 * C3367 + C47957 * C2912 + C49088 * C2919) *
                        C48050 +
                    (C31199 + C31200 + C31201) * C49137 +
                    (C31202 + C31203 + C31204) * C48036 +
                    (C30090 + C30089 + C30088) * C49130 +
                    (C30087 + C30086 + C30085) * C48044) *
                       C48935 * C49321) *
                      C550 +
                  (((C30647 + C30648 + C30649) * C48044 +
                    (C30650 + C30651 + C30652) * C49130 +
                    (C47416 + C47417 + C47418) * C48036 +
                    (C47419 + C47420 + C47421) * C49137 +
                    (C47957 * C3364 + C49088 * C3367 + C47949 * C10326 +
                     C49095 * C10329 + C47963 * C10790 + C26643 * C10791) *
                        C48050 +
                    (C47957 * C3368 + C49088 * C3373 + C47949 * C10328 +
                     C49095 * C10332 + C47963 * C10792 + C26643 * C10793) *
                        C36791) *
                       C48935 * C49321 -
                   ((C47421 + C47420 + C47419) * C36791 +
                    (C47418 + C47417 + C47416) * C48050 +
                    (C30652 + C30651 + C30650) * C49137 +
                    (C30649 + C30648 + C30647) * C48036 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49130 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C48044) *
                       C48935 * C410) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C824 -
                   ((C47963 * C10328 + C26643 * C10332 + C47949 * C3368 +
                     C49095 * C3373 + C47957 * C2918 + C49088 * C2924) *
                        C36791 +
                    (C47963 * C10326 + C26643 * C10329 + C47949 * C3364 +
                     C49095 * C3367 + C47957 * C2912 + C49088 * C2919) *
                        C48050 +
                    (C31199 + C31200 + C31201) * C49137 +
                    (C31202 + C31203 + C31204) * C48036 +
                    (C30090 + C30089 + C30088) * C49130 +
                    (C30087 + C30086 + C30085) * C48044) *
                       C48935 * C49321) *
                      C49002 * C552 +
                  ((C30091 * C48044 + C30092 * C49130 +
                    (C30098 + C30097 + C30096) * C48036 +
                    (C30095 + C30094 + C30093) * C49137 +
                    (C47957 * C2911 + C49088 * C2917 + C47949 * C3365 +
                     C49095 * C3369 + C47963 * C10327 + C26643 * C10330) *
                        C48050 +
                    (C47957 * C2916 + C49088 * C2923 + C47949 * C3370 +
                     C49095 * C3374 + C47963 * C10331 + C26643 * C10333) *
                        C36791) *
                       C48935 * C49321 -
                   ((C30093 + C30094 + C30095) * C36791 +
                    (C30096 + C30097 + C30098) * C48050 + C30099 * C49137 +
                    C30100 * C48036 + (C26692 + C26691 + C26690) * C49130 +
                    (C26689 + C26688 + C26687) * C48044) *
                       C48935 * C824) *
                      C49002 * C49317)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                     C49095 * C287 + C47963 * C620 + C26643 * C625) *
                        C48044 +
                    (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                     C49095 * C294 + C47963 * C626 + C26643 * C635) *
                        C49130 +
                    (C30085 + C30086 + C30087) * C48036 +
                    (C30088 + C30089 + C30090) * C49137 +
                    (C31204 + C31203 + C31202) * C48050 +
                    (C31201 + C31200 + C31199) * C36791) *
                       C48935 * C824 -
                   ((C47963 * C10328 + C26643 * C10332 + C47949 * C3368 +
                     C49095 * C3373 + C47957 * C2918 + C49088 * C2924) *
                        C36791 +
                    (C47963 * C10326 + C26643 * C10329 + C47949 * C3364 +
                     C49095 * C3367 + C47957 * C2912 + C49088 * C2919) *
                        C48050 +
                    (C31199 + C31200 + C31201) * C49137 +
                    (C31202 + C31203 + C31204) * C48036 +
                    (C30090 + C30089 + C30088) * C49130 +
                    (C30087 + C30086 + C30085) * C48044) *
                       C48935 * C49321) *
                      C268 +
                  (((C30647 + C30648 + C30649) * C48044 +
                    (C30650 + C30651 + C30652) * C49130 +
                    (C47416 + C47417 + C47418) * C48036 +
                    (C47419 + C47420 + C47421) * C49137 +
                    (C47957 * C3364 + C49088 * C3367 + C47949 * C10326 +
                     C49095 * C10329 + C47963 * C10790 + C26643 * C10791) *
                        C48050 +
                    (C47957 * C3368 + C49088 * C3373 + C47949 * C10328 +
                     C49095 * C10332 + C47963 * C10792 + C26643 * C10793) *
                        C36791) *
                       C48935 * C49321 -
                   ((C47421 + C47420 + C47419) * C36791 +
                    (C47418 + C47417 + C47416) * C48050 +
                    (C30652 + C30651 + C30650) * C49137 +
                    (C30649 + C30648 + C30647) * C48036 +
                    (C47963 * C1327 + C26643 * C1333 + C47949 * C626 +
                     C49095 * C635 + C47957 * C286 + C49088 * C294) *
                        C49130 +
                    (C47963 * C1321 + C26643 * C1328 + C47949 * C620 +
                     C49095 * C625 + C47957 * C276 + C49088 * C287) *
                        C48044) *
                       C48935 * C824) *
                      C49319) *
                 C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C47957 * C115 + C49088 * C122 + C47949 * C276 +
                    C49095 * C287 + C47963 * C620 + C26643 * C625) *
                       C48044 +
                   (C47957 * C123 + C49088 * C136 + C47949 * C286 +
                    C49095 * C294 + C47963 * C626 + C26643 * C635) *
                       C49130 +
                   (C30085 + C30086 + C30087) * C48036 +
                   (C30088 + C30089 + C30090) * C49137 + C47838 * C48050 +
                   C47839 * C36791) *
                      C48935 * C970 -
                  ((C47840 + C47841 + C47842) * C36791 +
                   (C47843 + C47844 + C47845) * C48050 +
                   (C31199 + C31200 + C31201) * C49137 +
                   (C31202 + C31203 + C31204) * C48036 +
                   (C30090 + C30089 + C30088) * C49130 +
                   (C30087 + C30086 + C30085) * C48044) *
                      C48935 * C971 +
                  (C47838 * C48044 + C47839 * C49130 +
                   (C47845 + C47844 + C47843) * C48036 +
                   (C47842 + C47841 + C47840) * C49137 +
                   (C47957 * C3790 + C49088 * C3793 + C47949 * C11232 +
                    C49095 * C11234 + C47963 * C11233 + C26643 * C11235) *
                       C48050 +
                   (C47957 * C3794 + C49088 * C3799 + C47949 * C11236 +
                    C49095 * C11238 + C47963 * C11237 + C26643 * C11239) *
                       C36791) *
                      C48935 * C972) *
                 C49002 * C48968) /
                (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C23723 * C416 + C49366 * C427 + C23724 * C722 + C49362 * C727 +
            C23725 * C1519 + C49352 * C1526 + C23726 * C1983 + C49334 * C1986) *
               C31305 +
           (C23723 * C426 + C49366 * C434 + C23724 * C728 + C49362 * C737 +
            C23725 * C1525 + C49352 * C1531 + C23726 * C1987 + C49334 * C1992) *
               C49134) *
              C48935 * C49019 * C49002 * C110 -
          ((C24076 + C24077 + C24078 + C24079) * C49134 +
           (C24080 + C24081 + C24082 + C24083) * C31305 +
           (C23767 + C23766 + C23765 + C23764) * C31302 +
           (C23763 + C23762 + C23761 + C23760) * C31304) *
              C48935 * C49019 * C49002 * C111 +
          ((C23775 + C23774 + C23773 + C23772) * C31304 +
           (C23771 + C23770 + C23769 + C23768) * C31302 +
           (C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
            C23725 * C1517 + C49352 * C1522 + C23726 * C1985 + C49334 * C1990) *
               C31305 +
           (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
            C23725 * C1521 + C49352 * C1529 + C23726 * C1991 + C49334 * C1994) *
               C49134) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C49019 * C49002 * C110 -
          (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
            (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
               C49311 +
           (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
            (C22551 + C22550) * C31304) *
               C49343 +
           (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
            (C22547 + C22546) * C31304) *
               C49356) *
              C49019 * C49002 * C111 +
          (C39693 * C49356 +
           (C22564 * C31304 + C22565 * C31302 + (C22895 + C22894) * C31305 +
            (C22893 + C22892) * C49134) *
               C49343 +
           ((C22561 + C22560) * C31304 + (C22559 + C22558) * C31302 +
            (C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                C31305 +
            (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                C49134) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
               C34058 +
           (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
               C49367 +
           (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
           C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
           (C26529 + C26528) * C49340) *
              C48935 * C49019 * C49002 * C110 -
          ((C25422 + C25423) * C49340 + (C25424 + C25425) * C34061 +
           C25410 * C49355 + C25411 * C34060 + C25412 * C49364 +
           C25413 * C34059 + (C22549 + C22548) * C49367 +
           (C22547 + C22546) * C34058) *
              C48935 * C49019 * C49002 * C111 +
          (C22562 * C34058 + C22563 * C49367 + C28028 * C34059 +
           C28029 * C49364 + (C24969 + C24968) * C34060 +
           (C24967 + C24966) * C49355 +
           (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 + C49092 * C3371) *
               C34061 +
           (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 + C49092 * C3375) *
               C49340) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C23723 * C416 + C49366 * C427 + C23724 * C722 + C49362 * C727 +
             C23725 * C1519 + C49352 * C1526 + C23726 * C1983 +
             C49334 * C1986) *
                C31305 +
            (C23723 * C426 + C49366 * C434 + C23724 * C728 + C49362 * C737 +
             C23725 * C1525 + C49352 * C1531 + C23726 * C1987 +
             C49334 * C1992) *
                C49134) *
               C48935 * C49019 * C268 -
           ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
             C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
                C49134 +
            (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
             C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
                C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C23929 + C23928 + C23927 + C23926) * C31304 +
            (C23925 + C23924 + C23923 + C23922) * C31302 +
            (C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
             C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
             C49334 * C9448) *
                C31305 +
            (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
             C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C49019 * C268 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C31304 + (C22735 + C22734) * C31302 +
             (C25187 + C25186) * C31305 + (C25185 + C25184) * C49134) *
                C49356 +
            ((C22733 + C22732) * C31304 + (C22731 + C22730) * C31302 +
             (C28240 + C28239) * C31305 + (C28238 + C28237) * C49134) *
                C49343 +
            ((C22729 + C22728) * C31304 + (C22727 + C22726) * C31302 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C31305 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C49019 * C268 -
           ((C22512 * C10328 + C49092 * C10332 + C22511 * C3368 +
             C22505 * C3373) *
                C49340 +
            (C22512 * C10326 + C49092 * C10329 + C22511 * C3364 +
             C22505 * C3367) *
                C34061 +
            (C25983 + C25982) * C49355 + (C25981 + C25980) * C34060 +
            (C25979 + C25978) * C49364 + (C25977 + C25976) * C34059 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49367 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C34058) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C22737 + C22736) * C34058 + (C22735 + C22734) * C49367 +
            (C25187 + C25186) * C34059 + (C25185 + C25184) * C49364 +
            (C25183 + C25182) * C34060 + (C25181 + C25180) * C49355 +
            (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
             C49092 * C10330) *
                C34061 +
            (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
             C49092 * C10333) *
                C49340) *
               C48935 * C49019 * C49319 -
           ((C25422 + C25423) * C49340 + (C25424 + C25425) * C34061 +
            C25410 * C49355 + C25411 * C34060 + C25412 * C49364 +
            C25413 * C34059 + (C22549 + C22548) * C49367 +
            (C22547 + C22546) * C34058) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C410 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C24083 + C24082 + C24081 + C24080) * C31304 +
            (C24079 + C24078 + C24077 + C24076) * C31302 +
            (C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C31305 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C49002 * C270 +
          (((C25398 * C31304 + C25399 * C31302 + C25400 * C31305 +
             C25401 * C49134) *
                C49356 +
            (C28028 * C31304 + C28029 * C31302 + (C24969 + C24968) * C31305 +
             (C24967 + C24966) * C49134) *
                C49343 +
            ((C22895 + C22894) * C31304 + (C22893 + C22892) * C31302 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C31305 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C410 -
           ((C22512 * C11236 + C49092 * C11238 + C22511 * C3794 +
             C22505 * C3799) *
                C49340 +
            (C22512 * C11232 + C49092 * C11234 + C22511 * C3790 +
             C22505 * C3793) *
                C34061 +
            (C26528 + C26529) * C49355 + (C26530 + C26531) * C34060 +
            (C25421 + C25420) * C49364 + (C25419 + C25418) * C34059 +
            (C25417 + C25416) * C49367 + (C25415 + C25414) * C34058) *
               C48935 * C49321) *
              C49002 * C270 +
          ((C25398 * C34058 + C25399 * C49367 + C25400 * C34059 +
            C25401 * C49364 + (C25425 + C25424) * C34060 +
            (C25423 + C25422) * C49355 +
            (C22511 * C3791 + C22505 * C3795 + C22512 * C17947 +
             C49092 * C17948) *
                C34061 +
            (C22511 * C3796 + C22505 * C3800 + C22512 * C17949 +
             C49092 * C17950) *
                C49340) *
               C48935 * C49321 -
           ((C25422 + C25423) * C49340 + (C25424 + C25425) * C34061 +
            C25410 * C49355 + C25411 * C34060 + C25412 * C49364 +
            C25413 * C34059 + (C22549 + C22548) * C49367 +
            (C22547 + C22546) * C34058) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C49019 * C550 -
           ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
             C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
                C49134 +
            (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
             C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
                C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C23929 + C23928 + C23927 + C23926) * C31304 +
            (C23925 + C23924 + C23923 + C23922) * C31302 +
            (C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
             C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
             C49334 * C9448) *
                C31305 +
            (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
             C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C49019 * C550 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C31304 + (C22735 + C22734) * C31302 +
             (C25187 + C25186) * C31305 + (C25185 + C25184) * C49134) *
                C49356 +
            ((C22733 + C22732) * C31304 + (C22731 + C22730) * C31302 +
             (C28240 + C28239) * C31305 + (C28238 + C28237) * C49134) *
                C49343 +
            ((C22729 + C22728) * C31304 + (C22727 + C22726) * C31302 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C31305 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C49019 * C550 -
           ((C22512 * C10328 + C49092 * C10332 + C22511 * C3368 +
             C22505 * C3373) *
                C49340 +
            (C22512 * C10326 + C49092 * C10329 + C22511 * C3364 +
             C22505 * C3367) *
                C34061 +
            (C25983 + C25982) * C49355 + (C25981 + C25980) * C34060 +
            (C25979 + C25978) * C49364 + (C25977 + C25976) * C34059 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49367 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C34058) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C22737 + C22736) * C34058 + (C22735 + C22734) * C49367 +
            (C25187 + C25186) * C34059 + (C25185 + C25184) * C49364 +
            (C25183 + C25182) * C34060 + (C25181 + C25180) * C49355 +
            (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
             C49092 * C10330) *
                C34061 +
            (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
             C49092 * C10333) *
                C49340) *
               C48935 * C49019 * C49319 -
           ((C25422 + C25423) * C49340 + (C25424 + C25425) * C34061 +
            C25410 * C49355 + C25411 * C34060 + C25412 * C49364 +
            C25413 * C34059 + (C22549 + C22548) * C49367 +
            (C22547 + C22546) * C34058) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C41524 + C41525 + C41526 + C41527) * C31305 +
           (C41528 + C41529 + C41530 + C41531) * C49134) *
              C48935 * C49019 * C616 -
          ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
            C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
               C49134 +
           (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
            C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
               C31305 +
           (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
            C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
               C31302 +
           (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
            C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
               C31304) *
              C48935 * C49019 * C617 +
          ((C23723 * C620 + C49366 * C625 + C23724 * C1321 + C49362 * C1328 +
            C23725 * C1825 + C49352 * C1828 + C23726 * C9354 + C49334 * C9357) *
               C31304 +
           (C23723 * C626 + C49366 * C635 + C23724 * C1327 + C49362 * C1333 +
            C23725 * C1829 + C49352 * C1834 + C23726 * C9356 + C49334 * C9360) *
               C31302 +
           (C23723 * C1519 + C49366 * C1526 + C23724 * C1983 + C49362 * C1986 +
            C23725 * C9444 + C49352 * C9447 + C23726 * C9682 + C49334 * C9683) *
               C31305 +
           (C23723 * C1525 + C49366 * C1531 + C23724 * C1987 + C49362 * C1992 +
            C23725 * C9446 + C49352 * C9450 + C23726 * C9684 + C49334 * C9685) *
               C49134) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C49019 * C616 -
          (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
            (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
               C49311 +
           ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
            (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
               C49343 +
           ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C31302 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C31304) *
               C49356) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C31304 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C31302 +
            (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 +
             C49092 * C1986) *
                C31305 +
            (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 +
             C49092 * C1992) *
                C49134) *
               C49356 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C31304 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C31302 +
            (C22511 * C1518 + C22505 * C1524 + C22512 * C1984 +
             C49092 * C1988) *
                C31305 +
            (C22511 * C1523 + C22505 * C1530 + C22512 * C1989 +
             C49092 * C1993) *
                C49134) *
               C49343 +
           ((C22511 * C622 + C22505 * C629 + C22512 * C1319 + C49092 * C1324) *
                C31304 +
            (C22511 * C630 + C22505 * C637 + C22512 * C1323 + C49092 * C1331) *
                C31302 +
            (C22511 * C1517 + C22505 * C1522 + C22512 * C1985 +
             C49092 * C1990) *
                C31305 +
            (C22511 * C1521 + C22505 * C1529 + C22512 * C1991 +
             C49092 * C1994) *
                C49134) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
               C34058 +
           (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
               C49367 +
           (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
           C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
           (C26529 + C26528) * C49340) *
              C48935 * C49019 * C616 -
          ((C22512 * C10328 + C49092 * C10332 + C22511 * C3368 +
            C22505 * C3373) *
               C49340 +
           (C22512 * C10326 + C49092 * C10329 + C22511 * C3364 +
            C22505 * C3367) *
               C34061 +
           (C25983 + C25982) * C49355 + (C25981 + C25980) * C34060 +
           (C25979 + C25978) * C49364 + (C25977 + C25976) * C34059 +
           (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
               C49367 +
           (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
               C34058) *
              C48935 * C49019 * C617 +
          ((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
               C34058 +
           (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
               C49367 +
           (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 + C49092 * C1986) *
               C34059 +
           (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 + C49092 * C1992) *
               C49364 +
           (C22511 * C2398 + C22505 * C2404 + C22512 * C9912 + C49092 * C9914) *
               C34060 +
           (C22511 * C2406 + C22505 * C2416 + C22512 * C9916 + C49092 * C9918) *
               C49355 +
           (C22511 * C10326 + C22505 * C10329 + C22512 * C10790 +
            C49092 * C10791) *
               C34061 +
           (C22511 * C10328 + C22505 * C10332 + C22512 * C10792 +
            C49092 * C10793) *
               C49340) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C410 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C550 +
          (((C41906 + C41907 + C41908 + C41909) * C31304 +
            (C41910 + C41911 + C41912 + C41913) * C31302 +
            (C23723 * C2397 + C49366 * C2403 + C23724 * C2398 + C49362 * C2404 +
             C23725 * C9912 + C49352 * C9914 + C23726 * C9913 +
             C49334 * C9915) *
                C31305 +
            (C23723 * C2405 + C49366 * C2415 + C23724 * C2406 + C49362 * C2416 +
             C23725 * C9916 + C49352 * C9918 + C23726 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C41913 + C41912 + C41911 + C41910) * C49134 +
            (C41909 + C41908 + C41907 + C41906) * C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C550 +
          ((((C25976 + C25977) * C31304 + (C25978 + C25979) * C31302 +
             (C25980 + C25981) * C31305 + (C25982 + C25983) * C49134) *
                C49356 +
            ((C25187 + C25186) * C31304 + (C25185 + C25184) * C31302 +
             (C25183 + C25182) * C31305 + (C25181 + C25180) * C49134) *
                C49343 +
            ((C28240 + C28239) * C31304 + (C28238 + C28237) * C31302 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C31305 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C410 -
           ((C22512 * C11236 + C49092 * C11238 + C22511 * C3794 +
             C22505 * C3799) *
                C49340 +
            (C22512 * C11232 + C49092 * C11234 + C22511 * C3790 +
             C22505 * C3793) *
                C34061 +
            (C26528 + C26529) * C49355 + (C26530 + C26531) * C34060 +
            (C25421 + C25420) * C49364 + (C25419 + C25418) * C34059 +
            (C25417 + C25416) * C49367 + (C25415 + C25414) * C34058) *
               C48935 * C49321) *
              C550 +
          (((C25976 + C25977) * C34058 + (C25978 + C25979) * C49367 +
            (C25980 + C25981) * C34059 + (C25982 + C25983) * C49364 +
            (C43020 + C43021) * C34060 + (C43022 + C43023) * C49355 +
            (C22511 * C11232 + C22505 * C11234 + C22512 * C11233 +
             C49092 * C11235) *
                C34061 +
            (C22511 * C11236 + C22505 * C11238 + C22512 * C11237 +
             C49092 * C11239) *
                C49340) *
               C48935 * C49321 -
           ((C43023 + C43022) * C49340 + (C43021 + C43020) * C34061 +
            (C25983 + C25982) * C49355 + (C25981 + C25980) * C34060 +
            (C25979 + C25978) * C49364 + (C25977 + C25976) * C34059 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49367 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C34058) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C824 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C24083 + C24082 + C24081 + C24080) * C31304 +
            (C24079 + C24078 + C24077 + C24076) * C31302 +
            (C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C31305 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C49002 * C552 +
          (((C25398 * C31304 + C25399 * C31302 + C25400 * C31305 +
             C25401 * C49134) *
                C49356 +
            (C28028 * C31304 + C28029 * C31302 + (C24969 + C24968) * C31305 +
             (C24967 + C24966) * C49134) *
                C49343 +
            ((C22895 + C22894) * C31304 + (C22893 + C22892) * C31302 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C31305 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C824 -
           ((C22512 * C11236 + C49092 * C11238 + C22511 * C3794 +
             C22505 * C3799) *
                C49340 +
            (C22512 * C11232 + C49092 * C11234 + C22511 * C3790 +
             C22505 * C3793) *
                C34061 +
            (C26528 + C26529) * C49355 + (C26530 + C26531) * C34060 +
            (C25421 + C25420) * C49364 + (C25419 + C25418) * C34059 +
            (C25417 + C25416) * C49367 + (C25415 + C25414) * C34058) *
               C48935 * C49321) *
              C49002 * C552 +
          ((C25398 * C34058 + C25399 * C49367 + C25400 * C34059 +
            C25401 * C49364 + (C25425 + C25424) * C34060 +
            (C25423 + C25422) * C49355 +
            (C22511 * C3791 + C22505 * C3795 + C22512 * C17947 +
             C49092 * C17948) *
                C34061 +
            (C22511 * C3796 + C22505 * C3800 + C22512 * C17949 +
             C49092 * C17950) *
                C49340) *
               C48935 * C49321 -
           ((C25422 + C25423) * C49340 + (C25424 + C25425) * C34061 +
            C25410 * C49355 + C25411 * C34060 + C25412 * C49364 +
            C25413 * C34059 + (C22549 + C22548) * C49367 +
            (C22547 + C22546) * C34058) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C824 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C268 +
          (((C41906 + C41907 + C41908 + C41909) * C31304 +
            (C41910 + C41911 + C41912 + C41913) * C31302 +
            (C23723 * C2397 + C49366 * C2403 + C23724 * C2398 + C49362 * C2404 +
             C23725 * C9912 + C49352 * C9914 + C23726 * C9913 +
             C49334 * C9915) *
                C31305 +
            (C23723 * C2405 + C49366 * C2415 + C23724 * C2406 + C49362 * C2416 +
             C23725 * C9916 + C49352 * C9918 + C23726 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C41913 + C41912 + C41911 + C41910) * C49134 +
            (C41909 + C41908 + C41907 + C41906) * C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C268 +
          ((((C25976 + C25977) * C31304 + (C25978 + C25979) * C31302 +
             (C25980 + C25981) * C31305 + (C25982 + C25983) * C49134) *
                C49356 +
            ((C25187 + C25186) * C31304 + (C25185 + C25184) * C31302 +
             (C25183 + C25182) * C31305 + (C25181 + C25180) * C49134) *
                C49343 +
            ((C28240 + C28239) * C31304 + (C28238 + C28237) * C31302 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C31305 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C34058 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49367 +
            (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
            C26518 * C34060 + C26519 * C49355 + (C26531 + C26530) * C34061 +
            (C26529 + C26528) * C49340) *
               C48935 * C824 -
           ((C22512 * C11236 + C49092 * C11238 + C22511 * C3794 +
             C22505 * C3799) *
                C49340 +
            (C22512 * C11232 + C49092 * C11234 + C22511 * C3790 +
             C22505 * C3793) *
                C34061 +
            (C26528 + C26529) * C49355 + (C26530 + C26531) * C34060 +
            (C25421 + C25420) * C49364 + (C25419 + C25418) * C34059 +
            (C25417 + C25416) * C49367 + (C25415 + C25414) * C34058) *
               C48935 * C49321) *
              C268 +
          (((C25976 + C25977) * C34058 + (C25978 + C25979) * C49367 +
            (C25980 + C25981) * C34059 + (C25982 + C25983) * C49364 +
            (C43020 + C43021) * C34060 + (C43022 + C43023) * C49355 +
            (C22511 * C11232 + C22505 * C11234 + C22512 * C11233 +
             C49092 * C11235) *
                C34061 +
            (C22511 * C11236 + C22505 * C11238 + C22512 * C11237 +
             C49092 * C11239) *
                C49340) *
               C48935 * C49321 -
           ((C43023 + C43022) * C49340 + (C43021 + C43020) * C34061 +
            (C25983 + C25982) * C49355 + (C25981 + C25980) * C34060 +
            (C25979 + C25978) * C49364 + (C25977 + C25976) * C34059 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49367 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C34058) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C41524 + C41525 + C41526 + C41527) * C31305 +
           (C41528 + C41529 + C41530 + C41531) * C49134) *
              C48935 * C970 -
          ((C42288 + C42289 + C42290 + C42291) * C49134 +
           (C42292 + C42293 + C42294 + C42295) * C31305 +
           (C41531 + C41530 + C41529 + C41528) * C31302 +
           (C41527 + C41526 + C41525 + C41524) * C31304) *
              C48935 * C971 +
          ((C42295 + C42294 + C42293 + C42292) * C31304 +
           (C42291 + C42290 + C42289 + C42288) * C31302 +
           (C23723 * C2912 + C49366 * C2919 + C23724 * C3364 + C49362 * C3367 +
            C23725 * C10326 + C49352 * C10329 + C23726 * C10790 +
            C49334 * C10791) *
               C31305 +
           (C23723 * C2918 + C49366 * C2924 + C23724 * C3368 + C49362 * C3373 +
            C23725 * C10328 + C49352 * C10332 + C23726 * C10792 +
            C49334 * C10793) *
               C49134) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C970 -
          (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
            C28435 * C31302 + C28436 * C31304) *
               C49311 +
           (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
            C25413 * C31304) *
               C49343 +
           ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
            (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
               C49356) *
              C971 +
          ((C26518 * C31304 + C26519 * C31302 + (C26531 + C26530) * C31305 +
            (C26529 + C26528) * C49134) *
               C49356 +
           (C25400 * C31304 + C25401 * C31302 + (C25425 + C25424) * C31305 +
            (C25423 + C25422) * C49134) *
               C49343 +
           ((C24969 + C24968) * C31304 + (C24967 + C24966) * C31302 +
            (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
             C49092 * C3371) *
                C31305 +
            (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
             C49092 * C3375) *
                C49134) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
               C34058 +
           (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
               C49367 +
           (C25414 + C25415) * C34059 + (C25416 + C25417) * C49364 +
           C26518 * C34060 + C26519 * C49355 + C43382 * C34061 +
           C43383 * C49340) *
              C48935 * C970 -
          ((C43392 + C43393) * C49340 + (C43394 + C43395) * C34061 +
           (C26528 + C26529) * C49355 + (C26530 + C26531) * C34060 +
           (C25421 + C25420) * C49364 + (C25419 + C25418) * C34059 +
           (C25417 + C25416) * C49367 + (C25415 + C25414) * C34058) *
              C48935 * C971 +
          (C26518 * C34058 + C26519 * C49367 + C43382 * C34059 +
           C43383 * C49364 + (C43395 + C43394) * C34060 +
           (C43393 + C43392) * C49355 +
           (C22511 * C18033 + C22505 * C18036 + C22512 * C18279 +
            C49092 * C18280) *
               C34061 +
           (C22511 * C18035 + C22505 * C18039 + C22512 * C18281 +
            C49092 * C18282) *
               C49340) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C48044 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49130 +
            (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
            C26518 * C48050 + C26519 * C36791) *
               C49269 +
           ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
            C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
            C25401 * C36791) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C24966 + C24967) * C36791 + (C24968 + C24969) * C48050 +
            C28435 * C49137 + C28436 * C48036 + (C22553 + C22552) * C49130 +
            (C22551 + C22550) * C48044) *
               C48945 +
           (C25410 * C36791 + C25411 * C48050 + C25412 * C49137 +
            C25413 * C48036 + (C22549 + C22548) * C49130 +
            (C22547 + C22546) * C48044) *
               C49269) *
              C49019 * C49002 * C111 +
          ((C22562 * C48044 + C22563 * C49130 + C28028 * C48036 +
            C28029 * C49137 + (C24969 + C24968) * C48050 +
            (C24967 + C24966) * C36791) *
               C49269 +
           (C22564 * C48044 + C22565 * C49130 + (C22895 + C22894) * C48036 +
            (C22893 + C22892) * C49137 +
            (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                C48050 +
            (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                C36791) *
               C48945) *
              C49019 * C49002 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C49019 * C268 -
           (((C25180 + C25181) * C36791 + (C25182 + C25183) * C48050 +
             (C25184 + C25185) * C49137 + (C25186 + C25187) * C48036 +
             (C22734 + C22735) * C49130 + (C22736 + C22737) * C48044) *
                C48945 +
            ((C25983 + C25982) * C36791 + (C25981 + C25980) * C48050 +
             (C25979 + C25978) * C49137 + (C25977 + C25976) * C48036 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49130 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C48044) *
                C49269) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C48044 + (C22735 + C22734) * C49130 +
             (C25187 + C25186) * C48036 + (C25185 + C25184) * C49137 +
             (C25183 + C25182) * C48050 + (C25181 + C25180) * C36791) *
                C49269 +
            ((C22733 + C22732) * C48044 + (C22731 + C22730) * C49130 +
             (C28240 + C28239) * C48036 + (C28238 + C28237) * C49137 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C48050 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C36791) *
                C48945) *
               C49019 * C49319 -
           (((C24966 + C24967) * C36791 + (C24968 + C24969) * C48050 +
             C28435 * C49137 + C28436 * C48036 + (C22553 + C22552) * C49130 +
             (C22551 + C22550) * C48044) *
                C48945 +
            (C25410 * C36791 + C25411 * C48050 + C25412 * C49137 +
             C25413 * C48036 + (C22549 + C22548) * C49130 +
             (C22547 + C22546) * C48044) *
                C49269) *
               C49019 * C268) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C410 -
           (((C25422 + C25423) * C36791 + (C25424 + C25425) * C48050 +
             C25410 * C49137 + C25411 * C48036 + C25412 * C49130 +
             C25413 * C48044) *
                C48945 +
            ((C26528 + C26529) * C36791 + (C26530 + C26531) * C48050 +
             (C25421 + C25420) * C49137 + (C25419 + C25418) * C48036 +
             (C25417 + C25416) * C49130 + (C25415 + C25414) * C48044) *
                C49269) *
               C49321) *
              C49002 * C270 +
          (((C25398 * C48044 + C25399 * C49130 + C25400 * C48036 +
             C25401 * C49137 + (C25425 + C25424) * C48050 +
             (C25423 + C25422) * C36791) *
                C49269 +
            (C28028 * C48044 + C28029 * C49130 + (C24969 + C24968) * C48036 +
             (C24967 + C24966) * C49137 +
             (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
              C49092 * C3371) *
                 C48050 +
             (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
              C49092 * C3375) *
                 C36791) *
                C48945) *
               C49321 -
           (((C24966 + C24967) * C36791 + (C24968 + C24969) * C48050 +
             C28435 * C49137 + C28436 * C48036 + (C22553 + C22552) * C49130 +
             (C22551 + C22550) * C48044) *
                C48945 +
            (C25410 * C36791 + C25411 * C48050 + C25412 * C49137 +
             C25413 * C48036 + (C22549 + C22548) * C49130 +
             (C22547 + C22546) * C48044) *
                C49269) *
               C410) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C49019 * C550 -
           (((C25180 + C25181) * C36791 + (C25182 + C25183) * C48050 +
             (C25184 + C25185) * C49137 + (C25186 + C25187) * C48036 +
             (C22734 + C22735) * C49130 + (C22736 + C22737) * C48044) *
                C48945 +
            ((C25983 + C25982) * C36791 + (C25981 + C25980) * C48050 +
             (C25979 + C25978) * C49137 + (C25977 + C25976) * C48036 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49130 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C48044) *
                C49269) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C48044 + (C22735 + C22734) * C49130 +
             (C25187 + C25186) * C48036 + (C25185 + C25184) * C49137 +
             (C25183 + C25182) * C48050 + (C25181 + C25180) * C36791) *
                C49269 +
            ((C22733 + C22732) * C48044 + (C22731 + C22730) * C49130 +
             (C28240 + C28239) * C48036 + (C28238 + C28237) * C49137 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C48050 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C36791) *
                C48945) *
               C49019 * C49319 -
           (((C24966 + C24967) * C36791 + (C24968 + C24969) * C48050 +
             C28435 * C49137 + C28436 * C48036 + (C22553 + C22552) * C49130 +
             (C22551 + C22550) * C48044) *
                C48945 +
            (C25410 * C36791 + C25411 * C48050 + C25412 * C49137 +
             C25413 * C48036 + (C22549 + C22548) * C49130 +
             (C22547 + C22546) * C48044) *
                C49269) *
               C49019 * C550) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C48044 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49130 +
            (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
            C26518 * C48050 + C26519 * C36791) *
               C49269 +
           ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
            C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
            C25401 * C36791) *
               C48945) *
              C49019 * C616 -
          (((C25180 + C25181) * C36791 + (C25182 + C25183) * C48050 +
            (C25184 + C25185) * C49137 + (C25186 + C25187) * C48036 +
            (C22734 + C22735) * C49130 + (C22736 + C22737) * C48044) *
               C48945 +
           ((C25983 + C25982) * C36791 + (C25981 + C25980) * C48050 +
            (C25979 + C25978) * C49137 + (C25977 + C25976) * C48036 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C49130 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C48044) *
               C49269) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C48044 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C49130 +
            (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 +
             C49092 * C1986) *
                C48036 +
            (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 +
             C49092 * C1992) *
                C49137 +
            (C22511 * C2398 + C22505 * C2404 + C22512 * C9912 +
             C49092 * C9914) *
                C48050 +
            (C22511 * C2406 + C22505 * C2416 + C22512 * C9916 +
             C49092 * C9918) *
                C36791) *
               C49269 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C48044 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C49130 +
            (C22511 * C1518 + C22505 * C1524 + C22512 * C1984 +
             C49092 * C1988) *
                C48036 +
            (C22511 * C1523 + C22505 * C1530 + C22512 * C1989 +
             C49092 * C1993) *
                C49137 +
            (C22511 * C2400 + C22505 * C2408 + C22512 * C10176 +
             C49092 * C10177) *
                C48050 +
            (C22511 * C2410 + C22505 * C2418 + C22512 * C10178 +
             C49092 * C10179) *
                C36791) *
               C48945) *
              C49019 * C618) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C410 -
           (((C25422 + C25423) * C36791 + (C25424 + C25425) * C48050 +
             C25410 * C49137 + C25411 * C48036 + C25412 * C49130 +
             C25413 * C48044) *
                C48945 +
            ((C26528 + C26529) * C36791 + (C26530 + C26531) * C48050 +
             (C25421 + C25420) * C49137 + (C25419 + C25418) * C48036 +
             (C25417 + C25416) * C49130 + (C25415 + C25414) * C48044) *
                C49269) *
               C49321) *
              C550 +
          ((((C25976 + C25977) * C48044 + (C25978 + C25979) * C49130 +
             (C25980 + C25981) * C48036 + (C25982 + C25983) * C49137 +
             (C43020 + C43021) * C48050 + (C43022 + C43023) * C36791) *
                C49269 +
            ((C25187 + C25186) * C48044 + (C25185 + C25184) * C49130 +
             (C25183 + C25182) * C48036 + (C25181 + C25180) * C49137 +
             (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
              C49092 * C10330) *
                 C48050 +
             (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
              C49092 * C10333) *
                 C36791) *
                C48945) *
               C49321 -
           (((C25180 + C25181) * C36791 + (C25182 + C25183) * C48050 +
             (C25184 + C25185) * C49137 + (C25186 + C25187) * C48036 +
             (C22734 + C22735) * C49130 + (C22736 + C22737) * C48044) *
                C48945 +
            ((C25983 + C25982) * C36791 + (C25981 + C25980) * C48050 +
             (C25979 + C25978) * C49137 + (C25977 + C25976) * C48036 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49130 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C48044) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C824 -
           (((C25422 + C25423) * C36791 + (C25424 + C25425) * C48050 +
             C25410 * C49137 + C25411 * C48036 + C25412 * C49130 +
             C25413 * C48044) *
                C48945 +
            ((C26528 + C26529) * C36791 + (C26530 + C26531) * C48050 +
             (C25421 + C25420) * C49137 + (C25419 + C25418) * C48036 +
             (C25417 + C25416) * C49130 + (C25415 + C25414) * C48044) *
                C49269) *
               C49321) *
              C49002 * C552 +
          (((C25398 * C48044 + C25399 * C49130 + C25400 * C48036 +
             C25401 * C49137 + (C25425 + C25424) * C48050 +
             (C25423 + C25422) * C36791) *
                C49269 +
            (C28028 * C48044 + C28029 * C49130 + (C24969 + C24968) * C48036 +
             (C24967 + C24966) * C49137 +
             (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
              C49092 * C3371) *
                 C48050 +
             (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
              C49092 * C3375) *
                 C36791) *
                C48945) *
               C49321 -
           (((C24966 + C24967) * C36791 + (C24968 + C24969) * C48050 +
             C28435 * C49137 + C28436 * C48036 + (C22553 + C22552) * C49130 +
             (C22551 + C22550) * C48044) *
                C48945 +
            (C25410 * C36791 + C25411 * C48050 + C25412 * C49137 +
             C25413 * C48036 + (C22549 + C22548) * C49130 +
             (C22547 + C22546) * C48044) *
                C49269) *
               C824) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C48044 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C49130 +
             (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
             C26518 * C48050 + C26519 * C36791) *
                C49269 +
            ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
             C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
             C25401 * C36791) *
                C48945) *
               C824 -
           (((C25422 + C25423) * C36791 + (C25424 + C25425) * C48050 +
             C25410 * C49137 + C25411 * C48036 + C25412 * C49130 +
             C25413 * C48044) *
                C48945 +
            ((C26528 + C26529) * C36791 + (C26530 + C26531) * C48050 +
             (C25421 + C25420) * C49137 + (C25419 + C25418) * C48036 +
             (C25417 + C25416) * C49130 + (C25415 + C25414) * C48044) *
                C49269) *
               C49321) *
              C268 +
          ((((C25976 + C25977) * C48044 + (C25978 + C25979) * C49130 +
             (C25980 + C25981) * C48036 + (C25982 + C25983) * C49137 +
             (C43020 + C43021) * C48050 + (C43022 + C43023) * C36791) *
                C49269 +
            ((C25187 + C25186) * C48044 + (C25185 + C25184) * C49130 +
             (C25183 + C25182) * C48036 + (C25181 + C25180) * C49137 +
             (C22511 * C3365 + C22505 * C3369 + C22512 * C10327 +
              C49092 * C10330) *
                 C48050 +
             (C22511 * C3370 + C22505 * C3374 + C22512 * C10331 +
              C49092 * C10333) *
                 C36791) *
                C48945) *
               C49321 -
           (((C25180 + C25181) * C36791 + (C25182 + C25183) * C48050 +
             (C25184 + C25185) * C49137 + (C25186 + C25187) * C48036 +
             (C22734 + C22735) * C49130 + (C22736 + C22737) * C48044) *
                C48945 +
            ((C25983 + C25982) * C36791 + (C25981 + C25980) * C48050 +
             (C25979 + C25978) * C49137 + (C25977 + C25976) * C48036 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C49130 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C48044) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C48044 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C49130 +
            (C25414 + C25415) * C48036 + (C25416 + C25417) * C49137 +
            C26518 * C48050 + C26519 * C36791) *
               C49269 +
           ((C22546 + C22547) * C48044 + (C22548 + C22549) * C49130 +
            C25398 * C48036 + C25399 * C49137 + C25400 * C48050 +
            C25401 * C36791) *
               C48945) *
              C970 -
          (((C25422 + C25423) * C36791 + (C25424 + C25425) * C48050 +
            C25410 * C49137 + C25411 * C48036 + C25412 * C49130 +
            C25413 * C48044) *
               C48945 +
           ((C26528 + C26529) * C36791 + (C26530 + C26531) * C48050 +
            (C25421 + C25420) * C49137 + (C25419 + C25418) * C48036 +
            (C25417 + C25416) * C49130 + (C25415 + C25414) * C48044) *
               C49269) *
              C971 +
          ((C26518 * C48044 + C26519 * C49130 + C43382 * C48036 +
            C43383 * C49137 + (C43395 + C43394) * C48050 +
            (C43393 + C43392) * C36791) *
               C49269 +
           (C25400 * C48044 + C25401 * C49130 + (C25425 + C25424) * C48036 +
            (C25423 + C25422) * C49137 +
            (C22511 * C3791 + C22505 * C3795 + C22512 * C17947 +
             C49092 * C17948) *
                C48050 +
            (C22511 * C3796 + C22505 * C3800 + C22512 * C17949 +
             C49092 * C17950) *
                C36791) *
               C48945) *
              C972) *
         C49002 * C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C49019 * C49002 * C110 -
          (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
            (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
               C49311 +
           (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
            (C22551 + C22550) * C31304) *
               C49343 +
           (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
            (C22547 + C22546) * C31304) *
               C49356) *
              C49019 * C49002 * C111 +
          (C39693 * C49356 +
           (C22564 * C31304 + C22565 * C31302 + (C22895 + C22894) * C31305 +
            (C22893 + C22892) * C49134) *
               C49343 +
           ((C22561 + C22560) * C31304 + (C22559 + C22558) * C31302 +
            (C22511 * C412 + C22505 * C419 + C22512 * C726 + C49092 * C735) *
                C31305 +
            (C22511 * C418 + C22505 * C430 + C22512 * C736 + C49092 * C741) *
                C49134) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C23723 * C416 + C49366 * C427 + C23724 * C722 + C49362 * C727 +
            C23725 * C1519 + C49352 * C1526 + C23726 * C1983 + C49334 * C1986) *
               C31305 +
           (C23723 * C426 + C49366 * C434 + C23724 * C728 + C49362 * C737 +
            C23725 * C1525 + C49352 * C1531 + C23726 * C1987 + C49334 * C1992) *
               C49134) *
              C48935 * C49019 * C49002 * C110 -
          ((C24076 + C24077 + C24078 + C24079) * C49134 +
           (C24080 + C24081 + C24082 + C24083) * C31305 +
           (C23767 + C23766 + C23765 + C23764) * C31302 +
           (C23763 + C23762 + C23761 + C23760) * C31304) *
              C48935 * C49019 * C49002 * C111 +
          ((C23775 + C23774 + C23773 + C23772) * C31304 +
           (C23771 + C23770 + C23769 + C23768) * C31302 +
           (C23723 * C414 + C49366 * C423 + C23724 * C724 + C49362 * C731 +
            C23725 * C1517 + C49352 * C1522 + C23726 * C1985 + C49334 * C1990) *
               C31305 +
           (C23723 * C422 + C49366 * C432 + C23724 * C732 + C49362 * C739 +
            C23725 * C1521 + C49352 * C1529 + C23726 * C1991 + C49334 * C1994) *
               C49134) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C49019 * C268 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C22737 + C22736) * C31304 + (C22735 + C22734) * C31302 +
             (C25187 + C25186) * C31305 + (C25185 + C25184) * C49134) *
                C49356 +
            ((C22733 + C22732) * C31304 + (C22731 + C22730) * C31302 +
             (C28240 + C28239) * C31305 + (C28238 + C28237) * C49134) *
                C49343 +
            ((C22729 + C22728) * C31304 + (C22727 + C22726) * C31302 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C31305 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C23723 * C416 + C49366 * C427 + C23724 * C722 + C49362 * C727 +
             C23725 * C1519 + C49352 * C1526 + C23726 * C1983 +
             C49334 * C1986) *
                C31305 +
            (C23723 * C426 + C49366 * C434 + C23724 * C728 + C49362 * C737 +
             C23725 * C1525 + C49352 * C1531 + C23726 * C1987 +
             C49334 * C1992) *
                C49134) *
               C48935 * C49019 * C268 -
           ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
             C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
                C49134 +
            (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
             C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
                C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C23929 + C23928 + C23927 + C23926) * C31304 +
            (C23925 + C23924 + C23923 + C23922) * C31302 +
            (C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
             C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
             C49334 * C9448) *
                C31305 +
            (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
             C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C49002 * C270 +
          (((C25398 * C31304 + C25399 * C31302 + C25400 * C31305 +
             C25401 * C49134) *
                C49356 +
            (C28028 * C31304 + C28029 * C31302 + (C24969 + C24968) * C31305 +
             (C24967 + C24966) * C49134) *
                C49343 +
            ((C22895 + C22894) * C31304 + (C22893 + C22892) * C31302 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C31305 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C410 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C24083 + C24082 + C24081 + C24080) * C31304 +
            (C24079 + C24078 + C24077 + C24076) * C31302 +
            (C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C31305 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C49019 * C550 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C22737 + C22736) * C31304 + (C22735 + C22734) * C31302 +
             (C25187 + C25186) * C31305 + (C25185 + C25184) * C49134) *
                C49356 +
            ((C22733 + C22732) * C31304 + (C22731 + C22730) * C31302 +
             (C28240 + C28239) * C31305 + (C28238 + C28237) * C49134) *
                C49343 +
            ((C22729 + C22728) * C31304 + (C22727 + C22726) * C31302 +
             (C22511 * C725 + C22505 * C733 + C22512 * C1520 + C49092 * C1527) *
                 C31305 +
             (C22511 * C734 + C22505 * C740 + C22512 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C49019 * C550 -
           ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
             C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
                C49134 +
            (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
             C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
                C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C23929 + C23928 + C23927 + C23926) * C31304 +
            (C23925 + C23924 + C23923 + C23922) * C31302 +
            (C23723 * C723 + C49366 * C729 + C23724 * C1518 + C49362 * C1524 +
             C23725 * C1984 + C49352 * C1988 + C23726 * C9445 +
             C49334 * C9448) *
                C31305 +
            (C23723 * C730 + C49366 * C738 + C23724 * C1523 + C49362 * C1530 +
             C23725 * C1989 + C49352 * C1993 + C23726 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C49019 * C616 -
          (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
            (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
               C49311 +
           ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
            (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
               C49343 +
           ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
            (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                C31302 +
            (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                C31304) *
               C49356) *
              C49019 * C617 +
          (((C22511 * C620 + C22505 * C625 + C22512 * C1321 + C49092 * C1328) *
                C31304 +
            (C22511 * C626 + C22505 * C635 + C22512 * C1327 + C49092 * C1333) *
                C31302 +
            (C22511 * C1519 + C22505 * C1526 + C22512 * C1983 +
             C49092 * C1986) *
                C31305 +
            (C22511 * C1525 + C22505 * C1531 + C22512 * C1987 +
             C49092 * C1992) *
                C49134) *
               C49356 +
           ((C22511 * C621 + C22505 * C627 + C22512 * C1320 + C49092 * C1326) *
                C31304 +
            (C22511 * C628 + C22505 * C636 + C22512 * C1325 + C49092 * C1332) *
                C31302 +
            (C22511 * C1518 + C22505 * C1524 + C22512 * C1984 +
             C49092 * C1988) *
                C31305 +
            (C22511 * C1523 + C22505 * C1530 + C22512 * C1989 +
             C49092 * C1993) *
                C49134) *
               C49343 +
           ((C22511 * C622 + C22505 * C629 + C22512 * C1319 + C49092 * C1324) *
                C31304 +
            (C22511 * C630 + C22505 * C637 + C22512 * C1323 + C49092 * C1331) *
                C31302 +
            (C22511 * C1517 + C22505 * C1522 + C22512 * C1985 +
             C49092 * C1990) *
                C31305 +
            (C22511 * C1521 + C22505 * C1529 + C22512 * C1991 +
             C49092 * C1994) *
                C49134) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C41524 + C41525 + C41526 + C41527) * C31305 +
           (C41528 + C41529 + C41530 + C41531) * C49134) *
              C48935 * C49019 * C616 -
          ((C23726 * C9446 + C49334 * C9450 + C23725 * C1987 + C49352 * C1992 +
            C23724 * C1525 + C49362 * C1531 + C23723 * C728 + C49366 * C737) *
               C49134 +
           (C23726 * C9444 + C49334 * C9447 + C23725 * C1983 + C49352 * C1986 +
            C23724 * C1519 + C49362 * C1526 + C23723 * C722 + C49366 * C727) *
               C31305 +
           (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
            C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
               C31302 +
           (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
            C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
               C31304) *
              C48935 * C49019 * C617 +
          ((C23723 * C620 + C49366 * C625 + C23724 * C1321 + C49362 * C1328 +
            C23725 * C1825 + C49352 * C1828 + C23726 * C9354 + C49334 * C9357) *
               C31304 +
           (C23723 * C626 + C49366 * C635 + C23724 * C1327 + C49362 * C1333 +
            C23725 * C1829 + C49352 * C1834 + C23726 * C9356 + C49334 * C9360) *
               C31302 +
           (C23723 * C1519 + C49366 * C1526 + C23724 * C1983 + C49362 * C1986 +
            C23725 * C9444 + C49352 * C9447 + C23726 * C9682 + C49334 * C9683) *
               C31305 +
           (C23723 * C1525 + C49366 * C1531 + C23724 * C1987 + C49362 * C1992 +
            C23725 * C9446 + C49352 * C9450 + C23726 * C9684 + C49334 * C9685) *
               C49134) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C410 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C550 +
          ((((C25976 + C25977) * C31304 + (C25978 + C25979) * C31302 +
             (C25980 + C25981) * C31305 + (C25982 + C25983) * C49134) *
                C49356 +
            ((C25187 + C25186) * C31304 + (C25185 + C25184) * C31302 +
             (C25183 + C25182) * C31305 + (C25181 + C25180) * C49134) *
                C49343 +
            ((C28240 + C28239) * C31304 + (C28238 + C28237) * C31302 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C31305 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C410 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C550 +
          (((C41906 + C41907 + C41908 + C41909) * C31304 +
            (C41910 + C41911 + C41912 + C41913) * C31302 +
            (C23723 * C2397 + C49366 * C2403 + C23724 * C2398 + C49362 * C2404 +
             C23725 * C9912 + C49352 * C9914 + C23726 * C9913 +
             C49334 * C9915) *
                C31305 +
            (C23723 * C2405 + C49366 * C2415 + C23724 * C2406 + C49362 * C2416 +
             C23725 * C9916 + C49352 * C9918 + C23726 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C41913 + C41912 + C41911 + C41910) * C49134 +
            (C41909 + C41908 + C41907 + C41906) * C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C49002 * C552 +
          (((C25398 * C31304 + C25399 * C31302 + C25400 * C31305 +
             C25401 * C49134) *
                C49356 +
            (C28028 * C31304 + C28029 * C31302 + (C24969 + C24968) * C31305 +
             (C24967 + C24966) * C49134) *
                C49343 +
            ((C22895 + C22894) * C31304 + (C22893 + C22892) * C31302 +
             (C22511 * C976 + C22505 * C984 + C22512 * C2724 + C49092 * C2725) *
                 C31305 +
             (C22511 * C985 + C22505 * C991 + C22512 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C22892 + C22893) * C49134 + (C22894 + C22895) * C31305 +
             (C22557 + C22556) * C31302 + (C22555 + C22554) * C31304) *
                C49311 +
            (C28435 * C49134 + C28436 * C31305 + (C22553 + C22552) * C31302 +
             (C22551 + C22550) * C31304) *
                C49343 +
            (C25412 * C49134 + C25413 * C31305 + (C22549 + C22548) * C31302 +
             (C22547 + C22546) * C31304) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C824 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C24083 + C24082 + C24081 + C24080) * C31304 +
            (C24079 + C24078 + C24077 + C24076) * C31302 +
            (C23723 * C974 + C49366 * C980 + C23724 * C2399 + C49362 * C2407 +
             C23725 * C2400 + C49352 * C2408 + C23726 * C10176 +
             C49334 * C10177) *
                C31305 +
            (C23723 * C981 + C49366 * C989 + C23724 * C2409 + C49362 * C2417 +
             C23725 * C2410 + C49352 * C2418 + C23726 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C24076 + C24077 + C24078 + C24079) * C49134 +
            (C24080 + C24081 + C24082 + C24083) * C31305 +
            (C23767 + C23766 + C23765 + C23764) * C31302 +
            (C23763 + C23762 + C23761 + C23760) * C31304) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                 C31304 +
             (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                 C31302 +
             (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
                C49356 +
            ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
             C25398 * C31305 + C25399 * C49134) *
                C49343 +
            C39693 * C49311) *
               C824 -
           (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
             C28435 * C31302 + C28436 * C31304) *
                C49311 +
            (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
             C25413 * C31304) *
                C49343 +
            ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
             (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
                C49356) *
               C49321) *
              C268 +
          ((((C25976 + C25977) * C31304 + (C25978 + C25979) * C31302 +
             (C25980 + C25981) * C31305 + (C25982 + C25983) * C49134) *
                C49356 +
            ((C25187 + C25186) * C31304 + (C25185 + C25184) * C31302 +
             (C25183 + C25182) * C31305 + (C25181 + C25180) * C49134) *
                C49343 +
            ((C28240 + C28239) * C31304 + (C28238 + C28237) * C31302 +
             (C22511 * C2401 + C22505 * C2411 + C22512 * C2402 +
              C49092 * C2412) *
                 C31305 +
             (C22511 * C2413 + C22505 * C2419 + C22512 * C2414 +
              C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C28237 + C28238) * C49134 + (C28239 + C28240) * C31305 +
             (C22730 + C22731) * C31302 + (C22732 + C22733) * C31304) *
                C49311 +
            ((C25184 + C25185) * C49134 + (C25186 + C25187) * C31305 +
             (C22734 + C22735) * C31302 + (C22736 + C22737) * C31304) *
                C49343 +
            ((C25979 + C25978) * C49134 + (C25977 + C25976) * C31305 +
             (C22512 * C626 + C49092 * C635 + C22511 * C286 + C22505 * C294) *
                 C31302 +
             (C22512 * C620 + C49092 * C625 + C22511 * C276 + C22505 * C287) *
                 C31304) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
             C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
                C31304 +
            (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
             C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
                C31302 +
            (C41524 + C41525 + C41526 + C41527) * C31305 +
            (C41528 + C41529 + C41530 + C41531) * C49134) *
               C48935 * C824 -
           ((C23726 * C9916 + C49334 * C9918 + C23725 * C2406 + C49352 * C2416 +
             C23724 * C2405 + C49362 * C2415 + C23723 * C979 + C49366 * C988) *
                C49134 +
            (C23726 * C9912 + C49334 * C9914 + C23725 * C2398 + C49352 * C2404 +
             C23724 * C2397 + C49362 * C2403 + C23723 * C973 + C49366 * C978) *
                C31305 +
            (C41531 + C41530 + C41529 + C41528) * C31302 +
            (C41527 + C41526 + C41525 + C41524) * C31304) *
               C48935 * C49321) *
              C268 +
          (((C41906 + C41907 + C41908 + C41909) * C31304 +
            (C41910 + C41911 + C41912 + C41913) * C31302 +
            (C23723 * C2397 + C49366 * C2403 + C23724 * C2398 + C49362 * C2404 +
             C23725 * C9912 + C49352 * C9914 + C23726 * C9913 +
             C49334 * C9915) *
                C31305 +
            (C23723 * C2405 + C49366 * C2415 + C23724 * C2406 + C49362 * C2416 +
             C23725 * C9916 + C49352 * C9918 + C23726 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C41913 + C41912 + C41911 + C41910) * C49134 +
            (C41909 + C41908 + C41907 + C41906) * C31305 +
            (C23726 * C1829 + C49334 * C1834 + C23725 * C1327 + C49352 * C1333 +
             C23724 * C626 + C49362 * C635 + C23723 * C286 + C49366 * C294) *
                C31302 +
            (C23726 * C1825 + C49334 * C1828 + C23725 * C1321 + C49352 * C1328 +
             C23724 * C620 + C49362 * C625 + C23723 * C276 + C49366 * C287) *
                C31304) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22511 * C115 + C22505 * C122 + C22512 * C276 + C49092 * C287) *
                C31304 +
            (C22511 * C123 + C22505 * C136 + C22512 * C286 + C49092 * C294) *
                C31302 +
            (C25414 + C25415) * C31305 + (C25416 + C25417) * C49134) *
               C49356 +
           ((C22546 + C22547) * C31304 + (C22548 + C22549) * C31302 +
            C25398 * C31305 + C25399 * C49134) *
               C49343 +
           C39693 * C49311) *
              C970 -
          (((C24966 + C24967) * C49134 + (C24968 + C24969) * C31305 +
            C28435 * C31302 + C28436 * C31304) *
               C49311 +
           (C25410 * C49134 + C25411 * C31305 + C25412 * C31302 +
            C25413 * C31304) *
               C49343 +
           ((C25421 + C25420) * C49134 + (C25419 + C25418) * C31305 +
            (C25417 + C25416) * C31302 + (C25415 + C25414) * C31304) *
               C49356) *
              C971 +
          ((C26518 * C31304 + C26519 * C31302 + (C26531 + C26530) * C31305 +
            (C26529 + C26528) * C49134) *
               C49356 +
           (C25400 * C31304 + C25401 * C31302 + (C25425 + C25424) * C31305 +
            (C25423 + C25422) * C49134) *
               C49343 +
           ((C24969 + C24968) * C31304 + (C24967 + C24966) * C31302 +
            (C22511 * C2910 + C22505 * C2915 + C22512 * C3366 +
             C49092 * C3371) *
                C31305 +
            (C22511 * C2914 + C22505 * C2922 + C22512 * C3372 +
             C49092 * C3375) *
                C49134) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23723 * C115 + C49366 * C122 + C23724 * C276 + C49362 * C287 +
            C23725 * C620 + C49352 * C625 + C23726 * C1321 + C49334 * C1328) *
               C31304 +
           (C23723 * C123 + C49366 * C136 + C23724 * C286 + C49362 * C294 +
            C23725 * C626 + C49352 * C635 + C23726 * C1327 + C49334 * C1333) *
               C31302 +
           (C41524 + C41525 + C41526 + C41527) * C31305 +
           (C41528 + C41529 + C41530 + C41531) * C49134) *
              C48935 * C970 -
          ((C42288 + C42289 + C42290 + C42291) * C49134 +
           (C42292 + C42293 + C42294 + C42295) * C31305 +
           (C41531 + C41530 + C41529 + C41528) * C31302 +
           (C41527 + C41526 + C41525 + C41524) * C31304) *
              C48935 * C971 +
          ((C42295 + C42294 + C42293 + C42292) * C31304 +
           (C42291 + C42290 + C42289 + C42288) * C31302 +
           (C23723 * C2912 + C49366 * C2919 + C23724 * C3364 + C49362 * C3367 +
            C23725 * C10326 + C49352 * C10329 + C23726 * C10790 +
            C49334 * C10791) *
               C31305 +
           (C23723 * C2918 + C49366 * C2924 + C23724 * C3368 + C49362 * C3373 +
            C23725 * C10328 + C49352 * C10332 + C23726 * C10792 +
            C49334 * C10793) *
               C49134) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C11411 + C11412 + C11413 + C11414) * C49047 +
            (C11415 + C11416 + C11417 + C11418) * C114) *
               C48945 +
           ((C11410 + C11409 + C11408 + C11407) * C49047 +
            (C11406 + C11405 + C11404 + C11403) * C114) *
               C49269) *
              C49019 * C49002 * C111 +
          (((C11418 + C11417 + C11416 + C11415) * C114 +
            (C11414 + C11413 + C11412 + C11411) * C49047) *
               C49269 +
           ((C11366 * C118 + C11360 * C128 + C11367 * C273 + C11361 * C281 +
             C11368 * C623 + C11362 * C631 + C11369 * C1322 + C49334 * C1329) *
                C114 +
            (C11366 * C129 + C11360 * C139 + C11367 * C280 + C11361 * C291 +
             C11368 * C632 + C11362 * C638 + C11369 * C1330 + C49334 * C1334) *
                C49047) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C49019 * C49002 * C110 -
          (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
           ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
           ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
           ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
              C49019 * C49002 * C111 +
          (C3971 * C3908 + C3972 * C3909 +
           ((C3962 + C3961) * C114 + (C3960 + C3959) * C49047) * C3910 +
           ((C3912 * C120 + C49291 * C133 + C3913 * C277 + C49092 * C288) *
                C114 +
            (C3912 * C132 + C49291 * C141 + C3913 * C289 + C49092 * C295) *
                C49047) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C15329 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C15326 +
            (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
            (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
               C49269 +
           ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
            C6726 * C15330 + C6727 * C15327 + (C6759 + C6758) * C15331 +
            (C6757 + C6756) * C49327) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C6752 + C6753) * C49327 + (C6754 + C6755) * C15331 +
            C6736 * C15327 + C6737 * C15330 + (C3954 + C3953) * C15326 +
            (C3952 + C3951) * C15329) *
               C48945 +
           ((C6756 + C6757) * C49327 + (C6758 + C6759) * C15331 +
            C6746 * C15327 + C6747 * C15330 + (C3950 + C3949) * C15326 +
            (C3948 + C3947) * C15329) *
               C49269) *
              C49019 * C49002 * C111 +
          ((C3963 * C15329 + C3964 * C15326 + C6299 * C15330 + C6300 * C15327 +
            (C6755 + C6754) * C15331 + (C6753 + C6752) * C49327) *
               C49269 +
           (C3965 * C15329 + C3966 * C15326 + (C4296 + C4295) * C15330 +
            (C4294 + C4293) * C15327 +
            (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                C15331 +
            (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                C49327) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C49019 * C268 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C49019 * C49319) *
              C270 +
          ((((C11572 + C11571 + C11570 + C11569) * C114 +
             (C11568 + C11567 + C11566 + C11565) * C49047) *
                C49269 +
            ((C11366 * C274 + C11360 * C283 + C11367 * C622 + C11361 * C629 +
              C11368 * C1319 + C11362 * C1324 + C11369 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C11366 * C282 + C11360 * C292 + C11367 * C630 + C11361 * C637 +
              C11368 * C1323 + C11362 * C1331 + C11369 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C49019 * C268 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C114 + (C4136 + C4135) * C49047) * C3908 +
            ((C4134 + C4133) * C114 + (C4132 + C4131) * C49047) * C3909 +
            ((C4130 + C4129) * C114 + (C4128 + C4127) * C49047) * C3910 +
            ((C3912 * C272 + C49291 * C279 + C3913 * C624 + C49092 * C633) *
                 C114 +
             (C3912 * C278 + C49291 * C290 + C3913 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + (C6759 + C6758) * C15331 +
             (C6757 + C6756) * C49327) *
                C48945) *
               C49019 * C268 -
           (((C18880 + C18881) * C49327 + (C18882 + C18883) * C15331 +
             (C6520 + C6521) * C15327 + (C6522 + C6523) * C15330 +
             (C4135 + C4136) * C15326 + (C4137 + C4138) * C15329) *
                C48945 +
            ((C3913 * C2406 + C49092 * C2416 + C3912 * C2405 + C49291 * C2415) *
                 C49327 +
             (C3913 * C2398 + C49092 * C2404 + C3912 * C2397 + C49291 * C2403) *
                 C15331 +
             (C7305 + C7304) * C15327 + (C7303 + C7302) * C15330 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C15326 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C15329) *
                C49269) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C15329 + (C4136 + C4135) * C15326 +
             (C6523 + C6522) * C15330 + (C6521 + C6520) * C15327 +
             (C18883 + C18882) * C15331 + (C18881 + C18880) * C49327) *
                C49269 +
            ((C4134 + C4133) * C15329 + (C4132 + C4131) * C15326 +
             (C6519 + C6518) * C15330 + (C6517 + C6516) * C15327 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C15331 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49327) *
                C48945) *
               C49019 * C49319 -
           (((C6752 + C6753) * C49327 + (C6754 + C6755) * C15331 +
             C6736 * C15327 + C6737 * C15330 + (C3954 + C3953) * C15326 +
             (C3952 + C3951) * C15329) *
                C48945 +
            ((C6756 + C6757) * C49327 + (C6758 + C6759) * C15331 +
             C6746 * C15327 + C6747 * C15330 + (C3950 + C3949) * C15326 +
             (C3948 + C3947) * C15329) *
                C49269) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C410 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C49002 * C270 +
          ((((C11726 + C11725 + C11724 + C11723) * C114 +
             (C11722 + C11721 + C11720 + C11719) * C49047) *
                C49269 +
            ((C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
              C11368 * C1517 + C11362 * C1522 + C11369 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
              C11368 * C1521 + C11362 * C1529 + C11369 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C410 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C49002 * C270 +
          ((((C4304 + C4303) * C114 + (C4302 + C4301) * C49047) * C3908 +
            ((C4300 + C4299) * C114 + (C4298 + C4297) * C49047) * C3909 +
            ((C4296 + C4295) * C114 + (C4294 + C4293) * C49047) * C3910 +
            ((C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                 C114 +
             (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
             C19079 * C49327) *
                C48945) *
               C410 -
           (((C19090 + C19091) * C49327 + (C19092 + C19093) * C15331 +
             C19088 * C15327 + C19089 * C15330 + C6746 * C15326 +
             C6747 * C15329) *
                C48945 +
            ((C3913 * C3368 + C49092 * C3373 + C3912 * C2918 + C49291 * C2924) *
                 C49327 +
             (C3913 * C3364 + C49092 * C3367 + C3912 * C2912 + C49291 * C2919) *
                 C15331 +
             (C7848 + C7849) * C15327 + (C7850 + C7851) * C15330 +
             (C6751 + C6750) * C15326 + (C6749 + C6748) * C15329) *
                C49269) *
               C49321) *
              C49002 * C270 +
          (((C6726 * C15329 + C6727 * C15326 + C19078 * C15330 +
             C19079 * C15327 + (C19093 + C19092) * C15331 +
             (C19091 + C19090) * C49327) *
                C49269 +
            (C6299 * C15329 + C6300 * C15326 + (C6755 + C6754) * C15330 +
             (C6753 + C6752) * C15327 +
             (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                 C15331 +
             (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                 C49327) *
                C48945) *
               C49321 -
           (((C6752 + C6753) * C49327 + (C6754 + C6755) * C15331 +
             C6736 * C15327 + C6737 * C15330 + (C3954 + C3953) * C15326 +
             (C3952 + C3951) * C15329) *
                C48945 +
            (C19088 * C49327 + C19089 * C15331 + C6746 * C15327 +
             C6747 * C15330 + (C3950 + C3949) * C15326 +
             (C3948 + C3947) * C15329) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C49019 * C550 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C49019 * C49319) *
              C552 +
          ((((C11572 + C11571 + C11570 + C11569) * C114 +
             (C11568 + C11567 + C11566 + C11565) * C49047) *
                C49269 +
            ((C11366 * C274 + C11360 * C283 + C11367 * C622 + C11361 * C629 +
              C11368 * C1319 + C11362 * C1324 + C11369 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C11366 * C282 + C11360 * C292 + C11367 * C630 + C11361 * C637 +
              C11368 * C1323 + C11362 * C1331 + C11369 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C49019 * C550 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C114 + (C4136 + C4135) * C49047) * C3908 +
            ((C4134 + C4133) * C114 + (C4132 + C4131) * C49047) * C3909 +
            ((C4130 + C4129) * C114 + (C4128 + C4127) * C49047) * C3910 +
            ((C3912 * C272 + C49291 * C279 + C3913 * C624 + C49092 * C633) *
                 C114 +
             (C3912 * C278 + C49291 * C290 + C3913 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
             C19079 * C49327) *
                C48945) *
               C49019 * C550 -
           (((C18880 + C18881) * C49327 + (C18882 + C18883) * C15331 +
             (C6520 + C6521) * C15327 + (C6522 + C6523) * C15330 +
             (C4135 + C4136) * C15326 + (C4137 + C4138) * C15329) *
                C48945 +
            ((C3913 * C2406 + C49092 * C2416 + C3912 * C2405 + C49291 * C2415) *
                 C49327 +
             (C3913 * C2398 + C49092 * C2404 + C3912 * C2397 + C49291 * C2403) *
                 C15331 +
             (C7305 + C7304) * C15327 + (C7303 + C7302) * C15330 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C15326 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C15329) *
                C49269) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C15329 + (C4136 + C4135) * C15326 +
             (C6523 + C6522) * C15330 + (C6521 + C6520) * C15327 +
             (C18883 + C18882) * C15331 + (C18881 + C18880) * C49327) *
                C49269 +
            ((C4134 + C4133) * C15329 + (C4132 + C4131) * C15326 +
             (C6519 + C6518) * C15330 + (C6517 + C6516) * C15327 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C15331 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49327) *
                C48945) *
               C49019 * C49319 -
           (((C6752 + C6753) * C49327 + (C6754 + C6755) * C15331 +
             C6736 * C15327 + C6737 * C15330 + (C3954 + C3953) * C15326 +
             (C3952 + C3951) * C15329) *
                C48945 +
            (C19088 * C49327 + C19089 * C15331 + C6746 * C15327 +
             C6747 * C15330 + (C3950 + C3949) * C15326 +
             (C3948 + C3947) * C15329) *
                C49269) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C49019 * C616 -
          (((C11565 + C11566 + C11567 + C11568) * C49047 +
            (C11569 + C11570 + C11571 + C11572) * C114) *
               C48945 +
           ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49047 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C114) *
               C49269) *
              C49019 * C617 +
          (((C11366 * C620 + C11360 * C625 + C11367 * C1321 + C11361 * C1328 +
             C11368 * C1825 + C11362 * C1828 + C11369 * C9354 +
             C49334 * C9357) *
                C114 +
            (C11366 * C626 + C11360 * C635 + C11367 * C1327 + C11361 * C1333 +
             C11368 * C1829 + C11362 * C1834 + C11369 * C9356 +
             C49334 * C9360) *
                C49047) *
               C49269 +
           ((C11366 * C621 + C11360 * C627 + C11367 * C1320 + C11361 * C1326 +
             C11368 * C1826 + C11362 * C1830 + C11369 * C9355 +
             C49334 * C9358) *
                C114 +
            (C11366 * C628 + C11360 * C636 + C11367 * C1325 + C11361 * C1332 +
             C11368 * C1831 + C11362 * C1835 + C11369 * C9359 +
             C49334 * C9361) *
                C49047) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C49019 * C616 -
          (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
           ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
           ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
           ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C49047 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C114) *
               C3908) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C114 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C49047) *
               C3908 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C114 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C49047) *
               C3909 +
           ((C3912 * C622 + C49291 * C629 + C3913 * C1319 + C49092 * C1324) *
                C114 +
            (C3912 * C630 + C49291 * C637 + C3913 * C1323 + C49092 * C1331) *
                C49047) *
               C3910 +
           ((C3912 * C623 + C49291 * C631 + C3913 * C1322 + C49092 * C1329) *
                C114 +
            (C3912 * C632 + C49291 * C638 + C3913 * C1330 + C49092 * C1334) *
                C49047) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C15329 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C15326 +
            (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
            (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
               C49269 +
           ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
            C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
            C19079 * C49327) *
               C48945) *
              C49019 * C616 -
          (((C18880 + C18881) * C49327 + (C18882 + C18883) * C15331 +
            (C6520 + C6521) * C15327 + (C6522 + C6523) * C15330 +
            (C4135 + C4136) * C15326 + (C4137 + C4138) * C15329) *
               C48945 +
           ((C3913 * C2406 + C49092 * C2416 + C3912 * C2405 + C49291 * C2415) *
                C49327 +
            (C3913 * C2398 + C49092 * C2404 + C3912 * C2397 + C49291 * C2403) *
                C15331 +
            (C7305 + C7304) * C15327 + (C7303 + C7302) * C15330 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C15326 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C15329) *
               C49269) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C15329 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C15326 +
            (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
                C15330 +
            (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
                C15327 +
            (C3912 * C2398 + C49291 * C2404 + C3913 * C9912 + C49092 * C9914) *
                C15331 +
            (C3912 * C2406 + C49291 * C2416 + C3913 * C9916 + C49092 * C9918) *
                C49327) *
               C49269 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C15329 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C15326 +
            (C3912 * C1518 + C49291 * C1524 + C3913 * C1984 + C49092 * C1988) *
                C15330 +
            (C3912 * C1523 + C49291 * C1530 + C3913 * C1989 + C49092 * C1993) *
                C15327 +
            (C3912 * C2400 + C49291 * C2408 + C3913 * C10176 +
             C49092 * C10177) *
                C15331 +
            (C3912 * C2410 + C49291 * C2418 + C3913 * C10178 +
             C49092 * C10179) *
                C49327) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C410 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C550 +
          ((((C11366 * C722 + C11360 * C727 + C11367 * C1519 + C11361 * C1526 +
              C11368 * C1983 + C11362 * C1986 + C11369 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C11366 * C728 + C11360 * C737 + C11367 * C1525 + C11361 * C1531 +
              C11368 * C1987 + C11362 * C1992 + C11369 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C49269 +
            ((C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
              C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
              C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C410 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C550 +
          ((((C3912 * C722 + C49291 * C727 + C3913 * C1519 + C49092 * C1526) *
                 C114 +
             (C3912 * C728 + C49291 * C737 + C3913 * C1525 + C49092 * C1531) *
                 C49047) *
                C3908 +
            ((C3912 * C723 + C49291 * C729 + C3913 * C1518 + C49092 * C1524) *
                 C114 +
             (C3912 * C730 + C49291 * C738 + C3913 * C1523 + C49092 * C1530) *
                 C49047) *
                C3909 +
            ((C3912 * C724 + C49291 * C731 + C3913 * C1517 + C49092 * C1522) *
                 C114 +
             (C3912 * C732 + C49291 * C739 + C3913 * C1521 + C49092 * C1529) *
                 C49047) *
                C3910 +
            ((C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C114 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
             C19079 * C49327) *
                C48945) *
               C410 -
           (((C19090 + C19091) * C49327 + (C19092 + C19093) * C15331 +
             C19088 * C15327 + C19089 * C15330 + C6746 * C15326 +
             C6747 * C15329) *
                C48945 +
            ((C3913 * C3368 + C49092 * C3373 + C3912 * C2918 + C49291 * C2924) *
                 C49327 +
             (C3913 * C3364 + C49092 * C3367 + C3912 * C2912 + C49291 * C2919) *
                 C15331 +
             (C7848 + C7849) * C15327 + (C7850 + C7851) * C15330 +
             (C6751 + C6750) * C15326 + (C6749 + C6748) * C15329) *
                C49269) *
               C49321) *
              C550 +
          ((((C7302 + C7303) * C15329 + (C7304 + C7305) * C15326 +
             (C19636 + C19637) * C15330 + (C19638 + C19639) * C15327 +
             (C3912 * C3364 + C49291 * C3367 + C3913 * C10326 +
              C49092 * C10329) *
                 C15331 +
             (C3912 * C3368 + C49291 * C3373 + C3913 * C10328 +
              C49092 * C10332) *
                 C49327) *
                C49269 +
            ((C6523 + C6522) * C15329 + (C6521 + C6520) * C15326 +
             (C18883 + C18882) * C15330 + (C18881 + C18880) * C15327 +
             (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
              C49092 * C10330) *
                 C15331 +
             (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
              C49092 * C10333) *
                 C49327) *
                C48945) *
               C49321 -
           (((C18880 + C18881) * C49327 + (C18882 + C18883) * C15331 +
             (C6520 + C6521) * C15327 + (C6522 + C6523) * C15330 +
             (C4135 + C4136) * C15326 + (C4137 + C4138) * C15329) *
                C48945 +
            ((C19639 + C19638) * C49327 + (C19637 + C19636) * C15331 +
             (C7305 + C7304) * C15327 + (C7303 + C7302) * C15330 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C15326 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C15329) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C824 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C49002 * C552 +
          ((((C11726 + C11725 + C11724 + C11723) * C114 +
             (C11722 + C11721 + C11720 + C11719) * C49047) *
                C49269 +
            ((C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
              C11368 * C1517 + C11362 * C1522 + C11369 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
              C11368 * C1521 + C11362 * C1529 + C11369 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C824 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C49002 * C552 +
          ((((C4304 + C4303) * C114 + (C4302 + C4301) * C49047) * C3908 +
            ((C4300 + C4299) * C114 + (C4298 + C4297) * C49047) * C3909 +
            ((C4296 + C4295) * C114 + (C4294 + C4293) * C49047) * C3910 +
            ((C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                 C114 +
             (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
             C19079 * C49327) *
                C48945) *
               C824 -
           (((C19090 + C19091) * C49327 + (C19092 + C19093) * C15331 +
             C19088 * C15327 + C19089 * C15330 + C6746 * C15326 +
             C6747 * C15329) *
                C48945 +
            ((C3913 * C3368 + C49092 * C3373 + C3912 * C2918 + C49291 * C2924) *
                 C49327 +
             (C3913 * C3364 + C49092 * C3367 + C3912 * C2912 + C49291 * C2919) *
                 C15331 +
             (C7848 + C7849) * C15327 + (C7850 + C7851) * C15330 +
             (C6751 + C6750) * C15326 + (C6749 + C6748) * C15329) *
                C49269) *
               C49321) *
              C49002 * C552 +
          (((C6726 * C15329 + C6727 * C15326 + C19078 * C15330 +
             C19079 * C15327 + (C19093 + C19092) * C15331 +
             (C19091 + C19090) * C49327) *
                C49269 +
            (C6299 * C15329 + C6300 * C15326 + (C6755 + C6754) * C15330 +
             (C6753 + C6752) * C15327 +
             (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                 C15331 +
             (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                 C49327) *
                C48945) *
               C49321 -
           (((C6752 + C6753) * C49327 + (C6754 + C6755) * C15331 +
             C6736 * C15327 + C6737 * C15330 + (C3954 + C3953) * C15326 +
             (C3952 + C3951) * C15329) *
                C48945 +
            (C19088 * C49327 + C19089 * C15331 + C6746 * C15327 +
             C6747 * C15330 + (C3950 + C3949) * C15326 +
             (C3948 + C3947) * C15329) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C824 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C268 +
          ((((C11366 * C722 + C11360 * C727 + C11367 * C1519 + C11361 * C1526 +
              C11368 * C1983 + C11362 * C1986 + C11369 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C11366 * C728 + C11360 * C737 + C11367 * C1525 + C11361 * C1531 +
              C11368 * C1987 + C11362 * C1992 + C11369 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C49269 +
            ((C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
              C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
              C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C824 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C268 +
          ((((C3912 * C722 + C49291 * C727 + C3913 * C1519 + C49092 * C1526) *
                 C114 +
             (C3912 * C728 + C49291 * C737 + C3913 * C1525 + C49092 * C1531) *
                 C49047) *
                C3908 +
            ((C3912 * C723 + C49291 * C729 + C3913 * C1518 + C49092 * C1524) *
                 C114 +
             (C3912 * C730 + C49291 * C738 + C3913 * C1523 + C49092 * C1530) *
                 C49047) *
                C3909 +
            ((C3912 * C724 + C49291 * C731 + C3913 * C1517 + C49092 * C1522) *
                 C114 +
             (C3912 * C732 + C49291 * C739 + C3913 * C1521 + C49092 * C1529) *
                 C49047) *
                C3910 +
            ((C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C114 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C15329 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C15326 +
             (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
             (C7851 + C7850) * C15331 + (C7849 + C7848) * C49327) *
                C49269 +
            ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
             C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
             C19079 * C49327) *
                C48945) *
               C824 -
           (((C19090 + C19091) * C49327 + (C19092 + C19093) * C15331 +
             C19088 * C15327 + C19089 * C15330 + C6746 * C15326 +
             C6747 * C15329) *
                C48945 +
            ((C3913 * C3368 + C49092 * C3373 + C3912 * C2918 + C49291 * C2924) *
                 C49327 +
             (C3913 * C3364 + C49092 * C3367 + C3912 * C2912 + C49291 * C2919) *
                 C15331 +
             (C7848 + C7849) * C15327 + (C7850 + C7851) * C15330 +
             (C6751 + C6750) * C15326 + (C6749 + C6748) * C15329) *
                C49269) *
               C49321) *
              C268 +
          ((((C7302 + C7303) * C15329 + (C7304 + C7305) * C15326 +
             (C19636 + C19637) * C15330 + (C19638 + C19639) * C15327 +
             (C3912 * C3364 + C49291 * C3367 + C3913 * C10326 +
              C49092 * C10329) *
                 C15331 +
             (C3912 * C3368 + C49291 * C3373 + C3913 * C10328 +
              C49092 * C10332) *
                 C49327) *
                C49269 +
            ((C6523 + C6522) * C15329 + (C6521 + C6520) * C15326 +
             (C18883 + C18882) * C15330 + (C18881 + C18880) * C15327 +
             (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
              C49092 * C10330) *
                 C15331 +
             (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
              C49092 * C10333) *
                 C49327) *
                C48945) *
               C49321 -
           (((C18880 + C18881) * C49327 + (C18882 + C18883) * C15331 +
             (C6520 + C6521) * C15327 + (C6522 + C6523) * C15330 +
             (C4135 + C4136) * C15326 + (C4137 + C4138) * C15329) *
                C48945 +
            ((C19639 + C19638) * C49327 + (C19637 + C19636) * C15331 +
             (C7305 + C7304) * C15327 + (C7303 + C7302) * C15330 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C15326 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C15329) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C970 -
          (((C11719 + C11720 + C11721 + C11722) * C49047 +
            (C11723 + C11724 + C11725 + C11726) * C114) *
               C48945 +
           ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 + C11362 * C1531 +
             C11367 * C728 + C11361 * C737 + C11366 * C426 + C11360 * C434) *
                C49047 +
            (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 + C11362 * C1526 +
             C11367 * C722 + C11361 * C727 + C11366 * C416 + C11360 * C427) *
                C114) *
               C49269) *
              C971 +
          (((C11366 * C973 + C11360 * C978 + C11367 * C2397 + C11361 * C2403 +
             C11368 * C2398 + C11362 * C2404 + C11369 * C9912 +
             C49334 * C9914) *
                C114 +
            (C11366 * C979 + C11360 * C988 + C11367 * C2405 + C11361 * C2415 +
             C11368 * C2406 + C11362 * C2416 + C11369 * C9916 +
             C49334 * C9918) *
                C49047) *
               C49269 +
           ((C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C114 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49047) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C970 -
          (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
           ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
           ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
           ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                C49047 +
            (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                C114) *
               C3908) *
              C971 +
          (((C3912 * C973 + C49291 * C978 + C3913 * C2397 + C49092 * C2403) *
                C114 +
            (C3912 * C979 + C49291 * C988 + C3913 * C2405 + C49092 * C2415) *
                C49047) *
               C3908 +
           ((C3912 * C974 + C49291 * C980 + C3913 * C2399 + C49092 * C2407) *
                C114 +
            (C3912 * C981 + C49291 * C989 + C3913 * C2409 + C49092 * C2417) *
                C49047) *
               C3909 +
           ((C3912 * C975 + C49291 * C982 + C3913 * C2401 + C49092 * C2411) *
                C114 +
            (C3912 * C983 + C49291 * C990 + C3913 * C2413 + C49092 * C2419) *
                C49047) *
               C3910 +
           ((C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                C114 +
            (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                C49047) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C15329 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C15326 +
            (C6748 + C6749) * C15330 + (C6750 + C6751) * C15327 +
            C20174 * C15331 + C20175 * C49327) *
               C49269 +
           ((C3947 + C3948) * C15329 + (C3949 + C3950) * C15326 +
            C6726 * C15330 + C6727 * C15327 + C19078 * C15331 +
            C19079 * C49327) *
               C48945) *
              C970 -
          (((C19090 + C19091) * C49327 + (C19092 + C19093) * C15331 +
            C19088 * C15327 + C19089 * C15330 + C6746 * C15326 +
            C6747 * C15329) *
               C48945 +
           ((C20184 + C20185) * C49327 + (C20186 + C20187) * C15331 +
            (C7848 + C7849) * C15327 + (C7850 + C7851) * C15330 +
            (C6751 + C6750) * C15326 + (C6749 + C6748) * C15329) *
               C49269) *
              C971 +
          ((C20174 * C15329 + C20175 * C15326 + (C20187 + C20186) * C15330 +
            (C20185 + C20184) * C15327 +
            (C3912 * C3790 + C49291 * C3793 + C3913 * C11232 +
             C49092 * C11234) *
                C15331 +
            (C3912 * C3794 + C49291 * C3799 + C3913 * C11236 +
             C49092 * C11238) *
                C49327) *
               C49269 +
           (C19078 * C15329 + C19079 * C15326 + (C19093 + C19092) * C15330 +
            (C19091 + C19090) * C15327 +
            (C3912 * C3791 + C49291 * C3795 + C3913 * C17947 +
             C49092 * C17948) *
                C15331 +
            (C3912 * C3796 + C49291 * C3800 + C3913 * C17949 +
             C49092 * C17950) *
                C49327) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C11366 * C416 + C11360 * C427 + C11367 * C722 + C11361 * C727 +
            C11368 * C1519 + C11362 * C1526 + C11369 * C1983 + C49334 * C1986) *
               C5121 +
           (C11366 * C426 + C11360 * C434 + C11367 * C728 + C11361 * C737 +
            C11368 * C1525 + C11362 * C1531 + C11369 * C1987 + C49334 * C1992) *
               C49134) *
              C48935 * C49019 * C49002 * C110 -
          ((C11719 + C11720 + C11721 + C11722) * C49134 +
           (C11723 + C11724 + C11725 + C11726) * C5121 +
           (C11410 + C11409 + C11408 + C11407) * C49292 +
           (C11406 + C11405 + C11404 + C11403) * C5120) *
              C48935 * C49019 * C49002 * C111 +
          ((C11418 + C11417 + C11416 + C11415) * C5120 +
           (C11414 + C11413 + C11412 + C11411) * C49292 +
           (C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
            C11368 * C1517 + C11362 * C1522 + C11369 * C1985 + C49334 * C1990) *
               C5121 +
           (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
            C11368 * C1521 + C11362 * C1529 + C11369 * C1991 + C49334 * C1994) *
               C49134) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C3912 * C416 + C49291 * C427 + C3913 * C722 + C49092 * C727) *
                C5121 +
            (C3912 * C426 + C49291 * C434 + C3913 * C728 + C49092 * C737) *
                C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
            (C4304 + C4303) * C5121 + (C4302 + C4301) * C49134) *
               C1107 +
           C6305 * C49311) *
              C49019 * C49002 * C110 -
          (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
            (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
               C49311 +
           ((C4297 + C4298) * C49134 + (C4299 + C4300) * C5121 +
            (C3954 + C3953) * C49292 + (C3952 + C3951) * C5120) *
               C1107 +
           ((C4301 + C4302) * C49134 + (C4303 + C4304) * C5121 +
            (C3950 + C3949) * C49292 + (C3948 + C3947) * C5120) *
               C1106) *
              C49019 * C49002 * C111 +
          (C6305 * C1106 +
           (C3965 * C5120 + C3966 * C49292 + (C4296 + C4295) * C5121 +
            (C4294 + C4293) * C49134) *
               C1107 +
           ((C3962 + C3961) * C5120 + (C3960 + C3959) * C49292 +
            (C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                C5121 +
            (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                C49134) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
               C20289 +
           (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
               C20285 +
           (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
           C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
           (C20185 + C20184) * C49340) *
              C48935 * C49019 * C49002 * C110 -
          ((C19090 + C19091) * C49340 + (C19092 + C19093) * C20292 +
           C19088 * C20287 + C19089 * C20291 + C6746 * C20286 + C6747 * C20290 +
           (C3950 + C3949) * C20285 + (C3948 + C3947) * C20289) *
              C48935 * C49019 * C49002 * C111 +
          (C3963 * C20289 + C3964 * C20285 + C6299 * C20290 + C6300 * C20286 +
           (C6755 + C6754) * C20291 + (C6753 + C6752) * C20287 +
           (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
               C20292 +
           (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
               C49340) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C11366 * C416 + C11360 * C427 + C11367 * C722 + C11361 * C727 +
             C11368 * C1519 + C11362 * C1526 + C11369 * C1983 +
             C49334 * C1986) *
                C5121 +
            (C11366 * C426 + C11360 * C434 + C11367 * C728 + C11361 * C737 +
             C11368 * C1525 + C11362 * C1531 + C11369 * C1987 +
             C49334 * C1992) *
                C49134) *
               C48935 * C49019 * C268 -
           ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
             C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
                C49134 +
            (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
             C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
                C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C11572 + C11571 + C11570 + C11569) * C5120 +
            (C11568 + C11567 + C11566 + C11565) * C49292 +
            (C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
             C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
             C49334 * C9448) *
                C5121 +
            (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
             C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C3912 * C416 + C49291 * C427 + C3913 * C722 + C49092 * C727) *
                 C5121 +
             (C3912 * C426 + C49291 * C434 + C3913 * C728 + C49092 * C737) *
                 C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             (C4304 + C4303) * C5121 + (C4302 + C4301) * C49134) *
                C1107 +
            C6305 * C49311) *
               C49019 * C268 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                 C49134 +
             (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                 C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C5120 + (C4136 + C4135) * C49292 +
             (C6523 + C6522) * C5121 + (C6521 + C6520) * C49134) *
                C1106 +
            ((C4134 + C4133) * C5120 + (C4132 + C4131) * C49292 +
             (C6519 + C6518) * C5121 + (C6517 + C6516) * C49134) *
                C1107 +
            ((C4130 + C4129) * C5120 + (C4128 + C4127) * C49292 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C5121 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            ((C4297 + C4298) * C49134 + (C4299 + C4300) * C5121 +
             (C3954 + C3953) * C49292 + (C3952 + C3951) * C5120) *
                C1107 +
            ((C4301 + C4302) * C49134 + (C4303 + C4304) * C5121 +
             (C3950 + C3949) * C49292 + (C3948 + C3947) * C5120) *
                C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C49019 * C268 -
           ((C3913 * C10328 + C49092 * C10332 + C3912 * C3368 +
             C49291 * C3373) *
                C49340 +
            (C3913 * C10326 + C49092 * C10329 + C3912 * C3364 +
             C49291 * C3367) *
                C20292 +
            (C19639 + C19638) * C20287 + (C19637 + C19636) * C20291 +
            (C7305 + C7304) * C20286 + (C7303 + C7302) * C20290 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C20285 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C20289) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C4138 + C4137) * C20289 + (C4136 + C4135) * C20285 +
            (C6523 + C6522) * C20290 + (C6521 + C6520) * C20286 +
            (C18883 + C18882) * C20291 + (C18881 + C18880) * C20287 +
            (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
             C49092 * C10330) *
                C20292 +
            (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
             C49092 * C10333) *
                C49340) *
               C48935 * C49019 * C49319 -
           ((C19090 + C19091) * C49340 + (C19092 + C19093) * C20292 +
            C19088 * C20287 + C19089 * C20291 + C6746 * C20286 +
            C6747 * C20290 + (C3950 + C3949) * C20285 +
            (C3948 + C3947) * C20289) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C410 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C11726 + C11725 + C11724 + C11723) * C5120 +
            (C11722 + C11721 + C11720 + C11719) * C49292 +
            (C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C5121 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C49002 * C270 +
          (((C6726 * C5120 + C6727 * C49292 + (C6759 + C6758) * C5121 +
             (C6757 + C6756) * C49134) *
                C1106 +
            (C6299 * C5120 + C6300 * C49292 + (C6755 + C6754) * C5121 +
             (C6753 + C6752) * C49134) *
                C1107 +
            ((C4296 + C4295) * C5120 + (C4294 + C4293) * C49292 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C5121 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C410 -
           ((C3913 * C11236 + C49092 * C11238 + C3912 * C3794 +
             C49291 * C3799) *
                C49340 +
            (C3913 * C11232 + C49092 * C11234 + C3912 * C3790 +
             C49291 * C3793) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C7848 + C7849) * C20286 + (C7850 + C7851) * C20290 +
            (C6751 + C6750) * C20285 + (C6749 + C6748) * C20289) *
               C48935 * C49321) *
              C49002 * C270 +
          ((C6726 * C20289 + C6727 * C20285 + C19078 * C20290 +
            C19079 * C20286 + (C19093 + C19092) * C20291 +
            (C19091 + C19090) * C20287 +
            (C3912 * C3791 + C49291 * C3795 + C3913 * C17947 +
             C49092 * C17948) *
                C20292 +
            (C3912 * C3796 + C49291 * C3800 + C3913 * C17949 +
             C49092 * C17950) *
                C49340) *
               C48935 * C49321 -
           ((C19090 + C19091) * C49340 + (C19092 + C19093) * C20292 +
            C19088 * C20287 + C19089 * C20291 + C6746 * C20286 +
            C6747 * C20290 + (C3950 + C3949) * C20285 +
            (C3948 + C3947) * C20289) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C49019 * C550 -
           ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
             C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
                C49134 +
            (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
             C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
                C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C11572 + C11571 + C11570 + C11569) * C5120 +
            (C11568 + C11567 + C11566 + C11565) * C49292 +
            (C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
             C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
             C49334 * C9448) *
                C5121 +
            (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
             C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C49019 * C550 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                 C49134 +
             (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                 C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C5120 + (C4136 + C4135) * C49292 +
             (C6523 + C6522) * C5121 + (C6521 + C6520) * C49134) *
                C1106 +
            ((C4134 + C4133) * C5120 + (C4132 + C4131) * C49292 +
             (C6519 + C6518) * C5121 + (C6517 + C6516) * C49134) *
                C1107 +
            ((C4130 + C4129) * C5120 + (C4128 + C4127) * C49292 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C5121 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C49019 * C550 -
           ((C3913 * C10328 + C49092 * C10332 + C3912 * C3368 +
             C49291 * C3373) *
                C49340 +
            (C3913 * C10326 + C49092 * C10329 + C3912 * C3364 +
             C49291 * C3367) *
                C20292 +
            (C19639 + C19638) * C20287 + (C19637 + C19636) * C20291 +
            (C7305 + C7304) * C20286 + (C7303 + C7302) * C20290 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C20285 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C20289) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C4138 + C4137) * C20289 + (C4136 + C4135) * C20285 +
            (C6523 + C6522) * C20290 + (C6521 + C6520) * C20286 +
            (C18883 + C18882) * C20291 + (C18881 + C18880) * C20287 +
            (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
             C49092 * C10330) *
                C20292 +
            (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
             C49092 * C10333) *
                C49340) *
               C48935 * C49019 * C49319 -
           ((C19090 + C19091) * C49340 + (C19092 + C19093) * C20292 +
            C19088 * C20287 + C19089 * C20291 + C6746 * C20286 +
            C6747 * C20290 + (C3950 + C3949) * C20285 +
            (C3948 + C3947) * C20289) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C14445 + C14446 + C14447 + C14448) * C5121 +
           (C14449 + C14450 + C14451 + C14452) * C49134) *
              C48935 * C49019 * C616 -
          ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
            C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
               C49134 +
           (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
            C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
               C5121 +
           (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
            C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
               C49292 +
           (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
            C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
               C5120) *
              C48935 * C49019 * C617 +
          ((C11366 * C620 + C11360 * C625 + C11367 * C1321 + C11361 * C1328 +
            C11368 * C1825 + C11362 * C1828 + C11369 * C9354 + C49334 * C9357) *
               C5120 +
           (C11366 * C626 + C11360 * C635 + C11367 * C1327 + C11361 * C1333 +
            C11368 * C1829 + C11362 * C1834 + C11369 * C9356 + C49334 * C9360) *
               C49292 +
           (C11366 * C1519 + C11360 * C1526 + C11367 * C1983 + C11361 * C1986 +
            C11368 * C9444 + C11362 * C9447 + C11369 * C9682 + C49334 * C9683) *
               C5121 +
           (C11366 * C1525 + C11360 * C1531 + C11367 * C1987 + C11361 * C1992 +
            C11368 * C9446 + C11362 * C9450 + C11369 * C9684 + C49334 * C9685) *
               C49134) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 + C6726 * C5121 +
            C6727 * C49134) *
               C1107 +
           C6305 * C49311) *
              C49019 * C616 -
          (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
            (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
               C49311 +
           ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
            (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
               C1107 +
           ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                C49134 +
            (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                C5121 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C49292 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C5120) *
               C1106) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C5120 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C49292 +
            (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
                C5121 +
            (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
                C49134) *
               C1106 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C5120 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C49292 +
            (C3912 * C1518 + C49291 * C1524 + C3913 * C1984 + C49092 * C1988) *
                C5121 +
            (C3912 * C1523 + C49291 * C1530 + C3913 * C1989 + C49092 * C1993) *
                C49134) *
               C1107 +
           ((C3912 * C622 + C49291 * C629 + C3913 * C1319 + C49092 * C1324) *
                C5120 +
            (C3912 * C630 + C49291 * C637 + C3913 * C1323 + C49092 * C1331) *
                C49292 +
            (C3912 * C1517 + C49291 * C1522 + C3913 * C1985 + C49092 * C1990) *
                C5121 +
            (C3912 * C1521 + C49291 * C1529 + C3913 * C1991 + C49092 * C1994) *
                C49134) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
               C20289 +
           (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
               C20285 +
           (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
           C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
           (C20185 + C20184) * C49340) *
              C48935 * C49019 * C616 -
          ((C3913 * C10328 + C49092 * C10332 + C3912 * C3368 + C49291 * C3373) *
               C49340 +
           (C3913 * C10326 + C49092 * C10329 + C3912 * C3364 + C49291 * C3367) *
               C20292 +
           (C19639 + C19638) * C20287 + (C19637 + C19636) * C20291 +
           (C7305 + C7304) * C20286 + (C7303 + C7302) * C20290 +
           (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
               C20285 +
           (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
               C20289) *
              C48935 * C49019 * C617 +
          ((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
               C20289 +
           (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
               C20285 +
           (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
               C20290 +
           (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
               C20286 +
           (C3912 * C2398 + C49291 * C2404 + C3913 * C9912 + C49092 * C9914) *
               C20291 +
           (C3912 * C2406 + C49291 * C2416 + C3913 * C9916 + C49092 * C9918) *
               C20287 +
           (C3912 * C10326 + C49291 * C10329 + C3913 * C10790 +
            C49092 * C10791) *
               C20292 +
           (C3912 * C10328 + C49291 * C10332 + C3913 * C10792 +
            C49092 * C10793) *
               C49340) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C410 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C550 +
          (((C14827 + C14828 + C14829 + C14830) * C5120 +
            (C14831 + C14832 + C14833 + C14834) * C49292 +
            (C11366 * C2397 + C11360 * C2403 + C11367 * C2398 + C11361 * C2404 +
             C11368 * C9912 + C11362 * C9914 + C11369 * C9913 +
             C49334 * C9915) *
                C5121 +
            (C11366 * C2405 + C11360 * C2415 + C11367 * C2406 + C11361 * C2416 +
             C11368 * C9916 + C11362 * C9918 + C11369 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C14834 + C14833 + C14832 + C14831) * C49134 +
            (C14830 + C14829 + C14828 + C14827) * C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C550 +
          ((((C7302 + C7303) * C5120 + (C7304 + C7305) * C49292 +
             (C3912 * C2397 + C49291 * C2403 + C3913 * C2398 + C49092 * C2404) *
                 C5121 +
             (C3912 * C2405 + C49291 * C2415 + C3913 * C2406 + C49092 * C2416) *
                 C49134) *
                C1106 +
            ((C6523 + C6522) * C5120 + (C6521 + C6520) * C49292 +
             (C3912 * C2399 + C49291 * C2407 + C3913 * C2400 + C49092 * C2408) *
                 C5121 +
             (C3912 * C2409 + C49291 * C2417 + C3913 * C2410 + C49092 * C2418) *
                 C49134) *
                C1107 +
            ((C6519 + C6518) * C5120 + (C6517 + C6516) * C49292 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C5121 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C410 -
           ((C3913 * C11236 + C49092 * C11238 + C3912 * C3794 +
             C49291 * C3799) *
                C49340 +
            (C3913 * C11232 + C49092 * C11234 + C3912 * C3790 +
             C49291 * C3793) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C7848 + C7849) * C20286 + (C7850 + C7851) * C20290 +
            (C6751 + C6750) * C20285 + (C6749 + C6748) * C20289) *
               C48935 * C49321) *
              C550 +
          (((C7302 + C7303) * C20289 + (C7304 + C7305) * C20285 +
            (C19636 + C19637) * C20290 + (C19638 + C19639) * C20286 +
            (C22032 + C22033) * C20291 + (C22034 + C22035) * C20287 +
            (C3912 * C11232 + C49291 * C11234 + C3913 * C11233 +
             C49092 * C11235) *
                C20292 +
            (C3912 * C11236 + C49291 * C11238 + C3913 * C11237 +
             C49092 * C11239) *
                C49340) *
               C48935 * C49321 -
           ((C22035 + C22034) * C49340 + (C22033 + C22032) * C20292 +
            (C19639 + C19638) * C20287 + (C19637 + C19636) * C20291 +
            (C7305 + C7304) * C20286 + (C7303 + C7302) * C20290 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C20285 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C20289) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C824 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C11726 + C11725 + C11724 + C11723) * C5120 +
            (C11722 + C11721 + C11720 + C11719) * C49292 +
            (C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C5121 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C49002 * C552 +
          (((C6726 * C5120 + C6727 * C49292 + (C6759 + C6758) * C5121 +
             (C6757 + C6756) * C49134) *
                C1106 +
            (C6299 * C5120 + C6300 * C49292 + (C6755 + C6754) * C5121 +
             (C6753 + C6752) * C49134) *
                C1107 +
            ((C4296 + C4295) * C5120 + (C4294 + C4293) * C49292 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C5121 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C824 -
           ((C3913 * C11236 + C49092 * C11238 + C3912 * C3794 +
             C49291 * C3799) *
                C49340 +
            (C3913 * C11232 + C49092 * C11234 + C3912 * C3790 +
             C49291 * C3793) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C7848 + C7849) * C20286 + (C7850 + C7851) * C20290 +
            (C6751 + C6750) * C20285 + (C6749 + C6748) * C20289) *
               C48935 * C49321) *
              C49002 * C552 +
          ((C6726 * C20289 + C6727 * C20285 + C19078 * C20290 +
            C19079 * C20286 + (C19093 + C19092) * C20291 +
            (C19091 + C19090) * C20287 +
            (C3912 * C3791 + C49291 * C3795 + C3913 * C17947 +
             C49092 * C17948) *
                C20292 +
            (C3912 * C3796 + C49291 * C3800 + C3913 * C17949 +
             C49092 * C17950) *
                C49340) *
               C48935 * C49321 -
           ((C19090 + C19091) * C49340 + (C19092 + C19093) * C20292 +
            C19088 * C20287 + C19089 * C20291 + C6746 * C20286 +
            C6747 * C20290 + (C3950 + C3949) * C20285 +
            (C3948 + C3947) * C20289) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C824 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C268 +
          (((C14827 + C14828 + C14829 + C14830) * C5120 +
            (C14831 + C14832 + C14833 + C14834) * C49292 +
            (C11366 * C2397 + C11360 * C2403 + C11367 * C2398 + C11361 * C2404 +
             C11368 * C9912 + C11362 * C9914 + C11369 * C9913 +
             C49334 * C9915) *
                C5121 +
            (C11366 * C2405 + C11360 * C2415 + C11367 * C2406 + C11361 * C2416 +
             C11368 * C9916 + C11362 * C9918 + C11369 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C14834 + C14833 + C14832 + C14831) * C49134 +
            (C14830 + C14829 + C14828 + C14827) * C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C268 +
          ((((C7302 + C7303) * C5120 + (C7304 + C7305) * C49292 +
             (C3912 * C2397 + C49291 * C2403 + C3913 * C2398 + C49092 * C2404) *
                 C5121 +
             (C3912 * C2405 + C49291 * C2415 + C3913 * C2406 + C49092 * C2416) *
                 C49134) *
                C1106 +
            ((C6523 + C6522) * C5120 + (C6521 + C6520) * C49292 +
             (C3912 * C2399 + C49291 * C2407 + C3913 * C2400 + C49092 * C2408) *
                 C5121 +
             (C3912 * C2409 + C49291 * C2417 + C3913 * C2410 + C49092 * C2418) *
                 C49134) *
                C1107 +
            ((C6519 + C6518) * C5120 + (C6517 + C6516) * C49292 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C5121 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C20289 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C20285 +
            (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
            C20174 * C20291 + C20175 * C20287 + (C20187 + C20186) * C20292 +
            (C20185 + C20184) * C49340) *
               C48935 * C824 -
           ((C3913 * C11236 + C49092 * C11238 + C3912 * C3794 +
             C49291 * C3799) *
                C49340 +
            (C3913 * C11232 + C49092 * C11234 + C3912 * C3790 +
             C49291 * C3793) *
                C20292 +
            (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
            (C7848 + C7849) * C20286 + (C7850 + C7851) * C20290 +
            (C6751 + C6750) * C20285 + (C6749 + C6748) * C20289) *
               C48935 * C49321) *
              C268 +
          (((C7302 + C7303) * C20289 + (C7304 + C7305) * C20285 +
            (C19636 + C19637) * C20290 + (C19638 + C19639) * C20286 +
            (C22032 + C22033) * C20291 + (C22034 + C22035) * C20287 +
            (C3912 * C11232 + C49291 * C11234 + C3913 * C11233 +
             C49092 * C11235) *
                C20292 +
            (C3912 * C11236 + C49291 * C11238 + C3913 * C11237 +
             C49092 * C11239) *
                C49340) *
               C48935 * C49321 -
           ((C22035 + C22034) * C49340 + (C22033 + C22032) * C20292 +
            (C19639 + C19638) * C20287 + (C19637 + C19636) * C20291 +
            (C7305 + C7304) * C20286 + (C7303 + C7302) * C20290 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C20285 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C20289) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C14445 + C14446 + C14447 + C14448) * C5121 +
           (C14449 + C14450 + C14451 + C14452) * C49134) *
              C48935 * C970 -
          ((C15209 + C15210 + C15211 + C15212) * C49134 +
           (C15213 + C15214 + C15215 + C15216) * C5121 +
           (C14452 + C14451 + C14450 + C14449) * C49292 +
           (C14448 + C14447 + C14446 + C14445) * C5120) *
              C48935 * C971 +
          ((C15216 + C15215 + C15214 + C15213) * C5120 +
           (C15212 + C15211 + C15210 + C15209) * C49292 +
           (C11366 * C2912 + C11360 * C2919 + C11367 * C3364 + C11361 * C3367 +
            C11368 * C10326 + C11362 * C10329 + C11369 * C10790 +
            C49334 * C10791) *
               C5121 +
           (C11366 * C2918 + C11360 * C2924 + C11367 * C3368 + C11361 * C3373 +
            C11368 * C10328 + C11362 * C10332 + C11369 * C10792 +
            C49334 * C10793) *
               C49134) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 + C6726 * C5121 +
            C6727 * C49134) *
               C1107 +
           C6305 * C49311) *
              C970 -
          (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
            C6736 * C49292 + C6737 * C5120) *
               C49311 +
           ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
            C6746 * C49292 + C6747 * C5120) *
               C1107 +
           ((C7848 + C7849) * C49134 + (C7850 + C7851) * C5121 +
            (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
               C1106) *
              C971 +
          (((C7851 + C7850) * C5120 + (C7849 + C7848) * C49292 +
            (C3912 * C2912 + C49291 * C2919 + C3913 * C3364 + C49092 * C3367) *
                C5121 +
            (C3912 * C2918 + C49291 * C2924 + C3913 * C3368 + C49092 * C3373) *
                C49134) *
               C1106 +
           ((C6759 + C6758) * C5120 + (C6757 + C6756) * C49292 +
            (C3912 * C2911 + C49291 * C2917 + C3913 * C3365 + C49092 * C3369) *
                C5121 +
            (C3912 * C2916 + C49291 * C2923 + C3913 * C3370 + C49092 * C3374) *
                C49134) *
               C1107 +
           ((C6755 + C6754) * C5120 + (C6753 + C6752) * C49292 +
            (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                C5121 +
            (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                C49134) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
               C20289 +
           (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
               C20285 +
           (C6748 + C6749) * C20290 + (C6750 + C6751) * C20286 +
           C20174 * C20291 + C20175 * C20287 + C22394 * C20292 +
           C22395 * C49340) *
              C48935 * C970 -
          ((C22404 + C22405) * C49340 + (C22406 + C22407) * C20292 +
           (C20184 + C20185) * C20287 + (C20186 + C20187) * C20291 +
           (C7848 + C7849) * C20286 + (C7850 + C7851) * C20290 +
           (C6751 + C6750) * C20285 + (C6749 + C6748) * C20289) *
              C48935 * C971 +
          (C20174 * C20289 + C20175 * C20285 + C22394 * C20290 +
           C22395 * C20286 + (C22407 + C22406) * C20291 +
           (C22405 + C22404) * C20287 +
           (C3912 * C18033 + C49291 * C18036 + C3913 * C18279 +
            C49092 * C18280) *
               C20292 +
           (C3912 * C18035 + C49291 * C18039 + C3913 * C18281 +
            C49092 * C18282) *
               C49340) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C49030 * C122) * C114 +
                (C113 * C123 + C49030 * C136) * C49047) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C49019 * C49002 * C110 -
              ((C182 + C183) * C107 + (C181 + C180) * C106 +
               (C179 + C178) * C105 + (C177 + C176) * C104 +
               (C175 + C174) * C103) *
                  C49019 * C49002 * C111 +
              (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
               ((C113 * C121 + C49030 * C134) * C114 +
                (C113 * C135 + C49030 * C142) * C49047) *
                   C107) *
                  C49019 * C49002 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                 C1111 * C620 + C49324 * C625) *
                    C114 +
                (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                 C1111 * C626 + C49324 * C635) *
                    C49047) *
                   C1106 +
               ((C1149 + C1150 + C1151) * C114 +
                (C1152 + C1153 + C1154) * C49047) *
                   C1107 +
               C1173 * C49311) *
                  C49019 * C49002 * C110 -
              (((C1161 + C1162 + C1163) * C49047 +
                (C1164 + C1165 + C1166) * C114) *
                   C49311 +
               ((C1160 + C1159 + C1158) * C49047 +
                (C1157 + C1156 + C1155) * C114) *
                   C1107 +
               ((C1154 + C1153 + C1152) * C49047 +
                (C1151 + C1150 + C1149) * C114) *
                   C1106) *
                  C49019 * C49002 * C111 +
              (C1173 * C1106 +
               ((C1166 + C1165 + C1164) * C114 +
                (C1163 + C1162 + C1161) * C49047) *
                   C1107 +
               ((C1109 * C119 + C49359 * C130 + C1110 * C272 + C49347 * C279 +
                 C1111 * C624 + C49324 * C633) *
                    C114 +
                (C1109 * C131 + C49359 * C140 + C1110 * C278 + C49347 * C290 +
                 C1111 * C634 + C49324 * C639) *
                    C49047) *
                   C49311) *
                  C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 +
            (C113 * C416 + C49030 * C427) * C2535 +
            (C113 * C426 + C49030 * C434) * C49349 +
            (C113 * C973 + C49030 * C978) * C2536 +
            (C113 * C979 + C49030 * C988) * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C49019 * C49002 * C110 -
          ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
           (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
           (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
              C49019 * C49002 * C111 +
          (C2578 * C1106 +
           (C2561 + C2560 + C2559 + C2558 + C2575 + C2574) * C1107 +
           (C170 * C2534 + C171 * C49360 + C454 * C2535 + C453 * C49349 +
            (C113 * C977 + C49030 * C986) * C2536 +
            (C113 * C987 + C49030 * C992) * C49327) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C49002 * C110 -
          (((C8019 + C8020 + C8021) * C49047 + (C8022 + C8023 + C8024) * C114) *
               C49311 +
           ((C8018 + C8017 + C8016) * C49047 + (C8015 + C8014 + C8013) * C114) *
               C49343 +
           ((C8012 + C8011 + C8010) * C49047 + (C8009 + C8008 + C8007) * C114) *
               C49356) *
              C49019 * C49002 * C111 +
          (C8031 * C49356 +
           ((C8024 + C8023 + C8022) * C114 + (C8021 + C8020 + C8019) * C49047) *
               C49343 +
           ((C7967 * C119 + C7961 * C130 + C7968 * C272 + C7962 * C279 +
             C7969 * C624 + C49324 * C633) *
                C114 +
            (C7967 * C131 + C7961 * C140 + C7968 * C278 + C7962 * C290 +
             C7969 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C49002 * C110 -
          ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
            C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
            C9267 * C125 + C9261 * C137) *
               C49047 +
           (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
            C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
            C9267 * C116 + C9261 * C124) *
               C114) *
              C48935 * C49019 * C49002 * C111 +
          ((C9267 * C117 + C9261 * C126 + C9268 * C274 + C9262 * C283 +
            C9269 * C622 + C9263 * C629 + C9270 * C1319 + C9264 * C1324 +
            C9271 * C1827 + C9265 * C1832) *
               C114 +
           (C9267 * C127 + C9261 * C138 + C9268 * C282 + C9262 * C292 +
            C9269 * C630 + C9263 * C637 + C9270 * C1323 + C9264 * C1331 +
            C9271 * C1833 + C9265 * C1836) *
               C49047) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C7967 * C416 + C7961 * C427 + C7968 * C722 + C7962 * C727 +
            C7969 * C1519 + C49324 * C1526) *
               C2535 +
           (C7967 * C426 + C7961 * C434 + C7968 * C728 + C7962 * C737 +
            C7969 * C1525 + C49324 * C1531) *
               C49349 +
           (C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
            C7969 * C2398 + C49324 * C2404) *
               C2536 +
           (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
            C7969 * C2406 + C49324 * C2416) *
               C49327) *
              C48935 * C49019 * C49002 * C110 -
          ((C7969 * C2410 + C49324 * C2418 + C7968 * C2409 + C7962 * C2417 +
            C7967 * C981 + C7961 * C989) *
               C49327 +
           (C7969 * C2400 + C49324 * C2408 + C7968 * C2399 + C7962 * C2407 +
            C7967 * C974 + C7961 * C980) *
               C2536 +
           (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
           (C8012 + C8011 + C8010) * C49360 + (C8009 + C8008 + C8007) * C2534) *
              C48935 * C49019 * C49002 * C111 +
          (C8027 * C2534 + C8028 * C49360 + (C8389 + C8388 + C8387) * C2535 +
           (C8386 + C8385 + C8384) * C49349 +
           (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
            C7969 * C2402 + C49324 * C2412) *
               C2536 +
           (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
            C7969 * C2414 + C49324 * C2420) *
               C49327) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C49019 * C49002 * C110 -
          ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
           (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
           (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
              C49019 * C49002 * C111 +
          (C15355 * C49356 +
           (C15350 + C15349 + C15348 + C15347 + C15346 + C15345) * C49343 +
           (C170 * C15329 + C171 * C15326 + C454 * C15330 + C453 * C15327 +
            (C113 * C977 + C49030 * C986) * C15331 +
            (C113 * C987 + C49030 * C992) * C49327) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C1109 * C416 + C49359 * C427 + C1110 * C722 + C49347 * C727 +
            C1111 * C1519 + C49324 * C1526) *
               C15330 +
           (C1109 * C426 + C49359 * C434 + C1110 * C728 + C49347 * C737 +
            C1111 * C1525 + C49324 * C1531) *
               C15327 +
           (C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
            C1111 * C2398 + C49324 * C2404) *
               C15331 +
           (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
            C1111 * C2406 + C49324 * C2416) *
               C49327) *
              C48935 * C49019 * C49002 * C110 -
          ((C1111 * C2410 + C49324 * C2418 + C1110 * C2409 + C49347 * C2417 +
            C1109 * C981 + C49359 * C989) *
               C49327 +
           (C1111 * C2400 + C49324 * C2408 + C1110 * C2399 + C49347 * C2407 +
            C1109 * C974 + C49359 * C980) *
               C15331 +
           (C1564 + C1565 + C1566) * C15327 + (C1567 + C1568 + C1569) * C15330 +
           (C1154 + C1153 + C1152) * C15326 +
           (C1151 + C1150 + C1149) * C15329) *
              C48935 * C49019 * C49002 * C111 +
          (C1169 * C15329 + C1170 * C15326 + (C1563 + C1562 + C1561) * C15330 +
           (C1560 + C1559 + C1558) * C15327 +
           (C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
            C1111 * C2402 + C49324 * C2412) *
               C15331 +
           (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
            C1111 * C2414 + C49324 * C2420) *
               C49327) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C49030 * C122) * C17860 +
           (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
           C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
           C3807 * C17858 + (C113 * C3790 + C49030 * C3793) * C17864 +
           (C113 * C3794 + C49030 * C3799) * C17859) *
              C48935 * C49019 * C49002 * C110 -
          ((C113 * C3796 + C49030 * C3800) * C17859 +
           (C113 * C3791 + C49030 * C3795) * C17864 + C2957 * C17858 +
           C2958 * C17863 + C2563 * C17857 + C2562 * C17862 + C459 * C17856 +
           C460 * C17861 + C165 * C17855 + C164 * C17860) *
              C48935 * C49019 * C49002 * C111 +
          (C166 * C17860 + C167 * C17855 + C458 * C17861 + C457 * C17856 +
           C2565 * C17862 + C2566 * C17857 + C2956 * C17863 + C2955 * C17858 +
           (C113 * C3792 + C49030 * C3797) * C17864 +
           (C113 * C3798 + C49030 * C3801) * C17859) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C49019 * C268 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C49030 * C294) * C49047 +
                 (C113 * C276 + C49030 * C287) * C114) *
                    C103) *
                   C49019 * C49319) *
                  C270 +
              (((C328 + C327) * C103 + (C326 + C325) * C104 +
                (C324 + C323) * C105 + (C322 + C321) * C106 +
                ((C113 * C277 + C49030 * C288) * C114 +
                 (C113 * C289 + C49030 * C295) * C49047) *
                    C107) *
                   C49019 * C49319 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C49019 * C268) *
                  C49317) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C49019 * C268 -
               (((C1360 + C1361 + C1362) * C49047 +
                 (C1363 + C1364 + C1365) * C114) *
                    C49311 +
                ((C1366 + C1367 + C1368) * C49047 +
                 (C1369 + C1370 + C1371) * C114) *
                    C1107 +
                ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                  C49347 * C635 + C1109 * C286 + C49359 * C294) *
                     C49047 +
                 (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                  C49347 * C625 + C1109 * C276 + C49359 * C287) *
                     C114) *
                    C1106) *
                   C49019 * C49319) *
                  C270 +
              ((((C1371 + C1370 + C1369) * C114 +
                 (C1368 + C1367 + C1366) * C49047) *
                    C1106 +
                ((C1365 + C1364 + C1363) * C114 +
                 (C1362 + C1361 + C1360) * C49047) *
                    C1107 +
                ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
                  C1111 * C1322 + C49324 * C1329) *
                     C114 +
                 (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
                  C1111 * C1330 + C49324 * C1334) *
                     C49047) *
                    C49311) *
                   C49019 * C49319 -
               (((C1161 + C1162 + C1163) * C49047 +
                 (C1164 + C1165 + C1166) * C114) *
                    C49311 +
                ((C1160 + C1159 + C1158) * C49047 +
                 (C1157 + C1156 + C1155) * C114) *
                    C1107 +
                ((C1154 + C1153 + C1152) * C49047 +
                 (C1151 + C1150 + C1149) * C114) *
                    C1106) *
                   C49019 * C268) *
                  C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 +
             (C113 * C416 + C49030 * C427) * C2535 +
             (C113 * C426 + C49030 * C434) * C49349 +
             (C113 * C973 + C49030 * C978) * C2536 +
             (C113 * C979 + C49030 * C988) * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C49019 * C268 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            ((C113 * C2405 + C49030 * C2415) * C49327 +
             (C113 * C2397 + C49030 * C2403) * C2536 +
             (C113 * C728 + C49030 * C737) * C49349 +
             (C113 * C722 + C49030 * C727) * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C49019 * C49319) *
              C270 +
          (((C2748 + C2747 + C2764 + C2763 + C2762 + C2761) * C1106 +
            (C2738 + C2737 + C2760 + C2759 + C2758 + C2757) * C1107 +
            (C316 * C2534 + C315 * C49360 +
             (C113 * C725 + C49030 * C733) * C2535 +
             (C113 * C734 + C49030 * C740) * C49349 +
             (C113 * C2724 + C49030 * C2725) * C2536 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C268 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C268 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C7967 * C416 + C7961 * C427 + C7968 * C722 + C7962 * C727 +
             C7969 * C1519 + C49324 * C1526) *
                C2535 +
            (C7967 * C426 + C7961 * C434 + C7968 * C728 + C7962 * C737 +
             C7969 * C1525 + C49324 * C1531) *
                C49349 +
            (C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C2536 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49327) *
               C48935 * C49019 * C268 -
           ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
             C7967 * C2405 + C7961 * C2415) *
                C49327 +
            (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
             C7967 * C2397 + C7961 * C2403) *
                C2536 +
            (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
             C7967 * C728 + C7961 * C737) *
                C49349 +
            (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
             C7967 * C722 + C7961 * C727) *
                C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C8213 + C8212 + C8211) * C2534 + (C8210 + C8209 + C8208) * C49360 +
            (C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
             C7969 * C1984 + C49324 * C1988) *
                C2535 +
            (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
             C7969 * C1989 + C49324 * C1993) *
                C49349 +
            (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
             C7969 * C10176 + C49324 * C10177) *
                C2536 +
            (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
             C7969 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C7969 * C2410 + C49324 * C2418 + C7968 * C2409 + C7962 * C2417 +
             C7967 * C981 + C7961 * C989) *
                C49327 +
            (C7969 * C2400 + C49324 * C2408 + C7968 * C2399 + C7962 * C2407 +
             C7967 * C974 + C7961 * C980) *
                C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C49019 * C268 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C49019 * C49319) *
              C270 +
          (((C15513 + C15512 + C15511 + C15510 + C15509 + C15508) * C49356 +
            (C15507 + C15506 + C15505 + C15504 + C15503 + C15502) * C49343 +
            (C316 * C15329 + C315 * C15326 + C5290 * C15330 + C5289 * C15327 +
             (C113 * C2724 + C49030 * C2725) * C15331 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C1109 * C416 + C49359 * C427 + C1110 * C722 + C49347 * C727 +
             C1111 * C1519 + C49324 * C1526) *
                C15330 +
            (C1109 * C426 + C49359 * C434 + C1110 * C728 + C49347 * C737 +
             C1111 * C1525 + C49324 * C1531) *
                C15327 +
            (C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
             C1111 * C2398 + C49324 * C2404) *
                C15331 +
            (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
             C1111 * C2406 + C49324 * C2416) *
                C49327) *
               C48935 * C49019 * C268 -
           ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
             C1109 * C2405 + C49359 * C2415) *
                C49327 +
            (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
             C1109 * C2397 + C49359 * C2403) *
                C15331 +
            (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
             C1109 * C728 + C49359 * C737) *
                C15327 +
            (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
             C1109 * C722 + C49359 * C727) *
                C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C1371 + C1370 + C1369) * C15329 +
            (C1368 + C1367 + C1366) * C15326 +
            (C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
             C1111 * C1984 + C49324 * C1988) *
                C15330 +
            (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
             C1111 * C1989 + C49324 * C1993) *
                C15327 +
            (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 + C49347 * C2408 +
             C1111 * C10176 + C49324 * C10177) *
                C15331 +
            (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 + C49347 * C2418 +
             C1111 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C1111 * C2410 + C49324 * C2418 + C1110 * C2409 + C49347 * C2417 +
             C1109 * C981 + C49359 * C989) *
                C49327 +
            (C1111 * C2400 + C49324 * C2408 + C1110 * C2399 + C49347 * C2407 +
             C1109 * C974 + C49359 * C980) *
                C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + (C113 * C3790 + C49030 * C3793) * C17864 +
            (C113 * C3794 + C49030 * C3799) * C17859) *
               C48935 * C49019 * C268 -
           ((C113 * C11236 + C49030 * C11238) * C17859 +
            (C113 * C11232 + C49030 * C11234) * C17864 +
            (C113 * C3368 + C49030 * C3373) * C17858 +
            (C113 * C3364 + C49030 * C3367) * C17863 + C3388 * C17857 +
            C3387 * C17862 + C3386 * C17856 + C3385 * C17861 +
            (C113 * C286 + C49030 * C294) * C17855 +
            (C113 * C276 + C49030 * C287) * C17860) *
               C48935 * C49019 * C49319) *
              C270 +
          ((C320 * C17860 + C319 * C17855 + C2756 * C17861 + C2755 * C17856 +
            C2754 * C17862 + C2753 * C17857 +
            (C113 * C3365 + C49030 * C3369) * C17863 +
            (C113 * C3370 + C49030 * C3374) * C17858 +
            (C113 * C17947 + C49030 * C17948) * C17864 +
            (C113 * C17949 + C49030 * C17950) * C17859) *
               C48935 * C49019 * C49319 -
           ((C113 * C3796 + C49030 * C3800) * C17859 +
            (C113 * C3791 + C49030 * C3795) * C17864 + C2957 * C17858 +
            C2958 * C17863 + C2563 * C17857 + C2562 * C17862 + C459 * C17856 +
            C460 * C17861 + C165 * C17855 + C164 * C17860) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C410 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C49030 * C434) * C49047 +
                 (C113 * C416 + C49030 * C427) * C114) *
                    C103) *
                   C49321) *
                  C49002 * C270 +
              (((C468 + C467) * C103 + (C466 + C465) * C104 +
                (C464 + C463) * C105 + (C462 + C461) * C106 +
                ((C113 * C417 + C49030 * C428) * C114 +
                 (C113 * C429 + C49030 * C435) * C49047) *
                    C107) *
                   C49321 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C410) *
                  C49002 * C49317) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C410 -
               (((C1558 + C1559 + C1560) * C49047 +
                 (C1561 + C1562 + C1563) * C114) *
                    C49311 +
                ((C1564 + C1565 + C1566) * C49047 +
                 (C1567 + C1568 + C1569) * C114) *
                    C1107 +
                ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 +
                  C49347 * C737 + C1109 * C426 + C49359 * C434) *
                     C49047 +
                 (C1111 * C1519 + C49324 * C1526 + C1110 * C722 +
                  C49347 * C727 + C1109 * C416 + C49359 * C427) *
                     C114) *
                    C1106) *
                   C49321) *
                  C49002 * C270 +
              ((((C1569 + C1568 + C1567) * C114 +
                 (C1566 + C1565 + C1564) * C49047) *
                    C1106 +
                ((C1563 + C1562 + C1561) * C114 +
                 (C1560 + C1559 + C1558) * C49047) *
                    C1107 +
                ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
                  C1111 * C1520 + C49324 * C1527) *
                     C114 +
                 (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
                  C1111 * C1528 + C49324 * C1532) *
                     C49047) *
                    C49311) *
                   C49321 -
               (((C1161 + C1162 + C1163) * C49047 +
                 (C1164 + C1165 + C1166) * C114) *
                    C49311 +
                ((C1160 + C1159 + C1158) * C49047 +
                 (C1157 + C1156 + C1155) * C114) *
                    C1107 +
                ((C1154 + C1153 + C1152) * C49047 +
                 (C1151 + C1150 + C1149) * C114) *
                    C1106) *
                   C410) *
                  C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C410 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C49002 * C270 +
          (((C2950 + C2949 + C2948 + C2947 + C2962 + C2961) * C1106 +
            (C2942 + C2941 + C2940 + C2939 + C2960 + C2959) * C1107 +
            (C456 * C2534 + C455 * C49360 + C2568 * C2535 + C2567 * C49349 +
             (C113 * C2913 + C49030 * C2920) * C2536 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C270 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C410 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C8395 + C8394 + C8393) * C2534 + (C8392 + C8391 + C8390) * C49360 +
            (C10383 + C10384 + C10385) * C2535 +
            (C10386 + C10387 + C10388) * C49349 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C2536 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C410 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C49002 * C270 +
          (((C15671 + C15670 + C15669 + C15668 + C15667 + C15666) * C49356 +
            (C15665 + C15664 + C15663 + C15662 + C15661 + C15660) * C49343 +
            (C456 * C15329 + C455 * C15326 + C2568 * C15330 + C2567 * C15327 +
             (C113 * C2913 + C49030 * C2920) * C15331 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C410 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C1569 + C1568 + C1567) * C15329 +
            (C1566 + C1565 + C1564) * C15326 +
            (C16926 + C16927 + C16928) * C15330 +
            (C16929 + C16930 + C16931) * C15327 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C15331 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
               C48935 * C410 -
           ((C113 * C18035 + C49030 * C18039) * C17859 +
            (C113 * C18033 + C49030 * C18036) * C17864 + C18051 * C17858 +
            C18050 * C17863 + C3807 * C17857 + C3808 * C17862 + C2954 * C17856 +
            C2953 * C17861 + C2952 * C17855 + C2951 * C17860) *
               C48935 * C49321) *
              C49002 * C270 +
          ((C460 * C17860 + C459 * C17855 + C2562 * C17861 + C2563 * C17856 +
            C2958 * C17862 + C2957 * C17857 + C18052 * C17863 +
            C18053 * C17858 + (C113 * C18034 + C49030 * C18037) * C17864 +
            (C113 * C18038 + C49030 * C18040) * C17859) *
               C48935 * C49321 -
           (C18053 * C17859 + C18052 * C17864 + C2957 * C17858 +
            C2958 * C17863 + C2563 * C17857 + C2562 * C17862 + C459 * C17856 +
            C460 * C17861 + C165 * C17855 + C164 * C17860) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C49019 * C550 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C49030 * C294) * C49047 +
                 (C113 * C276 + C49030 * C287) * C114) *
                    C103) *
                   C49019 * C49319) *
                  C552 +
              (((C328 + C327) * C103 + (C326 + C325) * C104 +
                (C324 + C323) * C105 + (C322 + C321) * C106 +
                ((C113 * C277 + C49030 * C288) * C114 +
                 (C113 * C289 + C49030 * C295) * C49047) *
                    C107) *
                   C49019 * C49319 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C49019 * C550) *
                  C49317) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C49019 * C550 -
               (((C1360 + C1361 + C1362) * C49047 +
                 (C1363 + C1364 + C1365) * C114) *
                    C49311 +
                ((C1366 + C1367 + C1368) * C49047 +
                 (C1369 + C1370 + C1371) * C114) *
                    C1107 +
                ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                  C49347 * C635 + C1109 * C286 + C49359 * C294) *
                     C49047 +
                 (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                  C49347 * C625 + C1109 * C276 + C49359 * C287) *
                     C114) *
                    C1106) *
                   C49019 * C49319) *
                  C552 +
              ((((C1371 + C1370 + C1369) * C114 +
                 (C1368 + C1367 + C1366) * C49047) *
                    C1106 +
                ((C1365 + C1364 + C1363) * C114 +
                 (C1362 + C1361 + C1360) * C49047) *
                    C1107 +
                ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
                  C1111 * C1322 + C49324 * C1329) *
                     C114 +
                 (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
                  C1111 * C1330 + C49324 * C1334) *
                     C49047) *
                    C49311) *
                   C49019 * C49319 -
               (((C1161 + C1162 + C1163) * C49047 +
                 (C1164 + C1165 + C1166) * C114) *
                    C49311 +
                ((C1160 + C1159 + C1158) * C49047 +
                 (C1157 + C1156 + C1155) * C114) *
                    C1107 +
                ((C1154 + C1153 + C1152) * C49047 +
                 (C1151 + C1150 + C1149) * C114) *
                    C1106) *
                   C49019 * C550) *
                  C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C49019 * C550 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            ((C113 * C2405 + C49030 * C2415) * C49327 +
             (C113 * C2397 + C49030 * C2403) * C2536 +
             (C113 * C728 + C49030 * C737) * C49349 +
             (C113 * C722 + C49030 * C727) * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C49019 * C49319) *
              C552 +
          (((C2748 + C2747 + C2764 + C2763 + C2762 + C2761) * C1106 +
            (C2738 + C2737 + C2760 + C2759 + C2758 + C2757) * C1107 +
            (C316 * C2534 + C315 * C49360 +
             (C113 * C725 + C49030 * C733) * C2535 +
             (C113 * C734 + C49030 * C740) * C49349 +
             (C113 * C2724 + C49030 * C2725) * C2536 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C550 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C550 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C49019 * C550 -
           ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
             C7967 * C2405 + C7961 * C2415) *
                C49327 +
            (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
             C7967 * C2397 + C7961 * C2403) *
                C2536 +
            (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
             C7967 * C728 + C7961 * C737) *
                C49349 +
            (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
             C7967 * C722 + C7961 * C727) *
                C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C8213 + C8212 + C8211) * C2534 + (C8210 + C8209 + C8208) * C49360 +
            (C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
             C7969 * C1984 + C49324 * C1988) *
                C2535 +
            (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
             C7969 * C1989 + C49324 * C1993) *
                C49349 +
            (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
             C7969 * C10176 + C49324 * C10177) *
                C2536 +
            (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
             C7969 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C49019 * C550 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C49019 * C49319) *
              C552 +
          (((C15513 + C15512 + C15511 + C15510 + C15509 + C15508) * C49356 +
            (C15507 + C15506 + C15505 + C15504 + C15503 + C15502) * C49343 +
            (C316 * C15329 + C315 * C15326 + C5290 * C15330 + C5289 * C15327 +
             (C113 * C2724 + C49030 * C2725) * C15331 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C49019 * C550 -
           ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
             C1109 * C2405 + C49359 * C2415) *
                C49327 +
            (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
             C1109 * C2397 + C49359 * C2403) *
                C15331 +
            (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
             C1109 * C728 + C49359 * C737) *
                C15327 +
            (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
             C1109 * C722 + C49359 * C727) *
                C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C1371 + C1370 + C1369) * C15329 +
            (C1368 + C1367 + C1366) * C15326 +
            (C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
             C1111 * C1984 + C49324 * C1988) *
                C15330 +
            (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
             C1111 * C1989 + C49324 * C1993) *
                C15327 +
            (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 + C49347 * C2408 +
             C1111 * C10176 + C49324 * C10177) *
                C15331 +
            (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 + C49347 * C2418 +
             C1111 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
               C48935 * C49019 * C550 -
           ((C113 * C11236 + C49030 * C11238) * C17859 +
            (C113 * C11232 + C49030 * C11234) * C17864 +
            (C113 * C3368 + C49030 * C3373) * C17858 +
            (C113 * C3364 + C49030 * C3367) * C17863 + C3388 * C17857 +
            C3387 * C17862 + C3386 * C17856 + C3385 * C17861 +
            (C113 * C286 + C49030 * C294) * C17855 +
            (C113 * C276 + C49030 * C287) * C17860) *
               C48935 * C49019 * C49319) *
              C552 +
          ((C320 * C17860 + C319 * C17855 + C2756 * C17861 + C2755 * C17856 +
            C2754 * C17862 + C2753 * C17857 +
            (C113 * C3365 + C49030 * C3369) * C17863 +
            (C113 * C3370 + C49030 * C3374) * C17858 +
            (C113 * C17947 + C49030 * C17948) * C17864 +
            (C113 * C17949 + C49030 * C17950) * C17859) *
               C48935 * C49019 * C49319 -
           (C18053 * C17859 + C18052 * C17864 + C2957 * C17858 +
            C2958 * C17863 + C2563 * C17857 + C2562 * C17862 + C459 * C17856 +
            C460 * C17861 + C165 * C17855 + C164 * C17860) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C49030 * C122) * C114 +
                (C113 * C123 + C49030 * C136) * C49047) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C49019 * C616 -
              ((C321 + C322) * C107 + (C323 + C324) * C106 +
               (C325 + C326) * C105 + (C327 + C328) * C104 +
               ((C113 * C286 + C49030 * C294) * C49047 +
                (C113 * C276 + C49030 * C287) * C114) *
                   C103) *
                  C49019 * C617 +
              (((C113 * C620 + C49030 * C625) * C114 +
                (C113 * C626 + C49030 * C635) * C49047) *
                   C103 +
               ((C113 * C621 + C49030 * C627) * C114 +
                (C113 * C628 + C49030 * C636) * C49047) *
                   C104 +
               ((C113 * C622 + C49030 * C629) * C114 +
                (C113 * C630 + C49030 * C637) * C49047) *
                   C105 +
               ((C113 * C623 + C49030 * C631) * C114 +
                (C113 * C632 + C49030 * C638) * C49047) *
                   C106 +
               ((C113 * C624 + C49030 * C633) * C114 +
                (C113 * C634 + C49030 * C639) * C49047) *
                   C107) *
                  C49019 * C618) *
             C48968 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                 C1111 * C620 + C49324 * C625) *
                    C114 +
                (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                 C1111 * C626 + C49324 * C635) *
                    C49047) *
                   C1106 +
               ((C1149 + C1150 + C1151) * C114 +
                (C1152 + C1153 + C1154) * C49047) *
                   C1107 +
               C1173 * C49311) *
                  C49019 * C616 -
              (((C1360 + C1361 + C1362) * C49047 +
                (C1363 + C1364 + C1365) * C114) *
                   C49311 +
               ((C1366 + C1367 + C1368) * C49047 +
                (C1369 + C1370 + C1371) * C114) *
                   C1107 +
               ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
                 C1109 * C286 + C49359 * C294) *
                    C49047 +
                (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
                 C1109 * C276 + C49359 * C287) *
                    C114) *
                   C1106) *
                  C49019 * C617 +
              (((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
                 C1111 * C1825 + C49324 * C1828) *
                    C114 +
                (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
                 C1111 * C1829 + C49324 * C1834) *
                    C49047) *
                   C1106 +
               ((C1109 * C621 + C49359 * C627 + C1110 * C1320 + C49347 * C1326 +
                 C1111 * C1826 + C49324 * C1830) *
                    C114 +
                (C1109 * C628 + C49359 * C636 + C1110 * C1325 + C49347 * C1332 +
                 C1111 * C1831 + C49324 * C1835) *
                    C49047) *
                   C1107 +
               ((C1109 * C622 + C49359 * C629 + C1110 * C1319 + C49347 * C1324 +
                 C1111 * C1827 + C49324 * C1832) *
                    C114 +
                (C1109 * C630 + C49359 * C637 + C1110 * C1323 + C49347 * C1331 +
                 C1111 * C1833 + C49324 * C1836) *
                    C49047) *
                   C49311) *
                  C49019 * C618) *
             C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
            C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C49019 * C616 -
          ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
           (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
           ((C113 * C2405 + C49030 * C2415) * C49327 +
            (C113 * C2397 + C49030 * C2403) * C2536 +
            (C113 * C728 + C49030 * C737) * C49349 +
            (C113 * C722 + C49030 * C727) * C2535 +
            (C113 * C286 + C49030 * C294) * C49360 +
            (C113 * C276 + C49030 * C287) * C2534) *
               C1106) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C2534 +
            (C113 * C626 + C49030 * C635) * C49360 +
            (C113 * C1519 + C49030 * C1526) * C2535 +
            (C113 * C1525 + C49030 * C1531) * C49349 +
            (C113 * C2398 + C49030 * C2404) * C2536 +
            (C113 * C2406 + C49030 * C2416) * C49327) *
               C1106 +
           ((C113 * C621 + C49030 * C627) * C2534 +
            (C113 * C628 + C49030 * C636) * C49360 +
            (C113 * C1518 + C49030 * C1524) * C2535 +
            (C113 * C1523 + C49030 * C1530) * C49349 +
            (C113 * C2400 + C49030 * C2408) * C2536 +
            (C113 * C2410 + C49030 * C2418) * C49327) *
               C1107 +
           ((C113 * C622 + C49030 * C629) * C2534 +
            (C113 * C630 + C49030 * C637) * C49360 +
            (C113 * C1517 + C49030 * C1522) * C2535 +
            (C113 * C1521 + C49030 * C1529) * C49349 +
            (C113 * C2402 + C49030 * C2412) * C2536 +
            (C113 * C2414 + C49030 * C2420) * C49327) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C616 -
          (((C8202 + C8203 + C8204) * C49047 + (C8205 + C8206 + C8207) * C114) *
               C49311 +
           ((C8208 + C8209 + C8210) * C49047 + (C8211 + C8212 + C8213) * C114) *
               C49343 +
           ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49047 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C114) *
               C49356) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C114 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49047) *
               C49356 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C114 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49047) *
               C49343 +
           ((C7967 * C622 + C7961 * C629 + C7968 * C1319 + C7962 * C1324 +
             C7969 * C1827 + C49324 * C1832) *
                C114 +
            (C7967 * C630 + C7961 * C637 + C7968 * C1323 + C7962 * C1331 +
             C7969 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C616 -
          ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
            C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
            C9267 * C286 + C9261 * C294) *
               C49047 +
           (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
            C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
            C9267 * C276 + C9261 * C287) *
               C114) *
              C48935 * C49019 * C617 +
          ((C9267 * C620 + C9261 * C625 + C9268 * C1321 + C9262 * C1328 +
            C9269 * C1825 + C9263 * C1828 + C9270 * C9354 + C9264 * C9357 +
            C9271 * C9596 + C9265 * C9597) *
               C114 +
           (C9267 * C626 + C9261 * C635 + C9268 * C1327 + C9262 * C1333 +
            C9269 * C1829 + C9263 * C1834 + C9270 * C9356 + C9264 * C9360 +
            C9271 * C9598 + C9265 * C9599) *
               C49047) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C10371 + C10372 + C10373) * C2535 +
           (C10374 + C10375 + C10376) * C49349 +
           (C10377 + C10378 + C10379) * C2536 +
           (C10380 + C10381 + C10382) * C49327) *
              C48935 * C49019 * C616 -
          ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
            C7967 * C2405 + C7961 * C2415) *
               C49327 +
           (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
            C7967 * C2397 + C7961 * C2403) *
               C2536 +
           (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
            C7967 * C728 + C7961 * C737) *
               C49349 +
           (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
            C7967 * C722 + C7961 * C727) *
               C2535 +
           (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
            C7967 * C286 + C7961 * C294) *
               C49360 +
           (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
            C7967 * C276 + C7961 * C287) *
               C2534) *
              C48935 * C49019 * C617 +
          ((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
            C7969 * C1825 + C49324 * C1828) *
               C2534 +
           (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
            C7969 * C1829 + C49324 * C1834) *
               C49360 +
           (C7967 * C1519 + C7961 * C1526 + C7968 * C1983 + C7962 * C1986 +
            C7969 * C9444 + C49324 * C9447) *
               C2535 +
           (C7967 * C1525 + C7961 * C1531 + C7968 * C1987 + C7962 * C1992 +
            C7969 * C9446 + C49324 * C9450) *
               C49349 +
           (C7967 * C2398 + C7961 * C2404 + C7968 * C9912 + C7962 * C9914 +
            C7969 * C9913 + C49324 * C9915) *
               C2536 +
           (C7967 * C2406 + C7961 * C2416 + C7968 * C9916 + C7962 * C9918 +
            C7969 * C9917 + C49324 * C9919) *
               C49327) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C49019 * C616 -
          ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
           (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
           (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
            (C113 * C286 + C49030 * C294) * C15326 +
            (C113 * C276 + C49030 * C287) * C15329) *
               C49356) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C15329 +
            (C113 * C626 + C49030 * C635) * C15326 +
            (C113 * C1519 + C49030 * C1526) * C15330 +
            (C113 * C1525 + C49030 * C1531) * C15327 +
            (C113 * C2398 + C49030 * C2404) * C15331 +
            (C113 * C2406 + C49030 * C2416) * C49327) *
               C49356 +
           ((C113 * C621 + C49030 * C627) * C15329 +
            (C113 * C628 + C49030 * C636) * C15326 +
            (C113 * C1518 + C49030 * C1524) * C15330 +
            (C113 * C1523 + C49030 * C1530) * C15327 +
            (C113 * C2400 + C49030 * C2408) * C15331 +
            (C113 * C2410 + C49030 * C2418) * C49327) *
               C49343 +
           ((C113 * C622 + C49030 * C629) * C15329 +
            (C113 * C630 + C49030 * C637) * C15326 +
            (C113 * C1517 + C49030 * C1522) * C15330 +
            (C113 * C1521 + C49030 * C1529) * C15327 +
            (C113 * C2402 + C49030 * C2412) * C15331 +
            (C113 * C2414 + C49030 * C2420) * C49327) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C16914 + C16915 + C16916) * C15330 +
           (C16917 + C16918 + C16919) * C15327 +
           (C16920 + C16921 + C16922) * C15331 +
           (C16923 + C16924 + C16925) * C49327) *
              C48935 * C49019 * C616 -
          ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
            C1109 * C2405 + C49359 * C2415) *
               C49327 +
           (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
            C1109 * C2397 + C49359 * C2403) *
               C15331 +
           (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
            C1109 * C728 + C49359 * C737) *
               C15327 +
           (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
            C1109 * C722 + C49359 * C727) *
               C15330 +
           (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
            C1109 * C286 + C49359 * C294) *
               C15326 +
           (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
            C1109 * C276 + C49359 * C287) *
               C15329) *
              C48935 * C49019 * C617 +
          ((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
            C1111 * C1825 + C49324 * C1828) *
               C15329 +
           (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
            C1111 * C1829 + C49324 * C1834) *
               C15326 +
           (C1109 * C1519 + C49359 * C1526 + C1110 * C1983 + C49347 * C1986 +
            C1111 * C9444 + C49324 * C9447) *
               C15330 +
           (C1109 * C1525 + C49359 * C1531 + C1110 * C1987 + C49347 * C1992 +
            C1111 * C9446 + C49324 * C9450) *
               C15327 +
           (C1109 * C2398 + C49359 * C2404 + C1110 * C9912 + C49347 * C9914 +
            C1111 * C9913 + C49324 * C9915) *
               C15331 +
           (C1109 * C2406 + C49359 * C2416 + C1110 * C9916 + C49347 * C9918 +
            C1111 * C9917 + C49324 * C9919) *
               C49327) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C49030 * C122) * C17860 +
           (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
           C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
           C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
              C48935 * C49019 * C616 -
          ((C113 * C11236 + C49030 * C11238) * C17859 +
           (C113 * C11232 + C49030 * C11234) * C17864 +
           (C113 * C3368 + C49030 * C3373) * C17858 +
           (C113 * C3364 + C49030 * C3367) * C17863 + C3388 * C17857 +
           C3387 * C17862 + C3386 * C17856 + C3385 * C17861 +
           (C113 * C286 + C49030 * C294) * C17855 +
           (C113 * C276 + C49030 * C287) * C17860) *
              C48935 * C49019 * C617 +
          ((C113 * C620 + C49030 * C625) * C17860 +
           (C113 * C626 + C49030 * C635) * C17855 +
           (C113 * C1519 + C49030 * C1526) * C17861 +
           (C113 * C1525 + C49030 * C1531) * C17856 +
           (C113 * C2398 + C49030 * C2404) * C17862 +
           (C113 * C2406 + C49030 * C2416) * C17857 +
           (C113 * C10326 + C49030 * C10329) * C17863 +
           (C113 * C10328 + C49030 * C10332) * C17858 +
           (C113 * C11233 + C49030 * C11235) * C17864 +
           (C113 * C11237 + C49030 * C11239) * C17859) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C410 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C49030 * C434) * C49047 +
                 (C113 * C416 + C49030 * C427) * C114) *
                    C103) *
                   C49321) *
                  C550 +
              ((((C113 * C722 + C49030 * C727) * C114 +
                 (C113 * C728 + C49030 * C737) * C49047) *
                    C103 +
                ((C113 * C723 + C49030 * C729) * C114 +
                 (C113 * C730 + C49030 * C738) * C49047) *
                    C104 +
                ((C113 * C724 + C49030 * C731) * C114 +
                 (C113 * C732 + C49030 * C739) * C49047) *
                    C105 +
                ((C113 * C725 + C49030 * C733) * C114 +
                 (C113 * C734 + C49030 * C740) * C49047) *
                    C106 +
                ((C113 * C726 + C49030 * C735) * C114 +
                 (C113 * C736 + C49030 * C741) * C49047) *
                    C107) *
                   C49321 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C49030 * C294) * C49047 +
                 (C113 * C276 + C49030 * C287) * C114) *
                    C103) *
                   C410) *
                  C49319) *
             C48968 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C410 -
               (((C1558 + C1559 + C1560) * C49047 +
                 (C1561 + C1562 + C1563) * C114) *
                    C49311 +
                ((C1564 + C1565 + C1566) * C49047 +
                 (C1567 + C1568 + C1569) * C114) *
                    C1107 +
                ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 +
                  C49347 * C737 + C1109 * C426 + C49359 * C434) *
                     C49047 +
                 (C1111 * C1519 + C49324 * C1526 + C1110 * C722 +
                  C49347 * C727 + C1109 * C416 + C49359 * C427) *
                     C114) *
                    C1106) *
                   C49321) *
                  C550 +
              ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 +
                  C49347 * C1526 + C1111 * C1983 + C49324 * C1986) *
                     C114 +
                 (C1109 * C728 + C49359 * C737 + C1110 * C1525 +
                  C49347 * C1531 + C1111 * C1987 + C49324 * C1992) *
                     C49047) *
                    C1106 +
                ((C1109 * C723 + C49359 * C729 + C1110 * C1518 +
                  C49347 * C1524 + C1111 * C1984 + C49324 * C1988) *
                     C114 +
                 (C1109 * C730 + C49359 * C738 + C1110 * C1523 +
                  C49347 * C1530 + C1111 * C1989 + C49324 * C1993) *
                     C49047) *
                    C1107 +
                ((C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                  C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                     C114 +
                 (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                  C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                     C49047) *
                    C49311) *
                   C49321 -
               (((C1360 + C1361 + C1362) * C49047 +
                 (C1363 + C1364 + C1365) * C114) *
                    C49311 +
                ((C1366 + C1367 + C1368) * C49047 +
                 (C1369 + C1370 + C1371) * C114) *
                    C1107 +
                ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                  C49347 * C635 + C1109 * C286 + C49359 * C294) *
                     C49047 +
                 (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                  C49347 * C625 + C1109 * C276 + C49359 * C287) *
                     C114) *
                    C1106) *
                   C410) *
                  C49319) *
             C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C410 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C550 +
          (((C3385 * C2534 + C3386 * C49360 + C3387 * C2535 + C3388 * C49349 +
             (C113 * C3364 + C49030 * C3367) * C2536 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C1106 +
            (C2756 * C2534 + C2755 * C49360 + C2754 * C2535 + C2753 * C49349 +
             (C113 * C3365 + C49030 * C3369) * C2536 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C1107 +
            (C2752 * C2534 + C2751 * C49360 + C2750 * C2535 + C2749 * C49349 +
             (C113 * C3366 + C49030 * C3371) * C2536 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            (C3388 * C49327 + C3387 * C2536 + C3386 * C49349 + C3385 * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C550 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C550 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C410 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C550 +
          (((C10819 + C10820 + C10821) * C2534 +
            (C10822 + C10823 + C10824) * C49360 +
            (C10825 + C10826 + C10827) * C2535 +
            (C10828 + C10829 + C10830) * C49349 +
            (C7967 * C3364 + C7961 * C3367 + C7968 * C10326 + C7962 * C10329 +
             C7969 * C10790 + C49324 * C10791) *
                C2536 +
            (C7967 * C3368 + C7961 * C3373 + C7968 * C10328 + C7962 * C10332 +
             C7969 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C10830 + C10829 + C10828) * C49327 +
            (C10827 + C10826 + C10825) * C2536 +
            (C10824 + C10823 + C10822) * C49349 +
            (C10821 + C10820 + C10819) * C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C410 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C550 +
          (((C3385 * C15329 + C3386 * C15326 + C3387 * C15330 + C3388 * C15327 +
             (C113 * C3364 + C49030 * C3367) * C15331 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C49356 +
            (C2756 * C15329 + C2755 * C15326 + C2754 * C15330 + C2753 * C15327 +
             (C113 * C3365 + C49030 * C3369) * C15331 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C49343 +
            (C2752 * C15329 + C2751 * C15326 + C2750 * C15330 + C2749 * C15327 +
             (C113 * C3366 + C49030 * C3371) * C15331 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C410 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C550 +
          (((C17358 + C17359 + C17360) * C15329 +
            (C17361 + C17362 + C17363) * C15326 +
            (C17364 + C17365 + C17366) * C15330 +
            (C17367 + C17368 + C17369) * C15327 +
            (C1109 * C3364 + C49359 * C3367 + C1110 * C10326 + C49347 * C10329 +
             C1111 * C10790 + C49324 * C10791) *
                C15331 +
            (C1109 * C3368 + C49359 * C3373 + C1110 * C10328 + C49347 * C10332 +
             C1111 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C17369 + C17368 + C17367) * C49327 +
            (C17366 + C17365 + C17364) * C15331 +
            (C17363 + C17362 + C17361) * C15327 +
            (C17360 + C17359 + C17358) * C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
               C48935 * C410 -
           ((C113 * C18035 + C49030 * C18039) * C17859 +
            (C113 * C18033 + C49030 * C18036) * C17864 + C18051 * C17858 +
            C18050 * C17863 + C3807 * C17857 + C3808 * C17862 + C2954 * C17856 +
            C2953 * C17861 + C2952 * C17855 + C2951 * C17860) *
               C48935 * C49321) *
              C550 +
          ((C3385 * C17860 + C3386 * C17855 + C3387 * C17861 + C3388 * C17856 +
            C18292 * C17862 + C18293 * C17857 + C18294 * C17863 +
            C18295 * C17858 + (C113 * C18279 + C49030 * C18280) * C17864 +
            (C113 * C18281 + C49030 * C18282) * C17859) *
               C48935 * C49321 -
           (C18295 * C17859 + C18294 * C17864 + C18293 * C17858 +
            C18292 * C17863 + C3388 * C17857 + C3387 * C17862 + C3386 * C17856 +
            C3385 * C17861 + (C113 * C286 + C49030 * C294) * C17855 +
            (C113 * C276 + C49030 * C287) * C17860) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C824 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C49030 * C434) * C49047 +
                 (C113 * C416 + C49030 * C427) * C114) *
                    C103) *
                   C49321) *
                  C49002 * C552 +
              (((C468 + C467) * C103 + (C466 + C465) * C104 +
                (C464 + C463) * C105 + (C462 + C461) * C106 +
                ((C113 * C417 + C49030 * C428) * C114 +
                 (C113 * C429 + C49030 * C435) * C49047) *
                    C107) *
                   C49321 -
               ((C182 + C183) * C107 + (C181 + C180) * C106 +
                (C179 + C178) * C105 + (C177 + C176) * C104 +
                (C175 + C174) * C103) *
                   C824) *
                  C49002 * C49317) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C824 -
               (((C1558 + C1559 + C1560) * C49047 +
                 (C1561 + C1562 + C1563) * C114) *
                    C49311 +
                ((C1564 + C1565 + C1566) * C49047 +
                 (C1567 + C1568 + C1569) * C114) *
                    C1107 +
                ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 +
                  C49347 * C737 + C1109 * C426 + C49359 * C434) *
                     C49047 +
                 (C1111 * C1519 + C49324 * C1526 + C1110 * C722 +
                  C49347 * C727 + C1109 * C416 + C49359 * C427) *
                     C114) *
                    C1106) *
                   C49321) *
                  C49002 * C552 +
              ((((C1569 + C1568 + C1567) * C114 +
                 (C1566 + C1565 + C1564) * C49047) *
                    C1106 +
                ((C1563 + C1562 + C1561) * C114 +
                 (C1560 + C1559 + C1558) * C49047) *
                    C1107 +
                ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
                  C1111 * C1520 + C49324 * C1527) *
                     C114 +
                 (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
                  C1111 * C1528 + C49324 * C1532) *
                     C49047) *
                    C49311) *
                   C49321 -
               (((C1161 + C1162 + C1163) * C49047 +
                 (C1164 + C1165 + C1166) * C114) *
                    C49311 +
                ((C1160 + C1159 + C1158) * C49047 +
                 (C1157 + C1156 + C1155) * C114) *
                    C1107 +
                ((C1154 + C1153 + C1152) * C49047 +
                 (C1151 + C1150 + C1149) * C114) *
                    C1106) *
                   C824) *
                  C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C824 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C49002 * C552 +
          (((C2950 + C2949 + C2948 + C2947 + C2962 + C2961) * C1106 +
            (C2942 + C2941 + C2940 + C2939 + C2960 + C2959) * C1107 +
            (C456 * C2534 + C455 * C49360 + C2568 * C2535 + C2567 * C49349 +
             (C113 * C2913 + C49030 * C2920) * C2536 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C552 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C824 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C8395 + C8394 + C8393) * C2534 + (C8392 + C8391 + C8390) * C49360 +
            (C10383 + C10384 + C10385) * C2535 +
            (C10386 + C10387 + C10388) * C49349 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C2536 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C824 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C49002 * C552 +
          (((C15671 + C15670 + C15669 + C15668 + C15667 + C15666) * C49356 +
            (C15665 + C15664 + C15663 + C15662 + C15661 + C15660) * C49343 +
            (C456 * C15329 + C455 * C15326 + C2568 * C15330 + C2567 * C15327 +
             (C113 * C2913 + C49030 * C2920) * C15331 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C824 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C1569 + C1568 + C1567) * C15329 +
            (C1566 + C1565 + C1564) * C15326 +
            (C16926 + C16927 + C16928) * C15330 +
            (C16929 + C16930 + C16931) * C15327 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C15331 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
               C48935 * C824 -
           ((C113 * C18035 + C49030 * C18039) * C17859 +
            (C113 * C18033 + C49030 * C18036) * C17864 + C18051 * C17858 +
            C18050 * C17863 + C3807 * C17857 + C3808 * C17862 + C2954 * C17856 +
            C2953 * C17861 + C2952 * C17855 + C2951 * C17860) *
               C48935 * C49321) *
              C49002 * C552 +
          ((C460 * C17860 + C459 * C17855 + C2562 * C17861 + C2563 * C17856 +
            C2958 * C17862 + C2957 * C17857 + C18052 * C17863 +
            C18053 * C17858 + (C113 * C18034 + C49030 * C18037) * C17864 +
            (C113 * C18038 + C49030 * C18040) * C17859) *
               C48935 * C49321 -
           (C18053 * C17859 + C18052 * C17864 + C2957 * C17858 +
            C2958 * C17863 + C2563 * C17857 + C2562 * C17862 + C459 * C17856 +
            C460 * C17861 + C165 * C17855 + C164 * C17860) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C49030 * C122) * C114 +
                 (C113 * C123 + C49030 * C136) * C49047) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105 + C185 * C106 +
                C186 * C107) *
                   C824 -
               ((C461 + C462) * C107 + (C463 + C464) * C106 +
                (C465 + C466) * C105 + (C467 + C468) * C104 +
                ((C113 * C426 + C49030 * C434) * C49047 +
                 (C113 * C416 + C49030 * C427) * C114) *
                    C103) *
                   C49321) *
                  C268 +
              ((((C113 * C722 + C49030 * C727) * C114 +
                 (C113 * C728 + C49030 * C737) * C49047) *
                    C103 +
                ((C113 * C723 + C49030 * C729) * C114 +
                 (C113 * C730 + C49030 * C738) * C49047) *
                    C104 +
                ((C113 * C724 + C49030 * C731) * C114 +
                 (C113 * C732 + C49030 * C739) * C49047) *
                    C105 +
                ((C113 * C725 + C49030 * C733) * C114 +
                 (C113 * C734 + C49030 * C740) * C49047) *
                    C106 +
                ((C113 * C726 + C49030 * C735) * C114 +
                 (C113 * C736 + C49030 * C741) * C49047) *
                    C107) *
                   C49321 -
               ((C321 + C322) * C107 + (C323 + C324) * C106 +
                (C325 + C326) * C105 + (C327 + C328) * C104 +
                ((C113 * C286 + C49030 * C294) * C49047 +
                 (C113 * C276 + C49030 * C287) * C114) *
                    C103) *
                   C824) *
                  C49319) *
             C48968 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                  C1111 * C620 + C49324 * C625) *
                     C114 +
                 (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                  C1111 * C626 + C49324 * C635) *
                     C49047) *
                    C1106 +
                ((C1149 + C1150 + C1151) * C114 +
                 (C1152 + C1153 + C1154) * C49047) *
                    C1107 +
                C1173 * C49311) *
                   C824 -
               (((C1558 + C1559 + C1560) * C49047 +
                 (C1561 + C1562 + C1563) * C114) *
                    C49311 +
                ((C1564 + C1565 + C1566) * C49047 +
                 (C1567 + C1568 + C1569) * C114) *
                    C1107 +
                ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 +
                  C49347 * C737 + C1109 * C426 + C49359 * C434) *
                     C49047 +
                 (C1111 * C1519 + C49324 * C1526 + C1110 * C722 +
                  C49347 * C727 + C1109 * C416 + C49359 * C427) *
                     C114) *
                    C1106) *
                   C49321) *
                  C268 +
              ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 +
                  C49347 * C1526 + C1111 * C1983 + C49324 * C1986) *
                     C114 +
                 (C1109 * C728 + C49359 * C737 + C1110 * C1525 +
                  C49347 * C1531 + C1111 * C1987 + C49324 * C1992) *
                     C49047) *
                    C1106 +
                ((C1109 * C723 + C49359 * C729 + C1110 * C1518 +
                  C49347 * C1524 + C1111 * C1984 + C49324 * C1988) *
                     C114 +
                 (C1109 * C730 + C49359 * C738 + C1110 * C1523 +
                  C49347 * C1530 + C1111 * C1989 + C49324 * C1993) *
                     C49047) *
                    C1107 +
                ((C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                  C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                     C114 +
                 (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                  C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                     C49047) *
                    C49311) *
                   C49321 -
               (((C1360 + C1361 + C1362) * C49047 +
                 (C1363 + C1364 + C1365) * C114) *
                    C49311 +
                ((C1366 + C1367 + C1368) * C49047 +
                 (C1369 + C1370 + C1371) * C114) *
                    C1107 +
                ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                  C49347 * C635 + C1109 * C286 + C49359 * C294) *
                     C49047 +
                 (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                  C49347 * C625 + C1109 * C276 + C49359 * C287) *
                     C114) *
                    C1106) *
                   C824) *
                  C49319) *
             C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C824 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C268 +
          (((C3385 * C2534 + C3386 * C49360 + C3387 * C2535 + C3388 * C49349 +
             (C113 * C3364 + C49030 * C3367) * C2536 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C1106 +
            (C2756 * C2534 + C2755 * C49360 + C2754 * C2535 + C2753 * C49349 +
             (C113 * C3365 + C49030 * C3369) * C2536 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C1107 +
            (C2752 * C2534 + C2751 * C49360 + C2750 * C2535 + C2749 * C49349 +
             (C113 * C3366 + C49030 * C3371) * C2536 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            (C3388 * C49327 + C3387 * C2536 + C3386 * C49349 + C3385 * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C268 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C268 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C824 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C268 +
          (((C10819 + C10820 + C10821) * C2534 +
            (C10822 + C10823 + C10824) * C49360 +
            (C10825 + C10826 + C10827) * C2535 +
            (C10828 + C10829 + C10830) * C49349 +
            (C7967 * C3364 + C7961 * C3367 + C7968 * C10326 + C7962 * C10329 +
             C7969 * C10790 + C49324 * C10791) *
                C2536 +
            (C7967 * C3368 + C7961 * C3373 + C7968 * C10328 + C7962 * C10332 +
             C7969 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C10830 + C10829 + C10828) * C49327 +
            (C10827 + C10826 + C10825) * C2536 +
            (C10824 + C10823 + C10822) * C49349 +
            (C10821 + C10820 + C10819) * C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C824 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C268 +
          (((C3385 * C15329 + C3386 * C15326 + C3387 * C15330 + C3388 * C15327 +
             (C113 * C3364 + C49030 * C3367) * C15331 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C49356 +
            (C2756 * C15329 + C2755 * C15326 + C2754 * C15330 + C2753 * C15327 +
             (C113 * C3365 + C49030 * C3369) * C15331 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C49343 +
            (C2752 * C15329 + C2751 * C15326 + C2750 * C15330 + C2749 * C15327 +
             (C113 * C3366 + C49030 * C3371) * C15331 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C824 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C268 +
          (((C17358 + C17359 + C17360) * C15329 +
            (C17361 + C17362 + C17363) * C15326 +
            (C17364 + C17365 + C17366) * C15330 +
            (C17367 + C17368 + C17369) * C15327 +
            (C1109 * C3364 + C49359 * C3367 + C1110 * C10326 + C49347 * C10329 +
             C1111 * C10790 + C49324 * C10791) *
                C15331 +
            (C1109 * C3368 + C49359 * C3373 + C1110 * C10328 + C49347 * C10332 +
             C1111 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C17369 + C17368 + C17367) * C49327 +
            (C17366 + C17365 + C17364) * C15331 +
            (C17363 + C17362 + C17361) * C15327 +
            (C17360 + C17359 + C17358) * C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C17860 +
            (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
            C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
            C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
               C48935 * C824 -
           ((C113 * C18035 + C49030 * C18039) * C17859 +
            (C113 * C18033 + C49030 * C18036) * C17864 + C18051 * C17858 +
            C18050 * C17863 + C3807 * C17857 + C3808 * C17862 + C2954 * C17856 +
            C2953 * C17861 + C2952 * C17855 + C2951 * C17860) *
               C48935 * C49321) *
              C268 +
          ((C3385 * C17860 + C3386 * C17855 + C3387 * C17861 + C3388 * C17856 +
            C18292 * C17862 + C18293 * C17857 + C18294 * C17863 +
            C18295 * C17858 + (C113 * C18279 + C49030 * C18280) * C17864 +
            (C113 * C18281 + C49030 * C18282) * C17859) *
               C48935 * C49321 -
           (C18295 * C17859 + C18294 * C17864 + C18293 * C17858 +
            C18292 * C17863 + C3388 * C17857 + C3387 * C17862 + C3386 * C17856 +
            C3385 * C17861 + (C113 * C286 + C49030 * C294) * C17855 +
            (C113 * C276 + C49030 * C287) * C17860) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C49030 * C122) * C114 +
                (C113 * C123 + C49030 * C136) * C49047) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
                  C970 -
              ((C461 + C462) * C107 + (C463 + C464) * C106 +
               (C465 + C466) * C105 + (C467 + C468) * C104 +
               ((C113 * C426 + C49030 * C434) * C49047 +
                (C113 * C416 + C49030 * C427) * C114) *
                   C103) *
                  C971 +
              (((C113 * C973 + C49030 * C978) * C114 +
                (C113 * C979 + C49030 * C988) * C49047) *
                   C103 +
               ((C113 * C974 + C49030 * C980) * C114 +
                (C113 * C981 + C49030 * C989) * C49047) *
                   C104 +
               ((C113 * C975 + C49030 * C982) * C114 +
                (C113 * C983 + C49030 * C990) * C49047) *
                   C105 +
               ((C113 * C976 + C49030 * C984) * C114 +
                (C113 * C985 + C49030 * C991) * C49047) *
                   C106 +
               ((C113 * C977 + C49030 * C986) * C114 +
                (C113 * C987 + C49030 * C992) * C49047) *
                   C107) *
                  C972) *
             C49002 * C48968 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
                 C1111 * C620 + C49324 * C625) *
                    C114 +
                (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
                 C1111 * C626 + C49324 * C635) *
                    C49047) *
                   C1106 +
               ((C1149 + C1150 + C1151) * C114 +
                (C1152 + C1153 + C1154) * C49047) *
                   C1107 +
               C1173 * C49311) *
                  C970 -
              (((C1558 + C1559 + C1560) * C49047 +
                (C1561 + C1562 + C1563) * C114) *
                   C49311 +
               ((C1564 + C1565 + C1566) * C49047 +
                (C1567 + C1568 + C1569) * C114) *
                   C1107 +
               ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
                 C1109 * C426 + C49359 * C434) *
                    C49047 +
                (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
                 C1109 * C416 + C49359 * C427) *
                    C114) *
                   C1106) *
                  C971 +
              (((C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
                 C1111 * C2398 + C49324 * C2404) *
                    C114 +
                (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
                 C1111 * C2406 + C49324 * C2416) *
                    C49047) *
                   C1106 +
               ((C1109 * C974 + C49359 * C980 + C1110 * C2399 + C49347 * C2407 +
                 C1111 * C2400 + C49324 * C2408) *
                    C114 +
                (C1109 * C981 + C49359 * C989 + C1110 * C2409 + C49347 * C2417 +
                 C1111 * C2410 + C49324 * C2418) *
                    C49047) *
                   C1107 +
               ((C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
                 C1111 * C2402 + C49324 * C2412) *
                    C114 +
                (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
                 C1111 * C2414 + C49324 * C2420) *
                    C49047) *
                   C49311) *
                  C972) *
             C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
            C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C970 -
          ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
           (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
           (C3807 * C49327 + C3808 * C2536 + C2954 * C49349 + C2953 * C2535 +
            C2952 * C49360 + C2951 * C2534) *
               C1106) *
              C971 +
          ((C2953 * C2534 + C2954 * C49360 + C3808 * C2535 + C3807 * C49349 +
            (C113 * C3790 + C49030 * C3793) * C2536 +
            (C113 * C3794 + C49030 * C3799) * C49327) *
               C1106 +
           (C2562 * C2534 + C2563 * C49360 + C2958 * C2535 + C2957 * C49349 +
            (C113 * C3791 + C49030 * C3795) * C2536 +
            (C113 * C3796 + C49030 * C3800) * C49327) *
               C1107 +
           (C2565 * C2534 + C2566 * C49360 + C2956 * C2535 + C2955 * C49349 +
            (C113 * C3792 + C49030 * C3797) * C2536 +
            (C113 * C3798 + C49030 * C3801) * C49327) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C970 -
          (((C8384 + C8385 + C8386) * C49047 + (C8387 + C8388 + C8389) * C114) *
               C49311 +
           ((C8390 + C8391 + C8392) * C49047 + (C8393 + C8394 + C8395) * C114) *
               C49343 +
           ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
             C7967 * C426 + C7961 * C434) *
                C49047 +
            (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
             C7967 * C416 + C7961 * C427) *
                C114) *
               C49356) *
              C971 +
          (((C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C114 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49047) *
               C49356 +
           ((C7967 * C974 + C7961 * C980 + C7968 * C2399 + C7962 * C2407 +
             C7969 * C2400 + C49324 * C2408) *
                C114 +
            (C7967 * C981 + C7961 * C989 + C7968 * C2409 + C7962 * C2417 +
             C7969 * C2410 + C49324 * C2418) *
                C49047) *
               C49343 +
           ((C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
             C7969 * C2402 + C49324 * C2412) *
                C114 +
            (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
             C7969 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C970 -
          ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
            C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
            C9267 * C426 + C9261 * C434) *
               C49047 +
           (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
            C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
            C9267 * C416 + C9261 * C427) *
               C114) *
              C48935 * C971 +
          ((C9267 * C973 + C9261 * C978 + C9268 * C2397 + C9262 * C2403 +
            C9269 * C2398 + C9263 * C2404 + C9270 * C9912 + C9264 * C9914 +
            C9271 * C9913 + C9265 * C9915) *
               C114 +
           (C9267 * C979 + C9261 * C988 + C9268 * C2405 + C9262 * C2415 +
            C9269 * C2406 + C9263 * C2416 + C9270 * C9916 + C9264 * C9918 +
            C9271 * C9917 + C9265 * C9919) *
               C49047) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C10371 + C10372 + C10373) * C2535 +
           (C10374 + C10375 + C10376) * C49349 + C11255 * C2536 +
           C11256 * C49327) *
              C48935 * C970 -
          ((C11257 + C11258 + C11259) * C49327 +
           (C11260 + C11261 + C11262) * C2536 +
           (C10382 + C10381 + C10380) * C49349 +
           (C10379 + C10378 + C10377) * C2535 +
           (C10376 + C10375 + C10374) * C49360 +
           (C10373 + C10372 + C10371) * C2534) *
              C48935 * C971 +
          (C11255 * C2534 + C11256 * C49360 +
           (C11262 + C11261 + C11260) * C2535 +
           (C11259 + C11258 + C11257) * C49349 +
           (C7967 * C3790 + C7961 * C3793 + C7968 * C11232 + C7962 * C11234 +
            C7969 * C11233 + C49324 * C11235) *
               C2536 +
           (C7967 * C3794 + C7961 * C3799 + C7968 * C11236 + C7962 * C11238 +
            C7969 * C11237 + C49324 * C11239) *
               C49327) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C970 -
          ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
           (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
           (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
            C2952 * C15326 + C2951 * C15329) *
               C49356) *
              C971 +
          ((C2953 * C15329 + C2954 * C15326 + C3808 * C15330 + C3807 * C15327 +
            (C113 * C3790 + C49030 * C3793) * C15331 +
            (C113 * C3794 + C49030 * C3799) * C49327) *
               C49356 +
           (C2562 * C15329 + C2563 * C15326 + C2958 * C15330 + C2957 * C15327 +
            (C113 * C3791 + C49030 * C3795) * C15331 +
            (C113 * C3796 + C49030 * C3800) * C49327) *
               C49343 +
           (C2565 * C15329 + C2566 * C15326 + C2956 * C15330 + C2955 * C15327 +
            (C113 * C3792 + C49030 * C3797) * C15331 +
            (C113 * C3798 + C49030 * C3801) * C49327) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C16914 + C16915 + C16916) * C15330 +
           (C16917 + C16918 + C16919) * C15327 + C17786 * C15331 +
           C17787 * C49327) *
              C48935 * C970 -
          ((C17788 + C17789 + C17790) * C49327 +
           (C17791 + C17792 + C17793) * C15331 +
           (C16925 + C16924 + C16923) * C15327 +
           (C16922 + C16921 + C16920) * C15330 +
           (C16919 + C16918 + C16917) * C15326 +
           (C16916 + C16915 + C16914) * C15329) *
              C48935 * C971 +
          (C17786 * C15329 + C17787 * C15326 +
           (C17793 + C17792 + C17791) * C15330 +
           (C17790 + C17789 + C17788) * C15327 +
           (C1109 * C3790 + C49359 * C3793 + C1110 * C11232 + C49347 * C11234 +
            C1111 * C11233 + C49324 * C11235) *
               C15331 +
           (C1109 * C3794 + C49359 * C3799 + C1110 * C11236 + C49347 * C11238 +
            C1111 * C11237 + C49324 * C11239) *
               C49327) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C49030 * C122) * C17860 +
           (C113 * C123 + C49030 * C136) * C17855 + C2951 * C17861 +
           C2952 * C17856 + C2953 * C17862 + C2954 * C17857 + C3808 * C17863 +
           C3807 * C17858 + C18050 * C17864 + C18051 * C17859) *
              C48935 * C970 -
          (C18530 * C17859 + C18531 * C17864 + C18051 * C17858 +
           C18050 * C17863 + C3807 * C17857 + C3808 * C17862 + C2954 * C17856 +
           C2953 * C17861 + C2952 * C17855 + C2951 * C17860) *
              C48935 * C971 +
          (C2953 * C17860 + C2954 * C17855 + C3808 * C17861 + C3807 * C17856 +
           C18050 * C17862 + C18051 * C17857 + C18531 * C17863 +
           C18530 * C17858 + (C113 * C18521 + C49030 * C18522) * C17864 +
           (C113 * C18523 + C49030 * C18524) * C17859) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            (C8395 + C8394 + C8393) * C5121 +
            (C8392 + C8391 + C8390) * C49134) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C8384 + C8385 + C8386) * C49134 + (C8387 + C8388 + C8389) * C5121 +
            (C8018 + C8017 + C8016) * C49292 +
            (C8015 + C8014 + C8013) * C5120) *
               C48945 +
           ((C8390 + C8391 + C8392) * C49134 + (C8393 + C8394 + C8395) * C5121 +
            (C8012 + C8011 + C8010) * C49292 +
            (C8009 + C8008 + C8007) * C5120) *
               C49269) *
              C49019 * C49002 * C111 +
          ((C8027 * C5120 + C8028 * C49292 + (C8389 + C8388 + C8387) * C5121 +
            (C8386 + C8385 + C8384) * C49134) *
               C49269 +
           ((C8024 + C8023 + C8022) * C5120 + (C8021 + C8020 + C8019) * C49292 +
            (C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
             C7969 * C1520 + C49324 * C1527) *
                C5121 +
            (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
             C7969 * C1528 + C49324 * C1532) *
                C49134) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C49019 * C49002 * C110 -
          ((C5135 + C5136 + C5137 + C5138) * C49328 +
           (C5134 + C5133 + C5132 + C5131) * C3910 +
           (C5130 + C5129 + C5128 + C5127) * C3909 +
           (C5126 + C5125 + C5124 + C5123) * C3908) *
              C49019 * C49002 * C111 +
          (C5143 * C3908 + C5144 * C3909 +
           (C5138 + C5137 + C5136 + C5135) * C3910 +
           (C173 * C5120 + C172 * C49292 +
            (C113 * C417 + C49030 * C428) * C5121 +
            (C113 * C429 + C49030 * C435) * C49134) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C20289 +
            (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
            C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
            C3807 * C49340) *
               C49269 +
           (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
            C20301) *
               C48945) *
              C49019 * C49002 * C110 -
          ((C20302 + C20303 + C20304 + C20305 + C20306 + C20307 + C20308 +
            C20309) *
               C48945 +
           (C20301 + C20300 + C20299 + C20298 + C20297 + C20296 + C20295 +
            C20294) *
               C49269) *
              C49019 * C49002 * C111 +
          ((C20309 + C20308 + C20307 + C20306 + C20305 + C20304 + C20303 +
            C20302) *
               C49269 +
           (C168 * C20289 + C169 * C20285 + C456 * C20290 + C455 * C20286 +
            C2568 * C20291 + C2567 * C20287 +
            (C113 * C2913 + C49030 * C2920) * C20292 +
            (C113 * C2921 + C49030 * C2925) * C49340) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C7967 * C115 + C7961 * C122 + C7968 * C276 +
                       C7962 * C287 + C7969 * C620 + C49324 * C625) *
                          C5120 +
                      (C7967 * C123 + C7961 * C136 + C7968 * C286 +
                       C7962 * C294 + C7969 * C626 + C49324 * C635) *
                          C49292 +
                      (C10371 + C10372 + C10373) * C5121 +
                      (C10374 + C10375 + C10376) * C49134) *
                         C49269 +
                     ((C8007 + C8008 + C8009) * C5120 +
                      (C8010 + C8011 + C8012) * C49292 +
                      (C8395 + C8394 + C8393) * C5121 +
                      (C8392 + C8391 + C8390) * C49134) *
                         C48945) *
                        C49019 * C268 -
                    (((C12795 + C12796 + C12797) * C49134 +
                      (C12798 + C12799 + C12800) * C5121 +
                      (C8208 + C8209 + C8210) * C49292 +
                      (C8211 + C8212 + C8213) * C5120) *
                         C48945 +
                     ((C10824 + C10823 + C10822) * C49134 +
                      (C10821 + C10820 + C10819) * C5121 +
                      (C7969 * C1327 + C49324 * C1333 + C7968 * C626 +
                       C7962 * C635 + C7967 * C286 + C7961 * C294) *
                          C49292 +
                      (C7969 * C1321 + C49324 * C1328 + C7968 * C620 +
                       C7962 * C625 + C7967 * C276 + C7961 * C287) *
                          C5120) *
                         C49269) *
                        C49019 * C49319) *
                       C270 +
                   ((((C8213 + C8212 + C8211) * C5120 +
                      (C8210 + C8209 + C8208) * C49292 +
                      (C12800 + C12799 + C12798) * C5121 +
                      (C12797 + C12796 + C12795) * C49134) *
                         C49269 +
                     ((C8207 + C8206 + C8205) * C5120 +
                      (C8204 + C8203 + C8202) * C49292 +
                      (C7967 * C724 + C7961 * C731 + C7968 * C1517 +
                       C7962 * C1522 + C7969 * C1985 + C49324 * C1990) *
                          C5121 +
                      (C7967 * C732 + C7961 * C739 + C7968 * C1521 +
                       C7962 * C1529 + C7969 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C8384 + C8385 + C8386) * C49134 +
                      (C8387 + C8388 + C8389) * C5121 +
                      (C8018 + C8017 + C8016) * C49292 +
                      (C8015 + C8014 + C8013) * C5120) *
                         C48945 +
                     ((C8390 + C8391 + C8392) * C49134 +
                      (C8393 + C8394 + C8395) * C5121 +
                      (C8012 + C8011 + C8010) * C49292 +
                      (C8009 + C8008 + C8007) * C5120) *
                         C49269) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C5120 +
                      (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
                      C2952 * C49134) *
                         C3908 +
                     (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
                     C5144 * C49328) *
                        C49019 * C268 -
                    ((C5291 + C5292 + C5279 + C5280) * C49328 +
                     (C5281 + C5282 + C5283 + C5284) * C3910 +
                     (C5285 + C5286 + C5287 + C5288) * C3909 +
                     (C3386 * C49134 + C3385 * C5121 +
                      (C113 * C286 + C49030 * C294) * C49292 +
                      (C113 * C276 + C49030 * C287) * C5120) *
                         C3908) *
                        C49019 * C49319) *
                       C270 +
                   (((C5288 + C5287 + C5286 + C5285) * C3908 +
                     (C5284 + C5283 + C5282 + C5281) * C3909 +
                     (C5280 + C5279 + C5292 + C5291) * C3910 +
                     (C314 * C5120 + C313 * C49292 +
                      (C113 * C726 + C49030 * C735) * C5121 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C5135 + C5136 + C5137 + C5138) * C49328 +
                     (C5134 + C5133 + C5132 + C5131) * C3910 +
                     (C5130 + C5129 + C5128 + C5127) * C3909 +
                     (C5126 + C5125 + C5124 + C5123) * C3908) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C20289 +
                      (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
                      C2952 * C20286 + C2953 * C20291 + C2954 * C20287 +
                      C3808 * C20292 + C3807 * C49340) *
                         C49269 +
                     (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 +
                      C20300 + C20301) *
                         C48945) *
                        C49019 * C268 -
                    ((C20452 + C20453 + C20444 + C20445 + C20446 + C20447 +
                      C20448 + C20449) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C20292 + C3388 * C20287 +
                      C3387 * C20291 + C3386 * C20286 + C3385 * C20290 +
                      (C113 * C286 + C49030 * C294) * C20285 +
                      (C113 * C276 + C49030 * C287) * C20289) *
                         C49269) *
                        C49019 * C49319) *
                       C270 +
                   (((C20449 + C20448 + C20447 + C20446 + C20445 + C20444 +
                      C20453 + C20452) *
                         C49269 +
                     (C318 * C20289 + C317 * C20285 + C2752 * C20290 +
                      C2751 * C20286 + C2750 * C20291 + C2749 * C20287 +
                      (C113 * C3366 + C49030 * C3371) * C20292 +
                      (C113 * C3372 + C49030 * C3375) * C49340) *
                         C48945) *
                        C49019 * C49319 -
                    ((C20302 + C20303 + C20304 + C20305 + C20306 + C20307 +
                      C20308 + C20309) *
                         C48945 +
                     (C20301 + C20300 + C20299 + C20298 + C20297 + C20296 +
                      C20295 + C20294) *
                         C49269) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C410 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C49002 * C270 +
          (((C12999 * C5120 + C13000 * C49292 +
             (C10383 + C10384 + C10385) * C5121 +
             (C10386 + C10387 + C10388) * C49134) *
                C49269 +
            ((C8389 + C8388 + C8387) * C5120 +
             (C8386 + C8385 + C8384) * C49292 +
             (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
              C7969 * C2402 + C49324 * C2412) *
                 C5121 +
             (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
              C7969 * C2414 + C49324 * C2420) *
                 C49134) *
                C48945) *
               C49321 -
           (((C8384 + C8385 + C8386) * C49134 +
             (C8387 + C8388 + C8389) * C5121 +
             (C8018 + C8017 + C8016) * C49292 +
             (C8015 + C8014 + C8013) * C5120) *
                C48945 +
            (C13001 * C49134 + C13002 * C5121 +
             (C8012 + C8011 + C8010) * C49292 +
             (C8009 + C8008 + C8007) * C5120) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C410 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C49002 * C270 +
          (((C5434 + C5433 + C5432 + C5431) * C3908 +
            (C5430 + C5429 + C5428 + C5427) * C3909 +
            (C5426 + C5425 + C5424 + C5423) * C3910 +
            (C454 * C5120 + C453 * C49292 +
             (C113 * C977 + C49030 * C986) * C5121 +
             (C113 * C987 + C49030 * C992) * C49134) *
                C49328) *
               C49321 -
           ((C5135 + C5136 + C5137 + C5138) * C49328 +
            (C5134 + C5133 + C5132 + C5131) * C3910 +
            (C5130 + C5129 + C5128 + C5127) * C3909 +
            (C5126 + C5125 + C5124 + C5123) * C3908) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C20289 +
             (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
             C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
             C3807 * C49340) *
                C49269 +
            (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
             C20301) *
                C48945) *
               C410 -
           ((C20584 + C20585 + C20586 + C20587 + C20588 + C20589 + C20590 +
             C20591) *
                C48945 +
            (C18051 * C49340 + C18050 * C20292 + C3807 * C20287 +
             C3808 * C20291 + C2954 * C20286 + C2953 * C20290 + C2952 * C20285 +
             C2951 * C20289) *
                C49269) *
               C49321) *
              C49002 * C270 +
          (((C20591 + C20590 + C20589 + C20588 + C20587 + C20586 + C20585 +
             C20584) *
                C49269 +
            (C458 * C20289 + C457 * C20285 + C2565 * C20290 + C2566 * C20286 +
             C2956 * C20291 + C2955 * C20287 +
             (C113 * C3792 + C49030 * C3797) * C20292 +
             (C113 * C3798 + C49030 * C3801) * C49340) *
                C48945) *
               C49321 -
           ((C20302 + C20303 + C20304 + C20305 + C20306 + C20307 + C20308 +
             C20309) *
                C48945 +
            (C20301 + C20300 + C20299 + C20298 + C20297 + C20296 + C20295 +
             C20294) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C7967 * C115 + C7961 * C122 + C7968 * C276 +
                       C7962 * C287 + C7969 * C620 + C49324 * C625) *
                          C5120 +
                      (C7967 * C123 + C7961 * C136 + C7968 * C286 +
                       C7962 * C294 + C7969 * C626 + C49324 * C635) *
                          C49292 +
                      (C10371 + C10372 + C10373) * C5121 +
                      (C10374 + C10375 + C10376) * C49134) *
                         C49269 +
                     ((C8007 + C8008 + C8009) * C5120 +
                      (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
                      C13000 * C49134) *
                         C48945) *
                        C49019 * C550 -
                    (((C12795 + C12796 + C12797) * C49134 +
                      (C12798 + C12799 + C12800) * C5121 +
                      (C8208 + C8209 + C8210) * C49292 +
                      (C8211 + C8212 + C8213) * C5120) *
                         C48945 +
                     ((C10824 + C10823 + C10822) * C49134 +
                      (C10821 + C10820 + C10819) * C5121 +
                      (C7969 * C1327 + C49324 * C1333 + C7968 * C626 +
                       C7962 * C635 + C7967 * C286 + C7961 * C294) *
                          C49292 +
                      (C7969 * C1321 + C49324 * C1328 + C7968 * C620 +
                       C7962 * C625 + C7967 * C276 + C7961 * C287) *
                          C5120) *
                         C49269) *
                        C49019 * C49319) *
                       C552 +
                   ((((C8213 + C8212 + C8211) * C5120 +
                      (C8210 + C8209 + C8208) * C49292 +
                      (C12800 + C12799 + C12798) * C5121 +
                      (C12797 + C12796 + C12795) * C49134) *
                         C49269 +
                     ((C8207 + C8206 + C8205) * C5120 +
                      (C8204 + C8203 + C8202) * C49292 +
                      (C7967 * C724 + C7961 * C731 + C7968 * C1517 +
                       C7962 * C1522 + C7969 * C1985 + C49324 * C1990) *
                          C5121 +
                      (C7967 * C732 + C7961 * C739 + C7968 * C1521 +
                       C7962 * C1529 + C7969 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C8384 + C8385 + C8386) * C49134 +
                      (C8387 + C8388 + C8389) * C5121 +
                      (C8018 + C8017 + C8016) * C49292 +
                      (C8015 + C8014 + C8013) * C5120) *
                         C48945 +
                     (C13001 * C49134 + C13002 * C5121 +
                      (C8012 + C8011 + C8010) * C49292 +
                      (C8009 + C8008 + C8007) * C5120) *
                         C49269) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C5120 +
                      (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
                      C2952 * C49134) *
                         C3908 +
                     (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
                     C5144 * C49328) *
                        C49019 * C550 -
                    ((C5291 + C5292 + C5279 + C5280) * C49328 +
                     (C5281 + C5282 + C5283 + C5284) * C3910 +
                     (C5285 + C5286 + C5287 + C5288) * C3909 +
                     (C3386 * C49134 + C3385 * C5121 +
                      (C113 * C286 + C49030 * C294) * C49292 +
                      (C113 * C276 + C49030 * C287) * C5120) *
                         C3908) *
                        C49019 * C49319) *
                       C552 +
                   (((C5288 + C5287 + C5286 + C5285) * C3908 +
                     (C5284 + C5283 + C5282 + C5281) * C3909 +
                     (C5280 + C5279 + C5292 + C5291) * C3910 +
                     (C314 * C5120 + C313 * C49292 +
                      (C113 * C726 + C49030 * C735) * C5121 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C5135 + C5136 + C5137 + C5138) * C49328 +
                     (C5134 + C5133 + C5132 + C5131) * C3910 +
                     (C5130 + C5129 + C5128 + C5127) * C3909 +
                     (C5126 + C5125 + C5124 + C5123) * C3908) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C20289 +
                      (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
                      C2952 * C20286 + C2953 * C20291 + C2954 * C20287 +
                      C3808 * C20292 + C3807 * C49340) *
                         C49269 +
                     (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 +
                      C20300 + C20301) *
                         C48945) *
                        C49019 * C550 -
                    ((C20452 + C20453 + C20444 + C20445 + C20446 + C20447 +
                      C20448 + C20449) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C20292 + C3388 * C20287 +
                      C3387 * C20291 + C3386 * C20286 + C3385 * C20290 +
                      (C113 * C286 + C49030 * C294) * C20285 +
                      (C113 * C276 + C49030 * C287) * C20289) *
                         C49269) *
                        C49019 * C49319) *
                       C552 +
                   (((C20449 + C20448 + C20447 + C20446 + C20445 + C20444 +
                      C20453 + C20452) *
                         C49269 +
                     (C318 * C20289 + C317 * C20285 + C2752 * C20290 +
                      C2751 * C20286 + C2750 * C20291 + C2749 * C20287 +
                      (C113 * C3366 + C49030 * C3371) * C20292 +
                      (C113 * C3372 + C49030 * C3375) * C49340) *
                         C48945) *
                        C49019 * C49319 -
                    ((C20302 + C20303 + C20304 + C20305 + C20306 + C20307 +
                      C20308 + C20309) *
                         C48945 +
                     (C20301 + C20300 + C20299 + C20298 + C20297 + C20296 +
                      C20295 + C20294) *
                         C49269) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            C12999 * C5121 + C13000 * C49134) *
               C48945) *
              C49019 * C616 -
          (((C12795 + C12796 + C12797) * C49134 +
            (C12798 + C12799 + C12800) * C5121 +
            (C8208 + C8209 + C8210) * C49292 +
            (C8211 + C8212 + C8213) * C5120) *
               C48945 +
           ((C10824 + C10823 + C10822) * C49134 +
            (C10821 + C10820 + C10819) * C5121 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49292 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C5120) *
               C49269) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C5120 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49292 +
            (C7967 * C1519 + C7961 * C1526 + C7968 * C1983 + C7962 * C1986 +
             C7969 * C9444 + C49324 * C9447) *
                C5121 +
            (C7967 * C1525 + C7961 * C1531 + C7968 * C1987 + C7962 * C1992 +
             C7969 * C9446 + C49324 * C9450) *
                C49134) *
               C49269 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C5120 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49292 +
            (C7967 * C1518 + C7961 * C1524 + C7968 * C1984 + C7962 * C1988 +
             C7969 * C9445 + C49324 * C9448) *
                C5121 +
            (C7967 * C1523 + C7961 * C1530 + C7968 * C1989 + C7962 * C1993 +
             C7969 * C9449 + C49324 * C9451) *
                C49134) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C49019 * C616 -
          ((C5291 + C5292 + C5279 + C5280) * C49328 +
           (C5281 + C5282 + C5283 + C5284) * C3910 +
           (C5285 + C5286 + C5287 + C5288) * C3909 +
           (C3386 * C49134 + C3385 * C5121 +
            (C113 * C286 + C49030 * C294) * C49292 +
            (C113 * C276 + C49030 * C287) * C5120) *
               C3908) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C5120 +
            (C113 * C626 + C49030 * C635) * C49292 +
            (C113 * C1519 + C49030 * C1526) * C5121 +
            (C113 * C1525 + C49030 * C1531) * C49134) *
               C3908 +
           ((C113 * C621 + C49030 * C627) * C5120 +
            (C113 * C628 + C49030 * C636) * C49292 +
            (C113 * C1518 + C49030 * C1524) * C5121 +
            (C113 * C1523 + C49030 * C1530) * C49134) *
               C3909 +
           ((C113 * C622 + C49030 * C629) * C5120 +
            (C113 * C630 + C49030 * C637) * C49292 +
            (C113 * C1517 + C49030 * C1522) * C5121 +
            (C113 * C1521 + C49030 * C1529) * C49134) *
               C3910 +
           ((C113 * C623 + C49030 * C631) * C5120 +
            (C113 * C632 + C49030 * C638) * C49292 +
            (C113 * C1520 + C49030 * C1527) * C5121 +
            (C113 * C1528 + C49030 * C1532) * C49134) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C20289 +
            (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
            C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
            C3807 * C49340) *
               C49269 +
           (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
            C20301) *
               C48945) *
              C49019 * C616 -
          ((C20452 + C20453 + C20444 + C20445 + C20446 + C20447 + C20448 +
            C20449) *
               C48945 +
           (C18293 * C49340 + C18292 * C20292 + C3388 * C20287 +
            C3387 * C20291 + C3386 * C20286 + C3385 * C20290 +
            (C113 * C286 + C49030 * C294) * C20285 +
            (C113 * C276 + C49030 * C287) * C20289) *
               C49269) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C20289 +
            (C113 * C626 + C49030 * C635) * C20285 +
            (C113 * C1519 + C49030 * C1526) * C20290 +
            (C113 * C1525 + C49030 * C1531) * C20286 +
            (C113 * C2398 + C49030 * C2404) * C20291 +
            (C113 * C2406 + C49030 * C2416) * C20287 +
            (C113 * C10326 + C49030 * C10329) * C20292 +
            (C113 * C10328 + C49030 * C10332) * C49340) *
               C49269 +
           ((C113 * C621 + C49030 * C627) * C20289 +
            (C113 * C628 + C49030 * C636) * C20285 +
            (C113 * C1518 + C49030 * C1524) * C20290 +
            (C113 * C1523 + C49030 * C1530) * C20286 +
            (C113 * C2400 + C49030 * C2408) * C20291 +
            (C113 * C2410 + C49030 * C2418) * C20287 +
            (C113 * C10327 + C49030 * C10330) * C20292 +
            (C113 * C10331 + C49030 * C10333) * C49340) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C410 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C550 +
          ((((C10819 + C10820 + C10821) * C5120 +
             (C10822 + C10823 + C10824) * C49292 +
             (C10825 + C10826 + C10827) * C5121 +
             (C10828 + C10829 + C10830) * C49134) *
                C49269 +
            ((C12800 + C12799 + C12798) * C5120 +
             (C12797 + C12796 + C12795) * C49292 +
             (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
              C7969 * C10176 + C49324 * C10177) *
                 C5121 +
             (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
              C7969 * C10178 + C49324 * C10179) *
                 C49134) *
                C48945) *
               C49321 -
           (((C12795 + C12796 + C12797) * C49134 +
             (C12798 + C12799 + C12800) * C5121 +
             (C8208 + C8209 + C8210) * C49292 +
             (C8211 + C8212 + C8213) * C5120) *
                C48945 +
            ((C10824 + C10823 + C10822) * C49134 +
             (C10821 + C10820 + C10819) * C5121 +
             (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49292 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C5120) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C410 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C550 +
          (((C3385 * C5120 + C3386 * C49292 + C3387 * C5121 + C3388 * C49134) *
                C3908 +
            (C2756 * C5120 + C2755 * C49292 + C2754 * C5121 + C2753 * C49134) *
                C3909 +
            (C2752 * C5120 + C2751 * C49292 + C2750 * C5121 + C2749 * C49134) *
                C3910 +
            (C5290 * C5120 + C5289 * C49292 +
             (C113 * C2724 + C49030 * C2725) * C5121 +
             (C113 * C2726 + C49030 * C2727) * C49134) *
                C49328) *
               C49321 -
           ((C5291 + C5292 + C5279 + C5280) * C49328 +
            (C5281 + C5282 + C5283 + C5284) * C3910 +
            (C5285 + C5286 + C5287 + C5288) * C3909 +
            (C3386 * C49134 + C3385 * C5121 +
             (C113 * C286 + C49030 * C294) * C49292 +
             (C113 * C276 + C49030 * C287) * C5120) *
                C3908) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C20289 +
             (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
             C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
             C3807 * C49340) *
                C49269 +
            (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
             C20301) *
                C48945) *
               C410 -
           ((C20584 + C20585 + C20586 + C20587 + C20588 + C20589 + C20590 +
             C20591) *
                C48945 +
            (C18051 * C49340 + C18050 * C20292 + C3807 * C20287 +
             C3808 * C20291 + C2954 * C20286 + C2953 * C20290 + C2952 * C20285 +
             C2951 * C20289) *
                C49269) *
               C49321) *
              C550 +
          (((C3385 * C20289 + C3386 * C20285 + C3387 * C20290 + C3388 * C20286 +
             C18292 * C20291 + C18293 * C20287 + C18294 * C20292 +
             C18295 * C49340) *
                C49269 +
            (C2756 * C20289 + C2755 * C20285 + C2754 * C20290 + C2753 * C20286 +
             C20451 * C20291 + C20450 * C20287 +
             (C113 * C17947 + C49030 * C17948) * C20292 +
             (C113 * C17949 + C49030 * C17950) * C49340) *
                C48945) *
               C49321 -
           ((C20452 + C20453 + C20444 + C20445 + C20446 + C20447 + C20448 +
             C20449) *
                C48945 +
            (C18293 * C49340 + C18292 * C20292 + C3388 * C20287 +
             C3387 * C20291 + C3386 * C20286 + C3385 * C20290 +
             (C113 * C286 + C49030 * C294) * C20285 +
             (C113 * C276 + C49030 * C287) * C20289) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C824 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C49002 * C552 +
          (((C12999 * C5120 + C13000 * C49292 +
             (C10383 + C10384 + C10385) * C5121 +
             (C10386 + C10387 + C10388) * C49134) *
                C49269 +
            ((C8389 + C8388 + C8387) * C5120 +
             (C8386 + C8385 + C8384) * C49292 +
             (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
              C7969 * C2402 + C49324 * C2412) *
                 C5121 +
             (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
              C7969 * C2414 + C49324 * C2420) *
                 C49134) *
                C48945) *
               C49321 -
           (((C8384 + C8385 + C8386) * C49134 +
             (C8387 + C8388 + C8389) * C5121 +
             (C8018 + C8017 + C8016) * C49292 +
             (C8015 + C8014 + C8013) * C5120) *
                C48945 +
            (C13001 * C49134 + C13002 * C5121 +
             (C8012 + C8011 + C8010) * C49292 +
             (C8009 + C8008 + C8007) * C5120) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C824 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C49002 * C552 +
          (((C5434 + C5433 + C5432 + C5431) * C3908 +
            (C5430 + C5429 + C5428 + C5427) * C3909 +
            (C5426 + C5425 + C5424 + C5423) * C3910 +
            (C454 * C5120 + C453 * C49292 +
             (C113 * C977 + C49030 * C986) * C5121 +
             (C113 * C987 + C49030 * C992) * C49134) *
                C49328) *
               C49321 -
           ((C5135 + C5136 + C5137 + C5138) * C49328 +
            (C5134 + C5133 + C5132 + C5131) * C3910 +
            (C5130 + C5129 + C5128 + C5127) * C3909 +
            (C5126 + C5125 + C5124 + C5123) * C3908) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C20289 +
             (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
             C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
             C3807 * C49340) *
                C49269 +
            (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
             C20301) *
                C48945) *
               C824 -
           ((C20584 + C20585 + C20586 + C20587 + C20588 + C20589 + C20590 +
             C20591) *
                C48945 +
            (C18051 * C49340 + C18050 * C20292 + C3807 * C20287 +
             C3808 * C20291 + C2954 * C20286 + C2953 * C20290 + C2952 * C20285 +
             C2951 * C20289) *
                C49269) *
               C49321) *
              C49002 * C552 +
          (((C20591 + C20590 + C20589 + C20588 + C20587 + C20586 + C20585 +
             C20584) *
                C49269 +
            (C458 * C20289 + C457 * C20285 + C2565 * C20290 + C2566 * C20286 +
             C2956 * C20291 + C2955 * C20287 +
             (C113 * C3792 + C49030 * C3797) * C20292 +
             (C113 * C3798 + C49030 * C3801) * C49340) *
                C48945) *
               C49321 -
           ((C20302 + C20303 + C20304 + C20305 + C20306 + C20307 + C20308 +
             C20309) *
                C48945 +
            (C20301 + C20300 + C20299 + C20298 + C20297 + C20296 + C20295 +
             C20294) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C824 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C268 +
          ((((C10819 + C10820 + C10821) * C5120 +
             (C10822 + C10823 + C10824) * C49292 +
             (C10825 + C10826 + C10827) * C5121 +
             (C10828 + C10829 + C10830) * C49134) *
                C49269 +
            ((C12800 + C12799 + C12798) * C5120 +
             (C12797 + C12796 + C12795) * C49292 +
             (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
              C7969 * C10176 + C49324 * C10177) *
                 C5121 +
             (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
              C7969 * C10178 + C49324 * C10179) *
                 C49134) *
                C48945) *
               C49321 -
           (((C12795 + C12796 + C12797) * C49134 +
             (C12798 + C12799 + C12800) * C5121 +
             (C8208 + C8209 + C8210) * C49292 +
             (C8211 + C8212 + C8213) * C5120) *
                C48945 +
            ((C10824 + C10823 + C10822) * C49134 +
             (C10821 + C10820 + C10819) * C5121 +
             (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49292 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C5120) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C824 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C268 +
          (((C3385 * C5120 + C3386 * C49292 + C3387 * C5121 + C3388 * C49134) *
                C3908 +
            (C2756 * C5120 + C2755 * C49292 + C2754 * C5121 + C2753 * C49134) *
                C3909 +
            (C2752 * C5120 + C2751 * C49292 + C2750 * C5121 + C2749 * C49134) *
                C3910 +
            (C5290 * C5120 + C5289 * C49292 +
             (C113 * C2724 + C49030 * C2725) * C5121 +
             (C113 * C2726 + C49030 * C2727) * C49134) *
                C49328) *
               C49321 -
           ((C5291 + C5292 + C5279 + C5280) * C49328 +
            (C5281 + C5282 + C5283 + C5284) * C3910 +
            (C5285 + C5286 + C5287 + C5288) * C3909 +
            (C3386 * C49134 + C3385 * C5121 +
             (C113 * C286 + C49030 * C294) * C49292 +
             (C113 * C276 + C49030 * C287) * C5120) *
                C3908) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C20289 +
             (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
             C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
             C3807 * C49340) *
                C49269 +
            (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
             C20301) *
                C48945) *
               C824 -
           ((C20584 + C20585 + C20586 + C20587 + C20588 + C20589 + C20590 +
             C20591) *
                C48945 +
            (C18051 * C49340 + C18050 * C20292 + C3807 * C20287 +
             C3808 * C20291 + C2954 * C20286 + C2953 * C20290 + C2952 * C20285 +
             C2951 * C20289) *
                C49269) *
               C49321) *
              C268 +
          (((C3385 * C20289 + C3386 * C20285 + C3387 * C20290 + C3388 * C20286 +
             C18292 * C20291 + C18293 * C20287 + C18294 * C20292 +
             C18295 * C49340) *
                C49269 +
            (C2756 * C20289 + C2755 * C20285 + C2754 * C20290 + C2753 * C20286 +
             C20451 * C20291 + C20450 * C20287 +
             (C113 * C17947 + C49030 * C17948) * C20292 +
             (C113 * C17949 + C49030 * C17950) * C49340) *
                C48945) *
               C49321 -
           ((C20452 + C20453 + C20444 + C20445 + C20446 + C20447 + C20448 +
             C20449) *
                C48945 +
            (C18293 * C49340 + C18292 * C20292 + C3388 * C20287 +
             C3387 * C20291 + C3386 * C20286 + C3385 * C20290 +
             (C113 * C286 + C49030 * C294) * C20285 +
             (C113 * C276 + C49030 * C287) * C20289) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            C12999 * C5121 + C13000 * C49134) *
               C48945) *
              C970 -
          (((C10388 + C10387 + C10386) * C49134 +
            (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
            C13002 * C5120) *
               C48945 +
           ((C10382 + C10381 + C10380) * C49134 +
            (C10379 + C10378 + C10377) * C5121 +
            (C10376 + C10375 + C10374) * C49292 +
            (C10373 + C10372 + C10371) * C5120) *
               C49269) *
              C971 +
          ((C11255 * C5120 + C11256 * C49292 +
            (C11262 + C11261 + C11260) * C5121 +
            (C11259 + C11258 + C11257) * C49134) *
               C49269 +
           ((C10383 + C10384 + C10385) * C5120 +
            (C10386 + C10387 + C10388) * C49292 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C5121 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49134) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C970 -
          ((C5423 + C5424 + C5425 + C5426) * C49328 +
           (C5427 + C5428 + C5429 + C5430) * C3910 +
           (C5431 + C5432 + C5433 + C5434) * C3909 +
           (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
               C3908) *
              C971 +
          ((C2953 * C5120 + C2954 * C49292 + C3808 * C5121 + C3807 * C49134) *
               C3908 +
           (C2562 * C5120 + C2563 * C49292 + C2958 * C5121 + C2957 * C49134) *
               C3909 +
           (C2565 * C5120 + C2566 * C49292 + C2956 * C5121 + C2955 * C49134) *
               C3910 +
           (C2568 * C5120 + C2567 * C49292 +
            (C113 * C2913 + C49030 * C2920) * C5121 +
            (C113 * C2921 + C49030 * C2925) * C49134) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C20289 +
            (C113 * C123 + C49030 * C136) * C20285 + C2951 * C20290 +
            C2952 * C20286 + C2953 * C20291 + C2954 * C20287 + C3808 * C20292 +
            C3807 * C49340) *
               C49269 +
           (C20294 + C20295 + C20296 + C20297 + C20298 + C20299 + C20300 +
            C20301) *
               C48945) *
              C970 -
          ((C20584 + C20585 + C20586 + C20587 + C20588 + C20589 + C20590 +
            C20591) *
               C48945 +
           (C18051 * C49340 + C18050 * C20292 + C3807 * C20287 +
            C3808 * C20291 + C2954 * C20286 + C2953 * C20290 + C2952 * C20285 +
            C2951 * C20289) *
               C49269) *
              C971 +
          ((C2953 * C20289 + C2954 * C20285 + C3808 * C20290 + C3807 * C20286 +
            C18050 * C20291 + C18051 * C20287 + C18531 * C20292 +
            C18530 * C49340) *
               C49269 +
           (C2562 * C20289 + C2563 * C20285 + C2958 * C20290 + C2957 * C20286 +
            C18052 * C20291 + C18053 * C20287 +
            (C113 * C18034 + C49030 * C18037) * C20292 +
            (C113 * C18038 + C49030 * C18040) * C49340) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C49002 * C110 -
          (((C1161 + C1162 + C1163) * C49047 + (C1164 + C1165 + C1166) * C114) *
               C49311 +
           ((C1160 + C1159 + C1158) * C49047 + (C1157 + C1156 + C1155) * C114) *
               C1107 +
           ((C1154 + C1153 + C1152) * C49047 + (C1151 + C1150 + C1149) * C114) *
               C1106) *
              C49019 * C49002 * C111 +
          (C1173 * C1106 +
           ((C1166 + C1165 + C1164) * C114 + (C1163 + C1162 + C1161) * C49047) *
               C1107 +
           ((C1109 * C119 + C49359 * C130 + C1110 * C272 + C49347 * C279 +
             C1111 * C624 + C49324 * C633) *
                C114 +
            (C1109 * C131 + C49359 * C140 + C1110 * C278 + C49347 * C290 +
             C1111 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C49002 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C49019 * C49002 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C49030 * C134) * C114 +
            (C113 * C135 + C49030 * C142) * C49047) *
               C107) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C49002 * C110 -
          (((C8019 + C8020 + C8021) * C49047 + (C8022 + C8023 + C8024) * C114) *
               C49311 +
           ((C8018 + C8017 + C8016) * C49047 + (C8015 + C8014 + C8013) * C114) *
               C49343 +
           ((C8012 + C8011 + C8010) * C49047 + (C8009 + C8008 + C8007) * C114) *
               C49356) *
              C49019 * C49002 * C111 +
          (C8031 * C49356 +
           ((C8024 + C8023 + C8022) * C114 + (C8021 + C8020 + C8019) * C49047) *
               C49343 +
           ((C7967 * C119 + C7961 * C130 + C7968 * C272 + C7962 * C279 +
             C7969 * C624 + C49324 * C633) *
                C114 +
            (C7967 * C131 + C7961 * C140 + C7968 * C278 + C7962 * C290 +
             C7969 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C49002 * C110 -
          ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
            C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
            C9267 * C125 + C9261 * C137) *
               C49047 +
           (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
            C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
            C9267 * C116 + C9261 * C124) *
               C114) *
              C48935 * C49019 * C49002 * C111 +
          ((C9267 * C117 + C9261 * C126 + C9268 * C274 + C9262 * C283 +
            C9269 * C622 + C9263 * C629 + C9270 * C1319 + C9264 * C1324 +
            C9271 * C1827 + C9265 * C1832) *
               C114 +
           (C9267 * C127 + C9261 * C138 + C9268 * C282 + C9262 * C292 +
            C9269 * C630 + C9263 * C637 + C9270 * C1323 + C9264 * C1331 +
            C9271 * C1833 + C9265 * C1836) *
               C49047) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C49019 * C49002 * C110 -
          ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
           (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
           (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
              C49019 * C49002 * C111 +
          (C15355 * C49356 +
           (C15350 + C15349 + C15348 + C15347 + C15346 + C15345) * C49343 +
           (C170 * C15329 + C171 * C15326 + C454 * C15330 + C453 * C15327 +
            (C113 * C977 + C49030 * C986) * C15331 +
            (C113 * C987 + C49030 * C992) * C49327) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C1109 * C416 + C49359 * C427 + C1110 * C722 + C49347 * C727 +
            C1111 * C1519 + C49324 * C1526) *
               C15330 +
           (C1109 * C426 + C49359 * C434 + C1110 * C728 + C49347 * C737 +
            C1111 * C1525 + C49324 * C1531) *
               C15327 +
           (C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
            C1111 * C2398 + C49324 * C2404) *
               C15331 +
           (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
            C1111 * C2406 + C49324 * C2416) *
               C49327) *
              C48935 * C49019 * C49002 * C110 -
          ((C1111 * C2410 + C49324 * C2418 + C1110 * C2409 + C49347 * C2417 +
            C1109 * C981 + C49359 * C989) *
               C49327 +
           (C1111 * C2400 + C49324 * C2408 + C1110 * C2399 + C49347 * C2407 +
            C1109 * C974 + C49359 * C980) *
               C15331 +
           (C1564 + C1565 + C1566) * C15327 + (C1567 + C1568 + C1569) * C15330 +
           (C1154 + C1153 + C1152) * C15326 +
           (C1151 + C1150 + C1149) * C15329) *
              C48935 * C49019 * C49002 * C111 +
          (C1169 * C15329 + C1170 * C15326 + (C1563 + C1562 + C1561) * C15330 +
           (C1560 + C1559 + C1558) * C15327 +
           (C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
            C1111 * C2402 + C49324 * C2412) *
               C15331 +
           (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
            C1111 * C2414 + C49324 * C2420) *
               C49327) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C268 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C270 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C268 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C268 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C49019 * C268 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C49019 * C49319) *
              C270 +
          (((C15513 + C15512 + C15511 + C15510 + C15509 + C15508) * C49356 +
            (C15507 + C15506 + C15505 + C15504 + C15503 + C15502) * C49343 +
            (C316 * C15329 + C315 * C15326 + C5290 * C15330 + C5289 * C15327 +
             (C113 * C2724 + C49030 * C2725) * C15331 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C1109 * C416 + C49359 * C427 + C1110 * C722 + C49347 * C727 +
             C1111 * C1519 + C49324 * C1526) *
                C15330 +
            (C1109 * C426 + C49359 * C434 + C1110 * C728 + C49347 * C737 +
             C1111 * C1525 + C49324 * C1531) *
                C15327 +
            (C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
             C1111 * C2398 + C49324 * C2404) *
                C15331 +
            (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
             C1111 * C2406 + C49324 * C2416) *
                C49327) *
               C48935 * C49019 * C268 -
           ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
             C1109 * C2405 + C49359 * C2415) *
                C49327 +
            (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
             C1109 * C2397 + C49359 * C2403) *
                C15331 +
            (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
             C1109 * C728 + C49359 * C737) *
                C15327 +
            (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
             C1109 * C722 + C49359 * C727) *
                C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C1371 + C1370 + C1369) * C15329 +
            (C1368 + C1367 + C1366) * C15326 +
            (C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
             C1111 * C1984 + C49324 * C1988) *
                C15330 +
            (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
             C1111 * C1989 + C49324 * C1993) *
                C15327 +
            (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 + C49347 * C2408 +
             C1111 * C10176 + C49324 * C10177) *
                C15331 +
            (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 + C49347 * C2418 +
             C1111 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C1111 * C2410 + C49324 * C2418 + C1110 * C2409 + C49347 * C2417 +
             C1109 * C981 + C49359 * C989) *
                C49327 +
            (C1111 * C2400 + C49324 * C2408 + C1110 * C2399 + C49347 * C2407 +
             C1109 * C974 + C49359 * C980) *
                C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C270 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C270 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C410 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C49002 * C270 +
          (((C15671 + C15670 + C15669 + C15668 + C15667 + C15666) * C49356 +
            (C15665 + C15664 + C15663 + C15662 + C15661 + C15660) * C49343 +
            (C456 * C15329 + C455 * C15326 + C2568 * C15330 + C2567 * C15327 +
             (C113 * C2913 + C49030 * C2920) * C15331 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C410 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C1569 + C1568 + C1567) * C15329 +
            (C1566 + C1565 + C1564) * C15326 +
            (C16926 + C16927 + C16928) * C15330 +
            (C16929 + C16930 + C16931) * C15327 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C15331 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C550 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C552 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C550 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C550 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C49019 * C550 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C49019 * C49319) *
              C552 +
          (((C15513 + C15512 + C15511 + C15510 + C15509 + C15508) * C49356 +
            (C15507 + C15506 + C15505 + C15504 + C15503 + C15502) * C49343 +
            (C316 * C15329 + C315 * C15326 + C5290 * C15330 + C5289 * C15327 +
             (C113 * C2724 + C49030 * C2725) * C15331 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C49019 * C550 -
           ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
             C1109 * C2405 + C49359 * C2415) *
                C49327 +
            (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
             C1109 * C2397 + C49359 * C2403) *
                C15331 +
            (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
             C1109 * C728 + C49359 * C737) *
                C15327 +
            (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
             C1109 * C722 + C49359 * C727) *
                C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C1371 + C1370 + C1369) * C15329 +
            (C1368 + C1367 + C1366) * C15326 +
            (C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
             C1111 * C1984 + C49324 * C1988) *
                C15330 +
            (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
             C1111 * C1989 + C49324 * C1993) *
                C15327 +
            (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 + C49347 * C2408 +
             C1111 * C10176 + C49324 * C10177) *
                C15331 +
            (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 + C49347 * C2418 +
             C1111 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C616 -
          (((C1360 + C1361 + C1362) * C49047 + (C1363 + C1364 + C1365) * C114) *
               C49311 +
           ((C1366 + C1367 + C1368) * C49047 + (C1369 + C1370 + C1371) * C114) *
               C1107 +
           ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C49047 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C114) *
               C1106) *
              C49019 * C617 +
          (((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
             C1111 * C1825 + C49324 * C1828) *
                C114 +
            (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
             C1111 * C1829 + C49324 * C1834) *
                C49047) *
               C1106 +
           ((C1109 * C621 + C49359 * C627 + C1110 * C1320 + C49347 * C1326 +
             C1111 * C1826 + C49324 * C1830) *
                C114 +
            (C1109 * C628 + C49359 * C636 + C1110 * C1325 + C49347 * C1332 +
             C1111 * C1831 + C49324 * C1835) *
                C49047) *
               C1107 +
           ((C1109 * C622 + C49359 * C629 + C1110 * C1319 + C49347 * C1324 +
             C1111 * C1827 + C49324 * C1832) *
                C114 +
            (C1109 * C630 + C49359 * C637 + C1110 * C1323 + C49347 * C1331 +
             C1111 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C49030 * C294) * C49047 +
            (C113 * C276 + C49030 * C287) * C114) *
               C103) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C114 +
            (C113 * C626 + C49030 * C635) * C49047) *
               C103 +
           ((C113 * C621 + C49030 * C627) * C114 +
            (C113 * C628 + C49030 * C636) * C49047) *
               C104 +
           ((C113 * C622 + C49030 * C629) * C114 +
            (C113 * C630 + C49030 * C637) * C49047) *
               C105 +
           ((C113 * C623 + C49030 * C631) * C114 +
            (C113 * C632 + C49030 * C638) * C49047) *
               C106 +
           ((C113 * C624 + C49030 * C633) * C114 +
            (C113 * C634 + C49030 * C639) * C49047) *
               C107) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C616 -
          (((C8202 + C8203 + C8204) * C49047 + (C8205 + C8206 + C8207) * C114) *
               C49311 +
           ((C8208 + C8209 + C8210) * C49047 + (C8211 + C8212 + C8213) * C114) *
               C49343 +
           ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49047 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C114) *
               C49356) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C114 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49047) *
               C49356 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C114 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49047) *
               C49343 +
           ((C7967 * C622 + C7961 * C629 + C7968 * C1319 + C7962 * C1324 +
             C7969 * C1827 + C49324 * C1832) *
                C114 +
            (C7967 * C630 + C7961 * C637 + C7968 * C1323 + C7962 * C1331 +
             C7969 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C616 -
          ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
            C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
            C9267 * C286 + C9261 * C294) *
               C49047 +
           (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
            C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
            C9267 * C276 + C9261 * C287) *
               C114) *
              C48935 * C49019 * C617 +
          ((C9267 * C620 + C9261 * C625 + C9268 * C1321 + C9262 * C1328 +
            C9269 * C1825 + C9263 * C1828 + C9270 * C9354 + C9264 * C9357 +
            C9271 * C9596 + C9265 * C9597) *
               C114 +
           (C9267 * C626 + C9261 * C635 + C9268 * C1327 + C9262 * C1333 +
            C9269 * C1829 + C9263 * C1834 + C9270 * C9356 + C9264 * C9360 +
            C9271 * C9598 + C9265 * C9599) *
               C49047) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C49019 * C616 -
          ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
           (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
           (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
            (C113 * C286 + C49030 * C294) * C15326 +
            (C113 * C276 + C49030 * C287) * C15329) *
               C49356) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C15329 +
            (C113 * C626 + C49030 * C635) * C15326 +
            (C113 * C1519 + C49030 * C1526) * C15330 +
            (C113 * C1525 + C49030 * C1531) * C15327 +
            (C113 * C2398 + C49030 * C2404) * C15331 +
            (C113 * C2406 + C49030 * C2416) * C49327) *
               C49356 +
           ((C113 * C621 + C49030 * C627) * C15329 +
            (C113 * C628 + C49030 * C636) * C15326 +
            (C113 * C1518 + C49030 * C1524) * C15330 +
            (C113 * C1523 + C49030 * C1530) * C15327 +
            (C113 * C2400 + C49030 * C2408) * C15331 +
            (C113 * C2410 + C49030 * C2418) * C49327) *
               C49343 +
           ((C113 * C622 + C49030 * C629) * C15329 +
            (C113 * C630 + C49030 * C637) * C15326 +
            (C113 * C1517 + C49030 * C1522) * C15330 +
            (C113 * C1521 + C49030 * C1529) * C15327 +
            (C113 * C2402 + C49030 * C2412) * C15331 +
            (C113 * C2414 + C49030 * C2420) * C49327) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C16914 + C16915 + C16916) * C15330 +
           (C16917 + C16918 + C16919) * C15327 +
           (C16920 + C16921 + C16922) * C15331 +
           (C16923 + C16924 + C16925) * C49327) *
              C48935 * C49019 * C616 -
          ((C1111 * C9916 + C49324 * C9918 + C1110 * C2406 + C49347 * C2416 +
            C1109 * C2405 + C49359 * C2415) *
               C49327 +
           (C1111 * C9912 + C49324 * C9914 + C1110 * C2398 + C49347 * C2404 +
            C1109 * C2397 + C49359 * C2403) *
               C15331 +
           (C1111 * C1987 + C49324 * C1992 + C1110 * C1525 + C49347 * C1531 +
            C1109 * C728 + C49359 * C737) *
               C15327 +
           (C1111 * C1983 + C49324 * C1986 + C1110 * C1519 + C49347 * C1526 +
            C1109 * C722 + C49359 * C727) *
               C15330 +
           (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
            C1109 * C286 + C49359 * C294) *
               C15326 +
           (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
            C1109 * C276 + C49359 * C287) *
               C15329) *
              C48935 * C49019 * C617 +
          ((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
            C1111 * C1825 + C49324 * C1828) *
               C15329 +
           (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
            C1111 * C1829 + C49324 * C1834) *
               C15326 +
           (C1109 * C1519 + C49359 * C1526 + C1110 * C1983 + C49347 * C1986 +
            C1111 * C9444 + C49324 * C9447) *
               C15330 +
           (C1109 * C1525 + C49359 * C1531 + C1110 * C1987 + C49347 * C1992 +
            C1111 * C9446 + C49324 * C9450) *
               C15327 +
           (C1109 * C2398 + C49359 * C2404 + C1110 * C9912 + C49347 * C9914 +
            C1111 * C9913 + C49324 * C9915) *
               C15331 +
           (C1109 * C2406 + C49359 * C2416 + C1110 * C9916 + C49347 * C9918 +
            C1111 * C9917 + C49324 * C9919) *
               C49327) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C550 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C550 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C550 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C550 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C410 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C550 +
          (((C3385 * C15329 + C3386 * C15326 + C3387 * C15330 + C3388 * C15327 +
             (C113 * C3364 + C49030 * C3367) * C15331 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C49356 +
            (C2756 * C15329 + C2755 * C15326 + C2754 * C15330 + C2753 * C15327 +
             (C113 * C3365 + C49030 * C3369) * C15331 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C49343 +
            (C2752 * C15329 + C2751 * C15326 + C2750 * C15330 + C2749 * C15327 +
             (C113 * C3366 + C49030 * C3371) * C15331 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C410 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C550 +
          (((C17358 + C17359 + C17360) * C15329 +
            (C17361 + C17362 + C17363) * C15326 +
            (C17364 + C17365 + C17366) * C15330 +
            (C17367 + C17368 + C17369) * C15327 +
            (C1109 * C3364 + C49359 * C3367 + C1110 * C10326 + C49347 * C10329 +
             C1111 * C10790 + C49324 * C10791) *
                C15331 +
            (C1109 * C3368 + C49359 * C3373 + C1110 * C10328 + C49347 * C10332 +
             C1111 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C17369 + C17368 + C17367) * C49327 +
            (C17366 + C17365 + C17364) * C15331 +
            (C17363 + C17362 + C17361) * C15327 +
            (C17360 + C17359 + C17358) * C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C552 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C552 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C824 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C49002 * C552 +
          (((C15671 + C15670 + C15669 + C15668 + C15667 + C15666) * C49356 +
            (C15665 + C15664 + C15663 + C15662 + C15661 + C15660) * C49343 +
            (C456 * C15329 + C455 * C15326 + C2568 * C15330 + C2567 * C15327 +
             (C113 * C2913 + C49030 * C2920) * C15331 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C15345 + C15346 + C15347 + C15348 + C15349 + C15350) * C49311 +
            (C15344 + C15343 + C15342 + C15341 + C15340 + C15339) * C49343 +
            (C15338 + C15337 + C15336 + C15335 + C15334 + C15333) * C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C824 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C1569 + C1568 + C1567) * C15329 +
            (C1566 + C1565 + C1564) * C15326 +
            (C16926 + C16927 + C16928) * C15330 +
            (C16929 + C16930 + C16931) * C15327 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C15331 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C16931 + C16930 + C16929) * C49327 +
            (C16928 + C16927 + C16926) * C15331 +
            (C1564 + C1565 + C1566) * C15327 +
            (C1567 + C1568 + C1569) * C15330 +
            (C1154 + C1153 + C1152) * C15326 +
            (C1151 + C1150 + C1149) * C15329) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C268 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C268 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C268 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C268 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C15329 +
             (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
             C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
                C49356 +
            (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
            C15355 * C49311) *
               C824 -
           ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
            (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
            (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
             C2952 * C15326 + C2951 * C15329) *
                C49356) *
               C49321) *
              C268 +
          (((C3385 * C15329 + C3386 * C15326 + C3387 * C15330 + C3388 * C15327 +
             (C113 * C3364 + C49030 * C3367) * C15331 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C49356 +
            (C2756 * C15329 + C2755 * C15326 + C2754 * C15330 + C2753 * C15327 +
             (C113 * C3365 + C49030 * C3369) * C15331 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C49343 +
            (C2752 * C15329 + C2751 * C15326 + C2750 * C15330 + C2749 * C15327 +
             (C113 * C3366 + C49030 * C3371) * C15331 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C15502 + C15503 + C15504 + C15505 + C15506 + C15507) * C49311 +
            (C15508 + C15509 + C15510 + C15511 + C15512 + C15513) * C49343 +
            (C3388 * C49327 + C3387 * C15331 + C3386 * C15327 + C3385 * C15330 +
             (C113 * C286 + C49030 * C294) * C15326 +
             (C113 * C276 + C49030 * C287) * C15329) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C15329 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C15326 +
            (C16914 + C16915 + C16916) * C15330 +
            (C16917 + C16918 + C16919) * C15327 +
            (C16920 + C16921 + C16922) * C15331 +
            (C16923 + C16924 + C16925) * C49327) *
               C48935 * C824 -
           ((C1111 * C10328 + C49324 * C10332 + C1110 * C3368 + C49347 * C3373 +
             C1109 * C2918 + C49359 * C2924) *
                C49327 +
            (C1111 * C10326 + C49324 * C10329 + C1110 * C3364 + C49347 * C3367 +
             C1109 * C2912 + C49359 * C2919) *
                C15331 +
            (C16925 + C16924 + C16923) * C15327 +
            (C16922 + C16921 + C16920) * C15330 +
            (C16919 + C16918 + C16917) * C15326 +
            (C16916 + C16915 + C16914) * C15329) *
               C48935 * C49321) *
              C268 +
          (((C17358 + C17359 + C17360) * C15329 +
            (C17361 + C17362 + C17363) * C15326 +
            (C17364 + C17365 + C17366) * C15330 +
            (C17367 + C17368 + C17369) * C15327 +
            (C1109 * C3364 + C49359 * C3367 + C1110 * C10326 + C49347 * C10329 +
             C1111 * C10790 + C49324 * C10791) *
                C15331 +
            (C1109 * C3368 + C49359 * C3373 + C1110 * C10328 + C49347 * C10332 +
             C1111 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C17369 + C17368 + C17367) * C49327 +
            (C17366 + C17365 + C17364) * C15331 +
            (C17363 + C17362 + C17361) * C15327 +
            (C17360 + C17359 + C17358) * C15330 +
            (C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C15326 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C15329) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C970 -
          (((C1558 + C1559 + C1560) * C49047 + (C1561 + C1562 + C1563) * C114) *
               C49311 +
           ((C1564 + C1565 + C1566) * C49047 + (C1567 + C1568 + C1569) * C114) *
               C1107 +
           ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
             C1109 * C426 + C49359 * C434) *
                C49047 +
            (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
             C1109 * C416 + C49359 * C427) *
                C114) *
               C1106) *
              C971 +
          (((C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
             C1111 * C2398 + C49324 * C2404) *
                C114 +
            (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
             C1111 * C2406 + C49324 * C2416) *
                C49047) *
               C1106 +
           ((C1109 * C974 + C49359 * C980 + C1110 * C2399 + C49347 * C2407 +
             C1111 * C2400 + C49324 * C2408) *
                C114 +
            (C1109 * C981 + C49359 * C989 + C1110 * C2409 + C49347 * C2417 +
             C1111 * C2410 + C49324 * C2418) *
                C49047) *
               C1107 +
           ((C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
             C1111 * C2402 + C49324 * C2412) *
                C114 +
            (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
             C1111 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C49030 * C434) * C49047 +
            (C113 * C416 + C49030 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C49030 * C978) * C114 +
            (C113 * C979 + C49030 * C988) * C49047) *
               C103 +
           ((C113 * C974 + C49030 * C980) * C114 +
            (C113 * C981 + C49030 * C989) * C49047) *
               C104 +
           ((C113 * C975 + C49030 * C982) * C114 +
            (C113 * C983 + C49030 * C990) * C49047) *
               C105 +
           ((C113 * C976 + C49030 * C984) * C114 +
            (C113 * C985 + C49030 * C991) * C49047) *
               C106 +
           ((C113 * C977 + C49030 * C986) * C114 +
            (C113 * C987 + C49030 * C992) * C49047) *
               C107) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C970 -
          (((C8384 + C8385 + C8386) * C49047 + (C8387 + C8388 + C8389) * C114) *
               C49311 +
           ((C8390 + C8391 + C8392) * C49047 + (C8393 + C8394 + C8395) * C114) *
               C49343 +
           ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
             C7967 * C426 + C7961 * C434) *
                C49047 +
            (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
             C7967 * C416 + C7961 * C427) *
                C114) *
               C49356) *
              C971 +
          (((C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C114 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49047) *
               C49356 +
           ((C7967 * C974 + C7961 * C980 + C7968 * C2399 + C7962 * C2407 +
             C7969 * C2400 + C49324 * C2408) *
                C114 +
            (C7967 * C981 + C7961 * C989 + C7968 * C2409 + C7962 * C2417 +
             C7969 * C2410 + C49324 * C2418) *
                C49047) *
               C49343 +
           ((C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
             C7969 * C2402 + C49324 * C2412) *
                C114 +
            (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
             C7969 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C970 -
          ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
            C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
            C9267 * C426 + C9261 * C434) *
               C49047 +
           (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
            C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
            C9267 * C416 + C9261 * C427) *
               C114) *
              C48935 * C971 +
          ((C9267 * C973 + C9261 * C978 + C9268 * C2397 + C9262 * C2403 +
            C9269 * C2398 + C9263 * C2404 + C9270 * C9912 + C9264 * C9914 +
            C9271 * C9913 + C9265 * C9915) *
               C114 +
           (C9267 * C979 + C9261 * C988 + C9268 * C2405 + C9262 * C2415 +
            C9269 * C2406 + C9263 * C2416 + C9270 * C9916 + C9264 * C9918 +
            C9271 * C9917 + C9265 * C9919) *
               C49047) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C15329 +
            (C113 * C123 + C49030 * C136) * C15326 + C2951 * C15330 +
            C2952 * C15327 + C2953 * C15331 + C2954 * C49327) *
               C49356 +
           (C15333 + C15334 + C15335 + C15336 + C15337 + C15338) * C49343 +
           C15355 * C49311) *
              C970 -
          ((C15660 + C15661 + C15662 + C15663 + C15664 + C15665) * C49311 +
           (C15666 + C15667 + C15668 + C15669 + C15670 + C15671) * C49343 +
           (C3807 * C49327 + C3808 * C15331 + C2954 * C15327 + C2953 * C15330 +
            C2952 * C15326 + C2951 * C15329) *
               C49356) *
              C971 +
          ((C2953 * C15329 + C2954 * C15326 + C3808 * C15330 + C3807 * C15327 +
            (C113 * C3790 + C49030 * C3793) * C15331 +
            (C113 * C3794 + C49030 * C3799) * C49327) *
               C49356 +
           (C2562 * C15329 + C2563 * C15326 + C2958 * C15330 + C2957 * C15327 +
            (C113 * C3791 + C49030 * C3795) * C15331 +
            (C113 * C3796 + C49030 * C3800) * C49327) *
               C49343 +
           (C2565 * C15329 + C2566 * C15326 + C2956 * C15330 + C2955 * C15327 +
            (C113 * C3792 + C49030 * C3797) * C15331 +
            (C113 * C3798 + C49030 * C3801) * C49327) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
            C1111 * C620 + C49324 * C625) *
               C15329 +
           (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
            C1111 * C626 + C49324 * C635) *
               C15326 +
           (C16914 + C16915 + C16916) * C15330 +
           (C16917 + C16918 + C16919) * C15327 + C17786 * C15331 +
           C17787 * C49327) *
              C48935 * C970 -
          ((C17788 + C17789 + C17790) * C49327 +
           (C17791 + C17792 + C17793) * C15331 +
           (C16925 + C16924 + C16923) * C15327 +
           (C16922 + C16921 + C16920) * C15330 +
           (C16919 + C16918 + C16917) * C15326 +
           (C16916 + C16915 + C16914) * C15329) *
              C48935 * C971 +
          (C17786 * C15329 + C17787 * C15326 +
           (C17793 + C17792 + C17791) * C15330 +
           (C17790 + C17789 + C17788) * C15327 +
           (C1109 * C3790 + C49359 * C3793 + C1110 * C11232 + C49347 * C11234 +
            C1111 * C11233 + C49324 * C11235) *
               C15331 +
           (C1109 * C3794 + C49359 * C3799 + C1110 * C11236 + C49347 * C11238 +
            C1111 * C11237 + C49324 * C11239) *
               C49327) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C31304 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C31302 +
            (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
               C48940 +
           ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
            C6726 * C31305 + C6727 * C49134) *
               C48948 +
           C35223 * C26646) *
              C49019 * C49002 * C110 -
          (((C4293 + C4294) * C49134 + (C4295 + C4296) * C31305 +
            (C3958 + C3957) * C31302 + (C3956 + C3955) * C31304) *
               C26646 +
           (C6736 * C49134 + C6737 * C31305 + (C3954 + C3953) * C31302 +
            (C3952 + C3951) * C31304) *
               C48948 +
           (C6746 * C49134 + C6747 * C31305 + (C3950 + C3949) * C31302 +
            (C3948 + C3947) * C31304) *
               C48940) *
              C49019 * C49002 * C111 +
          (C35223 * C48940 +
           (C3965 * C31304 + C3966 * C31302 + (C4296 + C4295) * C31305 +
            (C4294 + C4293) * C49134) *
               C48948 +
           ((C3962 + C3961) * C31304 + (C3960 + C3959) * C31302 +
            (C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                C31305 +
            (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                C49134) *
               C26646) *
              C49019 * C49002 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C49019 * C268 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C31305 +
             (C4131 + C4132) * C31302 + (C4133 + C4134) * C31304) *
                C26646 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C31305 +
             (C4135 + C4136) * C31302 + (C4137 + C4138) * C31304) *
                C48948 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C31305 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C31302 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C31304) *
                C48940) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C31304 + (C4136 + C4135) * C31302 +
             (C6523 + C6522) * C31305 + (C6521 + C6520) * C49134) *
                C48940 +
            ((C4134 + C4133) * C31304 + (C4132 + C4131) * C31302 +
             (C6519 + C6518) * C31305 + (C6517 + C6516) * C49134) *
                C48948 +
            ((C4130 + C4129) * C31304 + (C4128 + C4127) * C31302 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C31305 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C26646) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C31305 +
             (C3958 + C3957) * C31302 + (C3956 + C3955) * C31304) *
                C26646 +
            (C6736 * C49134 + C6737 * C31305 + (C3954 + C3953) * C31302 +
             (C3952 + C3951) * C31304) *
                C48948 +
            (C6746 * C49134 + C6747 * C31305 + (C3950 + C3949) * C31302 +
             (C3948 + C3947) * C31304) *
                C48940) *
               C49019 * C268) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C31305 +
             C6736 * C31302 + C6737 * C31304) *
                C26646 +
            (C19088 * C49134 + C19089 * C31305 + C6746 * C31302 +
             C6747 * C31304) *
                C48948 +
            ((C7848 + C7849) * C49134 + (C7850 + C7851) * C31305 +
             (C6751 + C6750) * C31302 + (C6749 + C6748) * C31304) *
                C48940) *
               C49321) *
              C49002 * C270 +
          (((C6726 * C31304 + C6727 * C31302 + C19078 * C31305 +
             C19079 * C49134) *
                C48940 +
            (C6299 * C31304 + C6300 * C31302 + (C6755 + C6754) * C31305 +
             (C6753 + C6752) * C49134) *
                C48948 +
            ((C4296 + C4295) * C31304 + (C4294 + C4293) * C31302 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C31305 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C26646) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C31305 +
             (C3958 + C3957) * C31302 + (C3956 + C3955) * C31304) *
                C26646 +
            (C6736 * C49134 + C6737 * C31305 + (C3954 + C3953) * C31302 +
             (C3952 + C3951) * C31304) *
                C48948 +
            (C6746 * C49134 + C6747 * C31305 + (C3950 + C3949) * C31302 +
             (C3948 + C3947) * C31304) *
                C48940) *
               C410) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C49019 * C550 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C31305 +
             (C4131 + C4132) * C31302 + (C4133 + C4134) * C31304) *
                C26646 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C31305 +
             (C4135 + C4136) * C31302 + (C4137 + C4138) * C31304) *
                C48948 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C31305 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C31302 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C31304) *
                C48940) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C31304 + (C4136 + C4135) * C31302 +
             (C6523 + C6522) * C31305 + (C6521 + C6520) * C49134) *
                C48940 +
            ((C4134 + C4133) * C31304 + (C4132 + C4131) * C31302 +
             (C6519 + C6518) * C31305 + (C6517 + C6516) * C49134) *
                C48948 +
            ((C4130 + C4129) * C31304 + (C4128 + C4127) * C31302 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C31305 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C26646) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C31305 +
             (C3958 + C3957) * C31302 + (C3956 + C3955) * C31304) *
                C26646 +
            (C6736 * C49134 + C6737 * C31305 + (C3954 + C3953) * C31302 +
             (C3952 + C3951) * C31304) *
                C48948 +
            (C6746 * C49134 + C6747 * C31305 + (C3950 + C3949) * C31302 +
             (C3948 + C3947) * C31304) *
                C48940) *
               C49019 * C550) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C31304 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C31302 +
            (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
               C48940 +
           ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
            C6726 * C31305 + C6727 * C49134) *
               C48948 +
           C35223 * C26646) *
              C49019 * C616 -
          (((C6516 + C6517) * C49134 + (C6518 + C6519) * C31305 +
            (C4131 + C4132) * C31302 + (C4133 + C4134) * C31304) *
               C26646 +
           ((C6520 + C6521) * C49134 + (C6522 + C6523) * C31305 +
            (C4135 + C4136) * C31302 + (C4137 + C4138) * C31304) *
               C48948 +
           ((C7305 + C7304) * C49134 + (C7303 + C7302) * C31305 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C31302 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C31304) *
               C48940) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C31304 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C31302 +
            (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
                C31305 +
            (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
                C49134) *
               C48940 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C31304 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C31302 +
            (C3912 * C1518 + C49291 * C1524 + C3913 * C1984 + C49092 * C1988) *
                C31305 +
            (C3912 * C1523 + C49291 * C1530 + C3913 * C1989 + C49092 * C1993) *
                C49134) *
               C48948 +
           ((C3912 * C622 + C49291 * C629 + C3913 * C1319 + C49092 * C1324) *
                C31304 +
            (C3912 * C630 + C49291 * C637 + C3913 * C1323 + C49092 * C1331) *
                C31302 +
            (C3912 * C1517 + C49291 * C1522 + C3913 * C1985 + C49092 * C1990) *
                C31305 +
            (C3912 * C1521 + C49291 * C1529 + C3913 * C1991 + C49092 * C1994) *
                C49134) *
               C26646) *
              C49019 * C618) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C31305 +
             C6736 * C31302 + C6737 * C31304) *
                C26646 +
            (C19088 * C49134 + C19089 * C31305 + C6746 * C31302 +
             C6747 * C31304) *
                C48948 +
            ((C7848 + C7849) * C49134 + (C7850 + C7851) * C31305 +
             (C6751 + C6750) * C31302 + (C6749 + C6748) * C31304) *
                C48940) *
               C49321) *
              C550 +
          ((((C7302 + C7303) * C31304 + (C7304 + C7305) * C31302 +
             (C19636 + C19637) * C31305 + (C19638 + C19639) * C49134) *
                C48940 +
            ((C6523 + C6522) * C31304 + (C6521 + C6520) * C31302 +
             (C18883 + C18882) * C31305 + (C18881 + C18880) * C49134) *
                C48948 +
            ((C6519 + C6518) * C31304 + (C6517 + C6516) * C31302 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C31305 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C26646) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C31305 +
             (C4131 + C4132) * C31302 + (C4133 + C4134) * C31304) *
                C26646 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C31305 +
             (C4135 + C4136) * C31302 + (C4137 + C4138) * C31304) *
                C48948 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C31305 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C31302 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C31304) *
                C48940) *
               C410) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C31305 +
             C6736 * C31302 + C6737 * C31304) *
                C26646 +
            (C19088 * C49134 + C19089 * C31305 + C6746 * C31302 +
             C6747 * C31304) *
                C48948 +
            ((C7848 + C7849) * C49134 + (C7850 + C7851) * C31305 +
             (C6751 + C6750) * C31302 + (C6749 + C6748) * C31304) *
                C48940) *
               C49321) *
              C49002 * C552 +
          (((C6726 * C31304 + C6727 * C31302 + C19078 * C31305 +
             C19079 * C49134) *
                C48940 +
            (C6299 * C31304 + C6300 * C31302 + (C6755 + C6754) * C31305 +
             (C6753 + C6752) * C49134) *
                C48948 +
            ((C4296 + C4295) * C31304 + (C4294 + C4293) * C31302 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C31305 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C26646) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C31305 +
             (C3958 + C3957) * C31302 + (C3956 + C3955) * C31304) *
                C26646 +
            (C6736 * C49134 + C6737 * C31305 + (C3954 + C3953) * C31302 +
             (C3952 + C3951) * C31304) *
                C48948 +
            (C6746 * C49134 + C6747 * C31305 + (C3950 + C3949) * C31302 +
             (C3948 + C3947) * C31304) *
                C48940) *
               C824) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C31304 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C31302 +
             (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
                C48940 +
            ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
             C6726 * C31305 + C6727 * C49134) *
                C48948 +
            C35223 * C26646) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C31305 +
             C6736 * C31302 + C6737 * C31304) *
                C26646 +
            (C19088 * C49134 + C19089 * C31305 + C6746 * C31302 +
             C6747 * C31304) *
                C48948 +
            ((C7848 + C7849) * C49134 + (C7850 + C7851) * C31305 +
             (C6751 + C6750) * C31302 + (C6749 + C6748) * C31304) *
                C48940) *
               C49321) *
              C268 +
          ((((C7302 + C7303) * C31304 + (C7304 + C7305) * C31302 +
             (C19636 + C19637) * C31305 + (C19638 + C19639) * C49134) *
                C48940 +
            ((C6523 + C6522) * C31304 + (C6521 + C6520) * C31302 +
             (C18883 + C18882) * C31305 + (C18881 + C18880) * C49134) *
                C48948 +
            ((C6519 + C6518) * C31304 + (C6517 + C6516) * C31302 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C31305 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C26646) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C31305 +
             (C4131 + C4132) * C31302 + (C4133 + C4134) * C31304) *
                C26646 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C31305 +
             (C4135 + C4136) * C31302 + (C4137 + C4138) * C31304) *
                C48948 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C31305 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C31302 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C31304) *
                C48940) *
               C824) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C31304 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C31302 +
            (C6748 + C6749) * C31305 + (C6750 + C6751) * C49134) *
               C48940 +
           ((C3947 + C3948) * C31304 + (C3949 + C3950) * C31302 +
            C6726 * C31305 + C6727 * C49134) *
               C48948 +
           C35223 * C26646) *
              C970 -
          (((C6752 + C6753) * C49134 + (C6754 + C6755) * C31305 +
            C6736 * C31302 + C6737 * C31304) *
               C26646 +
           (C19088 * C49134 + C19089 * C31305 + C6746 * C31302 +
            C6747 * C31304) *
               C48948 +
           ((C7848 + C7849) * C49134 + (C7850 + C7851) * C31305 +
            (C6751 + C6750) * C31302 + (C6749 + C6748) * C31304) *
               C48940) *
              C971 +
          ((C20174 * C31304 + C20175 * C31302 + C22394 * C31305 +
            C22395 * C49134) *
               C48940 +
           (C19078 * C31304 + C19079 * C31302 + (C19093 + C19092) * C31305 +
            (C19091 + C19090) * C49134) *
               C48948 +
           ((C6755 + C6754) * C31304 + (C6753 + C6752) * C31302 +
            (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                C31305 +
            (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                C49134) *
               C26646) *
              C972) *
         C49002 * C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C48044 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49130 +
            (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
            C20174 * C48050 + C20175 * C36791) *
               C23721 +
           ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
            C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
            C19079 * C36791) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C6752 + C6753) * C36791 + (C6754 + C6755) * C48050 +
            C6736 * C49137 + C6737 * C48036 + (C3954 + C3953) * C49130 +
            (C3952 + C3951) * C48044) *
               C48945 +
           (C19088 * C36791 + C19089 * C48050 + C6746 * C49137 +
            C6747 * C48036 + (C3950 + C3949) * C49130 +
            (C3948 + C3947) * C48044) *
               C23721) *
              C49019 * C49002 * C111 +
          ((C3963 * C48044 + C3964 * C49130 + C6299 * C48036 + C6300 * C49137 +
            (C6755 + C6754) * C48050 + (C6753 + C6752) * C36791) *
               C23721 +
           (C3965 * C48044 + C3966 * C49130 + (C4296 + C4295) * C48036 +
            (C4294 + C4293) * C49137 +
            (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                C48050 +
            (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                C36791) *
               C48945) *
              C49019 * C49002 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C49019 * C268 -
           (((C18880 + C18881) * C36791 + (C18882 + C18883) * C48050 +
             (C6520 + C6521) * C49137 + (C6522 + C6523) * C48036 +
             (C4135 + C4136) * C49130 + (C4137 + C4138) * C48044) *
                C48945 +
            ((C19639 + C19638) * C36791 + (C19637 + C19636) * C48050 +
             (C7305 + C7304) * C49137 + (C7303 + C7302) * C48036 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49130 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C48044) *
                C23721) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C48044 + (C4136 + C4135) * C49130 +
             (C6523 + C6522) * C48036 + (C6521 + C6520) * C49137 +
             (C18883 + C18882) * C48050 + (C18881 + C18880) * C36791) *
                C23721 +
            ((C4134 + C4133) * C48044 + (C4132 + C4131) * C49130 +
             (C6519 + C6518) * C48036 + (C6517 + C6516) * C49137 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C48050 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C36791) *
                C48945) *
               C49019 * C49319 -
           (((C6752 + C6753) * C36791 + (C6754 + C6755) * C48050 +
             C6736 * C49137 + C6737 * C48036 + (C3954 + C3953) * C49130 +
             (C3952 + C3951) * C48044) *
                C48945 +
            (C19088 * C36791 + C19089 * C48050 + C6746 * C49137 +
             C6747 * C48036 + (C3950 + C3949) * C49130 +
             (C3948 + C3947) * C48044) *
                C23721) *
               C49019 * C268) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C410 -
           (((C19090 + C19091) * C36791 + (C19092 + C19093) * C48050 +
             C19088 * C49137 + C19089 * C48036 + C6746 * C49130 +
             C6747 * C48044) *
                C48945 +
            ((C20184 + C20185) * C36791 + (C20186 + C20187) * C48050 +
             (C7848 + C7849) * C49137 + (C7850 + C7851) * C48036 +
             (C6751 + C6750) * C49130 + (C6749 + C6748) * C48044) *
                C23721) *
               C49321) *
              C49002 * C270 +
          (((C6726 * C48044 + C6727 * C49130 + C19078 * C48036 +
             C19079 * C49137 + (C19093 + C19092) * C48050 +
             (C19091 + C19090) * C36791) *
                C23721 +
            (C6299 * C48044 + C6300 * C49130 + (C6755 + C6754) * C48036 +
             (C6753 + C6752) * C49137 +
             (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                 C48050 +
             (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                 C36791) *
                C48945) *
               C49321 -
           (((C6752 + C6753) * C36791 + (C6754 + C6755) * C48050 +
             C6736 * C49137 + C6737 * C48036 + (C3954 + C3953) * C49130 +
             (C3952 + C3951) * C48044) *
                C48945 +
            (C19088 * C36791 + C19089 * C48050 + C6746 * C49137 +
             C6747 * C48036 + (C3950 + C3949) * C49130 +
             (C3948 + C3947) * C48044) *
                C23721) *
               C410) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C49019 * C550 -
           (((C18880 + C18881) * C36791 + (C18882 + C18883) * C48050 +
             (C6520 + C6521) * C49137 + (C6522 + C6523) * C48036 +
             (C4135 + C4136) * C49130 + (C4137 + C4138) * C48044) *
                C48945 +
            ((C19639 + C19638) * C36791 + (C19637 + C19636) * C48050 +
             (C7305 + C7304) * C49137 + (C7303 + C7302) * C48036 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49130 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C48044) *
                C23721) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C48044 + (C4136 + C4135) * C49130 +
             (C6523 + C6522) * C48036 + (C6521 + C6520) * C49137 +
             (C18883 + C18882) * C48050 + (C18881 + C18880) * C36791) *
                C23721 +
            ((C4134 + C4133) * C48044 + (C4132 + C4131) * C49130 +
             (C6519 + C6518) * C48036 + (C6517 + C6516) * C49137 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C48050 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C36791) *
                C48945) *
               C49019 * C49319 -
           (((C6752 + C6753) * C36791 + (C6754 + C6755) * C48050 +
             C6736 * C49137 + C6737 * C48036 + (C3954 + C3953) * C49130 +
             (C3952 + C3951) * C48044) *
                C48945 +
            (C19088 * C36791 + C19089 * C48050 + C6746 * C49137 +
             C6747 * C48036 + (C3950 + C3949) * C49130 +
             (C3948 + C3947) * C48044) *
                C23721) *
               C49019 * C550) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C48044 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49130 +
            (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
            C20174 * C48050 + C20175 * C36791) *
               C23721 +
           ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
            C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
            C19079 * C36791) *
               C48945) *
              C49019 * C616 -
          (((C18880 + C18881) * C36791 + (C18882 + C18883) * C48050 +
            (C6520 + C6521) * C49137 + (C6522 + C6523) * C48036 +
            (C4135 + C4136) * C49130 + (C4137 + C4138) * C48044) *
               C48945 +
           ((C19639 + C19638) * C36791 + (C19637 + C19636) * C48050 +
            (C7305 + C7304) * C49137 + (C7303 + C7302) * C48036 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C49130 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C48044) *
               C23721) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C48044 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C49130 +
            (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
                C48036 +
            (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
                C49137 +
            (C3912 * C2398 + C49291 * C2404 + C3913 * C9912 + C49092 * C9914) *
                C48050 +
            (C3912 * C2406 + C49291 * C2416 + C3913 * C9916 + C49092 * C9918) *
                C36791) *
               C23721 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C48044 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C49130 +
            (C3912 * C1518 + C49291 * C1524 + C3913 * C1984 + C49092 * C1988) *
                C48036 +
            (C3912 * C1523 + C49291 * C1530 + C3913 * C1989 + C49092 * C1993) *
                C49137 +
            (C3912 * C2400 + C49291 * C2408 + C3913 * C10176 +
             C49092 * C10177) *
                C48050 +
            (C3912 * C2410 + C49291 * C2418 + C3913 * C10178 +
             C49092 * C10179) *
                C36791) *
               C48945) *
              C49019 * C618) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C410 -
           (((C19090 + C19091) * C36791 + (C19092 + C19093) * C48050 +
             C19088 * C49137 + C19089 * C48036 + C6746 * C49130 +
             C6747 * C48044) *
                C48945 +
            ((C20184 + C20185) * C36791 + (C20186 + C20187) * C48050 +
             (C7848 + C7849) * C49137 + (C7850 + C7851) * C48036 +
             (C6751 + C6750) * C49130 + (C6749 + C6748) * C48044) *
                C23721) *
               C49321) *
              C550 +
          ((((C7302 + C7303) * C48044 + (C7304 + C7305) * C49130 +
             (C19636 + C19637) * C48036 + (C19638 + C19639) * C49137 +
             (C22032 + C22033) * C48050 + (C22034 + C22035) * C36791) *
                C23721 +
            ((C6523 + C6522) * C48044 + (C6521 + C6520) * C49130 +
             (C18883 + C18882) * C48036 + (C18881 + C18880) * C49137 +
             (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
              C49092 * C10330) *
                 C48050 +
             (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
              C49092 * C10333) *
                 C36791) *
                C48945) *
               C49321 -
           (((C18880 + C18881) * C36791 + (C18882 + C18883) * C48050 +
             (C6520 + C6521) * C49137 + (C6522 + C6523) * C48036 +
             (C4135 + C4136) * C49130 + (C4137 + C4138) * C48044) *
                C48945 +
            ((C19639 + C19638) * C36791 + (C19637 + C19636) * C48050 +
             (C7305 + C7304) * C49137 + (C7303 + C7302) * C48036 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49130 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C48044) *
                C23721) *
               C410) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C824 -
           (((C19090 + C19091) * C36791 + (C19092 + C19093) * C48050 +
             C19088 * C49137 + C19089 * C48036 + C6746 * C49130 +
             C6747 * C48044) *
                C48945 +
            ((C20184 + C20185) * C36791 + (C20186 + C20187) * C48050 +
             (C7848 + C7849) * C49137 + (C7850 + C7851) * C48036 +
             (C6751 + C6750) * C49130 + (C6749 + C6748) * C48044) *
                C23721) *
               C49321) *
              C49002 * C552 +
          (((C6726 * C48044 + C6727 * C49130 + C19078 * C48036 +
             C19079 * C49137 + (C19093 + C19092) * C48050 +
             (C19091 + C19090) * C36791) *
                C23721 +
            (C6299 * C48044 + C6300 * C49130 + (C6755 + C6754) * C48036 +
             (C6753 + C6752) * C49137 +
             (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                 C48050 +
             (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                 C36791) *
                C48945) *
               C49321 -
           (((C6752 + C6753) * C36791 + (C6754 + C6755) * C48050 +
             C6736 * C49137 + C6737 * C48036 + (C3954 + C3953) * C49130 +
             (C3952 + C3951) * C48044) *
                C48945 +
            (C19088 * C36791 + C19089 * C48050 + C6746 * C49137 +
             C6747 * C48036 + (C3950 + C3949) * C49130 +
             (C3948 + C3947) * C48044) *
                C23721) *
               C824) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C48044 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49130 +
             (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
             C20174 * C48050 + C20175 * C36791) *
                C23721 +
            ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
             C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
             C19079 * C36791) *
                C48945) *
               C824 -
           (((C19090 + C19091) * C36791 + (C19092 + C19093) * C48050 +
             C19088 * C49137 + C19089 * C48036 + C6746 * C49130 +
             C6747 * C48044) *
                C48945 +
            ((C20184 + C20185) * C36791 + (C20186 + C20187) * C48050 +
             (C7848 + C7849) * C49137 + (C7850 + C7851) * C48036 +
             (C6751 + C6750) * C49130 + (C6749 + C6748) * C48044) *
                C23721) *
               C49321) *
              C268 +
          ((((C7302 + C7303) * C48044 + (C7304 + C7305) * C49130 +
             (C19636 + C19637) * C48036 + (C19638 + C19639) * C49137 +
             (C22032 + C22033) * C48050 + (C22034 + C22035) * C36791) *
                C23721 +
            ((C6523 + C6522) * C48044 + (C6521 + C6520) * C49130 +
             (C18883 + C18882) * C48036 + (C18881 + C18880) * C49137 +
             (C3912 * C3365 + C49291 * C3369 + C3913 * C10327 +
              C49092 * C10330) *
                 C48050 +
             (C3912 * C3370 + C49291 * C3374 + C3913 * C10331 +
              C49092 * C10333) *
                 C36791) *
                C48945) *
               C49321 -
           (((C18880 + C18881) * C36791 + (C18882 + C18883) * C48050 +
             (C6520 + C6521) * C49137 + (C6522 + C6523) * C48036 +
             (C4135 + C4136) * C49130 + (C4137 + C4138) * C48044) *
                C48945 +
            ((C19639 + C19638) * C36791 + (C19637 + C19636) * C48050 +
             (C7305 + C7304) * C49137 + (C7303 + C7302) * C48036 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49130 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C48044) *
                C23721) *
               C824) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C48044 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49130 +
            (C6748 + C6749) * C48036 + (C6750 + C6751) * C49137 +
            C20174 * C48050 + C20175 * C36791) *
               C23721 +
           ((C3947 + C3948) * C48044 + (C3949 + C3950) * C49130 +
            C6726 * C48036 + C6727 * C49137 + C19078 * C48050 +
            C19079 * C36791) *
               C48945) *
              C970 -
          (((C19090 + C19091) * C36791 + (C19092 + C19093) * C48050 +
            C19088 * C49137 + C19089 * C48036 + C6746 * C49130 +
            C6747 * C48044) *
               C48945 +
           ((C20184 + C20185) * C36791 + (C20186 + C20187) * C48050 +
            (C7848 + C7849) * C49137 + (C7850 + C7851) * C48036 +
            (C6751 + C6750) * C49130 + (C6749 + C6748) * C48044) *
               C23721) *
              C971 +
          ((C20174 * C48044 + C20175 * C49130 + C22394 * C48036 +
            C22395 * C49137 + (C22407 + C22406) * C48050 +
            (C22405 + C22404) * C36791) *
               C23721 +
           (C19078 * C48044 + C19079 * C49130 + (C19093 + C19092) * C48036 +
            (C19091 + C19090) * C49137 +
            (C3912 * C3791 + C49291 * C3795 + C3913 * C17947 +
             C49092 * C17948) *
                C48050 +
            (C3912 * C3796 + C49291 * C3800 + C3913 * C17949 +
             C49092 * C17950) *
                C36791) *
               C48945) *
              C972) *
         C49002 * C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C31304 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C31302 +
            (C16914 + C16915 + C16916) * C31305 +
            (C16917 + C16918 + C16919) * C49134) *
               C23721 +
           ((C1149 + C1150 + C1151) * C31304 +
            (C1152 + C1153 + C1154) * C31302 +
            (C1569 + C1568 + C1567) * C31305 +
            (C1566 + C1565 + C1564) * C49134) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C1558 + C1559 + C1560) * C49134 +
            (C1561 + C1562 + C1563) * C31305 +
            (C1160 + C1159 + C1158) * C31302 +
            (C1157 + C1156 + C1155) * C31304) *
               C48945 +
           ((C1564 + C1565 + C1566) * C49134 +
            (C1567 + C1568 + C1569) * C31305 +
            (C1154 + C1153 + C1152) * C31302 +
            (C1151 + C1150 + C1149) * C31304) *
               C23721) *
              C49019 * C49002 * C111 +
          ((C1169 * C31304 + C1170 * C31302 + (C1563 + C1562 + C1561) * C31305 +
            (C1560 + C1559 + C1558) * C49134) *
               C23721 +
           ((C1166 + C1165 + C1164) * C31304 +
            (C1163 + C1162 + C1161) * C31302 +
            (C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
             C1111 * C1520 + C49324 * C1527) *
                C31305 +
            (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
             C1111 * C1528 + C49324 * C1532) *
                C49134) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C31304 +
            (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
            C2952 * C49134) *
               C49365 +
           (C31307 + C31308 + C31309 + C31310) * C49358 + C31327 * C49345 +
           C31328 * C49328) *
              C49019 * C49002 * C110 -
          ((C31319 + C31320 + C31321 + C31322) * C49328 +
           (C31318 + C31317 + C31316 + C31315) * C49345 +
           (C31314 + C31313 + C31312 + C31311) * C49358 +
           (C31310 + C31309 + C31308 + C31307) * C49365) *
              C49019 * C49002 * C111 +
          (C31327 * C49365 + C31328 * C49358 +
           (C31322 + C31321 + C31320 + C31319) * C49345 +
           (C173 * C31304 + C172 * C31302 +
            (C113 * C417 + C49030 * C428) * C31305 +
            (C113 * C429 + C49030 * C435) * C49134) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C34058 +
            (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
            C2952 * C49364 + C2953 * C34060 + C2954 * C49355 + C3808 * C34061 +
            C3807 * C49340) *
               C23721 +
           (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 + C34069 +
            C34070) *
               C48945) *
              C49019 * C49002 * C110 -
          ((C34071 + C34072 + C34073 + C34074 + C34075 + C34076 + C34077 +
            C34078) *
               C48945 +
           (C34070 + C34069 + C34068 + C34067 + C34066 + C34065 + C34064 +
            C34063) *
               C23721) *
              C49019 * C49002 * C111 +
          ((C34078 + C34077 + C34076 + C34075 + C34074 + C34073 + C34072 +
            C34071) *
               C23721 +
           (C168 * C34058 + C169 * C49367 + C456 * C34059 + C455 * C49364 +
            C2568 * C34060 + C2567 * C49355 +
            (C113 * C2913 + C49030 * C2920) * C34061 +
            (C113 * C2921 + C49030 * C2925) * C49340) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 +
                      (C1569 + C1568 + C1567) * C31305 +
                      (C1566 + C1565 + C1564) * C49134) *
                         C48945) *
                        C49019 * C268 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C49019 * C49319) *
                       C270 +
                   ((((C1371 + C1370 + C1369) * C31304 +
                      (C1368 + C1367 + C1366) * C31302 +
                      (C32686 + C32685 + C32684) * C31305 +
                      (C32683 + C32682 + C32681) * C49134) *
                         C23721 +
                     ((C1365 + C1364 + C1363) * C31304 +
                      (C1362 + C1361 + C1360) * C31302 +
                      (C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                       C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                          C31305 +
                      (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                       C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     ((C1564 + C1565 + C1566) * C49134 +
                      (C1567 + C1568 + C1569) * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C49019 * C268 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C49019 * C49319) *
                       C270 +
                   (((C31470 + C31469 + C31468 + C31467) * C49365 +
                     (C31466 + C31465 + C31464 + C31463) * C49358 +
                     (C31462 + C31461 + C31460 + C31459) * C49345 +
                     (C314 * C31304 + C313 * C31302 +
                      (C113 * C726 + C49030 * C735) * C31305 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C49019 * C268 -
                    ((C34209 + C34210 + C34211 + C34212 + C34213 + C34214 +
                      C34215 + C34216) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C34061 + C3388 * C49355 +
                      C3387 * C34060 + C3386 * C49364 + C3385 * C34059 +
                      (C113 * C286 + C49030 * C294) * C49367 +
                      (C113 * C276 + C49030 * C287) * C34058) *
                         C23721) *
                        C49019 * C49319) *
                       C270 +
                   (((C34216 + C34215 + C34214 + C34213 + C34212 + C34211 +
                      C34210 + C34209) *
                         C23721 +
                     (C318 * C34058 + C317 * C49367 + C2752 * C34059 +
                      C2751 * C49364 + C2750 * C34060 + C2749 * C49355 +
                      (C113 * C3366 + C49030 * C3371) * C34061 +
                      (C113 * C3372 + C49030 * C3375) * C49340) *
                         C48945) *
                        C49019 * C49319 -
                    ((C34071 + C34072 + C34073 + C34074 + C34075 + C34076 +
                      C34077 + C34078) *
                         C48945 +
                     (C34070 + C34069 + C34068 + C34067 + C34066 + C34065 +
                      C34064 + C34063) *
                         C23721) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[155] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C410 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C49002 * C270 +
                   (((C32885 * C31304 + C32886 * C31302 +
                      (C16926 + C16927 + C16928) * C31305 +
                      (C16929 + C16930 + C16931) * C49134) *
                         C23721 +
                     ((C1563 + C1562 + C1561) * C31304 +
                      (C1560 + C1559 + C1558) * C31302 +
                      (C1109 * C975 + C49359 * C982 + C1110 * C2401 +
                       C49347 * C2411 + C1111 * C2402 + C49324 * C2412) *
                          C31305 +
                      (C1109 * C983 + C49359 * C990 + C1110 * C2413 +
                       C49347 * C2419 + C1111 * C2414 + C49324 * C2420) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C410) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C410 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C49002 * C270 +
                   (((C31612 + C31611 + C31610 + C31609) * C49365 +
                     (C31608 + C31607 + C31606 + C31605) * C49358 +
                     (C31604 + C31603 + C31602 + C31601) * C49345 +
                     (C454 * C31304 + C453 * C31302 +
                      (C113 * C977 + C49030 * C986) * C31305 +
                      (C113 * C987 + C49030 * C992) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C410) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C410 -
                    ((C34347 + C34348 + C34349 + C34350 + C34351 + C34352 +
                      C34353 + C34354) *
                         C48945 +
                     (C18051 * C49340 + C18050 * C34061 + C3807 * C49355 +
                      C3808 * C34060 + C2954 * C49364 + C2953 * C34059 +
                      C2952 * C49367 + C2951 * C34058) *
                         C23721) *
                        C49321) *
                       C49002 * C270 +
                   (((C34354 + C34353 + C34352 + C34351 + C34350 + C34349 +
                      C34348 + C34347) *
                         C23721 +
                     (C458 * C34058 + C457 * C49367 + C2565 * C34059 +
                      C2566 * C49364 + C2956 * C34060 + C2955 * C49355 +
                      (C113 * C3792 + C49030 * C3797) * C34061 +
                      (C113 * C3798 + C49030 * C3801) * C49340) *
                         C48945) *
                        C49321 -
                    ((C34071 + C34072 + C34073 + C34074 + C34075 + C34076 +
                      C34077 + C34078) *
                         C48945 +
                     (C34070 + C34069 + C34068 + C34067 + C34066 + C34065 +
                      C34064 + C34063) *
                         C23721) *
                        C410) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[156] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C49019 * C550 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C49019 * C49319) *
                       C552 +
                   ((((C1371 + C1370 + C1369) * C31304 +
                      (C1368 + C1367 + C1366) * C31302 +
                      (C32686 + C32685 + C32684) * C31305 +
                      (C32683 + C32682 + C32681) * C49134) *
                         C23721 +
                     ((C1365 + C1364 + C1363) * C31304 +
                      (C1362 + C1361 + C1360) * C31302 +
                      (C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                       C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                          C31305 +
                      (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                       C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C49019 * C550 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C49019 * C49319) *
                       C552 +
                   (((C31470 + C31469 + C31468 + C31467) * C49365 +
                     (C31466 + C31465 + C31464 + C31463) * C49358 +
                     (C31462 + C31461 + C31460 + C31459) * C49345 +
                     (C314 * C31304 + C313 * C31302 +
                      (C113 * C726 + C49030 * C735) * C31305 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C49019 * C550 -
                    ((C34209 + C34210 + C34211 + C34212 + C34213 + C34214 +
                      C34215 + C34216) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C34061 + C3388 * C49355 +
                      C3387 * C34060 + C3386 * C49364 + C3385 * C34059 +
                      (C113 * C286 + C49030 * C294) * C49367 +
                      (C113 * C276 + C49030 * C287) * C34058) *
                         C23721) *
                        C49019 * C49319) *
                       C552 +
                   (((C34216 + C34215 + C34214 + C34213 + C34212 + C34211 +
                      C34210 + C34209) *
                         C23721 +
                     (C318 * C34058 + C317 * C49367 + C2752 * C34059 +
                      C2751 * C49364 + C2750 * C34060 + C2749 * C49355 +
                      (C113 * C3366 + C49030 * C3371) * C34061 +
                      (C113 * C3372 + C49030 * C3375) * C49340) *
                         C48945) *
                        C49019 * C49319 -
                    ((C34071 + C34072 + C34073 + C34074 + C34075 + C34076 +
                      C34077 + C34078) *
                         C48945 +
                     (C34070 + C34069 + C34068 + C34067 + C34066 + C34065 +
                      C34064 + C34063) *
                         C23721) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[157] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                      C49347 * C287 + C1111 * C620 + C49324 * C625) *
                         C31304 +
                     (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                      C49347 * C294 + C1111 * C626 + C49324 * C635) *
                         C31302 +
                     (C16914 + C16915 + C16916) * C31305 +
                     (C16917 + C16918 + C16919) * C49134) *
                        C23721 +
                    ((C1149 + C1150 + C1151) * C31304 +
                     (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                     C32886 * C49134) *
                        C48945) *
                       C49019 * C616 -
                   (((C32681 + C32682 + C32683) * C49134 +
                     (C32684 + C32685 + C32686) * C31305 +
                     (C1366 + C1367 + C1368) * C31302 +
                     (C1369 + C1370 + C1371) * C31304) *
                        C48945 +
                    ((C17363 + C17362 + C17361) * C49134 +
                     (C17360 + C17359 + C17358) * C31305 +
                     (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                      C49347 * C635 + C1109 * C286 + C49359 * C294) *
                         C31302 +
                     (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                      C49347 * C625 + C1109 * C276 + C49359 * C287) *
                         C31304) *
                        C23721) *
                       C49019 * C617 +
                   (((C1109 * C620 + C49359 * C625 + C1110 * C1321 +
                      C49347 * C1328 + C1111 * C1825 + C49324 * C1828) *
                         C31304 +
                     (C1109 * C626 + C49359 * C635 + C1110 * C1327 +
                      C49347 * C1333 + C1111 * C1829 + C49324 * C1834) *
                         C31302 +
                     (C1109 * C1519 + C49359 * C1526 + C1110 * C1983 +
                      C49347 * C1986 + C1111 * C9444 + C49324 * C9447) *
                         C31305 +
                     (C1109 * C1525 + C49359 * C1531 + C1110 * C1987 +
                      C49347 * C1992 + C1111 * C9446 + C49324 * C9450) *
                         C49134) *
                        C23721 +
                    ((C1109 * C621 + C49359 * C627 + C1110 * C1320 +
                      C49347 * C1326 + C1111 * C1826 + C49324 * C1830) *
                         C31304 +
                     (C1109 * C628 + C49359 * C636 + C1110 * C1325 +
                      C49347 * C1332 + C1111 * C1831 + C49324 * C1835) *
                         C31302 +
                     (C1109 * C1518 + C49359 * C1524 + C1110 * C1984 +
                      C49347 * C1988 + C1111 * C9445 + C49324 * C9448) *
                         C31305 +
                     (C1109 * C1523 + C49359 * C1530 + C1110 * C1989 +
                      C49347 * C1993 + C1111 * C9449 + C49324 * C9451) *
                         C49134) *
                        C48945) *
                       C49019 * C618) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C49030 * C122) * C31304 +
                     (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                     C2952 * C49134) *
                        C49365 +
                    (C31307 + C31308 + C31309 + C31310) * C49358 +
                    C31327 * C49345 + C31328 * C49328) *
                       C49019 * C616 -
                   ((C31459 + C31460 + C31461 + C31462) * C49328 +
                    (C31463 + C31464 + C31465 + C31466) * C49345 +
                    (C31467 + C31468 + C31469 + C31470) * C49358 +
                    (C3386 * C49134 + C3385 * C31305 +
                     (C113 * C286 + C49030 * C294) * C31302 +
                     (C113 * C276 + C49030 * C287) * C31304) *
                        C49365) *
                       C49019 * C617 +
                   (((C113 * C620 + C49030 * C625) * C31304 +
                     (C113 * C626 + C49030 * C635) * C31302 +
                     (C113 * C1519 + C49030 * C1526) * C31305 +
                     (C113 * C1525 + C49030 * C1531) * C49134) *
                        C49365 +
                    ((C113 * C621 + C49030 * C627) * C31304 +
                     (C113 * C628 + C49030 * C636) * C31302 +
                     (C113 * C1518 + C49030 * C1524) * C31305 +
                     (C113 * C1523 + C49030 * C1530) * C49134) *
                        C49358 +
                    ((C113 * C622 + C49030 * C629) * C31304 +
                     (C113 * C630 + C49030 * C637) * C31302 +
                     (C113 * C1517 + C49030 * C1522) * C31305 +
                     (C113 * C1521 + C49030 * C1529) * C49134) *
                        C49345 +
                    ((C113 * C623 + C49030 * C631) * C31304 +
                     (C113 * C632 + C49030 * C638) * C31302 +
                     (C113 * C1520 + C49030 * C1527) * C31305 +
                     (C113 * C1528 + C49030 * C1532) * C49134) *
                        C49328) *
                       C49019 * C618) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C49030 * C122) * C34058 +
                     (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                     C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                     C3808 * C34061 + C3807 * C49340) *
                        C23721 +
                    (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                     C34069 + C34070) *
                        C48945) *
                       C49019 * C616 -
                   ((C34209 + C34210 + C34211 + C34212 + C34213 + C34214 +
                     C34215 + C34216) *
                        C48945 +
                    (C18293 * C49340 + C18292 * C34061 + C3388 * C49355 +
                     C3387 * C34060 + C3386 * C49364 + C3385 * C34059 +
                     (C113 * C286 + C49030 * C294) * C49367 +
                     (C113 * C276 + C49030 * C287) * C34058) *
                        C23721) *
                       C49019 * C617 +
                   (((C113 * C620 + C49030 * C625) * C34058 +
                     (C113 * C626 + C49030 * C635) * C49367 +
                     (C113 * C1519 + C49030 * C1526) * C34059 +
                     (C113 * C1525 + C49030 * C1531) * C49364 +
                     (C113 * C2398 + C49030 * C2404) * C34060 +
                     (C113 * C2406 + C49030 * C2416) * C49355 +
                     (C113 * C10326 + C49030 * C10329) * C34061 +
                     (C113 * C10328 + C49030 * C10332) * C49340) *
                        C23721 +
                    ((C113 * C621 + C49030 * C627) * C34058 +
                     (C113 * C628 + C49030 * C636) * C49367 +
                     (C113 * C1518 + C49030 * C1524) * C34059 +
                     (C113 * C1523 + C49030 * C1530) * C49364 +
                     (C113 * C2400 + C49030 * C2408) * C34060 +
                     (C113 * C2410 + C49030 * C2418) * C49355 +
                     (C113 * C10327 + C49030 * C10330) * C34061 +
                     (C113 * C10331 + C49030 * C10333) * C49340) *
                        C48945) *
                       C49019 * C618) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[158] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C410 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C550 +
                   ((((C17358 + C17359 + C17360) * C31304 +
                      (C17361 + C17362 + C17363) * C31302 +
                      (C17364 + C17365 + C17366) * C31305 +
                      (C17367 + C17368 + C17369) * C49134) *
                         C23721 +
                     ((C32686 + C32685 + C32684) * C31304 +
                      (C32683 + C32682 + C32681) * C31302 +
                      (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 +
                       C49347 * C2408 + C1111 * C10176 + C49324 * C10177) *
                          C31305 +
                      (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 +
                       C49347 * C2418 + C1111 * C10178 + C49324 * C10179) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C410) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C410 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C550 +
                   (((C3385 * C31304 + C3386 * C31302 + C3387 * C31305 +
                      C3388 * C49134) *
                         C49365 +
                     (C2756 * C31304 + C2755 * C31302 + C2754 * C31305 +
                      C2753 * C49134) *
                         C49358 +
                     (C2752 * C31304 + C2751 * C31302 + C2750 * C31305 +
                      C2749 * C49134) *
                         C49345 +
                     (C5290 * C31304 + C5289 * C31302 +
                      (C113 * C2724 + C49030 * C2725) * C31305 +
                      (C113 * C2726 + C49030 * C2727) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C410) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C410 -
                    ((C34347 + C34348 + C34349 + C34350 + C34351 + C34352 +
                      C34353 + C34354) *
                         C48945 +
                     (C18051 * C49340 + C18050 * C34061 + C3807 * C49355 +
                      C3808 * C34060 + C2954 * C49364 + C2953 * C34059 +
                      C2952 * C49367 + C2951 * C34058) *
                         C23721) *
                        C49321) *
                       C550 +
                   (((C3385 * C34058 + C3386 * C49367 + C3387 * C34059 +
                      C3388 * C49364 + C18292 * C34060 + C18293 * C49355 +
                      C18294 * C34061 + C18295 * C49340) *
                         C23721 +
                     (C2756 * C34058 + C2755 * C49367 + C2754 * C34059 +
                      C2753 * C49364 + C20451 * C34060 + C20450 * C49355 +
                      (C113 * C17947 + C49030 * C17948) * C34061 +
                      (C113 * C17949 + C49030 * C17950) * C49340) *
                         C48945) *
                        C49321 -
                    ((C34209 + C34210 + C34211 + C34212 + C34213 + C34214 +
                      C34215 + C34216) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C34061 + C3388 * C49355 +
                      C3387 * C34060 + C3386 * C49364 + C3385 * C34059 +
                      (C113 * C286 + C49030 * C294) * C49367 +
                      (C113 * C276 + C49030 * C287) * C34058) *
                         C23721) *
                        C410) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[159] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C824 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C49002 * C552 +
                   (((C32885 * C31304 + C32886 * C31302 +
                      (C16926 + C16927 + C16928) * C31305 +
                      (C16929 + C16930 + C16931) * C49134) *
                         C23721 +
                     ((C1563 + C1562 + C1561) * C31304 +
                      (C1560 + C1559 + C1558) * C31302 +
                      (C1109 * C975 + C49359 * C982 + C1110 * C2401 +
                       C49347 * C2411 + C1111 * C2402 + C49324 * C2412) *
                          C31305 +
                      (C1109 * C983 + C49359 * C990 + C1110 * C2413 +
                       C49347 * C2419 + C1111 * C2414 + C49324 * C2420) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C824) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C824 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C49002 * C552 +
                   (((C31612 + C31611 + C31610 + C31609) * C49365 +
                     (C31608 + C31607 + C31606 + C31605) * C49358 +
                     (C31604 + C31603 + C31602 + C31601) * C49345 +
                     (C454 * C31304 + C453 * C31302 +
                      (C113 * C977 + C49030 * C986) * C31305 +
                      (C113 * C987 + C49030 * C992) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C824) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C824 -
                    ((C34347 + C34348 + C34349 + C34350 + C34351 + C34352 +
                      C34353 + C34354) *
                         C48945 +
                     (C18051 * C49340 + C18050 * C34061 + C3807 * C49355 +
                      C3808 * C34060 + C2954 * C49364 + C2953 * C34059 +
                      C2952 * C49367 + C2951 * C34058) *
                         C23721) *
                        C49321) *
                       C49002 * C552 +
                   (((C34354 + C34353 + C34352 + C34351 + C34350 + C34349 +
                      C34348 + C34347) *
                         C23721 +
                     (C458 * C34058 + C457 * C49367 + C2565 * C34059 +
                      C2566 * C49364 + C2956 * C34060 + C2955 * C49355 +
                      (C113 * C3792 + C49030 * C3797) * C34061 +
                      (C113 * C3798 + C49030 * C3801) * C49340) *
                         C48945) *
                        C49321 -
                    ((C34071 + C34072 + C34073 + C34074 + C34075 + C34076 +
                      C34077 + C34078) *
                         C48945 +
                     (C34070 + C34069 + C34068 + C34067 + C34066 + C34065 +
                      C34064 + C34063) *
                         C23721) *
                        C824) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[160] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C824 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C268 +
                   ((((C17358 + C17359 + C17360) * C31304 +
                      (C17361 + C17362 + C17363) * C31302 +
                      (C17364 + C17365 + C17366) * C31305 +
                      (C17367 + C17368 + C17369) * C49134) *
                         C23721 +
                     ((C32686 + C32685 + C32684) * C31304 +
                      (C32683 + C32682 + C32681) * C31302 +
                      (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 +
                       C49347 * C2408 + C1111 * C10176 + C49324 * C10177) *
                          C31305 +
                      (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 +
                       C49347 * C2418 + C1111 * C10178 + C49324 * C10179) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C824) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C824 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C268 +
                   (((C3385 * C31304 + C3386 * C31302 + C3387 * C31305 +
                      C3388 * C49134) *
                         C49365 +
                     (C2756 * C31304 + C2755 * C31302 + C2754 * C31305 +
                      C2753 * C49134) *
                         C49358 +
                     (C2752 * C31304 + C2751 * C31302 + C2750 * C31305 +
                      C2749 * C49134) *
                         C49345 +
                     (C5290 * C31304 + C5289 * C31302 +
                      (C113 * C2724 + C49030 * C2725) * C31305 +
                      (C113 * C2726 + C49030 * C2727) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C824) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C34058 +
                      (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
                      C2952 * C49364 + C2953 * C34060 + C2954 * C49355 +
                      C3808 * C34061 + C3807 * C49340) *
                         C23721 +
                     (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 +
                      C34069 + C34070) *
                         C48945) *
                        C824 -
                    ((C34347 + C34348 + C34349 + C34350 + C34351 + C34352 +
                      C34353 + C34354) *
                         C48945 +
                     (C18051 * C49340 + C18050 * C34061 + C3807 * C49355 +
                      C3808 * C34060 + C2954 * C49364 + C2953 * C34059 +
                      C2952 * C49367 + C2951 * C34058) *
                         C23721) *
                        C49321) *
                       C268 +
                   (((C3385 * C34058 + C3386 * C49367 + C3387 * C34059 +
                      C3388 * C49364 + C18292 * C34060 + C18293 * C49355 +
                      C18294 * C34061 + C18295 * C49340) *
                         C23721 +
                     (C2756 * C34058 + C2755 * C49367 + C2754 * C34059 +
                      C2753 * C49364 + C20451 * C34060 + C20450 * C49355 +
                      (C113 * C17947 + C49030 * C17948) * C34061 +
                      (C113 * C17949 + C49030 * C17950) * C49340) *
                         C48945) *
                        C49321 -
                    ((C34209 + C34210 + C34211 + C34212 + C34213 + C34214 +
                      C34215 + C34216) *
                         C48945 +
                     (C18293 * C49340 + C18292 * C34061 + C3388 * C49355 +
                      C3387 * C34060 + C3386 * C49364 + C3385 * C34059 +
                      (C113 * C286 + C49030 * C294) * C49367 +
                      (C113 * C276 + C49030 * C287) * C34058) *
                         C23721) *
                        C824) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C31304 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C31302 +
            (C16914 + C16915 + C16916) * C31305 +
            (C16917 + C16918 + C16919) * C49134) *
               C23721 +
           ((C1149 + C1150 + C1151) * C31304 +
            (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
            C32886 * C49134) *
               C48945) *
              C970 -
          (((C16931 + C16930 + C16929) * C49134 +
            (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
            C32888 * C31304) *
               C48945 +
           ((C16925 + C16924 + C16923) * C49134 +
            (C16922 + C16921 + C16920) * C31305 +
            (C16919 + C16918 + C16917) * C31302 +
            (C16916 + C16915 + C16914) * C31304) *
               C23721) *
              C971 +
          ((C17786 * C31304 + C17787 * C31302 +
            (C17793 + C17792 + C17791) * C31305 +
            (C17790 + C17789 + C17788) * C49134) *
               C23721 +
           ((C16926 + C16927 + C16928) * C31304 +
            (C16929 + C16930 + C16931) * C31302 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C31305 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49134) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C31304 +
            (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
            C2952 * C49134) *
               C49365 +
           (C31307 + C31308 + C31309 + C31310) * C49358 + C31327 * C49345 +
           C31328 * C49328) *
              C970 -
          ((C31601 + C31602 + C31603 + C31604) * C49328 +
           (C31605 + C31606 + C31607 + C31608) * C49345 +
           (C31609 + C31610 + C31611 + C31612) * C49358 +
           (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 + C2951 * C31304) *
               C49365) *
              C971 +
          ((C2953 * C31304 + C2954 * C31302 + C3808 * C31305 + C3807 * C49134) *
               C49365 +
           (C2562 * C31304 + C2563 * C31302 + C2958 * C31305 + C2957 * C49134) *
               C49358 +
           (C2565 * C31304 + C2566 * C31302 + C2956 * C31305 + C2955 * C49134) *
               C49345 +
           (C2568 * C31304 + C2567 * C31302 +
            (C113 * C2913 + C49030 * C2920) * C31305 +
            (C113 * C2921 + C49030 * C2925) * C49134) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C34058 +
            (C113 * C123 + C49030 * C136) * C49367 + C2951 * C34059 +
            C2952 * C49364 + C2953 * C34060 + C2954 * C49355 + C3808 * C34061 +
            C3807 * C49340) *
               C23721 +
           (C34063 + C34064 + C34065 + C34066 + C34067 + C34068 + C34069 +
            C34070) *
               C48945) *
              C970 -
          ((C34347 + C34348 + C34349 + C34350 + C34351 + C34352 + C34353 +
            C34354) *
               C48945 +
           (C18051 * C49340 + C18050 * C34061 + C3807 * C49355 +
            C3808 * C34060 + C2954 * C49364 + C2953 * C34059 + C2952 * C49367 +
            C2951 * C34058) *
               C23721) *
              C971 +
          ((C2953 * C34058 + C2954 * C49367 + C3808 * C34059 + C3807 * C49364 +
            C18050 * C34060 + C18051 * C49355 + C18531 * C34061 +
            C18530 * C49340) *
               C23721 +
           (C2562 * C34058 + C2563 * C49367 + C2958 * C34059 + C2957 * C49364 +
            C18052 * C34060 + C18053 * C49355 +
            (C113 * C18034 + C49030 * C18037) * C34061 +
            (C113 * C18038 + C49030 * C18040) * C49340) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C48044 +
            (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
            C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
               C48940 +
           (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
           C36818 * C26646) *
              C49019 * C49002 * C110 -
          ((C36808 + C36809 + C36810 + C36811 + C36812 + C36813) * C26646 +
           (C36807 + C36806 + C36805 + C36804 + C36803 + C36802) * C48948 +
           (C36801 + C36800 + C36799 + C36798 + C36797 + C36796) * C48940) *
              C49019 * C49002 * C111 +
          (C36818 * C48940 +
           (C36813 + C36812 + C36811 + C36810 + C36809 + C36808) * C48948 +
           (C170 * C48044 + C171 * C49130 + C454 * C48036 + C453 * C49137 +
            (C113 * C977 + C49030 * C986) * C48050 +
            (C113 * C987 + C49030 * C992) * C36791) *
               C26646) *
              C49019 * C49002 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C49019 * C268 -
           ((C36965 + C36966 + C36967 + C36968 + C36969 + C36970) * C26646 +
            (C36971 + C36972 + C36973 + C36974 + C36975 + C36976) * C48948 +
            (C3388 * C36791 + C3387 * C48050 + C3386 * C49137 + C3385 * C48036 +
             (C113 * C286 + C49030 * C294) * C49130 +
             (C113 * C276 + C49030 * C287) * C48044) *
                C48940) *
               C49019 * C49319) *
              C270 +
          (((C36976 + C36975 + C36974 + C36973 + C36972 + C36971) * C48940 +
            (C36970 + C36969 + C36968 + C36967 + C36966 + C36965) * C48948 +
            (C316 * C48044 + C315 * C49130 + C5290 * C48036 + C5289 * C49137 +
             (C113 * C2724 + C49030 * C2725) * C48050 +
             (C113 * C2726 + C49030 * C2727) * C36791) *
                C26646) *
               C49019 * C49319 -
           ((C36808 + C36809 + C36810 + C36811 + C36812 + C36813) * C26646 +
            (C36807 + C36806 + C36805 + C36804 + C36803 + C36802) * C48948 +
            (C36801 + C36800 + C36799 + C36798 + C36797 + C36796) * C48940) *
               C49019 * C268) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C410 -
           ((C37123 + C37124 + C37125 + C37126 + C37127 + C37128) * C26646 +
            (C37129 + C37130 + C37131 + C37132 + C37133 + C37134) * C48948 +
            (C3807 * C36791 + C3808 * C48050 + C2954 * C49137 + C2953 * C48036 +
             C2952 * C49130 + C2951 * C48044) *
                C48940) *
               C49321) *
              C49002 * C270 +
          (((C37134 + C37133 + C37132 + C37131 + C37130 + C37129) * C48940 +
            (C37128 + C37127 + C37126 + C37125 + C37124 + C37123) * C48948 +
            (C456 * C48044 + C455 * C49130 + C2568 * C48036 + C2567 * C49137 +
             (C113 * C2913 + C49030 * C2920) * C48050 +
             (C113 * C2921 + C49030 * C2925) * C36791) *
                C26646) *
               C49321 -
           ((C36808 + C36809 + C36810 + C36811 + C36812 + C36813) * C26646 +
            (C36807 + C36806 + C36805 + C36804 + C36803 + C36802) * C48948 +
            (C36801 + C36800 + C36799 + C36798 + C36797 + C36796) * C48940) *
               C410) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C49019 * C550 -
           ((C36965 + C36966 + C36967 + C36968 + C36969 + C36970) * C26646 +
            (C36971 + C36972 + C36973 + C36974 + C36975 + C36976) * C48948 +
            (C3388 * C36791 + C3387 * C48050 + C3386 * C49137 + C3385 * C48036 +
             (C113 * C286 + C49030 * C294) * C49130 +
             (C113 * C276 + C49030 * C287) * C48044) *
                C48940) *
               C49019 * C49319) *
              C552 +
          (((C36976 + C36975 + C36974 + C36973 + C36972 + C36971) * C48940 +
            (C36970 + C36969 + C36968 + C36967 + C36966 + C36965) * C48948 +
            (C316 * C48044 + C315 * C49130 + C5290 * C48036 + C5289 * C49137 +
             (C113 * C2724 + C49030 * C2725) * C48050 +
             (C113 * C2726 + C49030 * C2727) * C36791) *
                C26646) *
               C49019 * C49319 -
           ((C36808 + C36809 + C36810 + C36811 + C36812 + C36813) * C26646 +
            (C36807 + C36806 + C36805 + C36804 + C36803 + C36802) * C48948 +
            (C36801 + C36800 + C36799 + C36798 + C36797 + C36796) * C48940) *
               C49019 * C550) *
              C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C48044 +
            (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
            C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
               C48940 +
           (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
           C36818 * C26646) *
              C49019 * C616 -
          ((C36965 + C36966 + C36967 + C36968 + C36969 + C36970) * C26646 +
           (C36971 + C36972 + C36973 + C36974 + C36975 + C36976) * C48948 +
           (C3388 * C36791 + C3387 * C48050 + C3386 * C49137 + C3385 * C48036 +
            (C113 * C286 + C49030 * C294) * C49130 +
            (C113 * C276 + C49030 * C287) * C48044) *
               C48940) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C48044 +
            (C113 * C626 + C49030 * C635) * C49130 +
            (C113 * C1519 + C49030 * C1526) * C48036 +
            (C113 * C1525 + C49030 * C1531) * C49137 +
            (C113 * C2398 + C49030 * C2404) * C48050 +
            (C113 * C2406 + C49030 * C2416) * C36791) *
               C48940 +
           ((C113 * C621 + C49030 * C627) * C48044 +
            (C113 * C628 + C49030 * C636) * C49130 +
            (C113 * C1518 + C49030 * C1524) * C48036 +
            (C113 * C1523 + C49030 * C1530) * C49137 +
            (C113 * C2400 + C49030 * C2408) * C48050 +
            (C113 * C2410 + C49030 * C2418) * C36791) *
               C48948 +
           ((C113 * C622 + C49030 * C629) * C48044 +
            (C113 * C630 + C49030 * C637) * C49130 +
            (C113 * C1517 + C49030 * C1522) * C48036 +
            (C113 * C1521 + C49030 * C1529) * C49137 +
            (C113 * C2402 + C49030 * C2412) * C48050 +
            (C113 * C2414 + C49030 * C2420) * C36791) *
               C26646) *
              C49019 * C618) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C410 -
           ((C37123 + C37124 + C37125 + C37126 + C37127 + C37128) * C26646 +
            (C37129 + C37130 + C37131 + C37132 + C37133 + C37134) * C48948 +
            (C3807 * C36791 + C3808 * C48050 + C2954 * C49137 + C2953 * C48036 +
             C2952 * C49130 + C2951 * C48044) *
                C48940) *
               C49321) *
              C550 +
          (((C3385 * C48044 + C3386 * C49130 + C3387 * C48036 + C3388 * C49137 +
             C18292 * C48050 + C18293 * C36791) *
                C48940 +
            (C2756 * C48044 + C2755 * C49130 + C2754 * C48036 + C2753 * C49137 +
             C20451 * C48050 + C20450 * C36791) *
                C48948 +
            (C2752 * C48044 + C2751 * C49130 + C2750 * C48036 + C2749 * C49137 +
             (C113 * C3366 + C49030 * C3371) * C48050 +
             (C113 * C3372 + C49030 * C3375) * C36791) *
                C26646) *
               C49321 -
           ((C36965 + C36966 + C36967 + C36968 + C36969 + C36970) * C26646 +
            (C36971 + C36972 + C36973 + C36974 + C36975 + C36976) * C48948 +
            (C3388 * C36791 + C3387 * C48050 + C3386 * C49137 + C3385 * C48036 +
             (C113 * C286 + C49030 * C294) * C49130 +
             (C113 * C276 + C49030 * C287) * C48044) *
                C48940) *
               C410) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C824 -
           ((C37123 + C37124 + C37125 + C37126 + C37127 + C37128) * C26646 +
            (C37129 + C37130 + C37131 + C37132 + C37133 + C37134) * C48948 +
            (C3807 * C36791 + C3808 * C48050 + C2954 * C49137 + C2953 * C48036 +
             C2952 * C49130 + C2951 * C48044) *
                C48940) *
               C49321) *
              C49002 * C552 +
          (((C37134 + C37133 + C37132 + C37131 + C37130 + C37129) * C48940 +
            (C37128 + C37127 + C37126 + C37125 + C37124 + C37123) * C48948 +
            (C456 * C48044 + C455 * C49130 + C2568 * C48036 + C2567 * C49137 +
             (C113 * C2913 + C49030 * C2920) * C48050 +
             (C113 * C2921 + C49030 * C2925) * C36791) *
                C26646) *
               C49321 -
           ((C36808 + C36809 + C36810 + C36811 + C36812 + C36813) * C26646 +
            (C36807 + C36806 + C36805 + C36804 + C36803 + C36802) * C48948 +
            (C36801 + C36800 + C36799 + C36798 + C36797 + C36796) * C48940) *
               C824) *
              C49002 * C49317)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C48044 +
             (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
             C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
                C48940 +
            (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
            C36818 * C26646) *
               C824 -
           ((C37123 + C37124 + C37125 + C37126 + C37127 + C37128) * C26646 +
            (C37129 + C37130 + C37131 + C37132 + C37133 + C37134) * C48948 +
            (C3807 * C36791 + C3808 * C48050 + C2954 * C49137 + C2953 * C48036 +
             C2952 * C49130 + C2951 * C48044) *
                C48940) *
               C49321) *
              C268 +
          (((C3385 * C48044 + C3386 * C49130 + C3387 * C48036 + C3388 * C49137 +
             C18292 * C48050 + C18293 * C36791) *
                C48940 +
            (C2756 * C48044 + C2755 * C49130 + C2754 * C48036 + C2753 * C49137 +
             C20451 * C48050 + C20450 * C36791) *
                C48948 +
            (C2752 * C48044 + C2751 * C49130 + C2750 * C48036 + C2749 * C49137 +
             (C113 * C3366 + C49030 * C3371) * C48050 +
             (C113 * C3372 + C49030 * C3375) * C36791) *
                C26646) *
               C49321 -
           ((C36965 + C36966 + C36967 + C36968 + C36969 + C36970) * C26646 +
            (C36971 + C36972 + C36973 + C36974 + C36975 + C36976) * C48948 +
            (C3388 * C36791 + C3387 * C48050 + C3386 * C49137 + C3385 * C48036 +
             (C113 * C286 + C49030 * C294) * C49130 +
             (C113 * C276 + C49030 * C287) * C48044) *
                C48940) *
               C824) *
              C49319) *
         C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C48044 +
            (C113 * C123 + C49030 * C136) * C49130 + C2951 * C48036 +
            C2952 * C49137 + C2953 * C48050 + C2954 * C36791) *
               C48940 +
           (C36796 + C36797 + C36798 + C36799 + C36800 + C36801) * C48948 +
           C36818 * C26646) *
              C970 -
          ((C37123 + C37124 + C37125 + C37126 + C37127 + C37128) * C26646 +
           (C37129 + C37130 + C37131 + C37132 + C37133 + C37134) * C48948 +
           (C3807 * C36791 + C3808 * C48050 + C2954 * C49137 + C2953 * C48036 +
            C2952 * C49130 + C2951 * C48044) *
               C48940) *
              C971 +
          ((C2953 * C48044 + C2954 * C49130 + C3808 * C48036 + C3807 * C49137 +
            C18050 * C48050 + C18051 * C36791) *
               C48940 +
           (C2562 * C48044 + C2563 * C49130 + C2958 * C48036 + C2957 * C49137 +
            C18052 * C48050 + C18053 * C36791) *
               C48948 +
           (C2565 * C48044 + C2566 * C49130 + C2956 * C48036 + C2955 * C49137 +
            (C113 * C3792 + C49030 * C3797) * C48050 +
            (C113 * C3798 + C49030 * C3801) * C36791) *
               C26646) *
              C972) *
         C49002 * C48968) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C31304 +
            (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
            C2952 * C49134) *
               C49365 +
           (C31307 + C31308 + C31309 + C31310) * C49358 + C31327 * C49345 +
           C31328 * C49328) *
              C49019 * C49002 * C110 -
          ((C31319 + C31320 + C31321 + C31322) * C49328 +
           (C31318 + C31317 + C31316 + C31315) * C49345 +
           (C31314 + C31313 + C31312 + C31311) * C49358 +
           (C31310 + C31309 + C31308 + C31307) * C49365) *
              C49019 * C49002 * C111 +
          (C31327 * C49365 + C31328 * C49358 +
           (C31322 + C31321 + C31320 + C31319) * C49345 +
           (C173 * C31304 + C172 * C31302 +
            (C113 * C417 + C49030 * C428) * C31305 +
            (C113 * C429 + C49030 * C435) * C49134) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C31304 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C31302 +
            (C16914 + C16915 + C16916) * C31305 +
            (C16917 + C16918 + C16919) * C49134) *
               C23721 +
           ((C1149 + C1150 + C1151) * C31304 +
            (C1152 + C1153 + C1154) * C31302 +
            (C1569 + C1568 + C1567) * C31305 +
            (C1566 + C1565 + C1564) * C49134) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C1558 + C1559 + C1560) * C49134 +
            (C1561 + C1562 + C1563) * C31305 +
            (C1160 + C1159 + C1158) * C31302 +
            (C1157 + C1156 + C1155) * C31304) *
               C48945 +
           ((C1564 + C1565 + C1566) * C49134 +
            (C1567 + C1568 + C1569) * C31305 +
            (C1154 + C1153 + C1152) * C31302 +
            (C1151 + C1150 + C1149) * C31304) *
               C23721) *
              C49019 * C49002 * C111 +
          ((C1169 * C31304 + C1170 * C31302 + (C1563 + C1562 + C1561) * C31305 +
            (C1560 + C1559 + C1558) * C49134) *
               C23721 +
           ((C1166 + C1165 + C1164) * C31304 +
            (C1163 + C1162 + C1161) * C31302 +
            (C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
             C1111 * C1520 + C49324 * C1527) *
                C31305 +
            (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
             C1111 * C1528 + C49324 * C1532) *
                C49134) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C49019 * C268 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C49019 * C49319) *
                       C270 +
                   (((C31470 + C31469 + C31468 + C31467) * C49365 +
                     (C31466 + C31465 + C31464 + C31463) * C49358 +
                     (C31462 + C31461 + C31460 + C31459) * C49345 +
                     (C314 * C31304 + C313 * C31302 +
                      (C113 * C726 + C49030 * C735) * C31305 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 +
                      (C1569 + C1568 + C1567) * C31305 +
                      (C1566 + C1565 + C1564) * C49134) *
                         C48945) *
                        C49019 * C268 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C49019 * C49319) *
                       C270 +
                   ((((C1371 + C1370 + C1369) * C31304 +
                      (C1368 + C1367 + C1366) * C31302 +
                      (C32686 + C32685 + C32684) * C31305 +
                      (C32683 + C32682 + C32681) * C49134) *
                         C23721 +
                     ((C1365 + C1364 + C1363) * C31304 +
                      (C1362 + C1361 + C1360) * C31302 +
                      (C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                       C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                          C31305 +
                      (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                       C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     ((C1564 + C1565 + C1566) * C49134 +
                      (C1567 + C1568 + C1569) * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C410 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C49002 * C270 +
                   (((C31612 + C31611 + C31610 + C31609) * C49365 +
                     (C31608 + C31607 + C31606 + C31605) * C49358 +
                     (C31604 + C31603 + C31602 + C31601) * C49345 +
                     (C454 * C31304 + C453 * C31302 +
                      (C113 * C977 + C49030 * C986) * C31305 +
                      (C113 * C987 + C49030 * C992) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C410) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C410 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C49002 * C270 +
                   (((C32885 * C31304 + C32886 * C31302 +
                      (C16926 + C16927 + C16928) * C31305 +
                      (C16929 + C16930 + C16931) * C49134) *
                         C23721 +
                     ((C1563 + C1562 + C1561) * C31304 +
                      (C1560 + C1559 + C1558) * C31302 +
                      (C1109 * C975 + C49359 * C982 + C1110 * C2401 +
                       C49347 * C2411 + C1111 * C2402 + C49324 * C2412) *
                          C31305 +
                      (C1109 * C983 + C49359 * C990 + C1110 * C2413 +
                       C49347 * C2419 + C1111 * C2414 + C49324 * C2420) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C410) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C49019 * C550 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C49019 * C49319) *
                       C552 +
                   (((C31470 + C31469 + C31468 + C31467) * C49365 +
                     (C31466 + C31465 + C31464 + C31463) * C49358 +
                     (C31462 + C31461 + C31460 + C31459) * C49345 +
                     (C314 * C31304 + C313 * C31302 +
                      (C113 * C726 + C49030 * C735) * C31305 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C49019 * C550 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C49019 * C49319) *
                       C552 +
                   ((((C1371 + C1370 + C1369) * C31304 +
                      (C1368 + C1367 + C1366) * C31302 +
                      (C32686 + C32685 + C32684) * C31305 +
                      (C32683 + C32682 + C32681) * C49134) *
                         C23721 +
                     ((C1365 + C1364 + C1363) * C31304 +
                      (C1362 + C1361 + C1360) * C31302 +
                      (C1109 * C724 + C49359 * C731 + C1110 * C1517 +
                       C49347 * C1522 + C1111 * C1985 + C49324 * C1990) *
                          C31305 +
                      (C1109 * C732 + C49359 * C739 + C1110 * C1521 +
                       C49347 * C1529 + C1111 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C49030 * C122) * C31304 +
                     (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                     C2952 * C49134) *
                        C49365 +
                    (C31307 + C31308 + C31309 + C31310) * C49358 +
                    C31327 * C49345 + C31328 * C49328) *
                       C49019 * C616 -
                   ((C31459 + C31460 + C31461 + C31462) * C49328 +
                    (C31463 + C31464 + C31465 + C31466) * C49345 +
                    (C31467 + C31468 + C31469 + C31470) * C49358 +
                    (C3386 * C49134 + C3385 * C31305 +
                     (C113 * C286 + C49030 * C294) * C31302 +
                     (C113 * C276 + C49030 * C287) * C31304) *
                        C49365) *
                       C49019 * C617 +
                   (((C113 * C620 + C49030 * C625) * C31304 +
                     (C113 * C626 + C49030 * C635) * C31302 +
                     (C113 * C1519 + C49030 * C1526) * C31305 +
                     (C113 * C1525 + C49030 * C1531) * C49134) *
                        C49365 +
                    ((C113 * C621 + C49030 * C627) * C31304 +
                     (C113 * C628 + C49030 * C636) * C31302 +
                     (C113 * C1518 + C49030 * C1524) * C31305 +
                     (C113 * C1523 + C49030 * C1530) * C49134) *
                        C49358 +
                    ((C113 * C622 + C49030 * C629) * C31304 +
                     (C113 * C630 + C49030 * C637) * C31302 +
                     (C113 * C1517 + C49030 * C1522) * C31305 +
                     (C113 * C1521 + C49030 * C1529) * C49134) *
                        C49345 +
                    ((C113 * C623 + C49030 * C631) * C31304 +
                     (C113 * C632 + C49030 * C638) * C31302 +
                     (C113 * C1520 + C49030 * C1527) * C31305 +
                     (C113 * C1528 + C49030 * C1532) * C49134) *
                        C49328) *
                       C49019 * C618) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                      C49347 * C287 + C1111 * C620 + C49324 * C625) *
                         C31304 +
                     (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                      C49347 * C294 + C1111 * C626 + C49324 * C635) *
                         C31302 +
                     (C16914 + C16915 + C16916) * C31305 +
                     (C16917 + C16918 + C16919) * C49134) *
                        C23721 +
                    ((C1149 + C1150 + C1151) * C31304 +
                     (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                     C32886 * C49134) *
                        C48945) *
                       C49019 * C616 -
                   (((C32681 + C32682 + C32683) * C49134 +
                     (C32684 + C32685 + C32686) * C31305 +
                     (C1366 + C1367 + C1368) * C31302 +
                     (C1369 + C1370 + C1371) * C31304) *
                        C48945 +
                    ((C17363 + C17362 + C17361) * C49134 +
                     (C17360 + C17359 + C17358) * C31305 +
                     (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                      C49347 * C635 + C1109 * C286 + C49359 * C294) *
                         C31302 +
                     (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                      C49347 * C625 + C1109 * C276 + C49359 * C287) *
                         C31304) *
                        C23721) *
                       C49019 * C617 +
                   (((C1109 * C620 + C49359 * C625 + C1110 * C1321 +
                      C49347 * C1328 + C1111 * C1825 + C49324 * C1828) *
                         C31304 +
                     (C1109 * C626 + C49359 * C635 + C1110 * C1327 +
                      C49347 * C1333 + C1111 * C1829 + C49324 * C1834) *
                         C31302 +
                     (C1109 * C1519 + C49359 * C1526 + C1110 * C1983 +
                      C49347 * C1986 + C1111 * C9444 + C49324 * C9447) *
                         C31305 +
                     (C1109 * C1525 + C49359 * C1531 + C1110 * C1987 +
                      C49347 * C1992 + C1111 * C9446 + C49324 * C9450) *
                         C49134) *
                        C23721 +
                    ((C1109 * C621 + C49359 * C627 + C1110 * C1320 +
                      C49347 * C1326 + C1111 * C1826 + C49324 * C1830) *
                         C31304 +
                     (C1109 * C628 + C49359 * C636 + C1110 * C1325 +
                      C49347 * C1332 + C1111 * C1831 + C49324 * C1835) *
                         C31302 +
                     (C1109 * C1518 + C49359 * C1524 + C1110 * C1984 +
                      C49347 * C1988 + C1111 * C9445 + C49324 * C9448) *
                         C31305 +
                     (C1109 * C1523 + C49359 * C1530 + C1110 * C1989 +
                      C49347 * C1993 + C1111 * C9449 + C49324 * C9451) *
                         C49134) *
                        C48945) *
                       C49019 * C618) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C410 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C550 +
                   (((C3385 * C31304 + C3386 * C31302 + C3387 * C31305 +
                      C3388 * C49134) *
                         C49365 +
                     (C2756 * C31304 + C2755 * C31302 + C2754 * C31305 +
                      C2753 * C49134) *
                         C49358 +
                     (C2752 * C31304 + C2751 * C31302 + C2750 * C31305 +
                      C2749 * C49134) *
                         C49345 +
                     (C5290 * C31304 + C5289 * C31302 +
                      (C113 * C2724 + C49030 * C2725) * C31305 +
                      (C113 * C2726 + C49030 * C2727) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C410) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C410 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C550 +
                   ((((C17358 + C17359 + C17360) * C31304 +
                      (C17361 + C17362 + C17363) * C31302 +
                      (C17364 + C17365 + C17366) * C31305 +
                      (C17367 + C17368 + C17369) * C49134) *
                         C23721 +
                     ((C32686 + C32685 + C32684) * C31304 +
                      (C32683 + C32682 + C32681) * C31302 +
                      (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 +
                       C49347 * C2408 + C1111 * C10176 + C49324 * C10177) *
                          C31305 +
                      (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 +
                       C49347 * C2418 + C1111 * C10178 + C49324 * C10179) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C410) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[177] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C824 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C49002 * C552 +
                   (((C31612 + C31611 + C31610 + C31609) * C49365 +
                     (C31608 + C31607 + C31606 + C31605) * C49358 +
                     (C31604 + C31603 + C31602 + C31601) * C49345 +
                     (C454 * C31304 + C453 * C31302 +
                      (C113 * C977 + C49030 * C986) * C31305 +
                      (C113 * C987 + C49030 * C992) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31319 + C31320 + C31321 + C31322) * C49328 +
                     (C31318 + C31317 + C31316 + C31315) * C49345 +
                     (C31314 + C31313 + C31312 + C31311) * C49358 +
                     (C31310 + C31309 + C31308 + C31307) * C49365) *
                        C824) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C824 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C49002 * C552 +
                   (((C32885 * C31304 + C32886 * C31302 +
                      (C16926 + C16927 + C16928) * C31305 +
                      (C16929 + C16930 + C16931) * C49134) *
                         C23721 +
                     ((C1563 + C1562 + C1561) * C31304 +
                      (C1560 + C1559 + C1558) * C31302 +
                      (C1109 * C975 + C49359 * C982 + C1110 * C2401 +
                       C49347 * C2411 + C1111 * C2402 + C49324 * C2412) *
                          C31305 +
                      (C1109 * C983 + C49359 * C990 + C1110 * C2413 +
                       C49347 * C2419 + C1111 * C2414 + C49324 * C2420) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C1558 + C1559 + C1560) * C49134 +
                      (C1561 + C1562 + C1563) * C31305 +
                      (C1160 + C1159 + C1158) * C31302 +
                      (C1157 + C1156 + C1155) * C31304) *
                         C48945 +
                     (C32887 * C49134 + C32888 * C31305 +
                      (C1154 + C1153 + C1152) * C31302 +
                      (C1151 + C1150 + C1149) * C31304) *
                         C23721) *
                        C824) *
                       C49002 * C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C31304 +
                      (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
                      C2952 * C49134) *
                         C49365 +
                     (C31307 + C31308 + C31309 + C31310) * C49358 +
                     C31327 * C49345 + C31328 * C49328) *
                        C824 -
                    ((C31601 + C31602 + C31603 + C31604) * C49328 +
                     (C31605 + C31606 + C31607 + C31608) * C49345 +
                     (C31609 + C31610 + C31611 + C31612) * C49358 +
                     (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 +
                      C2951 * C31304) *
                         C49365) *
                        C49321) *
                       C268 +
                   (((C3385 * C31304 + C3386 * C31302 + C3387 * C31305 +
                      C3388 * C49134) *
                         C49365 +
                     (C2756 * C31304 + C2755 * C31302 + C2754 * C31305 +
                      C2753 * C49134) *
                         C49358 +
                     (C2752 * C31304 + C2751 * C31302 + C2750 * C31305 +
                      C2749 * C49134) *
                         C49345 +
                     (C5290 * C31304 + C5289 * C31302 +
                      (C113 * C2724 + C49030 * C2725) * C31305 +
                      (C113 * C2726 + C49030 * C2727) * C49134) *
                         C49328) *
                        C49321 -
                    ((C31459 + C31460 + C31461 + C31462) * C49328 +
                     (C31463 + C31464 + C31465 + C31466) * C49345 +
                     (C31467 + C31468 + C31469 + C31470) * C49358 +
                     (C3386 * C49134 + C3385 * C31305 +
                      (C113 * C286 + C49030 * C294) * C31302 +
                      (C113 * C276 + C49030 * C287) * C31304) *
                         C49365) *
                        C824) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C1109 * C115 + C49359 * C122 + C1110 * C276 +
                       C49347 * C287 + C1111 * C620 + C49324 * C625) *
                          C31304 +
                      (C1109 * C123 + C49359 * C136 + C1110 * C286 +
                       C49347 * C294 + C1111 * C626 + C49324 * C635) *
                          C31302 +
                      (C16914 + C16915 + C16916) * C31305 +
                      (C16917 + C16918 + C16919) * C49134) *
                         C23721 +
                     ((C1149 + C1150 + C1151) * C31304 +
                      (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
                      C32886 * C49134) *
                         C48945) *
                        C824 -
                    (((C16931 + C16930 + C16929) * C49134 +
                      (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
                      C32888 * C31304) *
                         C48945 +
                     ((C16925 + C16924 + C16923) * C49134 +
                      (C16922 + C16921 + C16920) * C31305 +
                      (C16919 + C16918 + C16917) * C31302 +
                      (C16916 + C16915 + C16914) * C31304) *
                         C23721) *
                        C49321) *
                       C268 +
                   ((((C17358 + C17359 + C17360) * C31304 +
                      (C17361 + C17362 + C17363) * C31302 +
                      (C17364 + C17365 + C17366) * C31305 +
                      (C17367 + C17368 + C17369) * C49134) *
                         C23721 +
                     ((C32686 + C32685 + C32684) * C31304 +
                      (C32683 + C32682 + C32681) * C31302 +
                      (C1109 * C2399 + C49359 * C2407 + C1110 * C2400 +
                       C49347 * C2408 + C1111 * C10176 + C49324 * C10177) *
                          C31305 +
                      (C1109 * C2409 + C49359 * C2417 + C1110 * C2410 +
                       C49347 * C2418 + C1111 * C10178 + C49324 * C10179) *
                          C49134) *
                         C48945) *
                        C49321 -
                    (((C32681 + C32682 + C32683) * C49134 +
                      (C32684 + C32685 + C32686) * C31305 +
                      (C1366 + C1367 + C1368) * C31302 +
                      (C1369 + C1370 + C1371) * C31304) *
                         C48945 +
                     ((C17363 + C17362 + C17361) * C49134 +
                      (C17360 + C17359 + C17358) * C31305 +
                      (C1111 * C1327 + C49324 * C1333 + C1110 * C626 +
                       C49347 * C635 + C1109 * C286 + C49359 * C294) *
                          C31302 +
                      (C1111 * C1321 + C49324 * C1328 + C1110 * C620 +
                       C49347 * C625 + C1109 * C276 + C49359 * C287) *
                          C31304) *
                         C23721) *
                        C824) *
                       C49319) *
                  C48968) /
                     (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C31304 +
            (C113 * C123 + C49030 * C136) * C31302 + C2951 * C31305 +
            C2952 * C49134) *
               C49365 +
           (C31307 + C31308 + C31309 + C31310) * C49358 + C31327 * C49345 +
           C31328 * C49328) *
              C970 -
          ((C31601 + C31602 + C31603 + C31604) * C49328 +
           (C31605 + C31606 + C31607 + C31608) * C49345 +
           (C31609 + C31610 + C31611 + C31612) * C49358 +
           (C2954 * C49134 + C2953 * C31305 + C2952 * C31302 + C2951 * C31304) *
               C49365) *
              C971 +
          ((C2953 * C31304 + C2954 * C31302 + C3808 * C31305 + C3807 * C49134) *
               C49365 +
           (C2562 * C31304 + C2563 * C31302 + C2958 * C31305 + C2957 * C49134) *
               C49358 +
           (C2565 * C31304 + C2566 * C31302 + C2956 * C31305 + C2955 * C49134) *
               C49345 +
           (C2568 * C31304 + C2567 * C31302 +
            (C113 * C2913 + C49030 * C2920) * C31305 +
            (C113 * C2921 + C49030 * C2925) * C49134) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C31304 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C31302 +
            (C16914 + C16915 + C16916) * C31305 +
            (C16917 + C16918 + C16919) * C49134) *
               C23721 +
           ((C1149 + C1150 + C1151) * C31304 +
            (C1152 + C1153 + C1154) * C31302 + C32885 * C31305 +
            C32886 * C49134) *
               C48945) *
              C970 -
          (((C16931 + C16930 + C16929) * C49134 +
            (C16928 + C16927 + C16926) * C31305 + C32887 * C31302 +
            C32888 * C31304) *
               C48945 +
           ((C16925 + C16924 + C16923) * C49134 +
            (C16922 + C16921 + C16920) * C31305 +
            (C16919 + C16918 + C16917) * C31302 +
            (C16916 + C16915 + C16914) * C31304) *
               C23721) *
              C971 +
          ((C17786 * C31304 + C17787 * C31302 +
            (C17793 + C17792 + C17791) * C31305 +
            (C17790 + C17789 + C17788) * C49134) *
               C23721 +
           ((C16926 + C16927 + C16928) * C31304 +
            (C16929 + C16930 + C16931) * C31302 +
            (C1109 * C2911 + C49359 * C2917 + C1110 * C3365 + C49347 * C3369 +
             C1111 * C10327 + C49324 * C10330) *
                C31305 +
            (C1109 * C2916 + C49359 * C2923 + C1110 * C3370 + C49347 * C3374 +
             C1111 * C10331 + C49324 * C10333) *
                C49134) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C49019 * C49002 * C110 -
          (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
           ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
           ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
           ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
              C49019 * C49002 * C111 +
          (C3971 * C3908 + C3972 * C3909 +
           ((C3962 + C3961) * C114 + (C3960 + C3959) * C49047) * C3910 +
           ((C3912 * C120 + C49291 * C133 + C3913 * C277 + C49092 * C288) *
                C114 +
            (C3912 * C132 + C49291 * C141 + C3913 * C289 + C49092 * C295) *
                C49047) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C11411 + C11412 + C11413 + C11414) * C49047 +
            (C11415 + C11416 + C11417 + C11418) * C114) *
               C48945 +
           ((C11410 + C11409 + C11408 + C11407) * C49047 +
            (C11406 + C11405 + C11404 + C11403) * C114) *
               C49269) *
              C49019 * C49002 * C111 +
          (((C11418 + C11417 + C11416 + C11415) * C114 +
            (C11414 + C11413 + C11412 + C11411) * C49047) *
               C49269 +
           ((C11366 * C118 + C11360 * C128 + C11367 * C273 + C11361 * C281 +
             C11368 * C623 + C11362 * C631 + C11369 * C1322 + C49334 * C1329) *
                C114 +
            (C11366 * C129 + C11360 * C139 + C11367 * C280 + C11361 * C291 +
             C11368 * C632 + C11362 * C638 + C11369 * C1330 + C49334 * C1334) *
                C49047) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C49019 * C268 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C114 + (C4136 + C4135) * C49047) * C3908 +
            ((C4134 + C4133) * C114 + (C4132 + C4131) * C49047) * C3909 +
            ((C4130 + C4129) * C114 + (C4128 + C4127) * C49047) * C3910 +
            ((C3912 * C272 + C49291 * C279 + C3913 * C624 + C49092 * C633) *
                 C114 +
             (C3912 * C278 + C49291 * C290 + C3913 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C49019 * C268 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C49019 * C49319) *
              C270 +
          ((((C11572 + C11571 + C11570 + C11569) * C114 +
             (C11568 + C11567 + C11566 + C11565) * C49047) *
                C49269 +
            ((C11366 * C274 + C11360 * C283 + C11367 * C622 + C11361 * C629 +
              C11368 * C1319 + C11362 * C1324 + C11369 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C11366 * C282 + C11360 * C292 + C11367 * C630 + C11361 * C637 +
              C11368 * C1323 + C11362 * C1331 + C11369 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C410 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C49002 * C270 +
          ((((C4304 + C4303) * C114 + (C4302 + C4301) * C49047) * C3908 +
            ((C4300 + C4299) * C114 + (C4298 + C4297) * C49047) * C3909 +
            ((C4296 + C4295) * C114 + (C4294 + C4293) * C49047) * C3910 +
            ((C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                 C114 +
             (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C410 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C49002 * C270 +
          ((((C11726 + C11725 + C11724 + C11723) * C114 +
             (C11722 + C11721 + C11720 + C11719) * C49047) *
                C49269 +
            ((C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
              C11368 * C1517 + C11362 * C1522 + C11369 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
              C11368 * C1521 + C11362 * C1529 + C11369 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C49019 * C550 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C114 + (C4136 + C4135) * C49047) * C3908 +
            ((C4134 + C4133) * C114 + (C4132 + C4131) * C49047) * C3909 +
            ((C4130 + C4129) * C114 + (C4128 + C4127) * C49047) * C3910 +
            ((C3912 * C272 + C49291 * C279 + C3913 * C624 + C49092 * C633) *
                 C114 +
             (C3912 * C278 + C49291 * C290 + C3913 * C634 + C49092 * C639) *
                 C49047) *
                C49328) *
               C49019 * C49319 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C49019 * C550 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C49019 * C49319) *
              C552 +
          ((((C11572 + C11571 + C11570 + C11569) * C114 +
             (C11568 + C11567 + C11566 + C11565) * C49047) *
                C49269 +
            ((C11366 * C274 + C11360 * C283 + C11367 * C622 + C11361 * C629 +
              C11368 * C1319 + C11362 * C1324 + C11369 * C1827 +
              C49334 * C1832) *
                 C114 +
             (C11366 * C282 + C11360 * C292 + C11367 * C630 + C11361 * C637 +
              C11368 * C1323 + C11362 * C1331 + C11369 * C1833 +
              C49334 * C1836) *
                 C49047) *
                C48945) *
               C49019 * C49319 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C49019 * C616 -
          (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
           ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
           ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
           ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C49047 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C114) *
               C3908) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C114 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C49047) *
               C3908 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C114 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C49047) *
               C3909 +
           ((C3912 * C622 + C49291 * C629 + C3913 * C1319 + C49092 * C1324) *
                C114 +
            (C3912 * C630 + C49291 * C637 + C3913 * C1323 + C49092 * C1331) *
                C49047) *
               C3910 +
           ((C3912 * C623 + C49291 * C631 + C3913 * C1322 + C49092 * C1329) *
                C114 +
            (C3912 * C632 + C49291 * C638 + C3913 * C1330 + C49092 * C1334) *
                C49047) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C49019 * C616 -
          (((C11565 + C11566 + C11567 + C11568) * C49047 +
            (C11569 + C11570 + C11571 + C11572) * C114) *
               C48945 +
           ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49047 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C114) *
               C49269) *
              C49019 * C617 +
          (((C11366 * C620 + C11360 * C625 + C11367 * C1321 + C11361 * C1328 +
             C11368 * C1825 + C11362 * C1828 + C11369 * C9354 +
             C49334 * C9357) *
                C114 +
            (C11366 * C626 + C11360 * C635 + C11367 * C1327 + C11361 * C1333 +
             C11368 * C1829 + C11362 * C1834 + C11369 * C9356 +
             C49334 * C9360) *
                C49047) *
               C49269 +
           ((C11366 * C621 + C11360 * C627 + C11367 * C1320 + C11361 * C1326 +
             C11368 * C1826 + C11362 * C1830 + C11369 * C9355 +
             C49334 * C9358) *
                C114 +
            (C11366 * C628 + C11360 * C636 + C11367 * C1325 + C11361 * C1332 +
             C11368 * C1831 + C11362 * C1835 + C11369 * C9359 +
             C49334 * C9361) *
                C49047) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C410 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C550 +
          ((((C3912 * C722 + C49291 * C727 + C3913 * C1519 + C49092 * C1526) *
                 C114 +
             (C3912 * C728 + C49291 * C737 + C3913 * C1525 + C49092 * C1531) *
                 C49047) *
                C3908 +
            ((C3912 * C723 + C49291 * C729 + C3913 * C1518 + C49092 * C1524) *
                 C114 +
             (C3912 * C730 + C49291 * C738 + C3913 * C1523 + C49092 * C1530) *
                 C49047) *
                C3909 +
            ((C3912 * C724 + C49291 * C731 + C3913 * C1517 + C49092 * C1522) *
                 C114 +
             (C3912 * C732 + C49291 * C739 + C3913 * C1521 + C49092 * C1529) *
                 C49047) *
                C3910 +
            ((C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C114 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C410 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C550 +
          ((((C11366 * C722 + C11360 * C727 + C11367 * C1519 + C11361 * C1526 +
              C11368 * C1983 + C11362 * C1986 + C11369 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C11366 * C728 + C11360 * C737 + C11367 * C1525 + C11361 * C1531 +
              C11368 * C1987 + C11362 * C1992 + C11369 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C49269 +
            ((C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
              C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
              C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C824 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C49002 * C552 +
          ((((C4304 + C4303) * C114 + (C4302 + C4301) * C49047) * C3908 +
            ((C4300 + C4299) * C114 + (C4298 + C4297) * C49047) * C3909 +
            ((C4296 + C4295) * C114 + (C4294 + C4293) * C49047) * C3910 +
            ((C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                 C114 +
             (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                 C49047) *
                C49328) *
               C49321 -
           (((C3959 + C3960) * C49047 + (C3961 + C3962) * C114) * C49328 +
            ((C3958 + C3957) * C49047 + (C3956 + C3955) * C114) * C3910 +
            ((C3954 + C3953) * C49047 + (C3952 + C3951) * C114) * C3909 +
            ((C3950 + C3949) * C49047 + (C3948 + C3947) * C114) * C3908) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C824 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C49002 * C552 +
          ((((C11726 + C11725 + C11724 + C11723) * C114 +
             (C11722 + C11721 + C11720 + C11719) * C49047) *
                C49269 +
            ((C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
              C11368 * C1517 + C11362 * C1522 + C11369 * C1985 +
              C49334 * C1990) *
                 C114 +
             (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
              C11368 * C1521 + C11362 * C1529 + C11369 * C1991 +
              C49334 * C1994) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11411 + C11412 + C11413 + C11414) * C49047 +
             (C11415 + C11416 + C11417 + C11418) * C114) *
                C48945 +
            ((C11410 + C11409 + C11408 + C11407) * C49047 +
             (C11406 + C11405 + C11404 + C11403) * C114) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C114 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49047) *
                C3908 +
            ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
            C3971 * C3910 + C3972 * C49328) *
               C824 -
           (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
            ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
            ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
            ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                 C49047 +
             (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                 C114) *
                C3908) *
               C49321) *
              C268 +
          ((((C3912 * C722 + C49291 * C727 + C3913 * C1519 + C49092 * C1526) *
                 C114 +
             (C3912 * C728 + C49291 * C737 + C3913 * C1525 + C49092 * C1531) *
                 C49047) *
                C3908 +
            ((C3912 * C723 + C49291 * C729 + C3913 * C1518 + C49092 * C1524) *
                 C114 +
             (C3912 * C730 + C49291 * C738 + C3913 * C1523 + C49092 * C1530) *
                 C49047) *
                C3909 +
            ((C3912 * C724 + C49291 * C731 + C3913 * C1517 + C49092 * C1522) *
                 C114 +
             (C3912 * C732 + C49291 * C739 + C3913 * C1521 + C49092 * C1529) *
                 C49047) *
                C3910 +
            ((C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C114 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49047) *
                C49328) *
               C49321 -
           (((C4127 + C4128) * C49047 + (C4129 + C4130) * C114) * C49328 +
            ((C4131 + C4132) * C49047 + (C4133 + C4134) * C114) * C3910 +
            ((C4135 + C4136) * C49047 + (C4137 + C4138) * C114) * C3909 +
            ((C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49047 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C114) *
                C3908) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
              C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                 C114 +
             (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
              C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                 C49047) *
                C49269 +
            ((C11403 + C11404 + C11405 + C11406) * C114 +
             (C11407 + C11408 + C11409 + C11410) * C49047) *
                C48945) *
               C824 -
           (((C11719 + C11720 + C11721 + C11722) * C49047 +
             (C11723 + C11724 + C11725 + C11726) * C114) *
                C48945 +
            ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 +
              C11362 * C1531 + C11367 * C728 + C11361 * C737 + C11366 * C426 +
              C11360 * C434) *
                 C49047 +
             (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 +
              C11362 * C1526 + C11367 * C722 + C11361 * C727 + C11366 * C416 +
              C11360 * C427) *
                 C114) *
                C49269) *
               C49321) *
              C268 +
          ((((C11366 * C722 + C11360 * C727 + C11367 * C1519 + C11361 * C1526 +
              C11368 * C1983 + C11362 * C1986 + C11369 * C9444 +
              C49334 * C9447) *
                 C114 +
             (C11366 * C728 + C11360 * C737 + C11367 * C1525 + C11361 * C1531 +
              C11368 * C1987 + C11362 * C1992 + C11369 * C9446 +
              C49334 * C9450) *
                 C49047) *
                C49269 +
            ((C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
              C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
              C49334 * C9448) *
                 C114 +
             (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
              C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
              C49334 * C9451) *
                 C49047) *
                C48945) *
               C49321 -
           (((C11565 + C11566 + C11567 + C11568) * C49047 +
             (C11569 + C11570 + C11571 + C11572) * C114) *
                C48945 +
            ((C11369 * C1829 + C49334 * C1834 + C11368 * C1327 +
              C11362 * C1333 + C11367 * C626 + C11361 * C635 + C11366 * C286 +
              C11360 * C294) *
                 C49047 +
             (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 +
              C11362 * C1328 + C11367 * C620 + C11361 * C625 + C11366 * C276 +
              C11360 * C287) *
                 C114) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C114 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49047) *
               C3908 +
           ((C3947 + C3948) * C114 + (C3949 + C3950) * C49047) * C3909 +
           C3971 * C3910 + C3972 * C49328) *
              C970 -
          (((C4293 + C4294) * C49047 + (C4295 + C4296) * C114) * C49328 +
           ((C4297 + C4298) * C49047 + (C4299 + C4300) * C114) * C3910 +
           ((C4301 + C4302) * C49047 + (C4303 + C4304) * C114) * C3909 +
           ((C3913 * C728 + C49092 * C737 + C3912 * C426 + C49291 * C434) *
                C49047 +
            (C3913 * C722 + C49092 * C727 + C3912 * C416 + C49291 * C427) *
                C114) *
               C3908) *
              C971 +
          (((C3912 * C973 + C49291 * C978 + C3913 * C2397 + C49092 * C2403) *
                C114 +
            (C3912 * C979 + C49291 * C988 + C3913 * C2405 + C49092 * C2415) *
                C49047) *
               C3908 +
           ((C3912 * C974 + C49291 * C980 + C3913 * C2399 + C49092 * C2407) *
                C114 +
            (C3912 * C981 + C49291 * C989 + C3913 * C2409 + C49092 * C2417) *
                C49047) *
               C3909 +
           ((C3912 * C975 + C49291 * C982 + C3913 * C2401 + C49092 * C2411) *
                C114 +
            (C3912 * C983 + C49291 * C990 + C3913 * C2413 + C49092 * C2419) *
                C49047) *
               C3910 +
           ((C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                C114 +
            (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                C49047) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C114 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49047) *
               C49269 +
           ((C11403 + C11404 + C11405 + C11406) * C114 +
            (C11407 + C11408 + C11409 + C11410) * C49047) *
               C48945) *
              C970 -
          (((C11719 + C11720 + C11721 + C11722) * C49047 +
            (C11723 + C11724 + C11725 + C11726) * C114) *
               C48945 +
           ((C11369 * C1987 + C49334 * C1992 + C11368 * C1525 + C11362 * C1531 +
             C11367 * C728 + C11361 * C737 + C11366 * C426 + C11360 * C434) *
                C49047 +
            (C11369 * C1983 + C49334 * C1986 + C11368 * C1519 + C11362 * C1526 +
             C11367 * C722 + C11361 * C727 + C11366 * C416 + C11360 * C427) *
                C114) *
               C49269) *
              C971 +
          (((C11366 * C973 + C11360 * C978 + C11367 * C2397 + C11361 * C2403 +
             C11368 * C2398 + C11362 * C2404 + C11369 * C9912 +
             C49334 * C9914) *
                C114 +
            (C11366 * C979 + C11360 * C988 + C11367 * C2405 + C11361 * C2415 +
             C11368 * C2406 + C11362 * C2416 + C11369 * C9916 +
             C49334 * C9918) *
                C49047) *
               C49269 +
           ((C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C114 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49047) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C3912 * C416 + C49291 * C427 + C3913 * C722 + C49092 * C727) *
                C5121 +
            (C3912 * C426 + C49291 * C434 + C3913 * C728 + C49092 * C737) *
                C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
            (C4304 + C4303) * C5121 + (C4302 + C4301) * C49134) *
               C1107 +
           C6305 * C49311) *
              C49019 * C49002 * C110 -
          (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
            (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
               C49311 +
           ((C4297 + C4298) * C49134 + (C4299 + C4300) * C5121 +
            (C3954 + C3953) * C49292 + (C3952 + C3951) * C5120) *
               C1107 +
           ((C4301 + C4302) * C49134 + (C4303 + C4304) * C5121 +
            (C3950 + C3949) * C49292 + (C3948 + C3947) * C5120) *
               C1106) *
              C49019 * C49002 * C111 +
          (C6305 * C1106 +
           (C3965 * C5120 + C3966 * C49292 + (C4296 + C4295) * C5121 +
            (C4294 + C4293) * C49134) *
               C1107 +
           ((C3962 + C3961) * C5120 + (C3960 + C3959) * C49292 +
            (C3912 * C412 + C49291 * C419 + C3913 * C726 + C49092 * C735) *
                C5121 +
            (C3912 * C418 + C49291 * C430 + C3913 * C736 + C49092 * C741) *
                C49134) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C11366 * C416 + C11360 * C427 + C11367 * C722 + C11361 * C727 +
            C11368 * C1519 + C11362 * C1526 + C11369 * C1983 + C49334 * C1986) *
               C5121 +
           (C11366 * C426 + C11360 * C434 + C11367 * C728 + C11361 * C737 +
            C11368 * C1525 + C11362 * C1531 + C11369 * C1987 + C49334 * C1992) *
               C49134) *
              C48935 * C49019 * C49002 * C110 -
          ((C11719 + C11720 + C11721 + C11722) * C49134 +
           (C11723 + C11724 + C11725 + C11726) * C5121 +
           (C11410 + C11409 + C11408 + C11407) * C49292 +
           (C11406 + C11405 + C11404 + C11403) * C5120) *
              C48935 * C49019 * C49002 * C111 +
          ((C11418 + C11417 + C11416 + C11415) * C5120 +
           (C11414 + C11413 + C11412 + C11411) * C49292 +
           (C11366 * C414 + C11360 * C423 + C11367 * C724 + C11361 * C731 +
            C11368 * C1517 + C11362 * C1522 + C11369 * C1985 + C49334 * C1990) *
               C5121 +
           (C11366 * C422 + C11360 * C432 + C11367 * C732 + C11361 * C739 +
            C11368 * C1521 + C11362 * C1529 + C11369 * C1991 + C49334 * C1994) *
               C49134) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C3912 * C416 + C49291 * C427 + C3913 * C722 + C49092 * C727) *
                 C5121 +
             (C3912 * C426 + C49291 * C434 + C3913 * C728 + C49092 * C737) *
                 C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             (C4304 + C4303) * C5121 + (C4302 + C4301) * C49134) *
                C1107 +
            C6305 * C49311) *
               C49019 * C268 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                 C49134 +
             (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                 C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C49019 * C49319) *
              C270 +
          ((((C4138 + C4137) * C5120 + (C4136 + C4135) * C49292 +
             (C6523 + C6522) * C5121 + (C6521 + C6520) * C49134) *
                C1106 +
            ((C4134 + C4133) * C5120 + (C4132 + C4131) * C49292 +
             (C6519 + C6518) * C5121 + (C6517 + C6516) * C49134) *
                C1107 +
            ((C4130 + C4129) * C5120 + (C4128 + C4127) * C49292 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C5121 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            ((C4297 + C4298) * C49134 + (C4299 + C4300) * C5121 +
             (C3954 + C3953) * C49292 + (C3952 + C3951) * C5120) *
                C1107 +
            ((C4301 + C4302) * C49134 + (C4303 + C4304) * C5121 +
             (C3950 + C3949) * C49292 + (C3948 + C3947) * C5120) *
                C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C11366 * C416 + C11360 * C427 + C11367 * C722 + C11361 * C727 +
             C11368 * C1519 + C11362 * C1526 + C11369 * C1983 +
             C49334 * C1986) *
                C5121 +
            (C11366 * C426 + C11360 * C434 + C11367 * C728 + C11361 * C737 +
             C11368 * C1525 + C11362 * C1531 + C11369 * C1987 +
             C49334 * C1992) *
                C49134) *
               C48935 * C49019 * C268 -
           ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
             C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
                C49134 +
            (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
             C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
                C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C11572 + C11571 + C11570 + C11569) * C5120 +
            (C11568 + C11567 + C11566 + C11565) * C49292 +
            (C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
             C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
             C49334 * C9448) *
                C5121 +
            (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
             C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C49002 * C270 +
          (((C6726 * C5120 + C6727 * C49292 + (C6759 + C6758) * C5121 +
             (C6757 + C6756) * C49134) *
                C1106 +
            (C6299 * C5120 + C6300 * C49292 + (C6755 + C6754) * C5121 +
             (C6753 + C6752) * C49134) *
                C1107 +
            ((C4296 + C4295) * C5120 + (C4294 + C4293) * C49292 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C5121 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C410 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C11726 + C11725 + C11724 + C11723) * C5120 +
            (C11722 + C11721 + C11720 + C11719) * C49292 +
            (C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C5121 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C49019 * C550 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                 C49134 +
             (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                 C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C49019 * C49319) *
              C552 +
          ((((C4138 + C4137) * C5120 + (C4136 + C4135) * C49292 +
             (C6523 + C6522) * C5121 + (C6521 + C6520) * C49134) *
                C1106 +
            ((C4134 + C4133) * C5120 + (C4132 + C4131) * C49292 +
             (C6519 + C6518) * C5121 + (C6517 + C6516) * C49134) *
                C1107 +
            ((C4130 + C4129) * C5120 + (C4128 + C4127) * C49292 +
             (C3912 * C725 + C49291 * C733 + C3913 * C1520 + C49092 * C1527) *
                 C5121 +
             (C3912 * C734 + C49291 * C740 + C3913 * C1528 + C49092 * C1532) *
                 C49134) *
                C49311) *
               C49019 * C49319 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C49019 * C550 -
           ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
             C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
                C49134 +
            (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
             C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
                C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C11572 + C11571 + C11570 + C11569) * C5120 +
            (C11568 + C11567 + C11566 + C11565) * C49292 +
            (C11366 * C723 + C11360 * C729 + C11367 * C1518 + C11361 * C1524 +
             C11368 * C1984 + C11362 * C1988 + C11369 * C9445 +
             C49334 * C9448) *
                C5121 +
            (C11366 * C730 + C11360 * C738 + C11367 * C1523 + C11361 * C1530 +
             C11368 * C1989 + C11362 * C1993 + C11369 * C9449 +
             C49334 * C9451) *
                C49134) *
               C48935 * C49019 * C49319 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 + C6726 * C5121 +
            C6727 * C49134) *
               C1107 +
           C6305 * C49311) *
              C49019 * C616 -
          (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
            (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
               C49311 +
           ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
            (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
               C1107 +
           ((C3913 * C1525 + C49092 * C1531 + C3912 * C728 + C49291 * C737) *
                C49134 +
            (C3913 * C1519 + C49092 * C1526 + C3912 * C722 + C49291 * C727) *
                C5121 +
            (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                C49292 +
            (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                C5120) *
               C1106) *
              C49019 * C617 +
          (((C3912 * C620 + C49291 * C625 + C3913 * C1321 + C49092 * C1328) *
                C5120 +
            (C3912 * C626 + C49291 * C635 + C3913 * C1327 + C49092 * C1333) *
                C49292 +
            (C3912 * C1519 + C49291 * C1526 + C3913 * C1983 + C49092 * C1986) *
                C5121 +
            (C3912 * C1525 + C49291 * C1531 + C3913 * C1987 + C49092 * C1992) *
                C49134) *
               C1106 +
           ((C3912 * C621 + C49291 * C627 + C3913 * C1320 + C49092 * C1326) *
                C5120 +
            (C3912 * C628 + C49291 * C636 + C3913 * C1325 + C49092 * C1332) *
                C49292 +
            (C3912 * C1518 + C49291 * C1524 + C3913 * C1984 + C49092 * C1988) *
                C5121 +
            (C3912 * C1523 + C49291 * C1530 + C3913 * C1989 + C49092 * C1993) *
                C49134) *
               C1107 +
           ((C3912 * C622 + C49291 * C629 + C3913 * C1319 + C49092 * C1324) *
                C5120 +
            (C3912 * C630 + C49291 * C637 + C3913 * C1323 + C49092 * C1331) *
                C49292 +
            (C3912 * C1517 + C49291 * C1522 + C3913 * C1985 + C49092 * C1990) *
                C5121 +
            (C3912 * C1521 + C49291 * C1529 + C3913 * C1991 + C49092 * C1994) *
                C49134) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C14445 + C14446 + C14447 + C14448) * C5121 +
           (C14449 + C14450 + C14451 + C14452) * C49134) *
              C48935 * C49019 * C616 -
          ((C11369 * C9446 + C49334 * C9450 + C11368 * C1987 + C11362 * C1992 +
            C11367 * C1525 + C11361 * C1531 + C11366 * C728 + C11360 * C737) *
               C49134 +
           (C11369 * C9444 + C49334 * C9447 + C11368 * C1983 + C11362 * C1986 +
            C11367 * C1519 + C11361 * C1526 + C11366 * C722 + C11360 * C727) *
               C5121 +
           (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
            C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
               C49292 +
           (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
            C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
               C5120) *
              C48935 * C49019 * C617 +
          ((C11366 * C620 + C11360 * C625 + C11367 * C1321 + C11361 * C1328 +
            C11368 * C1825 + C11362 * C1828 + C11369 * C9354 + C49334 * C9357) *
               C5120 +
           (C11366 * C626 + C11360 * C635 + C11367 * C1327 + C11361 * C1333 +
            C11368 * C1829 + C11362 * C1834 + C11369 * C9356 + C49334 * C9360) *
               C49292 +
           (C11366 * C1519 + C11360 * C1526 + C11367 * C1983 + C11361 * C1986 +
            C11368 * C9444 + C11362 * C9447 + C11369 * C9682 + C49334 * C9683) *
               C5121 +
           (C11366 * C1525 + C11360 * C1531 + C11367 * C1987 + C11361 * C1992 +
            C11368 * C9446 + C11362 * C9450 + C11369 * C9684 + C49334 * C9685) *
               C49134) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C410 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C550 +
          ((((C7302 + C7303) * C5120 + (C7304 + C7305) * C49292 +
             (C3912 * C2397 + C49291 * C2403 + C3913 * C2398 + C49092 * C2404) *
                 C5121 +
             (C3912 * C2405 + C49291 * C2415 + C3913 * C2406 + C49092 * C2416) *
                 C49134) *
                C1106 +
            ((C6523 + C6522) * C5120 + (C6521 + C6520) * C49292 +
             (C3912 * C2399 + C49291 * C2407 + C3913 * C2400 + C49092 * C2408) *
                 C5121 +
             (C3912 * C2409 + C49291 * C2417 + C3913 * C2410 + C49092 * C2418) *
                 C49134) *
                C1107 +
            ((C6519 + C6518) * C5120 + (C6517 + C6516) * C49292 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C5121 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C410 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C550 +
          (((C14827 + C14828 + C14829 + C14830) * C5120 +
            (C14831 + C14832 + C14833 + C14834) * C49292 +
            (C11366 * C2397 + C11360 * C2403 + C11367 * C2398 + C11361 * C2404 +
             C11368 * C9912 + C11362 * C9914 + C11369 * C9913 +
             C49334 * C9915) *
                C5121 +
            (C11366 * C2405 + C11360 * C2415 + C11367 * C2406 + C11361 * C2416 +
             C11368 * C9916 + C11362 * C9918 + C11369 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C14834 + C14833 + C14832 + C14831) * C49134 +
            (C14830 + C14829 + C14828 + C14827) * C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C49002 * C552 +
          (((C6726 * C5120 + C6727 * C49292 + (C6759 + C6758) * C5121 +
             (C6757 + C6756) * C49134) *
                C1106 +
            (C6299 * C5120 + C6300 * C49292 + (C6755 + C6754) * C5121 +
             (C6753 + C6752) * C49134) *
                C1107 +
            ((C4296 + C4295) * C5120 + (C4294 + C4293) * C49292 +
             (C3912 * C976 + C49291 * C984 + C3913 * C2724 + C49092 * C2725) *
                 C5121 +
             (C3912 * C985 + C49291 * C991 + C3913 * C2726 + C49092 * C2727) *
                 C49134) *
                C49311) *
               C49321 -
           (((C4293 + C4294) * C49134 + (C4295 + C4296) * C5121 +
             (C3958 + C3957) * C49292 + (C3956 + C3955) * C5120) *
                C49311 +
            (C6736 * C49134 + C6737 * C5121 + (C3954 + C3953) * C49292 +
             (C3952 + C3951) * C5120) *
                C1107 +
            (C6746 * C49134 + C6747 * C5121 + (C3950 + C3949) * C49292 +
             (C3948 + C3947) * C5120) *
                C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C824 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C11726 + C11725 + C11724 + C11723) * C5120 +
            (C11722 + C11721 + C11720 + C11719) * C49292 +
            (C11366 * C974 + C11360 * C980 + C11367 * C2399 + C11361 * C2407 +
             C11368 * C2400 + C11362 * C2408 + C11369 * C10176 +
             C49334 * C10177) *
                C5121 +
            (C11366 * C981 + C11360 * C989 + C11367 * C2409 + C11361 * C2417 +
             C11368 * C2410 + C11362 * C2418 + C11369 * C10178 +
             C49334 * C10179) *
                C49134) *
               C48935 * C49321 -
           ((C11719 + C11720 + C11721 + C11722) * C49134 +
            (C11723 + C11724 + C11725 + C11726) * C5121 +
            (C11410 + C11409 + C11408 + C11407) * C49292 +
            (C11406 + C11405 + C11404 + C11403) * C5120) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                 C5120 +
             (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                 C49292 +
             (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
                C1106 +
            ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 +
             C6726 * C5121 + C6727 * C49134) *
                C1107 +
            C6305 * C49311) *
               C824 -
           (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
             C6736 * C49292 + C6737 * C5120) *
                C49311 +
            ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
             C6746 * C49292 + C6747 * C5120) *
                C1107 +
            ((C3913 * C2405 + C49092 * C2415 + C3912 * C979 + C49291 * C988) *
                 C49134 +
             (C3913 * C2397 + C49092 * C2403 + C3912 * C973 + C49291 * C978) *
                 C5121 +
             (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
                C1106) *
               C49321) *
              C268 +
          ((((C7302 + C7303) * C5120 + (C7304 + C7305) * C49292 +
             (C3912 * C2397 + C49291 * C2403 + C3913 * C2398 + C49092 * C2404) *
                 C5121 +
             (C3912 * C2405 + C49291 * C2415 + C3913 * C2406 + C49092 * C2416) *
                 C49134) *
                C1106 +
            ((C6523 + C6522) * C5120 + (C6521 + C6520) * C49292 +
             (C3912 * C2399 + C49291 * C2407 + C3913 * C2400 + C49092 * C2408) *
                 C5121 +
             (C3912 * C2409 + C49291 * C2417 + C3913 * C2410 + C49092 * C2418) *
                 C49134) *
                C1107 +
            ((C6519 + C6518) * C5120 + (C6517 + C6516) * C49292 +
             (C3912 * C2401 + C49291 * C2411 + C3913 * C2402 + C49092 * C2412) *
                 C5121 +
             (C3912 * C2413 + C49291 * C2419 + C3913 * C2414 + C49092 * C2420) *
                 C49134) *
                C49311) *
               C49321 -
           (((C6516 + C6517) * C49134 + (C6518 + C6519) * C5121 +
             (C4131 + C4132) * C49292 + (C4133 + C4134) * C5120) *
                C49311 +
            ((C6520 + C6521) * C49134 + (C6522 + C6523) * C5121 +
             (C4135 + C4136) * C49292 + (C4137 + C4138) * C5120) *
                C1107 +
            ((C7305 + C7304) * C49134 + (C7303 + C7302) * C5121 +
             (C3913 * C626 + C49092 * C635 + C3912 * C286 + C49291 * C294) *
                 C49292 +
             (C3913 * C620 + C49092 * C625 + C3912 * C276 + C49291 * C287) *
                 C5120) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
             C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
                C5120 +
            (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
             C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
                C49292 +
            (C14445 + C14446 + C14447 + C14448) * C5121 +
            (C14449 + C14450 + C14451 + C14452) * C49134) *
               C48935 * C824 -
           ((C11369 * C9916 + C49334 * C9918 + C11368 * C2406 + C11362 * C2416 +
             C11367 * C2405 + C11361 * C2415 + C11366 * C979 + C11360 * C988) *
                C49134 +
            (C11369 * C9912 + C49334 * C9914 + C11368 * C2398 + C11362 * C2404 +
             C11367 * C2397 + C11361 * C2403 + C11366 * C973 + C11360 * C978) *
                C5121 +
            (C14452 + C14451 + C14450 + C14449) * C49292 +
            (C14448 + C14447 + C14446 + C14445) * C5120) *
               C48935 * C49321) *
              C268 +
          (((C14827 + C14828 + C14829 + C14830) * C5120 +
            (C14831 + C14832 + C14833 + C14834) * C49292 +
            (C11366 * C2397 + C11360 * C2403 + C11367 * C2398 + C11361 * C2404 +
             C11368 * C9912 + C11362 * C9914 + C11369 * C9913 +
             C49334 * C9915) *
                C5121 +
            (C11366 * C2405 + C11360 * C2415 + C11367 * C2406 + C11361 * C2416 +
             C11368 * C9916 + C11362 * C9918 + C11369 * C9917 +
             C49334 * C9919) *
                C49134) *
               C48935 * C49321 -
           ((C14834 + C14833 + C14832 + C14831) * C49134 +
            (C14830 + C14829 + C14828 + C14827) * C5121 +
            (C11369 * C1829 + C49334 * C1834 + C11368 * C1327 + C11362 * C1333 +
             C11367 * C626 + C11361 * C635 + C11366 * C286 + C11360 * C294) *
                C49292 +
            (C11369 * C1825 + C49334 * C1828 + C11368 * C1321 + C11362 * C1328 +
             C11367 * C620 + C11361 * C625 + C11366 * C276 + C11360 * C287) *
                C5120) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3912 * C115 + C49291 * C122 + C3913 * C276 + C49092 * C287) *
                C5120 +
            (C3912 * C123 + C49291 * C136 + C3913 * C286 + C49092 * C294) *
                C49292 +
            (C6748 + C6749) * C5121 + (C6750 + C6751) * C49134) *
               C1106 +
           ((C3947 + C3948) * C5120 + (C3949 + C3950) * C49292 + C6726 * C5121 +
            C6727 * C49134) *
               C1107 +
           C6305 * C49311) *
              C970 -
          (((C6752 + C6753) * C49134 + (C6754 + C6755) * C5121 +
            C6736 * C49292 + C6737 * C5120) *
               C49311 +
           ((C6756 + C6757) * C49134 + (C6758 + C6759) * C5121 +
            C6746 * C49292 + C6747 * C5120) *
               C1107 +
           ((C7848 + C7849) * C49134 + (C7850 + C7851) * C5121 +
            (C6751 + C6750) * C49292 + (C6749 + C6748) * C5120) *
               C1106) *
              C971 +
          (((C7851 + C7850) * C5120 + (C7849 + C7848) * C49292 +
            (C3912 * C2912 + C49291 * C2919 + C3913 * C3364 + C49092 * C3367) *
                C5121 +
            (C3912 * C2918 + C49291 * C2924 + C3913 * C3368 + C49092 * C3373) *
                C49134) *
               C1106 +
           ((C6759 + C6758) * C5120 + (C6757 + C6756) * C49292 +
            (C3912 * C2911 + C49291 * C2917 + C3913 * C3365 + C49092 * C3369) *
                C5121 +
            (C3912 * C2916 + C49291 * C2923 + C3913 * C3370 + C49092 * C3374) *
                C49134) *
               C1107 +
           ((C6755 + C6754) * C5120 + (C6753 + C6752) * C49292 +
            (C3912 * C2910 + C49291 * C2915 + C3913 * C3366 + C49092 * C3371) *
                C5121 +
            (C3912 * C2914 + C49291 * C2922 + C3913 * C3372 + C49092 * C3375) *
                C49134) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11366 * C115 + C11360 * C122 + C11367 * C276 + C11361 * C287 +
            C11368 * C620 + C11362 * C625 + C11369 * C1321 + C49334 * C1328) *
               C5120 +
           (C11366 * C123 + C11360 * C136 + C11367 * C286 + C11361 * C294 +
            C11368 * C626 + C11362 * C635 + C11369 * C1327 + C49334 * C1333) *
               C49292 +
           (C14445 + C14446 + C14447 + C14448) * C5121 +
           (C14449 + C14450 + C14451 + C14452) * C49134) *
              C48935 * C970 -
          ((C15209 + C15210 + C15211 + C15212) * C49134 +
           (C15213 + C15214 + C15215 + C15216) * C5121 +
           (C14452 + C14451 + C14450 + C14449) * C49292 +
           (C14448 + C14447 + C14446 + C14445) * C5120) *
              C48935 * C971 +
          ((C15216 + C15215 + C15214 + C15213) * C5120 +
           (C15212 + C15211 + C15210 + C15209) * C49292 +
           (C11366 * C2912 + C11360 * C2919 + C11367 * C3364 + C11361 * C3367 +
            C11368 * C10326 + C11362 * C10329 + C11369 * C10790 +
            C49334 * C10791) *
               C5121 +
           (C11366 * C2918 + C11360 * C2924 + C11367 * C3368 + C11361 * C3373 +
            C11368 * C10328 + C11362 * C10332 + C11369 * C10792 +
            C49334 * C10793) *
               C49134) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C49002 * C110 -
          (((C1161 + C1162 + C1163) * C49047 + (C1164 + C1165 + C1166) * C114) *
               C49311 +
           ((C1160 + C1159 + C1158) * C49047 + (C1157 + C1156 + C1155) * C114) *
               C1107 +
           ((C1154 + C1153 + C1152) * C49047 + (C1151 + C1150 + C1149) * C114) *
               C1106) *
              C49019 * C49002 * C111 +
          (C1173 * C1106 +
           ((C1166 + C1165 + C1164) * C114 + (C1163 + C1162 + C1161) * C49047) *
               C1107 +
           ((C1109 * C119 + C49359 * C130 + C1110 * C272 + C49347 * C279 +
             C1111 * C624 + C49324 * C633) *
                C114 +
            (C1109 * C131 + C49359 * C140 + C1110 * C278 + C49347 * C290 +
             C1111 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C49002 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C49019 * C49002 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C49030 * C134) * C114 +
            (C113 * C135 + C49030 * C142) * C49047) *
               C107) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 +
            (C113 * C416 + C49030 * C427) * C2535 +
            (C113 * C426 + C49030 * C434) * C49349 +
            (C113 * C973 + C49030 * C978) * C2536 +
            (C113 * C979 + C49030 * C988) * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C49019 * C49002 * C110 -
          ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
           (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
           (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
              C49019 * C49002 * C111 +
          (C2578 * C1106 +
           (C2561 + C2560 + C2559 + C2558 + C2575 + C2574) * C1107 +
           (C170 * C2534 + C171 * C49360 + C454 * C2535 + C453 * C49349 +
            (C113 * C977 + C49030 * C986) * C2536 +
            (C113 * C987 + C49030 * C992) * C49327) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C49002 * C110 -
          (((C8019 + C8020 + C8021) * C49047 + (C8022 + C8023 + C8024) * C114) *
               C49311 +
           ((C8018 + C8017 + C8016) * C49047 + (C8015 + C8014 + C8013) * C114) *
               C49343 +
           ((C8012 + C8011 + C8010) * C49047 + (C8009 + C8008 + C8007) * C114) *
               C49356) *
              C49019 * C49002 * C111 +
          (C8031 * C49356 +
           ((C8024 + C8023 + C8022) * C114 + (C8021 + C8020 + C8019) * C49047) *
               C49343 +
           ((C7967 * C119 + C7961 * C130 + C7968 * C272 + C7962 * C279 +
             C7969 * C624 + C49324 * C633) *
                C114 +
            (C7967 * C131 + C7961 * C140 + C7968 * C278 + C7962 * C290 +
             C7969 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C49002 * C110 -
          ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
            C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
            C9267 * C125 + C9261 * C137) *
               C49047 +
           (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
            C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
            C9267 * C116 + C9261 * C124) *
               C114) *
              C48935 * C49019 * C49002 * C111 +
          ((C9267 * C117 + C9261 * C126 + C9268 * C274 + C9262 * C283 +
            C9269 * C622 + C9263 * C629 + C9270 * C1319 + C9264 * C1324 +
            C9271 * C1827 + C9265 * C1832) *
               C114 +
           (C9267 * C127 + C9261 * C138 + C9268 * C282 + C9262 * C292 +
            C9269 * C630 + C9263 * C637 + C9270 * C1323 + C9264 * C1331 +
            C9271 * C1833 + C9265 * C1836) *
               C49047) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C7967 * C416 + C7961 * C427 + C7968 * C722 + C7962 * C727 +
            C7969 * C1519 + C49324 * C1526) *
               C2535 +
           (C7967 * C426 + C7961 * C434 + C7968 * C728 + C7962 * C737 +
            C7969 * C1525 + C49324 * C1531) *
               C49349 +
           (C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
            C7969 * C2398 + C49324 * C2404) *
               C2536 +
           (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
            C7969 * C2406 + C49324 * C2416) *
               C49327) *
              C48935 * C49019 * C49002 * C110 -
          ((C7969 * C2410 + C49324 * C2418 + C7968 * C2409 + C7962 * C2417 +
            C7967 * C981 + C7961 * C989) *
               C49327 +
           (C7969 * C2400 + C49324 * C2408 + C7968 * C2399 + C7962 * C2407 +
            C7967 * C974 + C7961 * C980) *
               C2536 +
           (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
           (C8012 + C8011 + C8010) * C49360 + (C8009 + C8008 + C8007) * C2534) *
              C48935 * C49019 * C49002 * C111 +
          (C8027 * C2534 + C8028 * C49360 + (C8389 + C8388 + C8387) * C2535 +
           (C8386 + C8385 + C8384) * C49349 +
           (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
            C7969 * C2402 + C49324 * C2412) *
               C2536 +
           (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
            C7969 * C2414 + C49324 * C2420) *
               C49327) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C268 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C270 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 +
             (C113 * C416 + C49030 * C427) * C2535 +
             (C113 * C426 + C49030 * C434) * C49349 +
             (C113 * C973 + C49030 * C978) * C2536 +
             (C113 * C979 + C49030 * C988) * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C49019 * C268 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            ((C113 * C2405 + C49030 * C2415) * C49327 +
             (C113 * C2397 + C49030 * C2403) * C2536 +
             (C113 * C728 + C49030 * C737) * C49349 +
             (C113 * C722 + C49030 * C727) * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C49019 * C49319) *
              C270 +
          (((C2748 + C2747 + C2764 + C2763 + C2762 + C2761) * C1106 +
            (C2738 + C2737 + C2760 + C2759 + C2758 + C2757) * C1107 +
            (C316 * C2534 + C315 * C49360 +
             (C113 * C725 + C49030 * C733) * C2535 +
             (C113 * C734 + C49030 * C740) * C49349 +
             (C113 * C2724 + C49030 * C2725) * C2536 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C268 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C268 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C7967 * C416 + C7961 * C427 + C7968 * C722 + C7962 * C727 +
             C7969 * C1519 + C49324 * C1526) *
                C2535 +
            (C7967 * C426 + C7961 * C434 + C7968 * C728 + C7962 * C737 +
             C7969 * C1525 + C49324 * C1531) *
                C49349 +
            (C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C2536 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49327) *
               C48935 * C49019 * C268 -
           ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
             C7967 * C2405 + C7961 * C2415) *
                C49327 +
            (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
             C7967 * C2397 + C7961 * C2403) *
                C2536 +
            (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
             C7967 * C728 + C7961 * C737) *
                C49349 +
            (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
             C7967 * C722 + C7961 * C727) *
                C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C8213 + C8212 + C8211) * C2534 + (C8210 + C8209 + C8208) * C49360 +
            (C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
             C7969 * C1984 + C49324 * C1988) *
                C2535 +
            (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
             C7969 * C1989 + C49324 * C1993) *
                C49349 +
            (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
             C7969 * C10176 + C49324 * C10177) *
                C2536 +
            (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
             C7969 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C7969 * C2410 + C49324 * C2418 + C7968 * C2409 + C7962 * C2417 +
             C7967 * C981 + C7961 * C989) *
                C49327 +
            (C7969 * C2400 + C49324 * C2408 + C7968 * C2399 + C7962 * C2407 +
             C7967 * C974 + C7961 * C980) *
                C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C270 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C410 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C49002 * C270 +
          (((C2950 + C2949 + C2948 + C2947 + C2962 + C2961) * C1106 +
            (C2942 + C2941 + C2940 + C2939 + C2960 + C2959) * C1107 +
            (C456 * C2534 + C455 * C49360 + C2568 * C2535 + C2567 * C49349 +
             (C113 * C2913 + C49030 * C2920) * C2536 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C270 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C410 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C8395 + C8394 + C8393) * C2534 + (C8392 + C8391 + C8390) * C49360 +
            (C10383 + C10384 + C10385) * C2535 +
            (C10386 + C10387 + C10388) * C49349 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C2536 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C550 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C552 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C49019 * C550 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            ((C113 * C2405 + C49030 * C2415) * C49327 +
             (C113 * C2397 + C49030 * C2403) * C2536 +
             (C113 * C728 + C49030 * C737) * C49349 +
             (C113 * C722 + C49030 * C727) * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C49019 * C49319) *
              C552 +
          (((C2748 + C2747 + C2764 + C2763 + C2762 + C2761) * C1106 +
            (C2738 + C2737 + C2760 + C2759 + C2758 + C2757) * C1107 +
            (C316 * C2534 + C315 * C49360 +
             (C113 * C725 + C49030 * C733) * C2535 +
             (C113 * C734 + C49030 * C740) * C49349 +
             (C113 * C2724 + C49030 * C2725) * C2536 +
             (C113 * C2726 + C49030 * C2727) * C49327) *
                C49311) *
               C49019 * C49319 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C550 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C550 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C49019 * C550 -
           ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
             C7967 * C2405 + C7961 * C2415) *
                C49327 +
            (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
             C7967 * C2397 + C7961 * C2403) *
                C2536 +
            (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
             C7967 * C728 + C7961 * C737) *
                C49349 +
            (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
             C7967 * C722 + C7961 * C727) *
                C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C8213 + C8212 + C8211) * C2534 + (C8210 + C8209 + C8208) * C49360 +
            (C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
             C7969 * C1984 + C49324 * C1988) *
                C2535 +
            (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
             C7969 * C1989 + C49324 * C1993) *
                C49349 +
            (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
             C7969 * C10176 + C49324 * C10177) *
                C2536 +
            (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
             C7969 * C10178 + C49324 * C10179) *
                C49327) *
               C48935 * C49019 * C49319 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C616 -
          (((C1360 + C1361 + C1362) * C49047 + (C1363 + C1364 + C1365) * C114) *
               C49311 +
           ((C1366 + C1367 + C1368) * C49047 + (C1369 + C1370 + C1371) * C114) *
               C1107 +
           ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C49047 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C114) *
               C1106) *
              C49019 * C617 +
          (((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
             C1111 * C1825 + C49324 * C1828) *
                C114 +
            (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
             C1111 * C1829 + C49324 * C1834) *
                C49047) *
               C1106 +
           ((C1109 * C621 + C49359 * C627 + C1110 * C1320 + C49347 * C1326 +
             C1111 * C1826 + C49324 * C1830) *
                C114 +
            (C1109 * C628 + C49359 * C636 + C1110 * C1325 + C49347 * C1332 +
             C1111 * C1831 + C49324 * C1835) *
                C49047) *
               C1107 +
           ((C1109 * C622 + C49359 * C629 + C1110 * C1319 + C49347 * C1324 +
             C1111 * C1827 + C49324 * C1832) *
                C114 +
            (C1109 * C630 + C49359 * C637 + C1110 * C1323 + C49347 * C1331 +
             C1111 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C49030 * C294) * C49047 +
            (C113 * C276 + C49030 * C287) * C114) *
               C103) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C114 +
            (C113 * C626 + C49030 * C635) * C49047) *
               C103 +
           ((C113 * C621 + C49030 * C627) * C114 +
            (C113 * C628 + C49030 * C636) * C49047) *
               C104 +
           ((C113 * C622 + C49030 * C629) * C114 +
            (C113 * C630 + C49030 * C637) * C49047) *
               C105 +
           ((C113 * C623 + C49030 * C631) * C114 +
            (C113 * C632 + C49030 * C638) * C49047) *
               C106 +
           ((C113 * C624 + C49030 * C633) * C114 +
            (C113 * C634 + C49030 * C639) * C49047) *
               C107) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
            C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C49019 * C616 -
          ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
           (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
           ((C113 * C2405 + C49030 * C2415) * C49327 +
            (C113 * C2397 + C49030 * C2403) * C2536 +
            (C113 * C728 + C49030 * C737) * C49349 +
            (C113 * C722 + C49030 * C727) * C2535 +
            (C113 * C286 + C49030 * C294) * C49360 +
            (C113 * C276 + C49030 * C287) * C2534) *
               C1106) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C2534 +
            (C113 * C626 + C49030 * C635) * C49360 +
            (C113 * C1519 + C49030 * C1526) * C2535 +
            (C113 * C1525 + C49030 * C1531) * C49349 +
            (C113 * C2398 + C49030 * C2404) * C2536 +
            (C113 * C2406 + C49030 * C2416) * C49327) *
               C1106 +
           ((C113 * C621 + C49030 * C627) * C2534 +
            (C113 * C628 + C49030 * C636) * C49360 +
            (C113 * C1518 + C49030 * C1524) * C2535 +
            (C113 * C1523 + C49030 * C1530) * C49349 +
            (C113 * C2400 + C49030 * C2408) * C2536 +
            (C113 * C2410 + C49030 * C2418) * C49327) *
               C1107 +
           ((C113 * C622 + C49030 * C629) * C2534 +
            (C113 * C630 + C49030 * C637) * C49360 +
            (C113 * C1517 + C49030 * C1522) * C2535 +
            (C113 * C1521 + C49030 * C1529) * C49349 +
            (C113 * C2402 + C49030 * C2412) * C2536 +
            (C113 * C2414 + C49030 * C2420) * C49327) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C616 -
          (((C8202 + C8203 + C8204) * C49047 + (C8205 + C8206 + C8207) * C114) *
               C49311 +
           ((C8208 + C8209 + C8210) * C49047 + (C8211 + C8212 + C8213) * C114) *
               C49343 +
           ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49047 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C114) *
               C49356) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C114 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49047) *
               C49356 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C114 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49047) *
               C49343 +
           ((C7967 * C622 + C7961 * C629 + C7968 * C1319 + C7962 * C1324 +
             C7969 * C1827 + C49324 * C1832) *
                C114 +
            (C7967 * C630 + C7961 * C637 + C7968 * C1323 + C7962 * C1331 +
             C7969 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C616 -
          ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
            C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
            C9267 * C286 + C9261 * C294) *
               C49047 +
           (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
            C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
            C9267 * C276 + C9261 * C287) *
               C114) *
              C48935 * C49019 * C617 +
          ((C9267 * C620 + C9261 * C625 + C9268 * C1321 + C9262 * C1328 +
            C9269 * C1825 + C9263 * C1828 + C9270 * C9354 + C9264 * C9357 +
            C9271 * C9596 + C9265 * C9597) *
               C114 +
           (C9267 * C626 + C9261 * C635 + C9268 * C1327 + C9262 * C1333 +
            C9269 * C1829 + C9263 * C1834 + C9270 * C9356 + C9264 * C9360 +
            C9271 * C9598 + C9265 * C9599) *
               C49047) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C10371 + C10372 + C10373) * C2535 +
           (C10374 + C10375 + C10376) * C49349 +
           (C10377 + C10378 + C10379) * C2536 +
           (C10380 + C10381 + C10382) * C49327) *
              C48935 * C49019 * C616 -
          ((C7969 * C9916 + C49324 * C9918 + C7968 * C2406 + C7962 * C2416 +
            C7967 * C2405 + C7961 * C2415) *
               C49327 +
           (C7969 * C9912 + C49324 * C9914 + C7968 * C2398 + C7962 * C2404 +
            C7967 * C2397 + C7961 * C2403) *
               C2536 +
           (C7969 * C1987 + C49324 * C1992 + C7968 * C1525 + C7962 * C1531 +
            C7967 * C728 + C7961 * C737) *
               C49349 +
           (C7969 * C1983 + C49324 * C1986 + C7968 * C1519 + C7962 * C1526 +
            C7967 * C722 + C7961 * C727) *
               C2535 +
           (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
            C7967 * C286 + C7961 * C294) *
               C49360 +
           (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
            C7967 * C276 + C7961 * C287) *
               C2534) *
              C48935 * C49019 * C617 +
          ((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
            C7969 * C1825 + C49324 * C1828) *
               C2534 +
           (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
            C7969 * C1829 + C49324 * C1834) *
               C49360 +
           (C7967 * C1519 + C7961 * C1526 + C7968 * C1983 + C7962 * C1986 +
            C7969 * C9444 + C49324 * C9447) *
               C2535 +
           (C7967 * C1525 + C7961 * C1531 + C7968 * C1987 + C7962 * C1992 +
            C7969 * C9446 + C49324 * C9450) *
               C49349 +
           (C7967 * C2398 + C7961 * C2404 + C7968 * C9912 + C7962 * C9914 +
            C7969 * C9913 + C49324 * C9915) *
               C2536 +
           (C7967 * C2406 + C7961 * C2416 + C7968 * C9916 + C7962 * C9918 +
            C7969 * C9917 + C49324 * C9919) *
               C49327) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C550 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C550 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C410 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C550 +
          (((C3385 * C2534 + C3386 * C49360 + C3387 * C2535 + C3388 * C49349 +
             (C113 * C3364 + C49030 * C3367) * C2536 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C1106 +
            (C2756 * C2534 + C2755 * C49360 + C2754 * C2535 + C2753 * C49349 +
             (C113 * C3365 + C49030 * C3369) * C2536 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C1107 +
            (C2752 * C2534 + C2751 * C49360 + C2750 * C2535 + C2749 * C49349 +
             (C113 * C3366 + C49030 * C3371) * C2536 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            (C3388 * C49327 + C3387 * C2536 + C3386 * C49349 + C3385 * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C550 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C550 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C410 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C550 +
          (((C10819 + C10820 + C10821) * C2534 +
            (C10822 + C10823 + C10824) * C49360 +
            (C10825 + C10826 + C10827) * C2535 +
            (C10828 + C10829 + C10830) * C49349 +
            (C7967 * C3364 + C7961 * C3367 + C7968 * C10326 + C7962 * C10329 +
             C7969 * C10790 + C49324 * C10791) *
                C2536 +
            (C7967 * C3368 + C7961 * C3373 + C7968 * C10328 + C7962 * C10332 +
             C7969 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C10830 + C10829 + C10828) * C49327 +
            (C10827 + C10826 + C10825) * C2536 +
            (C10824 + C10823 + C10822) * C49349 +
            (C10821 + C10820 + C10819) * C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C552 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C824 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C49002 * C552 +
          (((C2950 + C2949 + C2948 + C2947 + C2962 + C2961) * C1106 +
            (C2942 + C2941 + C2940 + C2939 + C2960 + C2959) * C1107 +
            (C456 * C2534 + C455 * C49360 + C2568 * C2535 + C2567 * C49349 +
             (C113 * C2913 + C49030 * C2920) * C2536 +
             (C113 * C2921 + C49030 * C2925) * C49327) *
                C49311) *
               C49321 -
           ((C2574 + C2575 + C2558 + C2559 + C2560 + C2561) * C49311 +
            (C2573 + C2572 + C2549 + C2548 + C2547 + C2546) * C1107 +
            (C2570 + C2569 + C2541 + C2540 + C2539 + C2538) * C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C552 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C824 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C8395 + C8394 + C8393) * C2534 + (C8392 + C8391 + C8390) * C49360 +
            (C10383 + C10384 + C10385) * C2535 +
            (C10386 + C10387 + C10388) * C49349 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C2536 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49327) *
               C48935 * C49321 -
           ((C10388 + C10387 + C10386) * C49327 +
            (C10385 + C10384 + C10383) * C2536 +
            (C8390 + C8391 + C8392) * C49349 + (C8393 + C8394 + C8395) * C2535 +
            (C8012 + C8011 + C8010) * C49360 +
            (C8009 + C8008 + C8007) * C2534) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C268 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C268 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C2534 +
             (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
             C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
                C1106 +
            (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
            C2578 * C49311) *
               C824 -
           ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
            (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
            ((C113 * C2918 + C49030 * C2924) * C49327 +
             (C113 * C2912 + C49030 * C2919) * C2536 + C2954 * C49349 +
             C2953 * C2535 + C2952 * C49360 + C2951 * C2534) *
                C1106) *
               C49321) *
              C268 +
          (((C3385 * C2534 + C3386 * C49360 + C3387 * C2535 + C3388 * C49349 +
             (C113 * C3364 + C49030 * C3367) * C2536 +
             (C113 * C3368 + C49030 * C3373) * C49327) *
                C1106 +
            (C2756 * C2534 + C2755 * C49360 + C2754 * C2535 + C2753 * C49349 +
             (C113 * C3365 + C49030 * C3369) * C2536 +
             (C113 * C3370 + C49030 * C3374) * C49327) *
                C1107 +
            (C2752 * C2534 + C2751 * C49360 + C2750 * C2535 + C2749 * C49349 +
             (C113 * C3366 + C49030 * C3371) * C2536 +
             (C113 * C3372 + C49030 * C3375) * C49327) *
                C49311) *
               C49321 -
           ((C2757 + C2758 + C2759 + C2760 + C2737 + C2738) * C49311 +
            (C2761 + C2762 + C2763 + C2764 + C2747 + C2748) * C1107 +
            (C3388 * C49327 + C3387 * C2536 + C3386 * C49349 + C3385 * C2535 +
             (C113 * C286 + C49030 * C294) * C49360 +
             (C113 * C276 + C49030 * C287) * C2534) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C268 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C268 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C2534 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49360 +
            (C10371 + C10372 + C10373) * C2535 +
            (C10374 + C10375 + C10376) * C49349 +
            (C10377 + C10378 + C10379) * C2536 +
            (C10380 + C10381 + C10382) * C49327) *
               C48935 * C824 -
           ((C7969 * C10328 + C49324 * C10332 + C7968 * C3368 + C7962 * C3373 +
             C7967 * C2918 + C7961 * C2924) *
                C49327 +
            (C7969 * C10326 + C49324 * C10329 + C7968 * C3364 + C7962 * C3367 +
             C7967 * C2912 + C7961 * C2919) *
                C2536 +
            (C10382 + C10381 + C10380) * C49349 +
            (C10379 + C10378 + C10377) * C2535 +
            (C10376 + C10375 + C10374) * C49360 +
            (C10373 + C10372 + C10371) * C2534) *
               C48935 * C49321) *
              C268 +
          (((C10819 + C10820 + C10821) * C2534 +
            (C10822 + C10823 + C10824) * C49360 +
            (C10825 + C10826 + C10827) * C2535 +
            (C10828 + C10829 + C10830) * C49349 +
            (C7967 * C3364 + C7961 * C3367 + C7968 * C10326 + C7962 * C10329 +
             C7969 * C10790 + C49324 * C10791) *
                C2536 +
            (C7967 * C3368 + C7961 * C3373 + C7968 * C10328 + C7962 * C10332 +
             C7969 * C10792 + C49324 * C10793) *
                C49327) *
               C48935 * C49321 -
           ((C10830 + C10829 + C10828) * C49327 +
            (C10827 + C10826 + C10825) * C2536 +
            (C10824 + C10823 + C10822) * C49349 +
            (C10821 + C10820 + C10819) * C2535 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49360 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C2534) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C970 -
          (((C1558 + C1559 + C1560) * C49047 + (C1561 + C1562 + C1563) * C114) *
               C49311 +
           ((C1564 + C1565 + C1566) * C49047 + (C1567 + C1568 + C1569) * C114) *
               C1107 +
           ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
             C1109 * C426 + C49359 * C434) *
                C49047 +
            (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
             C1109 * C416 + C49359 * C427) *
                C114) *
               C1106) *
              C971 +
          (((C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
             C1111 * C2398 + C49324 * C2404) *
                C114 +
            (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
             C1111 * C2406 + C49324 * C2416) *
                C49047) *
               C1106 +
           ((C1109 * C974 + C49359 * C980 + C1110 * C2399 + C49347 * C2407 +
             C1111 * C2400 + C49324 * C2408) *
                C114 +
            (C1109 * C981 + C49359 * C989 + C1110 * C2409 + C49347 * C2417 +
             C1111 * C2410 + C49324 * C2418) *
                C49047) *
               C1107 +
           ((C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
             C1111 * C2402 + C49324 * C2412) *
                C114 +
            (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
             C1111 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C49030 * C434) * C49047 +
            (C113 * C416 + C49030 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C49030 * C978) * C114 +
            (C113 * C979 + C49030 * C988) * C49047) *
               C103 +
           ((C113 * C974 + C49030 * C980) * C114 +
            (C113 * C981 + C49030 * C989) * C49047) *
               C104 +
           ((C113 * C975 + C49030 * C982) * C114 +
            (C113 * C983 + C49030 * C990) * C49047) *
               C105 +
           ((C113 * C976 + C49030 * C984) * C114 +
            (C113 * C985 + C49030 * C991) * C49047) *
               C106 +
           ((C113 * C977 + C49030 * C986) * C114 +
            (C113 * C987 + C49030 * C992) * C49047) *
               C107) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C2534 +
            (C113 * C123 + C49030 * C136) * C49360 + C2951 * C2535 +
            C2952 * C49349 + C2953 * C2536 + C2954 * C49327) *
               C1106 +
           (C2538 + C2539 + C2540 + C2541 + C2569 + C2570) * C1107 +
           C2578 * C49311) *
              C970 -
          ((C2959 + C2960 + C2939 + C2940 + C2941 + C2942) * C49311 +
           (C2961 + C2962 + C2947 + C2948 + C2949 + C2950) * C1107 +
           (C3807 * C49327 + C3808 * C2536 + C2954 * C49349 + C2953 * C2535 +
            C2952 * C49360 + C2951 * C2534) *
               C1106) *
              C971 +
          ((C2953 * C2534 + C2954 * C49360 + C3808 * C2535 + C3807 * C49349 +
            (C113 * C3790 + C49030 * C3793) * C2536 +
            (C113 * C3794 + C49030 * C3799) * C49327) *
               C1106 +
           (C2562 * C2534 + C2563 * C49360 + C2958 * C2535 + C2957 * C49349 +
            (C113 * C3791 + C49030 * C3795) * C2536 +
            (C113 * C3796 + C49030 * C3800) * C49327) *
               C1107 +
           (C2565 * C2534 + C2566 * C49360 + C2956 * C2535 + C2955 * C49349 +
            (C113 * C3792 + C49030 * C3797) * C2536 +
            (C113 * C3798 + C49030 * C3801) * C49327) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C970 -
          (((C8384 + C8385 + C8386) * C49047 + (C8387 + C8388 + C8389) * C114) *
               C49311 +
           ((C8390 + C8391 + C8392) * C49047 + (C8393 + C8394 + C8395) * C114) *
               C49343 +
           ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
             C7967 * C426 + C7961 * C434) *
                C49047 +
            (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
             C7967 * C416 + C7961 * C427) *
                C114) *
               C49356) *
              C971 +
          (((C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C114 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49047) *
               C49356 +
           ((C7967 * C974 + C7961 * C980 + C7968 * C2399 + C7962 * C2407 +
             C7969 * C2400 + C49324 * C2408) *
                C114 +
            (C7967 * C981 + C7961 * C989 + C7968 * C2409 + C7962 * C2417 +
             C7969 * C2410 + C49324 * C2418) *
                C49047) *
               C49343 +
           ((C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
             C7969 * C2402 + C49324 * C2412) *
                C114 +
            (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
             C7969 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C970 -
          ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
            C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
            C9267 * C426 + C9261 * C434) *
               C49047 +
           (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
            C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
            C9267 * C416 + C9261 * C427) *
               C114) *
              C48935 * C971 +
          ((C9267 * C973 + C9261 * C978 + C9268 * C2397 + C9262 * C2403 +
            C9269 * C2398 + C9263 * C2404 + C9270 * C9912 + C9264 * C9914 +
            C9271 * C9913 + C9265 * C9915) *
               C114 +
           (C9267 * C979 + C9261 * C988 + C9268 * C2405 + C9262 * C2415 +
            C9269 * C2406 + C9263 * C2416 + C9270 * C9916 + C9264 * C9918 +
            C9271 * C9917 + C9265 * C9919) *
               C49047) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
            C7969 * C620 + C49324 * C625) *
               C2534 +
           (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
            C7969 * C626 + C49324 * C635) *
               C49360 +
           (C10371 + C10372 + C10373) * C2535 +
           (C10374 + C10375 + C10376) * C49349 + C11255 * C2536 +
           C11256 * C49327) *
              C48935 * C970 -
          ((C11257 + C11258 + C11259) * C49327 +
           (C11260 + C11261 + C11262) * C2536 +
           (C10382 + C10381 + C10380) * C49349 +
           (C10379 + C10378 + C10377) * C2535 +
           (C10376 + C10375 + C10374) * C49360 +
           (C10373 + C10372 + C10371) * C2534) *
              C48935 * C971 +
          (C11255 * C2534 + C11256 * C49360 +
           (C11262 + C11261 + C11260) * C2535 +
           (C11259 + C11258 + C11257) * C49349 +
           (C7967 * C3790 + C7961 * C3793 + C7968 * C11232 + C7962 * C11234 +
            C7969 * C11233 + C49324 * C11235) *
               C2536 +
           (C7967 * C3794 + C7961 * C3799 + C7968 * C11236 + C7962 * C11238 +
            C7969 * C11237 + C49324 * C11239) *
               C49327) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C49019 * C49002 * C110 -
          ((C5135 + C5136 + C5137 + C5138) * C49328 +
           (C5134 + C5133 + C5132 + C5131) * C3910 +
           (C5130 + C5129 + C5128 + C5127) * C3909 +
           (C5126 + C5125 + C5124 + C5123) * C3908) *
              C49019 * C49002 * C111 +
          (C5143 * C3908 + C5144 * C3909 +
           (C5138 + C5137 + C5136 + C5135) * C3910 +
           (C173 * C5120 + C172 * C49292 +
            (C113 * C417 + C49030 * C428) * C5121 +
            (C113 * C429 + C49030 * C435) * C49134) *
               C49328) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            (C8395 + C8394 + C8393) * C5121 +
            (C8392 + C8391 + C8390) * C49134) *
               C48945) *
              C49019 * C49002 * C110 -
          (((C8384 + C8385 + C8386) * C49134 + (C8387 + C8388 + C8389) * C5121 +
            (C8018 + C8017 + C8016) * C49292 +
            (C8015 + C8014 + C8013) * C5120) *
               C48945 +
           ((C8390 + C8391 + C8392) * C49134 + (C8393 + C8394 + C8395) * C5121 +
            (C8012 + C8011 + C8010) * C49292 +
            (C8009 + C8008 + C8007) * C5120) *
               C49269) *
              C49019 * C49002 * C111 +
          ((C8027 * C5120 + C8028 * C49292 + (C8389 + C8388 + C8387) * C5121 +
            (C8386 + C8385 + C8384) * C49134) *
               C49269 +
           ((C8024 + C8023 + C8022) * C5120 + (C8021 + C8020 + C8019) * C49292 +
            (C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
             C7969 * C1520 + C49324 * C1527) *
                C5121 +
            (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
             C7969 * C1528 + C49324 * C1532) *
                C49134) *
               C48945) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C5120 +
                      (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
                      C2952 * C49134) *
                         C3908 +
                     (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
                     C5144 * C49328) *
                        C49019 * C268 -
                    ((C5291 + C5292 + C5279 + C5280) * C49328 +
                     (C5281 + C5282 + C5283 + C5284) * C3910 +
                     (C5285 + C5286 + C5287 + C5288) * C3909 +
                     (C3386 * C49134 + C3385 * C5121 +
                      (C113 * C286 + C49030 * C294) * C49292 +
                      (C113 * C276 + C49030 * C287) * C5120) *
                         C3908) *
                        C49019 * C49319) *
                       C270 +
                   (((C5288 + C5287 + C5286 + C5285) * C3908 +
                     (C5284 + C5283 + C5282 + C5281) * C3909 +
                     (C5280 + C5279 + C5292 + C5291) * C3910 +
                     (C314 * C5120 + C313 * C49292 +
                      (C113 * C726 + C49030 * C735) * C5121 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C5135 + C5136 + C5137 + C5138) * C49328 +
                     (C5134 + C5133 + C5132 + C5131) * C3910 +
                     (C5130 + C5129 + C5128 + C5127) * C3909 +
                     (C5126 + C5125 + C5124 + C5123) * C3908) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C7967 * C115 + C7961 * C122 + C7968 * C276 +
                       C7962 * C287 + C7969 * C620 + C49324 * C625) *
                          C5120 +
                      (C7967 * C123 + C7961 * C136 + C7968 * C286 +
                       C7962 * C294 + C7969 * C626 + C49324 * C635) *
                          C49292 +
                      (C10371 + C10372 + C10373) * C5121 +
                      (C10374 + C10375 + C10376) * C49134) *
                         C49269 +
                     ((C8007 + C8008 + C8009) * C5120 +
                      (C8010 + C8011 + C8012) * C49292 +
                      (C8395 + C8394 + C8393) * C5121 +
                      (C8392 + C8391 + C8390) * C49134) *
                         C48945) *
                        C49019 * C268 -
                    (((C12795 + C12796 + C12797) * C49134 +
                      (C12798 + C12799 + C12800) * C5121 +
                      (C8208 + C8209 + C8210) * C49292 +
                      (C8211 + C8212 + C8213) * C5120) *
                         C48945 +
                     ((C10824 + C10823 + C10822) * C49134 +
                      (C10821 + C10820 + C10819) * C5121 +
                      (C7969 * C1327 + C49324 * C1333 + C7968 * C626 +
                       C7962 * C635 + C7967 * C286 + C7961 * C294) *
                          C49292 +
                      (C7969 * C1321 + C49324 * C1328 + C7968 * C620 +
                       C7962 * C625 + C7967 * C276 + C7961 * C287) *
                          C5120) *
                         C49269) *
                        C49019 * C49319) *
                       C270 +
                   ((((C8213 + C8212 + C8211) * C5120 +
                      (C8210 + C8209 + C8208) * C49292 +
                      (C12800 + C12799 + C12798) * C5121 +
                      (C12797 + C12796 + C12795) * C49134) *
                         C49269 +
                     ((C8207 + C8206 + C8205) * C5120 +
                      (C8204 + C8203 + C8202) * C49292 +
                      (C7967 * C724 + C7961 * C731 + C7968 * C1517 +
                       C7962 * C1522 + C7969 * C1985 + C49324 * C1990) *
                          C5121 +
                      (C7967 * C732 + C7961 * C739 + C7968 * C1521 +
                       C7962 * C1529 + C7969 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C8384 + C8385 + C8386) * C49134 +
                      (C8387 + C8388 + C8389) * C5121 +
                      (C8018 + C8017 + C8016) * C49292 +
                      (C8015 + C8014 + C8013) * C5120) *
                         C48945 +
                     ((C8390 + C8391 + C8392) * C49134 +
                      (C8393 + C8394 + C8395) * C5121 +
                      (C8012 + C8011 + C8010) * C49292 +
                      (C8009 + C8008 + C8007) * C5120) *
                         C49269) *
                        C49019 * C268) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C410 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C49002 * C270 +
          (((C5434 + C5433 + C5432 + C5431) * C3908 +
            (C5430 + C5429 + C5428 + C5427) * C3909 +
            (C5426 + C5425 + C5424 + C5423) * C3910 +
            (C454 * C5120 + C453 * C49292 +
             (C113 * C977 + C49030 * C986) * C5121 +
             (C113 * C987 + C49030 * C992) * C49134) *
                C49328) *
               C49321 -
           ((C5135 + C5136 + C5137 + C5138) * C49328 +
            (C5134 + C5133 + C5132 + C5131) * C3910 +
            (C5130 + C5129 + C5128 + C5127) * C3909 +
            (C5126 + C5125 + C5124 + C5123) * C3908) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C410 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C49002 * C270 +
          (((C12999 * C5120 + C13000 * C49292 +
             (C10383 + C10384 + C10385) * C5121 +
             (C10386 + C10387 + C10388) * C49134) *
                C49269 +
            ((C8389 + C8388 + C8387) * C5120 +
             (C8386 + C8385 + C8384) * C49292 +
             (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
              C7969 * C2402 + C49324 * C2412) *
                 C5121 +
             (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
              C7969 * C2414 + C49324 * C2420) *
                 C49134) *
                C48945) *
               C49321 -
           (((C8384 + C8385 + C8386) * C49134 +
             (C8387 + C8388 + C8389) * C5121 +
             (C8018 + C8017 + C8016) * C49292 +
             (C8015 + C8014 + C8013) * C5120) *
                C48945 +
            (C13001 * C49134 + C13002 * C5121 +
             (C8012 + C8011 + C8010) * C49292 +
             (C8009 + C8008 + C8007) * C5120) *
                C49269) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C49030 * C122) * C5120 +
                      (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
                      C2952 * C49134) *
                         C3908 +
                     (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
                     C5144 * C49328) *
                        C49019 * C550 -
                    ((C5291 + C5292 + C5279 + C5280) * C49328 +
                     (C5281 + C5282 + C5283 + C5284) * C3910 +
                     (C5285 + C5286 + C5287 + C5288) * C3909 +
                     (C3386 * C49134 + C3385 * C5121 +
                      (C113 * C286 + C49030 * C294) * C49292 +
                      (C113 * C276 + C49030 * C287) * C5120) *
                         C3908) *
                        C49019 * C49319) *
                       C552 +
                   (((C5288 + C5287 + C5286 + C5285) * C3908 +
                     (C5284 + C5283 + C5282 + C5281) * C3909 +
                     (C5280 + C5279 + C5292 + C5291) * C3910 +
                     (C314 * C5120 + C313 * C49292 +
                      (C113 * C726 + C49030 * C735) * C5121 +
                      (C113 * C736 + C49030 * C741) * C49134) *
                         C49328) *
                        C49019 * C49319 -
                    ((C5135 + C5136 + C5137 + C5138) * C49328 +
                     (C5134 + C5133 + C5132 + C5131) * C3910 +
                     (C5130 + C5129 + C5128 + C5127) * C3909 +
                     (C5126 + C5125 + C5124 + C5123) * C3908) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C7967 * C115 + C7961 * C122 + C7968 * C276 +
                       C7962 * C287 + C7969 * C620 + C49324 * C625) *
                          C5120 +
                      (C7967 * C123 + C7961 * C136 + C7968 * C286 +
                       C7962 * C294 + C7969 * C626 + C49324 * C635) *
                          C49292 +
                      (C10371 + C10372 + C10373) * C5121 +
                      (C10374 + C10375 + C10376) * C49134) *
                         C49269 +
                     ((C8007 + C8008 + C8009) * C5120 +
                      (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
                      C13000 * C49134) *
                         C48945) *
                        C49019 * C550 -
                    (((C12795 + C12796 + C12797) * C49134 +
                      (C12798 + C12799 + C12800) * C5121 +
                      (C8208 + C8209 + C8210) * C49292 +
                      (C8211 + C8212 + C8213) * C5120) *
                         C48945 +
                     ((C10824 + C10823 + C10822) * C49134 +
                      (C10821 + C10820 + C10819) * C5121 +
                      (C7969 * C1327 + C49324 * C1333 + C7968 * C626 +
                       C7962 * C635 + C7967 * C286 + C7961 * C294) *
                          C49292 +
                      (C7969 * C1321 + C49324 * C1328 + C7968 * C620 +
                       C7962 * C625 + C7967 * C276 + C7961 * C287) *
                          C5120) *
                         C49269) *
                        C49019 * C49319) *
                       C552 +
                   ((((C8213 + C8212 + C8211) * C5120 +
                      (C8210 + C8209 + C8208) * C49292 +
                      (C12800 + C12799 + C12798) * C5121 +
                      (C12797 + C12796 + C12795) * C49134) *
                         C49269 +
                     ((C8207 + C8206 + C8205) * C5120 +
                      (C8204 + C8203 + C8202) * C49292 +
                      (C7967 * C724 + C7961 * C731 + C7968 * C1517 +
                       C7962 * C1522 + C7969 * C1985 + C49324 * C1990) *
                          C5121 +
                      (C7967 * C732 + C7961 * C739 + C7968 * C1521 +
                       C7962 * C1529 + C7969 * C1991 + C49324 * C1994) *
                          C49134) *
                         C48945) *
                        C49019 * C49319 -
                    (((C8384 + C8385 + C8386) * C49134 +
                      (C8387 + C8388 + C8389) * C5121 +
                      (C8018 + C8017 + C8016) * C49292 +
                      (C8015 + C8014 + C8013) * C5120) *
                         C48945 +
                     (C13001 * C49134 + C13002 * C5121 +
                      (C8012 + C8011 + C8010) * C49292 +
                      (C8009 + C8008 + C8007) * C5120) *
                         C49269) *
                        C49019 * C550) *
                       C49317)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C49019 * C616 -
          ((C5291 + C5292 + C5279 + C5280) * C49328 +
           (C5281 + C5282 + C5283 + C5284) * C3910 +
           (C5285 + C5286 + C5287 + C5288) * C3909 +
           (C3386 * C49134 + C3385 * C5121 +
            (C113 * C286 + C49030 * C294) * C49292 +
            (C113 * C276 + C49030 * C287) * C5120) *
               C3908) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C5120 +
            (C113 * C626 + C49030 * C635) * C49292 +
            (C113 * C1519 + C49030 * C1526) * C5121 +
            (C113 * C1525 + C49030 * C1531) * C49134) *
               C3908 +
           ((C113 * C621 + C49030 * C627) * C5120 +
            (C113 * C628 + C49030 * C636) * C49292 +
            (C113 * C1518 + C49030 * C1524) * C5121 +
            (C113 * C1523 + C49030 * C1530) * C49134) *
               C3909 +
           ((C113 * C622 + C49030 * C629) * C5120 +
            (C113 * C630 + C49030 * C637) * C49292 +
            (C113 * C1517 + C49030 * C1522) * C5121 +
            (C113 * C1521 + C49030 * C1529) * C49134) *
               C3910 +
           ((C113 * C623 + C49030 * C631) * C5120 +
            (C113 * C632 + C49030 * C638) * C49292 +
            (C113 * C1520 + C49030 * C1527) * C5121 +
            (C113 * C1528 + C49030 * C1532) * C49134) *
               C49328) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            C12999 * C5121 + C13000 * C49134) *
               C48945) *
              C49019 * C616 -
          (((C12795 + C12796 + C12797) * C49134 +
            (C12798 + C12799 + C12800) * C5121 +
            (C8208 + C8209 + C8210) * C49292 +
            (C8211 + C8212 + C8213) * C5120) *
               C48945 +
           ((C10824 + C10823 + C10822) * C49134 +
            (C10821 + C10820 + C10819) * C5121 +
            (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49292 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C5120) *
               C49269) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C5120 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49292 +
            (C7967 * C1519 + C7961 * C1526 + C7968 * C1983 + C7962 * C1986 +
             C7969 * C9444 + C49324 * C9447) *
                C5121 +
            (C7967 * C1525 + C7961 * C1531 + C7968 * C1987 + C7962 * C1992 +
             C7969 * C9446 + C49324 * C9450) *
                C49134) *
               C49269 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C5120 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49292 +
            (C7967 * C1518 + C7961 * C1524 + C7968 * C1984 + C7962 * C1988 +
             C7969 * C9445 + C49324 * C9448) *
                C5121 +
            (C7967 * C1523 + C7961 * C1530 + C7968 * C1989 + C7962 * C1993 +
             C7969 * C9449 + C49324 * C9451) *
                C49134) *
               C48945) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C410 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C550 +
          (((C3385 * C5120 + C3386 * C49292 + C3387 * C5121 + C3388 * C49134) *
                C3908 +
            (C2756 * C5120 + C2755 * C49292 + C2754 * C5121 + C2753 * C49134) *
                C3909 +
            (C2752 * C5120 + C2751 * C49292 + C2750 * C5121 + C2749 * C49134) *
                C3910 +
            (C5290 * C5120 + C5289 * C49292 +
             (C113 * C2724 + C49030 * C2725) * C5121 +
             (C113 * C2726 + C49030 * C2727) * C49134) *
                C49328) *
               C49321 -
           ((C5291 + C5292 + C5279 + C5280) * C49328 +
            (C5281 + C5282 + C5283 + C5284) * C3910 +
            (C5285 + C5286 + C5287 + C5288) * C3909 +
            (C3386 * C49134 + C3385 * C5121 +
             (C113 * C286 + C49030 * C294) * C49292 +
             (C113 * C276 + C49030 * C287) * C5120) *
                C3908) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C410 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C550 +
          ((((C10819 + C10820 + C10821) * C5120 +
             (C10822 + C10823 + C10824) * C49292 +
             (C10825 + C10826 + C10827) * C5121 +
             (C10828 + C10829 + C10830) * C49134) *
                C49269 +
            ((C12800 + C12799 + C12798) * C5120 +
             (C12797 + C12796 + C12795) * C49292 +
             (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
              C7969 * C10176 + C49324 * C10177) *
                 C5121 +
             (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
              C7969 * C10178 + C49324 * C10179) *
                 C49134) *
                C48945) *
               C49321 -
           (((C12795 + C12796 + C12797) * C49134 +
             (C12798 + C12799 + C12800) * C5121 +
             (C8208 + C8209 + C8210) * C49292 +
             (C8211 + C8212 + C8213) * C5120) *
                C48945 +
            ((C10824 + C10823 + C10822) * C49134 +
             (C10821 + C10820 + C10819) * C5121 +
             (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49292 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C5120) *
                C49269) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C824 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C49002 * C552 +
          (((C5434 + C5433 + C5432 + C5431) * C3908 +
            (C5430 + C5429 + C5428 + C5427) * C3909 +
            (C5426 + C5425 + C5424 + C5423) * C3910 +
            (C454 * C5120 + C453 * C49292 +
             (C113 * C977 + C49030 * C986) * C5121 +
             (C113 * C987 + C49030 * C992) * C49134) *
                C49328) *
               C49321 -
           ((C5135 + C5136 + C5137 + C5138) * C49328 +
            (C5134 + C5133 + C5132 + C5131) * C3910 +
            (C5130 + C5129 + C5128 + C5127) * C3909 +
            (C5126 + C5125 + C5124 + C5123) * C3908) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C824 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C49002 * C552 +
          (((C12999 * C5120 + C13000 * C49292 +
             (C10383 + C10384 + C10385) * C5121 +
             (C10386 + C10387 + C10388) * C49134) *
                C49269 +
            ((C8389 + C8388 + C8387) * C5120 +
             (C8386 + C8385 + C8384) * C49292 +
             (C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
              C7969 * C2402 + C49324 * C2412) *
                 C5121 +
             (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
              C7969 * C2414 + C49324 * C2420) *
                 C49134) *
                C48945) *
               C49321 -
           (((C8384 + C8385 + C8386) * C49134 +
             (C8387 + C8388 + C8389) * C5121 +
             (C8018 + C8017 + C8016) * C49292 +
             (C8015 + C8014 + C8013) * C5120) *
                C48945 +
            (C13001 * C49134 + C13002 * C5121 +
             (C8012 + C8011 + C8010) * C49292 +
             (C8009 + C8008 + C8007) * C5120) *
                C49269) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C5120 +
             (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
             C2952 * C49134) *
                C3908 +
            (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
            C5144 * C49328) *
               C824 -
           ((C5423 + C5424 + C5425 + C5426) * C49328 +
            (C5427 + C5428 + C5429 + C5430) * C3910 +
            (C5431 + C5432 + C5433 + C5434) * C3909 +
            (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
                C3908) *
               C49321) *
              C268 +
          (((C3385 * C5120 + C3386 * C49292 + C3387 * C5121 + C3388 * C49134) *
                C3908 +
            (C2756 * C5120 + C2755 * C49292 + C2754 * C5121 + C2753 * C49134) *
                C3909 +
            (C2752 * C5120 + C2751 * C49292 + C2750 * C5121 + C2749 * C49134) *
                C3910 +
            (C5290 * C5120 + C5289 * C49292 +
             (C113 * C2724 + C49030 * C2725) * C5121 +
             (C113 * C2726 + C49030 * C2727) * C49134) *
                C49328) *
               C49321 -
           ((C5291 + C5292 + C5279 + C5280) * C49328 +
            (C5281 + C5282 + C5283 + C5284) * C3910 +
            (C5285 + C5286 + C5287 + C5288) * C3909 +
            (C3386 * C49134 + C3385 * C5121 +
             (C113 * C286 + C49030 * C294) * C49292 +
             (C113 * C276 + C49030 * C287) * C5120) *
                C3908) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C5120 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49292 +
             (C10371 + C10372 + C10373) * C5121 +
             (C10374 + C10375 + C10376) * C49134) *
                C49269 +
            ((C8007 + C8008 + C8009) * C5120 +
             (C8010 + C8011 + C8012) * C49292 + C12999 * C5121 +
             C13000 * C49134) *
                C48945) *
               C824 -
           (((C10388 + C10387 + C10386) * C49134 +
             (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
             C13002 * C5120) *
                C48945 +
            ((C10382 + C10381 + C10380) * C49134 +
             (C10379 + C10378 + C10377) * C5121 +
             (C10376 + C10375 + C10374) * C49292 +
             (C10373 + C10372 + C10371) * C5120) *
                C49269) *
               C49321) *
              C268 +
          ((((C10819 + C10820 + C10821) * C5120 +
             (C10822 + C10823 + C10824) * C49292 +
             (C10825 + C10826 + C10827) * C5121 +
             (C10828 + C10829 + C10830) * C49134) *
                C49269 +
            ((C12800 + C12799 + C12798) * C5120 +
             (C12797 + C12796 + C12795) * C49292 +
             (C7967 * C2399 + C7961 * C2407 + C7968 * C2400 + C7962 * C2408 +
              C7969 * C10176 + C49324 * C10177) *
                 C5121 +
             (C7967 * C2409 + C7961 * C2417 + C7968 * C2410 + C7962 * C2418 +
              C7969 * C10178 + C49324 * C10179) *
                 C49134) *
                C48945) *
               C49321 -
           (((C12795 + C12796 + C12797) * C49134 +
             (C12798 + C12799 + C12800) * C5121 +
             (C8208 + C8209 + C8210) * C49292 +
             (C8211 + C8212 + C8213) * C5120) *
                C48945 +
            ((C10824 + C10823 + C10822) * C49134 +
             (C10821 + C10820 + C10819) * C5121 +
             (C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49292 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C5120) *
                C49269) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C5120 +
            (C113 * C123 + C49030 * C136) * C49292 + C2951 * C5121 +
            C2952 * C49134) *
               C3908 +
           (C5123 + C5124 + C5125 + C5126) * C3909 + C5143 * C3910 +
           C5144 * C49328) *
              C970 -
          ((C5423 + C5424 + C5425 + C5426) * C49328 +
           (C5427 + C5428 + C5429 + C5430) * C3910 +
           (C5431 + C5432 + C5433 + C5434) * C3909 +
           (C2954 * C49134 + C2953 * C5121 + C2952 * C49292 + C2951 * C5120) *
               C3908) *
              C971 +
          ((C2953 * C5120 + C2954 * C49292 + C3808 * C5121 + C3807 * C49134) *
               C3908 +
           (C2562 * C5120 + C2563 * C49292 + C2958 * C5121 + C2957 * C49134) *
               C3909 +
           (C2565 * C5120 + C2566 * C49292 + C2956 * C5121 + C2955 * C49134) *
               C3910 +
           (C2568 * C5120 + C2567 * C49292 +
            (C113 * C2913 + C49030 * C2920) * C5121 +
            (C113 * C2921 + C49030 * C2925) * C49134) *
               C49328) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C5120 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49292 +
            (C10371 + C10372 + C10373) * C5121 +
            (C10374 + C10375 + C10376) * C49134) *
               C49269 +
           ((C8007 + C8008 + C8009) * C5120 + (C8010 + C8011 + C8012) * C49292 +
            C12999 * C5121 + C13000 * C49134) *
               C48945) *
              C970 -
          (((C10388 + C10387 + C10386) * C49134 +
            (C10385 + C10384 + C10383) * C5121 + C13001 * C49292 +
            C13002 * C5120) *
               C48945 +
           ((C10382 + C10381 + C10380) * C49134 +
            (C10379 + C10378 + C10377) * C5121 +
            (C10376 + C10375 + C10374) * C49292 +
            (C10373 + C10372 + C10371) * C5120) *
               C49269) *
              C971 +
          ((C11255 * C5120 + C11256 * C49292 +
            (C11262 + C11261 + C11260) * C5121 +
            (C11259 + C11258 + C11257) * C49134) *
               C49269 +
           ((C10383 + C10384 + C10385) * C5120 +
            (C10386 + C10387 + C10388) * C49292 +
            (C7967 * C2911 + C7961 * C2917 + C7968 * C3365 + C7962 * C3369 +
             C7969 * C10327 + C49324 * C10330) *
                C5121 +
            (C7967 * C2916 + C7961 * C2923 + C7968 * C3370 + C7962 * C3374 +
             C7969 * C10331 + C49324 * C10333) *
                C49134) *
               C48945) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C49002 * C110 -
          ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
           (C177 + C176) * C104 + (C175 + C174) * C103) *
              C49019 * C49002 * C111 +
          (C184 * C103 + C185 * C104 + C186 * C105 + (C183 + C182) * C106 +
           ((C113 * C121 + C49030 * C134) * C114 +
            (C113 * C135 + C49030 * C142) * C49047) *
               C107) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C49002 * C110 -
          (((C1161 + C1162 + C1163) * C49047 + (C1164 + C1165 + C1166) * C114) *
               C49311 +
           ((C1160 + C1159 + C1158) * C49047 + (C1157 + C1156 + C1155) * C114) *
               C1107 +
           ((C1154 + C1153 + C1152) * C49047 + (C1151 + C1150 + C1149) * C114) *
               C1106) *
              C49019 * C49002 * C111 +
          (C1173 * C1106 +
           ((C1166 + C1165 + C1164) * C114 + (C1163 + C1162 + C1161) * C49047) *
               C1107 +
           ((C1109 * C119 + C49359 * C130 + C1110 * C272 + C49347 * C279 +
             C1111 * C624 + C49324 * C633) *
                C114 +
            (C1109 * C131 + C49359 * C140 + C1110 * C278 + C49347 * C290 +
             C1111 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C49002 * C110 -
          (((C8019 + C8020 + C8021) * C49047 + (C8022 + C8023 + C8024) * C114) *
               C49311 +
           ((C8018 + C8017 + C8016) * C49047 + (C8015 + C8014 + C8013) * C114) *
               C49343 +
           ((C8012 + C8011 + C8010) * C49047 + (C8009 + C8008 + C8007) * C114) *
               C49356) *
              C49019 * C49002 * C111 +
          (C8031 * C49356 +
           ((C8024 + C8023 + C8022) * C114 + (C8021 + C8020 + C8019) * C49047) *
               C49343 +
           ((C7967 * C119 + C7961 * C130 + C7968 * C272 + C7962 * C279 +
             C7969 * C624 + C49324 * C633) *
                C114 +
            (C7967 * C131 + C7961 * C140 + C7968 * C278 + C7962 * C290 +
             C7969 * C634 + C49324 * C639) *
                C49047) *
               C49311) *
              C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C49002 * C110 -
          ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
            C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
            C9267 * C125 + C9261 * C137) *
               C49047 +
           (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
            C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
            C9267 * C116 + C9261 * C124) *
               C114) *
              C48935 * C49019 * C49002 * C111 +
          ((C9267 * C117 + C9261 * C126 + C9268 * C274 + C9262 * C283 +
            C9269 * C622 + C9263 * C629 + C9270 * C1319 + C9264 * C1324 +
            C9271 * C1827 + C9265 * C1832) *
               C114 +
           (C9267 * C127 + C9261 * C138 + C9268 * C282 + C9262 * C292 +
            C9269 * C630 + C9263 * C637 + C9270 * C1323 + C9264 * C1331 +
            C9271 * C1833 + C9265 * C1836) *
               C49047) *
              C48935 * C49019 * C49002 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C268 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C270 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C268 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C270 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C268 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C270 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C268 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C270 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C268) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C270 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C270 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C270 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C270 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C410) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C49019 * C550 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C49019 * C49319) *
              C552 +
          (((C328 + C327) * C103 + (C326 + C325) * C104 + (C324 + C323) * C105 +
            (C322 + C321) * C106 +
            ((C113 * C277 + C49030 * C288) * C114 +
             (C113 * C289 + C49030 * C295) * C49047) *
                C107) *
               C49019 * C49319 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C49019 * C550 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C49019 * C49319) *
              C552 +
          ((((C1371 + C1370 + C1369) * C114 +
             (C1368 + C1367 + C1366) * C49047) *
                C1106 +
            ((C1365 + C1364 + C1363) * C114 +
             (C1362 + C1361 + C1360) * C49047) *
                C1107 +
            ((C1109 * C273 + C49359 * C281 + C1110 * C623 + C49347 * C631 +
              C1111 * C1322 + C49324 * C1329) *
                 C114 +
             (C1109 * C280 + C49359 * C291 + C1110 * C632 + C49347 * C638 +
              C1111 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C49019 * C550 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C49019 * C49319) *
              C552 +
          ((((C8213 + C8212 + C8211) * C114 +
             (C8210 + C8209 + C8208) * C49047) *
                C49356 +
            ((C8207 + C8206 + C8205) * C114 +
             (C8204 + C8203 + C8202) * C49047) *
                C49343 +
            ((C7967 * C273 + C7961 * C281 + C7968 * C623 + C7962 * C631 +
              C7969 * C1322 + C49324 * C1329) *
                 C114 +
             (C7967 * C280 + C7961 * C291 + C7968 * C632 + C7962 * C638 +
              C7969 * C1330 + C49324 * C1334) *
                 C49047) *
                C49311) *
               C49019 * C49319 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C49019 * C550 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C49019 * C49319) *
              C552 +
          (((C9267 * C275 + C9261 * C285 + C9268 * C621 + C9262 * C627 +
             C9269 * C1320 + C9263 * C1326 + C9270 * C1826 + C9264 * C1830 +
             C9271 * C9355 + C9265 * C9358) *
                C114 +
            (C9267 * C284 + C9261 * C293 + C9268 * C628 + C9262 * C636 +
             C9269 * C1325 + C9263 * C1332 + C9270 * C1831 + C9264 * C1835 +
             C9271 * C9359 + C9265 * C9361) *
                C49047) *
               C48935 * C49019 * C49319 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C49019 * C550) *
              C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C49019 * C616 -
          ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
           (C327 + C328) * C104 +
           ((C113 * C286 + C49030 * C294) * C49047 +
            (C113 * C276 + C49030 * C287) * C114) *
               C103) *
              C49019 * C617 +
          (((C113 * C620 + C49030 * C625) * C114 +
            (C113 * C626 + C49030 * C635) * C49047) *
               C103 +
           ((C113 * C621 + C49030 * C627) * C114 +
            (C113 * C628 + C49030 * C636) * C49047) *
               C104 +
           ((C113 * C622 + C49030 * C629) * C114 +
            (C113 * C630 + C49030 * C637) * C49047) *
               C105 +
           ((C113 * C623 + C49030 * C631) * C114 +
            (C113 * C632 + C49030 * C638) * C49047) *
               C106 +
           ((C113 * C624 + C49030 * C633) * C114 +
            (C113 * C634 + C49030 * C639) * C49047) *
               C107) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C49019 * C616 -
          (((C1360 + C1361 + C1362) * C49047 + (C1363 + C1364 + C1365) * C114) *
               C49311 +
           ((C1366 + C1367 + C1368) * C49047 + (C1369 + C1370 + C1371) * C114) *
               C1107 +
           ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
             C1109 * C286 + C49359 * C294) *
                C49047 +
            (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
             C1109 * C276 + C49359 * C287) *
                C114) *
               C1106) *
              C49019 * C617 +
          (((C1109 * C620 + C49359 * C625 + C1110 * C1321 + C49347 * C1328 +
             C1111 * C1825 + C49324 * C1828) *
                C114 +
            (C1109 * C626 + C49359 * C635 + C1110 * C1327 + C49347 * C1333 +
             C1111 * C1829 + C49324 * C1834) *
                C49047) *
               C1106 +
           ((C1109 * C621 + C49359 * C627 + C1110 * C1320 + C49347 * C1326 +
             C1111 * C1826 + C49324 * C1830) *
                C114 +
            (C1109 * C628 + C49359 * C636 + C1110 * C1325 + C49347 * C1332 +
             C1111 * C1831 + C49324 * C1835) *
                C49047) *
               C1107 +
           ((C1109 * C622 + C49359 * C629 + C1110 * C1319 + C49347 * C1324 +
             C1111 * C1827 + C49324 * C1832) *
                C114 +
            (C1109 * C630 + C49359 * C637 + C1110 * C1323 + C49347 * C1331 +
             C1111 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C49019 * C616 -
          (((C8202 + C8203 + C8204) * C49047 + (C8205 + C8206 + C8207) * C114) *
               C49311 +
           ((C8208 + C8209 + C8210) * C49047 + (C8211 + C8212 + C8213) * C114) *
               C49343 +
           ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
             C7967 * C286 + C7961 * C294) *
                C49047 +
            (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
             C7967 * C276 + C7961 * C287) *
                C114) *
               C49356) *
              C49019 * C617 +
          (((C7967 * C620 + C7961 * C625 + C7968 * C1321 + C7962 * C1328 +
             C7969 * C1825 + C49324 * C1828) *
                C114 +
            (C7967 * C626 + C7961 * C635 + C7968 * C1327 + C7962 * C1333 +
             C7969 * C1829 + C49324 * C1834) *
                C49047) *
               C49356 +
           ((C7967 * C621 + C7961 * C627 + C7968 * C1320 + C7962 * C1326 +
             C7969 * C1826 + C49324 * C1830) *
                C114 +
            (C7967 * C628 + C7961 * C636 + C7968 * C1325 + C7962 * C1332 +
             C7969 * C1831 + C49324 * C1835) *
                C49047) *
               C49343 +
           ((C7967 * C622 + C7961 * C629 + C7968 * C1319 + C7962 * C1324 +
             C7969 * C1827 + C49324 * C1832) *
                C114 +
            (C7967 * C630 + C7961 * C637 + C7968 * C1323 + C7962 * C1331 +
             C7969 * C1833 + C49324 * C1836) *
                C49047) *
               C49311) *
              C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C49019 * C616 -
          ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
            C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
            C9267 * C286 + C9261 * C294) *
               C49047 +
           (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
            C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
            C9267 * C276 + C9261 * C287) *
               C114) *
              C48935 * C49019 * C617 +
          ((C9267 * C620 + C9261 * C625 + C9268 * C1321 + C9262 * C1328 +
            C9269 * C1825 + C9263 * C1828 + C9270 * C9354 + C9264 * C9357 +
            C9271 * C9596 + C9265 * C9597) *
               C114 +
           (C9267 * C626 + C9261 * C635 + C9268 * C1327 + C9262 * C1333 +
            C9269 * C1829 + C9263 * C1834 + C9270 * C9356 + C9264 * C9360 +
            C9271 * C9598 + C9265 * C9599) *
               C49047) *
              C48935 * C49019 * C618) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C410 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C550 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C410 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C550 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C410 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C550 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C410 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C550 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C410) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C49002 * C552 +
          (((C468 + C467) * C103 + (C466 + C465) * C104 + (C464 + C463) * C105 +
            (C462 + C461) * C106 +
            ((C113 * C417 + C49030 * C428) * C114 +
             (C113 * C429 + C49030 * C435) * C49047) *
                C107) *
               C49321 -
           ((C182 + C183) * C107 + (C181 + C180) * C106 + (C179 + C178) * C105 +
            (C177 + C176) * C104 + (C175 + C174) * C103) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C49002 * C552 +
          ((((C1569 + C1568 + C1567) * C114 +
             (C1566 + C1565 + C1564) * C49047) *
                C1106 +
            ((C1563 + C1562 + C1561) * C114 +
             (C1560 + C1559 + C1558) * C49047) *
                C1107 +
            ((C1109 * C413 + C49359 * C421 + C1110 * C725 + C49347 * C733 +
              C1111 * C1520 + C49324 * C1527) *
                 C114 +
             (C1109 * C420 + C49359 * C431 + C1110 * C734 + C49347 * C740 +
              C1111 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1161 + C1162 + C1163) * C49047 +
             (C1164 + C1165 + C1166) * C114) *
                C49311 +
            ((C1160 + C1159 + C1158) * C49047 +
             (C1157 + C1156 + C1155) * C114) *
                C1107 +
            ((C1154 + C1153 + C1152) * C49047 +
             (C1151 + C1150 + C1149) * C114) *
                C1106) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C49002 * C552 +
          ((((C8395 + C8394 + C8393) * C114 +
             (C8392 + C8391 + C8390) * C49047) *
                C49356 +
            ((C8389 + C8388 + C8387) * C114 +
             (C8386 + C8385 + C8384) * C49047) *
                C49343 +
            ((C7967 * C413 + C7961 * C421 + C7968 * C725 + C7962 * C733 +
              C7969 * C1520 + C49324 * C1527) *
                 C114 +
             (C7967 * C420 + C7961 * C431 + C7968 * C734 + C7962 * C740 +
              C7969 * C1528 + C49324 * C1532) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8019 + C8020 + C8021) * C49047 +
             (C8022 + C8023 + C8024) * C114) *
                C49311 +
            ((C8018 + C8017 + C8016) * C49047 +
             (C8015 + C8014 + C8013) * C114) *
                C49343 +
            ((C8012 + C8011 + C8010) * C49047 +
             (C8009 + C8008 + C8007) * C114) *
                C49356) *
               C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C49002 * C552 +
          (((C9267 * C415 + C9261 * C425 + C9268 * C723 + C9262 * C729 +
             C9269 * C1518 + C9263 * C1524 + C9270 * C1984 + C9264 * C1988 +
             C9271 * C9445 + C9265 * C9448) *
                C114 +
            (C9267 * C424 + C9261 * C433 + C9268 * C730 + C9262 * C738 +
             C9269 * C1523 + C9263 * C1530 + C9270 * C1989 + C9264 * C1993 +
             C9271 * C9449 + C9265 * C9451) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C1831 + C9265 * C1835 + C9270 * C1325 + C9264 * C1332 +
             C9269 * C628 + C9263 * C636 + C9268 * C284 + C9262 * C293 +
             C9267 * C125 + C9261 * C137) *
                C49047 +
            (C9271 * C1826 + C9265 * C1830 + C9270 * C1320 + C9264 * C1326 +
             C9269 * C621 + C9263 * C627 + C9268 * C275 + C9262 * C285 +
             C9267 * C116 + C9261 * C124) *
                C114) *
               C48935 * C824) *
              C49002 * C49317)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C49030 * C122) * C114 +
             (C113 * C123 + C49030 * C136) * C49047) *
                C103 +
            (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
               C824 -
           ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
            (C467 + C468) * C104 +
            ((C113 * C426 + C49030 * C434) * C49047 +
             (C113 * C416 + C49030 * C427) * C114) *
                C103) *
               C49321) *
              C268 +
          ((((C113 * C722 + C49030 * C727) * C114 +
             (C113 * C728 + C49030 * C737) * C49047) *
                C103 +
            ((C113 * C723 + C49030 * C729) * C114 +
             (C113 * C730 + C49030 * C738) * C49047) *
                C104 +
            ((C113 * C724 + C49030 * C731) * C114 +
             (C113 * C732 + C49030 * C739) * C49047) *
                C105 +
            ((C113 * C725 + C49030 * C733) * C114 +
             (C113 * C734 + C49030 * C740) * C49047) *
                C106 +
            ((C113 * C726 + C49030 * C735) * C114 +
             (C113 * C736 + C49030 * C741) * C49047) *
                C107) *
               C49321 -
           ((C321 + C322) * C107 + (C323 + C324) * C106 + (C325 + C326) * C105 +
            (C327 + C328) * C104 +
            ((C113 * C286 + C49030 * C294) * C49047 +
             (C113 * C276 + C49030 * C287) * C114) *
                C103) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
              C1111 * C620 + C49324 * C625) *
                 C114 +
             (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
              C1111 * C626 + C49324 * C635) *
                 C49047) *
                C1106 +
            ((C1149 + C1150 + C1151) * C114 +
             (C1152 + C1153 + C1154) * C49047) *
                C1107 +
            C1173 * C49311) *
               C824 -
           (((C1558 + C1559 + C1560) * C49047 +
             (C1561 + C1562 + C1563) * C114) *
                C49311 +
            ((C1564 + C1565 + C1566) * C49047 +
             (C1567 + C1568 + C1569) * C114) *
                C1107 +
            ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
              C1109 * C426 + C49359 * C434) *
                 C49047 +
             (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
              C1109 * C416 + C49359 * C427) *
                 C114) *
                C1106) *
               C49321) *
              C268 +
          ((((C1109 * C722 + C49359 * C727 + C1110 * C1519 + C49347 * C1526 +
              C1111 * C1983 + C49324 * C1986) *
                 C114 +
             (C1109 * C728 + C49359 * C737 + C1110 * C1525 + C49347 * C1531 +
              C1111 * C1987 + C49324 * C1992) *
                 C49047) *
                C1106 +
            ((C1109 * C723 + C49359 * C729 + C1110 * C1518 + C49347 * C1524 +
              C1111 * C1984 + C49324 * C1988) *
                 C114 +
             (C1109 * C730 + C49359 * C738 + C1110 * C1523 + C49347 * C1530 +
              C1111 * C1989 + C49324 * C1993) *
                 C49047) *
                C1107 +
            ((C1109 * C724 + C49359 * C731 + C1110 * C1517 + C49347 * C1522 +
              C1111 * C1985 + C49324 * C1990) *
                 C114 +
             (C1109 * C732 + C49359 * C739 + C1110 * C1521 + C49347 * C1529 +
              C1111 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C1360 + C1361 + C1362) * C49047 +
             (C1363 + C1364 + C1365) * C114) *
                C49311 +
            ((C1366 + C1367 + C1368) * C49047 +
             (C1369 + C1370 + C1371) * C114) *
                C1107 +
            ((C1111 * C1327 + C49324 * C1333 + C1110 * C626 + C49347 * C635 +
              C1109 * C286 + C49359 * C294) *
                 C49047 +
             (C1111 * C1321 + C49324 * C1328 + C1110 * C620 + C49347 * C625 +
              C1109 * C276 + C49359 * C287) *
                 C114) *
                C1106) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
              C7969 * C620 + C49324 * C625) *
                 C114 +
             (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
              C7969 * C626 + C49324 * C635) *
                 C49047) *
                C49356 +
            ((C8007 + C8008 + C8009) * C114 +
             (C8010 + C8011 + C8012) * C49047) *
                C49343 +
            C8031 * C49311) *
               C824 -
           (((C8384 + C8385 + C8386) * C49047 +
             (C8387 + C8388 + C8389) * C114) *
                C49311 +
            ((C8390 + C8391 + C8392) * C49047 +
             (C8393 + C8394 + C8395) * C114) *
                C49343 +
            ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
              C7967 * C426 + C7961 * C434) *
                 C49047 +
             (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
              C7967 * C416 + C7961 * C427) *
                 C114) *
                C49356) *
               C49321) *
              C268 +
          ((((C7967 * C722 + C7961 * C727 + C7968 * C1519 + C7962 * C1526 +
              C7969 * C1983 + C49324 * C1986) *
                 C114 +
             (C7967 * C728 + C7961 * C737 + C7968 * C1525 + C7962 * C1531 +
              C7969 * C1987 + C49324 * C1992) *
                 C49047) *
                C49356 +
            ((C7967 * C723 + C7961 * C729 + C7968 * C1518 + C7962 * C1524 +
              C7969 * C1984 + C49324 * C1988) *
                 C114 +
             (C7967 * C730 + C7961 * C738 + C7968 * C1523 + C7962 * C1530 +
              C7969 * C1989 + C49324 * C1993) *
                 C49047) *
                C49343 +
            ((C7967 * C724 + C7961 * C731 + C7968 * C1517 + C7962 * C1522 +
              C7969 * C1985 + C49324 * C1990) *
                 C114 +
             (C7967 * C732 + C7961 * C739 + C7968 * C1521 + C7962 * C1529 +
              C7969 * C1991 + C49324 * C1994) *
                 C49047) *
                C49311) *
               C49321 -
           (((C8202 + C8203 + C8204) * C49047 +
             (C8205 + C8206 + C8207) * C114) *
                C49311 +
            ((C8208 + C8209 + C8210) * C49047 +
             (C8211 + C8212 + C8213) * C114) *
                C49343 +
            ((C7969 * C1327 + C49324 * C1333 + C7968 * C626 + C7962 * C635 +
              C7967 * C286 + C7961 * C294) *
                 C49047 +
             (C7969 * C1321 + C49324 * C1328 + C7968 * C620 + C7962 * C625 +
              C7967 * C276 + C7961 * C287) *
                 C114) *
                C49356) *
               C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
             C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
             C9271 * C1825 + C9265 * C1828) *
                C114 +
            (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
             C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
             C9271 * C1829 + C9265 * C1834) *
                C49047) *
               C48935 * C824 -
           ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
             C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
             C9267 * C426 + C9261 * C434) *
                C49047 +
            (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
             C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
             C9267 * C416 + C9261 * C427) *
                C114) *
               C48935 * C49321) *
              C268 +
          (((C9267 * C722 + C9261 * C727 + C9268 * C1519 + C9262 * C1526 +
             C9269 * C1983 + C9263 * C1986 + C9270 * C9444 + C9264 * C9447 +
             C9271 * C9682 + C9265 * C9683) *
                C114 +
            (C9267 * C728 + C9261 * C737 + C9268 * C1525 + C9262 * C1531 +
             C9269 * C1987 + C9263 * C1992 + C9270 * C9446 + C9264 * C9450 +
             C9271 * C9684 + C9265 * C9685) *
                C49047) *
               C48935 * C49321 -
           ((C9271 * C9356 + C9265 * C9360 + C9270 * C1829 + C9264 * C1834 +
             C9269 * C1327 + C9263 * C1333 + C9268 * C626 + C9262 * C635 +
             C9267 * C286 + C9261 * C294) *
                C49047 +
            (C9271 * C9354 + C9265 * C9357 + C9270 * C1825 + C9264 * C1828 +
             C9269 * C1321 + C9263 * C1328 + C9268 * C620 + C9262 * C625 +
             C9267 * C276 + C9261 * C287) *
                C114) *
               C48935 * C824) *
              C49319) *
         C48968) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C49030 * C122) * C114 +
            (C113 * C123 + C49030 * C136) * C49047) *
               C103 +
           (C174 + C175) * C104 + C184 * C105 + C185 * C106 + C186 * C107) *
              C970 -
          ((C461 + C462) * C107 + (C463 + C464) * C106 + (C465 + C466) * C105 +
           (C467 + C468) * C104 +
           ((C113 * C426 + C49030 * C434) * C49047 +
            (C113 * C416 + C49030 * C427) * C114) *
               C103) *
              C971 +
          (((C113 * C973 + C49030 * C978) * C114 +
            (C113 * C979 + C49030 * C988) * C49047) *
               C103 +
           ((C113 * C974 + C49030 * C980) * C114 +
            (C113 * C981 + C49030 * C989) * C49047) *
               C104 +
           ((C113 * C975 + C49030 * C982) * C114 +
            (C113 * C983 + C49030 * C990) * C49047) *
               C105 +
           ((C113 * C976 + C49030 * C984) * C114 +
            (C113 * C985 + C49030 * C991) * C49047) *
               C106 +
           ((C113 * C977 + C49030 * C986) * C114 +
            (C113 * C987 + C49030 * C992) * C49047) *
               C107) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1109 * C115 + C49359 * C122 + C1110 * C276 + C49347 * C287 +
             C1111 * C620 + C49324 * C625) *
                C114 +
            (C1109 * C123 + C49359 * C136 + C1110 * C286 + C49347 * C294 +
             C1111 * C626 + C49324 * C635) *
                C49047) *
               C1106 +
           ((C1149 + C1150 + C1151) * C114 + (C1152 + C1153 + C1154) * C49047) *
               C1107 +
           C1173 * C49311) *
              C970 -
          (((C1558 + C1559 + C1560) * C49047 + (C1561 + C1562 + C1563) * C114) *
               C49311 +
           ((C1564 + C1565 + C1566) * C49047 + (C1567 + C1568 + C1569) * C114) *
               C1107 +
           ((C1111 * C1525 + C49324 * C1531 + C1110 * C728 + C49347 * C737 +
             C1109 * C426 + C49359 * C434) *
                C49047 +
            (C1111 * C1519 + C49324 * C1526 + C1110 * C722 + C49347 * C727 +
             C1109 * C416 + C49359 * C427) *
                C114) *
               C1106) *
              C971 +
          (((C1109 * C973 + C49359 * C978 + C1110 * C2397 + C49347 * C2403 +
             C1111 * C2398 + C49324 * C2404) *
                C114 +
            (C1109 * C979 + C49359 * C988 + C1110 * C2405 + C49347 * C2415 +
             C1111 * C2406 + C49324 * C2416) *
                C49047) *
               C1106 +
           ((C1109 * C974 + C49359 * C980 + C1110 * C2399 + C49347 * C2407 +
             C1111 * C2400 + C49324 * C2408) *
                C114 +
            (C1109 * C981 + C49359 * C989 + C1110 * C2409 + C49347 * C2417 +
             C1111 * C2410 + C49324 * C2418) *
                C49047) *
               C1107 +
           ((C1109 * C975 + C49359 * C982 + C1110 * C2401 + C49347 * C2411 +
             C1111 * C2402 + C49324 * C2412) *
                C114 +
            (C1109 * C983 + C49359 * C990 + C1110 * C2413 + C49347 * C2419 +
             C1111 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7967 * C115 + C7961 * C122 + C7968 * C276 + C7962 * C287 +
             C7969 * C620 + C49324 * C625) *
                C114 +
            (C7967 * C123 + C7961 * C136 + C7968 * C286 + C7962 * C294 +
             C7969 * C626 + C49324 * C635) *
                C49047) *
               C49356 +
           ((C8007 + C8008 + C8009) * C114 + (C8010 + C8011 + C8012) * C49047) *
               C49343 +
           C8031 * C49311) *
              C970 -
          (((C8384 + C8385 + C8386) * C49047 + (C8387 + C8388 + C8389) * C114) *
               C49311 +
           ((C8390 + C8391 + C8392) * C49047 + (C8393 + C8394 + C8395) * C114) *
               C49343 +
           ((C7969 * C1525 + C49324 * C1531 + C7968 * C728 + C7962 * C737 +
             C7967 * C426 + C7961 * C434) *
                C49047 +
            (C7969 * C1519 + C49324 * C1526 + C7968 * C722 + C7962 * C727 +
             C7967 * C416 + C7961 * C427) *
                C114) *
               C49356) *
              C971 +
          (((C7967 * C973 + C7961 * C978 + C7968 * C2397 + C7962 * C2403 +
             C7969 * C2398 + C49324 * C2404) *
                C114 +
            (C7967 * C979 + C7961 * C988 + C7968 * C2405 + C7962 * C2415 +
             C7969 * C2406 + C49324 * C2416) *
                C49047) *
               C49356 +
           ((C7967 * C974 + C7961 * C980 + C7968 * C2399 + C7962 * C2407 +
             C7969 * C2400 + C49324 * C2408) *
                C114 +
            (C7967 * C981 + C7961 * C989 + C7968 * C2409 + C7962 * C2417 +
             C7969 * C2410 + C49324 * C2418) *
                C49047) *
               C49343 +
           ((C7967 * C975 + C7961 * C982 + C7968 * C2401 + C7962 * C2411 +
             C7969 * C2402 + C49324 * C2412) *
                C114 +
            (C7967 * C983 + C7961 * C990 + C7968 * C2413 + C7962 * C2419 +
             C7969 * C2414 + C49324 * C2420) *
                C49047) *
               C49311) *
              C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9267 * C115 + C9261 * C122 + C9268 * C276 + C9262 * C287 +
            C9269 * C620 + C9263 * C625 + C9270 * C1321 + C9264 * C1328 +
            C9271 * C1825 + C9265 * C1828) *
               C114 +
           (C9267 * C123 + C9261 * C136 + C9268 * C286 + C9262 * C294 +
            C9269 * C626 + C9263 * C635 + C9270 * C1327 + C9264 * C1333 +
            C9271 * C1829 + C9265 * C1834) *
               C49047) *
              C48935 * C970 -
          ((C9271 * C9446 + C9265 * C9450 + C9270 * C1987 + C9264 * C1992 +
            C9269 * C1525 + C9263 * C1531 + C9268 * C728 + C9262 * C737 +
            C9267 * C426 + C9261 * C434) *
               C49047 +
           (C9271 * C9444 + C9265 * C9447 + C9270 * C1983 + C9264 * C1986 +
            C9269 * C1519 + C9263 * C1526 + C9268 * C722 + C9262 * C727 +
            C9267 * C416 + C9261 * C427) *
               C114) *
              C48935 * C971 +
          ((C9267 * C973 + C9261 * C978 + C9268 * C2397 + C9262 * C2403 +
            C9269 * C2398 + C9263 * C2404 + C9270 * C9912 + C9264 * C9914 +
            C9271 * C9913 + C9265 * C9915) *
               C114 +
           (C9267 * C979 + C9261 * C988 + C9268 * C2405 + C9262 * C2415 +
            C9269 * C2406 + C9263 * C2416 + C9270 * C9916 + C9264 * C9918 +
            C9271 * C9917 + C9265 * C9919) *
               C49047) *
              C48935 * C972) *
         C49002 * C48968) /
            (p * q * std::sqrt(p + q));
}
